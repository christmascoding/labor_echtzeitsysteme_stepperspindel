
stepper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000102fc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000eac  080104d0  080104d0  000114d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801137c  0801137c  000131dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801137c  0801137c  0001237c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011384  08011384  000131dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08011384  08011384  00012384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801138c  0801138c  0001238c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  08011390  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000460  200001dc  0801156c  000131dc  2**2
                  ALLOC
 10 ._user_heap_stack 00038004  2000063c  0801156c  0001363c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000131dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019457  00000000  00000000  0001320c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037fc  00000000  00000000  0002c663  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016b8  00000000  00000000  0002fe60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011eb  00000000  00000000  00031518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000476b  00000000  00000000  00032703  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001db24  00000000  00000000  00036e6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010694d  00000000  00000000  00054992  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015b2df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000765c  00000000  00000000  0015b324  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b5  00000000  00000000  00162980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080104b4 	.word	0x080104b4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	080104b4 	.word	0x080104b4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cdc:	f000 b9be 	b.w	800105c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	468e      	mov	lr, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	4688      	mov	r8, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d962      	bls.n	8000e40 <__udivmoddi4+0xdc>
 8000d7a:	fab2 f682 	clz	r6, r2
 8000d7e:	b14e      	cbz	r6, 8000d94 <__udivmoddi4+0x30>
 8000d80:	f1c6 0320 	rsb	r3, r6, #32
 8000d84:	fa01 f806 	lsl.w	r8, r1, r6
 8000d88:	fa20 f303 	lsr.w	r3, r0, r3
 8000d8c:	40b7      	lsls	r7, r6
 8000d8e:	ea43 0808 	orr.w	r8, r3, r8
 8000d92:	40b4      	lsls	r4, r6
 8000d94:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d98:	fa1f fc87 	uxth.w	ip, r7
 8000d9c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000da0:	0c23      	lsrs	r3, r4, #16
 8000da2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000da6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000daa:	fb01 f20c 	mul.w	r2, r1, ip
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db2:	18fb      	adds	r3, r7, r3
 8000db4:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000db8:	f080 80ea 	bcs.w	8000f90 <__udivmoddi4+0x22c>
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	f240 80e7 	bls.w	8000f90 <__udivmoddi4+0x22c>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	443b      	add	r3, r7
 8000dc6:	1a9a      	subs	r2, r3, r2
 8000dc8:	b2a3      	uxth	r3, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dd6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dda:	459c      	cmp	ip, r3
 8000ddc:	d909      	bls.n	8000df2 <__udivmoddi4+0x8e>
 8000dde:	18fb      	adds	r3, r7, r3
 8000de0:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000de4:	f080 80d6 	bcs.w	8000f94 <__udivmoddi4+0x230>
 8000de8:	459c      	cmp	ip, r3
 8000dea:	f240 80d3 	bls.w	8000f94 <__udivmoddi4+0x230>
 8000dee:	443b      	add	r3, r7
 8000df0:	3802      	subs	r0, #2
 8000df2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df6:	eba3 030c 	sub.w	r3, r3, ip
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11d      	cbz	r5, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40f3      	lsrs	r3, r6
 8000e00:	2200      	movs	r2, #0
 8000e02:	e9c5 3200 	strd	r3, r2, [r5]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d905      	bls.n	8000e1a <__udivmoddi4+0xb6>
 8000e0e:	b10d      	cbz	r5, 8000e14 <__udivmoddi4+0xb0>
 8000e10:	e9c5 0100 	strd	r0, r1, [r5]
 8000e14:	2100      	movs	r1, #0
 8000e16:	4608      	mov	r0, r1
 8000e18:	e7f5      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e1a:	fab3 f183 	clz	r1, r3
 8000e1e:	2900      	cmp	r1, #0
 8000e20:	d146      	bne.n	8000eb0 <__udivmoddi4+0x14c>
 8000e22:	4573      	cmp	r3, lr
 8000e24:	d302      	bcc.n	8000e2c <__udivmoddi4+0xc8>
 8000e26:	4282      	cmp	r2, r0
 8000e28:	f200 8105 	bhi.w	8001036 <__udivmoddi4+0x2d2>
 8000e2c:	1a84      	subs	r4, r0, r2
 8000e2e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e32:	2001      	movs	r0, #1
 8000e34:	4690      	mov	r8, r2
 8000e36:	2d00      	cmp	r5, #0
 8000e38:	d0e5      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e3a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e3e:	e7e2      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	f000 8090 	beq.w	8000f66 <__udivmoddi4+0x202>
 8000e46:	fab2 f682 	clz	r6, r2
 8000e4a:	2e00      	cmp	r6, #0
 8000e4c:	f040 80a4 	bne.w	8000f98 <__udivmoddi4+0x234>
 8000e50:	1a8a      	subs	r2, r1, r2
 8000e52:	0c03      	lsrs	r3, r0, #16
 8000e54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e58:	b280      	uxth	r0, r0
 8000e5a:	b2bc      	uxth	r4, r7
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e62:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e6a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x11e>
 8000e72:	18fb      	adds	r3, r7, r3
 8000e74:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x11c>
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	f200 80e0 	bhi.w	8001040 <__udivmoddi4+0x2dc>
 8000e80:	46c4      	mov	ip, r8
 8000e82:	1a9b      	subs	r3, r3, r2
 8000e84:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e88:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e8c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e90:	fb02 f404 	mul.w	r4, r2, r4
 8000e94:	429c      	cmp	r4, r3
 8000e96:	d907      	bls.n	8000ea8 <__udivmoddi4+0x144>
 8000e98:	18fb      	adds	r3, r7, r3
 8000e9a:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000e9e:	d202      	bcs.n	8000ea6 <__udivmoddi4+0x142>
 8000ea0:	429c      	cmp	r4, r3
 8000ea2:	f200 80ca 	bhi.w	800103a <__udivmoddi4+0x2d6>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000eae:	e7a5      	b.n	8000dfc <__udivmoddi4+0x98>
 8000eb0:	f1c1 0620 	rsb	r6, r1, #32
 8000eb4:	408b      	lsls	r3, r1
 8000eb6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eba:	431f      	orrs	r7, r3
 8000ebc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ec0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ec4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ec8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ecc:	4323      	orrs	r3, r4
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	fa1f fc87 	uxth.w	ip, r7
 8000ed6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eda:	0c1c      	lsrs	r4, r3, #16
 8000edc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ee0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ee4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	fa02 f201 	lsl.w	r2, r2, r1
 8000eee:	d909      	bls.n	8000f04 <__udivmoddi4+0x1a0>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000ef6:	f080 809c 	bcs.w	8001032 <__udivmoddi4+0x2ce>
 8000efa:	45a6      	cmp	lr, r4
 8000efc:	f240 8099 	bls.w	8001032 <__udivmoddi4+0x2ce>
 8000f00:	3802      	subs	r0, #2
 8000f02:	443c      	add	r4, r7
 8000f04:	eba4 040e 	sub.w	r4, r4, lr
 8000f08:	fa1f fe83 	uxth.w	lr, r3
 8000f0c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f10:	fb09 4413 	mls	r4, r9, r3, r4
 8000f14:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f18:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f1c:	45a4      	cmp	ip, r4
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x1ce>
 8000f20:	193c      	adds	r4, r7, r4
 8000f22:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000f26:	f080 8082 	bcs.w	800102e <__udivmoddi4+0x2ca>
 8000f2a:	45a4      	cmp	ip, r4
 8000f2c:	d97f      	bls.n	800102e <__udivmoddi4+0x2ca>
 8000f2e:	3b02      	subs	r3, #2
 8000f30:	443c      	add	r4, r7
 8000f32:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f36:	eba4 040c 	sub.w	r4, r4, ip
 8000f3a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f3e:	4564      	cmp	r4, ip
 8000f40:	4673      	mov	r3, lr
 8000f42:	46e1      	mov	r9, ip
 8000f44:	d362      	bcc.n	800100c <__udivmoddi4+0x2a8>
 8000f46:	d05f      	beq.n	8001008 <__udivmoddi4+0x2a4>
 8000f48:	b15d      	cbz	r5, 8000f62 <__udivmoddi4+0x1fe>
 8000f4a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f4e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f52:	fa04 f606 	lsl.w	r6, r4, r6
 8000f56:	fa22 f301 	lsr.w	r3, r2, r1
 8000f5a:	431e      	orrs	r6, r3
 8000f5c:	40cc      	lsrs	r4, r1
 8000f5e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f62:	2100      	movs	r1, #0
 8000f64:	e74f      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000f66:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f6a:	0c01      	lsrs	r1, r0, #16
 8000f6c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f70:	b280      	uxth	r0, r0
 8000f72:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f76:	463b      	mov	r3, r7
 8000f78:	4638      	mov	r0, r7
 8000f7a:	463c      	mov	r4, r7
 8000f7c:	46b8      	mov	r8, r7
 8000f7e:	46be      	mov	lr, r7
 8000f80:	2620      	movs	r6, #32
 8000f82:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f86:	eba2 0208 	sub.w	r2, r2, r8
 8000f8a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f8e:	e766      	b.n	8000e5e <__udivmoddi4+0xfa>
 8000f90:	4601      	mov	r1, r0
 8000f92:	e718      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000f94:	4610      	mov	r0, r2
 8000f96:	e72c      	b.n	8000df2 <__udivmoddi4+0x8e>
 8000f98:	f1c6 0220 	rsb	r2, r6, #32
 8000f9c:	fa2e f302 	lsr.w	r3, lr, r2
 8000fa0:	40b7      	lsls	r7, r6
 8000fa2:	40b1      	lsls	r1, r6
 8000fa4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fa8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fac:	430a      	orrs	r2, r1
 8000fae:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fb2:	b2bc      	uxth	r4, r7
 8000fb4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fb8:	0c11      	lsrs	r1, r2, #16
 8000fba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fbe:	fb08 f904 	mul.w	r9, r8, r4
 8000fc2:	40b0      	lsls	r0, r6
 8000fc4:	4589      	cmp	r9, r1
 8000fc6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fca:	b280      	uxth	r0, r0
 8000fcc:	d93e      	bls.n	800104c <__udivmoddi4+0x2e8>
 8000fce:	1879      	adds	r1, r7, r1
 8000fd0:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000fd4:	d201      	bcs.n	8000fda <__udivmoddi4+0x276>
 8000fd6:	4589      	cmp	r9, r1
 8000fd8:	d81f      	bhi.n	800101a <__udivmoddi4+0x2b6>
 8000fda:	eba1 0109 	sub.w	r1, r1, r9
 8000fde:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe2:	fb09 f804 	mul.w	r8, r9, r4
 8000fe6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fea:	b292      	uxth	r2, r2
 8000fec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ff0:	4542      	cmp	r2, r8
 8000ff2:	d229      	bcs.n	8001048 <__udivmoddi4+0x2e4>
 8000ff4:	18ba      	adds	r2, r7, r2
 8000ff6:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000ffa:	d2c4      	bcs.n	8000f86 <__udivmoddi4+0x222>
 8000ffc:	4542      	cmp	r2, r8
 8000ffe:	d2c2      	bcs.n	8000f86 <__udivmoddi4+0x222>
 8001000:	f1a9 0102 	sub.w	r1, r9, #2
 8001004:	443a      	add	r2, r7
 8001006:	e7be      	b.n	8000f86 <__udivmoddi4+0x222>
 8001008:	45f0      	cmp	r8, lr
 800100a:	d29d      	bcs.n	8000f48 <__udivmoddi4+0x1e4>
 800100c:	ebbe 0302 	subs.w	r3, lr, r2
 8001010:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001014:	3801      	subs	r0, #1
 8001016:	46e1      	mov	r9, ip
 8001018:	e796      	b.n	8000f48 <__udivmoddi4+0x1e4>
 800101a:	eba7 0909 	sub.w	r9, r7, r9
 800101e:	4449      	add	r1, r9
 8001020:	f1a8 0c02 	sub.w	ip, r8, #2
 8001024:	fbb1 f9fe 	udiv	r9, r1, lr
 8001028:	fb09 f804 	mul.w	r8, r9, r4
 800102c:	e7db      	b.n	8000fe6 <__udivmoddi4+0x282>
 800102e:	4673      	mov	r3, lr
 8001030:	e77f      	b.n	8000f32 <__udivmoddi4+0x1ce>
 8001032:	4650      	mov	r0, sl
 8001034:	e766      	b.n	8000f04 <__udivmoddi4+0x1a0>
 8001036:	4608      	mov	r0, r1
 8001038:	e6fd      	b.n	8000e36 <__udivmoddi4+0xd2>
 800103a:	443b      	add	r3, r7
 800103c:	3a02      	subs	r2, #2
 800103e:	e733      	b.n	8000ea8 <__udivmoddi4+0x144>
 8001040:	f1ac 0c02 	sub.w	ip, ip, #2
 8001044:	443b      	add	r3, r7
 8001046:	e71c      	b.n	8000e82 <__udivmoddi4+0x11e>
 8001048:	4649      	mov	r1, r9
 800104a:	e79c      	b.n	8000f86 <__udivmoddi4+0x222>
 800104c:	eba1 0109 	sub.w	r1, r1, r9
 8001050:	46c4      	mov	ip, r8
 8001052:	fbb1 f9fe 	udiv	r9, r1, lr
 8001056:	fb09 f804 	mul.w	r8, r9, r4
 800105a:	e7c4      	b.n	8000fe6 <__udivmoddi4+0x282>

0800105c <__aeabi_idiv0>:
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop

08001060 <L6474_HelperLock>:


// --------------------------------------------------------------------------------------------------------------------
static inline int L6474_HelperLock(L6474_Handle_t h)
// --------------------------------------------------------------------------------------------------------------------
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
#if defined(LIBL6474_HAS_LOCKING) && LIBL6474_HAS_LOCKING == 1
	return h->platform->lock();
#else
	(void)h;
	return 0;
 8001068:	2300      	movs	r3, #0
#endif
}
 800106a:	4618      	mov	r0, r3
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <L6474_HelperUnlock>:

// --------------------------------------------------------------------------------------------------------------------
static inline void L6474_HelperUnlock(L6474_Handle_t h)
// --------------------------------------------------------------------------------------------------------------------
{
 8001076:	b480      	push	{r7}
 8001078:	b083      	sub	sp, #12
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
#if defined(LIBL6474_HAS_LOCKING) && LIBL6474_HAS_LOCKING == 1
	h->platform->unlock();
#else
	(void)h;
	return;
 800107e:	bf00      	nop
#endif
}
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <L6474_GetStatusCommand>:
}

// --------------------------------------------------------------------------------------------------------------------
static int L6474_GetStatusCommand(L6474_Handle_t h)
// --------------------------------------------------------------------------------------------------------------------
{
 800108a:	b590      	push	{r4, r7, lr}
 800108c:	b087      	sub	sp, #28
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
	if ( h->state == stRESET )
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d102      	bne.n	80010a0 <L6474_GetStatusCommand+0x16>
		return errcINV_STATE;
 800109a:	f06f 0302 	mvn.w	r3, #2
 800109e:	e034      	b.n	800110a <L6474_GetStatusCommand+0x80>

	int length = STEP_CMD_STA_LENGTH;
 80010a0:	2303      	movs	r3, #3
 80010a2:	617b      	str	r3, [r7, #20]

	unsigned char rxBuff[STEP_CMD_STA_LENGTH] = { 0 };
 80010a4:	f107 030c 	add.w	r3, r7, #12
 80010a8:	2100      	movs	r1, #0
 80010aa:	460a      	mov	r2, r1
 80010ac:	801a      	strh	r2, [r3, #0]
 80010ae:	460a      	mov	r2, r1
 80010b0:	709a      	strb	r2, [r3, #2]
	unsigned char txBuff[STEP_CMD_STA_LENGTH] = { 0 };
 80010b2:	f107 0308 	add.w	r3, r7, #8
 80010b6:	2100      	movs	r1, #0
 80010b8:	460a      	mov	r2, r1
 80010ba:	801a      	strh	r2, [r3, #0]
 80010bc:	460a      	mov	r2, r1
 80010be:	709a      	strb	r2, [r3, #2]

	txBuff[0] = STEP_CMD_STA_PREFIX | 0;
 80010c0:	23d0      	movs	r3, #208	@ 0xd0
 80010c2:	723b      	strb	r3, [r7, #8]
	int ret = h->platform->transfer(h->pIO, (char*)rxBuff, (const char*)txBuff, length);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	695b      	ldr	r3, [r3, #20]
 80010c8:	689c      	ldr	r4, [r3, #8]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6898      	ldr	r0, [r3, #8]
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	f107 0208 	add.w	r2, r7, #8
 80010d4:	f107 010c 	add.w	r1, r7, #12
 80010d8:	47a0      	blx	r4
 80010da:	6138      	str	r0, [r7, #16]

	if ( ret != 0 )
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d002      	beq.n	80010e8 <L6474_GetStatusCommand+0x5e>
		return errcINTERNAL;
 80010e2:	f06f 0303 	mvn.w	r3, #3
 80010e6:	e010      	b.n	800110a <L6474_GetStatusCommand+0x80>

	ret = (rxBuff[2] << 0 ) | (rxBuff[1] << 8 );
 80010e8:	7bbb      	ldrb	r3, [r7, #14]
 80010ea:	461a      	mov	r2, r3
 80010ec:	7b7b      	ldrb	r3, [r7, #13]
 80010ee:	021b      	lsls	r3, r3, #8
 80010f0:	4313      	orrs	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
	h->state = ( ret & STATUS_HIGHZ_MASK ) ? stDISABLED : stENABLED;
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <L6474_GetStatusCommand+0x78>
 80010fe:	2201      	movs	r2, #1
 8001100:	e000      	b.n	8001104 <L6474_GetStatusCommand+0x7a>
 8001102:	2202      	movs	r2, #2
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	701a      	strb	r2, [r3, #0]
	return ret;
 8001108:	693b      	ldr	r3, [r7, #16]
}
 800110a:	4618      	mov	r0, r3
 800110c:	371c      	adds	r7, #28
 800110e:	46bd      	mov	sp, r7
 8001110:	bd90      	pop	{r4, r7, pc}
	...

08001114 <L6474_GetParamCommand>:
}

// --------------------------------------------------------------------------------------------------------------------
static int L6474_GetParamCommand(L6474_Handle_t h, int addr)
// --------------------------------------------------------------------------------------------------------------------
{
 8001114:	b590      	push	{r4, r7, lr}
 8001116:	b08b      	sub	sp, #44	@ 0x2c
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]
	addr &= STEP_REG_RANGE_MASK;
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	f003 031f 	and.w	r3, r3, #31
 8001124:	603b      	str	r3, [r7, #0]
	if( L6474_Parameters[addr].defined == 0 )
 8001126:	4a52      	ldr	r2, [pc, #328]	@ (8001270 <L6474_GetParamCommand+0x15c>)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	011b      	lsls	r3, r3, #4
 800112c:	4413      	add	r3, r2
 800112e:	3301      	adds	r3, #1
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d102      	bne.n	800113c <L6474_GetParamCommand+0x28>
		return errcINV_ARG;
 8001136:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800113a:	e095      	b.n	8001268 <L6474_GetParamCommand+0x154>

	if( ( L6474_Parameters[addr].flags & afREAD ) == 0 )
 800113c:	4a4c      	ldr	r2, [pc, #304]	@ (8001270 <L6474_GetParamCommand+0x15c>)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	011b      	lsls	r3, r3, #4
 8001142:	4413      	add	r3, r2
 8001144:	330c      	adds	r3, #12
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	f003 0301 	and.w	r3, r3, #1
 800114c:	2b00      	cmp	r3, #0
 800114e:	d102      	bne.n	8001156 <L6474_GetParamCommand+0x42>
		return errcFORBIDDEN;
 8001150:	f06f 0307 	mvn.w	r3, #7
 8001154:	e088      	b.n	8001268 <L6474_GetParamCommand+0x154>

	if ( h->state == stRESET )
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d102      	bne.n	8001164 <L6474_GetParamCommand+0x50>
		return errcINV_STATE;
 800115e:	f06f 0302 	mvn.w	r3, #2
 8001162:	e081      	b.n	8001268 <L6474_GetParamCommand+0x154>

	int length  = L6474_Parameters[addr].length + STEP_CMD_GET_LENGTH;
 8001164:	4a42      	ldr	r2, [pc, #264]	@ (8001270 <L6474_GetParamCommand+0x15c>)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	011b      	lsls	r3, r3, #4
 800116a:	4413      	add	r3, r2
 800116c:	3302      	adds	r3, #2
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	3301      	adds	r3, #1
 8001172:	623b      	str	r3, [r7, #32]
	if ( length > STEP_CMD_GET_MAX_PAYLOAD )
 8001174:	6a3b      	ldr	r3, [r7, #32]
 8001176:	2b04      	cmp	r3, #4
 8001178:	dd02      	ble.n	8001180 <L6474_GetParamCommand+0x6c>
		return errcINTERNAL;
 800117a:	f06f 0303 	mvn.w	r3, #3
 800117e:	e073      	b.n	8001268 <L6474_GetParamCommand+0x154>

	unsigned char rxBuff[STEP_CMD_GET_MAX_PAYLOAD] = { STEP_CMD_NOP_PREFIX };
 8001180:	2300      	movs	r3, #0
 8001182:	613b      	str	r3, [r7, #16]
	unsigned char txBuff[STEP_CMD_GET_MAX_PAYLOAD] = { STEP_CMD_NOP_PREFIX };
 8001184:	2300      	movs	r3, #0
 8001186:	60fb      	str	r3, [r7, #12]

	txBuff[0] = STEP_CMD_GET_PREFIX | addr;
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	b25b      	sxtb	r3, r3
 800118c:	f043 0320 	orr.w	r3, r3, #32
 8001190:	b25b      	sxtb	r3, r3
 8001192:	b2db      	uxtb	r3, r3
 8001194:	733b      	strb	r3, [r7, #12]
	int ret = h->platform->transfer(h->pIO, (char*)rxBuff, (const char*)txBuff, length);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	695b      	ldr	r3, [r3, #20]
 800119a:	689c      	ldr	r4, [r3, #8]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6898      	ldr	r0, [r3, #8]
 80011a0:	6a3b      	ldr	r3, [r7, #32]
 80011a2:	f107 020c 	add.w	r2, r7, #12
 80011a6:	f107 0110 	add.w	r1, r7, #16
 80011aa:	47a0      	blx	r4
 80011ac:	61f8      	str	r0, [r7, #28]

	if ( ret != 0 )
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d002      	beq.n	80011ba <L6474_GetParamCommand+0xa6>
		return errcINTERNAL;
 80011b4:	f06f 0303 	mvn.w	r3, #3
 80011b8:	e056      	b.n	8001268 <L6474_GetParamCommand+0x154>

	int res = errcNONE;
 80011ba:	2300      	movs	r3, #0
 80011bc:	627b      	str	r3, [r7, #36]	@ 0x24
	unsigned int tmp = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	61bb      	str	r3, [r7, #24]
	switch (L6474_Parameters[addr].length)
 80011c2:	4a2b      	ldr	r2, [pc, #172]	@ (8001270 <L6474_GetParamCommand+0x15c>)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	011b      	lsls	r3, r3, #4
 80011c8:	4413      	add	r3, r2
 80011ca:	3302      	adds	r3, #2
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	2b03      	cmp	r3, #3
 80011d0:	d021      	beq.n	8001216 <L6474_GetParamCommand+0x102>
 80011d2:	2b03      	cmp	r3, #3
 80011d4:	dc31      	bgt.n	800123a <L6474_GetParamCommand+0x126>
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d002      	beq.n	80011e0 <L6474_GetParamCommand+0xcc>
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d00c      	beq.n	80011f8 <L6474_GetParamCommand+0xe4>
 80011de:	e02c      	b.n	800123a <L6474_GetParamCommand+0x126>
	{
	    case 1:
	    	tmp = ( rxBuff[1] << 0 );
 80011e0:	7c7b      	ldrb	r3, [r7, #17]
 80011e2:	61bb      	str	r3, [r7, #24]
	    	res = tmp & L6474_Parameters[addr].mask;
 80011e4:	4a22      	ldr	r2, [pc, #136]	@ (8001270 <L6474_GetParamCommand+0x15c>)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	011b      	lsls	r3, r3, #4
 80011ea:	4413      	add	r3, r2
 80011ec:	3304      	adds	r3, #4
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	4013      	ands	r3, r2
 80011f4:	627b      	str	r3, [r7, #36]	@ 0x24
	    	break;
 80011f6:	e023      	b.n	8001240 <L6474_GetParamCommand+0x12c>
	    case 2:
	    	tmp = ( rxBuff[1] << 8 | rxBuff[2] << 0 );
 80011f8:	7c7b      	ldrb	r3, [r7, #17]
 80011fa:	021b      	lsls	r3, r3, #8
 80011fc:	7cba      	ldrb	r2, [r7, #18]
 80011fe:	4313      	orrs	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
	    	res = tmp & L6474_Parameters[addr].mask;
 8001202:	4a1b      	ldr	r2, [pc, #108]	@ (8001270 <L6474_GetParamCommand+0x15c>)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	011b      	lsls	r3, r3, #4
 8001208:	4413      	add	r3, r2
 800120a:	3304      	adds	r3, #4
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	4013      	ands	r3, r2
 8001212:	627b      	str	r3, [r7, #36]	@ 0x24
	    	//res = ( ( tmp & 0xFF00 ) >> 8 ) | ( ( tmp & 0x00FF ) << 8 );
	    	break;
 8001214:	e014      	b.n	8001240 <L6474_GetParamCommand+0x12c>
	    case 3:
	    	tmp = ( rxBuff[1] << 16 | rxBuff[2] << 8 | rxBuff[3] << 0 );
 8001216:	7c7b      	ldrb	r3, [r7, #17]
 8001218:	041a      	lsls	r2, r3, #16
 800121a:	7cbb      	ldrb	r3, [r7, #18]
 800121c:	021b      	lsls	r3, r3, #8
 800121e:	4313      	orrs	r3, r2
 8001220:	7cfa      	ldrb	r2, [r7, #19]
 8001222:	4313      	orrs	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
	    	res = tmp & L6474_Parameters[addr].mask;
 8001226:	4a12      	ldr	r2, [pc, #72]	@ (8001270 <L6474_GetParamCommand+0x15c>)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	011b      	lsls	r3, r3, #4
 800122c:	4413      	add	r3, r2
 800122e:	3304      	adds	r3, #4
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	4013      	ands	r3, r2
 8001236:	627b      	str	r3, [r7, #36]	@ 0x24
	    	//res = ( ( tmp & 0xFF0000 ) >> 16 ) | ( ( tmp & 0x00FF00 ) << 0 ) | ( ( tmp & 0x0000FF ) << 16 );
	    	break;
 8001238:	e002      	b.n	8001240 <L6474_GetParamCommand+0x12c>
	    default:
	    	return errcINTERNAL;
 800123a:	f06f 0303 	mvn.w	r3, #3
 800123e:	e013      	b.n	8001268 <L6474_GetParamCommand+0x154>
	}

	int opres = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]
	if ( ( opres = L6474_GetStatusCommand(h) ) < 0 )
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f7ff ff20 	bl	800108a <L6474_GetStatusCommand>
 800124a:	6178      	str	r0, [r7, #20]
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	2b00      	cmp	r3, #0
 8001250:	da01      	bge.n	8001256 <L6474_GetParamCommand+0x142>
		return opres;
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	e008      	b.n	8001268 <L6474_GetParamCommand+0x154>

	if ( (opres & ( STATUS_NOTPERF_CMD_MASK | STATUS_WRONG_CMD_MASK ) ) != 0 )
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800125c:	2b00      	cmp	r3, #0
 800125e:	d002      	beq.n	8001266 <L6474_GetParamCommand+0x152>
		return errcDEVICE_STATE;
 8001260:	f06f 0305 	mvn.w	r3, #5
 8001264:	e000      	b.n	8001268 <L6474_GetParamCommand+0x154>

	return res;
 8001266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001268:	4618      	mov	r0, r3
 800126a:	372c      	adds	r7, #44	@ 0x2c
 800126c:	46bd      	mov	sp, r7
 800126e:	bd90      	pop	{r4, r7, pc}
 8001270:	08010d34 	.word	0x08010d34

08001274 <L6474_SetParamCommand>:

// --------------------------------------------------------------------------------------------------------------------
static int L6474_SetParamCommand(L6474_Handle_t h, int addr, int value)
// --------------------------------------------------------------------------------------------------------------------
{
 8001274:	b590      	push	{r4, r7, lr}
 8001276:	b08b      	sub	sp, #44	@ 0x2c
 8001278:	af00      	add	r7, sp, #0
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	60b9      	str	r1, [r7, #8]
 800127e:	607a      	str	r2, [r7, #4]
	addr &= STEP_REG_RANGE_MASK;
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	f003 031f 	and.w	r3, r3, #31
 8001286:	60bb      	str	r3, [r7, #8]
	if( L6474_Parameters[addr].defined == 0 )
 8001288:	4a59      	ldr	r2, [pc, #356]	@ (80013f0 <L6474_SetParamCommand+0x17c>)
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	011b      	lsls	r3, r3, #4
 800128e:	4413      	add	r3, r2
 8001290:	3301      	adds	r3, #1
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d102      	bne.n	800129e <L6474_SetParamCommand+0x2a>
		return errcINV_ARG;
 8001298:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800129c:	e0a3      	b.n	80013e6 <L6474_SetParamCommand+0x172>

	if( ( L6474_Parameters[addr].flags & ( afWRITE | afWRITE_HighZ ) ) == 0 )
 800129e:	4a54      	ldr	r2, [pc, #336]	@ (80013f0 <L6474_SetParamCommand+0x17c>)
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	011b      	lsls	r3, r3, #4
 80012a4:	4413      	add	r3, r2
 80012a6:	330c      	adds	r3, #12
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	f003 0306 	and.w	r3, r3, #6
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d102      	bne.n	80012b8 <L6474_SetParamCommand+0x44>
		return errcFORBIDDEN;
 80012b2:	f06f 0307 	mvn.w	r3, #7
 80012b6:	e096      	b.n	80013e6 <L6474_SetParamCommand+0x172>

	if ( ( h->state == stRESET ) || ( ( h->state == stENABLED ) && ( ( L6474_Parameters[addr].flags & afWRITE_HighZ ) != 0 ) ) )
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d00d      	beq.n	80012dc <L6474_SetParamCommand+0x68>
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d10c      	bne.n	80012e2 <L6474_SetParamCommand+0x6e>
 80012c8:	4a49      	ldr	r2, [pc, #292]	@ (80013f0 <L6474_SetParamCommand+0x17c>)
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	011b      	lsls	r3, r3, #4
 80012ce:	4413      	add	r3, r2
 80012d0:	330c      	adds	r3, #12
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	f003 0304 	and.w	r3, r3, #4
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d002      	beq.n	80012e2 <L6474_SetParamCommand+0x6e>
		return errcINV_STATE;
 80012dc:	f06f 0302 	mvn.w	r3, #2
 80012e0:	e081      	b.n	80013e6 <L6474_SetParamCommand+0x172>

	int length  = L6474_Parameters[addr].length + STEP_CMD_SET_LENGTH;
 80012e2:	4a43      	ldr	r2, [pc, #268]	@ (80013f0 <L6474_SetParamCommand+0x17c>)
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	011b      	lsls	r3, r3, #4
 80012e8:	4413      	add	r3, r2
 80012ea:	3302      	adds	r3, #2
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	3301      	adds	r3, #1
 80012f0:	627b      	str	r3, [r7, #36]	@ 0x24
	if ( length > STEP_CMD_SET_MAX_PAYLOAD )
 80012f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012f4:	2b04      	cmp	r3, #4
 80012f6:	dd02      	ble.n	80012fe <L6474_SetParamCommand+0x8a>
		return errcINTERNAL;
 80012f8:	f06f 0303 	mvn.w	r3, #3
 80012fc:	e073      	b.n	80013e6 <L6474_SetParamCommand+0x172>

	unsigned char rxBuff[STEP_CMD_SET_MAX_PAYLOAD] = { 0 };
 80012fe:	2300      	movs	r3, #0
 8001300:	617b      	str	r3, [r7, #20]
	unsigned char txBuff[STEP_CMD_SET_MAX_PAYLOAD] = { 0 };
 8001302:	2300      	movs	r3, #0
 8001304:	613b      	str	r3, [r7, #16]
	unsigned int  tmp = 0;
 8001306:	2300      	movs	r3, #0
 8001308:	623b      	str	r3, [r7, #32]

	txBuff[0] = STEP_CMD_SET_PREFIX | addr;
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	b2db      	uxtb	r3, r3
 800130e:	743b      	strb	r3, [r7, #16]

	switch (L6474_Parameters[addr].length)
 8001310:	4a37      	ldr	r2, [pc, #220]	@ (80013f0 <L6474_SetParamCommand+0x17c>)
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	011b      	lsls	r3, r3, #4
 8001316:	4413      	add	r3, r2
 8001318:	3302      	adds	r3, #2
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2b03      	cmp	r3, #3
 800131e:	d024      	beq.n	800136a <L6474_SetParamCommand+0xf6>
 8001320:	2b03      	cmp	r3, #3
 8001322:	dc37      	bgt.n	8001394 <L6474_SetParamCommand+0x120>
 8001324:	2b01      	cmp	r3, #1
 8001326:	d002      	beq.n	800132e <L6474_SetParamCommand+0xba>
 8001328:	2b02      	cmp	r3, #2
 800132a:	d00d      	beq.n	8001348 <L6474_SetParamCommand+0xd4>
 800132c:	e032      	b.n	8001394 <L6474_SetParamCommand+0x120>
	{
	    case 1:
	    	tmp = value & L6474_Parameters[addr].mask;
 800132e:	4a30      	ldr	r2, [pc, #192]	@ (80013f0 <L6474_SetParamCommand+0x17c>)
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	011b      	lsls	r3, r3, #4
 8001334:	4413      	add	r3, r2
 8001336:	3304      	adds	r3, #4
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4013      	ands	r3, r2
 800133e:	623b      	str	r3, [r7, #32]
	    	txBuff[1] = tmp >> 0;
 8001340:	6a3b      	ldr	r3, [r7, #32]
 8001342:	b2db      	uxtb	r3, r3
 8001344:	747b      	strb	r3, [r7, #17]
	    	break;
 8001346:	e028      	b.n	800139a <L6474_SetParamCommand+0x126>
	    case 2:
	    	tmp = value & L6474_Parameters[addr].mask;
 8001348:	4a29      	ldr	r2, [pc, #164]	@ (80013f0 <L6474_SetParamCommand+0x17c>)
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	011b      	lsls	r3, r3, #4
 800134e:	4413      	add	r3, r2
 8001350:	3304      	adds	r3, #4
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4013      	ands	r3, r2
 8001358:	623b      	str	r3, [r7, #32]
	    	txBuff[1] = tmp >> 8;
 800135a:	6a3b      	ldr	r3, [r7, #32]
 800135c:	0a1b      	lsrs	r3, r3, #8
 800135e:	b2db      	uxtb	r3, r3
 8001360:	747b      	strb	r3, [r7, #17]
	    	txBuff[2] = tmp >> 0;
 8001362:	6a3b      	ldr	r3, [r7, #32]
 8001364:	b2db      	uxtb	r3, r3
 8001366:	74bb      	strb	r3, [r7, #18]
	    	break;
 8001368:	e017      	b.n	800139a <L6474_SetParamCommand+0x126>
	    case 3:
	    	tmp = value & L6474_Parameters[addr].mask;
 800136a:	4a21      	ldr	r2, [pc, #132]	@ (80013f0 <L6474_SetParamCommand+0x17c>)
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	011b      	lsls	r3, r3, #4
 8001370:	4413      	add	r3, r2
 8001372:	3304      	adds	r3, #4
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4013      	ands	r3, r2
 800137a:	623b      	str	r3, [r7, #32]
	    	txBuff[1] = tmp >> 16;
 800137c:	6a3b      	ldr	r3, [r7, #32]
 800137e:	0c1b      	lsrs	r3, r3, #16
 8001380:	b2db      	uxtb	r3, r3
 8001382:	747b      	strb	r3, [r7, #17]
	    	txBuff[2] = tmp >> 8;
 8001384:	6a3b      	ldr	r3, [r7, #32]
 8001386:	0a1b      	lsrs	r3, r3, #8
 8001388:	b2db      	uxtb	r3, r3
 800138a:	74bb      	strb	r3, [r7, #18]
	    	txBuff[3] = tmp >> 0;
 800138c:	6a3b      	ldr	r3, [r7, #32]
 800138e:	b2db      	uxtb	r3, r3
 8001390:	74fb      	strb	r3, [r7, #19]
	    	break;
 8001392:	e002      	b.n	800139a <L6474_SetParamCommand+0x126>
	    default:
	    	return errcINTERNAL;
 8001394:	f06f 0303 	mvn.w	r3, #3
 8001398:	e025      	b.n	80013e6 <L6474_SetParamCommand+0x172>
	}

	int ret = h->platform->transfer(h->pIO, (char*)rxBuff, (const char*)txBuff, length);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	695b      	ldr	r3, [r3, #20]
 800139e:	689c      	ldr	r4, [r3, #8]
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	6898      	ldr	r0, [r3, #8]
 80013a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a6:	f107 0210 	add.w	r2, r7, #16
 80013aa:	f107 0114 	add.w	r1, r7, #20
 80013ae:	47a0      	blx	r4
 80013b0:	61f8      	str	r0, [r7, #28]

	if ( ret != 0 )
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d002      	beq.n	80013be <L6474_SetParamCommand+0x14a>
		return errcINTERNAL;
 80013b8:	f06f 0303 	mvn.w	r3, #3
 80013bc:	e013      	b.n	80013e6 <L6474_SetParamCommand+0x172>

	int res = 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	61bb      	str	r3, [r7, #24]
	if ( ( res = L6474_GetStatusCommand(h) ) < 0 )
 80013c2:	68f8      	ldr	r0, [r7, #12]
 80013c4:	f7ff fe61 	bl	800108a <L6474_GetStatusCommand>
 80013c8:	61b8      	str	r0, [r7, #24]
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	da01      	bge.n	80013d4 <L6474_SetParamCommand+0x160>
		return res;
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	e008      	b.n	80013e6 <L6474_SetParamCommand+0x172>

	if ( ( res & ( STATUS_NOTPERF_CMD_MASK | STATUS_WRONG_CMD_MASK ) ) != 0 )
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d002      	beq.n	80013e4 <L6474_SetParamCommand+0x170>
		return errcDEVICE_STATE;
 80013de:	f06f 0305 	mvn.w	r3, #5
 80013e2:	e000      	b.n	80013e6 <L6474_SetParamCommand+0x172>

	return errcNONE;
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	372c      	adds	r7, #44	@ 0x2c
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd90      	pop	{r4, r7, pc}
 80013ee:	bf00      	nop
 80013f0:	08010d34 	.word	0x08010d34

080013f4 <L6474_EnableCommand>:

// --------------------------------------------------------------------------------------------------------------------
static int L6474_EnableCommand(L6474_Handle_t h)
// --------------------------------------------------------------------------------------------------------------------
{
 80013f4:	b590      	push	{r4, r7, lr}
 80013f6:	b087      	sub	sp, #28
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
	if ( h->state == stRESET )
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d102      	bne.n	800140a <L6474_EnableCommand+0x16>
		return errcINV_STATE;
 8001404:	f06f 0302 	mvn.w	r3, #2
 8001408:	e034      	b.n	8001474 <L6474_EnableCommand+0x80>

	if ( h->state == stENABLED )
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	2b02      	cmp	r3, #2
 8001410:	d101      	bne.n	8001416 <L6474_EnableCommand+0x22>
		return errcNONE;
 8001412:	2300      	movs	r3, #0
 8001414:	e02e      	b.n	8001474 <L6474_EnableCommand+0x80>

	int length = STEP_CMD_ENA_LENGTH;
 8001416:	2301      	movs	r3, #1
 8001418:	617b      	str	r3, [r7, #20]

	unsigned char rxBuff[STEP_CMD_ENA_LENGTH] = { 0 };
 800141a:	2300      	movs	r3, #0
 800141c:	733b      	strb	r3, [r7, #12]
	unsigned char txBuff[STEP_CMD_ENA_LENGTH] = { 0 };
 800141e:	2300      	movs	r3, #0
 8001420:	723b      	strb	r3, [r7, #8]

	txBuff[0] = STEP_CMD_ENA_PREFIX | 0;
 8001422:	23b8      	movs	r3, #184	@ 0xb8
 8001424:	723b      	strb	r3, [r7, #8]
	int ret = h->platform->transfer(h->pIO, (char*)rxBuff, (const char*)txBuff, length);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	689c      	ldr	r4, [r3, #8]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6898      	ldr	r0, [r3, #8]
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	f107 0208 	add.w	r2, r7, #8
 8001436:	f107 010c 	add.w	r1, r7, #12
 800143a:	47a0      	blx	r4
 800143c:	6138      	str	r0, [r7, #16]

	if ( ret != 0 )
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d002      	beq.n	800144a <L6474_EnableCommand+0x56>
		return errcINTERNAL;
 8001444:	f06f 0303 	mvn.w	r3, #3
 8001448:	e014      	b.n	8001474 <L6474_EnableCommand+0x80>

	if ( ( ret = L6474_GetStatusCommand(h) ) < 0 )
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f7ff fe1d 	bl	800108a <L6474_GetStatusCommand>
 8001450:	6138      	str	r0, [r7, #16]
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	2b00      	cmp	r3, #0
 8001456:	da01      	bge.n	800145c <L6474_EnableCommand+0x68>
		return ret;
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	e00b      	b.n	8001474 <L6474_EnableCommand+0x80>

	if ( ( ret & ( STATUS_NOTPERF_CMD_MASK | STATUS_WRONG_CMD_MASK ) ) != 0 )
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8001462:	2b00      	cmp	r3, #0
 8001464:	d002      	beq.n	800146c <L6474_EnableCommand+0x78>
		return errcDEVICE_STATE;
 8001466:	f06f 0305 	mvn.w	r3, #5
 800146a:	e003      	b.n	8001474 <L6474_EnableCommand+0x80>

	h->state = stENABLED;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2202      	movs	r2, #2
 8001470:	701a      	strb	r2, [r3, #0]
	return errcNONE;
 8001472:	2300      	movs	r3, #0
}
 8001474:	4618      	mov	r0, r3
 8001476:	371c      	adds	r7, #28
 8001478:	46bd      	mov	sp, r7
 800147a:	bd90      	pop	{r4, r7, pc}

0800147c <L6474_DisableCommand>:

// --------------------------------------------------------------------------------------------------------------------
static int L6474_DisableCommand(L6474_Handle_t h)
// --------------------------------------------------------------------------------------------------------------------
{
 800147c:	b590      	push	{r4, r7, lr}
 800147e:	b087      	sub	sp, #28
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
	if ( h->state == stRESET )
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d102      	bne.n	8001492 <L6474_DisableCommand+0x16>
		return errcINV_STATE;
 800148c:	f06f 0302 	mvn.w	r3, #2
 8001490:	e02e      	b.n	80014f0 <L6474_DisableCommand+0x74>

	int length = STEP_CMD_DIS_LENGTH;
 8001492:	2301      	movs	r3, #1
 8001494:	617b      	str	r3, [r7, #20]

	unsigned char rxBuff[STEP_CMD_DIS_LENGTH] = { 0 };
 8001496:	2300      	movs	r3, #0
 8001498:	733b      	strb	r3, [r7, #12]
	unsigned char txBuff[STEP_CMD_DIS_LENGTH] = { 0 };
 800149a:	2300      	movs	r3, #0
 800149c:	723b      	strb	r3, [r7, #8]

	txBuff[0] = STEP_CMD_DIS_PREFIX | 0;
 800149e:	23a8      	movs	r3, #168	@ 0xa8
 80014a0:	723b      	strb	r3, [r7, #8]
	int ret = h->platform->transfer(h->pIO, (char*)rxBuff, (const char*)txBuff, length);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	695b      	ldr	r3, [r3, #20]
 80014a6:	689c      	ldr	r4, [r3, #8]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6898      	ldr	r0, [r3, #8]
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	f107 0208 	add.w	r2, r7, #8
 80014b2:	f107 010c 	add.w	r1, r7, #12
 80014b6:	47a0      	blx	r4
 80014b8:	6138      	str	r0, [r7, #16]

	if ( ret != 0 )
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d002      	beq.n	80014c6 <L6474_DisableCommand+0x4a>
		return errcINTERNAL;
 80014c0:	f06f 0303 	mvn.w	r3, #3
 80014c4:	e014      	b.n	80014f0 <L6474_DisableCommand+0x74>

	if ( ( ret = L6474_GetStatusCommand(h) ) < 0 )
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f7ff fddf 	bl	800108a <L6474_GetStatusCommand>
 80014cc:	6138      	str	r0, [r7, #16]
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	da01      	bge.n	80014d8 <L6474_DisableCommand+0x5c>
		return ret;
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	e00b      	b.n	80014f0 <L6474_DisableCommand+0x74>

	if ( ( ret & ( STATUS_NOTPERF_CMD_MASK | STATUS_WRONG_CMD_MASK ) ) != 0 )
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d002      	beq.n	80014e8 <L6474_DisableCommand+0x6c>
		return errcDEVICE_STATE;
 80014e2:	f06f 0305 	mvn.w	r3, #5
 80014e6:	e003      	b.n	80014f0 <L6474_DisableCommand+0x74>

	h->state   = stDISABLED;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2201      	movs	r2, #1
 80014ec:	701a      	strb	r2, [r3, #0]
#if defined(LIBL6474_STEP_ASYNC) && ( LIBL6474_STEP_ASYNC == 1 )
	h->pending = 0;
	h->platform->cancelStep(h->pPWM);
#endif
	return errcNONE;
 80014ee:	2300      	movs	r3, #0
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	371c      	adds	r7, #28
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd90      	pop	{r4, r7, pc}

080014f8 <L6474_CreateInstance>:


// --------------------------------------------------------------------------------------------------------------------
L6474_Handle_t L6474_CreateInstance(L6474x_Platform_t* p, void* pIO, void* pGPO, void* pPWM)
// --------------------------------------------------------------------------------------------------------------------
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
 8001504:	603b      	str	r3, [r7, #0]
	if ( p == 0 )
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d101      	bne.n	8001510 <L6474_CreateInstance+0x18>
		return 0;
 800150c:	2300      	movs	r3, #0
 800150e:	e040      	b.n	8001592 <L6474_CreateInstance+0x9a>

	if ( ( p->reset == 0 ) || ( p->malloc == 0 ) || (p->free == 0) || (p->sleep == 0) || ( p->transfer == 0 ) )
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d00f      	beq.n	8001538 <L6474_CreateInstance+0x40>
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d00b      	beq.n	8001538 <L6474_CreateInstance+0x40>
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d007      	beq.n	8001538 <L6474_CreateInstance+0x40>
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	691b      	ldr	r3, [r3, #16]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d003      	beq.n	8001538 <L6474_CreateInstance+0x40>
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d101      	bne.n	800153c <L6474_CreateInstance+0x44>
		return 0;
 8001538:	2300      	movs	r3, #0
 800153a:	e02a      	b.n	8001592 <L6474_CreateInstance+0x9a>

#if defined(LIBL6474_STEP_ASYNC) && ( LIBL6474_STEP_ASYNC == 1 )
	if ( ( p->cancelStep == 0 ) || ( p->stepAsync == 0 ) )
		return 0;
#else
	if ( p->step == 0 )
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	695b      	ldr	r3, [r3, #20]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d101      	bne.n	8001548 <L6474_CreateInstance+0x50>
		return 0;
 8001544:	2300      	movs	r3, #0
 8001546:	e024      	b.n	8001592 <L6474_CreateInstance+0x9a>
#endif

	L6474_Handle_t h = p->malloc(sizeof(struct L6474_Handle));
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2018      	movs	r0, #24
 800154e:	4798      	blx	r3
 8001550:	6178      	str	r0, [r7, #20]
	if ( h == 0 )
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d101      	bne.n	800155c <L6474_CreateInstance+0x64>
		return 0;
 8001558:	2300      	movs	r3, #0
 800155a:	e01a      	b.n	8001592 <L6474_CreateInstance+0x9a>

	h->pGPO     = pGPO;
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	60da      	str	r2, [r3, #12]
	h->pIO      = pIO;
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	68ba      	ldr	r2, [r7, #8]
 8001566:	609a      	str	r2, [r3, #8]
	h->pPWM     = pPWM;
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	683a      	ldr	r2, [r7, #0]
 800156c:	611a      	str	r2, [r3, #16]
	h->platform = p;
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	68fa      	ldr	r2, [r7, #12]
 8001572:	615a      	str	r2, [r3, #20]
	h->pending  = 0;
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	2200      	movs	r2, #0
 8001578:	605a      	str	r2, [r3, #4]
	h->state    = stRESET;
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	2200      	movs	r2, #0
 800157e:	701a      	strb	r2, [r3, #0]

	h->platform->reset(h->pGPO, 1);
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	695b      	ldr	r3, [r3, #20]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	697a      	ldr	r2, [r7, #20]
 8001588:	68d2      	ldr	r2, [r2, #12]
 800158a:	2101      	movs	r1, #1
 800158c:	4610      	mov	r0, r2
 800158e:	4798      	blx	r3

	(void)L6474_NopCommand;
	return h;
 8001590:	697b      	ldr	r3, [r7, #20]
}
 8001592:	4618      	mov	r0, r3
 8001594:	3718      	adds	r7, #24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <L6474_ResetStandBy>:


// --------------------------------------------------------------------------------------------------------------------
int L6474_ResetStandBy(L6474_Handle_t h)
// --------------------------------------------------------------------------------------------------------------------
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b084      	sub	sp, #16
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
	if ( h == 0 )
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d102      	bne.n	80015ae <L6474_ResetStandBy+0x14>
		return errcNULL_ARG;
 80015a8:	f06f 0301 	mvn.w	r3, #1
 80015ac:	e031      	b.n	8001612 <L6474_ResetStandBy+0x78>

	if ( L6474_HelperLock(h) != 0 )
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7ff fd56 	bl	8001060 <L6474_HelperLock>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d002      	beq.n	80015c0 <L6474_ResetStandBy+0x26>
		return errcLOCKING;
 80015ba:	f06f 0304 	mvn.w	r3, #4
 80015be:	e028      	b.n	8001612 <L6474_ResetStandBy+0x78>

	// forces the device state to update
	L6474_GetStatusCommand(h);
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f7ff fd62 	bl	800108a <L6474_GetStatusCommand>

	if ( h->state == stENABLED )
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d10d      	bne.n	80015ea <L6474_ResetStandBy+0x50>
			h->platform->sleep(IN_MILLISEC(1));
			h->pending = 0;
		}
#endif

		int ret = 0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	60fb      	str	r3, [r7, #12]
		if ( ( ret = L6474_DisableCommand(h) ) != 0 )
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f7ff ff52 	bl	800147c <L6474_DisableCommand>
 80015d8:	60f8      	str	r0, [r7, #12]
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d004      	beq.n	80015ea <L6474_ResetStandBy+0x50>
		{
			L6474_HelperUnlock(h);
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f7ff fd48 	bl	8001076 <L6474_HelperUnlock>
			return ret;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	e013      	b.n	8001612 <L6474_ResetStandBy+0x78>
		}
	}

	h->platform->reset(h->pGPO, 1);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	695b      	ldr	r3, [r3, #20]
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	68d2      	ldr	r2, [r2, #12]
 80015f4:	2101      	movs	r1, #1
 80015f6:	4610      	mov	r0, r2
 80015f8:	4798      	blx	r3
	h->state = stRESET;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	701a      	strb	r2, [r3, #0]

	h->platform->sleep(IN_MILLISEC(1));
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	695b      	ldr	r3, [r3, #20]
 8001604:	691b      	ldr	r3, [r3, #16]
 8001606:	2001      	movs	r0, #1
 8001608:	4798      	blx	r3
	L6474_HelperUnlock(h);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f7ff fd33 	bl	8001076 <L6474_HelperUnlock>

	return errcNONE;
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <L6474_SetBaseParameter>:


// --------------------------------------------------------------------------------------------------------------------
int L6474_SetBaseParameter(L6474_BaseParameter_t* p)
// --------------------------------------------------------------------------------------------------------------------
{
 800161a:	b480      	push	{r7}
 800161c:	b083      	sub	sp, #12
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
	if ( p == 0 )
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d102      	bne.n	800162e <L6474_SetBaseParameter+0x14>
		return errcNULL_ARG;
 8001628:	f06f 0301 	mvn.w	r3, #1
 800162c:	e012      	b.n	8001654 <L6474_SetBaseParameter+0x3a>

	p->OcdTh      = ocdth1500mA;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2203      	movs	r2, #3
 8001632:	705a      	strb	r2, [r3, #1]
	p->TorqueVal  = 0x26; // ~1,2A
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2226      	movs	r2, #38	@ 0x26
 8001638:	711a      	strb	r2, [r3, #4]
	p->stepMode   = smMICRO16;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2204      	movs	r2, #4
 800163e:	701a      	strb	r2, [r3, #0]
	p->TimeOnMin  = 0x29;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2229      	movs	r2, #41	@ 0x29
 8001644:	709a      	strb	r2, [r3, #2]
	p->TimeOffMin = 0x29;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2229      	movs	r2, #41	@ 0x29
 800164a:	70da      	strb	r2, [r3, #3]
	p->TFast      = 0x14; //0x19
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2214      	movs	r2, #20
 8001650:	715a      	strb	r2, [r3, #5]

	return errcNONE;
 8001652:	2300      	movs	r3, #0
}
 8001654:	4618      	mov	r0, r3
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <L6474_Initialize>:

// --------------------------------------------------------------------------------------------------------------------
int L6474_Initialize(L6474_Handle_t h, L6474_BaseParameter_t* p)
// --------------------------------------------------------------------------------------------------------------------
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
	int val = 0;
 800166a:	2300      	movs	r3, #0
 800166c:	60fb      	str	r3, [r7, #12]

	if ( h == 0 || p == 0 )
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d002      	beq.n	800167a <L6474_Initialize+0x1a>
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d102      	bne.n	8001680 <L6474_Initialize+0x20>
		return errcNULL_ARG;
 800167a:	f06f 0301 	mvn.w	r3, #1
 800167e:	e13c      	b.n	80018fa <L6474_Initialize+0x29a>

	if ( L6474_HelperLock(h) != 0 )
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f7ff fced 	bl	8001060 <L6474_HelperLock>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d002      	beq.n	8001692 <L6474_Initialize+0x32>
		return errcLOCKING;
 800168c:	f06f 0304 	mvn.w	r3, #4
 8001690:	e133      	b.n	80018fa <L6474_Initialize+0x29a>

	// forces the device state to update
	L6474_GetStatusCommand(h);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7ff fcf9 	bl	800108a <L6474_GetStatusCommand>

	if ( h->state != stRESET )
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d00b      	beq.n	80016b8 <L6474_Initialize+0x58>
	{
		if ( ( val = L6474_ResetStandBy(h) ) != 0 )
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f7ff ff7a 	bl	800159a <L6474_ResetStandBy>
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d004      	beq.n	80016b8 <L6474_Initialize+0x58>
		{
			L6474_HelperUnlock(h);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7ff fce1 	bl	8001076 <L6474_HelperUnlock>
			return val;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	e120      	b.n	80018fa <L6474_Initialize+0x29a>
		}
	}

	h->platform->reset(h->pGPO, 0);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	695b      	ldr	r3, [r3, #20]
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	68d2      	ldr	r2, [r2, #12]
 80016c2:	2100      	movs	r1, #0
 80016c4:	4610      	mov	r0, r2
 80016c6:	4798      	blx	r3
	h->state = stDISABLED;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2201      	movs	r2, #1
 80016cc:	701a      	strb	r2, [r3, #0]

	h->platform->sleep(IN_MILLISEC(10));
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	691b      	ldr	r3, [r3, #16]
 80016d4:	200a      	movs	r0, #10
 80016d6:	4798      	blx	r3

	//Now we have to write the configuration register
	unsigned int CONFIG = 0x2E88; // reset default value
 80016d8:	f642 6388 	movw	r3, #11912	@ 0x2e88
 80016dc:	60bb      	str	r3, [r7, #8]
	CONFIG &= ~0xF; // disables all clock outputs and selects internal oscillator
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	f023 030f 	bic.w	r3, r3, #15
 80016e4:	60bb      	str	r3, [r7, #8]

#if defined(LIBL6474_DISABLE_OCD) && ( LIBL6474_DISABLE_OCD == 1 )
	CONFIG &= ~(1 << 7); // disable the OCD
#endif

	if ( ( val = L6474_SetParamCommand(h, STEP_REG_CONFIG, CONFIG) ) != 0 )
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	461a      	mov	r2, r3
 80016ea:	2118      	movs	r1, #24
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff fdc1 	bl	8001274 <L6474_SetParamCommand>
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d00f      	beq.n	800171a <L6474_Initialize+0xba>
	{
		h->platform->reset(h->pGPO, 1);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	695b      	ldr	r3, [r3, #20]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	68d2      	ldr	r2, [r2, #12]
 8001704:	2101      	movs	r1, #1
 8001706:	4610      	mov	r0, r2
 8001708:	4798      	blx	r3
		h->state = stRESET;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2200      	movs	r2, #0
 800170e:	701a      	strb	r2, [r3, #0]
		L6474_HelperUnlock(h);
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f7ff fcb0 	bl	8001076 <L6474_HelperUnlock>
		return val;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	e0ef      	b.n	80018fa <L6474_Initialize+0x29a>
	}

	if ( ( val = L6474_SetParamCommand(h, STEP_REG_OCD_TH, p->OcdTh) ) != 0 )
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	785b      	ldrb	r3, [r3, #1]
 800171e:	461a      	mov	r2, r3
 8001720:	2113      	movs	r1, #19
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f7ff fda6 	bl	8001274 <L6474_SetParamCommand>
 8001728:	60f8      	str	r0, [r7, #12]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d00f      	beq.n	8001750 <L6474_Initialize+0xf0>
	{
		h->platform->reset(h->pGPO, 1);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	695b      	ldr	r3, [r3, #20]
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	68d2      	ldr	r2, [r2, #12]
 800173a:	2101      	movs	r1, #1
 800173c:	4610      	mov	r0, r2
 800173e:	4798      	blx	r3
		h->state = stRESET;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	701a      	strb	r2, [r3, #0]
		L6474_HelperUnlock(h);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff fc95 	bl	8001076 <L6474_HelperUnlock>
		return val;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	e0d4      	b.n	80018fa <L6474_Initialize+0x29a>
	}

	if ( ( val = L6474_SetParamCommand(h, STEP_REG_TVAL, p->TorqueVal) ) != 0 )
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	791b      	ldrb	r3, [r3, #4]
 8001754:	461a      	mov	r2, r3
 8001756:	2109      	movs	r1, #9
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f7ff fd8b 	bl	8001274 <L6474_SetParamCommand>
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d00f      	beq.n	8001786 <L6474_Initialize+0x126>
	{
		h->platform->reset(h->pGPO, 1);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	695b      	ldr	r3, [r3, #20]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	68d2      	ldr	r2, [r2, #12]
 8001770:	2101      	movs	r1, #1
 8001772:	4610      	mov	r0, r2
 8001774:	4798      	blx	r3
		h->state = stRESET;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	701a      	strb	r2, [r3, #0]
		L6474_HelperUnlock(h);
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7ff fc7a 	bl	8001076 <L6474_HelperUnlock>
		return val;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	e0b9      	b.n	80018fa <L6474_Initialize+0x29a>
	}

	if ( ( val = L6474_SetParamCommand(h, STEP_REG_TOFF_MIN, p->TimeOffMin) ) != 0 )
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	78db      	ldrb	r3, [r3, #3]
 800178a:	461a      	mov	r2, r3
 800178c:	2110      	movs	r1, #16
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7ff fd70 	bl	8001274 <L6474_SetParamCommand>
 8001794:	60f8      	str	r0, [r7, #12]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d00f      	beq.n	80017bc <L6474_Initialize+0x15c>
	{
		h->platform->reset(h->pGPO, 1);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	695b      	ldr	r3, [r3, #20]
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	68d2      	ldr	r2, [r2, #12]
 80017a6:	2101      	movs	r1, #1
 80017a8:	4610      	mov	r0, r2
 80017aa:	4798      	blx	r3
		h->state = stRESET;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2200      	movs	r2, #0
 80017b0:	701a      	strb	r2, [r3, #0]
		L6474_HelperUnlock(h);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f7ff fc5f 	bl	8001076 <L6474_HelperUnlock>
		return val;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	e09e      	b.n	80018fa <L6474_Initialize+0x29a>
	}

	if ( ( val = L6474_SetParamCommand(h, STEP_REG_TON_MIN, p->TimeOnMin) ) != 0 )
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	789b      	ldrb	r3, [r3, #2]
 80017c0:	461a      	mov	r2, r3
 80017c2:	210f      	movs	r1, #15
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f7ff fd55 	bl	8001274 <L6474_SetParamCommand>
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d00f      	beq.n	80017f2 <L6474_Initialize+0x192>
	{
		h->platform->reset(h->pGPO, 1);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	695b      	ldr	r3, [r3, #20]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	68d2      	ldr	r2, [r2, #12]
 80017dc:	2101      	movs	r1, #1
 80017de:	4610      	mov	r0, r2
 80017e0:	4798      	blx	r3
		h->state = stRESET;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	701a      	strb	r2, [r3, #0]
		L6474_HelperUnlock(h);
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f7ff fc44 	bl	8001076 <L6474_HelperUnlock>
		return val;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	e083      	b.n	80018fa <L6474_Initialize+0x29a>
	}

	if ( ( val = L6474_SetParamCommand(h, STEP_REG_T_FAST, p->TFast) ) != 0 )
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	795b      	ldrb	r3, [r3, #5]
 80017f6:	461a      	mov	r2, r3
 80017f8:	210e      	movs	r1, #14
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f7ff fd3a 	bl	8001274 <L6474_SetParamCommand>
 8001800:	60f8      	str	r0, [r7, #12]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d00f      	beq.n	8001828 <L6474_Initialize+0x1c8>
	{
		h->platform->reset(h->pGPO, 1);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	695b      	ldr	r3, [r3, #20]
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	68d2      	ldr	r2, [r2, #12]
 8001812:	2101      	movs	r1, #1
 8001814:	4610      	mov	r0, r2
 8001816:	4798      	blx	r3
		h->state = stRESET;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	701a      	strb	r2, [r3, #0]
		L6474_HelperUnlock(h);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f7ff fc29 	bl	8001076 <L6474_HelperUnlock>
		return val;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	e068      	b.n	80018fa <L6474_Initialize+0x29a>
	}

	if ( ( val = L6474_SetStepMode(h, p->stepMode) ) != 0 )
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	4619      	mov	r1, r3
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f000 f867 	bl	8001902 <L6474_SetStepMode>
 8001834:	60f8      	str	r0, [r7, #12]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d00f      	beq.n	800185c <L6474_Initialize+0x1fc>
	{
		h->platform->reset(h->pGPO, 1);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	695b      	ldr	r3, [r3, #20]
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	68d2      	ldr	r2, [r2, #12]
 8001846:	2101      	movs	r1, #1
 8001848:	4610      	mov	r0, r2
 800184a:	4798      	blx	r3
		h->state = stRESET;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	701a      	strb	r2, [r3, #0]
		L6474_HelperUnlock(h);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f7ff fc0f 	bl	8001076 <L6474_HelperUnlock>
		return val;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	e04e      	b.n	80018fa <L6474_Initialize+0x29a>
	}

	// enable all alarms
	if ( ( val = L6474_SetParamCommand(h, STEP_REG_ALARM_EN, STEP_MASK_ALARM_EN) ) != 0 )
 800185c:	22ff      	movs	r2, #255	@ 0xff
 800185e:	2117      	movs	r1, #23
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f7ff fd07 	bl	8001274 <L6474_SetParamCommand>
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d00f      	beq.n	800188e <L6474_Initialize+0x22e>
	{
		h->platform->reset(h->pGPO, 1);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	695b      	ldr	r3, [r3, #20]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	68d2      	ldr	r2, [r2, #12]
 8001878:	2101      	movs	r1, #1
 800187a:	4610      	mov	r0, r2
 800187c:	4798      	blx	r3
		h->state = stRESET;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	701a      	strb	r2, [r3, #0]
		L6474_HelperUnlock(h);
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f7ff fbf6 	bl	8001076 <L6474_HelperUnlock>
		return val;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	e035      	b.n	80018fa <L6474_Initialize+0x29a>
	}

	if ( ( val = L6474_DisableCommand(h) ) != 0 )
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f7ff fdf4 	bl	800147c <L6474_DisableCommand>
 8001894:	60f8      	str	r0, [r7, #12]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d00f      	beq.n	80018bc <L6474_Initialize+0x25c>
	{
		h->platform->reset(h->pGPO, 1);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	695b      	ldr	r3, [r3, #20]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	68d2      	ldr	r2, [r2, #12]
 80018a6:	2101      	movs	r1, #1
 80018a8:	4610      	mov	r0, r2
 80018aa:	4798      	blx	r3
		h->state = stRESET;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2200      	movs	r2, #0
 80018b0:	701a      	strb	r2, [r3, #0]
		L6474_HelperUnlock(h);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f7ff fbdf 	bl	8001076 <L6474_HelperUnlock>
		return val;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	e01e      	b.n	80018fa <L6474_Initialize+0x29a>
	}

	// now it should not fail when reading status register!
	if ( ( val = L6474_GetStatusCommand(h) ) < 0 )
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f7ff fbe4 	bl	800108a <L6474_GetStatusCommand>
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	da0f      	bge.n	80018ea <L6474_Initialize+0x28a>
	{
		h->platform->reset(h->pGPO, 1);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	68d2      	ldr	r2, [r2, #12]
 80018d4:	2101      	movs	r1, #1
 80018d6:	4610      	mov	r0, r2
 80018d8:	4798      	blx	r3
		h->state = stRESET;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	701a      	strb	r2, [r3, #0]
		L6474_HelperUnlock(h);
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f7ff fbc8 	bl	8001076 <L6474_HelperUnlock>
		return val;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	e007      	b.n	80018fa <L6474_Initialize+0x29a>
	}

	L6474_GetParamCommand(h, STEP_REG_CONFIG);
 80018ea:	2118      	movs	r1, #24
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f7ff fc11 	bl	8001114 <L6474_GetParamCommand>

	L6474_HelperUnlock(h);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f7ff fbbf 	bl	8001076 <L6474_HelperUnlock>
	return errcNONE;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <L6474_SetStepMode>:


// --------------------------------------------------------------------------------------------------------------------
int L6474_SetStepMode(L6474_Handle_t h, L6474x_StepMode_t mode)
// --------------------------------------------------------------------------------------------------------------------
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b084      	sub	sp, #16
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
 800190a:	460b      	mov	r3, r1
 800190c:	70fb      	strb	r3, [r7, #3]
	int val = 0;
 800190e:	2300      	movs	r3, #0
 8001910:	60fb      	str	r3, [r7, #12]

	if ( h == 0 )
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d102      	bne.n	800191e <L6474_SetStepMode+0x1c>
		return errcNULL_ARG;
 8001918:	f06f 0301 	mvn.w	r3, #1
 800191c:	e032      	b.n	8001984 <L6474_SetStepMode+0x82>

	if ( mode > smMICRO16 )
 800191e:	78fb      	ldrb	r3, [r7, #3]
 8001920:	2b04      	cmp	r3, #4
 8001922:	d902      	bls.n	800192a <L6474_SetStepMode+0x28>
		return errcINV_ARG;
 8001924:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001928:	e02c      	b.n	8001984 <L6474_SetStepMode+0x82>

	// set this bit. is described in the spec.
	mode |= ( 1 << 3 );
 800192a:	78fb      	ldrb	r3, [r7, #3]
 800192c:	f043 0308 	orr.w	r3, r3, #8
 8001930:	70fb      	strb	r3, [r7, #3]

	if ( L6474_HelperLock(h) != 0 )
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f7ff fb94 	bl	8001060 <L6474_HelperLock>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d002      	beq.n	8001944 <L6474_SetStepMode+0x42>
		return errcLOCKING;
 800193e:	f06f 0304 	mvn.w	r3, #4
 8001942:	e01f      	b.n	8001984 <L6474_SetStepMode+0x82>

	// forces the device state to update
	L6474_GetStatusCommand(h);
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f7ff fba0 	bl	800108a <L6474_GetStatusCommand>

	if ( h->state == stRESET )
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d105      	bne.n	800195e <L6474_SetStepMode+0x5c>
	{
		L6474_HelperUnlock(h);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7ff fb8f 	bl	8001076 <L6474_HelperUnlock>
		return errcINV_STATE;
 8001958:	f06f 0302 	mvn.w	r3, #2
 800195c:	e012      	b.n	8001984 <L6474_SetStepMode+0x82>
	}

	if ( ( val = L6474_SetParamCommand(h, STEP_REG_STEP_MODE, ( ( mode & STEP_MASK_STEP_MODE ) << STEP_OFFSET_STEP_MODE ) ) ) != 0 )
 800195e:	78fb      	ldrb	r3, [r7, #3]
 8001960:	461a      	mov	r2, r3
 8001962:	2116      	movs	r1, #22
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f7ff fc85 	bl	8001274 <L6474_SetParamCommand>
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d004      	beq.n	800197c <L6474_SetStepMode+0x7a>
	{
		L6474_HelperUnlock(h);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f7ff fb7f 	bl	8001076 <L6474_HelperUnlock>
		return val;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	e003      	b.n	8001984 <L6474_SetStepMode+0x82>
	}

	L6474_HelperUnlock(h);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7ff fb7a 	bl	8001076 <L6474_HelperUnlock>
	return errcNONE;
 8001982:	2300      	movs	r3, #0
}
 8001984:	4618      	mov	r0, r3
 8001986:	3710      	adds	r7, #16
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <L6474_SetPowerOutputs>:


// --------------------------------------------------------------------------------------------------------------------
int L6474_SetPowerOutputs(L6474_Handle_t h, int ena)
// --------------------------------------------------------------------------------------------------------------------
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
	int val = 0;
 8001996:	2300      	movs	r3, #0
 8001998:	60fb      	str	r3, [r7, #12]

	if ( h == 0 )
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d102      	bne.n	80019a6 <L6474_SetPowerOutputs+0x1a>
		return errcNULL_ARG;
 80019a0:	f06f 0301 	mvn.w	r3, #1
 80019a4:	e02e      	b.n	8001a04 <L6474_SetPowerOutputs+0x78>

	if ( L6474_HelperLock(h) != 0 )
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f7ff fb5a 	bl	8001060 <L6474_HelperLock>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d002      	beq.n	80019b8 <L6474_SetPowerOutputs+0x2c>
		return errcLOCKING;
 80019b2:	f06f 0304 	mvn.w	r3, #4
 80019b6:	e025      	b.n	8001a04 <L6474_SetPowerOutputs+0x78>

	// forces the device state to update
	L6474_GetStatusCommand(h);
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f7ff fb66 	bl	800108a <L6474_GetStatusCommand>

	if ( h->state == stRESET )
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d105      	bne.n	80019d2 <L6474_SetPowerOutputs+0x46>
	{
		L6474_HelperUnlock(h);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f7ff fb55 	bl	8001076 <L6474_HelperUnlock>
		return errcINV_STATE;
 80019cc:	f06f 0302 	mvn.w	r3, #2
 80019d0:	e018      	b.n	8001a04 <L6474_SetPowerOutputs+0x78>
	}

	if ( ( val = ( ( ( !!ena ) == 0 ) ? L6474_DisableCommand(h) : L6474_EnableCommand(h) ) ) != 0 )
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d104      	bne.n	80019e2 <L6474_SetPowerOutputs+0x56>
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f7ff fd4f 	bl	800147c <L6474_DisableCommand>
 80019de:	4603      	mov	r3, r0
 80019e0:	e003      	b.n	80019ea <L6474_SetPowerOutputs+0x5e>
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f7ff fd06 	bl	80013f4 <L6474_EnableCommand>
 80019e8:	4603      	mov	r3, r0
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d004      	beq.n	80019fc <L6474_SetPowerOutputs+0x70>
	{
		L6474_HelperUnlock(h);
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f7ff fb3f 	bl	8001076 <L6474_HelperUnlock>
		return val;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	e003      	b.n	8001a04 <L6474_SetPowerOutputs+0x78>
	}

	L6474_HelperUnlock(h);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f7ff fb3a 	bl	8001076 <L6474_HelperUnlock>
	return errcNONE;
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3710      	adds	r7, #16
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <L6474_StepIncremental>:
}

// --------------------------------------------------------------------------------------------------------------------
int L6474_StepIncremental(L6474_Handle_t h, int steps )
// --------------------------------------------------------------------------------------------------------------------
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
	if ( h == 0 )
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d102      	bne.n	8001a22 <L6474_StepIncremental+0x16>
		return errcNULL_ARG;
 8001a1c:	f06f 0301 	mvn.w	r3, #1
 8001a20:	e047      	b.n	8001ab2 <L6474_StepIncremental+0xa6>

	if ( steps == 0 )
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d102      	bne.n	8001a2e <L6474_StepIncremental+0x22>
		return errcNULL_ARG;
 8001a28:	f06f 0301 	mvn.w	r3, #1
 8001a2c:	e041      	b.n	8001ab2 <L6474_StepIncremental+0xa6>

	if ( L6474_HelperLock(h) != 0 )
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f7ff fb16 	bl	8001060 <L6474_HelperLock>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d002      	beq.n	8001a40 <L6474_StepIncremental+0x34>
		return errcLOCKING;
 8001a3a:	f06f 0304 	mvn.w	r3, #4
 8001a3e:	e038      	b.n	8001ab2 <L6474_StepIncremental+0xa6>

	// forces the device state to update
	L6474_GetStatusCommand(h);
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f7ff fb22 	bl	800108a <L6474_GetStatusCommand>

	if ( h->state != stENABLED )
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d005      	beq.n	8001a5a <L6474_StepIncremental+0x4e>
	{
		L6474_HelperUnlock(h);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f7ff fb11 	bl	8001076 <L6474_HelperUnlock>
		return errcINV_STATE;
 8001a54:	f06f 0302 	mvn.w	r3, #2
 8001a58:	e02b      	b.n	8001ab2 <L6474_StepIncremental+0xa6>
	}

	if ( h->pending != 0 )
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d005      	beq.n	8001a6e <L6474_StepIncremental+0x62>
	{
		L6474_HelperUnlock(h);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f7ff fb07 	bl	8001076 <L6474_HelperUnlock>
		return errcPENDING;
 8001a68:	f06f 0306 	mvn.w	r3, #6
 8001a6c:	e021      	b.n	8001ab2 <L6474_StepIncremental+0xa6>
	}

	int ret = 0;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60fb      	str	r3, [r7, #12]
	if ( ( ret = h->platform->stepAsync(h->pPWM, steps >= 0, ( ( steps < 0 ) ? -steps : steps ), L6474_HelperReleaseStep, h) ) != 0 )
	{
		h->pending = 0;
	}
#else
	h->pending = 1;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2201      	movs	r2, #1
 8001a76:	605a      	str	r2, [r3, #4]
	(void)L6474_HelperReleaseStep;
	ret = h->platform->step(h->pPWM, ((steps < 0) ? -steps : steps), steps);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	695b      	ldr	r3, [r3, #20]
 8001a7c:	695b      	ldr	r3, [r3, #20]
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	6910      	ldr	r0, [r2, #16]
 8001a82:	683a      	ldr	r2, [r7, #0]
 8001a84:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
 8001a88:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	4798      	blx	r3
 8001a90:	60f8      	str	r0, [r7, #12]
	h->pending = 0;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	605a      	str	r2, [r3, #4]
#endif

	if ( ret != 0 )
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d005      	beq.n	8001aaa <L6474_StepIncremental+0x9e>
	{
		L6474_HelperUnlock(h);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f7ff fae9 	bl	8001076 <L6474_HelperUnlock>
		return errcINTERNAL;
 8001aa4:	f06f 0303 	mvn.w	r3, #3
 8001aa8:	e003      	b.n	8001ab2 <L6474_StepIncremental+0xa6>
	}

	L6474_HelperUnlock(h);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f7ff fae3 	bl	8001076 <L6474_HelperUnlock>
	return errcNONE;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
	...

08001abc <ConsoleInputTask>:

    return 0;
}

void ConsoleInputTask(void *pvParameters)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
    // Allocate memory for the StepperTaskArgs_t structure
    ConsoleArg_t* ConsoleInputArgs = pvPortMalloc(sizeof(ConsoleArg_t));
 8001ac4:	2088      	movs	r0, #136	@ 0x88
 8001ac6:	f000 ffb7 	bl	8002a38 <pvPortMalloc>
 8001aca:	60f8      	str	r0, [r7, #12]
    if (!ConsoleInputArgs) {
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d105      	bne.n	8001ade <ConsoleInputTask+0x22>
        printf("Failed to allocate memory for ConsoleArg_t\r\n");
 8001ad2:	4806      	ldr	r0, [pc, #24]	@ (8001aec <ConsoleInputTask+0x30>)
 8001ad4:	f00b ffce 	bl	800da74 <puts>
        Error_Handler();
 8001ad8:	f000 fd3d 	bl	8002556 <Error_Handler>
 8001adc:	e003      	b.n	8001ae6 <ConsoleInputTask+0x2a>
    }
    else {
        printf("console input instance created\r\n");
 8001ade:	4804      	ldr	r0, [pc, #16]	@ (8001af0 <ConsoleInputTask+0x34>)
 8001ae0:	f00b ffc8 	bl	800da74 <puts>
    }

    while(1) {
 8001ae4:	bf00      	nop
 8001ae6:	bf00      	nop
 8001ae8:	e7fd      	b.n	8001ae6 <ConsoleInputTask+0x2a>
 8001aea:	bf00      	nop
 8001aec:	08010544 	.word	0x08010544
 8001af0:	08010570 	.word	0x08010570

08001af4 <vApplicationMallocFailedHook>:
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */
extern void initialise_stdlib_abstraction( void );

void vApplicationMallocFailedHook( void )
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8001afa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001afe:	b672      	cpsid	i
 8001b00:	f383 8811 	msr	BASEPRI, r3
 8001b04:	f3bf 8f6f 	isb	sy
 8001b08:	f3bf 8f4f 	dsb	sy
 8001b0c:	b662      	cpsie	i
 8001b0e:	607b      	str	r3, [r7, #4]
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        "   cpsie i                                                 \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8001b10:	bf00      	nop
  taskDISABLE_INTERRUPTS();
  __asm volatile( "bkpt #0" );
 8001b12:	be00      	bkpt	0x0000
  for (;;) {;}
 8001b14:	bf00      	nop
 8001b16:	e7fd      	b.n	8001b14 <vApplicationMallocFailedHook+0x20>

08001b18 <vApplicationStackOverflowHook>:
}
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
    __asm volatile
 8001b22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b26:	b672      	cpsid	i
 8001b28:	f383 8811 	msr	BASEPRI, r3
 8001b2c:	f3bf 8f6f 	isb	sy
 8001b30:	f3bf 8f4f 	dsb	sy
 8001b34:	b662      	cpsie	i
 8001b36:	60fb      	str	r3, [r7, #12]
}
 8001b38:	bf00      	nop
  ( void ) pcTaskName;
  ( void ) pxTask;

  taskDISABLE_INTERRUPTS();
  __asm volatile( "bkpt #0" );
 8001b3a:	be00      	bkpt	0x0000
  for (;;) {;}
 8001b3c:	bf00      	nop
 8001b3e:	e7fd      	b.n	8001b3c <vApplicationStackOverflowHook+0x24>

08001b40 <StepLibraryMalloc>:
//	return _write(2, pBuffer, num);
//}
/* USER CODE END 0 */
// Custom functions for stepper
static void* StepLibraryMalloc(unsigned int size)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  return pvPortMalloc(size); // Use FreeRTOS memory allocation
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f000 ff75 	bl	8002a38 <pvPortMalloc>
 8001b4e:	4603      	mov	r3, r0
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <StepLibraryFree>:

static void StepLibraryFree(const void* const pMem)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  vPortFree((void*)pMem); // Use FreeRTOS memory deallocation
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f000 ff77 	bl	8002a54 <vPortFree>
}
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
	...

08001b70 <StepDriverSpiTransfer>:
static int StepDriverSpiTransfer(void* pIO, char* pRX, const char* pTX, unsigned int length)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b088      	sub	sp, #32
 8001b74:	af02      	add	r7, sp, #8
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
 8001b7c:	603b      	str	r3, [r7, #0]
  for (unsigned int i = 0; i < length; i++) {
 8001b7e:	2300      	movs	r3, #0
 8001b80:	617b      	str	r3, [r7, #20]
 8001b82:	e027      	b.n	8001bd4 <StepDriverSpiTransfer+0x64>
    HAL_GPIO_WritePin(STEP_SPI_CS_GPIO_Port, STEP_SPI_CS_Pin, GPIO_PIN_RESET); // Select the SPI device
 8001b84:	2200      	movs	r2, #0
 8001b86:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001b8a:	4817      	ldr	r0, [pc, #92]	@ (8001be8 <StepDriverSpiTransfer+0x78>)
 8001b8c:	f001 ffdc 	bl	8003b48 <HAL_GPIO_WritePin>
    if (HAL_SPI_TransmitReceive(&hspi1, pTX+i, pRX+i,(uint16_t)1, HAL_MAX_DELAY) != HAL_OK) {
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	18d1      	adds	r1, r2, r3
 8001b96:	68ba      	ldr	r2, [r7, #8]
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	441a      	add	r2, r3
 8001b9c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ba0:	9300      	str	r3, [sp, #0]
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	4811      	ldr	r0, [pc, #68]	@ (8001bec <StepDriverSpiTransfer+0x7c>)
 8001ba6:	f003 ffe7 	bl	8005b78 <HAL_SPI_TransmitReceive>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d008      	beq.n	8001bc2 <StepDriverSpiTransfer+0x52>
      HAL_GPIO_WritePin(STEP_SPI_CS_GPIO_Port, STEP_SPI_CS_Pin, GPIO_PIN_SET); // Deselect the SPI device
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001bb6:	480c      	ldr	r0, [pc, #48]	@ (8001be8 <StepDriverSpiTransfer+0x78>)
 8001bb8:	f001 ffc6 	bl	8003b48 <HAL_GPIO_WritePin>
      return -1; // Error during SPI transfer
 8001bbc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001bc0:	e00d      	b.n	8001bde <StepDriverSpiTransfer+0x6e>
    }
    HAL_GPIO_WritePin(STEP_SPI_CS_GPIO_Port, STEP_SPI_CS_Pin, GPIO_PIN_SET); // Deselect the SPI device
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001bc8:	4807      	ldr	r0, [pc, #28]	@ (8001be8 <StepDriverSpiTransfer+0x78>)
 8001bca:	f001 ffbd 	bl	8003b48 <HAL_GPIO_WritePin>
  for (unsigned int i = 0; i < length; i++) {
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	617b      	str	r3, [r7, #20]
 8001bd4:	697a      	ldr	r2, [r7, #20]
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d3d3      	bcc.n	8001b84 <StepDriverSpiTransfer+0x14>

  }
  return 0; // Success
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3718      	adds	r7, #24
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40020c00 	.word	0x40020c00
 8001bec:	200001f8 	.word	0x200001f8

08001bf0 <StepDriverReset>:


static void StepDriverReset(void* pGPO, const int ena)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  (void)pGPO; // Unused in this implementation
  HAL_GPIO_WritePin(STEP_RSTN_GPIO_Port, STEP_RSTN_Pin, !ena ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	bf0c      	ite	eq
 8001c00:	2301      	moveq	r3, #1
 8001c02:	2300      	movne	r3, #0
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	461a      	mov	r2, r3
 8001c08:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c0c:	4803      	ldr	r0, [pc, #12]	@ (8001c1c <StepDriverReset+0x2c>)
 8001c0e:	f001 ff9b 	bl	8003b48 <HAL_GPIO_WritePin>
}
 8001c12:	bf00      	nop
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40021400 	.word	0x40021400

08001c20 <StepLibraryDelay>:

static void StepLibraryDelay(unsigned int ms)
{
 8001c20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c24:	b082      	sub	sp, #8
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
  vTaskDelay(pdMS_TO_TICKS(ms)); // Delay using FreeRTOS
 8001c2a:	6879      	ldr	r1, [r7, #4]
 8001c2c:	2000      	movs	r0, #0
 8001c2e:	460c      	mov	r4, r1
 8001c30:	4605      	mov	r5, r0
 8001c32:	4620      	mov	r0, r4
 8001c34:	4629      	mov	r1, r5
 8001c36:	f04f 0a00 	mov.w	sl, #0
 8001c3a:	f04f 0b00 	mov.w	fp, #0
 8001c3e:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8001c42:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8001c46:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8001c4a:	4650      	mov	r0, sl
 8001c4c:	4659      	mov	r1, fp
 8001c4e:	1b02      	subs	r2, r0, r4
 8001c50:	eb61 0305 	sbc.w	r3, r1, r5
 8001c54:	f04f 0000 	mov.w	r0, #0
 8001c58:	f04f 0100 	mov.w	r1, #0
 8001c5c:	0099      	lsls	r1, r3, #2
 8001c5e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001c62:	0090      	lsls	r0, r2, #2
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	eb12 0804 	adds.w	r8, r2, r4
 8001c6c:	eb43 0905 	adc.w	r9, r3, r5
 8001c70:	f04f 0200 	mov.w	r2, #0
 8001c74:	f04f 0300 	mov.w	r3, #0
 8001c78:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c7c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c80:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c84:	4690      	mov	r8, r2
 8001c86:	4699      	mov	r9, r3
 8001c88:	4640      	mov	r0, r8
 8001c8a:	4649      	mov	r1, r9
 8001c8c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c90:	f04f 0300 	mov.w	r3, #0
 8001c94:	f7ff f818 	bl	8000cc8 <__aeabi_uldivmod>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f008 f94a 	bl	8009f38 <vTaskDelay>
}
 8001ca4:	bf00      	nop
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001cb0 <StepSynchronous>:
    );

    return (res == pdPASS) ? 0 : -1;
}

static int StepSynchronous(void* pPWM, int dir, unsigned int numPulses) {
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
  (void)pPWM; // Unused in this implementation

  // Set direction pin
  HAL_GPIO_WritePin(STEP_DIR_GPIO_Port, STEP_DIR_Pin, dir ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	bf14      	ite	ne
 8001cc2:	2301      	movne	r3, #1
 8001cc4:	2300      	moveq	r3, #0
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	461a      	mov	r2, r3
 8001cca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001cce:	4812      	ldr	r0, [pc, #72]	@ (8001d18 <StepSynchronous+0x68>)
 8001cd0:	f001 ff3a 	bl	8003b48 <HAL_GPIO_WritePin>

  // Generate pulses
  for (unsigned int i = 0; i < numPulses; ++i) {
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	617b      	str	r3, [r7, #20]
 8001cd8:	e014      	b.n	8001d04 <StepSynchronous+0x54>
    // Set STEP_PULSE pin high
    HAL_GPIO_WritePin(STEP_PULSE_GPIO_Port, STEP_PULSE_Pin, GPIO_PIN_SET);
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ce0:	480e      	ldr	r0, [pc, #56]	@ (8001d1c <StepSynchronous+0x6c>)
 8001ce2:	f001 ff31 	bl	8003b48 <HAL_GPIO_WritePin>
    StepLibraryDelay(1); // 1 ms High
 8001ce6:	2001      	movs	r0, #1
 8001ce8:	f7ff ff9a 	bl	8001c20 <StepLibraryDelay>

    // Set STEP_PULSE pin low
    HAL_GPIO_WritePin(STEP_PULSE_GPIO_Port, STEP_PULSE_Pin, GPIO_PIN_RESET);
 8001cec:	2200      	movs	r2, #0
 8001cee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001cf2:	480a      	ldr	r0, [pc, #40]	@ (8001d1c <StepSynchronous+0x6c>)
 8001cf4:	f001 ff28 	bl	8003b48 <HAL_GPIO_WritePin>
    StepLibraryDelay(1); // 1 ms Low
 8001cf8:	2001      	movs	r0, #1
 8001cfa:	f7ff ff91 	bl	8001c20 <StepLibraryDelay>
  for (unsigned int i = 0; i < numPulses; ++i) {
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	3301      	adds	r3, #1
 8001d02:	617b      	str	r3, [r7, #20]
 8001d04:	697a      	ldr	r2, [r7, #20]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d3e6      	bcc.n	8001cda <StepSynchronous+0x2a>
  }

  return 0; // Success
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3718      	adds	r7, #24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40021400 	.word	0x40021400
 8001d1c:	40020c00 	.word	0x40020c00

08001d20 <StepperTask>:

void StepperTask(void *pvParameters)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b08e      	sub	sp, #56	@ 0x38
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
    // Allocate memory for the StepperTaskArgs_t structure
    StepperTaskArgs_t* stepperArgs = pvPortMalloc(sizeof(StepperTaskArgs_t));
 8001d28:	2018      	movs	r0, #24
 8001d2a:	f000 fe85 	bl	8002a38 <pvPortMalloc>
 8001d2e:	6378      	str	r0, [r7, #52]	@ 0x34
    if (!stepperArgs) {
 8001d30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d104      	bne.n	8001d40 <StepperTask+0x20>
        printf("Failed to allocate memory for StepperTaskArgs_t\r\n");
 8001d36:	4846      	ldr	r0, [pc, #280]	@ (8001e50 <StepperTask+0x130>)
 8001d38:	f00b fe9c 	bl	800da74 <puts>
        Error_Handler();
 8001d3c:	f000 fc0b 	bl	8002556 <Error_Handler>
    }

    // Initialize the StepperTaskArgs_t structure
    stepperArgs->pPWM = NULL; // Placeholder for PWM context, if needed
 8001d40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d42:	2200      	movs	r2, #0
 8001d44:	601a      	str	r2, [r3, #0]
    stepperArgs->dir = 0;     // Default direction
 8001d46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d48:	2200      	movs	r2, #0
 8001d4a:	605a      	str	r2, [r3, #4]
    stepperArgs->numPulses = 0;
 8001d4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d4e:	2200      	movs	r2, #0
 8001d50:	609a      	str	r2, [r3, #8]
    stepperArgs->doneClb = NULL;
 8001d52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d54:	2200      	movs	r2, #0
 8001d56:	60da      	str	r2, [r3, #12]
    stepperArgs->h = NULL;
 8001d58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	611a      	str	r2, [r3, #16]
    stepperArgs->taskHandle = NULL;
 8001d5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d60:	2200      	movs	r2, #0
 8001d62:	615a      	str	r2, [r3, #20]

    // Pass all function pointers required by the stepper library
    // to a separate platform abstraction structure
    L6474x_Platform_t p;
    p.malloc     = StepLibraryMalloc;
 8001d64:	4b3b      	ldr	r3, [pc, #236]	@ (8001e54 <StepperTask+0x134>)
 8001d66:	617b      	str	r3, [r7, #20]
    p.free       = StepLibraryFree;
 8001d68:	4b3b      	ldr	r3, [pc, #236]	@ (8001e58 <StepperTask+0x138>)
 8001d6a:	61bb      	str	r3, [r7, #24]
    p.transfer   = StepDriverSpiTransfer;
 8001d6c:	4b3b      	ldr	r3, [pc, #236]	@ (8001e5c <StepperTask+0x13c>)
 8001d6e:	61fb      	str	r3, [r7, #28]
    p.reset      = StepDriverReset;
 8001d70:	4b3b      	ldr	r3, [pc, #236]	@ (8001e60 <StepperTask+0x140>)
 8001d72:	623b      	str	r3, [r7, #32]
    p.sleep      = StepLibraryDelay;
 8001d74:	4b3b      	ldr	r3, [pc, #236]	@ (8001e64 <StepperTask+0x144>)
 8001d76:	627b      	str	r3, [r7, #36]	@ 0x24
    //p.stepAsync  = StepTimerAsync;
    p.step       = StepSynchronous;
 8001d78:	4b3b      	ldr	r3, [pc, #236]	@ (8001e68 <StepperTask+0x148>)
 8001d7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    //p.cancelStep = StepTimerCancelAsync;

    // Now create the handle, passing the stepperArgs as the pPWM parameter
    L6474_Handle_t h = L6474_CreateInstance(&p, NULL, NULL, NULL);
 8001d7c:	f107 0014 	add.w	r0, r7, #20
 8001d80:	2300      	movs	r3, #0
 8001d82:	2200      	movs	r2, #0
 8001d84:	2100      	movs	r1, #0
 8001d86:	f7ff fbb7 	bl	80014f8 <L6474_CreateInstance>
 8001d8a:	6338      	str	r0, [r7, #48]	@ 0x30

    if (h == NULL) {
 8001d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d108      	bne.n	8001da4 <StepperTask+0x84>
        printf("Failed to create L6474 instance\r\n");
 8001d92:	4836      	ldr	r0, [pc, #216]	@ (8001e6c <StepperTask+0x14c>)
 8001d94:	f00b fe6e 	bl	800da74 <puts>
        vPortFree(stepperArgs); // Free memory if instance creation fails
 8001d98:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001d9a:	f000 fe5b 	bl	8002a54 <vPortFree>
        Error_Handler();
 8001d9e:	f000 fbda 	bl	8002556 <Error_Handler>
 8001da2:	e002      	b.n	8001daa <StepperTask+0x8a>
    } else {
        printf("Stepper motor instance created\r\n");
 8001da4:	4832      	ldr	r0, [pc, #200]	@ (8001e70 <StepperTask+0x150>)
 8001da6:	f00b fe65 	bl	800da74 <puts>
    }

    //stepperArgs->h = h; // Store the handle in the arguments structure

    int result = 0;
 8001daa:	2300      	movs	r3, #0
 8001dac:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // Create base parameter structure
    L6474_BaseParameter_t baseParam = {
 8001dae:	4a31      	ldr	r2, [pc, #196]	@ (8001e74 <StepperTask+0x154>)
 8001db0:	f107 030c 	add.w	r3, r7, #12
 8001db4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001db8:	6018      	str	r0, [r3, #0]
 8001dba:	3304      	adds	r3, #4
 8001dbc:	8019      	strh	r1, [r3, #0]
        .TFast      = 5                // µs – Schaltzeitoptimierung
    };


    // Set default base parameters
    result |= L6474_SetBaseParameter(&baseParam);
 8001dbe:	f107 030c 	add.w	r3, r7, #12
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff fc29 	bl	800161a <L6474_SetBaseParameter>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    result |= L6474_ResetStandBy(h);
 8001dd0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001dd2:	f7ff fbe2 	bl	800159a <L6474_ResetStandBy>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // Initialize the driver with the base parameters
    result |= L6474_Initialize(h, &baseParam);
 8001dde:	f107 030c 	add.w	r3, r7, #12
 8001de2:	4619      	mov	r1, r3
 8001de4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001de6:	f7ff fc3b 	bl	8001660 <L6474_Initialize>
 8001dea:	4602      	mov	r2, r0
 8001dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dee:	4313      	orrs	r3, r2
 8001df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    result |= L6474_SetPowerOutputs(h, 1);
 8001df2:	2101      	movs	r1, #1
 8001df4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001df6:	f7ff fdc9 	bl	800198c <L6474_SetPowerOutputs>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // In case we have no error, we can enable the drivers
    // and then we step a bit
    if (result == 0) {
 8001e02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d113      	bne.n	8001e30 <StepperTask+0x110>
        result |= L6474_StepIncremental(h, 1000);
 8001e08:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001e0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001e0e:	f7ff fdfd 	bl	8001a0c <L6474_StepIncremental>
 8001e12:	4602      	mov	r2, r0
 8001e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e16:	4313      	orrs	r3, r2
 8001e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
        if (result == 0) {
 8001e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d103      	bne.n	8001e28 <StepperTask+0x108>
            printf("Stepper motor moved 1000 steps\r\n");
 8001e20:	4815      	ldr	r0, [pc, #84]	@ (8001e78 <StepperTask+0x158>)
 8001e22:	f00b fe27 	bl	800da74 <puts>
 8001e26:	e009      	b.n	8001e3c <StepperTask+0x11c>
        } else {
            printf("Error during step operation\r\n");
 8001e28:	4814      	ldr	r0, [pc, #80]	@ (8001e7c <StepperTask+0x15c>)
 8001e2a:	f00b fe23 	bl	800da74 <puts>
 8001e2e:	e005      	b.n	8001e3c <StepperTask+0x11c>
        }
    } else {
        // Error handling
        printf("Error during initialization: %d\r\n", result);
 8001e30:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001e32:	4813      	ldr	r0, [pc, #76]	@ (8001e80 <StepperTask+0x160>)
 8001e34:	f00b fdb6 	bl	800d9a4 <iprintf>
        Error_Handler();
 8001e38:	f000 fb8d 	bl	8002556 <Error_Handler>
    }

    // Free the memory for stepperArgs after use
    vPortFree(stepperArgs);
 8001e3c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001e3e:	f000 fe09 	bl	8002a54 <vPortFree>

    // Delete the task after initialization
    vTaskDelete(NULL);
 8001e42:	2000      	movs	r0, #0
 8001e44:	f007 ffce 	bl	8009de4 <vTaskDelete>
}
 8001e48:	bf00      	nop
 8001e4a:	3738      	adds	r7, #56	@ 0x38
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	080105f4 	.word	0x080105f4
 8001e54:	08001b41 	.word	0x08001b41
 8001e58:	08001b59 	.word	0x08001b59
 8001e5c:	08001b71 	.word	0x08001b71
 8001e60:	08001bf1 	.word	0x08001bf1
 8001e64:	08001c21 	.word	0x08001c21
 8001e68:	08001cb1 	.word	0x08001cb1
 8001e6c:	08010628 	.word	0x08010628
 8001e70:	0801064c 	.word	0x0801064c
 8001e74:	080106d0 	.word	0x080106d0
 8001e78:	0801066c 	.word	0x0801066c
 8001e7c:	0801068c 	.word	0x0801068c
 8001e80:	080106ac 	.word	0x080106ac

08001e84 <main>:


int main(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */
  
  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001e8a:	f000 fb25 	bl	80024d8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e8e:	f000 ff9e 	bl	8002dce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e92:	f000 f83f 	bl	8001f14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e96:	f000 f993 	bl	80021c0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001e9a:	f000 f8a1 	bl	8001fe0 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8001e9e:	f000 f95f 	bl	8002160 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8001ea2:	f000 f8db 	bl	800205c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */


  // Create stepper, and console input tasks
  if (xTaskCreate(StepperTask, "StepperTask", 256, NULL, tskIDLE_PRIORITY + 2, NULL) != pdPASS) {
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	9301      	str	r3, [sp, #4]
 8001eaa:	2302      	movs	r3, #2
 8001eac:	9300      	str	r3, [sp, #0]
 8001eae:	2300      	movs	r3, #0
 8001eb0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001eb4:	4911      	ldr	r1, [pc, #68]	@ (8001efc <main+0x78>)
 8001eb6:	4812      	ldr	r0, [pc, #72]	@ (8001f00 <main+0x7c>)
 8001eb8:	f007 fe22 	bl	8009b00 <xTaskCreate>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d004      	beq.n	8001ecc <main+0x48>
      printf("Failed to create StepperTask\r\n");
 8001ec2:	4810      	ldr	r0, [pc, #64]	@ (8001f04 <main+0x80>)
 8001ec4:	f00b fdd6 	bl	800da74 <puts>
      Error_Handler();
 8001ec8:	f000 fb45 	bl	8002556 <Error_Handler>
  }
  if (xTaskCreate(ConsoleInputTask, "ConsoleInputTask", 256, NULL, tskIDLE_PRIORITY + 1, NULL) != pdPASS) {
 8001ecc:	2300      	movs	r3, #0
 8001ece:	9301      	str	r3, [sp, #4]
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	9300      	str	r3, [sp, #0]
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001eda:	490b      	ldr	r1, [pc, #44]	@ (8001f08 <main+0x84>)
 8001edc:	480b      	ldr	r0, [pc, #44]	@ (8001f0c <main+0x88>)
 8001ede:	f007 fe0f 	bl	8009b00 <xTaskCreate>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d004      	beq.n	8001ef2 <main+0x6e>
    printf("Failed to create ConsoleInputTask\r\n");
 8001ee8:	4809      	ldr	r0, [pc, #36]	@ (8001f10 <main+0x8c>)
 8001eea:	f00b fdc3 	bl	800da74 <puts>
    Error_Handler();
 8001eee:	f000 fb32 	bl	8002556 <Error_Handler>
}

  (void)CapabilityFunc;
  vTaskStartScheduler();
 8001ef2:	f008 f8a9 	bl	800a048 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001ef6:	bf00      	nop
 8001ef8:	e7fd      	b.n	8001ef6 <main+0x72>
 8001efa:	bf00      	nop
 8001efc:	080105e8 	.word	0x080105e8
 8001f00:	08001d21 	.word	0x08001d21
 8001f04:	080106d8 	.word	0x080106d8
 8001f08:	080106f8 	.word	0x080106f8
 8001f0c:	08001abd 	.word	0x08001abd
 8001f10:	0801070c 	.word	0x0801070c

08001f14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b094      	sub	sp, #80	@ 0x50
 8001f18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f1a:	f107 0320 	add.w	r3, r7, #32
 8001f1e:	2230      	movs	r2, #48	@ 0x30
 8001f20:	2100      	movs	r1, #0
 8001f22:	4618      	mov	r0, r3
 8001f24:	f00b fea8 	bl	800dc78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f28:	f107 030c 	add.w	r3, r7, #12
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	605a      	str	r2, [r3, #4]
 8001f32:	609a      	str	r2, [r3, #8]
 8001f34:	60da      	str	r2, [r3, #12]
 8001f36:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f38:	4b27      	ldr	r3, [pc, #156]	@ (8001fd8 <SystemClock_Config+0xc4>)
 8001f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3c:	4a26      	ldr	r2, [pc, #152]	@ (8001fd8 <SystemClock_Config+0xc4>)
 8001f3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f42:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f44:	4b24      	ldr	r3, [pc, #144]	@ (8001fd8 <SystemClock_Config+0xc4>)
 8001f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f4c:	60bb      	str	r3, [r7, #8]
 8001f4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f50:	4b22      	ldr	r3, [pc, #136]	@ (8001fdc <SystemClock_Config+0xc8>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a21      	ldr	r2, [pc, #132]	@ (8001fdc <SystemClock_Config+0xc8>)
 8001f56:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001f5a:	6013      	str	r3, [r2, #0]
 8001f5c:	4b1f      	ldr	r3, [pc, #124]	@ (8001fdc <SystemClock_Config+0xc8>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001f64:	607b      	str	r3, [r7, #4]
 8001f66:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f68:	2302      	movs	r3, #2
 8001f6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f70:	2310      	movs	r3, #16
 8001f72:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f74:	2302      	movs	r3, #2
 8001f76:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001f7c:	2308      	movs	r3, #8
 8001f7e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001f80:	23b4      	movs	r3, #180	@ 0xb4
 8001f82:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f84:	2302      	movs	r3, #2
 8001f86:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001f88:	2302      	movs	r3, #2
 8001f8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f8c:	f107 0320 	add.w	r3, r7, #32
 8001f90:	4618      	mov	r0, r3
 8001f92:	f001 fe05 	bl	8003ba0 <HAL_RCC_OscConfig>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001f9c:	f000 fadb 	bl	8002556 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fa0:	230f      	movs	r3, #15
 8001fa2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001fac:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001fb0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001fb2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fb6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001fb8:	f107 030c 	add.w	r3, r7, #12
 8001fbc:	2105      	movs	r1, #5
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f002 f948 	bl	8004254 <HAL_RCC_ClockConfig>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001fca:	f000 fac4 	bl	8002556 <Error_Handler>
  }
}
 8001fce:	bf00      	nop
 8001fd0:	3750      	adds	r7, #80	@ 0x50
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	40007000 	.word	0x40007000

08001fe0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001fe4:	4b1b      	ldr	r3, [pc, #108]	@ (8002054 <MX_SPI1_Init+0x74>)
 8001fe6:	4a1c      	ldr	r2, [pc, #112]	@ (8002058 <MX_SPI1_Init+0x78>)
 8001fe8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001fea:	4b1a      	ldr	r3, [pc, #104]	@ (8002054 <MX_SPI1_Init+0x74>)
 8001fec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001ff0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ff2:	4b18      	ldr	r3, [pc, #96]	@ (8002054 <MX_SPI1_Init+0x74>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ff8:	4b16      	ldr	r3, [pc, #88]	@ (8002054 <MX_SPI1_Init+0x74>)
 8001ffa:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001ffe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002000:	4b14      	ldr	r3, [pc, #80]	@ (8002054 <MX_SPI1_Init+0x74>)
 8002002:	2202      	movs	r2, #2
 8002004:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002006:	4b13      	ldr	r3, [pc, #76]	@ (8002054 <MX_SPI1_Init+0x74>)
 8002008:	2201      	movs	r2, #1
 800200a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800200c:	4b11      	ldr	r3, [pc, #68]	@ (8002054 <MX_SPI1_Init+0x74>)
 800200e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002012:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002014:	4b0f      	ldr	r3, [pc, #60]	@ (8002054 <MX_SPI1_Init+0x74>)
 8002016:	2220      	movs	r2, #32
 8002018:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800201a:	4b0e      	ldr	r3, [pc, #56]	@ (8002054 <MX_SPI1_Init+0x74>)
 800201c:	2200      	movs	r2, #0
 800201e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002020:	4b0c      	ldr	r3, [pc, #48]	@ (8002054 <MX_SPI1_Init+0x74>)
 8002022:	2200      	movs	r2, #0
 8002024:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002026:	4b0b      	ldr	r3, [pc, #44]	@ (8002054 <MX_SPI1_Init+0x74>)
 8002028:	2200      	movs	r2, #0
 800202a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800202c:	4b09      	ldr	r3, [pc, #36]	@ (8002054 <MX_SPI1_Init+0x74>)
 800202e:	2207      	movs	r2, #7
 8002030:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002032:	4b08      	ldr	r3, [pc, #32]	@ (8002054 <MX_SPI1_Init+0x74>)
 8002034:	2200      	movs	r2, #0
 8002036:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002038:	4b06      	ldr	r3, [pc, #24]	@ (8002054 <MX_SPI1_Init+0x74>)
 800203a:	2200      	movs	r2, #0
 800203c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800203e:	4805      	ldr	r0, [pc, #20]	@ (8002054 <MX_SPI1_Init+0x74>)
 8002040:	f003 fb8e 	bl	8005760 <HAL_SPI_Init>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800204a:	f000 fa84 	bl	8002556 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800204e:	bf00      	nop
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	200001f8 	.word	0x200001f8
 8002058:	40013000 	.word	0x40013000

0800205c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b08e      	sub	sp, #56	@ 0x38
 8002060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002062:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002066:	2200      	movs	r2, #0
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	605a      	str	r2, [r3, #4]
 800206c:	609a      	str	r2, [r3, #8]
 800206e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002070:	f107 031c 	add.w	r3, r7, #28
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	605a      	str	r2, [r3, #4]
 800207a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800207c:	463b      	mov	r3, r7
 800207e:	2200      	movs	r2, #0
 8002080:	601a      	str	r2, [r3, #0]
 8002082:	605a      	str	r2, [r3, #4]
 8002084:	609a      	str	r2, [r3, #8]
 8002086:	60da      	str	r2, [r3, #12]
 8002088:	611a      	str	r2, [r3, #16]
 800208a:	615a      	str	r2, [r3, #20]
 800208c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800208e:	4b33      	ldr	r3, [pc, #204]	@ (800215c <MX_TIM2_Init+0x100>)
 8002090:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002094:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002096:	4b31      	ldr	r3, [pc, #196]	@ (800215c <MX_TIM2_Init+0x100>)
 8002098:	2200      	movs	r2, #0
 800209a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800209c:	4b2f      	ldr	r3, [pc, #188]	@ (800215c <MX_TIM2_Init+0x100>)
 800209e:	2200      	movs	r2, #0
 80020a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4499;
 80020a2:	4b2e      	ldr	r3, [pc, #184]	@ (800215c <MX_TIM2_Init+0x100>)
 80020a4:	f241 1293 	movw	r2, #4499	@ 0x1193
 80020a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020aa:	4b2c      	ldr	r3, [pc, #176]	@ (800215c <MX_TIM2_Init+0x100>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020b0:	4b2a      	ldr	r3, [pc, #168]	@ (800215c <MX_TIM2_Init+0x100>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020b6:	4829      	ldr	r0, [pc, #164]	@ (800215c <MX_TIM2_Init+0x100>)
 80020b8:	f004 fa34 	bl	8006524 <HAL_TIM_Base_Init>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80020c2:	f000 fa48 	bl	8002556 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020cc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80020d0:	4619      	mov	r1, r3
 80020d2:	4822      	ldr	r0, [pc, #136]	@ (800215c <MX_TIM2_Init+0x100>)
 80020d4:	f004 fed8 	bl	8006e88 <HAL_TIM_ConfigClockSource>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80020de:	f000 fa3a 	bl	8002556 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80020e2:	481e      	ldr	r0, [pc, #120]	@ (800215c <MX_TIM2_Init+0x100>)
 80020e4:	f004 fb3e 	bl	8006764 <HAL_TIM_PWM_Init>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80020ee:	f000 fa32 	bl	8002556 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020f2:	2300      	movs	r3, #0
 80020f4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020f6:	2300      	movs	r3, #0
 80020f8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020fa:	f107 031c 	add.w	r3, r7, #28
 80020fe:	4619      	mov	r1, r3
 8002100:	4816      	ldr	r0, [pc, #88]	@ (800215c <MX_TIM2_Init+0x100>)
 8002102:	f005 fe41 	bl	8007d88 <HAL_TIMEx_MasterConfigSynchronization>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800210c:	f000 fa23 	bl	8002556 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002110:	2360      	movs	r3, #96	@ 0x60
 8002112:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002114:	2300      	movs	r3, #0
 8002116:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002118:	2300      	movs	r3, #0
 800211a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800211c:	2300      	movs	r3, #0
 800211e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002120:	463b      	mov	r3, r7
 8002122:	2208      	movs	r2, #8
 8002124:	4619      	mov	r1, r3
 8002126:	480d      	ldr	r0, [pc, #52]	@ (800215c <MX_TIM2_Init+0x100>)
 8002128:	f004 fc46 	bl	80069b8 <HAL_TIM_PWM_ConfigChannel>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002132:	f000 fa10 	bl	8002556 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002136:	463b      	mov	r3, r7
 8002138:	220c      	movs	r2, #12
 800213a:	4619      	mov	r1, r3
 800213c:	4807      	ldr	r0, [pc, #28]	@ (800215c <MX_TIM2_Init+0x100>)
 800213e:	f004 fc3b 	bl	80069b8 <HAL_TIM_PWM_ConfigChannel>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8002148:	f000 fa05 	bl	8002556 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800214c:	4803      	ldr	r0, [pc, #12]	@ (800215c <MX_TIM2_Init+0x100>)
 800214e:	f000 fd3f 	bl	8002bd0 <HAL_TIM_MspPostInit>

}
 8002152:	bf00      	nop
 8002154:	3738      	adds	r7, #56	@ 0x38
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	2000025c 	.word	0x2000025c

08002160 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002164:	4b14      	ldr	r3, [pc, #80]	@ (80021b8 <MX_USART3_UART_Init+0x58>)
 8002166:	4a15      	ldr	r2, [pc, #84]	@ (80021bc <MX_USART3_UART_Init+0x5c>)
 8002168:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800216a:	4b13      	ldr	r3, [pc, #76]	@ (80021b8 <MX_USART3_UART_Init+0x58>)
 800216c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002170:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002172:	4b11      	ldr	r3, [pc, #68]	@ (80021b8 <MX_USART3_UART_Init+0x58>)
 8002174:	2200      	movs	r2, #0
 8002176:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002178:	4b0f      	ldr	r3, [pc, #60]	@ (80021b8 <MX_USART3_UART_Init+0x58>)
 800217a:	2200      	movs	r2, #0
 800217c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800217e:	4b0e      	ldr	r3, [pc, #56]	@ (80021b8 <MX_USART3_UART_Init+0x58>)
 8002180:	2200      	movs	r2, #0
 8002182:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002184:	4b0c      	ldr	r3, [pc, #48]	@ (80021b8 <MX_USART3_UART_Init+0x58>)
 8002186:	220c      	movs	r2, #12
 8002188:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800218a:	4b0b      	ldr	r3, [pc, #44]	@ (80021b8 <MX_USART3_UART_Init+0x58>)
 800218c:	2200      	movs	r2, #0
 800218e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002190:	4b09      	ldr	r3, [pc, #36]	@ (80021b8 <MX_USART3_UART_Init+0x58>)
 8002192:	2200      	movs	r2, #0
 8002194:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002196:	4b08      	ldr	r3, [pc, #32]	@ (80021b8 <MX_USART3_UART_Init+0x58>)
 8002198:	2200      	movs	r2, #0
 800219a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800219c:	4b06      	ldr	r3, [pc, #24]	@ (80021b8 <MX_USART3_UART_Init+0x58>)
 800219e:	2200      	movs	r2, #0
 80021a0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80021a2:	4805      	ldr	r0, [pc, #20]	@ (80021b8 <MX_USART3_UART_Init+0x58>)
 80021a4:	f005 ff48 	bl	8008038 <HAL_UART_Init>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80021ae:	f000 f9d2 	bl	8002556 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80021b2:	bf00      	nop
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	200002a8 	.word	0x200002a8
 80021bc:	40004800 	.word	0x40004800

080021c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b08c      	sub	sp, #48	@ 0x30
 80021c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c6:	f107 031c 	add.w	r3, r7, #28
 80021ca:	2200      	movs	r2, #0
 80021cc:	601a      	str	r2, [r3, #0]
 80021ce:	605a      	str	r2, [r3, #4]
 80021d0:	609a      	str	r2, [r3, #8]
 80021d2:	60da      	str	r2, [r3, #12]
 80021d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021d6:	4b81      	ldr	r3, [pc, #516]	@ (80023dc <MX_GPIO_Init+0x21c>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021da:	4a80      	ldr	r2, [pc, #512]	@ (80023dc <MX_GPIO_Init+0x21c>)
 80021dc:	f043 0304 	orr.w	r3, r3, #4
 80021e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80021e2:	4b7e      	ldr	r3, [pc, #504]	@ (80023dc <MX_GPIO_Init+0x21c>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e6:	f003 0304 	and.w	r3, r3, #4
 80021ea:	61bb      	str	r3, [r7, #24]
 80021ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ee:	4b7b      	ldr	r3, [pc, #492]	@ (80023dc <MX_GPIO_Init+0x21c>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f2:	4a7a      	ldr	r2, [pc, #488]	@ (80023dc <MX_GPIO_Init+0x21c>)
 80021f4:	f043 0301 	orr.w	r3, r3, #1
 80021f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80021fa:	4b78      	ldr	r3, [pc, #480]	@ (80023dc <MX_GPIO_Init+0x21c>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	617b      	str	r3, [r7, #20]
 8002204:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002206:	4b75      	ldr	r3, [pc, #468]	@ (80023dc <MX_GPIO_Init+0x21c>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220a:	4a74      	ldr	r2, [pc, #464]	@ (80023dc <MX_GPIO_Init+0x21c>)
 800220c:	f043 0302 	orr.w	r3, r3, #2
 8002210:	6313      	str	r3, [r2, #48]	@ 0x30
 8002212:	4b72      	ldr	r3, [pc, #456]	@ (80023dc <MX_GPIO_Init+0x21c>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	613b      	str	r3, [r7, #16]
 800221c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800221e:	4b6f      	ldr	r3, [pc, #444]	@ (80023dc <MX_GPIO_Init+0x21c>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002222:	4a6e      	ldr	r2, [pc, #440]	@ (80023dc <MX_GPIO_Init+0x21c>)
 8002224:	f043 0320 	orr.w	r3, r3, #32
 8002228:	6313      	str	r3, [r2, #48]	@ 0x30
 800222a:	4b6c      	ldr	r3, [pc, #432]	@ (80023dc <MX_GPIO_Init+0x21c>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800222e:	f003 0320 	and.w	r3, r3, #32
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002236:	4b69      	ldr	r3, [pc, #420]	@ (80023dc <MX_GPIO_Init+0x21c>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223a:	4a68      	ldr	r2, [pc, #416]	@ (80023dc <MX_GPIO_Init+0x21c>)
 800223c:	f043 0310 	orr.w	r3, r3, #16
 8002240:	6313      	str	r3, [r2, #48]	@ 0x30
 8002242:	4b66      	ldr	r3, [pc, #408]	@ (80023dc <MX_GPIO_Init+0x21c>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002246:	f003 0310 	and.w	r3, r3, #16
 800224a:	60bb      	str	r3, [r7, #8]
 800224c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800224e:	4b63      	ldr	r3, [pc, #396]	@ (80023dc <MX_GPIO_Init+0x21c>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002252:	4a62      	ldr	r2, [pc, #392]	@ (80023dc <MX_GPIO_Init+0x21c>)
 8002254:	f043 0308 	orr.w	r3, r3, #8
 8002258:	6313      	str	r3, [r2, #48]	@ 0x30
 800225a:	4b60      	ldr	r3, [pc, #384]	@ (80023dc <MX_GPIO_Init+0x21c>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225e:	f003 0308 	and.w	r3, r3, #8
 8002262:	607b      	str	r3, [r7, #4]
 8002264:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8002266:	2200      	movs	r2, #0
 8002268:	f244 0181 	movw	r1, #16513	@ 0x4081
 800226c:	485c      	ldr	r0, [pc, #368]	@ (80023e0 <MX_GPIO_Init+0x220>)
 800226e:	f001 fc6b 	bl	8003b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, STEP_RSTN_Pin|STEP_DIR_Pin, GPIO_PIN_RESET);
 8002272:	2200      	movs	r2, #0
 8002274:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8002278:	485a      	ldr	r0, [pc, #360]	@ (80023e4 <MX_GPIO_Init+0x224>)
 800227a:	f001 fc65 	bl	8003b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPINDLE_ENA_L_Pin|SPINDLE_ENA_R_Pin, GPIO_PIN_RESET);
 800227e:	2200      	movs	r2, #0
 8002280:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8002284:	4858      	ldr	r0, [pc, #352]	@ (80023e8 <MX_GPIO_Init+0x228>)
 8002286:	f001 fc5f 	bl	8003b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STEP_SPI_CS_GPIO_Port, STEP_SPI_CS_Pin, GPIO_PIN_SET);
 800228a:	2201      	movs	r2, #1
 800228c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002290:	4856      	ldr	r0, [pc, #344]	@ (80023ec <MX_GPIO_Init+0x22c>)
 8002292:	f001 fc59 	bl	8003b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STEP_PULSE_GPIO_Port, STEP_PULSE_Pin, GPIO_PIN_RESET);
 8002296:	2200      	movs	r2, #0
 8002298:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800229c:	4853      	ldr	r0, [pc, #332]	@ (80023ec <MX_GPIO_Init+0x22c>)
 800229e:	f001 fc53 	bl	8003b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USR_BUTTON_Pin */
  GPIO_InitStruct.Pin = USR_BUTTON_Pin;
 80022a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022a8:	2300      	movs	r3, #0
 80022aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ac:	2300      	movs	r3, #0
 80022ae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USR_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80022b0:	f107 031c 	add.w	r3, r7, #28
 80022b4:	4619      	mov	r1, r3
 80022b6:	484e      	ldr	r0, [pc, #312]	@ (80023f0 <MX_GPIO_Init+0x230>)
 80022b8:	f001 f8d6 	bl	8003468 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPINDLE_SI_R_Pin */
  GPIO_InitStruct.Pin = SPINDLE_SI_R_Pin;
 80022bc:	2301      	movs	r3, #1
 80022be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022c0:	2300      	movs	r3, #0
 80022c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c4:	2300      	movs	r3, #0
 80022c6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SPINDLE_SI_R_GPIO_Port, &GPIO_InitStruct);
 80022c8:	f107 031c 	add.w	r3, r7, #28
 80022cc:	4619      	mov	r1, r3
 80022ce:	4849      	ldr	r0, [pc, #292]	@ (80023f4 <MX_GPIO_Init+0x234>)
 80022d0:	f001 f8ca 	bl	8003468 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin;
 80022d4:	f244 0381 	movw	r3, #16513	@ 0x4081
 80022d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022da:	2301      	movs	r3, #1
 80022dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022de:	2300      	movs	r3, #0
 80022e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e2:	2300      	movs	r3, #0
 80022e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e6:	f107 031c 	add.w	r3, r7, #28
 80022ea:	4619      	mov	r1, r3
 80022ec:	483c      	ldr	r0, [pc, #240]	@ (80023e0 <MX_GPIO_Init+0x220>)
 80022ee:	f001 f8bb 	bl	8003468 <HAL_GPIO_Init>

  /*Configure GPIO pin : STEP_RSTN_Pin */
  GPIO_InitStruct.Pin = STEP_RSTN_Pin;
 80022f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022f8:	2301      	movs	r3, #1
 80022fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fc:	2300      	movs	r3, #0
 80022fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002300:	2300      	movs	r3, #0
 8002302:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(STEP_RSTN_GPIO_Port, &GPIO_InitStruct);
 8002304:	f107 031c 	add.w	r3, r7, #28
 8002308:	4619      	mov	r1, r3
 800230a:	4836      	ldr	r0, [pc, #216]	@ (80023e4 <MX_GPIO_Init+0x224>)
 800230c:	f001 f8ac 	bl	8003468 <HAL_GPIO_Init>

  /*Configure GPIO pin : STEP_DIR_Pin */
  GPIO_InitStruct.Pin = STEP_DIR_Pin;
 8002310:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002314:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002316:	2301      	movs	r3, #1
 8002318:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231a:	2300      	movs	r3, #0
 800231c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800231e:	2303      	movs	r3, #3
 8002320:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(STEP_DIR_GPIO_Port, &GPIO_InitStruct);
 8002322:	f107 031c 	add.w	r3, r7, #28
 8002326:	4619      	mov	r1, r3
 8002328:	482e      	ldr	r0, [pc, #184]	@ (80023e4 <MX_GPIO_Init+0x224>)
 800232a:	f001 f89d 	bl	8003468 <HAL_GPIO_Init>

  /*Configure GPIO pin : STEP_FLAG_Pin */
  GPIO_InitStruct.Pin = STEP_FLAG_Pin;
 800232e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002332:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002334:	2300      	movs	r3, #0
 8002336:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002338:	2301      	movs	r3, #1
 800233a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(STEP_FLAG_GPIO_Port, &GPIO_InitStruct);
 800233c:	f107 031c 	add.w	r3, r7, #28
 8002340:	4619      	mov	r1, r3
 8002342:	4828      	ldr	r0, [pc, #160]	@ (80023e4 <MX_GPIO_Init+0x224>)
 8002344:	f001 f890 	bl	8003468 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPINDLE_ENA_L_Pin SPINDLE_ENA_R_Pin */
  GPIO_InitStruct.Pin = SPINDLE_ENA_L_Pin|SPINDLE_ENA_R_Pin;
 8002348:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800234c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800234e:	2301      	movs	r3, #1
 8002350:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002352:	2300      	movs	r3, #0
 8002354:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002356:	2300      	movs	r3, #0
 8002358:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800235a:	f107 031c 	add.w	r3, r7, #28
 800235e:	4619      	mov	r1, r3
 8002360:	4821      	ldr	r0, [pc, #132]	@ (80023e8 <MX_GPIO_Init+0x228>)
 8002362:	f001 f881 	bl	8003468 <HAL_GPIO_Init>

  /*Configure GPIO pin : STEP_SPI_CS_Pin */
  GPIO_InitStruct.Pin = STEP_SPI_CS_Pin;
 8002366:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800236a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800236c:	2301      	movs	r3, #1
 800236e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002370:	2300      	movs	r3, #0
 8002372:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002374:	2303      	movs	r3, #3
 8002376:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(STEP_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8002378:	f107 031c 	add.w	r3, r7, #28
 800237c:	4619      	mov	r1, r3
 800237e:	481b      	ldr	r0, [pc, #108]	@ (80023ec <MX_GPIO_Init+0x22c>)
 8002380:	f001 f872 	bl	8003468 <HAL_GPIO_Init>

  /*Configure GPIO pin : STEP_PULSE_Pin */
  GPIO_InitStruct.Pin = STEP_PULSE_Pin;
 8002384:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002388:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800238a:	2301      	movs	r3, #1
 800238c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238e:	2300      	movs	r3, #0
 8002390:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002392:	2300      	movs	r3, #0
 8002394:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(STEP_PULSE_GPIO_Port, &GPIO_InitStruct);
 8002396:	f107 031c 	add.w	r3, r7, #28
 800239a:	4619      	mov	r1, r3
 800239c:	4813      	ldr	r0, [pc, #76]	@ (80023ec <MX_GPIO_Init+0x22c>)
 800239e:	f001 f863 	bl	8003468 <HAL_GPIO_Init>

  /*Configure GPIO pins : REFERENCE_MARK_Pin LIMIT_SWITCH_Pin */
  GPIO_InitStruct.Pin = REFERENCE_MARK_Pin|LIMIT_SWITCH_Pin;
 80023a2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80023a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023a8:	2300      	movs	r3, #0
 80023aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ac:	2300      	movs	r3, #0
 80023ae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023b0:	f107 031c 	add.w	r3, r7, #28
 80023b4:	4619      	mov	r1, r3
 80023b6:	480a      	ldr	r0, [pc, #40]	@ (80023e0 <MX_GPIO_Init+0x220>)
 80023b8:	f001 f856 	bl	8003468 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPINDLE_SI_L_Pin */
  GPIO_InitStruct.Pin = SPINDLE_SI_L_Pin;
 80023bc:	2301      	movs	r3, #1
 80023be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023c0:	2300      	movs	r3, #0
 80023c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c4:	2300      	movs	r3, #0
 80023c6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SPINDLE_SI_L_GPIO_Port, &GPIO_InitStruct);
 80023c8:	f107 031c 	add.w	r3, r7, #28
 80023cc:	4619      	mov	r1, r3
 80023ce:	4806      	ldr	r0, [pc, #24]	@ (80023e8 <MX_GPIO_Init+0x228>)
 80023d0:	f001 f84a 	bl	8003468 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80023d4:	bf00      	nop
 80023d6:	3730      	adds	r7, #48	@ 0x30
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40023800 	.word	0x40023800
 80023e0:	40020400 	.word	0x40020400
 80023e4:	40021400 	.word	0x40021400
 80023e8:	40021000 	.word	0x40021000
 80023ec:	40020c00 	.word	0x40020c00
 80023f0:	40020800 	.word	0x40020800
 80023f4:	40020000 	.word	0x40020000

080023f8 <vAssertCalled>:

/* USER CODE BEGIN 4 */
void vAssertCalled( const char * const pcFileName, unsigned long ulLine )
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
volatile uint32_t ulSetToNonZeroInDebuggerToContinue = 0;
 8002402:	2300      	movs	r3, #0
 8002404:	60fb      	str	r3, [r7, #12]

    /* Parameters are not used. */
    ( void ) ulLine;
    ( void ) pcFileName;

    taskENTER_CRITICAL();
 8002406:	f009 fb03 	bl	800ba10 <vPortEnterCritical>
    {
        /* You can step out of this function to debug the assertion by using
        the debugger to set ulSetToNonZeroInDebuggerToContinue to a non-zero
        value. */
        while( ulSetToNonZeroInDebuggerToContinue == 0 )
 800240a:	bf00      	nop
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d0fc      	beq.n	800240c <vAssertCalled+0x14>
        {
        }
    }
    taskEXIT_CRITICAL();
 8002412:	f009 fb35 	bl	800ba80 <vPortExitCritical>
}
 8002416:	bf00      	nop
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
	...

08002420 <__stdout_put_char>:

int __stdout_put_char(int ch)
{
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
	uint8_t val = ch;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	73fb      	strb	r3, [r7, #15]
	while((huart3.Instance->ISR & UART_FLAG_TXE) == 0);
 800242c:	bf00      	nop
 800242e:	4b0d      	ldr	r3, [pc, #52]	@ (8002464 <__stdout_put_char+0x44>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	69db      	ldr	r3, [r3, #28]
 8002434:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002438:	2b00      	cmp	r3, #0
 800243a:	d0f8      	beq.n	800242e <__stdout_put_char+0xe>
	huart3.Instance->TDR = val;
 800243c:	4b09      	ldr	r3, [pc, #36]	@ (8002464 <__stdout_put_char+0x44>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	7bfa      	ldrb	r2, [r7, #15]
 8002442:	629a      	str	r2, [r3, #40]	@ 0x28
	while((huart3.Instance->ISR & UART_FLAG_TC) == 0);
 8002444:	bf00      	nop
 8002446:	4b07      	ldr	r3, [pc, #28]	@ (8002464 <__stdout_put_char+0x44>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	69db      	ldr	r3, [r3, #28]
 800244c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002450:	2b00      	cmp	r3, #0
 8002452:	d0f8      	beq.n	8002446 <__stdout_put_char+0x26>
	return 0;
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3714      	adds	r7, #20
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	200002a8 	.word	0x200002a8

08002468 <__stdin_get_char>:

int __stdin_get_char(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
	if (huart3.Instance->ISR & UART_FLAG_ORE)
 800246c:	4b19      	ldr	r3, [pc, #100]	@ (80024d4 <__stdin_get_char+0x6c>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	f003 0308 	and.w	r3, r3, #8
 8002476:	2b00      	cmp	r3, #0
 8002478:	d003      	beq.n	8002482 <__stdin_get_char+0x1a>
		huart3.Instance->ICR = UART_CLEAR_OREF;
 800247a:	4b16      	ldr	r3, [pc, #88]	@ (80024d4 <__stdin_get_char+0x6c>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2208      	movs	r2, #8
 8002480:	621a      	str	r2, [r3, #32]

	if (huart3.Instance->ISR & UART_FLAG_NE)
 8002482:	4b14      	ldr	r3, [pc, #80]	@ (80024d4 <__stdin_get_char+0x6c>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	69db      	ldr	r3, [r3, #28]
 8002488:	f003 0304 	and.w	r3, r3, #4
 800248c:	2b00      	cmp	r3, #0
 800248e:	d003      	beq.n	8002498 <__stdin_get_char+0x30>
		huart3.Instance->ICR = UART_CLEAR_NEF;
 8002490:	4b10      	ldr	r3, [pc, #64]	@ (80024d4 <__stdin_get_char+0x6c>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2204      	movs	r2, #4
 8002496:	621a      	str	r2, [r3, #32]

	if (huart3.Instance->ISR & UART_FLAG_FE)
 8002498:	4b0e      	ldr	r3, [pc, #56]	@ (80024d4 <__stdin_get_char+0x6c>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d003      	beq.n	80024ae <__stdin_get_char+0x46>
		huart3.Instance->ICR = UART_CLEAR_FEF;
 80024a6:	4b0b      	ldr	r3, [pc, #44]	@ (80024d4 <__stdin_get_char+0x6c>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2202      	movs	r2, #2
 80024ac:	621a      	str	r2, [r3, #32]

	if ((huart3.Instance->ISR & UART_FLAG_RXNE) == 0) return -1;
 80024ae:	4b09      	ldr	r3, [pc, #36]	@ (80024d4 <__stdin_get_char+0x6c>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	69db      	ldr	r3, [r3, #28]
 80024b4:	f003 0320 	and.w	r3, r3, #32
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d102      	bne.n	80024c2 <__stdin_get_char+0x5a>
 80024bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80024c0:	e002      	b.n	80024c8 <__stdin_get_char+0x60>
	return huart3.Instance->RDR;
 80024c2:	4b04      	ldr	r3, [pc, #16]	@ (80024d4 <__stdin_get_char+0x6c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	200002a8 	.word	0x200002a8

080024d8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80024de:	463b      	mov	r3, r7
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	605a      	str	r2, [r3, #4]
 80024e6:	609a      	str	r2, [r3, #8]
 80024e8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80024ea:	f000 fe0d 	bl	8003108 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80024ee:	2301      	movs	r3, #1
 80024f0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80024f2:	2300      	movs	r3, #0
 80024f4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80024f6:	2300      	movs	r3, #0
 80024f8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 80024fa:	230d      	movs	r3, #13
 80024fc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80024fe:	2300      	movs	r3, #0
 8002500:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8002502:	2300      	movs	r3, #0
 8002504:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RO_URO;
 8002506:	2306      	movs	r3, #6
 8002508:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800250a:	2300      	movs	r3, #0
 800250c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800250e:	2300      	movs	r3, #0
 8002510:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8002512:	2300      	movs	r3, #0
 8002514:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8002516:	2300      	movs	r3, #0
 8002518:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800251a:	463b      	mov	r3, r7
 800251c:	4618      	mov	r0, r3
 800251e:	f000 fe2b 	bl	8003178 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8002522:	2301      	movs	r3, #1
 8002524:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x60000000;
 8002526:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 800252a:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800252c:	231f      	movs	r3, #31
 800252e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8002530:	2387      	movs	r3, #135	@ 0x87
 8002532:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8002534:	2300      	movs	r3, #0
 8002536:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8002538:	2301      	movs	r3, #1
 800253a:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800253c:	2301      	movs	r3, #1
 800253e:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002540:	463b      	mov	r3, r7
 8002542:	4618      	mov	r0, r3
 8002544:	f000 fe18 	bl	8003178 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002548:	2004      	movs	r0, #4
 800254a:	f000 fdf5 	bl	8003138 <HAL_MPU_Enable>

}
 800254e:	bf00      	nop
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002556:	b480      	push	{r7}
 8002558:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800255a:	b672      	cpsid	i
}
 800255c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800255e:	bf00      	nop
 8002560:	e7fd      	b.n	800255e <Error_Handler+0x8>
	...

08002564 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	portENTER_CRITICAL();
 800256e:	f009 fa4f 	bl	800ba10 <vPortEnterCritical>

	printf("HAL_ASSERT: %s:::%u\r\n", (char*)file, (unsigned int)line);
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	6879      	ldr	r1, [r7, #4]
 8002576:	4805      	ldr	r0, [pc, #20]	@ (800258c <assert_failed+0x28>)
 8002578:	f00b fa14 	bl	800d9a4 <iprintf>
	assert(0);
 800257c:	4b04      	ldr	r3, [pc, #16]	@ (8002590 <assert_failed+0x2c>)
 800257e:	4a05      	ldr	r2, [pc, #20]	@ (8002594 <assert_failed+0x30>)
 8002580:	f240 3141 	movw	r1, #833	@ 0x341
 8002584:	4804      	ldr	r0, [pc, #16]	@ (8002598 <assert_failed+0x34>)
 8002586:	f009 fb33 	bl	800bbf0 <__assert_func>
 800258a:	bf00      	nop
 800258c:	08010730 	.word	0x08010730
 8002590:	08010748 	.word	0x08010748
 8002594:	08010f24 	.word	0x08010f24
 8002598:	0801074c 	.word	0x0801074c

0800259c <initialise_monitor_handles>:
 * is called. afterwards main would be called.
 */
// ----------------------------------------------------------------------------
void initialise_monitor_handles( void )
// ----------------------------------------------------------------------------
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0

}
 80025a0:	bf00      	nop
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
	...

080025ac <initialise_stdlib_abstraction>:
 */
// ----------------------------------------------------------------------------
__attribute__((constructor))
void initialise_stdlib_abstraction( void )
// ----------------------------------------------------------------------------
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
    initialise_monitor_handles();
 80025b0:	f7ff fff4 	bl	800259c <initialise_monitor_handles>

#if defined(INC_FREERTOS_H) && defined(MV_SYSCALL_USE_EXCLUSIVE_LOCK_FOR_STDOUT)
    stdioSemaphore = xSemaphoreCreateRecursiveMutex();
 80025b4:	2004      	movs	r0, #4
 80025b6:	f006 fd5a 	bl	800906e <xQueueCreateMutex>
 80025ba:	4603      	mov	r3, r0
 80025bc:	4a15      	ldr	r2, [pc, #84]	@ (8002614 <initialise_stdlib_abstraction+0x68>)
 80025be:	6013      	str	r3, [r2, #0]

    if ( stdioSemaphore == 0 )
 80025c0:	4b14      	ldr	r3, [pc, #80]	@ (8002614 <initialise_stdlib_abstraction+0x68>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d104      	bne.n	80025d2 <initialise_stdlib_abstraction+0x26>
    {
        vAssertCalled( __FILE__, __LINE__ );
 80025c8:	f240 110b 	movw	r1, #267	@ 0x10b
 80025cc:	4812      	ldr	r0, [pc, #72]	@ (8002618 <initialise_stdlib_abstraction+0x6c>)
 80025ce:	f7ff ff13 	bl	80023f8 <vAssertCalled>
    }
#endif
#if defined(INC_FREERTOS_H) && defined(MV_SYSCALL_USE_EXCLUSIVE_LOCK_FOR_MALLOC)
    mallocSemaphore = xSemaphoreCreateRecursiveMutex();
 80025d2:	2004      	movs	r0, #4
 80025d4:	f006 fd4b 	bl	800906e <xQueueCreateMutex>
 80025d8:	4603      	mov	r3, r0
 80025da:	4a10      	ldr	r2, [pc, #64]	@ (800261c <initialise_stdlib_abstraction+0x70>)
 80025dc:	6013      	str	r3, [r2, #0]

    if ( mallocSemaphore == 0 )
 80025de:	4b0f      	ldr	r3, [pc, #60]	@ (800261c <initialise_stdlib_abstraction+0x70>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d104      	bne.n	80025f0 <initialise_stdlib_abstraction+0x44>
    {
        vAssertCalled( __FILE__, __LINE__ );
 80025e6:	f240 1113 	movw	r1, #275	@ 0x113
 80025ea:	480b      	ldr	r0, [pc, #44]	@ (8002618 <initialise_stdlib_abstraction+0x6c>)
 80025ec:	f7ff ff04 	bl	80023f8 <vAssertCalled>
    }
#endif
#if defined(INC_FREERTOS_H) && defined(MV_SYSCALL_USE_EXCLUSIVE_LOCK_FOR_ENV)
    envSemaphore = xSemaphoreCreateRecursiveMutex();
 80025f0:	2004      	movs	r0, #4
 80025f2:	f006 fd3c 	bl	800906e <xQueueCreateMutex>
 80025f6:	4603      	mov	r3, r0
 80025f8:	4a09      	ldr	r2, [pc, #36]	@ (8002620 <initialise_stdlib_abstraction+0x74>)
 80025fa:	6013      	str	r3, [r2, #0]

    if ( envSemaphore == 0 )
 80025fc:	4b08      	ldr	r3, [pc, #32]	@ (8002620 <initialise_stdlib_abstraction+0x74>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d104      	bne.n	800260e <initialise_stdlib_abstraction+0x62>
    {
        vAssertCalled( __FILE__, __LINE__ );
 8002604:	f240 111b 	movw	r1, #283	@ 0x11b
 8002608:	4803      	ldr	r0, [pc, #12]	@ (8002618 <initialise_stdlib_abstraction+0x6c>)
 800260a:	f7ff fef5 	bl	80023f8 <vAssertCalled>
    }
#endif
}
 800260e:	bf00      	nop
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	20000330 	.word	0x20000330
 8002618:	08010824 	.word	0x08010824
 800261c:	20000334 	.word	0x20000334
 8002620:	20000338 	.word	0x20000338

08002624 <_getpid>:
 * "machine mode"
 */
// ----------------------------------------------------------------------------
int _getpid( void )
// ----------------------------------------------------------------------------
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
    return 1;
 8002628:	2301      	movs	r3, #1
}
 800262a:	4618      	mov	r0, r3
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <_kill>:
 * process with PID 1
 */
// ----------------------------------------------------------------------------
int _kill( int pid, int sig )
// ----------------------------------------------------------------------------
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
    ( void )pid;
    ( void )sig;

    if ( _impure_ptr != 0 )
 800263e:	4b09      	ldr	r3, [pc, #36]	@ (8002664 <_kill+0x30>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d003      	beq.n	800264e <_kill+0x1a>
    {
        _impure_ptr->_errno = EINVAL;
 8002646:	4b07      	ldr	r3, [pc, #28]	@ (8002664 <_kill+0x30>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2216      	movs	r2, #22
 800264c:	601a      	str	r2, [r3, #0]
    }
    errno = EINVAL;
 800264e:	f00b fbd5 	bl	800ddfc <__errno>
 8002652:	4603      	mov	r3, r0
 8002654:	2216      	movs	r2, #22
 8002656:	601a      	str	r2, [r3, #0]
    return -1;
 8002658:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800265c:	4618      	mov	r0, r3
 800265e:	3708      	adds	r7, #8
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	2000018c 	.word	0x2000018c

08002668 <_exit>:
 */
// ----------------------------------------------------------------------------
__attribute__( ( noreturn ) )
void _exit ( int status )
// ----------------------------------------------------------------------------
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
    _kill( status, -1 );
 8002670:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f7ff ffdd 	bl	8002634 <_kill>
    while ( 1 ) {}
 800267a:	bf00      	nop
 800267c:	e7fd      	b.n	800267a <_exit+0x12>
	...

08002680 <_read>:
 * An example can be seen in altera board support packages with the "dev" struct
 */
// ----------------------------------------------------------------------------
int _read( int file, char* ptr, int len )
// ----------------------------------------------------------------------------
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b088      	sub	sp, #32
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	607a      	str	r2, [r7, #4]
    ( void )file;

    int DataIdx;
    int resLen = 0;
 800268c:	2300      	movs	r3, #0
 800268e:	61bb      	str	r3, [r7, #24]

    if ( file == STDIN_FILENO )
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d121      	bne.n	80026da <_read+0x5a>
    {
        for ( DataIdx = 0; DataIdx < len; )
 8002696:	2300      	movs	r3, #0
 8002698:	61fb      	str	r3, [r7, #28]
 800269a:	e019      	b.n	80026d0 <_read+0x50>
        {
            int result = __stdin_get_char();
 800269c:	f7ff fee4 	bl	8002468 <__stdin_get_char>
 80026a0:	6178      	str	r0, [r7, #20]
            if ( result == EOF )
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80026a8:	d106      	bne.n	80026b8 <_read+0x38>
            {
                if ( resLen == 0 )
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d124      	bne.n	80026fa <_read+0x7a>
                {
                    resLen = EOF;
 80026b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80026b4:	61bb      	str	r3, [r7, #24]
                }
                break;
 80026b6:	e020      	b.n	80026fa <_read+0x7a>
            }

            *ptr++ = ( char )result;
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	1c5a      	adds	r2, r3, #1
 80026bc:	60ba      	str	r2, [r7, #8]
 80026be:	697a      	ldr	r2, [r7, #20]
 80026c0:	b2d2      	uxtb	r2, r2
 80026c2:	701a      	strb	r2, [r3, #0]
            resLen++;
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	3301      	adds	r3, #1
 80026c8:	61bb      	str	r3, [r7, #24]
            DataIdx++;
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	3301      	adds	r3, #1
 80026ce:	61fb      	str	r3, [r7, #28]
        for ( DataIdx = 0; DataIdx < len; )
 80026d0:	69fa      	ldr	r2, [r7, #28]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	dbe1      	blt.n	800269c <_read+0x1c>
 80026d8:	e010      	b.n	80026fc <_read+0x7c>

        }
    }
    else
    {
        if ( _impure_ptr != 0 )
 80026da:	4b0b      	ldr	r3, [pc, #44]	@ (8002708 <_read+0x88>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d003      	beq.n	80026ea <_read+0x6a>
        {
            _impure_ptr->_errno = EBADF;
 80026e2:	4b09      	ldr	r3, [pc, #36]	@ (8002708 <_read+0x88>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2209      	movs	r2, #9
 80026e8:	601a      	str	r2, [r3, #0]
        }
        errno = EBADF;
 80026ea:	f00b fb87 	bl	800ddfc <__errno>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2209      	movs	r2, #9
 80026f2:	601a      	str	r2, [r3, #0]
        return -1;
 80026f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80026f8:	e001      	b.n	80026fe <_read+0x7e>
                break;
 80026fa:	bf00      	nop
    }

    return resLen;
 80026fc:	69bb      	ldr	r3, [r7, #24]
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3720      	adds	r7, #32
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	2000018c 	.word	0x2000018c

0800270c <_write>:
 * An example can be seen in altera board support packages with the "dev" struct
 */
// ----------------------------------------------------------------------------
int _write( int file, char* ptr, int len )
// ----------------------------------------------------------------------------
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
    ( void )file;

    int DataIdx, locked = 0;
 8002718:	2300      	movs	r3, #0
 800271a:	613b      	str	r3, [r7, #16]

    if ( file == STDOUT_FILENO || file == STDERR_FILENO )
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d002      	beq.n	8002728 <_write+0x1c>
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2b02      	cmp	r3, #2
 8002726:	d149      	bne.n	80027bc <_write+0xb0>
    {

#if  defined(INC_FREERTOS_H) && defined(MV_SYSCALL_USE_EXCLUSIVE_LOCK_FOR_STDOUT)
        if ( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002728:	f008 fa96 	bl	800ac58 <xTaskGetSchedulerState>
 800272c:	4603      	mov	r3, r0
 800272e:	2b02      	cmp	r3, #2
 8002730:	d108      	bne.n	8002744 <_write+0x38>
        {
            xSemaphoreTakeRecursive( stdioSemaphore, -1 );
 8002732:	4b2c      	ldr	r3, [pc, #176]	@ (80027e4 <_write+0xd8>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800273a:	4618      	mov	r0, r3
 800273c:	f006 fcec 	bl	8009118 <xQueueTakeMutexRecursive>
            locked = 1;
 8002740:	2301      	movs	r3, #1
 8002742:	613b      	str	r3, [r7, #16]
        }
#endif

        if (file == STDERR_FILENO)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2b02      	cmp	r3, #2
 8002748:	d10e      	bne.n	8002768 <_write+0x5c>
        {
        	__stdout_put_char('\033');
 800274a:	201b      	movs	r0, #27
 800274c:	f7ff fe68 	bl	8002420 <__stdout_put_char>
        	__stdout_put_char('[');
 8002750:	205b      	movs	r0, #91	@ 0x5b
 8002752:	f7ff fe65 	bl	8002420 <__stdout_put_char>
        	__stdout_put_char('3');
 8002756:	2033      	movs	r0, #51	@ 0x33
 8002758:	f7ff fe62 	bl	8002420 <__stdout_put_char>
        	__stdout_put_char('1');
 800275c:	2031      	movs	r0, #49	@ 0x31
 800275e:	f7ff fe5f 	bl	8002420 <__stdout_put_char>
        	__stdout_put_char('m');
 8002762:	206d      	movs	r0, #109	@ 0x6d
 8002764:	f7ff fe5c 	bl	8002420 <__stdout_put_char>
        }
        for ( DataIdx = 0; DataIdx < len; DataIdx++ )
 8002768:	2300      	movs	r3, #0
 800276a:	617b      	str	r3, [r7, #20]
 800276c:	e009      	b.n	8002782 <_write+0x76>
        {
            __stdout_put_char( ptr[DataIdx] );
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	68ba      	ldr	r2, [r7, #8]
 8002772:	4413      	add	r3, r2
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f7ff fe52 	bl	8002420 <__stdout_put_char>
        for ( DataIdx = 0; DataIdx < len; DataIdx++ )
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	3301      	adds	r3, #1
 8002780:	617b      	str	r3, [r7, #20]
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	429a      	cmp	r2, r3
 8002788:	dbf1      	blt.n	800276e <_write+0x62>
        }
        if (file == STDERR_FILENO)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2b02      	cmp	r3, #2
 800278e:	d10b      	bne.n	80027a8 <_write+0x9c>
        {
        	__stdout_put_char('\033');
 8002790:	201b      	movs	r0, #27
 8002792:	f7ff fe45 	bl	8002420 <__stdout_put_char>
        	__stdout_put_char('[');
 8002796:	205b      	movs	r0, #91	@ 0x5b
 8002798:	f7ff fe42 	bl	8002420 <__stdout_put_char>
        	__stdout_put_char('0');
 800279c:	2030      	movs	r0, #48	@ 0x30
 800279e:	f7ff fe3f 	bl	8002420 <__stdout_put_char>
        	__stdout_put_char('m');
 80027a2:	206d      	movs	r0, #109	@ 0x6d
 80027a4:	f7ff fe3c 	bl	8002420 <__stdout_put_char>
        }

#if defined(INC_FREERTOS_H) && defined(MV_SYSCALL_USE_EXCLUSIVE_LOCK_FOR_STDOUT)
        if ( locked )
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d004      	beq.n	80027b8 <_write+0xac>
        {
            xSemaphoreGiveRecursive( stdioSemaphore );
 80027ae:	4b0d      	ldr	r3, [pc, #52]	@ (80027e4 <_write+0xd8>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f006 fc74 	bl	80090a0 <xQueueGiveMutexRecursive>
        }
#endif

        return len;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	e00e      	b.n	80027da <_write+0xce>
    }
    else
    {
        if ( _impure_ptr != 0 )
 80027bc:	4b0a      	ldr	r3, [pc, #40]	@ (80027e8 <_write+0xdc>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d003      	beq.n	80027cc <_write+0xc0>
        {
            _impure_ptr->_errno = EBADF;
 80027c4:	4b08      	ldr	r3, [pc, #32]	@ (80027e8 <_write+0xdc>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2209      	movs	r2, #9
 80027ca:	601a      	str	r2, [r3, #0]
        }
        errno = EBADF;
 80027cc:	f00b fb16 	bl	800ddfc <__errno>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2209      	movs	r2, #9
 80027d4:	601a      	str	r2, [r3, #0]
        return -1;
 80027d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
    }
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3718      	adds	r7, #24
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	20000330 	.word	0x20000330
 80027e8:	2000018c 	.word	0x2000018c

080027ec <_close>:
 * An example can be seen in altera board support packages with the "dev" struct
 */
// ----------------------------------------------------------------------------
int _close( int file )
// ----------------------------------------------------------------------------
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
    ( void )file;

    return -1;
 80027f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <_fstat>:
 * An example can be seen in altera board support packages with the "dev" struct
 */
// ----------------------------------------------------------------------------
int _fstat( int file, struct stat* st )
// ----------------------------------------------------------------------------
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
    st->st_dev    = file;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	b21a      	sxth	r2, r3
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	801a      	strh	r2, [r3, #0]
    st->st_size   = 0;
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	2200      	movs	r2, #0
 800281a:	611a      	str	r2, [r3, #16]
    st->st_blocks = 0;
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	2200      	movs	r2, #0
 8002820:	64da      	str	r2, [r3, #76]	@ 0x4c

    if ( file >= 1 && file <= 3 )
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2b00      	cmp	r3, #0
 8002826:	dd08      	ble.n	800283a <_fstat+0x36>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2b03      	cmp	r3, #3
 800282c:	dc05      	bgt.n	800283a <_fstat+0x36>
    {
        st->st_mode = S_IFCHR;
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002834:	605a      	str	r2, [r3, #4]
        return 0;
 8002836:	2300      	movs	r3, #0
 8002838:	e005      	b.n	8002846 <_fstat+0x42>
    }
    else
    {
        st->st_mode = S_IFREG;
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002840:	605a      	str	r2, [r3, #4]
        return -1;
 8002842:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
    }
}
 8002846:	4618      	mov	r0, r3
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr

08002852 <_isatty>:
 * An example can be seen in altera board support packages with the "dev" struct
 */
// ----------------------------------------------------------------------------
int _isatty( int file )
// ----------------------------------------------------------------------------
{
 8002852:	b480      	push	{r7}
 8002854:	b083      	sub	sp, #12
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
    // is stdin, stdout or stderror
    if ( file >= 0 && file <= 2 )
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2b00      	cmp	r3, #0
 800285e:	db04      	blt.n	800286a <_isatty+0x18>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2b02      	cmp	r3, #2
 8002864:	dc01      	bgt.n	800286a <_isatty+0x18>
    {
        return file;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	e000      	b.n	800286c <_isatty+0x1a>
    }
    return 0;
 800286a:	2300      	movs	r3, #0
}
 800286c:	4618      	mov	r0, r3
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <_lseek>:

// ----------------------------------------------------------------------------
int _lseek( int file, int ptr, int dir )
// ----------------------------------------------------------------------------
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
    ( void )file;
    ( void )ptr;
    ( void )dir;

    return 0;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3714      	adds	r7, #20
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
	...

08002894 <_sbrk_r>:
static UBaseType_t malLock_uxSavedInterruptStatus;

// ----------------------------------------------------------------------------
void* _sbrk_r( struct _reent* pReent, int incr )
// ----------------------------------------------------------------------------
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b088      	sub	sp, #32
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
    ( void )pReent;
    ( void )incr;
    register char* stack_ptr asm( "sp" );

    // make sure to calculate the correct heap size and bytes remaining at the first call!
    if( TotalHeapSize == 0 )
 800289e:	4b37      	ldr	r3, [pc, #220]	@ (800297c <_sbrk_r+0xe8>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d113      	bne.n	80028ce <_sbrk_r+0x3a>
    {
        TotalHeapSize = heapBytesRemaining = stickyHeapBytesRemaining
                                             = ( int )( ( &__HeapLimit ) - ( &__HeapBase ) )
 80028a6:	4a36      	ldr	r2, [pc, #216]	@ (8002980 <_sbrk_r+0xec>)
 80028a8:	4b36      	ldr	r3, [pc, #216]	@ (8002984 <_sbrk_r+0xf0>)
 80028aa:	1ad3      	subs	r3, r2, r3
#ifdef configISR_STACK_SIZE_WORDS
                                               - ( configISR_STACK_SIZE_WORDS * 4 )
 80028ac:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80028b0:	461a      	mov	r2, r3
                                             = ( int )( ( &__HeapLimit ) - ( &__HeapBase ) )
 80028b2:	4b35      	ldr	r3, [pc, #212]	@ (8002988 <_sbrk_r+0xf4>)
 80028b4:	601a      	str	r2, [r3, #0]
 80028b6:	4a32      	ldr	r2, [pc, #200]	@ (8002980 <_sbrk_r+0xec>)
 80028b8:	4b32      	ldr	r3, [pc, #200]	@ (8002984 <_sbrk_r+0xf0>)
 80028ba:	1ad3      	subs	r3, r2, r3
                                               - ( configISR_STACK_SIZE_WORDS * 4 )
 80028bc:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
        TotalHeapSize = heapBytesRemaining = stickyHeapBytesRemaining
 80028c0:	4a32      	ldr	r2, [pc, #200]	@ (800298c <_sbrk_r+0xf8>)
 80028c2:	6013      	str	r3, [r2, #0]
 80028c4:	4b31      	ldr	r3, [pc, #196]	@ (800298c <_sbrk_r+0xf8>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	461a      	mov	r2, r3
 80028ca:	4b2c      	ldr	r3, [pc, #176]	@ (800297c <_sbrk_r+0xe8>)
 80028cc:	601a      	str	r2, [r3, #0]
#endif
                                               ;
    };
    static char* currentHeapEnd = &__HeapBase;
    char* limit = ( xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED ) ?
 80028ce:	f008 f9c3 	bl	800ac58 <xTaskGetSchedulerState>
 80028d2:	4603      	mov	r3, r0
                  stack_ptr   :  // Before scheduler is started, limit is stack pointer (risky!)
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d101      	bne.n	80028dc <_sbrk_r+0x48>
 80028d8:	466b      	mov	r3, sp
 80028da:	e000      	b.n	80028de <_sbrk_r+0x4a>
 80028dc:	4b2c      	ldr	r3, [pc, #176]	@ (8002990 <_sbrk_r+0xfc>)
    char* limit = ( xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED ) ?
 80028de:	61fb      	str	r3, [r7, #28]
    __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80028e0:	f3ef 8305 	mrs	r3, IPSR
 80028e4:	613b      	str	r3, [r7, #16]
    if( ulCurrentInterrupt == 0 )
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d102      	bne.n	80028f2 <_sbrk_r+0x5e>
        xReturn = pdFALSE;
 80028ec:	2300      	movs	r3, #0
 80028ee:	60fb      	str	r3, [r7, #12]
 80028f0:	e001      	b.n	80028f6 <_sbrk_r+0x62>
        xReturn = pdTRUE;
 80028f2:	2301      	movs	r3, #1
 80028f4:	60fb      	str	r3, [r7, #12]
    return xReturn;
 80028f6:	68fb      	ldr	r3, [r7, #12]
                  &__HeapLimit
#ifdef configISR_STACK_SIZE_WORDS
                  - ( configISR_STACK_SIZE_WORDS * 4 )
#endif
                  ; // Once running, OK to reuse all remaining RAM except ISR stack (MSP) stack
    DRN_ENTER_CRITICAL_SECTION( malLock_uxSavedInterruptStatus );
 80028f8:	61bb      	str	r3, [r7, #24]
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d010      	beq.n	8002922 <_sbrk_r+0x8e>
    __asm volatile
 8002900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002904:	b672      	cpsid	i
 8002906:	f383 8811 	msr	BASEPRI, r3
 800290a:	f3bf 8f6f 	isb	sy
 800290e:	f3bf 8f4f 	dsb	sy
 8002912:	b662      	cpsie	i
 8002914:	60bb      	str	r3, [r7, #8]
}
 8002916:	bf00      	nop
 8002918:	f240 21c1 	movw	r1, #705	@ 0x2c1
 800291c:	481d      	ldr	r0, [pc, #116]	@ (8002994 <_sbrk_r+0x100>)
 800291e:	f7ff fd6b 	bl	80023f8 <vAssertCalled>
    if ( currentHeapEnd + incr > limit )
 8002922:	4b1d      	ldr	r3, [pc, #116]	@ (8002998 <_sbrk_r+0x104>)
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	4413      	add	r3, r2
 800292a:	69fa      	ldr	r2, [r7, #28]
 800292c:	429a      	cmp	r2, r3
 800292e:	d204      	bcs.n	800293a <_sbrk_r+0xa6>
        // Ooops, no more memory available...
#if( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            extern void vApplicationMallocFailedHook( void );
            DRN_EXIT_CRITICAL_SECTION( malLock_uxSavedInterruptStatus );
            vApplicationMallocFailedHook();
 8002930:	f7ff f8e0 	bl	8001af4 <vApplicationMallocFailedHook>
#else
        // Default, if you prefer to believe your application will gracefully trap out-of-memory...
        pReent->_errno = ENOMEM; // newlib's thread-specific errno
        DRN_EXIT_CRITICAL_SECTION( malLock_uxSavedInterruptStatus );
#endif
        return ( char* ) -1; // the malloc-family routine that called sbrk will return 0
 8002934:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002938:	e01b      	b.n	8002972 <_sbrk_r+0xde>
    }

    char* previousHeapEnd = currentHeapEnd;
 800293a:	4b17      	ldr	r3, [pc, #92]	@ (8002998 <_sbrk_r+0x104>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	617b      	str	r3, [r7, #20]
    currentHeapEnd += incr;
 8002940:	4b15      	ldr	r3, [pc, #84]	@ (8002998 <_sbrk_r+0x104>)
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	4413      	add	r3, r2
 8002948:	4a13      	ldr	r2, [pc, #76]	@ (8002998 <_sbrk_r+0x104>)
 800294a:	6013      	str	r3, [r2, #0]
    heapBytesRemaining -= incr;
 800294c:	4b0f      	ldr	r3, [pc, #60]	@ (800298c <_sbrk_r+0xf8>)
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	4a0d      	ldr	r2, [pc, #52]	@ (800298c <_sbrk_r+0xf8>)
 8002956:	6013      	str	r3, [r2, #0]

    // implement the statistical feature to provide the minimum free heap size feature
    // of FreeRTOS statistics
    if ( stickyHeapBytesRemaining > xPortGetFreeHeapSize() )
 8002958:	f000 f888 	bl	8002a6c <xPortGetFreeHeapSize>
 800295c:	4602      	mov	r2, r0
 800295e:	4b0a      	ldr	r3, [pc, #40]	@ (8002988 <_sbrk_r+0xf4>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	429a      	cmp	r2, r3
 8002964:	d204      	bcs.n	8002970 <_sbrk_r+0xdc>
    {
        stickyHeapBytesRemaining = xPortGetFreeHeapSize();
 8002966:	f000 f881 	bl	8002a6c <xPortGetFreeHeapSize>
 800296a:	4603      	mov	r3, r0
 800296c:	4a06      	ldr	r2, [pc, #24]	@ (8002988 <_sbrk_r+0xf4>)
 800296e:	6013      	str	r3, [r2, #0]
    }

    DRN_EXIT_CRITICAL_SECTION( malLock_uxSavedInterruptStatus );
    return ( char* ) previousHeapEnd;
 8002970:	697b      	ldr	r3, [r7, #20]
}
 8002972:	4618      	mov	r0, r3
 8002974:	3720      	adds	r7, #32
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	20000344 	.word	0x20000344
 8002980:	20050000 	.word	0x20050000
 8002984:	20000640 	.word	0x20000640
 8002988:	20000340 	.word	0x20000340
 800298c:	2000033c 	.word	0x2000033c
 8002990:	2004c000 	.word	0x2004c000
 8002994:	08010824 	.word	0x08010824
 8002998:	20000000 	.word	0x20000000

0800299c <__malloc_lock>:
}

// ----------------------------------------------------------------------------
__attribute__( ( weak ) ) void __malloc_lock( struct _reent* r )
// ----------------------------------------------------------------------------
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
    ( void )r;

#if  defined(INC_FREERTOS_H) && defined(MV_SYSCALL_USE_EXCLUSIVE_LOCK_FOR_MALLOC)
    if ( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING  )
 80029a4:	f008 f958 	bl	800ac58 <xTaskGetSchedulerState>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d106      	bne.n	80029bc <__malloc_lock+0x20>
    {
        xSemaphoreTakeRecursive( mallocSemaphore, -1 );
 80029ae:	4b16      	ldr	r3, [pc, #88]	@ (8002a08 <__malloc_lock+0x6c>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80029b6:	4618      	mov	r0, r3
 80029b8:	f006 fbae 	bl	8009118 <xQueueTakeMutexRecursive>
    __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80029bc:	f3ef 8305 	mrs	r3, IPSR
 80029c0:	613b      	str	r3, [r7, #16]
    if( ulCurrentInterrupt == 0 )
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d102      	bne.n	80029ce <__malloc_lock+0x32>
        xReturn = pdFALSE;
 80029c8:	2300      	movs	r3, #0
 80029ca:	60fb      	str	r3, [r7, #12]
 80029cc:	e001      	b.n	80029d2 <__malloc_lock+0x36>
        xReturn = pdTRUE;
 80029ce:	2301      	movs	r3, #1
 80029d0:	60fb      	str	r3, [r7, #12]
    return xReturn;
 80029d2:	68fb      	ldr	r3, [r7, #12]
    }
#endif

    DRN_ENTER_CRITICAL_SECTION( malLock_uxSavedInterruptStatus );
 80029d4:	617b      	str	r3, [r7, #20]
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d010      	beq.n	80029fe <__malloc_lock+0x62>
    __asm volatile
 80029dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029e0:	b672      	cpsid	i
 80029e2:	f383 8811 	msr	BASEPRI, r3
 80029e6:	f3bf 8f6f 	isb	sy
 80029ea:	f3bf 8f4f 	dsb	sy
 80029ee:	b662      	cpsie	i
 80029f0:	60bb      	str	r3, [r7, #8]
}
 80029f2:	bf00      	nop
 80029f4:	f44f 7142 	mov.w	r1, #776	@ 0x308
 80029f8:	4804      	ldr	r0, [pc, #16]	@ (8002a0c <__malloc_lock+0x70>)
 80029fa:	f7ff fcfd 	bl	80023f8 <vAssertCalled>
}
 80029fe:	bf00      	nop
 8002a00:	3718      	adds	r7, #24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	20000334 	.word	0x20000334
 8002a0c:	08010824 	.word	0x08010824

08002a10 <__malloc_unlock>:

// ----------------------------------------------------------------------------
__attribute__( ( weak ) ) void __malloc_unlock( struct _reent* r )
// ----------------------------------------------------------------------------
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
    ( void )r;

#if  defined(INC_FREERTOS_H) && defined(MV_SYSCALL_USE_EXCLUSIVE_LOCK_FOR_MALLOC)
    if ( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002a18:	f008 f91e 	bl	800ac58 <xTaskGetSchedulerState>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d104      	bne.n	8002a2c <__malloc_unlock+0x1c>
    {
        xSemaphoreGiveRecursive( mallocSemaphore );
 8002a22:	4b04      	ldr	r3, [pc, #16]	@ (8002a34 <__malloc_unlock+0x24>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f006 fb3a 	bl	80090a0 <xQueueGiveMutexRecursive>
    }
#endif

    DRN_EXIT_CRITICAL_SECTION( malLock_uxSavedInterruptStatus );
}
 8002a2c:	bf00      	nop
 8002a2e:	3708      	adds	r7, #8
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	20000334 	.word	0x20000334

08002a38 <pvPortMalloc>:
}

// ----------------------------------------------------------------------------
void* pvPortMalloc( size_t xSize )
// ----------------------------------------------------------------------------
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
    void* p = malloc( xSize );
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f009 f907 	bl	800bc54 <malloc>
 8002a46:	4603      	mov	r3, r0
 8002a48:	60fb      	str	r3, [r7, #12]
    return p;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3710      	adds	r7, #16
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <vPortFree>:

// ----------------------------------------------------------------------------
void vPortFree( void* pv )
// ----------------------------------------------------------------------------
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
    free( pv );
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f009 f901 	bl	800bc64 <free>
}
 8002a62:	bf00      	nop
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
	...

08002a6c <xPortGetFreeHeapSize>:

// ----------------------------------------------------------------------------
size_t xPortGetFreeHeapSize( void )
// ----------------------------------------------------------------------------
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b08c      	sub	sp, #48	@ 0x30
 8002a70:	af00      	add	r7, sp, #0
	static int lockGuard = 0;
	if ( lockGuard != 0 ) return stickyHeapBytesRemaining;
 8002a72:	4b0d      	ldr	r3, [pc, #52]	@ (8002aa8 <xPortGetFreeHeapSize+0x3c>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d002      	beq.n	8002a80 <xPortGetFreeHeapSize+0x14>
 8002a7a:	4b0c      	ldr	r3, [pc, #48]	@ (8002aac <xPortGetFreeHeapSize+0x40>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	e00f      	b.n	8002aa0 <xPortGetFreeHeapSize+0x34>
	lockGuard = 1;
 8002a80:	4b09      	ldr	r3, [pc, #36]	@ (8002aa8 <xPortGetFreeHeapSize+0x3c>)
 8002a82:	2201      	movs	r2, #1
 8002a84:	601a      	str	r2, [r3, #0]
    struct mallinfo mi = mallinfo();
 8002a86:	1d3b      	adds	r3, r7, #4
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f009 f995 	bl	800bdb8 <mallinfo>
    size_t result = mi.fordblks + heapBytesRemaining;
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a90:	4a07      	ldr	r2, [pc, #28]	@ (8002ab0 <xPortGetFreeHeapSize+0x44>)
 8002a92:	6812      	ldr	r2, [r2, #0]
 8002a94:	4413      	add	r3, r2
 8002a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    lockGuard = 0;
 8002a98:	4b03      	ldr	r3, [pc, #12]	@ (8002aa8 <xPortGetFreeHeapSize+0x3c>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	601a      	str	r2, [r3, #0]
    return result;
 8002a9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3730      	adds	r7, #48	@ 0x30
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	20000348 	.word	0x20000348
 8002aac:	20000340 	.word	0x20000340
 8002ab0:	2000033c 	.word	0x2000033c

08002ab4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002aba:	4b0f      	ldr	r3, [pc, #60]	@ (8002af8 <HAL_MspInit+0x44>)
 8002abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002abe:	4a0e      	ldr	r2, [pc, #56]	@ (8002af8 <HAL_MspInit+0x44>)
 8002ac0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ac4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ac6:	4b0c      	ldr	r3, [pc, #48]	@ (8002af8 <HAL_MspInit+0x44>)
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ace:	607b      	str	r3, [r7, #4]
 8002ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ad2:	4b09      	ldr	r3, [pc, #36]	@ (8002af8 <HAL_MspInit+0x44>)
 8002ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ad6:	4a08      	ldr	r2, [pc, #32]	@ (8002af8 <HAL_MspInit+0x44>)
 8002ad8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002adc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ade:	4b06      	ldr	r3, [pc, #24]	@ (8002af8 <HAL_MspInit+0x44>)
 8002ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ae2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ae6:	603b      	str	r3, [r7, #0]
 8002ae8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002aea:	bf00      	nop
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	40023800 	.word	0x40023800

08002afc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b08a      	sub	sp, #40	@ 0x28
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b04:	f107 0314 	add.w	r3, r7, #20
 8002b08:	2200      	movs	r2, #0
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	605a      	str	r2, [r3, #4]
 8002b0e:	609a      	str	r2, [r3, #8]
 8002b10:	60da      	str	r2, [r3, #12]
 8002b12:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a1b      	ldr	r2, [pc, #108]	@ (8002b88 <HAL_SPI_MspInit+0x8c>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d12f      	bne.n	8002b7e <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b1e:	4b1b      	ldr	r3, [pc, #108]	@ (8002b8c <HAL_SPI_MspInit+0x90>)
 8002b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b22:	4a1a      	ldr	r2, [pc, #104]	@ (8002b8c <HAL_SPI_MspInit+0x90>)
 8002b24:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002b28:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b2a:	4b18      	ldr	r3, [pc, #96]	@ (8002b8c <HAL_SPI_MspInit+0x90>)
 8002b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b2e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b32:	613b      	str	r3, [r7, #16]
 8002b34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b36:	4b15      	ldr	r3, [pc, #84]	@ (8002b8c <HAL_SPI_MspInit+0x90>)
 8002b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b3a:	4a14      	ldr	r2, [pc, #80]	@ (8002b8c <HAL_SPI_MspInit+0x90>)
 8002b3c:	f043 0301 	orr.w	r3, r3, #1
 8002b40:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b42:	4b12      	ldr	r3, [pc, #72]	@ (8002b8c <HAL_SPI_MspInit+0x90>)
 8002b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	60fb      	str	r3, [r7, #12]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = STEP_SPI_SCK_Pin|STEP_SPI_MISO_Pin|STEP_SPI_MOSI_Pin;
 8002b4e:	23e0      	movs	r3, #224	@ 0xe0
 8002b50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b52:	2302      	movs	r3, #2
 8002b54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b56:	2300      	movs	r3, #0
 8002b58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b5e:	2305      	movs	r3, #5
 8002b60:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b62:	f107 0314 	add.w	r3, r7, #20
 8002b66:	4619      	mov	r1, r3
 8002b68:	4809      	ldr	r0, [pc, #36]	@ (8002b90 <HAL_SPI_MspInit+0x94>)
 8002b6a:	f000 fc7d 	bl	8003468 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8002b6e:	2200      	movs	r2, #0
 8002b70:	2105      	movs	r1, #5
 8002b72:	2023      	movs	r0, #35	@ 0x23
 8002b74:	f000 fa78 	bl	8003068 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002b78:	2023      	movs	r0, #35	@ 0x23
 8002b7a:	f000 faa1 	bl	80030c0 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002b7e:	bf00      	nop
 8002b80:	3728      	adds	r7, #40	@ 0x28
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	40013000 	.word	0x40013000
 8002b8c:	40023800 	.word	0x40023800
 8002b90:	40020000 	.word	0x40020000

08002b94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ba4:	d10b      	bne.n	8002bbe <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ba6:	4b09      	ldr	r3, [pc, #36]	@ (8002bcc <HAL_TIM_Base_MspInit+0x38>)
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002baa:	4a08      	ldr	r2, [pc, #32]	@ (8002bcc <HAL_TIM_Base_MspInit+0x38>)
 8002bac:	f043 0301 	orr.w	r3, r3, #1
 8002bb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bb2:	4b06      	ldr	r3, [pc, #24]	@ (8002bcc <HAL_TIM_Base_MspInit+0x38>)
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	60fb      	str	r3, [r7, #12]
 8002bbc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002bbe:	bf00      	nop
 8002bc0:	3714      	adds	r7, #20
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	40023800 	.word	0x40023800

08002bd0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b088      	sub	sp, #32
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd8:	f107 030c 	add.w	r3, r7, #12
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]
 8002be0:	605a      	str	r2, [r3, #4]
 8002be2:	609a      	str	r2, [r3, #8]
 8002be4:	60da      	str	r2, [r3, #12]
 8002be6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bf0:	d11c      	bne.n	8002c2c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bf2:	4b10      	ldr	r3, [pc, #64]	@ (8002c34 <HAL_TIM_MspPostInit+0x64>)
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf6:	4a0f      	ldr	r2, [pc, #60]	@ (8002c34 <HAL_TIM_MspPostInit+0x64>)
 8002bf8:	f043 0302 	orr.w	r3, r3, #2
 8002bfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8002c34 <HAL_TIM_MspPostInit+0x64>)
 8002c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	60bb      	str	r3, [r7, #8]
 8002c08:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = SPINDLE_PWM_L_Pin|SPINDLE_PWM_R_Pin;
 8002c0a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002c0e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c10:	2302      	movs	r3, #2
 8002c12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c14:	2300      	movs	r3, #0
 8002c16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c20:	f107 030c 	add.w	r3, r7, #12
 8002c24:	4619      	mov	r1, r3
 8002c26:	4804      	ldr	r0, [pc, #16]	@ (8002c38 <HAL_TIM_MspPostInit+0x68>)
 8002c28:	f000 fc1e 	bl	8003468 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002c2c:	bf00      	nop
 8002c2e:	3720      	adds	r7, #32
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	40023800 	.word	0x40023800
 8002c38:	40020400 	.word	0x40020400

08002c3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b0aa      	sub	sp, #168	@ 0xa8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c44:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	605a      	str	r2, [r3, #4]
 8002c4e:	609a      	str	r2, [r3, #8]
 8002c50:	60da      	str	r2, [r3, #12]
 8002c52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c54:	f107 0310 	add.w	r3, r7, #16
 8002c58:	2284      	movs	r2, #132	@ 0x84
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f00b f80b 	bl	800dc78 <memset>
  if(huart->Instance==USART3)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a22      	ldr	r2, [pc, #136]	@ (8002cf0 <HAL_UART_MspInit+0xb4>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d13c      	bne.n	8002ce6 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002c6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c70:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002c72:	2300      	movs	r3, #0
 8002c74:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c76:	f107 0310 	add.w	r3, r7, #16
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f001 fd8c 	bl	8004798 <HAL_RCCEx_PeriphCLKConfig>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002c86:	f7ff fc66 	bl	8002556 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002c8a:	4b1a      	ldr	r3, [pc, #104]	@ (8002cf4 <HAL_UART_MspInit+0xb8>)
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8e:	4a19      	ldr	r2, [pc, #100]	@ (8002cf4 <HAL_UART_MspInit+0xb8>)
 8002c90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c94:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c96:	4b17      	ldr	r3, [pc, #92]	@ (8002cf4 <HAL_UART_MspInit+0xb8>)
 8002c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c9a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ca2:	4b14      	ldr	r3, [pc, #80]	@ (8002cf4 <HAL_UART_MspInit+0xb8>)
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ca6:	4a13      	ldr	r2, [pc, #76]	@ (8002cf4 <HAL_UART_MspInit+0xb8>)
 8002ca8:	f043 0308 	orr.w	r3, r3, #8
 8002cac:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cae:	4b11      	ldr	r3, [pc, #68]	@ (8002cf4 <HAL_UART_MspInit+0xb8>)
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cb2:	f003 0308 	and.w	r3, r3, #8
 8002cb6:	60bb      	str	r3, [r7, #8]
 8002cb8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = DEBUG_UART_TX_Pin|DEBUG_UART_RX_Pin;
 8002cba:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002cbe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002cd4:	2307      	movs	r3, #7
 8002cd6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cda:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002cde:	4619      	mov	r1, r3
 8002ce0:	4805      	ldr	r0, [pc, #20]	@ (8002cf8 <HAL_UART_MspInit+0xbc>)
 8002ce2:	f000 fbc1 	bl	8003468 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8002ce6:	bf00      	nop
 8002ce8:	37a8      	adds	r7, #168	@ 0xa8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	40004800 	.word	0x40004800
 8002cf4:	40023800 	.word	0x40023800
 8002cf8:	40020c00 	.word	0x40020c00

08002cfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d00:	bf00      	nop
 8002d02:	e7fd      	b.n	8002d00 <NMI_Handler+0x4>

08002d04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d08:	bf00      	nop
 8002d0a:	e7fd      	b.n	8002d08 <HardFault_Handler+0x4>

08002d0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d10:	bf00      	nop
 8002d12:	e7fd      	b.n	8002d10 <MemManage_Handler+0x4>

08002d14 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d18:	bf00      	nop
 8002d1a:	e7fd      	b.n	8002d18 <BusFault_Handler+0x4>

08002d1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d20:	bf00      	nop
 8002d22:	e7fd      	b.n	8002d20 <UsageFault_Handler+0x4>

08002d24 <DebugMon_Handler>:
void DebugMon_Handler(void)
{
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
#endif
void DebugMon_Handler(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */
}
 8002d28:	bf00      	nop
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr

08002d32 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */
#endif
void SysTick_Handler(void)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	af00      	add	r7, sp, #0
  extern void xPortSysTickHandler( void );
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d36:	f000 f887 	bl	8002e48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  xPortSysTickHandler();
 8002d3a:	f008 ff05 	bl	800bb48 <xPortSysTickHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8002d3e:	bf00      	nop
 8002d40:	bd80      	pop	{r7, pc}
	...

08002d44 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002d48:	4802      	ldr	r0, [pc, #8]	@ (8002d54 <SPI1_IRQHandler+0x10>)
 8002d4a:	f003 f943 	bl	8005fd4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002d4e:	bf00      	nop
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	200001f8 	.word	0x200001f8

08002d58 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d5c:	4b06      	ldr	r3, [pc, #24]	@ (8002d78 <SystemInit+0x20>)
 8002d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d62:	4a05      	ldr	r2, [pc, #20]	@ (8002d78 <SystemInit+0x20>)
 8002d64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d6c:	bf00      	nop
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	e000ed00 	.word	0xe000ed00

08002d7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
	  ldr   sp, =_estack      /* set stack pointer */
 8002d7c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002db4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002d80:	f7ff ffea 	bl	8002d58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d84:	480c      	ldr	r0, [pc, #48]	@ (8002db8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d86:	490d      	ldr	r1, [pc, #52]	@ (8002dbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d88:	4a0d      	ldr	r2, [pc, #52]	@ (8002dc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d8c:	e002      	b.n	8002d94 <LoopCopyDataInit>

08002d8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d92:	3304      	adds	r3, #4

08002d94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d98:	d3f9      	bcc.n	8002d8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d9a:	4a0a      	ldr	r2, [pc, #40]	@ (8002dc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d9c:	4c0a      	ldr	r4, [pc, #40]	@ (8002dc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002da0:	e001      	b.n	8002da6 <LoopFillZerobss>

08002da2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002da2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002da4:	3204      	adds	r2, #4

08002da6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002da6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002da8:	d3fb      	bcc.n	8002da2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002daa:	f00b f82d 	bl	800de08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002dae:	f7ff f869 	bl	8001e84 <main>
  bx  lr    
 8002db2:	4770      	bx	lr
	  ldr   sp, =_estack      /* set stack pointer */
 8002db4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002db8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002dbc:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002dc0:	08011390 	.word	0x08011390
  ldr r2, =_sbss
 8002dc4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002dc8:	2000063c 	.word	0x2000063c

08002dcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002dcc:	e7fe      	b.n	8002dcc <ADC_IRQHandler>

08002dce <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dd2:	2003      	movs	r0, #3
 8002dd4:	f000 f928 	bl	8003028 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dd8:	200f      	movs	r0, #15
 8002dda:	f000 f805 	bl	8002de8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002dde:	f7ff fe69 	bl	8002ab4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002df0:	4b12      	ldr	r3, [pc, #72]	@ (8002e3c <HAL_InitTick+0x54>)
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	4b12      	ldr	r3, [pc, #72]	@ (8002e40 <HAL_InitTick+0x58>)
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	4619      	mov	r1, r3
 8002dfa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002dfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e06:	4618      	mov	r0, r3
 8002e08:	f000 f972 	bl	80030f0 <HAL_SYSTICK_Config>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e00e      	b.n	8002e34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2b0f      	cmp	r3, #15
 8002e1a:	d80a      	bhi.n	8002e32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	6879      	ldr	r1, [r7, #4]
 8002e20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002e24:	f000 f920 	bl	8003068 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e28:	4a06      	ldr	r2, [pc, #24]	@ (8002e44 <HAL_InitTick+0x5c>)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	e000      	b.n	8002e34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3708      	adds	r7, #8
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	20000004 	.word	0x20000004
 8002e40:	2000000c 	.word	0x2000000c
 8002e44:	20000008 	.word	0x20000008

08002e48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e4c:	4b06      	ldr	r3, [pc, #24]	@ (8002e68 <HAL_IncTick+0x20>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	461a      	mov	r2, r3
 8002e52:	4b06      	ldr	r3, [pc, #24]	@ (8002e6c <HAL_IncTick+0x24>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4413      	add	r3, r2
 8002e58:	4a04      	ldr	r2, [pc, #16]	@ (8002e6c <HAL_IncTick+0x24>)
 8002e5a:	6013      	str	r3, [r2, #0]
}
 8002e5c:	bf00      	nop
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	2000000c 	.word	0x2000000c
 8002e6c:	2000034c 	.word	0x2000034c

08002e70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  return uwTick;
 8002e74:	4b03      	ldr	r3, [pc, #12]	@ (8002e84 <HAL_GetTick+0x14>)
 8002e76:	681b      	ldr	r3, [r3, #0]
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	2000034c 	.word	0x2000034c

08002e88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f003 0307 	and.w	r3, r3, #7
 8002e96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e98:	4b0b      	ldr	r3, [pc, #44]	@ (8002ec8 <__NVIC_SetPriorityGrouping+0x40>)
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e9e:	68ba      	ldr	r2, [r7, #8]
 8002ea0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002eb0:	4b06      	ldr	r3, [pc, #24]	@ (8002ecc <__NVIC_SetPriorityGrouping+0x44>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eb6:	4a04      	ldr	r2, [pc, #16]	@ (8002ec8 <__NVIC_SetPriorityGrouping+0x40>)
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	60d3      	str	r3, [r2, #12]
}
 8002ebc:	bf00      	nop
 8002ebe:	3714      	adds	r7, #20
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr
 8002ec8:	e000ed00 	.word	0xe000ed00
 8002ecc:	05fa0000 	.word	0x05fa0000

08002ed0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ed4:	4b04      	ldr	r3, [pc, #16]	@ (8002ee8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	0a1b      	lsrs	r3, r3, #8
 8002eda:	f003 0307 	and.w	r3, r3, #7
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr
 8002ee8:	e000ed00 	.word	0xe000ed00

08002eec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	db0b      	blt.n	8002f16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002efe:	79fb      	ldrb	r3, [r7, #7]
 8002f00:	f003 021f 	and.w	r2, r3, #31
 8002f04:	4907      	ldr	r1, [pc, #28]	@ (8002f24 <__NVIC_EnableIRQ+0x38>)
 8002f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f0a:	095b      	lsrs	r3, r3, #5
 8002f0c:	2001      	movs	r0, #1
 8002f0e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f16:	bf00      	nop
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	e000e100 	.word	0xe000e100

08002f28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	4603      	mov	r3, r0
 8002f30:	6039      	str	r1, [r7, #0]
 8002f32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	db0a      	blt.n	8002f52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	b2da      	uxtb	r2, r3
 8002f40:	490c      	ldr	r1, [pc, #48]	@ (8002f74 <__NVIC_SetPriority+0x4c>)
 8002f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f46:	0112      	lsls	r2, r2, #4
 8002f48:	b2d2      	uxtb	r2, r2
 8002f4a:	440b      	add	r3, r1
 8002f4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f50:	e00a      	b.n	8002f68 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	b2da      	uxtb	r2, r3
 8002f56:	4908      	ldr	r1, [pc, #32]	@ (8002f78 <__NVIC_SetPriority+0x50>)
 8002f58:	79fb      	ldrb	r3, [r7, #7]
 8002f5a:	f003 030f 	and.w	r3, r3, #15
 8002f5e:	3b04      	subs	r3, #4
 8002f60:	0112      	lsls	r2, r2, #4
 8002f62:	b2d2      	uxtb	r2, r2
 8002f64:	440b      	add	r3, r1
 8002f66:	761a      	strb	r2, [r3, #24]
}
 8002f68:	bf00      	nop
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr
 8002f74:	e000e100 	.word	0xe000e100
 8002f78:	e000ed00 	.word	0xe000ed00

08002f7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b089      	sub	sp, #36	@ 0x24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f003 0307 	and.w	r3, r3, #7
 8002f8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	f1c3 0307 	rsb	r3, r3, #7
 8002f96:	2b04      	cmp	r3, #4
 8002f98:	bf28      	it	cs
 8002f9a:	2304      	movcs	r3, #4
 8002f9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	3304      	adds	r3, #4
 8002fa2:	2b06      	cmp	r3, #6
 8002fa4:	d902      	bls.n	8002fac <NVIC_EncodePriority+0x30>
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	3b03      	subs	r3, #3
 8002faa:	e000      	b.n	8002fae <NVIC_EncodePriority+0x32>
 8002fac:	2300      	movs	r3, #0
 8002fae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fb0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fba:	43da      	mvns	r2, r3
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	401a      	ands	r2, r3
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fc4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	fa01 f303 	lsl.w	r3, r1, r3
 8002fce:	43d9      	mvns	r1, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fd4:	4313      	orrs	r3, r2
         );
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3724      	adds	r7, #36	@ 0x24
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
	...

08002fe4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ff4:	d301      	bcc.n	8002ffa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e00f      	b.n	800301a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ffa:	4a0a      	ldr	r2, [pc, #40]	@ (8003024 <SysTick_Config+0x40>)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	3b01      	subs	r3, #1
 8003000:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003002:	210f      	movs	r1, #15
 8003004:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003008:	f7ff ff8e 	bl	8002f28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800300c:	4b05      	ldr	r3, [pc, #20]	@ (8003024 <SysTick_Config+0x40>)
 800300e:	2200      	movs	r2, #0
 8003010:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003012:	4b04      	ldr	r3, [pc, #16]	@ (8003024 <SysTick_Config+0x40>)
 8003014:	2207      	movs	r2, #7
 8003016:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3708      	adds	r7, #8
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	e000e010 	.word	0xe000e010

08003028 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2b07      	cmp	r3, #7
 8003034:	d00f      	beq.n	8003056 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2b06      	cmp	r3, #6
 800303a:	d00c      	beq.n	8003056 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2b05      	cmp	r3, #5
 8003040:	d009      	beq.n	8003056 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2b04      	cmp	r3, #4
 8003046:	d006      	beq.n	8003056 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2b03      	cmp	r3, #3
 800304c:	d003      	beq.n	8003056 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800304e:	2191      	movs	r1, #145	@ 0x91
 8003050:	4804      	ldr	r0, [pc, #16]	@ (8003064 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8003052:	f7ff fa87 	bl	8002564 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f7ff ff16 	bl	8002e88 <__NVIC_SetPriorityGrouping>
}
 800305c:	bf00      	nop
 800305e:	3708      	adds	r7, #8
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	08010840 	.word	0x08010840

08003068 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003068:	b580      	push	{r7, lr}
 800306a:	b086      	sub	sp, #24
 800306c:	af00      	add	r7, sp, #0
 800306e:	4603      	mov	r3, r0
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	607a      	str	r2, [r7, #4]
 8003074:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003076:	2300      	movs	r3, #0
 8003078:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2b0f      	cmp	r3, #15
 800307e:	d903      	bls.n	8003088 <HAL_NVIC_SetPriority+0x20>
 8003080:	21a9      	movs	r1, #169	@ 0xa9
 8003082:	480e      	ldr	r0, [pc, #56]	@ (80030bc <HAL_NVIC_SetPriority+0x54>)
 8003084:	f7ff fa6e 	bl	8002564 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	2b0f      	cmp	r3, #15
 800308c:	d903      	bls.n	8003096 <HAL_NVIC_SetPriority+0x2e>
 800308e:	21aa      	movs	r1, #170	@ 0xaa
 8003090:	480a      	ldr	r0, [pc, #40]	@ (80030bc <HAL_NVIC_SetPriority+0x54>)
 8003092:	f7ff fa67 	bl	8002564 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003096:	f7ff ff1b 	bl	8002ed0 <__NVIC_GetPriorityGrouping>
 800309a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	68b9      	ldr	r1, [r7, #8]
 80030a0:	6978      	ldr	r0, [r7, #20]
 80030a2:	f7ff ff6b 	bl	8002f7c <NVIC_EncodePriority>
 80030a6:	4602      	mov	r2, r0
 80030a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030ac:	4611      	mov	r1, r2
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7ff ff3a 	bl	8002f28 <__NVIC_SetPriority>
}
 80030b4:	bf00      	nop
 80030b6:	3718      	adds	r7, #24
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	08010840 	.word	0x08010840

080030c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	4603      	mov	r3, r0
 80030c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80030ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	da03      	bge.n	80030da <HAL_NVIC_EnableIRQ+0x1a>
 80030d2:	21bd      	movs	r1, #189	@ 0xbd
 80030d4:	4805      	ldr	r0, [pc, #20]	@ (80030ec <HAL_NVIC_EnableIRQ+0x2c>)
 80030d6:	f7ff fa45 	bl	8002564 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030de:	4618      	mov	r0, r3
 80030e0:	f7ff ff04 	bl	8002eec <__NVIC_EnableIRQ>
}
 80030e4:	bf00      	nop
 80030e6:	3708      	adds	r7, #8
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	08010840 	.word	0x08010840

080030f0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f7ff ff73 	bl	8002fe4 <SysTick_Config>
 80030fe:	4603      	mov	r3, r0
}
 8003100:	4618      	mov	r0, r3
 8003102:	3708      	adds	r7, #8
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800310c:	f3bf 8f5f 	dmb	sy
}
 8003110:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003112:	4b07      	ldr	r3, [pc, #28]	@ (8003130 <HAL_MPU_Disable+0x28>)
 8003114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003116:	4a06      	ldr	r2, [pc, #24]	@ (8003130 <HAL_MPU_Disable+0x28>)
 8003118:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800311c:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800311e:	4b05      	ldr	r3, [pc, #20]	@ (8003134 <HAL_MPU_Disable+0x2c>)
 8003120:	2200      	movs	r2, #0
 8003122:	605a      	str	r2, [r3, #4]
}
 8003124:	bf00      	nop
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	e000ed00 	.word	0xe000ed00
 8003134:	e000ed90 	.word	0xe000ed90

08003138 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003140:	4a0b      	ldr	r2, [pc, #44]	@ (8003170 <HAL_MPU_Enable+0x38>)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f043 0301 	orr.w	r3, r3, #1
 8003148:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800314a:	4b0a      	ldr	r3, [pc, #40]	@ (8003174 <HAL_MPU_Enable+0x3c>)
 800314c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800314e:	4a09      	ldr	r2, [pc, #36]	@ (8003174 <HAL_MPU_Enable+0x3c>)
 8003150:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003154:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003156:	f3bf 8f4f 	dsb	sy
}
 800315a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800315c:	f3bf 8f6f 	isb	sy
}
 8003160:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003162:	bf00      	nop
 8003164:	370c      	adds	r7, #12
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	e000ed90 	.word	0xe000ed90
 8003174:	e000ed00 	.word	0xe000ed00

08003178 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	785b      	ldrb	r3, [r3, #1]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d020      	beq.n	80031ca <HAL_MPU_ConfigRegion+0x52>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	785b      	ldrb	r3, [r3, #1]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d01c      	beq.n	80031ca <HAL_MPU_ConfigRegion+0x52>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	785b      	ldrb	r3, [r3, #1]
 8003194:	2b02      	cmp	r3, #2
 8003196:	d018      	beq.n	80031ca <HAL_MPU_ConfigRegion+0x52>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	785b      	ldrb	r3, [r3, #1]
 800319c:	2b03      	cmp	r3, #3
 800319e:	d014      	beq.n	80031ca <HAL_MPU_ConfigRegion+0x52>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	785b      	ldrb	r3, [r3, #1]
 80031a4:	2b04      	cmp	r3, #4
 80031a6:	d010      	beq.n	80031ca <HAL_MPU_ConfigRegion+0x52>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	785b      	ldrb	r3, [r3, #1]
 80031ac:	2b05      	cmp	r3, #5
 80031ae:	d00c      	beq.n	80031ca <HAL_MPU_ConfigRegion+0x52>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	785b      	ldrb	r3, [r3, #1]
 80031b4:	2b06      	cmp	r3, #6
 80031b6:	d008      	beq.n	80031ca <HAL_MPU_ConfigRegion+0x52>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	785b      	ldrb	r3, [r3, #1]
 80031bc:	2b07      	cmp	r3, #7
 80031be:	d004      	beq.n	80031ca <HAL_MPU_ConfigRegion+0x52>
 80031c0:	f44f 71a7 	mov.w	r1, #334	@ 0x14e
 80031c4:	488c      	ldr	r0, [pc, #560]	@ (80033f8 <HAL_MPU_ConfigRegion+0x280>)
 80031c6:	f7ff f9cd 	bl	8002564 <assert_failed>
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d008      	beq.n	80031e4 <HAL_MPU_ConfigRegion+0x6c>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d004      	beq.n	80031e4 <HAL_MPU_ConfigRegion+0x6c>
 80031da:	f240 114f 	movw	r1, #335	@ 0x14f
 80031de:	4886      	ldr	r0, [pc, #536]	@ (80033f8 <HAL_MPU_ConfigRegion+0x280>)
 80031e0:	f7ff f9c0 	bl	8002564 <assert_failed>
  assert_param(IS_MPU_INSTRUCTION_ACCESS(MPU_Init->DisableExec));
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	7b1b      	ldrb	r3, [r3, #12]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d008      	beq.n	80031fe <HAL_MPU_ConfigRegion+0x86>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	7b1b      	ldrb	r3, [r3, #12]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d004      	beq.n	80031fe <HAL_MPU_ConfigRegion+0x86>
 80031f4:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 80031f8:	487f      	ldr	r0, [pc, #508]	@ (80033f8 <HAL_MPU_ConfigRegion+0x280>)
 80031fa:	f7ff f9b3 	bl	8002564 <assert_failed>
  assert_param(IS_MPU_REGION_PERMISSION_ATTRIBUTE(MPU_Init->AccessPermission));
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	7adb      	ldrb	r3, [r3, #11]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d018      	beq.n	8003238 <HAL_MPU_ConfigRegion+0xc0>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	7adb      	ldrb	r3, [r3, #11]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d014      	beq.n	8003238 <HAL_MPU_ConfigRegion+0xc0>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	7adb      	ldrb	r3, [r3, #11]
 8003212:	2b02      	cmp	r3, #2
 8003214:	d010      	beq.n	8003238 <HAL_MPU_ConfigRegion+0xc0>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	7adb      	ldrb	r3, [r3, #11]
 800321a:	2b03      	cmp	r3, #3
 800321c:	d00c      	beq.n	8003238 <HAL_MPU_ConfigRegion+0xc0>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	7adb      	ldrb	r3, [r3, #11]
 8003222:	2b05      	cmp	r3, #5
 8003224:	d008      	beq.n	8003238 <HAL_MPU_ConfigRegion+0xc0>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	7adb      	ldrb	r3, [r3, #11]
 800322a:	2b06      	cmp	r3, #6
 800322c:	d004      	beq.n	8003238 <HAL_MPU_ConfigRegion+0xc0>
 800322e:	f240 1151 	movw	r1, #337	@ 0x151
 8003232:	4871      	ldr	r0, [pc, #452]	@ (80033f8 <HAL_MPU_ConfigRegion+0x280>)
 8003234:	f7ff f996 	bl	8002564 <assert_failed>
  assert_param(IS_MPU_TEX_LEVEL(MPU_Init->TypeExtField));
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	7a9b      	ldrb	r3, [r3, #10]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00c      	beq.n	800325a <HAL_MPU_ConfigRegion+0xe2>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	7a9b      	ldrb	r3, [r3, #10]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d008      	beq.n	800325a <HAL_MPU_ConfigRegion+0xe2>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	7a9b      	ldrb	r3, [r3, #10]
 800324c:	2b02      	cmp	r3, #2
 800324e:	d004      	beq.n	800325a <HAL_MPU_ConfigRegion+0xe2>
 8003250:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 8003254:	4868      	ldr	r0, [pc, #416]	@ (80033f8 <HAL_MPU_ConfigRegion+0x280>)
 8003256:	f7ff f985 	bl	8002564 <assert_failed>
  assert_param(IS_MPU_ACCESS_SHAREABLE(MPU_Init->IsShareable));
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	7b5b      	ldrb	r3, [r3, #13]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d008      	beq.n	8003274 <HAL_MPU_ConfigRegion+0xfc>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	7b5b      	ldrb	r3, [r3, #13]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d004      	beq.n	8003274 <HAL_MPU_ConfigRegion+0xfc>
 800326a:	f240 1153 	movw	r1, #339	@ 0x153
 800326e:	4862      	ldr	r0, [pc, #392]	@ (80033f8 <HAL_MPU_ConfigRegion+0x280>)
 8003270:	f7ff f978 	bl	8002564 <assert_failed>
  assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	7b9b      	ldrb	r3, [r3, #14]
 8003278:	2b01      	cmp	r3, #1
 800327a:	d008      	beq.n	800328e <HAL_MPU_ConfigRegion+0x116>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	7b9b      	ldrb	r3, [r3, #14]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d004      	beq.n	800328e <HAL_MPU_ConfigRegion+0x116>
 8003284:	f44f 71aa 	mov.w	r1, #340	@ 0x154
 8003288:	485b      	ldr	r0, [pc, #364]	@ (80033f8 <HAL_MPU_ConfigRegion+0x280>)
 800328a:	f7ff f96b 	bl	8002564 <assert_failed>
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	7bdb      	ldrb	r3, [r3, #15]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d008      	beq.n	80032a8 <HAL_MPU_ConfigRegion+0x130>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	7bdb      	ldrb	r3, [r3, #15]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d004      	beq.n	80032a8 <HAL_MPU_ConfigRegion+0x130>
 800329e:	f240 1155 	movw	r1, #341	@ 0x155
 80032a2:	4855      	ldr	r0, [pc, #340]	@ (80033f8 <HAL_MPU_ConfigRegion+0x280>)
 80032a4:	f7ff f95e 	bl	8002564 <assert_failed>
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	7a5b      	ldrb	r3, [r3, #9]
 80032ac:	2bff      	cmp	r3, #255	@ 0xff
 80032ae:	d104      	bne.n	80032ba <HAL_MPU_ConfigRegion+0x142>
 80032b0:	f44f 71ab 	mov.w	r1, #342	@ 0x156
 80032b4:	4850      	ldr	r0, [pc, #320]	@ (80033f8 <HAL_MPU_ConfigRegion+0x280>)
 80032b6:	f7ff f955 	bl	8002564 <assert_failed>
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	7a1b      	ldrb	r3, [r3, #8]
 80032be:	2b04      	cmp	r3, #4
 80032c0:	d070      	beq.n	80033a4 <HAL_MPU_ConfigRegion+0x22c>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	7a1b      	ldrb	r3, [r3, #8]
 80032c6:	2b05      	cmp	r3, #5
 80032c8:	d06c      	beq.n	80033a4 <HAL_MPU_ConfigRegion+0x22c>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	7a1b      	ldrb	r3, [r3, #8]
 80032ce:	2b06      	cmp	r3, #6
 80032d0:	d068      	beq.n	80033a4 <HAL_MPU_ConfigRegion+0x22c>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	7a1b      	ldrb	r3, [r3, #8]
 80032d6:	2b07      	cmp	r3, #7
 80032d8:	d064      	beq.n	80033a4 <HAL_MPU_ConfigRegion+0x22c>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	7a1b      	ldrb	r3, [r3, #8]
 80032de:	2b08      	cmp	r3, #8
 80032e0:	d060      	beq.n	80033a4 <HAL_MPU_ConfigRegion+0x22c>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	7a1b      	ldrb	r3, [r3, #8]
 80032e6:	2b09      	cmp	r3, #9
 80032e8:	d05c      	beq.n	80033a4 <HAL_MPU_ConfigRegion+0x22c>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	7a1b      	ldrb	r3, [r3, #8]
 80032ee:	2b0a      	cmp	r3, #10
 80032f0:	d058      	beq.n	80033a4 <HAL_MPU_ConfigRegion+0x22c>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	7a1b      	ldrb	r3, [r3, #8]
 80032f6:	2b0b      	cmp	r3, #11
 80032f8:	d054      	beq.n	80033a4 <HAL_MPU_ConfigRegion+0x22c>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	7a1b      	ldrb	r3, [r3, #8]
 80032fe:	2b0c      	cmp	r3, #12
 8003300:	d050      	beq.n	80033a4 <HAL_MPU_ConfigRegion+0x22c>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	7a1b      	ldrb	r3, [r3, #8]
 8003306:	2b0d      	cmp	r3, #13
 8003308:	d04c      	beq.n	80033a4 <HAL_MPU_ConfigRegion+0x22c>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	7a1b      	ldrb	r3, [r3, #8]
 800330e:	2b0e      	cmp	r3, #14
 8003310:	d048      	beq.n	80033a4 <HAL_MPU_ConfigRegion+0x22c>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	7a1b      	ldrb	r3, [r3, #8]
 8003316:	2b0f      	cmp	r3, #15
 8003318:	d044      	beq.n	80033a4 <HAL_MPU_ConfigRegion+0x22c>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	7a1b      	ldrb	r3, [r3, #8]
 800331e:	2b10      	cmp	r3, #16
 8003320:	d040      	beq.n	80033a4 <HAL_MPU_ConfigRegion+0x22c>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	7a1b      	ldrb	r3, [r3, #8]
 8003326:	2b11      	cmp	r3, #17
 8003328:	d03c      	beq.n	80033a4 <HAL_MPU_ConfigRegion+0x22c>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	7a1b      	ldrb	r3, [r3, #8]
 800332e:	2b12      	cmp	r3, #18
 8003330:	d038      	beq.n	80033a4 <HAL_MPU_ConfigRegion+0x22c>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	7a1b      	ldrb	r3, [r3, #8]
 8003336:	2b13      	cmp	r3, #19
 8003338:	d034      	beq.n	80033a4 <HAL_MPU_ConfigRegion+0x22c>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	7a1b      	ldrb	r3, [r3, #8]
 800333e:	2b14      	cmp	r3, #20
 8003340:	d030      	beq.n	80033a4 <HAL_MPU_ConfigRegion+0x22c>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	7a1b      	ldrb	r3, [r3, #8]
 8003346:	2b15      	cmp	r3, #21
 8003348:	d02c      	beq.n	80033a4 <HAL_MPU_ConfigRegion+0x22c>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	7a1b      	ldrb	r3, [r3, #8]
 800334e:	2b16      	cmp	r3, #22
 8003350:	d028      	beq.n	80033a4 <HAL_MPU_ConfigRegion+0x22c>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	7a1b      	ldrb	r3, [r3, #8]
 8003356:	2b17      	cmp	r3, #23
 8003358:	d024      	beq.n	80033a4 <HAL_MPU_ConfigRegion+0x22c>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	7a1b      	ldrb	r3, [r3, #8]
 800335e:	2b18      	cmp	r3, #24
 8003360:	d020      	beq.n	80033a4 <HAL_MPU_ConfigRegion+0x22c>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	7a1b      	ldrb	r3, [r3, #8]
 8003366:	2b19      	cmp	r3, #25
 8003368:	d01c      	beq.n	80033a4 <HAL_MPU_ConfigRegion+0x22c>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	7a1b      	ldrb	r3, [r3, #8]
 800336e:	2b1a      	cmp	r3, #26
 8003370:	d018      	beq.n	80033a4 <HAL_MPU_ConfigRegion+0x22c>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	7a1b      	ldrb	r3, [r3, #8]
 8003376:	2b1b      	cmp	r3, #27
 8003378:	d014      	beq.n	80033a4 <HAL_MPU_ConfigRegion+0x22c>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	7a1b      	ldrb	r3, [r3, #8]
 800337e:	2b1c      	cmp	r3, #28
 8003380:	d010      	beq.n	80033a4 <HAL_MPU_ConfigRegion+0x22c>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	7a1b      	ldrb	r3, [r3, #8]
 8003386:	2b1d      	cmp	r3, #29
 8003388:	d00c      	beq.n	80033a4 <HAL_MPU_ConfigRegion+0x22c>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	7a1b      	ldrb	r3, [r3, #8]
 800338e:	2b1e      	cmp	r3, #30
 8003390:	d008      	beq.n	80033a4 <HAL_MPU_ConfigRegion+0x22c>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	7a1b      	ldrb	r3, [r3, #8]
 8003396:	2b1f      	cmp	r3, #31
 8003398:	d004      	beq.n	80033a4 <HAL_MPU_ConfigRegion+0x22c>
 800339a:	f240 1157 	movw	r1, #343	@ 0x157
 800339e:	4816      	ldr	r0, [pc, #88]	@ (80033f8 <HAL_MPU_ConfigRegion+0x280>)
 80033a0:	f7ff f8e0 	bl	8002564 <assert_failed>

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	785a      	ldrb	r2, [r3, #1]
 80033a8:	4b14      	ldr	r3, [pc, #80]	@ (80033fc <HAL_MPU_ConfigRegion+0x284>)
 80033aa:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80033ac:	4b13      	ldr	r3, [pc, #76]	@ (80033fc <HAL_MPU_ConfigRegion+0x284>)
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	4a12      	ldr	r2, [pc, #72]	@ (80033fc <HAL_MPU_ConfigRegion+0x284>)
 80033b2:	f023 0301 	bic.w	r3, r3, #1
 80033b6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80033b8:	4a10      	ldr	r2, [pc, #64]	@ (80033fc <HAL_MPU_ConfigRegion+0x284>)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	7b1b      	ldrb	r3, [r3, #12]
 80033c4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	7adb      	ldrb	r3, [r3, #11]
 80033ca:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80033cc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	7a9b      	ldrb	r3, [r3, #10]
 80033d2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80033d4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	7b5b      	ldrb	r3, [r3, #13]
 80033da:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80033dc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	7b9b      	ldrb	r3, [r3, #14]
 80033e2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80033e4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	7bdb      	ldrb	r3, [r3, #15]
 80033ea:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80033ec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	7a5b      	ldrb	r3, [r3, #9]
 80033f2:	021b      	lsls	r3, r3, #8
 80033f4:	e004      	b.n	8003400 <HAL_MPU_ConfigRegion+0x288>
 80033f6:	bf00      	nop
 80033f8:	08010840 	.word	0x08010840
 80033fc:	e000ed90 	.word	0xe000ed90
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003400:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	7a1b      	ldrb	r3, [r3, #8]
 8003406:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003408:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	7812      	ldrb	r2, [r2, #0]
 800340e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003410:	4a03      	ldr	r2, [pc, #12]	@ (8003420 <HAL_MPU_ConfigRegion+0x2a8>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003412:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003414:	6113      	str	r3, [r2, #16]
}
 8003416:	bf00      	nop
 8003418:	3708      	adds	r7, #8
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	e000ed90 	.word	0xe000ed90

08003424 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003432:	b2db      	uxtb	r3, r3
 8003434:	2b02      	cmp	r3, #2
 8003436:	d004      	beq.n	8003442 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2280      	movs	r2, #128	@ 0x80
 800343c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e00c      	b.n	800345c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2205      	movs	r2, #5
 8003446:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f022 0201 	bic.w	r2, r2, #1
 8003458:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800345a:	2300      	movs	r3, #0
}
 800345c:	4618      	mov	r0, r3
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b088      	sub	sp, #32
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003472:	2300      	movs	r3, #0
 8003474:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003476:	2300      	movs	r3, #0
 8003478:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800347a:	2300      	movs	r3, #0
 800347c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800347e:	2300      	movs	r3, #0
 8003480:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a3a      	ldr	r2, [pc, #232]	@ (8003570 <HAL_GPIO_Init+0x108>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d02b      	beq.n	80034e2 <HAL_GPIO_Init+0x7a>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a39      	ldr	r2, [pc, #228]	@ (8003574 <HAL_GPIO_Init+0x10c>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d027      	beq.n	80034e2 <HAL_GPIO_Init+0x7a>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a38      	ldr	r2, [pc, #224]	@ (8003578 <HAL_GPIO_Init+0x110>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d023      	beq.n	80034e2 <HAL_GPIO_Init+0x7a>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a37      	ldr	r2, [pc, #220]	@ (800357c <HAL_GPIO_Init+0x114>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d01f      	beq.n	80034e2 <HAL_GPIO_Init+0x7a>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a36      	ldr	r2, [pc, #216]	@ (8003580 <HAL_GPIO_Init+0x118>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d01b      	beq.n	80034e2 <HAL_GPIO_Init+0x7a>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a35      	ldr	r2, [pc, #212]	@ (8003584 <HAL_GPIO_Init+0x11c>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d017      	beq.n	80034e2 <HAL_GPIO_Init+0x7a>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a34      	ldr	r2, [pc, #208]	@ (8003588 <HAL_GPIO_Init+0x120>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d013      	beq.n	80034e2 <HAL_GPIO_Init+0x7a>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a33      	ldr	r2, [pc, #204]	@ (800358c <HAL_GPIO_Init+0x124>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d00f      	beq.n	80034e2 <HAL_GPIO_Init+0x7a>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a32      	ldr	r2, [pc, #200]	@ (8003590 <HAL_GPIO_Init+0x128>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d00b      	beq.n	80034e2 <HAL_GPIO_Init+0x7a>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a31      	ldr	r2, [pc, #196]	@ (8003594 <HAL_GPIO_Init+0x12c>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d007      	beq.n	80034e2 <HAL_GPIO_Init+0x7a>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a30      	ldr	r2, [pc, #192]	@ (8003598 <HAL_GPIO_Init+0x130>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d003      	beq.n	80034e2 <HAL_GPIO_Init+0x7a>
 80034da:	21aa      	movs	r1, #170	@ 0xaa
 80034dc:	482f      	ldr	r0, [pc, #188]	@ (800359c <HAL_GPIO_Init+0x134>)
 80034de:	f7ff f841 	bl	8002564 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d103      	bne.n	80034f4 <HAL_GPIO_Init+0x8c>
 80034ec:	21ab      	movs	r1, #171	@ 0xab
 80034ee:	482b      	ldr	r0, [pc, #172]	@ (800359c <HAL_GPIO_Init+0x134>)
 80034f0:	f7ff f838 	bl	8002564 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d035      	beq.n	8003568 <HAL_GPIO_Init+0x100>
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	2b01      	cmp	r3, #1
 8003502:	d031      	beq.n	8003568 <HAL_GPIO_Init+0x100>
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	2b11      	cmp	r3, #17
 800350a:	d02d      	beq.n	8003568 <HAL_GPIO_Init+0x100>
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	2b02      	cmp	r3, #2
 8003512:	d029      	beq.n	8003568 <HAL_GPIO_Init+0x100>
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	2b12      	cmp	r3, #18
 800351a:	d025      	beq.n	8003568 <HAL_GPIO_Init+0x100>
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8003524:	d020      	beq.n	8003568 <HAL_GPIO_Init+0x100>
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 800352e:	d01b      	beq.n	8003568 <HAL_GPIO_Init+0x100>
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 8003538:	d016      	beq.n	8003568 <HAL_GPIO_Init+0x100>
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 8003542:	d011      	beq.n	8003568 <HAL_GPIO_Init+0x100>
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 800354c:	d00c      	beq.n	8003568 <HAL_GPIO_Init+0x100>
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 8003556:	d007      	beq.n	8003568 <HAL_GPIO_Init+0x100>
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	2b03      	cmp	r3, #3
 800355e:	d003      	beq.n	8003568 <HAL_GPIO_Init+0x100>
 8003560:	21ac      	movs	r1, #172	@ 0xac
 8003562:	480e      	ldr	r0, [pc, #56]	@ (800359c <HAL_GPIO_Init+0x134>)
 8003564:	f7fe fffe 	bl	8002564 <assert_failed>

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003568:	2300      	movs	r3, #0
 800356a:	61fb      	str	r3, [r7, #28]
 800356c:	e2c7      	b.n	8003afe <HAL_GPIO_Init+0x696>
 800356e:	bf00      	nop
 8003570:	40020000 	.word	0x40020000
 8003574:	40020400 	.word	0x40020400
 8003578:	40020800 	.word	0x40020800
 800357c:	40020c00 	.word	0x40020c00
 8003580:	40021000 	.word	0x40021000
 8003584:	40021400 	.word	0x40021400
 8003588:	40021800 	.word	0x40021800
 800358c:	40021c00 	.word	0x40021c00
 8003590:	40022000 	.word	0x40022000
 8003594:	40022400 	.word	0x40022400
 8003598:	40022800 	.word	0x40022800
 800359c:	0801087c 	.word	0x0801087c
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80035a0:	2201      	movs	r2, #1
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	fa02 f303 	lsl.w	r3, r2, r3
 80035a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	4013      	ands	r3, r2
 80035b2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80035b4:	693a      	ldr	r2, [r7, #16]
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	f040 829d 	bne.w	8003af8 <HAL_GPIO_Init+0x690>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f003 0303 	and.w	r3, r3, #3
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d005      	beq.n	80035d6 <HAL_GPIO_Init+0x16e>
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f003 0303 	and.w	r3, r3, #3
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d144      	bne.n	8003660 <HAL_GPIO_Init+0x1f8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00f      	beq.n	80035fe <HAL_GPIO_Init+0x196>
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d00b      	beq.n	80035fe <HAL_GPIO_Init+0x196>
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d007      	beq.n	80035fe <HAL_GPIO_Init+0x196>
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	2b03      	cmp	r3, #3
 80035f4:	d003      	beq.n	80035fe <HAL_GPIO_Init+0x196>
 80035f6:	21bd      	movs	r1, #189	@ 0xbd
 80035f8:	4831      	ldr	r0, [pc, #196]	@ (80036c0 <HAL_GPIO_Init+0x258>)
 80035fa:	f7fe ffb3 	bl	8002564 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	005b      	lsls	r3, r3, #1
 8003608:	2203      	movs	r2, #3
 800360a:	fa02 f303 	lsl.w	r3, r2, r3
 800360e:	43db      	mvns	r3, r3
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	4013      	ands	r3, r2
 8003614:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	68da      	ldr	r2, [r3, #12]
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	005b      	lsls	r3, r3, #1
 800361e:	fa02 f303 	lsl.w	r3, r2, r3
 8003622:	69ba      	ldr	r2, [r7, #24]
 8003624:	4313      	orrs	r3, r2
 8003626:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003634:	2201      	movs	r2, #1
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	fa02 f303 	lsl.w	r3, r2, r3
 800363c:	43db      	mvns	r3, r3
 800363e:	69ba      	ldr	r2, [r7, #24]
 8003640:	4013      	ands	r3, r2
 8003642:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	091b      	lsrs	r3, r3, #4
 800364a:	f003 0201 	and.w	r2, r3, #1
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	fa02 f303 	lsl.w	r3, r2, r3
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	4313      	orrs	r3, r2
 8003658:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f003 0303 	and.w	r3, r3, #3
 8003668:	2b03      	cmp	r3, #3
 800366a:	d02b      	beq.n	80036c4 <HAL_GPIO_Init+0x25c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00b      	beq.n	800368c <HAL_GPIO_Init+0x224>
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d007      	beq.n	800368c <HAL_GPIO_Init+0x224>
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	2b02      	cmp	r3, #2
 8003682:	d003      	beq.n	800368c <HAL_GPIO_Init+0x224>
 8003684:	21ce      	movs	r1, #206	@ 0xce
 8003686:	480e      	ldr	r0, [pc, #56]	@ (80036c0 <HAL_GPIO_Init+0x258>)
 8003688:	f7fe ff6c 	bl	8002564 <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	005b      	lsls	r3, r3, #1
 8003696:	2203      	movs	r2, #3
 8003698:	fa02 f303 	lsl.w	r3, r2, r3
 800369c:	43db      	mvns	r3, r3
 800369e:	69ba      	ldr	r2, [r7, #24]
 80036a0:	4013      	ands	r3, r2
 80036a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	689a      	ldr	r2, [r3, #8]
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	005b      	lsls	r3, r3, #1
 80036ac:	fa02 f303 	lsl.w	r3, r2, r3
 80036b0:	69ba      	ldr	r2, [r7, #24]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	60da      	str	r2, [r3, #12]
 80036bc:	e002      	b.n	80036c4 <HAL_GPIO_Init+0x25c>
 80036be:	bf00      	nop
 80036c0:	0801087c 	.word	0x0801087c
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f003 0303 	and.w	r3, r3, #3
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	f040 8134 	bne.w	800393a <HAL_GPIO_Init+0x4d2>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	f000 810b 	beq.w	80038f2 <HAL_GPIO_Init+0x48a>
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	691b      	ldr	r3, [r3, #16]
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	f000 8106 	beq.w	80038f2 <HAL_GPIO_Init+0x48a>
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	f000 8101 	beq.w	80038f2 <HAL_GPIO_Init+0x48a>
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	f000 80fc 	beq.w	80038f2 <HAL_GPIO_Init+0x48a>
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f000 80f7 	beq.w	80038f2 <HAL_GPIO_Init+0x48a>
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	2b01      	cmp	r3, #1
 800370a:	f000 80f2 	beq.w	80038f2 <HAL_GPIO_Init+0x48a>
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	2b02      	cmp	r3, #2
 8003714:	f000 80ed 	beq.w	80038f2 <HAL_GPIO_Init+0x48a>
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	691b      	ldr	r3, [r3, #16]
 800371c:	2b02      	cmp	r3, #2
 800371e:	f000 80e8 	beq.w	80038f2 <HAL_GPIO_Init+0x48a>
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	2b02      	cmp	r3, #2
 8003728:	f000 80e3 	beq.w	80038f2 <HAL_GPIO_Init+0x48a>
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	691b      	ldr	r3, [r3, #16]
 8003730:	2b03      	cmp	r3, #3
 8003732:	f000 80de 	beq.w	80038f2 <HAL_GPIO_Init+0x48a>
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	2b03      	cmp	r3, #3
 800373c:	f000 80d9 	beq.w	80038f2 <HAL_GPIO_Init+0x48a>
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	2b03      	cmp	r3, #3
 8003746:	f000 80d4 	beq.w	80038f2 <HAL_GPIO_Init+0x48a>
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	2b03      	cmp	r3, #3
 8003750:	f000 80cf 	beq.w	80038f2 <HAL_GPIO_Init+0x48a>
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	691b      	ldr	r3, [r3, #16]
 8003758:	2b03      	cmp	r3, #3
 800375a:	f000 80ca 	beq.w	80038f2 <HAL_GPIO_Init+0x48a>
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	2b03      	cmp	r3, #3
 8003764:	f000 80c5 	beq.w	80038f2 <HAL_GPIO_Init+0x48a>
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	2b04      	cmp	r3, #4
 800376e:	f000 80c0 	beq.w	80038f2 <HAL_GPIO_Init+0x48a>
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	2b04      	cmp	r3, #4
 8003778:	f000 80bb 	beq.w	80038f2 <HAL_GPIO_Init+0x48a>
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	691b      	ldr	r3, [r3, #16]
 8003780:	2b04      	cmp	r3, #4
 8003782:	f000 80b6 	beq.w	80038f2 <HAL_GPIO_Init+0x48a>
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	2b04      	cmp	r3, #4
 800378c:	f000 80b1 	beq.w	80038f2 <HAL_GPIO_Init+0x48a>
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	2b04      	cmp	r3, #4
 8003796:	f000 80ac 	beq.w	80038f2 <HAL_GPIO_Init+0x48a>
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	2b05      	cmp	r3, #5
 80037a0:	f000 80a7 	beq.w	80038f2 <HAL_GPIO_Init+0x48a>
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	2b05      	cmp	r3, #5
 80037aa:	f000 80a2 	beq.w	80038f2 <HAL_GPIO_Init+0x48a>
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	2b05      	cmp	r3, #5
 80037b4:	f000 809d 	beq.w	80038f2 <HAL_GPIO_Init+0x48a>
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	2b05      	cmp	r3, #5
 80037be:	f000 8098 	beq.w	80038f2 <HAL_GPIO_Init+0x48a>
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	2b05      	cmp	r3, #5
 80037c8:	f000 8093 	beq.w	80038f2 <HAL_GPIO_Init+0x48a>
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	2b05      	cmp	r3, #5
 80037d2:	f000 808e 	beq.w	80038f2 <HAL_GPIO_Init+0x48a>
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	2b06      	cmp	r3, #6
 80037dc:	f000 8089 	beq.w	80038f2 <HAL_GPIO_Init+0x48a>
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	2b06      	cmp	r3, #6
 80037e6:	f000 8084 	beq.w	80038f2 <HAL_GPIO_Init+0x48a>
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	2b07      	cmp	r3, #7
 80037f0:	d07f      	beq.n	80038f2 <HAL_GPIO_Init+0x48a>
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	2b07      	cmp	r3, #7
 80037f8:	d07b      	beq.n	80038f2 <HAL_GPIO_Init+0x48a>
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	2b07      	cmp	r3, #7
 8003800:	d077      	beq.n	80038f2 <HAL_GPIO_Init+0x48a>
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	2b07      	cmp	r3, #7
 8003808:	d073      	beq.n	80038f2 <HAL_GPIO_Init+0x48a>
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	2b07      	cmp	r3, #7
 8003810:	d06f      	beq.n	80038f2 <HAL_GPIO_Init+0x48a>
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	2b07      	cmp	r3, #7
 8003818:	d06b      	beq.n	80038f2 <HAL_GPIO_Init+0x48a>
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	2b07      	cmp	r3, #7
 8003820:	d067      	beq.n	80038f2 <HAL_GPIO_Init+0x48a>
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	2b08      	cmp	r3, #8
 8003828:	d063      	beq.n	80038f2 <HAL_GPIO_Init+0x48a>
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	2b08      	cmp	r3, #8
 8003830:	d05f      	beq.n	80038f2 <HAL_GPIO_Init+0x48a>
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	2b08      	cmp	r3, #8
 8003838:	d05b      	beq.n	80038f2 <HAL_GPIO_Init+0x48a>
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	2b08      	cmp	r3, #8
 8003840:	d057      	beq.n	80038f2 <HAL_GPIO_Init+0x48a>
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	2b08      	cmp	r3, #8
 8003848:	d053      	beq.n	80038f2 <HAL_GPIO_Init+0x48a>
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	2b08      	cmp	r3, #8
 8003850:	d04f      	beq.n	80038f2 <HAL_GPIO_Init+0x48a>
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	2b08      	cmp	r3, #8
 8003858:	d04b      	beq.n	80038f2 <HAL_GPIO_Init+0x48a>
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	2b09      	cmp	r3, #9
 8003860:	d047      	beq.n	80038f2 <HAL_GPIO_Init+0x48a>
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	2b09      	cmp	r3, #9
 8003868:	d043      	beq.n	80038f2 <HAL_GPIO_Init+0x48a>
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	2b09      	cmp	r3, #9
 8003870:	d03f      	beq.n	80038f2 <HAL_GPIO_Init+0x48a>
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	2b09      	cmp	r3, #9
 8003878:	d03b      	beq.n	80038f2 <HAL_GPIO_Init+0x48a>
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	2b09      	cmp	r3, #9
 8003880:	d037      	beq.n	80038f2 <HAL_GPIO_Init+0x48a>
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	2b09      	cmp	r3, #9
 8003888:	d033      	beq.n	80038f2 <HAL_GPIO_Init+0x48a>
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	2b09      	cmp	r3, #9
 8003890:	d02f      	beq.n	80038f2 <HAL_GPIO_Init+0x48a>
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	2b0a      	cmp	r3, #10
 8003898:	d02b      	beq.n	80038f2 <HAL_GPIO_Init+0x48a>
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	2b0a      	cmp	r3, #10
 80038a0:	d027      	beq.n	80038f2 <HAL_GPIO_Init+0x48a>
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	2b0a      	cmp	r3, #10
 80038a8:	d023      	beq.n	80038f2 <HAL_GPIO_Init+0x48a>
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	2b0a      	cmp	r3, #10
 80038b0:	d01f      	beq.n	80038f2 <HAL_GPIO_Init+0x48a>
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	2b0b      	cmp	r3, #11
 80038b8:	d01b      	beq.n	80038f2 <HAL_GPIO_Init+0x48a>
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	2b0c      	cmp	r3, #12
 80038c0:	d017      	beq.n	80038f2 <HAL_GPIO_Init+0x48a>
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	2b0c      	cmp	r3, #12
 80038c8:	d013      	beq.n	80038f2 <HAL_GPIO_Init+0x48a>
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	2b0c      	cmp	r3, #12
 80038d0:	d00f      	beq.n	80038f2 <HAL_GPIO_Init+0x48a>
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	2b0f      	cmp	r3, #15
 80038d8:	d00b      	beq.n	80038f2 <HAL_GPIO_Init+0x48a>
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	2b0d      	cmp	r3, #13
 80038e0:	d007      	beq.n	80038f2 <HAL_GPIO_Init+0x48a>
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	2b0e      	cmp	r3, #14
 80038e8:	d003      	beq.n	80038f2 <HAL_GPIO_Init+0x48a>
 80038ea:	21db      	movs	r1, #219	@ 0xdb
 80038ec:	4888      	ldr	r0, [pc, #544]	@ (8003b10 <HAL_GPIO_Init+0x6a8>)
 80038ee:	f7fe fe39 	bl	8002564 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	08da      	lsrs	r2, r3, #3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	3208      	adds	r2, #8
 80038fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	f003 0307 	and.w	r3, r3, #7
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	220f      	movs	r2, #15
 800390a:	fa02 f303 	lsl.w	r3, r2, r3
 800390e:	43db      	mvns	r3, r3
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	4013      	ands	r3, r2
 8003914:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	691a      	ldr	r2, [r3, #16]
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	f003 0307 	and.w	r3, r3, #7
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	fa02 f303 	lsl.w	r3, r2, r3
 8003926:	69ba      	ldr	r2, [r7, #24]
 8003928:	4313      	orrs	r3, r2
 800392a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	08da      	lsrs	r2, r3, #3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	3208      	adds	r2, #8
 8003934:	69b9      	ldr	r1, [r7, #24]
 8003936:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	005b      	lsls	r3, r3, #1
 8003944:	2203      	movs	r2, #3
 8003946:	fa02 f303 	lsl.w	r3, r2, r3
 800394a:	43db      	mvns	r3, r3
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	4013      	ands	r3, r2
 8003950:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f003 0203 	and.w	r2, r3, #3
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	005b      	lsls	r3, r3, #1
 800395e:	fa02 f303 	lsl.w	r3, r2, r3
 8003962:	69ba      	ldr	r2, [r7, #24]
 8003964:	4313      	orrs	r3, r2
 8003966:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	69ba      	ldr	r2, [r7, #24]
 800396c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003976:	2b00      	cmp	r3, #0
 8003978:	f000 80be 	beq.w	8003af8 <HAL_GPIO_Init+0x690>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800397c:	4b65      	ldr	r3, [pc, #404]	@ (8003b14 <HAL_GPIO_Init+0x6ac>)
 800397e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003980:	4a64      	ldr	r2, [pc, #400]	@ (8003b14 <HAL_GPIO_Init+0x6ac>)
 8003982:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003986:	6453      	str	r3, [r2, #68]	@ 0x44
 8003988:	4b62      	ldr	r3, [pc, #392]	@ (8003b14 <HAL_GPIO_Init+0x6ac>)
 800398a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800398c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003990:	60fb      	str	r3, [r7, #12]
 8003992:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003994:	4a60      	ldr	r2, [pc, #384]	@ (8003b18 <HAL_GPIO_Init+0x6b0>)
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	089b      	lsrs	r3, r3, #2
 800399a:	3302      	adds	r3, #2
 800399c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	f003 0303 	and.w	r3, r3, #3
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	220f      	movs	r2, #15
 80039ac:	fa02 f303 	lsl.w	r3, r2, r3
 80039b0:	43db      	mvns	r3, r3
 80039b2:	69ba      	ldr	r2, [r7, #24]
 80039b4:	4013      	ands	r3, r2
 80039b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a58      	ldr	r2, [pc, #352]	@ (8003b1c <HAL_GPIO_Init+0x6b4>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d037      	beq.n	8003a30 <HAL_GPIO_Init+0x5c8>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4a57      	ldr	r2, [pc, #348]	@ (8003b20 <HAL_GPIO_Init+0x6b8>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d031      	beq.n	8003a2c <HAL_GPIO_Init+0x5c4>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a56      	ldr	r2, [pc, #344]	@ (8003b24 <HAL_GPIO_Init+0x6bc>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d02b      	beq.n	8003a28 <HAL_GPIO_Init+0x5c0>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4a55      	ldr	r2, [pc, #340]	@ (8003b28 <HAL_GPIO_Init+0x6c0>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d025      	beq.n	8003a24 <HAL_GPIO_Init+0x5bc>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a54      	ldr	r2, [pc, #336]	@ (8003b2c <HAL_GPIO_Init+0x6c4>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d01f      	beq.n	8003a20 <HAL_GPIO_Init+0x5b8>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4a53      	ldr	r2, [pc, #332]	@ (8003b30 <HAL_GPIO_Init+0x6c8>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d019      	beq.n	8003a1c <HAL_GPIO_Init+0x5b4>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4a52      	ldr	r2, [pc, #328]	@ (8003b34 <HAL_GPIO_Init+0x6cc>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d013      	beq.n	8003a18 <HAL_GPIO_Init+0x5b0>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a51      	ldr	r2, [pc, #324]	@ (8003b38 <HAL_GPIO_Init+0x6d0>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d00d      	beq.n	8003a14 <HAL_GPIO_Init+0x5ac>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a50      	ldr	r2, [pc, #320]	@ (8003b3c <HAL_GPIO_Init+0x6d4>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d007      	beq.n	8003a10 <HAL_GPIO_Init+0x5a8>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a4f      	ldr	r2, [pc, #316]	@ (8003b40 <HAL_GPIO_Init+0x6d8>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d101      	bne.n	8003a0c <HAL_GPIO_Init+0x5a4>
 8003a08:	2309      	movs	r3, #9
 8003a0a:	e012      	b.n	8003a32 <HAL_GPIO_Init+0x5ca>
 8003a0c:	230a      	movs	r3, #10
 8003a0e:	e010      	b.n	8003a32 <HAL_GPIO_Init+0x5ca>
 8003a10:	2308      	movs	r3, #8
 8003a12:	e00e      	b.n	8003a32 <HAL_GPIO_Init+0x5ca>
 8003a14:	2307      	movs	r3, #7
 8003a16:	e00c      	b.n	8003a32 <HAL_GPIO_Init+0x5ca>
 8003a18:	2306      	movs	r3, #6
 8003a1a:	e00a      	b.n	8003a32 <HAL_GPIO_Init+0x5ca>
 8003a1c:	2305      	movs	r3, #5
 8003a1e:	e008      	b.n	8003a32 <HAL_GPIO_Init+0x5ca>
 8003a20:	2304      	movs	r3, #4
 8003a22:	e006      	b.n	8003a32 <HAL_GPIO_Init+0x5ca>
 8003a24:	2303      	movs	r3, #3
 8003a26:	e004      	b.n	8003a32 <HAL_GPIO_Init+0x5ca>
 8003a28:	2302      	movs	r3, #2
 8003a2a:	e002      	b.n	8003a32 <HAL_GPIO_Init+0x5ca>
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e000      	b.n	8003a32 <HAL_GPIO_Init+0x5ca>
 8003a30:	2300      	movs	r3, #0
 8003a32:	69fa      	ldr	r2, [r7, #28]
 8003a34:	f002 0203 	and.w	r2, r2, #3
 8003a38:	0092      	lsls	r2, r2, #2
 8003a3a:	4093      	lsls	r3, r2
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003a42:	4935      	ldr	r1, [pc, #212]	@ (8003b18 <HAL_GPIO_Init+0x6b0>)
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	089b      	lsrs	r3, r3, #2
 8003a48:	3302      	adds	r3, #2
 8003a4a:	69ba      	ldr	r2, [r7, #24]
 8003a4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a50:	4b3c      	ldr	r3, [pc, #240]	@ (8003b44 <HAL_GPIO_Init+0x6dc>)
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	43db      	mvns	r3, r3
 8003a5a:	69ba      	ldr	r2, [r7, #24]
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d003      	beq.n	8003a74 <HAL_GPIO_Init+0x60c>
        {
          temp |= iocurrent;
 8003a6c:	69ba      	ldr	r2, [r7, #24]
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a74:	4a33      	ldr	r2, [pc, #204]	@ (8003b44 <HAL_GPIO_Init+0x6dc>)
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a7a:	4b32      	ldr	r3, [pc, #200]	@ (8003b44 <HAL_GPIO_Init+0x6dc>)
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	43db      	mvns	r3, r3
 8003a84:	69ba      	ldr	r2, [r7, #24]
 8003a86:	4013      	ands	r3, r2
 8003a88:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <HAL_GPIO_Init+0x636>
        {
          temp |= iocurrent;
 8003a96:	69ba      	ldr	r2, [r7, #24]
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a9e:	4a29      	ldr	r2, [pc, #164]	@ (8003b44 <HAL_GPIO_Init+0x6dc>)
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003aa4:	4b27      	ldr	r3, [pc, #156]	@ (8003b44 <HAL_GPIO_Init+0x6dc>)
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	43db      	mvns	r3, r3
 8003aae:	69ba      	ldr	r2, [r7, #24]
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d003      	beq.n	8003ac8 <HAL_GPIO_Init+0x660>
        {
          temp |= iocurrent;
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ac8:	4a1e      	ldr	r2, [pc, #120]	@ (8003b44 <HAL_GPIO_Init+0x6dc>)
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ace:	4b1d      	ldr	r3, [pc, #116]	@ (8003b44 <HAL_GPIO_Init+0x6dc>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	43db      	mvns	r3, r3
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	4013      	ands	r3, r2
 8003adc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d003      	beq.n	8003af2 <HAL_GPIO_Init+0x68a>
        {
          temp |= iocurrent;
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003af2:	4a14      	ldr	r2, [pc, #80]	@ (8003b44 <HAL_GPIO_Init+0x6dc>)
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	3301      	adds	r3, #1
 8003afc:	61fb      	str	r3, [r7, #28]
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	2b0f      	cmp	r3, #15
 8003b02:	f67f ad4d 	bls.w	80035a0 <HAL_GPIO_Init+0x138>
      }
    }
  }
}
 8003b06:	bf00      	nop
 8003b08:	bf00      	nop
 8003b0a:	3720      	adds	r7, #32
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	0801087c 	.word	0x0801087c
 8003b14:	40023800 	.word	0x40023800
 8003b18:	40013800 	.word	0x40013800
 8003b1c:	40020000 	.word	0x40020000
 8003b20:	40020400 	.word	0x40020400
 8003b24:	40020800 	.word	0x40020800
 8003b28:	40020c00 	.word	0x40020c00
 8003b2c:	40021000 	.word	0x40021000
 8003b30:	40021400 	.word	0x40021400
 8003b34:	40021800 	.word	0x40021800
 8003b38:	40021c00 	.word	0x40021c00
 8003b3c:	40022000 	.word	0x40022000
 8003b40:	40022400 	.word	0x40022400
 8003b44:	40013c00 	.word	0x40013c00

08003b48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	460b      	mov	r3, r1
 8003b52:	807b      	strh	r3, [r7, #2]
 8003b54:	4613      	mov	r3, r2
 8003b56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003b58:	887b      	ldrh	r3, [r7, #2]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d104      	bne.n	8003b68 <HAL_GPIO_WritePin+0x20>
 8003b5e:	f240 1197 	movw	r1, #407	@ 0x197
 8003b62:	480e      	ldr	r0, [pc, #56]	@ (8003b9c <HAL_GPIO_WritePin+0x54>)
 8003b64:	f7fe fcfe 	bl	8002564 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003b68:	787b      	ldrb	r3, [r7, #1]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d007      	beq.n	8003b7e <HAL_GPIO_WritePin+0x36>
 8003b6e:	787b      	ldrb	r3, [r7, #1]
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d004      	beq.n	8003b7e <HAL_GPIO_WritePin+0x36>
 8003b74:	f44f 71cc 	mov.w	r1, #408	@ 0x198
 8003b78:	4808      	ldr	r0, [pc, #32]	@ (8003b9c <HAL_GPIO_WritePin+0x54>)
 8003b7a:	f7fe fcf3 	bl	8002564 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8003b7e:	787b      	ldrb	r3, [r7, #1]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d003      	beq.n	8003b8c <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b84:	887a      	ldrh	r2, [r7, #2]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003b8a:	e003      	b.n	8003b94 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003b8c:	887b      	ldrh	r3, [r7, #2]
 8003b8e:	041a      	lsls	r2, r3, #16
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	619a      	str	r2, [r3, #24]
}
 8003b94:	bf00      	nop
 8003b96:	3708      	adds	r7, #8
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	0801087c 	.word	0x0801087c

08003ba0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b086      	sub	sp, #24
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d101      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e345      	b.n	8004242 <HAL_RCC_OscConfig+0x6a2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2b0f      	cmp	r3, #15
 8003bbc:	d904      	bls.n	8003bc8 <HAL_RCC_OscConfig+0x28>
 8003bbe:	f240 1163 	movw	r1, #355	@ 0x163
 8003bc2:	4892      	ldr	r0, [pc, #584]	@ (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003bc4:	f7fe fcce 	bl	8002564 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0301 	and.w	r3, r3, #1
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	f000 809a 	beq.w	8003d0a <HAL_RCC_OscConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00e      	beq.n	8003bfc <HAL_RCC_OscConfig+0x5c>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003be6:	d009      	beq.n	8003bfc <HAL_RCC_OscConfig+0x5c>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003bf0:	d004      	beq.n	8003bfc <HAL_RCC_OscConfig+0x5c>
 8003bf2:	f240 1169 	movw	r1, #361	@ 0x169
 8003bf6:	4885      	ldr	r0, [pc, #532]	@ (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003bf8:	f7fe fcb4 	bl	8002564 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003bfc:	4b84      	ldr	r3, [pc, #528]	@ (8003e10 <HAL_RCC_OscConfig+0x270>)
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f003 030c 	and.w	r3, r3, #12
 8003c04:	2b04      	cmp	r3, #4
 8003c06:	d00c      	beq.n	8003c22 <HAL_RCC_OscConfig+0x82>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c08:	4b81      	ldr	r3, [pc, #516]	@ (8003e10 <HAL_RCC_OscConfig+0x270>)
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f003 030c 	and.w	r3, r3, #12
 8003c10:	2b08      	cmp	r3, #8
 8003c12:	d112      	bne.n	8003c3a <HAL_RCC_OscConfig+0x9a>
 8003c14:	4b7e      	ldr	r3, [pc, #504]	@ (8003e10 <HAL_RCC_OscConfig+0x270>)
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c1c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c20:	d10b      	bne.n	8003c3a <HAL_RCC_OscConfig+0x9a>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c22:	4b7b      	ldr	r3, [pc, #492]	@ (8003e10 <HAL_RCC_OscConfig+0x270>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d06c      	beq.n	8003d08 <HAL_RCC_OscConfig+0x168>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d168      	bne.n	8003d08 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e303      	b.n	8004242 <HAL_RCC_OscConfig+0x6a2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c42:	d106      	bne.n	8003c52 <HAL_RCC_OscConfig+0xb2>
 8003c44:	4b72      	ldr	r3, [pc, #456]	@ (8003e10 <HAL_RCC_OscConfig+0x270>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a71      	ldr	r2, [pc, #452]	@ (8003e10 <HAL_RCC_OscConfig+0x270>)
 8003c4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c4e:	6013      	str	r3, [r2, #0]
 8003c50:	e02e      	b.n	8003cb0 <HAL_RCC_OscConfig+0x110>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d10c      	bne.n	8003c74 <HAL_RCC_OscConfig+0xd4>
 8003c5a:	4b6d      	ldr	r3, [pc, #436]	@ (8003e10 <HAL_RCC_OscConfig+0x270>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a6c      	ldr	r2, [pc, #432]	@ (8003e10 <HAL_RCC_OscConfig+0x270>)
 8003c60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c64:	6013      	str	r3, [r2, #0]
 8003c66:	4b6a      	ldr	r3, [pc, #424]	@ (8003e10 <HAL_RCC_OscConfig+0x270>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a69      	ldr	r2, [pc, #420]	@ (8003e10 <HAL_RCC_OscConfig+0x270>)
 8003c6c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c70:	6013      	str	r3, [r2, #0]
 8003c72:	e01d      	b.n	8003cb0 <HAL_RCC_OscConfig+0x110>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c7c:	d10c      	bne.n	8003c98 <HAL_RCC_OscConfig+0xf8>
 8003c7e:	4b64      	ldr	r3, [pc, #400]	@ (8003e10 <HAL_RCC_OscConfig+0x270>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a63      	ldr	r2, [pc, #396]	@ (8003e10 <HAL_RCC_OscConfig+0x270>)
 8003c84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c88:	6013      	str	r3, [r2, #0]
 8003c8a:	4b61      	ldr	r3, [pc, #388]	@ (8003e10 <HAL_RCC_OscConfig+0x270>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a60      	ldr	r2, [pc, #384]	@ (8003e10 <HAL_RCC_OscConfig+0x270>)
 8003c90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c94:	6013      	str	r3, [r2, #0]
 8003c96:	e00b      	b.n	8003cb0 <HAL_RCC_OscConfig+0x110>
 8003c98:	4b5d      	ldr	r3, [pc, #372]	@ (8003e10 <HAL_RCC_OscConfig+0x270>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a5c      	ldr	r2, [pc, #368]	@ (8003e10 <HAL_RCC_OscConfig+0x270>)
 8003c9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ca2:	6013      	str	r3, [r2, #0]
 8003ca4:	4b5a      	ldr	r3, [pc, #360]	@ (8003e10 <HAL_RCC_OscConfig+0x270>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a59      	ldr	r2, [pc, #356]	@ (8003e10 <HAL_RCC_OscConfig+0x270>)
 8003caa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d013      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x140>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb8:	f7ff f8da 	bl	8002e70 <HAL_GetTick>
 8003cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cbe:	e008      	b.n	8003cd2 <HAL_RCC_OscConfig+0x132>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cc0:	f7ff f8d6 	bl	8002e70 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	2b64      	cmp	r3, #100	@ 0x64
 8003ccc:	d901      	bls.n	8003cd2 <HAL_RCC_OscConfig+0x132>
          {
            return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e2b7      	b.n	8004242 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cd2:	4b4f      	ldr	r3, [pc, #316]	@ (8003e10 <HAL_RCC_OscConfig+0x270>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d0f0      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x120>
 8003cde:	e014      	b.n	8003d0a <HAL_RCC_OscConfig+0x16a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce0:	f7ff f8c6 	bl	8002e70 <HAL_GetTick>
 8003ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ce6:	e008      	b.n	8003cfa <HAL_RCC_OscConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ce8:	f7ff f8c2 	bl	8002e70 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b64      	cmp	r3, #100	@ 0x64
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e2a3      	b.n	8004242 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cfa:	4b45      	ldr	r3, [pc, #276]	@ (8003e10 <HAL_RCC_OscConfig+0x270>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1f0      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x148>
 8003d06:	e000      	b.n	8003d0a <HAL_RCC_OscConfig+0x16a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0302 	and.w	r3, r3, #2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	f000 8084 	beq.w	8003e20 <HAL_RCC_OscConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d008      	beq.n	8003d32 <HAL_RCC_OscConfig+0x192>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d004      	beq.n	8003d32 <HAL_RCC_OscConfig+0x192>
 8003d28:	f240 119b 	movw	r1, #411	@ 0x19b
 8003d2c:	4837      	ldr	r0, [pc, #220]	@ (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003d2e:	f7fe fc19 	bl	8002564 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	2b1f      	cmp	r3, #31
 8003d38:	d904      	bls.n	8003d44 <HAL_RCC_OscConfig+0x1a4>
 8003d3a:	f44f 71ce 	mov.w	r1, #412	@ 0x19c
 8003d3e:	4833      	ldr	r0, [pc, #204]	@ (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003d40:	f7fe fc10 	bl	8002564 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d44:	4b32      	ldr	r3, [pc, #200]	@ (8003e10 <HAL_RCC_OscConfig+0x270>)
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f003 030c 	and.w	r3, r3, #12
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00b      	beq.n	8003d68 <HAL_RCC_OscConfig+0x1c8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d50:	4b2f      	ldr	r3, [pc, #188]	@ (8003e10 <HAL_RCC_OscConfig+0x270>)
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f003 030c 	and.w	r3, r3, #12
 8003d58:	2b08      	cmp	r3, #8
 8003d5a:	d11c      	bne.n	8003d96 <HAL_RCC_OscConfig+0x1f6>
 8003d5c:	4b2c      	ldr	r3, [pc, #176]	@ (8003e10 <HAL_RCC_OscConfig+0x270>)
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d116      	bne.n	8003d96 <HAL_RCC_OscConfig+0x1f6>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d68:	4b29      	ldr	r3, [pc, #164]	@ (8003e10 <HAL_RCC_OscConfig+0x270>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0302 	and.w	r3, r3, #2
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d005      	beq.n	8003d80 <HAL_RCC_OscConfig+0x1e0>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d001      	beq.n	8003d80 <HAL_RCC_OscConfig+0x1e0>
      {
        return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e260      	b.n	8004242 <HAL_RCC_OscConfig+0x6a2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d80:	4b23      	ldr	r3, [pc, #140]	@ (8003e10 <HAL_RCC_OscConfig+0x270>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	00db      	lsls	r3, r3, #3
 8003d8e:	4920      	ldr	r1, [pc, #128]	@ (8003e10 <HAL_RCC_OscConfig+0x270>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d94:	e044      	b.n	8003e20 <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d023      	beq.n	8003de6 <HAL_RCC_OscConfig+0x246>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d9e:	4b1c      	ldr	r3, [pc, #112]	@ (8003e10 <HAL_RCC_OscConfig+0x270>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a1b      	ldr	r2, [pc, #108]	@ (8003e10 <HAL_RCC_OscConfig+0x270>)
 8003da4:	f043 0301 	orr.w	r3, r3, #1
 8003da8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003daa:	f7ff f861 	bl	8002e70 <HAL_GetTick>
 8003dae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003db0:	e008      	b.n	8003dc4 <HAL_RCC_OscConfig+0x224>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003db2:	f7ff f85d 	bl	8002e70 <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d901      	bls.n	8003dc4 <HAL_RCC_OscConfig+0x224>
          {
            return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e23e      	b.n	8004242 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dc4:	4b12      	ldr	r3, [pc, #72]	@ (8003e10 <HAL_RCC_OscConfig+0x270>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0302 	and.w	r3, r3, #2
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d0f0      	beq.n	8003db2 <HAL_RCC_OscConfig+0x212>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dd0:	4b0f      	ldr	r3, [pc, #60]	@ (8003e10 <HAL_RCC_OscConfig+0x270>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	00db      	lsls	r3, r3, #3
 8003dde:	490c      	ldr	r1, [pc, #48]	@ (8003e10 <HAL_RCC_OscConfig+0x270>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	600b      	str	r3, [r1, #0]
 8003de4:	e01c      	b.n	8003e20 <HAL_RCC_OscConfig+0x280>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003de6:	4b0a      	ldr	r3, [pc, #40]	@ (8003e10 <HAL_RCC_OscConfig+0x270>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a09      	ldr	r2, [pc, #36]	@ (8003e10 <HAL_RCC_OscConfig+0x270>)
 8003dec:	f023 0301 	bic.w	r3, r3, #1
 8003df0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df2:	f7ff f83d 	bl	8002e70 <HAL_GetTick>
 8003df6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003df8:	e00c      	b.n	8003e14 <HAL_RCC_OscConfig+0x274>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dfa:	f7ff f839 	bl	8002e70 <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d905      	bls.n	8003e14 <HAL_RCC_OscConfig+0x274>
          {
            return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e21a      	b.n	8004242 <HAL_RCC_OscConfig+0x6a2>
 8003e0c:	080108b8 	.word	0x080108b8
 8003e10:	40023800 	.word	0x40023800
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e14:	4b7e      	ldr	r3, [pc, #504]	@ (8004010 <HAL_RCC_OscConfig+0x470>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1ec      	bne.n	8003dfa <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0308 	and.w	r3, r3, #8
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d043      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	695b      	ldr	r3, [r3, #20]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d008      	beq.n	8003e46 <HAL_RCC_OscConfig+0x2a6>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	695b      	ldr	r3, [r3, #20]
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d004      	beq.n	8003e46 <HAL_RCC_OscConfig+0x2a6>
 8003e3c:	f44f 71ee 	mov.w	r1, #476	@ 0x1dc
 8003e40:	4874      	ldr	r0, [pc, #464]	@ (8004014 <HAL_RCC_OscConfig+0x474>)
 8003e42:	f7fe fb8f 	bl	8002564 <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	695b      	ldr	r3, [r3, #20]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d019      	beq.n	8003e82 <HAL_RCC_OscConfig+0x2e2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e4e:	4b70      	ldr	r3, [pc, #448]	@ (8004010 <HAL_RCC_OscConfig+0x470>)
 8003e50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e52:	4a6f      	ldr	r2, [pc, #444]	@ (8004010 <HAL_RCC_OscConfig+0x470>)
 8003e54:	f043 0301 	orr.w	r3, r3, #1
 8003e58:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e5a:	f7ff f809 	bl	8002e70 <HAL_GetTick>
 8003e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e60:	e008      	b.n	8003e74 <HAL_RCC_OscConfig+0x2d4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e62:	f7ff f805 	bl	8002e70 <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d901      	bls.n	8003e74 <HAL_RCC_OscConfig+0x2d4>
        {
          return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e1e6      	b.n	8004242 <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e74:	4b66      	ldr	r3, [pc, #408]	@ (8004010 <HAL_RCC_OscConfig+0x470>)
 8003e76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e78:	f003 0302 	and.w	r3, r3, #2
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d0f0      	beq.n	8003e62 <HAL_RCC_OscConfig+0x2c2>
 8003e80:	e018      	b.n	8003eb4 <HAL_RCC_OscConfig+0x314>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e82:	4b63      	ldr	r3, [pc, #396]	@ (8004010 <HAL_RCC_OscConfig+0x470>)
 8003e84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e86:	4a62      	ldr	r2, [pc, #392]	@ (8004010 <HAL_RCC_OscConfig+0x470>)
 8003e88:	f023 0301 	bic.w	r3, r3, #1
 8003e8c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e8e:	f7fe ffef 	bl	8002e70 <HAL_GetTick>
 8003e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e94:	e008      	b.n	8003ea8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e96:	f7fe ffeb 	bl	8002e70 <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d901      	bls.n	8003ea8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e1cc      	b.n	8004242 <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ea8:	4b59      	ldr	r3, [pc, #356]	@ (8004010 <HAL_RCC_OscConfig+0x470>)
 8003eaa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003eac:	f003 0302 	and.w	r3, r3, #2
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1f0      	bne.n	8003e96 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0304 	and.w	r3, r3, #4
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f000 80bc 	beq.w	800403a <HAL_RCC_OscConfig+0x49a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00c      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x344>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d008      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x344>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	2b05      	cmp	r3, #5
 8003ed8:	d004      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x344>
 8003eda:	f240 2106 	movw	r1, #518	@ 0x206
 8003ede:	484d      	ldr	r0, [pc, #308]	@ (8004014 <HAL_RCC_OscConfig+0x474>)
 8003ee0:	f7fe fb40 	bl	8002564 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ee4:	4b4a      	ldr	r3, [pc, #296]	@ (8004010 <HAL_RCC_OscConfig+0x470>)
 8003ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d10d      	bne.n	8003f0c <HAL_RCC_OscConfig+0x36c>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ef0:	4b47      	ldr	r3, [pc, #284]	@ (8004010 <HAL_RCC_OscConfig+0x470>)
 8003ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef4:	4a46      	ldr	r2, [pc, #280]	@ (8004010 <HAL_RCC_OscConfig+0x470>)
 8003ef6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003efa:	6413      	str	r3, [r2, #64]	@ 0x40
 8003efc:	4b44      	ldr	r3, [pc, #272]	@ (8004010 <HAL_RCC_OscConfig+0x470>)
 8003efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f04:	60bb      	str	r3, [r7, #8]
 8003f06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f0c:	4b42      	ldr	r3, [pc, #264]	@ (8004018 <HAL_RCC_OscConfig+0x478>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d118      	bne.n	8003f4a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003f18:	4b3f      	ldr	r3, [pc, #252]	@ (8004018 <HAL_RCC_OscConfig+0x478>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a3e      	ldr	r2, [pc, #248]	@ (8004018 <HAL_RCC_OscConfig+0x478>)
 8003f1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f22:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f24:	f7fe ffa4 	bl	8002e70 <HAL_GetTick>
 8003f28:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f2a:	e008      	b.n	8003f3e <HAL_RCC_OscConfig+0x39e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f2c:	f7fe ffa0 	bl	8002e70 <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	2b64      	cmp	r3, #100	@ 0x64
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e181      	b.n	8004242 <HAL_RCC_OscConfig+0x6a2>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f3e:	4b36      	ldr	r3, [pc, #216]	@ (8004018 <HAL_RCC_OscConfig+0x478>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d0f0      	beq.n	8003f2c <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d106      	bne.n	8003f60 <HAL_RCC_OscConfig+0x3c0>
 8003f52:	4b2f      	ldr	r3, [pc, #188]	@ (8004010 <HAL_RCC_OscConfig+0x470>)
 8003f54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f56:	4a2e      	ldr	r2, [pc, #184]	@ (8004010 <HAL_RCC_OscConfig+0x470>)
 8003f58:	f043 0301 	orr.w	r3, r3, #1
 8003f5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f5e:	e02d      	b.n	8003fbc <HAL_RCC_OscConfig+0x41c>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d10c      	bne.n	8003f82 <HAL_RCC_OscConfig+0x3e2>
 8003f68:	4b29      	ldr	r3, [pc, #164]	@ (8004010 <HAL_RCC_OscConfig+0x470>)
 8003f6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f6c:	4a28      	ldr	r2, [pc, #160]	@ (8004010 <HAL_RCC_OscConfig+0x470>)
 8003f6e:	f023 0301 	bic.w	r3, r3, #1
 8003f72:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f74:	4b26      	ldr	r3, [pc, #152]	@ (8004010 <HAL_RCC_OscConfig+0x470>)
 8003f76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f78:	4a25      	ldr	r2, [pc, #148]	@ (8004010 <HAL_RCC_OscConfig+0x470>)
 8003f7a:	f023 0304 	bic.w	r3, r3, #4
 8003f7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f80:	e01c      	b.n	8003fbc <HAL_RCC_OscConfig+0x41c>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	2b05      	cmp	r3, #5
 8003f88:	d10c      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x404>
 8003f8a:	4b21      	ldr	r3, [pc, #132]	@ (8004010 <HAL_RCC_OscConfig+0x470>)
 8003f8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f8e:	4a20      	ldr	r2, [pc, #128]	@ (8004010 <HAL_RCC_OscConfig+0x470>)
 8003f90:	f043 0304 	orr.w	r3, r3, #4
 8003f94:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f96:	4b1e      	ldr	r3, [pc, #120]	@ (8004010 <HAL_RCC_OscConfig+0x470>)
 8003f98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f9a:	4a1d      	ldr	r2, [pc, #116]	@ (8004010 <HAL_RCC_OscConfig+0x470>)
 8003f9c:	f043 0301 	orr.w	r3, r3, #1
 8003fa0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fa2:	e00b      	b.n	8003fbc <HAL_RCC_OscConfig+0x41c>
 8003fa4:	4b1a      	ldr	r3, [pc, #104]	@ (8004010 <HAL_RCC_OscConfig+0x470>)
 8003fa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fa8:	4a19      	ldr	r2, [pc, #100]	@ (8004010 <HAL_RCC_OscConfig+0x470>)
 8003faa:	f023 0301 	bic.w	r3, r3, #1
 8003fae:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fb0:	4b17      	ldr	r3, [pc, #92]	@ (8004010 <HAL_RCC_OscConfig+0x470>)
 8003fb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fb4:	4a16      	ldr	r2, [pc, #88]	@ (8004010 <HAL_RCC_OscConfig+0x470>)
 8003fb6:	f023 0304 	bic.w	r3, r3, #4
 8003fba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d015      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x450>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fc4:	f7fe ff54 	bl	8002e70 <HAL_GetTick>
 8003fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fca:	e00a      	b.n	8003fe2 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fcc:	f7fe ff50 	bl	8002e70 <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e12f      	b.n	8004242 <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fe2:	4b0b      	ldr	r3, [pc, #44]	@ (8004010 <HAL_RCC_OscConfig+0x470>)
 8003fe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d0ee      	beq.n	8003fcc <HAL_RCC_OscConfig+0x42c>
 8003fee:	e01b      	b.n	8004028 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ff0:	f7fe ff3e 	bl	8002e70 <HAL_GetTick>
 8003ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ff6:	e011      	b.n	800401c <HAL_RCC_OscConfig+0x47c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ff8:	f7fe ff3a 	bl	8002e70 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004006:	4293      	cmp	r3, r2
 8004008:	d908      	bls.n	800401c <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e119      	b.n	8004242 <HAL_RCC_OscConfig+0x6a2>
 800400e:	bf00      	nop
 8004010:	40023800 	.word	0x40023800
 8004014:	080108b8 	.word	0x080108b8
 8004018:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800401c:	4b8b      	ldr	r3, [pc, #556]	@ (800424c <HAL_RCC_OscConfig+0x6ac>)
 800401e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004020:	f003 0302 	and.w	r3, r3, #2
 8004024:	2b00      	cmp	r3, #0
 8004026:	d1e7      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x458>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004028:	7dfb      	ldrb	r3, [r7, #23]
 800402a:	2b01      	cmp	r3, #1
 800402c:	d105      	bne.n	800403a <HAL_RCC_OscConfig+0x49a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800402e:	4b87      	ldr	r3, [pc, #540]	@ (800424c <HAL_RCC_OscConfig+0x6ac>)
 8004030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004032:	4a86      	ldr	r2, [pc, #536]	@ (800424c <HAL_RCC_OscConfig+0x6ac>)
 8004034:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004038:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00c      	beq.n	800405c <HAL_RCC_OscConfig+0x4bc>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d008      	beq.n	800405c <HAL_RCC_OscConfig+0x4bc>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	2b02      	cmp	r3, #2
 8004050:	d004      	beq.n	800405c <HAL_RCC_OscConfig+0x4bc>
 8004052:	f240 214a 	movw	r1, #586	@ 0x24a
 8004056:	487e      	ldr	r0, [pc, #504]	@ (8004250 <HAL_RCC_OscConfig+0x6b0>)
 8004058:	f7fe fa84 	bl	8002564 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	2b00      	cmp	r3, #0
 8004062:	f000 80ed 	beq.w	8004240 <HAL_RCC_OscConfig+0x6a0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004066:	4b79      	ldr	r3, [pc, #484]	@ (800424c <HAL_RCC_OscConfig+0x6ac>)
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f003 030c 	and.w	r3, r3, #12
 800406e:	2b08      	cmp	r3, #8
 8004070:	f000 80b4 	beq.w	80041dc <HAL_RCC_OscConfig+0x63c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	2b02      	cmp	r3, #2
 800407a:	f040 8095 	bne.w	80041a8 <HAL_RCC_OscConfig+0x608>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	69db      	ldr	r3, [r3, #28]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d009      	beq.n	800409a <HAL_RCC_OscConfig+0x4fa>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	69db      	ldr	r3, [r3, #28]
 800408a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800408e:	d004      	beq.n	800409a <HAL_RCC_OscConfig+0x4fa>
 8004090:	f240 2153 	movw	r1, #595	@ 0x253
 8004094:	486e      	ldr	r0, [pc, #440]	@ (8004250 <HAL_RCC_OscConfig+0x6b0>)
 8004096:	f7fe fa65 	bl	8002564 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a1b      	ldr	r3, [r3, #32]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d903      	bls.n	80040aa <HAL_RCC_OscConfig+0x50a>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a1b      	ldr	r3, [r3, #32]
 80040a6:	2b3f      	cmp	r3, #63	@ 0x3f
 80040a8:	d904      	bls.n	80040b4 <HAL_RCC_OscConfig+0x514>
 80040aa:	f44f 7115 	mov.w	r1, #596	@ 0x254
 80040ae:	4868      	ldr	r0, [pc, #416]	@ (8004250 <HAL_RCC_OscConfig+0x6b0>)
 80040b0:	f7fe fa58 	bl	8002564 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b8:	2b31      	cmp	r3, #49	@ 0x31
 80040ba:	d904      	bls.n	80040c6 <HAL_RCC_OscConfig+0x526>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c0:	f5b3 7fd8 	cmp.w	r3, #432	@ 0x1b0
 80040c4:	d904      	bls.n	80040d0 <HAL_RCC_OscConfig+0x530>
 80040c6:	f240 2155 	movw	r1, #597	@ 0x255
 80040ca:	4861      	ldr	r0, [pc, #388]	@ (8004250 <HAL_RCC_OscConfig+0x6b0>)
 80040cc:	f7fe fa4a 	bl	8002564 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d010      	beq.n	80040fa <HAL_RCC_OscConfig+0x55a>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040dc:	2b04      	cmp	r3, #4
 80040de:	d00c      	beq.n	80040fa <HAL_RCC_OscConfig+0x55a>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040e4:	2b06      	cmp	r3, #6
 80040e6:	d008      	beq.n	80040fa <HAL_RCC_OscConfig+0x55a>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ec:	2b08      	cmp	r3, #8
 80040ee:	d004      	beq.n	80040fa <HAL_RCC_OscConfig+0x55a>
 80040f0:	f240 2156 	movw	r1, #598	@ 0x256
 80040f4:	4856      	ldr	r0, [pc, #344]	@ (8004250 <HAL_RCC_OscConfig+0x6b0>)
 80040f6:	f7fe fa35 	bl	8002564 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d903      	bls.n	800410a <HAL_RCC_OscConfig+0x56a>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004106:	2b0f      	cmp	r3, #15
 8004108:	d904      	bls.n	8004114 <HAL_RCC_OscConfig+0x574>
 800410a:	f240 2157 	movw	r1, #599	@ 0x257
 800410e:	4850      	ldr	r0, [pc, #320]	@ (8004250 <HAL_RCC_OscConfig+0x6b0>)
 8004110:	f7fe fa28 	bl	8002564 <assert_failed>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004114:	4b4d      	ldr	r3, [pc, #308]	@ (800424c <HAL_RCC_OscConfig+0x6ac>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a4c      	ldr	r2, [pc, #304]	@ (800424c <HAL_RCC_OscConfig+0x6ac>)
 800411a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800411e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004120:	f7fe fea6 	bl	8002e70 <HAL_GetTick>
 8004124:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004126:	e008      	b.n	800413a <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004128:	f7fe fea2 	bl	8002e70 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b02      	cmp	r3, #2
 8004134:	d901      	bls.n	800413a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e083      	b.n	8004242 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800413a:	4b44      	ldr	r3, [pc, #272]	@ (800424c <HAL_RCC_OscConfig+0x6ac>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1f0      	bne.n	8004128 <HAL_RCC_OscConfig+0x588>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	69da      	ldr	r2, [r3, #28]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	431a      	orrs	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004154:	019b      	lsls	r3, r3, #6
 8004156:	431a      	orrs	r2, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800415c:	085b      	lsrs	r3, r3, #1
 800415e:	3b01      	subs	r3, #1
 8004160:	041b      	lsls	r3, r3, #16
 8004162:	431a      	orrs	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004168:	061b      	lsls	r3, r3, #24
 800416a:	4313      	orrs	r3, r2
 800416c:	4a37      	ldr	r2, [pc, #220]	@ (800424c <HAL_RCC_OscConfig+0x6ac>)
 800416e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004172:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004174:	4b35      	ldr	r3, [pc, #212]	@ (800424c <HAL_RCC_OscConfig+0x6ac>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a34      	ldr	r2, [pc, #208]	@ (800424c <HAL_RCC_OscConfig+0x6ac>)
 800417a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800417e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004180:	f7fe fe76 	bl	8002e70 <HAL_GetTick>
 8004184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004186:	e008      	b.n	800419a <HAL_RCC_OscConfig+0x5fa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004188:	f7fe fe72 	bl	8002e70 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	2b02      	cmp	r3, #2
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0x5fa>
          {
            return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e053      	b.n	8004242 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800419a:	4b2c      	ldr	r3, [pc, #176]	@ (800424c <HAL_RCC_OscConfig+0x6ac>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d0f0      	beq.n	8004188 <HAL_RCC_OscConfig+0x5e8>
 80041a6:	e04b      	b.n	8004240 <HAL_RCC_OscConfig+0x6a0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041a8:	4b28      	ldr	r3, [pc, #160]	@ (800424c <HAL_RCC_OscConfig+0x6ac>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a27      	ldr	r2, [pc, #156]	@ (800424c <HAL_RCC_OscConfig+0x6ac>)
 80041ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b4:	f7fe fe5c 	bl	8002e70 <HAL_GetTick>
 80041b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ba:	e008      	b.n	80041ce <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041bc:	f7fe fe58 	bl	8002e70 <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e039      	b.n	8004242 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ce:	4b1f      	ldr	r3, [pc, #124]	@ (800424c <HAL_RCC_OscConfig+0x6ac>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1f0      	bne.n	80041bc <HAL_RCC_OscConfig+0x61c>
 80041da:	e031      	b.n	8004240 <HAL_RCC_OscConfig+0x6a0>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80041dc:	4b1b      	ldr	r3, [pc, #108]	@ (800424c <HAL_RCC_OscConfig+0x6ac>)
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d028      	beq.n	800423c <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d121      	bne.n	800423c <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004202:	429a      	cmp	r2, r3
 8004204:	d11a      	bne.n	800423c <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800420c:	4013      	ands	r3, r2
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004212:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004214:	4293      	cmp	r3, r2
 8004216:	d111      	bne.n	800423c <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004222:	085b      	lsrs	r3, r3, #1
 8004224:	3b01      	subs	r3, #1
 8004226:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004228:	429a      	cmp	r2, r3
 800422a:	d107      	bne.n	800423c <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004236:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004238:	429a      	cmp	r2, r3
 800423a:	d001      	beq.n	8004240 <HAL_RCC_OscConfig+0x6a0>
#endif
      {
        return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e000      	b.n	8004242 <HAL_RCC_OscConfig+0x6a2>
      }
    }
  }
  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3718      	adds	r7, #24
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	40023800 	.word	0x40023800
 8004250:	080108b8 	.word	0x080108b8

08004254 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800425e:	2300      	movs	r3, #0
 8004260:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d101      	bne.n	800426c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e18c      	b.n	8004586 <HAL_RCC_ClockConfig+0x332>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d003      	beq.n	800427c <HAL_RCC_ClockConfig+0x28>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2b0f      	cmp	r3, #15
 800427a:	d904      	bls.n	8004286 <HAL_RCC_ClockConfig+0x32>
 800427c:	f240 21dd 	movw	r1, #733	@ 0x2dd
 8004280:	4887      	ldr	r0, [pc, #540]	@ (80044a0 <HAL_RCC_ClockConfig+0x24c>)
 8004282:	f7fe f96f 	bl	8002564 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d031      	beq.n	80042f0 <HAL_RCC_ClockConfig+0x9c>
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	2b01      	cmp	r3, #1
 8004290:	d02e      	beq.n	80042f0 <HAL_RCC_ClockConfig+0x9c>
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	2b02      	cmp	r3, #2
 8004296:	d02b      	beq.n	80042f0 <HAL_RCC_ClockConfig+0x9c>
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	2b03      	cmp	r3, #3
 800429c:	d028      	beq.n	80042f0 <HAL_RCC_ClockConfig+0x9c>
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	2b04      	cmp	r3, #4
 80042a2:	d025      	beq.n	80042f0 <HAL_RCC_ClockConfig+0x9c>
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	2b05      	cmp	r3, #5
 80042a8:	d022      	beq.n	80042f0 <HAL_RCC_ClockConfig+0x9c>
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	2b06      	cmp	r3, #6
 80042ae:	d01f      	beq.n	80042f0 <HAL_RCC_ClockConfig+0x9c>
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	2b07      	cmp	r3, #7
 80042b4:	d01c      	beq.n	80042f0 <HAL_RCC_ClockConfig+0x9c>
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	2b08      	cmp	r3, #8
 80042ba:	d019      	beq.n	80042f0 <HAL_RCC_ClockConfig+0x9c>
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	2b09      	cmp	r3, #9
 80042c0:	d016      	beq.n	80042f0 <HAL_RCC_ClockConfig+0x9c>
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	2b0a      	cmp	r3, #10
 80042c6:	d013      	beq.n	80042f0 <HAL_RCC_ClockConfig+0x9c>
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	2b0b      	cmp	r3, #11
 80042cc:	d010      	beq.n	80042f0 <HAL_RCC_ClockConfig+0x9c>
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	2b0c      	cmp	r3, #12
 80042d2:	d00d      	beq.n	80042f0 <HAL_RCC_ClockConfig+0x9c>
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	2b0d      	cmp	r3, #13
 80042d8:	d00a      	beq.n	80042f0 <HAL_RCC_ClockConfig+0x9c>
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	2b0e      	cmp	r3, #14
 80042de:	d007      	beq.n	80042f0 <HAL_RCC_ClockConfig+0x9c>
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	2b0f      	cmp	r3, #15
 80042e4:	d004      	beq.n	80042f0 <HAL_RCC_ClockConfig+0x9c>
 80042e6:	f240 21de 	movw	r1, #734	@ 0x2de
 80042ea:	486d      	ldr	r0, [pc, #436]	@ (80044a0 <HAL_RCC_ClockConfig+0x24c>)
 80042ec:	f7fe f93a 	bl	8002564 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042f0:	4b6c      	ldr	r3, [pc, #432]	@ (80044a4 <HAL_RCC_ClockConfig+0x250>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 030f 	and.w	r3, r3, #15
 80042f8:	683a      	ldr	r2, [r7, #0]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d910      	bls.n	8004320 <HAL_RCC_ClockConfig+0xcc>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042fe:	4b69      	ldr	r3, [pc, #420]	@ (80044a4 <HAL_RCC_ClockConfig+0x250>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f023 020f 	bic.w	r2, r3, #15
 8004306:	4967      	ldr	r1, [pc, #412]	@ (80044a4 <HAL_RCC_ClockConfig+0x250>)
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	4313      	orrs	r3, r2
 800430c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800430e:	4b65      	ldr	r3, [pc, #404]	@ (80044a4 <HAL_RCC_ClockConfig+0x250>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 030f 	and.w	r3, r3, #15
 8004316:	683a      	ldr	r2, [r7, #0]
 8004318:	429a      	cmp	r2, r3
 800431a:	d001      	beq.n	8004320 <HAL_RCC_ClockConfig+0xcc>
    {
      return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e132      	b.n	8004586 <HAL_RCC_ClockConfig+0x332>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0302 	and.w	r3, r3, #2
 8004328:	2b00      	cmp	r3, #0
 800432a:	d049      	beq.n	80043c0 <HAL_RCC_ClockConfig+0x16c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0304 	and.w	r3, r3, #4
 8004334:	2b00      	cmp	r3, #0
 8004336:	d005      	beq.n	8004344 <HAL_RCC_ClockConfig+0xf0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004338:	4b5b      	ldr	r3, [pc, #364]	@ (80044a8 <HAL_RCC_ClockConfig+0x254>)
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	4a5a      	ldr	r2, [pc, #360]	@ (80044a8 <HAL_RCC_ClockConfig+0x254>)
 800433e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004342:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0308 	and.w	r3, r3, #8
 800434c:	2b00      	cmp	r3, #0
 800434e:	d005      	beq.n	800435c <HAL_RCC_ClockConfig+0x108>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004350:	4b55      	ldr	r3, [pc, #340]	@ (80044a8 <HAL_RCC_ClockConfig+0x254>)
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	4a54      	ldr	r2, [pc, #336]	@ (80044a8 <HAL_RCC_ClockConfig+0x254>)
 8004356:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800435a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d024      	beq.n	80043ae <HAL_RCC_ClockConfig+0x15a>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	2b80      	cmp	r3, #128	@ 0x80
 800436a:	d020      	beq.n	80043ae <HAL_RCC_ClockConfig+0x15a>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	2b90      	cmp	r3, #144	@ 0x90
 8004372:	d01c      	beq.n	80043ae <HAL_RCC_ClockConfig+0x15a>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	2ba0      	cmp	r3, #160	@ 0xa0
 800437a:	d018      	beq.n	80043ae <HAL_RCC_ClockConfig+0x15a>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	2bb0      	cmp	r3, #176	@ 0xb0
 8004382:	d014      	beq.n	80043ae <HAL_RCC_ClockConfig+0x15a>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	2bc0      	cmp	r3, #192	@ 0xc0
 800438a:	d010      	beq.n	80043ae <HAL_RCC_ClockConfig+0x15a>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	2bd0      	cmp	r3, #208	@ 0xd0
 8004392:	d00c      	beq.n	80043ae <HAL_RCC_ClockConfig+0x15a>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	2be0      	cmp	r3, #224	@ 0xe0
 800439a:	d008      	beq.n	80043ae <HAL_RCC_ClockConfig+0x15a>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	2bf0      	cmp	r3, #240	@ 0xf0
 80043a2:	d004      	beq.n	80043ae <HAL_RCC_ClockConfig+0x15a>
 80043a4:	f240 3102 	movw	r1, #770	@ 0x302
 80043a8:	483d      	ldr	r0, [pc, #244]	@ (80044a0 <HAL_RCC_ClockConfig+0x24c>)
 80043aa:	f7fe f8db 	bl	8002564 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043ae:	4b3e      	ldr	r3, [pc, #248]	@ (80044a8 <HAL_RCC_ClockConfig+0x254>)
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	493b      	ldr	r1, [pc, #236]	@ (80044a8 <HAL_RCC_ClockConfig+0x254>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0301 	and.w	r3, r3, #1
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d051      	beq.n	8004470 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00c      	beq.n	80043ee <HAL_RCC_ClockConfig+0x19a>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d008      	beq.n	80043ee <HAL_RCC_ClockConfig+0x19a>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d004      	beq.n	80043ee <HAL_RCC_ClockConfig+0x19a>
 80043e4:	f240 3109 	movw	r1, #777	@ 0x309
 80043e8:	482d      	ldr	r0, [pc, #180]	@ (80044a0 <HAL_RCC_ClockConfig+0x24c>)
 80043ea:	f7fe f8bb 	bl	8002564 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d107      	bne.n	8004406 <HAL_RCC_ClockConfig+0x1b2>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043f6:	4b2c      	ldr	r3, [pc, #176]	@ (80044a8 <HAL_RCC_ClockConfig+0x254>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d115      	bne.n	800442e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e0bf      	b.n	8004586 <HAL_RCC_ClockConfig+0x332>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	2b02      	cmp	r3, #2
 800440c:	d107      	bne.n	800441e <HAL_RCC_ClockConfig+0x1ca>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800440e:	4b26      	ldr	r3, [pc, #152]	@ (80044a8 <HAL_RCC_ClockConfig+0x254>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d109      	bne.n	800442e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e0b3      	b.n	8004586 <HAL_RCC_ClockConfig+0x332>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800441e:	4b22      	ldr	r3, [pc, #136]	@ (80044a8 <HAL_RCC_ClockConfig+0x254>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	2b00      	cmp	r3, #0
 8004428:	d101      	bne.n	800442e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e0ab      	b.n	8004586 <HAL_RCC_ClockConfig+0x332>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800442e:	4b1e      	ldr	r3, [pc, #120]	@ (80044a8 <HAL_RCC_ClockConfig+0x254>)
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f023 0203 	bic.w	r2, r3, #3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	491b      	ldr	r1, [pc, #108]	@ (80044a8 <HAL_RCC_ClockConfig+0x254>)
 800443c:	4313      	orrs	r3, r2
 800443e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004440:	f7fe fd16 	bl	8002e70 <HAL_GetTick>
 8004444:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004446:	e00a      	b.n	800445e <HAL_RCC_ClockConfig+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004448:	f7fe fd12 	bl	8002e70 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004456:	4293      	cmp	r3, r2
 8004458:	d901      	bls.n	800445e <HAL_RCC_ClockConfig+0x20a>
      {
        return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e093      	b.n	8004586 <HAL_RCC_ClockConfig+0x332>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800445e:	4b12      	ldr	r3, [pc, #72]	@ (80044a8 <HAL_RCC_ClockConfig+0x254>)
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f003 020c 	and.w	r2, r3, #12
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	429a      	cmp	r2, r3
 800446e:	d1eb      	bne.n	8004448 <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004470:	4b0c      	ldr	r3, [pc, #48]	@ (80044a4 <HAL_RCC_ClockConfig+0x250>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 030f 	and.w	r3, r3, #15
 8004478:	683a      	ldr	r2, [r7, #0]
 800447a:	429a      	cmp	r2, r3
 800447c:	d216      	bcs.n	80044ac <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800447e:	4b09      	ldr	r3, [pc, #36]	@ (80044a4 <HAL_RCC_ClockConfig+0x250>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f023 020f 	bic.w	r2, r3, #15
 8004486:	4907      	ldr	r1, [pc, #28]	@ (80044a4 <HAL_RCC_ClockConfig+0x250>)
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	4313      	orrs	r3, r2
 800448c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800448e:	4b05      	ldr	r3, [pc, #20]	@ (80044a4 <HAL_RCC_ClockConfig+0x250>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 030f 	and.w	r3, r3, #15
 8004496:	683a      	ldr	r2, [r7, #0]
 8004498:	429a      	cmp	r2, r3
 800449a:	d007      	beq.n	80044ac <HAL_RCC_ClockConfig+0x258>
    {
      return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e072      	b.n	8004586 <HAL_RCC_ClockConfig+0x332>
 80044a0:	080108b8 	.word	0x080108b8
 80044a4:	40023c00 	.word	0x40023c00
 80044a8:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0304 	and.w	r3, r3, #4
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d025      	beq.n	8004504 <HAL_RCC_ClockConfig+0x2b0>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d018      	beq.n	80044f2 <HAL_RCC_ClockConfig+0x29e>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044c8:	d013      	beq.n	80044f2 <HAL_RCC_ClockConfig+0x29e>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80044d2:	d00e      	beq.n	80044f2 <HAL_RCC_ClockConfig+0x29e>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 80044dc:	d009      	beq.n	80044f2 <HAL_RCC_ClockConfig+0x29e>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 80044e6:	d004      	beq.n	80044f2 <HAL_RCC_ClockConfig+0x29e>
 80044e8:	f240 3146 	movw	r1, #838	@ 0x346
 80044ec:	4828      	ldr	r0, [pc, #160]	@ (8004590 <HAL_RCC_ClockConfig+0x33c>)
 80044ee:	f7fe f839 	bl	8002564 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044f2:	4b28      	ldr	r3, [pc, #160]	@ (8004594 <HAL_RCC_ClockConfig+0x340>)
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	4925      	ldr	r1, [pc, #148]	@ (8004594 <HAL_RCC_ClockConfig+0x340>)
 8004500:	4313      	orrs	r3, r2
 8004502:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0308 	and.w	r3, r3, #8
 800450c:	2b00      	cmp	r3, #0
 800450e:	d026      	beq.n	800455e <HAL_RCC_ClockConfig+0x30a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d018      	beq.n	800454a <HAL_RCC_ClockConfig+0x2f6>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004520:	d013      	beq.n	800454a <HAL_RCC_ClockConfig+0x2f6>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800452a:	d00e      	beq.n	800454a <HAL_RCC_ClockConfig+0x2f6>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8004534:	d009      	beq.n	800454a <HAL_RCC_ClockConfig+0x2f6>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 800453e:	d004      	beq.n	800454a <HAL_RCC_ClockConfig+0x2f6>
 8004540:	f240 314d 	movw	r1, #845	@ 0x34d
 8004544:	4812      	ldr	r0, [pc, #72]	@ (8004590 <HAL_RCC_ClockConfig+0x33c>)
 8004546:	f7fe f80d 	bl	8002564 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800454a:	4b12      	ldr	r3, [pc, #72]	@ (8004594 <HAL_RCC_ClockConfig+0x340>)
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	00db      	lsls	r3, r3, #3
 8004558:	490e      	ldr	r1, [pc, #56]	@ (8004594 <HAL_RCC_ClockConfig+0x340>)
 800455a:	4313      	orrs	r3, r2
 800455c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800455e:	f000 f821 	bl	80045a4 <HAL_RCC_GetSysClockFreq>
 8004562:	4602      	mov	r2, r0
 8004564:	4b0b      	ldr	r3, [pc, #44]	@ (8004594 <HAL_RCC_ClockConfig+0x340>)
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	091b      	lsrs	r3, r3, #4
 800456a:	f003 030f 	and.w	r3, r3, #15
 800456e:	490a      	ldr	r1, [pc, #40]	@ (8004598 <HAL_RCC_ClockConfig+0x344>)
 8004570:	5ccb      	ldrb	r3, [r1, r3]
 8004572:	fa22 f303 	lsr.w	r3, r2, r3
 8004576:	4a09      	ldr	r2, [pc, #36]	@ (800459c <HAL_RCC_ClockConfig+0x348>)
 8004578:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800457a:	4b09      	ldr	r3, [pc, #36]	@ (80045a0 <HAL_RCC_ClockConfig+0x34c>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4618      	mov	r0, r3
 8004580:	f7fe fc32 	bl	8002de8 <HAL_InitTick>

  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3710      	adds	r7, #16
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	080108b8 	.word	0x080108b8
 8004594:	40023800 	.word	0x40023800
 8004598:	08010f34 	.word	0x08010f34
 800459c:	20000004 	.word	0x20000004
 80045a0:	20000008 	.word	0x20000008

080045a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045a8:	b090      	sub	sp, #64	@ 0x40
 80045aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80045ac:	2300      	movs	r3, #0
 80045ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80045b0:	2300      	movs	r3, #0
 80045b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045b4:	2300      	movs	r3, #0
 80045b6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80045b8:	2300      	movs	r3, #0
 80045ba:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045bc:	4b59      	ldr	r3, [pc, #356]	@ (8004724 <HAL_RCC_GetSysClockFreq+0x180>)
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f003 030c 	and.w	r3, r3, #12
 80045c4:	2b08      	cmp	r3, #8
 80045c6:	d00d      	beq.n	80045e4 <HAL_RCC_GetSysClockFreq+0x40>
 80045c8:	2b08      	cmp	r3, #8
 80045ca:	f200 80a1 	bhi.w	8004710 <HAL_RCC_GetSysClockFreq+0x16c>
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d002      	beq.n	80045d8 <HAL_RCC_GetSysClockFreq+0x34>
 80045d2:	2b04      	cmp	r3, #4
 80045d4:	d003      	beq.n	80045de <HAL_RCC_GetSysClockFreq+0x3a>
 80045d6:	e09b      	b.n	8004710 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045d8:	4b53      	ldr	r3, [pc, #332]	@ (8004728 <HAL_RCC_GetSysClockFreq+0x184>)
 80045da:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80045dc:	e09b      	b.n	8004716 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045de:	4b53      	ldr	r3, [pc, #332]	@ (800472c <HAL_RCC_GetSysClockFreq+0x188>)
 80045e0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80045e2:	e098      	b.n	8004716 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045e4:	4b4f      	ldr	r3, [pc, #316]	@ (8004724 <HAL_RCC_GetSysClockFreq+0x180>)
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80045ec:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80045ee:	4b4d      	ldr	r3, [pc, #308]	@ (8004724 <HAL_RCC_GetSysClockFreq+0x180>)
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d028      	beq.n	800464c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045fa:	4b4a      	ldr	r3, [pc, #296]	@ (8004724 <HAL_RCC_GetSysClockFreq+0x180>)
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	099b      	lsrs	r3, r3, #6
 8004600:	2200      	movs	r2, #0
 8004602:	623b      	str	r3, [r7, #32]
 8004604:	627a      	str	r2, [r7, #36]	@ 0x24
 8004606:	6a3b      	ldr	r3, [r7, #32]
 8004608:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800460c:	2100      	movs	r1, #0
 800460e:	4b47      	ldr	r3, [pc, #284]	@ (800472c <HAL_RCC_GetSysClockFreq+0x188>)
 8004610:	fb03 f201 	mul.w	r2, r3, r1
 8004614:	2300      	movs	r3, #0
 8004616:	fb00 f303 	mul.w	r3, r0, r3
 800461a:	4413      	add	r3, r2
 800461c:	4a43      	ldr	r2, [pc, #268]	@ (800472c <HAL_RCC_GetSysClockFreq+0x188>)
 800461e:	fba0 1202 	umull	r1, r2, r0, r2
 8004622:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004624:	460a      	mov	r2, r1
 8004626:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004628:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800462a:	4413      	add	r3, r2
 800462c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800462e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004630:	2200      	movs	r2, #0
 8004632:	61bb      	str	r3, [r7, #24]
 8004634:	61fa      	str	r2, [r7, #28]
 8004636:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800463a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800463e:	f7fc fb43 	bl	8000cc8 <__aeabi_uldivmod>
 8004642:	4602      	mov	r2, r0
 8004644:	460b      	mov	r3, r1
 8004646:	4613      	mov	r3, r2
 8004648:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800464a:	e053      	b.n	80046f4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800464c:	4b35      	ldr	r3, [pc, #212]	@ (8004724 <HAL_RCC_GetSysClockFreq+0x180>)
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	099b      	lsrs	r3, r3, #6
 8004652:	2200      	movs	r2, #0
 8004654:	613b      	str	r3, [r7, #16]
 8004656:	617a      	str	r2, [r7, #20]
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800465e:	f04f 0b00 	mov.w	fp, #0
 8004662:	4652      	mov	r2, sl
 8004664:	465b      	mov	r3, fp
 8004666:	f04f 0000 	mov.w	r0, #0
 800466a:	f04f 0100 	mov.w	r1, #0
 800466e:	0159      	lsls	r1, r3, #5
 8004670:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004674:	0150      	lsls	r0, r2, #5
 8004676:	4602      	mov	r2, r0
 8004678:	460b      	mov	r3, r1
 800467a:	ebb2 080a 	subs.w	r8, r2, sl
 800467e:	eb63 090b 	sbc.w	r9, r3, fp
 8004682:	f04f 0200 	mov.w	r2, #0
 8004686:	f04f 0300 	mov.w	r3, #0
 800468a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800468e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004692:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004696:	ebb2 0408 	subs.w	r4, r2, r8
 800469a:	eb63 0509 	sbc.w	r5, r3, r9
 800469e:	f04f 0200 	mov.w	r2, #0
 80046a2:	f04f 0300 	mov.w	r3, #0
 80046a6:	00eb      	lsls	r3, r5, #3
 80046a8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046ac:	00e2      	lsls	r2, r4, #3
 80046ae:	4614      	mov	r4, r2
 80046b0:	461d      	mov	r5, r3
 80046b2:	eb14 030a 	adds.w	r3, r4, sl
 80046b6:	603b      	str	r3, [r7, #0]
 80046b8:	eb45 030b 	adc.w	r3, r5, fp
 80046bc:	607b      	str	r3, [r7, #4]
 80046be:	f04f 0200 	mov.w	r2, #0
 80046c2:	f04f 0300 	mov.w	r3, #0
 80046c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80046ca:	4629      	mov	r1, r5
 80046cc:	028b      	lsls	r3, r1, #10
 80046ce:	4621      	mov	r1, r4
 80046d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80046d4:	4621      	mov	r1, r4
 80046d6:	028a      	lsls	r2, r1, #10
 80046d8:	4610      	mov	r0, r2
 80046da:	4619      	mov	r1, r3
 80046dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046de:	2200      	movs	r2, #0
 80046e0:	60bb      	str	r3, [r7, #8]
 80046e2:	60fa      	str	r2, [r7, #12]
 80046e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046e8:	f7fc faee 	bl	8000cc8 <__aeabi_uldivmod>
 80046ec:	4602      	mov	r2, r0
 80046ee:	460b      	mov	r3, r1
 80046f0:	4613      	mov	r3, r2
 80046f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80046f4:	4b0b      	ldr	r3, [pc, #44]	@ (8004724 <HAL_RCC_GetSysClockFreq+0x180>)
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	0c1b      	lsrs	r3, r3, #16
 80046fa:	f003 0303 	and.w	r3, r3, #3
 80046fe:	3301      	adds	r3, #1
 8004700:	005b      	lsls	r3, r3, #1
 8004702:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004704:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004708:	fbb2 f3f3 	udiv	r3, r2, r3
 800470c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800470e:	e002      	b.n	8004716 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004710:	4b05      	ldr	r3, [pc, #20]	@ (8004728 <HAL_RCC_GetSysClockFreq+0x184>)
 8004712:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004714:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004718:	4618      	mov	r0, r3
 800471a:	3740      	adds	r7, #64	@ 0x40
 800471c:	46bd      	mov	sp, r7
 800471e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004722:	bf00      	nop
 8004724:	40023800 	.word	0x40023800
 8004728:	00f42400 	.word	0x00f42400
 800472c:	017d7840 	.word	0x017d7840

08004730 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004730:	b480      	push	{r7}
 8004732:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004734:	4b03      	ldr	r3, [pc, #12]	@ (8004744 <HAL_RCC_GetHCLKFreq+0x14>)
 8004736:	681b      	ldr	r3, [r3, #0]
}
 8004738:	4618      	mov	r0, r3
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
 8004742:	bf00      	nop
 8004744:	20000004 	.word	0x20000004

08004748 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800474c:	f7ff fff0 	bl	8004730 <HAL_RCC_GetHCLKFreq>
 8004750:	4602      	mov	r2, r0
 8004752:	4b05      	ldr	r3, [pc, #20]	@ (8004768 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	0a9b      	lsrs	r3, r3, #10
 8004758:	f003 0307 	and.w	r3, r3, #7
 800475c:	4903      	ldr	r1, [pc, #12]	@ (800476c <HAL_RCC_GetPCLK1Freq+0x24>)
 800475e:	5ccb      	ldrb	r3, [r1, r3]
 8004760:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004764:	4618      	mov	r0, r3
 8004766:	bd80      	pop	{r7, pc}
 8004768:	40023800 	.word	0x40023800
 800476c:	08010f44 	.word	0x08010f44

08004770 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004774:	f7ff ffdc 	bl	8004730 <HAL_RCC_GetHCLKFreq>
 8004778:	4602      	mov	r2, r0
 800477a:	4b05      	ldr	r3, [pc, #20]	@ (8004790 <HAL_RCC_GetPCLK2Freq+0x20>)
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	0b5b      	lsrs	r3, r3, #13
 8004780:	f003 0307 	and.w	r3, r3, #7
 8004784:	4903      	ldr	r1, [pc, #12]	@ (8004794 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004786:	5ccb      	ldrb	r3, [r1, r3]
 8004788:	fa22 f303 	lsr.w	r3, r2, r3
}
 800478c:	4618      	mov	r0, r3
 800478e:	bd80      	pop	{r7, pc}
 8004790:	40023800 	.word	0x40023800
 8004794:	08010f44 	.word	0x08010f44

08004798 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b088      	sub	sp, #32
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80047a0:	2300      	movs	r3, #0
 80047a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80047a4:	2300      	movs	r3, #0
 80047a6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80047a8:	2300      	movs	r3, #0
 80047aa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80047ac:	2300      	movs	r3, #0
 80047ae:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80047b0:	2300      	movs	r3, #0
 80047b2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0301 	and.w	r3, r3, #1
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f040 8089 	bne.w	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0308 	and.w	r3, r3, #8
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	f040 8082 	bne.w	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0310 	and.w	r3, r3, #16
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d17b      	bne.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d175      	bne.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d16f      	bne.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d169      	bne.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004808:	2b00      	cmp	r3, #0
 800480a:	d163      	bne.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004814:	2b00      	cmp	r3, #0
 8004816:	d15d      	bne.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004820:	2b00      	cmp	r3, #0
 8004822:	d157      	bne.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d151      	bne.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004838:	2b00      	cmp	r3, #0
 800483a:	d14b      	bne.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d145      	bne.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d13f      	bne.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d139      	bne.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d133      	bne.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004874:	2b00      	cmp	r3, #0
 8004876:	d12d      	bne.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004880:	2b00      	cmp	r3, #0
 8004882:	d127      	bne.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d121      	bne.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d11b      	bne.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d115      	bne.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d10f      	bne.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d109      	bne.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0320 	and.w	r3, r3, #32
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d103      	bne.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80048cc:	2172      	movs	r1, #114	@ 0x72
 80048ce:	4895      	ldr	r0, [pc, #596]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80048d0:	f7fd fe48 	bl	8002564 <assert_failed>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0301 	and.w	r3, r3, #1
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d01f      	beq.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d008      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x162>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048ec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80048f0:	d003      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x162>
 80048f2:	2178      	movs	r1, #120	@ 0x78
 80048f4:	488b      	ldr	r0, [pc, #556]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80048f6:	f7fd fe35 	bl	8002564 <assert_failed>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80048fa:	4b8b      	ldr	r3, [pc, #556]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	4a8a      	ldr	r2, [pc, #552]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004900:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004904:	6093      	str	r3, [r2, #8]
 8004906:	4b88      	ldr	r3, [pc, #544]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004908:	689a      	ldr	r2, [r3, #8]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800490e:	4986      	ldr	r1, [pc, #536]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004910:	4313      	orrs	r3, r2
 8004912:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004918:	2b00      	cmp	r3, #0
 800491a:	d101      	bne.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x188>
    {
      plli2sused = 1;
 800491c:	2301      	movs	r3, #1
 800491e:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d029      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00d      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004938:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800493c:	d008      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004942:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004946:	d003      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004948:	2188      	movs	r1, #136	@ 0x88
 800494a:	4876      	ldr	r0, [pc, #472]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 800494c:	f7fd fe0a 	bl	8002564 <assert_failed>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004950:	4b75      	ldr	r3, [pc, #468]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004952:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004956:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800495e:	4972      	ldr	r1, [pc, #456]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004960:	4313      	orrs	r3, r2
 8004962:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800496a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800496e:	d101      	bne.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      plli2sused = 1;
 8004970:	2301      	movs	r3, #1
 8004972:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004978:	2b00      	cmp	r3, #0
 800497a:	d101      	bne.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    {
      pllsaiused = 1;
 800497c:	2301      	movs	r3, #1
 800497e:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d029      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004990:	2b00      	cmp	r3, #0
 8004992:	d00d      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004998:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800499c:	d008      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049a2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80049a6:	d003      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80049a8:	219c      	movs	r1, #156	@ 0x9c
 80049aa:	485e      	ldr	r0, [pc, #376]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80049ac:	f7fd fdda 	bl	8002564 <assert_failed>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80049b0:	4b5d      	ldr	r3, [pc, #372]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80049b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049b6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049be:	495a      	ldr	r1, [pc, #360]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80049c0:	4313      	orrs	r3, r2
 80049c2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049ce:	d101      	bne.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      plli2sused = 1;
 80049d0:	2301      	movs	r3, #1
 80049d2:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d101      	bne.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      pllsaiused = 1;
 80049dc:	2301      	movs	r3, #1
 80049de:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d001      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
      plli2sused = 1;
 80049ec:	2301      	movs	r3, #1
 80049ee:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0320 	and.w	r3, r3, #32
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f000 8186 	beq.w	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a06:	f000 80e4 	beq.w	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a12:	f000 80de 	beq.w	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a1a:	4a44      	ldr	r2, [pc, #272]	@ (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	f000 80d8 	beq.w	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a26:	4a42      	ldr	r2, [pc, #264]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	f000 80d2 	beq.w	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a32:	4a40      	ldr	r2, [pc, #256]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	f000 80cc 	beq.w	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a3e:	4a3e      	ldr	r2, [pc, #248]	@ (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	f000 80c6 	beq.w	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a4a:	4a3c      	ldr	r2, [pc, #240]	@ (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	f000 80c0 	beq.w	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a56:	4a3a      	ldr	r2, [pc, #232]	@ (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	f000 80ba 	beq.w	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a62:	4a38      	ldr	r2, [pc, #224]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	f000 80b4 	beq.w	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a6e:	4a36      	ldr	r2, [pc, #216]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3b0>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	f000 80ae 	beq.w	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a7a:	4a34      	ldr	r2, [pc, #208]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	f000 80a8 	beq.w	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a86:	4a32      	ldr	r2, [pc, #200]	@ (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x3b8>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	f000 80a2 	beq.w	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a92:	4a30      	ldr	r2, [pc, #192]	@ (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	f000 809c 	beq.w	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a9e:	4a2e      	ldr	r2, [pc, #184]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3c0>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	f000 8096 	beq.w	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aaa:	4a2c      	ldr	r2, [pc, #176]	@ (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	f000 8090 	beq.w	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ab6:	4a2a      	ldr	r2, [pc, #168]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	f000 808a 	beq.w	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ac2:	4a28      	ldr	r2, [pc, #160]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	f000 8084 	beq.w	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ace:	4a26      	ldr	r2, [pc, #152]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d07e      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ad8:	4a24      	ldr	r2, [pc, #144]	@ (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d079      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ae2:	4a23      	ldr	r2, [pc, #140]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d074      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aec:	4a21      	ldr	r2, [pc, #132]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d06f      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004af6:	4a20      	ldr	r2, [pc, #128]	@ (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d06a      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b00:	4a1e      	ldr	r2, [pc, #120]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d065      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b0a:	4a1d      	ldr	r2, [pc, #116]	@ (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d060      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b14:	4a1b      	ldr	r2, [pc, #108]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d05b      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b1e:	4a1a      	ldr	r2, [pc, #104]	@ (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	e033      	b.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8004b24:	080108f0 	.word	0x080108f0
 8004b28:	40023800 	.word	0x40023800
 8004b2c:	00020300 	.word	0x00020300
 8004b30:	00030300 	.word	0x00030300
 8004b34:	00040300 	.word	0x00040300
 8004b38:	00050300 	.word	0x00050300
 8004b3c:	00060300 	.word	0x00060300
 8004b40:	00070300 	.word	0x00070300
 8004b44:	00080300 	.word	0x00080300
 8004b48:	00090300 	.word	0x00090300
 8004b4c:	000a0300 	.word	0x000a0300
 8004b50:	000b0300 	.word	0x000b0300
 8004b54:	000c0300 	.word	0x000c0300
 8004b58:	000d0300 	.word	0x000d0300
 8004b5c:	000e0300 	.word	0x000e0300
 8004b60:	000f0300 	.word	0x000f0300
 8004b64:	00100300 	.word	0x00100300
 8004b68:	00110300 	.word	0x00110300
 8004b6c:	00120300 	.word	0x00120300
 8004b70:	00130300 	.word	0x00130300
 8004b74:	00140300 	.word	0x00140300
 8004b78:	00150300 	.word	0x00150300
 8004b7c:	00160300 	.word	0x00160300
 8004b80:	00170300 	.word	0x00170300
 8004b84:	00180300 	.word	0x00180300
 8004b88:	00190300 	.word	0x00190300
 8004b8c:	d021      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b92:	4a4c      	ldr	r2, [pc, #304]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d01c      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b9c:	4a4a      	ldr	r2, [pc, #296]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d017      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ba6:	4a49      	ldr	r2, [pc, #292]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x534>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d012      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bb0:	4a47      	ldr	r2, [pc, #284]	@ (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d00d      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bba:	4a46      	ldr	r2, [pc, #280]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d008      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bc4:	4a44      	ldr	r2, [pc, #272]	@ (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d003      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004bca:	21b7      	movs	r1, #183	@ 0xb7
 8004bcc:	4843      	ldr	r0, [pc, #268]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8004bce:	f7fd fcc9 	bl	8002564 <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004bd2:	4b43      	ldr	r3, [pc, #268]	@ (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd6:	4a42      	ldr	r2, [pc, #264]	@ (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004bd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8004bde:	4b40      	ldr	r3, [pc, #256]	@ (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004be6:	60bb      	str	r3, [r7, #8]
 8004be8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004bea:	4b3e      	ldr	r3, [pc, #248]	@ (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a3d      	ldr	r2, [pc, #244]	@ (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8004bf0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bf4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bf6:	f7fe f93b 	bl	8002e70 <HAL_GetTick>
 8004bfa:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004bfc:	e009      	b.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x47a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bfe:	f7fe f937 	bl	8002e70 <HAL_GetTick>
 8004c02:	4602      	mov	r2, r0
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	2b64      	cmp	r3, #100	@ 0x64
 8004c0a:	d902      	bls.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x47a>
      {
        return HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	f000 bd9f 	b.w	8005750 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004c12:	4b34      	ldr	r3, [pc, #208]	@ (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d0ef      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x466>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c1e:	4b30      	ldr	r3, [pc, #192]	@ (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004c20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c26:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d036      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c36:	693a      	ldr	r2, [r7, #16]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d02f      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c3c:	4b28      	ldr	r3, [pc, #160]	@ (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004c3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c44:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c46:	4b26      	ldr	r3, [pc, #152]	@ (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004c48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c4a:	4a25      	ldr	r2, [pc, #148]	@ (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004c4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c50:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c52:	4b23      	ldr	r3, [pc, #140]	@ (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004c54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c56:	4a22      	ldr	r2, [pc, #136]	@ (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004c58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c5c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004c5e:	4a20      	ldr	r2, [pc, #128]	@ (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004c64:	4b1e      	ldr	r3, [pc, #120]	@ (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004c66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c68:	f003 0301 	and.w	r3, r3, #1
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d115      	bne.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x504>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c70:	f7fe f8fe 	bl	8002e70 <HAL_GetTick>
 8004c74:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c76:	e00b      	b.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c78:	f7fe f8fa 	bl	8002e70 <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d902      	bls.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	f000 bd60 	b.w	8005750 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c90:	4b13      	ldr	r3, [pc, #76]	@ (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004c92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c94:	f003 0302 	and.w	r3, r3, #2
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d0ed      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ca0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ca4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ca8:	d120      	bne.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x554>
 8004caa:	4b0d      	ldr	r3, [pc, #52]	@ (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004cb6:	4b0c      	ldr	r3, [pc, #48]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8004cb8:	400b      	ands	r3, r1
 8004cba:	4909      	ldr	r1, [pc, #36]	@ (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	608b      	str	r3, [r1, #8]
 8004cc0:	e01a      	b.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x560>
 8004cc2:	bf00      	nop
 8004cc4:	001a0300 	.word	0x001a0300
 8004cc8:	001b0300 	.word	0x001b0300
 8004ccc:	001c0300 	.word	0x001c0300
 8004cd0:	001d0300 	.word	0x001d0300
 8004cd4:	001e0300 	.word	0x001e0300
 8004cd8:	001f0300 	.word	0x001f0300
 8004cdc:	080108f0 	.word	0x080108f0
 8004ce0:	40023800 	.word	0x40023800
 8004ce4:	40007000 	.word	0x40007000
 8004ce8:	0ffffcff 	.word	0x0ffffcff
 8004cec:	4b9a      	ldr	r3, [pc, #616]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	4a99      	ldr	r2, [pc, #612]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004cf2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004cf6:	6093      	str	r3, [r2, #8]
 8004cf8:	4b97      	ldr	r3, [pc, #604]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004cfa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d04:	4994      	ldr	r1, [pc, #592]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0310 	and.w	r3, r3, #16
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d01d      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d008      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d22:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d26:	d003      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8004d28:	21f1      	movs	r1, #241	@ 0xf1
 8004d2a:	488c      	ldr	r0, [pc, #560]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8004d2c:	f7fd fc1a 	bl	8002564 <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004d30:	4b89      	ldr	r3, [pc, #548]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004d32:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d36:	4a88      	ldr	r2, [pc, #544]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004d38:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d3c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004d40:	4b85      	ldr	r3, [pc, #532]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004d42:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d4a:	4983      	ldr	r1, [pc, #524]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d01c      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x600>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d00d      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d6e:	d008      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d78:	d003      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8004d7a:	21fb      	movs	r1, #251	@ 0xfb
 8004d7c:	4877      	ldr	r0, [pc, #476]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8004d7e:	f7fd fbf1 	bl	8002564 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d82:	4b75      	ldr	r3, [pc, #468]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d88:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d90:	4971      	ldr	r1, [pc, #452]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004d92:	4313      	orrs	r3, r2
 8004d94:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d01d      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x648>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d00e      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x632>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004db0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004db4:	d009      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x632>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004dba:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004dbe:	d004      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x632>
 8004dc0:	f240 1105 	movw	r1, #261	@ 0x105
 8004dc4:	4865      	ldr	r0, [pc, #404]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8004dc6:	f7fd fbcd 	bl	8002564 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004dca:	4b63      	ldr	r3, [pc, #396]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dd0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004dd8:	495f      	ldr	r1, [pc, #380]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d01d      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x690>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d00e      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004df8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004dfc:	d009      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e02:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004e06:	d004      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8004e08:	f240 110f 	movw	r1, #271	@ 0x10f
 8004e0c:	4853      	ldr	r0, [pc, #332]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8004e0e:	f7fd fba9 	bl	8002564 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e12:	4b51      	ldr	r3, [pc, #324]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e18:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e20:	494d      	ldr	r1, [pc, #308]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d01d      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d00e      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e40:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e44:	d009      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e4a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004e4e:	d004      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8004e50:	f240 1119 	movw	r1, #281	@ 0x119
 8004e54:	4841      	ldr	r0, [pc, #260]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8004e56:	f7fd fb85 	bl	8002564 <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004e5a:	4b3f      	ldr	r3, [pc, #252]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e60:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e68:	493b      	ldr	r1, [pc, #236]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d01f      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x724>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d010      	beq.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d00c      	beq.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e90:	2b03      	cmp	r3, #3
 8004e92:	d008      	beq.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d004      	beq.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8004e9c:	f240 1123 	movw	r1, #291	@ 0x123
 8004ea0:	482e      	ldr	r0, [pc, #184]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8004ea2:	f7fd fb5f 	bl	8002564 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ea6:	4b2c      	ldr	r3, [pc, #176]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eac:	f023 0203 	bic.w	r2, r3, #3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eb4:	4928      	ldr	r1, [pc, #160]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d01f      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x770>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d010      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ed4:	2b04      	cmp	r3, #4
 8004ed6:	d00c      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004edc:	2b0c      	cmp	r3, #12
 8004ede:	d008      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ee4:	2b08      	cmp	r3, #8
 8004ee6:	d004      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8004ee8:	f240 112d 	movw	r1, #301	@ 0x12d
 8004eec:	481b      	ldr	r0, [pc, #108]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8004eee:	f7fd fb39 	bl	8002564 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ef2:	4b19      	ldr	r3, [pc, #100]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ef8:	f023 020c 	bic.w	r2, r3, #12
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f00:	4915      	ldr	r1, [pc, #84]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d025      	beq.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d010      	beq.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f20:	2b10      	cmp	r3, #16
 8004f22:	d00c      	beq.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f28:	2b30      	cmp	r3, #48	@ 0x30
 8004f2a:	d008      	beq.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f30:	2b20      	cmp	r3, #32
 8004f32:	d004      	beq.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8004f34:	f240 1137 	movw	r1, #311	@ 0x137
 8004f38:	4808      	ldr	r0, [pc, #32]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8004f3a:	f7fd fb13 	bl	8002564 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f3e:	4b06      	ldr	r3, [pc, #24]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f44:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f4c:	4902      	ldr	r1, [pc, #8]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004f54:	e004      	b.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
 8004f56:	bf00      	nop
 8004f58:	40023800 	.word	0x40023800
 8004f5c:	080108f0 	.word	0x080108f0
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d01f      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x814>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d010      	beq.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f78:	2b40      	cmp	r3, #64	@ 0x40
 8004f7a:	d00c      	beq.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f80:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f82:	d008      	beq.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f88:	2b80      	cmp	r3, #128	@ 0x80
 8004f8a:	d004      	beq.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8004f8c:	f240 1141 	movw	r1, #321	@ 0x141
 8004f90:	48a0      	ldr	r0, [pc, #640]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8004f92:	f7fd fae7 	bl	8002564 <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004f96:	4ba0      	ldr	r3, [pc, #640]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f9c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fa4:	499c      	ldr	r1, [pc, #624]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d022      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x866>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d013      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fc4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fc8:	d00e      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004fd2:	d009      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fdc:	d004      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8004fde:	f240 114b 	movw	r1, #331	@ 0x14b
 8004fe2:	488c      	ldr	r0, [pc, #560]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8004fe4:	f7fd fabe 	bl	8002564 <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004fe8:	4b8b      	ldr	r3, [pc, #556]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fee:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ff6:	4988      	ldr	r1, [pc, #544]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005006:	2b00      	cmp	r3, #0
 8005008:	d022      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800500e:	2b00      	cmp	r3, #0
 8005010:	d013      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005016:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800501a:	d00e      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005020:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005024:	d009      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800502a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800502e:	d004      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8005030:	f240 1155 	movw	r1, #341	@ 0x155
 8005034:	4877      	ldr	r0, [pc, #476]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8005036:	f7fd fa95 	bl	8002564 <assert_failed>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800503a:	4b77      	ldr	r3, [pc, #476]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800503c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005040:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005048:	4973      	ldr	r1, [pc, #460]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800504a:	4313      	orrs	r3, r2
 800504c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d022      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x90a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005060:	2b00      	cmp	r3, #0
 8005062:	d013      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005068:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800506c:	d00e      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005072:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005076:	d009      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800507c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005080:	d004      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8005082:	f240 115f 	movw	r1, #351	@ 0x15f
 8005086:	4863      	ldr	r0, [pc, #396]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8005088:	f7fd fa6c 	bl	8002564 <assert_failed>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800508c:	4b62      	ldr	r3, [pc, #392]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800508e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005092:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800509a:	495f      	ldr	r1, [pc, #380]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800509c:	4313      	orrs	r3, r2
 800509e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d022      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d013      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x946>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80050be:	d00e      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x946>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050c4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80050c8:	d009      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x946>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050d2:	d004      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x946>
 80050d4:	f240 1169 	movw	r1, #361	@ 0x169
 80050d8:	484e      	ldr	r0, [pc, #312]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 80050da:	f7fd fa43 	bl	8002564 <assert_failed>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80050de:	4b4e      	ldr	r3, [pc, #312]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80050e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050e4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050ec:	494a      	ldr	r1, [pc, #296]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80050ee:	4313      	orrs	r3, r2
 80050f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d018      	beq.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x99a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005104:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005108:	d008      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x984>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800510e:	2b00      	cmp	r3, #0
 8005110:	d004      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x984>
 8005112:	f240 1173 	movw	r1, #371	@ 0x173
 8005116:	483f      	ldr	r0, [pc, #252]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8005118:	f7fd fa24 	bl	8002564 <assert_failed>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800511c:	4b3e      	ldr	r3, [pc, #248]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800511e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005122:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800512a:	493b      	ldr	r1, [pc, #236]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800512c:	4313      	orrs	r3, r2
 800512e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d01f      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005142:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005146:	d008      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800514c:	2b00      	cmp	r3, #0
 800514e:	d004      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8005150:	f240 117d 	movw	r1, #381	@ 0x17d
 8005154:	482f      	ldr	r0, [pc, #188]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8005156:	f7fd fa05 	bl	8002564 <assert_failed>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800515a:	4b2f      	ldr	r3, [pc, #188]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800515c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005160:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005168:	492b      	ldr	r1, [pc, #172]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800516a:	4313      	orrs	r3, r2
 800516c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005174:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005178:	d101      	bne.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    {
      pllsaiused = 1;
 800517a:	2301      	movs	r3, #1
 800517c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0308 	and.w	r3, r3, #8
 8005186:	2b00      	cmp	r3, #0
 8005188:	d001      	beq.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x9f6>
  {
    pllsaiused = 1;
 800518a:	2301      	movs	r3, #1
 800518c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005196:	2b00      	cmp	r3, #0
 8005198:	d022      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0xa48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d013      	beq.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0xa32>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80051aa:	d00e      	beq.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0xa32>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80051b4:	d009      	beq.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0xa32>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051ba:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80051be:	d004      	beq.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0xa32>
 80051c0:	f240 1195 	movw	r1, #405	@ 0x195
 80051c4:	4813      	ldr	r0, [pc, #76]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 80051c6:	f7fd f9cd 	bl	8002564 <assert_failed>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051ca:	4b13      	ldr	r3, [pc, #76]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80051cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051d0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051d8:	490f      	ldr	r1, [pc, #60]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d020      	beq.n	800522e <HAL_RCCEx_PeriphCLKConfig+0xa96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80051f6:	d009      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d004      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005202:	f240 119f 	movw	r1, #415	@ 0x19f
 8005206:	4803      	ldr	r0, [pc, #12]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8005208:	f7fd f9ac 	bl	8002564 <assert_failed>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800520c:	4b02      	ldr	r3, [pc, #8]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800520e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005212:	e003      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0xa84>
 8005214:	080108f0 	.word	0x080108f0
 8005218:	40023800 	.word	0x40023800
 800521c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005226:	4910      	ldr	r1, [pc, #64]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 8005228:	4313      	orrs	r3, r2
 800522a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	2b01      	cmp	r3, #1
 8005232:	d006      	beq.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800523c:	2b00      	cmp	r3, #0
 800523e:	f000 8155 	beq.w	80054ec <HAL_RCCEx_PeriphCLKConfig+0xd54>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005242:	4b09      	ldr	r3, [pc, #36]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a08      	ldr	r2, [pc, #32]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 8005248:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800524c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800524e:	f7fd fe0f 	bl	8002e70 <HAL_GetTick>
 8005252:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005254:	e00a      	b.n	800526c <HAL_RCCEx_PeriphCLKConfig+0xad4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005256:	f7fd fe0b 	bl	8002e70 <HAL_GetTick>
 800525a:	4602      	mov	r2, r0
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	1ad3      	subs	r3, r2, r3
 8005260:	2b64      	cmp	r3, #100	@ 0x64
 8005262:	d903      	bls.n	800526c <HAL_RCCEx_PeriphCLKConfig+0xad4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005264:	2303      	movs	r3, #3
 8005266:	e273      	b.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 8005268:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800526c:	4b9a      	ldr	r3, [pc, #616]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005274:	2b00      	cmp	r3, #0
 8005276:	d1ee      	bne.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0xabe>
      }
    }

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	2b31      	cmp	r3, #49	@ 0x31
 800527e:	d904      	bls.n	800528a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	f5b3 7fd8 	cmp.w	r3, #432	@ 0x1b0
 8005288:	d904      	bls.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0xafc>
 800528a:	f44f 71ed 	mov.w	r1, #474	@ 0x1da
 800528e:	4893      	ldr	r0, [pc, #588]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8005290:	f7fd f968 	bl	8002564 <assert_failed>

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0301 	and.w	r3, r3, #1
 800529c:	2b00      	cmp	r3, #0
 800529e:	d02e      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0xb66>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d12a      	bne.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0xb66>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d903      	bls.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0xb20>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	2b07      	cmp	r3, #7
 80052b6:	d904      	bls.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80052b8:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 80052bc:	4887      	ldr	r0, [pc, #540]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80052be:	f7fd f951 	bl	8002564 <assert_failed>

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80052c2:	4b85      	ldr	r3, [pc, #532]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80052c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052c8:	0c1b      	lsrs	r3, r3, #16
 80052ca:	f003 0303 	and.w	r3, r3, #3
 80052ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80052d0:	4b81      	ldr	r3, [pc, #516]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80052d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052d6:	0e1b      	lsrs	r3, r3, #24
 80052d8:	f003 030f 	and.w	r3, r3, #15
 80052dc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	019a      	lsls	r2, r3, #6
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	041b      	lsls	r3, r3, #16
 80052e8:	431a      	orrs	r2, r3
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	061b      	lsls	r3, r3, #24
 80052ee:	431a      	orrs	r2, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	071b      	lsls	r3, r3, #28
 80052f6:	4978      	ldr	r1, [pc, #480]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80052f8:	4313      	orrs	r3, r2
 80052fa:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d004      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800530e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005312:	d00a      	beq.n	800532a <HAL_RCCEx_PeriphCLKConfig+0xb92>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800531c:	2b00      	cmp	r3, #0
 800531e:	d048      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005324:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005328:	d143      	bne.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {
      /* Check for PLLI2S Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	2b01      	cmp	r3, #1
 8005330:	d903      	bls.n	800533a <HAL_RCCEx_PeriphCLKConfig+0xba2>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	2b0f      	cmp	r3, #15
 8005338:	d904      	bls.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800533a:	f44f 71f8 	mov.w	r1, #496	@ 0x1f0
 800533e:	4867      	ldr	r0, [pc, #412]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8005340:	f7fd f910 	bl	8002564 <assert_failed>
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005348:	2b00      	cmp	r3, #0
 800534a:	d003      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0xbbc>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005350:	2b20      	cmp	r3, #32
 8005352:	d904      	bls.n	800535e <HAL_RCCEx_PeriphCLKConfig+0xbc6>
 8005354:	f44f 71f9 	mov.w	r1, #498	@ 0x1f2
 8005358:	4860      	ldr	r0, [pc, #384]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 800535a:	f7fd f903 	bl	8002564 <assert_failed>

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800535e:	4b5e      	ldr	r3, [pc, #376]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8005360:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005364:	0c1b      	lsrs	r3, r3, #16
 8005366:	f003 0303 	and.w	r3, r3, #3
 800536a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800536c:	4b5a      	ldr	r3, [pc, #360]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800536e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005372:	0f1b      	lsrs	r3, r3, #28
 8005374:	f003 0307 	and.w	r3, r3, #7
 8005378:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	019a      	lsls	r2, r3, #6
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	041b      	lsls	r3, r3, #16
 8005384:	431a      	orrs	r2, r3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	061b      	lsls	r3, r3, #24
 800538c:	431a      	orrs	r2, r3
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	071b      	lsls	r3, r3, #28
 8005392:	4951      	ldr	r1, [pc, #324]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8005394:	4313      	orrs	r3, r2
 8005396:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800539a:	4b4f      	ldr	r3, [pc, #316]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800539c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80053a0:	f023 021f 	bic.w	r2, r3, #31
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053a8:	3b01      	subs	r3, #1
 80053aa:	494b      	ldr	r1, [pc, #300]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80053ac:	4313      	orrs	r3, r2
 80053ae:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d032      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d010      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d00c      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d008      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	2b03      	cmp	r3, #3
 80053dc:	d004      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 80053de:	f240 2105 	movw	r1, #517	@ 0x205
 80053e2:	483e      	ldr	r0, [pc, #248]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80053e4:	f7fd f8be 	bl	8002564 <assert_failed>

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80053e8:	4b3b      	ldr	r3, [pc, #236]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80053ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053ee:	0e1b      	lsrs	r3, r3, #24
 80053f0:	f003 030f 	and.w	r3, r3, #15
 80053f4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80053f6:	4b38      	ldr	r3, [pc, #224]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80053f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053fc:	0f1b      	lsrs	r3, r3, #28
 80053fe:	f003 0307 	and.w	r3, r3, #7
 8005402:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	019a      	lsls	r2, r3, #6
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	041b      	lsls	r3, r3, #16
 8005410:	431a      	orrs	r2, r3
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	061b      	lsls	r3, r3, #24
 8005416:	431a      	orrs	r2, r3
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	071b      	lsls	r3, r3, #28
 800541c:	492e      	ldr	r1, [pc, #184]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800541e:	4313      	orrs	r3, r2
 8005420:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800542c:	2b00      	cmp	r3, #0
 800542e:	d040      	beq.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	691b      	ldr	r3, [r3, #16]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d010      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	2b01      	cmp	r3, #1
 800543e:	d00c      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	2b02      	cmp	r3, #2
 8005446:	d008      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	2b03      	cmp	r3, #3
 800544e:	d004      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8005450:	f44f 7105 	mov.w	r1, #532	@ 0x214
 8005454:	4821      	ldr	r0, [pc, #132]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8005456:	f7fd f885 	bl	8002564 <assert_failed>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	2b01      	cmp	r3, #1
 8005460:	d903      	bls.n	800546a <HAL_RCCEx_PeriphCLKConfig+0xcd2>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	2b07      	cmp	r3, #7
 8005468:	d904      	bls.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 800546a:	f240 2115 	movw	r1, #533	@ 0x215
 800546e:	481b      	ldr	r0, [pc, #108]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8005470:	f7fd f878 	bl	8002564 <assert_failed>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	2b01      	cmp	r3, #1
 800547a:	d903      	bls.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0xcec>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	2b0f      	cmp	r3, #15
 8005482:	d904      	bls.n	800548e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
 8005484:	f240 2116 	movw	r1, #534	@ 0x216
 8005488:	4814      	ldr	r0, [pc, #80]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 800548a:	f7fd f86b 	bl	8002564 <assert_failed>

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	019a      	lsls	r2, r3, #6
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	041b      	lsls	r3, r3, #16
 800549a:	431a      	orrs	r2, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	061b      	lsls	r3, r3, #24
 80054a2:	431a      	orrs	r2, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	071b      	lsls	r3, r3, #28
 80054aa:	490b      	ldr	r1, [pc, #44]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80054ac:	4313      	orrs	r3, r2
 80054ae:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80054b2:	4b09      	ldr	r3, [pc, #36]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a08      	ldr	r2, [pc, #32]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80054b8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80054bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054be:	f7fd fcd7 	bl	8002e70 <HAL_GetTick>
 80054c2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80054c4:	e00c      	b.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0xd48>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80054c6:	f7fd fcd3 	bl	8002e70 <HAL_GetTick>
 80054ca:	4602      	mov	r2, r0
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	1ad3      	subs	r3, r2, r3
 80054d0:	2b64      	cmp	r3, #100	@ 0x64
 80054d2:	d905      	bls.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0xd48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054d4:	2303      	movs	r3, #3
 80054d6:	e13b      	b.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 80054d8:	40023800 	.word	0x40023800
 80054dc:	080108f0 	.word	0x080108f0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80054e0:	4b9d      	ldr	r3, [pc, #628]	@ (8005758 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d0ec      	beq.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80054ec:	69bb      	ldr	r3, [r7, #24]
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	f040 812d 	bne.w	800574e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80054f4:	4b98      	ldr	r3, [pc, #608]	@ (8005758 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a97      	ldr	r2, [pc, #604]	@ (8005758 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80054fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80054fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005500:	f7fd fcb6 	bl	8002e70 <HAL_GetTick>
 8005504:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005506:	e008      	b.n	800551a <HAL_RCCEx_PeriphCLKConfig+0xd82>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005508:	f7fd fcb2 	bl	8002e70 <HAL_GetTick>
 800550c:	4602      	mov	r2, r0
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	2b64      	cmp	r3, #100	@ 0x64
 8005514:	d901      	bls.n	800551a <HAL_RCCEx_PeriphCLKConfig+0xd82>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	e11a      	b.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800551a:	4b8f      	ldr	r3, [pc, #572]	@ (8005758 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005522:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005526:	d0ef      	beq.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0xd70>
      }
    }

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	695b      	ldr	r3, [r3, #20]
 800552c:	2b31      	cmp	r3, #49	@ 0x31
 800552e:	d904      	bls.n	800553a <HAL_RCCEx_PeriphCLKConfig+0xda2>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	695b      	ldr	r3, [r3, #20]
 8005534:	f5b3 7fd8 	cmp.w	r3, #432	@ 0x1b0
 8005538:	d904      	bls.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0xdac>
 800553a:	f44f 7111 	mov.w	r1, #580	@ 0x244
 800553e:	4887      	ldr	r0, [pc, #540]	@ (800575c <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8005540:	f7fd f810 	bl	8002564 <assert_failed>

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800554c:	2b00      	cmp	r3, #0
 800554e:	d003      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005554:	2b00      	cmp	r3, #0
 8005556:	d009      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0xdd4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005560:	2b00      	cmp	r3, #0
 8005562:	d048      	beq.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0xe5e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005568:	2b00      	cmp	r3, #0
 800556a:	d144      	bne.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0xe5e>
    {
      /* check for PLLSAIQ Parameter */
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	699b      	ldr	r3, [r3, #24]
 8005570:	2b01      	cmp	r3, #1
 8005572:	d903      	bls.n	800557c <HAL_RCCEx_PeriphCLKConfig+0xde4>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	699b      	ldr	r3, [r3, #24]
 8005578:	2b0f      	cmp	r3, #15
 800557a:	d904      	bls.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0xdee>
 800557c:	f240 214b 	movw	r1, #587	@ 0x24b
 8005580:	4876      	ldr	r0, [pc, #472]	@ (800575c <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8005582:	f7fc ffef 	bl	8002564 <assert_failed>
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800558a:	2b00      	cmp	r3, #0
 800558c:	d003      	beq.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0xdfe>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005592:	2b20      	cmp	r3, #32
 8005594:	d904      	bls.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
 8005596:	f240 214d 	movw	r1, #589	@ 0x24d
 800559a:	4870      	ldr	r0, [pc, #448]	@ (800575c <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 800559c:	f7fc ffe2 	bl	8002564 <assert_failed>

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80055a0:	4b6d      	ldr	r3, [pc, #436]	@ (8005758 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80055a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055a6:	0c1b      	lsrs	r3, r3, #16
 80055a8:	f003 0303 	and.w	r3, r3, #3
 80055ac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80055ae:	4b6a      	ldr	r3, [pc, #424]	@ (8005758 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80055b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055b4:	0f1b      	lsrs	r3, r3, #28
 80055b6:	f003 0307 	and.w	r3, r3, #7
 80055ba:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	695b      	ldr	r3, [r3, #20]
 80055c0:	019a      	lsls	r2, r3, #6
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	041b      	lsls	r3, r3, #16
 80055c6:	431a      	orrs	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	699b      	ldr	r3, [r3, #24]
 80055cc:	061b      	lsls	r3, r3, #24
 80055ce:	431a      	orrs	r2, r3
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	071b      	lsls	r3, r3, #28
 80055d4:	4960      	ldr	r1, [pc, #384]	@ (8005758 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80055dc:	4b5e      	ldr	r3, [pc, #376]	@ (8005758 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80055de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80055e2:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ea:	3b01      	subs	r3, #1
 80055ec:	021b      	lsls	r3, r3, #8
 80055ee:	495a      	ldr	r1, [pc, #360]	@ (8005758 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80055f0:	4313      	orrs	r3, r2
 80055f2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d037      	beq.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0xeda>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005606:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800560a:	d132      	bne.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0xeda>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6a1b      	ldr	r3, [r3, #32]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d010      	beq.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6a1b      	ldr	r3, [r3, #32]
 8005618:	2b01      	cmp	r3, #1
 800561a:	d00c      	beq.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6a1b      	ldr	r3, [r3, #32]
 8005620:	2b02      	cmp	r3, #2
 8005622:	d008      	beq.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a1b      	ldr	r3, [r3, #32]
 8005628:	2b03      	cmp	r3, #3
 800562a:	d004      	beq.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 800562c:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8005630:	484a      	ldr	r0, [pc, #296]	@ (800575c <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8005632:	f7fc ff97 	bl	8002564 <assert_failed>
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005636:	4b48      	ldr	r3, [pc, #288]	@ (8005758 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005638:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800563c:	0e1b      	lsrs	r3, r3, #24
 800563e:	f003 030f 	and.w	r3, r3, #15
 8005642:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005644:	4b44      	ldr	r3, [pc, #272]	@ (8005758 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005646:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800564a:	0f1b      	lsrs	r3, r3, #28
 800564c:	f003 0307 	and.w	r3, r3, #7
 8005650:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	695b      	ldr	r3, [r3, #20]
 8005656:	019a      	lsls	r2, r3, #6
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a1b      	ldr	r3, [r3, #32]
 800565c:	041b      	lsls	r3, r3, #16
 800565e:	431a      	orrs	r2, r3
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	061b      	lsls	r3, r3, #24
 8005664:	431a      	orrs	r2, r3
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	071b      	lsls	r3, r3, #28
 800566a:	493b      	ldr	r1, [pc, #236]	@ (8005758 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800566c:	4313      	orrs	r3, r2
 800566e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 0308 	and.w	r3, r3, #8
 800567a:	2b00      	cmp	r3, #0
 800567c:	d04d      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0xf82>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	69db      	ldr	r3, [r3, #28]
 8005682:	2b01      	cmp	r3, #1
 8005684:	d903      	bls.n	800568e <HAL_RCCEx_PeriphCLKConfig+0xef6>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	69db      	ldr	r3, [r3, #28]
 800568a:	2b07      	cmp	r3, #7
 800568c:	d904      	bls.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0xf00>
 800568e:	f240 216f 	movw	r1, #623	@ 0x26f
 8005692:	4832      	ldr	r0, [pc, #200]	@ (800575c <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8005694:	f7fc ff66 	bl	8002564 <assert_failed>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800569c:	2b00      	cmp	r3, #0
 800569e:	d013      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056a8:	d00e      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80056b2:	d009      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056b8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80056bc:	d004      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 80056be:	f44f 711c 	mov.w	r1, #624	@ 0x270
 80056c2:	4826      	ldr	r0, [pc, #152]	@ (800575c <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 80056c4:	f7fc ff4e 	bl	8002564 <assert_failed>

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80056c8:	4b23      	ldr	r3, [pc, #140]	@ (8005758 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80056ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056ce:	0e1b      	lsrs	r3, r3, #24
 80056d0:	f003 030f 	and.w	r3, r3, #15
 80056d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80056d6:	4b20      	ldr	r3, [pc, #128]	@ (8005758 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80056d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056dc:	0c1b      	lsrs	r3, r3, #16
 80056de:	f003 0303 	and.w	r3, r3, #3
 80056e2:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	695b      	ldr	r3, [r3, #20]
 80056e8:	019a      	lsls	r2, r3, #6
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	041b      	lsls	r3, r3, #16
 80056ee:	431a      	orrs	r2, r3
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	061b      	lsls	r3, r3, #24
 80056f4:	431a      	orrs	r2, r3
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	69db      	ldr	r3, [r3, #28]
 80056fa:	071b      	lsls	r3, r3, #28
 80056fc:	4916      	ldr	r1, [pc, #88]	@ (8005758 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80056fe:	4313      	orrs	r3, r2
 8005700:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005704:	4b14      	ldr	r3, [pc, #80]	@ (8005758 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005706:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800570a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005712:	4911      	ldr	r1, [pc, #68]	@ (8005758 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005714:	4313      	orrs	r3, r2
 8005716:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800571a:	4b0f      	ldr	r3, [pc, #60]	@ (8005758 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a0e      	ldr	r2, [pc, #56]	@ (8005758 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005720:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005724:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005726:	f7fd fba3 	bl	8002e70 <HAL_GetTick>
 800572a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800572c:	e008      	b.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800572e:	f7fd fb9f 	bl	8002e70 <HAL_GetTick>
 8005732:	4602      	mov	r2, r0
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	2b64      	cmp	r3, #100	@ 0x64
 800573a:	d901      	bls.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800573c:	2303      	movs	r3, #3
 800573e:	e007      	b.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005740:	4b05      	ldr	r3, [pc, #20]	@ (8005758 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005748:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800574c:	d1ef      	bne.n	800572e <HAL_RCCEx_PeriphCLKConfig+0xf96>
      }
    }
  }
  return HAL_OK;
 800574e:	2300      	movs	r3, #0
}
 8005750:	4618      	mov	r0, r3
 8005752:	3720      	adds	r7, #32
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}
 8005758:	40023800 	.word	0x40023800
 800575c:	080108f0 	.word	0x080108f0

08005760 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d101      	bne.n	8005772 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e1fb      	b.n	8005b6a <HAL_SPI_Init+0x40a>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a83      	ldr	r2, [pc, #524]	@ (8005984 <HAL_SPI_Init+0x224>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d01d      	beq.n	80057b8 <HAL_SPI_Init+0x58>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a81      	ldr	r2, [pc, #516]	@ (8005988 <HAL_SPI_Init+0x228>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d018      	beq.n	80057b8 <HAL_SPI_Init+0x58>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a80      	ldr	r2, [pc, #512]	@ (800598c <HAL_SPI_Init+0x22c>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d013      	beq.n	80057b8 <HAL_SPI_Init+0x58>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a7e      	ldr	r2, [pc, #504]	@ (8005990 <HAL_SPI_Init+0x230>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d00e      	beq.n	80057b8 <HAL_SPI_Init+0x58>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a7d      	ldr	r2, [pc, #500]	@ (8005994 <HAL_SPI_Init+0x234>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d009      	beq.n	80057b8 <HAL_SPI_Init+0x58>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a7b      	ldr	r2, [pc, #492]	@ (8005998 <HAL_SPI_Init+0x238>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d004      	beq.n	80057b8 <HAL_SPI_Init+0x58>
 80057ae:	f44f 71a3 	mov.w	r1, #326	@ 0x146
 80057b2:	487a      	ldr	r0, [pc, #488]	@ (800599c <HAL_SPI_Init+0x23c>)
 80057b4:	f7fc fed6 	bl	8002564 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d009      	beq.n	80057d4 <HAL_SPI_Init+0x74>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80057c8:	d004      	beq.n	80057d4 <HAL_SPI_Init+0x74>
 80057ca:	f240 1147 	movw	r1, #327	@ 0x147
 80057ce:	4873      	ldr	r0, [pc, #460]	@ (800599c <HAL_SPI_Init+0x23c>)
 80057d0:	f7fc fec8 	bl	8002564 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d00e      	beq.n	80057fa <HAL_SPI_Init+0x9a>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057e4:	d009      	beq.n	80057fa <HAL_SPI_Init+0x9a>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057ee:	d004      	beq.n	80057fa <HAL_SPI_Init+0x9a>
 80057f0:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 80057f4:	4869      	ldr	r0, [pc, #420]	@ (800599c <HAL_SPI_Init+0x23c>)
 80057f6:	f7fc feb5 	bl	8002564 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005802:	d040      	beq.n	8005886 <HAL_SPI_Init+0x126>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 800580c:	d03b      	beq.n	8005886 <HAL_SPI_Init+0x126>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	f5b3 6f50 	cmp.w	r3, #3328	@ 0xd00
 8005816:	d036      	beq.n	8005886 <HAL_SPI_Init+0x126>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005820:	d031      	beq.n	8005886 <HAL_SPI_Init+0x126>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	f5b3 6f30 	cmp.w	r3, #2816	@ 0xb00
 800582a:	d02c      	beq.n	8005886 <HAL_SPI_Init+0x126>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005834:	d027      	beq.n	8005886 <HAL_SPI_Init+0x126>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	f5b3 6f10 	cmp.w	r3, #2304	@ 0x900
 800583e:	d022      	beq.n	8005886 <HAL_SPI_Init+0x126>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005848:	d01d      	beq.n	8005886 <HAL_SPI_Init+0x126>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005852:	d018      	beq.n	8005886 <HAL_SPI_Init+0x126>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800585c:	d013      	beq.n	8005886 <HAL_SPI_Init+0x126>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005866:	d00e      	beq.n	8005886 <HAL_SPI_Init+0x126>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005870:	d009      	beq.n	8005886 <HAL_SPI_Init+0x126>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800587a:	d004      	beq.n	8005886 <HAL_SPI_Init+0x126>
 800587c:	f240 1149 	movw	r1, #329	@ 0x149
 8005880:	4846      	ldr	r0, [pc, #280]	@ (800599c <HAL_SPI_Init+0x23c>)
 8005882:	f7fc fe6f 	bl	8002564 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	699b      	ldr	r3, [r3, #24]
 800588a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800588e:	d00d      	beq.n	80058ac <HAL_SPI_Init+0x14c>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	699b      	ldr	r3, [r3, #24]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d009      	beq.n	80058ac <HAL_SPI_Init+0x14c>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	699b      	ldr	r3, [r3, #24]
 800589c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80058a0:	d004      	beq.n	80058ac <HAL_SPI_Init+0x14c>
 80058a2:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 80058a6:	483d      	ldr	r0, [pc, #244]	@ (800599c <HAL_SPI_Init+0x23c>)
 80058a8:	f7fc fe5c 	bl	8002564 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058b0:	2b08      	cmp	r3, #8
 80058b2:	d008      	beq.n	80058c6 <HAL_SPI_Init+0x166>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d004      	beq.n	80058c6 <HAL_SPI_Init+0x166>
 80058bc:	f240 114b 	movw	r1, #331	@ 0x14b
 80058c0:	4836      	ldr	r0, [pc, #216]	@ (800599c <HAL_SPI_Init+0x23c>)
 80058c2:	f7fc fe4f 	bl	8002564 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	69db      	ldr	r3, [r3, #28]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d020      	beq.n	8005910 <HAL_SPI_Init+0x1b0>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	69db      	ldr	r3, [r3, #28]
 80058d2:	2b08      	cmp	r3, #8
 80058d4:	d01c      	beq.n	8005910 <HAL_SPI_Init+0x1b0>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	69db      	ldr	r3, [r3, #28]
 80058da:	2b10      	cmp	r3, #16
 80058dc:	d018      	beq.n	8005910 <HAL_SPI_Init+0x1b0>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	69db      	ldr	r3, [r3, #28]
 80058e2:	2b18      	cmp	r3, #24
 80058e4:	d014      	beq.n	8005910 <HAL_SPI_Init+0x1b0>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	69db      	ldr	r3, [r3, #28]
 80058ea:	2b20      	cmp	r3, #32
 80058ec:	d010      	beq.n	8005910 <HAL_SPI_Init+0x1b0>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	69db      	ldr	r3, [r3, #28]
 80058f2:	2b28      	cmp	r3, #40	@ 0x28
 80058f4:	d00c      	beq.n	8005910 <HAL_SPI_Init+0x1b0>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	69db      	ldr	r3, [r3, #28]
 80058fa:	2b30      	cmp	r3, #48	@ 0x30
 80058fc:	d008      	beq.n	8005910 <HAL_SPI_Init+0x1b0>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	69db      	ldr	r3, [r3, #28]
 8005902:	2b38      	cmp	r3, #56	@ 0x38
 8005904:	d004      	beq.n	8005910 <HAL_SPI_Init+0x1b0>
 8005906:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 800590a:	4824      	ldr	r0, [pc, #144]	@ (800599c <HAL_SPI_Init+0x23c>)
 800590c:	f7fc fe2a 	bl	8002564 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6a1b      	ldr	r3, [r3, #32]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d008      	beq.n	800592a <HAL_SPI_Init+0x1ca>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6a1b      	ldr	r3, [r3, #32]
 800591c:	2b80      	cmp	r3, #128	@ 0x80
 800591e:	d004      	beq.n	800592a <HAL_SPI_Init+0x1ca>
 8005920:	f240 114d 	movw	r1, #333	@ 0x14d
 8005924:	481d      	ldr	r0, [pc, #116]	@ (800599c <HAL_SPI_Init+0x23c>)
 8005926:	f7fc fe1d 	bl	8002564 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800592e:	2b00      	cmp	r3, #0
 8005930:	d008      	beq.n	8005944 <HAL_SPI_Init+0x1e4>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005936:	2b10      	cmp	r3, #16
 8005938:	d004      	beq.n	8005944 <HAL_SPI_Init+0x1e4>
 800593a:	f44f 71a7 	mov.w	r1, #334	@ 0x14e
 800593e:	4817      	ldr	r0, [pc, #92]	@ (800599c <HAL_SPI_Init+0x23c>)
 8005940:	f7fc fe10 	bl	8002564 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005948:	2b00      	cmp	r3, #0
 800594a:	d158      	bne.n	80059fe <HAL_SPI_Init+0x29e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	691b      	ldr	r3, [r3, #16]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d008      	beq.n	8005966 <HAL_SPI_Init+0x206>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	691b      	ldr	r3, [r3, #16]
 8005958:	2b02      	cmp	r3, #2
 800595a:	d004      	beq.n	8005966 <HAL_SPI_Init+0x206>
 800595c:	f240 1151 	movw	r1, #337	@ 0x151
 8005960:	480e      	ldr	r0, [pc, #56]	@ (800599c <HAL_SPI_Init+0x23c>)
 8005962:	f7fc fdff 	bl	8002564 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	695b      	ldr	r3, [r3, #20]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d018      	beq.n	80059a0 <HAL_SPI_Init+0x240>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	695b      	ldr	r3, [r3, #20]
 8005972:	2b01      	cmp	r3, #1
 8005974:	d014      	beq.n	80059a0 <HAL_SPI_Init+0x240>
 8005976:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 800597a:	4808      	ldr	r0, [pc, #32]	@ (800599c <HAL_SPI_Init+0x23c>)
 800597c:	f7fc fdf2 	bl	8002564 <assert_failed>
 8005980:	e00e      	b.n	80059a0 <HAL_SPI_Init+0x240>
 8005982:	bf00      	nop
 8005984:	40013000 	.word	0x40013000
 8005988:	40003800 	.word	0x40003800
 800598c:	40003c00 	.word	0x40003c00
 8005990:	40013400 	.word	0x40013400
 8005994:	40015000 	.word	0x40015000
 8005998:	40015400 	.word	0x40015400
 800599c:	0801092c 	.word	0x0801092c

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80059a8:	d125      	bne.n	80059f6 <HAL_SPI_Init+0x296>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	69db      	ldr	r3, [r3, #28]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d050      	beq.n	8005a54 <HAL_SPI_Init+0x2f4>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	69db      	ldr	r3, [r3, #28]
 80059b6:	2b08      	cmp	r3, #8
 80059b8:	d04c      	beq.n	8005a54 <HAL_SPI_Init+0x2f4>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	69db      	ldr	r3, [r3, #28]
 80059be:	2b10      	cmp	r3, #16
 80059c0:	d048      	beq.n	8005a54 <HAL_SPI_Init+0x2f4>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	69db      	ldr	r3, [r3, #28]
 80059c6:	2b18      	cmp	r3, #24
 80059c8:	d044      	beq.n	8005a54 <HAL_SPI_Init+0x2f4>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	69db      	ldr	r3, [r3, #28]
 80059ce:	2b20      	cmp	r3, #32
 80059d0:	d040      	beq.n	8005a54 <HAL_SPI_Init+0x2f4>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	69db      	ldr	r3, [r3, #28]
 80059d6:	2b28      	cmp	r3, #40	@ 0x28
 80059d8:	d03c      	beq.n	8005a54 <HAL_SPI_Init+0x2f4>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	69db      	ldr	r3, [r3, #28]
 80059de:	2b30      	cmp	r3, #48	@ 0x30
 80059e0:	d038      	beq.n	8005a54 <HAL_SPI_Init+0x2f4>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	69db      	ldr	r3, [r3, #28]
 80059e6:	2b38      	cmp	r3, #56	@ 0x38
 80059e8:	d034      	beq.n	8005a54 <HAL_SPI_Init+0x2f4>
 80059ea:	f44f 71ab 	mov.w	r1, #342	@ 0x156
 80059ee:	4861      	ldr	r0, [pc, #388]	@ (8005b74 <HAL_SPI_Init+0x414>)
 80059f0:	f7fc fdb8 	bl	8002564 <assert_failed>
 80059f4:	e02e      	b.n	8005a54 <HAL_SPI_Init+0x2f4>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	61da      	str	r2, [r3, #28]
 80059fc:	e02a      	b.n	8005a54 <HAL_SPI_Init+0x2f4>
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	69db      	ldr	r3, [r3, #28]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d020      	beq.n	8005a48 <HAL_SPI_Init+0x2e8>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	69db      	ldr	r3, [r3, #28]
 8005a0a:	2b08      	cmp	r3, #8
 8005a0c:	d01c      	beq.n	8005a48 <HAL_SPI_Init+0x2e8>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	69db      	ldr	r3, [r3, #28]
 8005a12:	2b10      	cmp	r3, #16
 8005a14:	d018      	beq.n	8005a48 <HAL_SPI_Init+0x2e8>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	69db      	ldr	r3, [r3, #28]
 8005a1a:	2b18      	cmp	r3, #24
 8005a1c:	d014      	beq.n	8005a48 <HAL_SPI_Init+0x2e8>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	69db      	ldr	r3, [r3, #28]
 8005a22:	2b20      	cmp	r3, #32
 8005a24:	d010      	beq.n	8005a48 <HAL_SPI_Init+0x2e8>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	69db      	ldr	r3, [r3, #28]
 8005a2a:	2b28      	cmp	r3, #40	@ 0x28
 8005a2c:	d00c      	beq.n	8005a48 <HAL_SPI_Init+0x2e8>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	69db      	ldr	r3, [r3, #28]
 8005a32:	2b30      	cmp	r3, #48	@ 0x30
 8005a34:	d008      	beq.n	8005a48 <HAL_SPI_Init+0x2e8>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	69db      	ldr	r3, [r3, #28]
 8005a3a:	2b38      	cmp	r3, #56	@ 0x38
 8005a3c:	d004      	beq.n	8005a48 <HAL_SPI_Init+0x2e8>
 8005a3e:	f44f 71b0 	mov.w	r1, #352	@ 0x160
 8005a42:	484c      	ldr	r0, [pc, #304]	@ (8005b74 <HAL_SPI_Init+0x414>)
 8005a44:	f7fc fd8e 	bl	8002564 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d106      	bne.n	8005a74 <HAL_SPI_Init+0x314>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f7fd f844 	bl	8002afc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2202      	movs	r2, #2
 8005a78:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a8a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005a94:	d902      	bls.n	8005a9c <HAL_SPI_Init+0x33c>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005a96:	2300      	movs	r3, #0
 8005a98:	60fb      	str	r3, [r7, #12]
 8005a9a:	e002      	b.n	8005aa2 <HAL_SPI_Init+0x342>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005a9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005aa0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005aaa:	d007      	beq.n	8005abc <HAL_SPI_Init+0x35c>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005ab4:	d002      	beq.n	8005abc <HAL_SPI_Init+0x35c>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005acc:	431a      	orrs	r2, r3
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	f003 0302 	and.w	r3, r3, #2
 8005ad6:	431a      	orrs	r2, r3
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	695b      	ldr	r3, [r3, #20]
 8005adc:	f003 0301 	and.w	r3, r3, #1
 8005ae0:	431a      	orrs	r2, r3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	699b      	ldr	r3, [r3, #24]
 8005ae6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005aea:	431a      	orrs	r2, r3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	69db      	ldr	r3, [r3, #28]
 8005af0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005af4:	431a      	orrs	r2, r3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a1b      	ldr	r3, [r3, #32]
 8005afa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005afe:	ea42 0103 	orr.w	r1, r2, r3
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b06:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	430a      	orrs	r2, r1
 8005b10:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	699b      	ldr	r3, [r3, #24]
 8005b16:	0c1b      	lsrs	r3, r3, #16
 8005b18:	f003 0204 	and.w	r2, r3, #4
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b20:	f003 0310 	and.w	r3, r3, #16
 8005b24:	431a      	orrs	r2, r3
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b2a:	f003 0308 	and.w	r3, r3, #8
 8005b2e:	431a      	orrs	r2, r3
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005b38:	ea42 0103 	orr.w	r1, r2, r3
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	430a      	orrs	r2, r1
 8005b48:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	69da      	ldr	r2, [r3, #28]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b58:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3710      	adds	r7, #16
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	0801092c 	.word	0x0801092c

08005b78 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b08a      	sub	sp, #40	@ 0x28
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	60f8      	str	r0, [r7, #12]
 8005b80:	60b9      	str	r1, [r7, #8]
 8005b82:	607a      	str	r2, [r7, #4]
 8005b84:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005b86:	2301      	movs	r3, #1
 8005b88:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d004      	beq.n	8005ba2 <HAL_SPI_TransmitReceive+0x2a>
 8005b98:	f240 41fe 	movw	r1, #1278	@ 0x4fe
 8005b9c:	4888      	ldr	r0, [pc, #544]	@ (8005dc0 <HAL_SPI_TransmitReceive+0x248>)
 8005b9e:	f7fc fce1 	bl	8002564 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d101      	bne.n	8005bb0 <HAL_SPI_TransmitReceive+0x38>
 8005bac:	2302      	movs	r3, #2
 8005bae:	e20d      	b.n	8005fcc <HAL_SPI_TransmitReceive+0x454>
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005bb8:	f7fd f95a 	bl	8002e70 <HAL_GetTick>
 8005bbc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005bc4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005bcc:	887b      	ldrh	r3, [r7, #2]
 8005bce:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005bd0:	887b      	ldrh	r3, [r7, #2]
 8005bd2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005bd4:	7efb      	ldrb	r3, [r7, #27]
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d00e      	beq.n	8005bf8 <HAL_SPI_TransmitReceive+0x80>
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005be0:	d106      	bne.n	8005bf0 <HAL_SPI_TransmitReceive+0x78>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d102      	bne.n	8005bf0 <HAL_SPI_TransmitReceive+0x78>
 8005bea:	7efb      	ldrb	r3, [r7, #27]
 8005bec:	2b04      	cmp	r3, #4
 8005bee:	d003      	beq.n	8005bf8 <HAL_SPI_TransmitReceive+0x80>
  {
    errorcode = HAL_BUSY;
 8005bf0:	2302      	movs	r3, #2
 8005bf2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8005bf6:	e1e3      	b.n	8005fc0 <HAL_SPI_TransmitReceive+0x448>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d005      	beq.n	8005c0a <HAL_SPI_TransmitReceive+0x92>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d002      	beq.n	8005c0a <HAL_SPI_TransmitReceive+0x92>
 8005c04:	887b      	ldrh	r3, [r7, #2]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d103      	bne.n	8005c12 <HAL_SPI_TransmitReceive+0x9a>
  {
    errorcode = HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8005c10:	e1d6      	b.n	8005fc0 <HAL_SPI_TransmitReceive+0x448>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	2b04      	cmp	r3, #4
 8005c1c:	d003      	beq.n	8005c26 <HAL_SPI_TransmitReceive+0xae>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2205      	movs	r2, #5
 8005c22:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	887a      	ldrh	r2, [r7, #2]
 8005c36:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	887a      	ldrh	r2, [r7, #2]
 8005c3e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	68ba      	ldr	r2, [r7, #8]
 8005c46:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	887a      	ldrh	r2, [r7, #2]
 8005c4c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	887a      	ldrh	r2, [r7, #2]
 8005c52:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2200      	movs	r2, #0
 8005c58:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005c68:	d802      	bhi.n	8005c70 <HAL_SPI_TransmitReceive+0xf8>
 8005c6a:	8a3b      	ldrh	r3, [r7, #16]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d908      	bls.n	8005c82 <HAL_SPI_TransmitReceive+0x10a>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	685a      	ldr	r2, [r3, #4]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005c7e:	605a      	str	r2, [r3, #4]
 8005c80:	e007      	b.n	8005c92 <HAL_SPI_TransmitReceive+0x11a>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	685a      	ldr	r2, [r3, #4]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005c90:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c9c:	2b40      	cmp	r3, #64	@ 0x40
 8005c9e:	d007      	beq.n	8005cb0 <HAL_SPI_TransmitReceive+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005cae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005cb8:	f240 8084 	bls.w	8005dc4 <HAL_SPI_TransmitReceive+0x24c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d002      	beq.n	8005cca <HAL_SPI_TransmitReceive+0x152>
 8005cc4:	8a7b      	ldrh	r3, [r7, #18]
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d16d      	bne.n	8005da6 <HAL_SPI_TransmitReceive+0x22e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cce:	881a      	ldrh	r2, [r3, #0]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cda:	1c9a      	adds	r2, r3, #2
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	3b01      	subs	r3, #1
 8005ce8:	b29a      	uxth	r2, r3
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005cee:	e05a      	b.n	8005da6 <HAL_SPI_TransmitReceive+0x22e>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	f003 0302 	and.w	r3, r3, #2
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d11b      	bne.n	8005d36 <HAL_SPI_TransmitReceive+0x1be>
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d016      	beq.n	8005d36 <HAL_SPI_TransmitReceive+0x1be>
 8005d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d113      	bne.n	8005d36 <HAL_SPI_TransmitReceive+0x1be>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d12:	881a      	ldrh	r2, [r3, #0]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d1e:	1c9a      	adds	r2, r3, #2
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	3b01      	subs	r3, #1
 8005d2c:	b29a      	uxth	r2, r3
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d32:	2300      	movs	r3, #0
 8005d34:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	f003 0301 	and.w	r3, r3, #1
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d11c      	bne.n	8005d7e <HAL_SPI_TransmitReceive+0x206>
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d016      	beq.n	8005d7e <HAL_SPI_TransmitReceive+0x206>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	68da      	ldr	r2, [r3, #12]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d5a:	b292      	uxth	r2, r2
 8005d5c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d62:	1c9a      	adds	r2, r3, #2
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	3b01      	subs	r3, #1
 8005d72:	b29a      	uxth	r2, r3
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005d7e:	f7fd f877 	bl	8002e70 <HAL_GetTick>
 8005d82:	4602      	mov	r2, r0
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	1ad3      	subs	r3, r2, r3
 8005d88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d80b      	bhi.n	8005da6 <HAL_SPI_TransmitReceive+0x22e>
 8005d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d90:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d94:	d007      	beq.n	8005da6 <HAL_SPI_TransmitReceive+0x22e>
      {
        errorcode = HAL_TIMEOUT;
 8005d96:	2303      	movs	r3, #3
 8005d98:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8005da4:	e10c      	b.n	8005fc0 <HAL_SPI_TransmitReceive+0x448>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d19f      	bne.n	8005cf0 <HAL_SPI_TransmitReceive+0x178>
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d199      	bne.n	8005cf0 <HAL_SPI_TransmitReceive+0x178>
 8005dbc:	e0e6      	b.n	8005f8c <HAL_SPI_TransmitReceive+0x414>
 8005dbe:	bf00      	nop
 8005dc0:	0801092c 	.word	0x0801092c
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d003      	beq.n	8005dd4 <HAL_SPI_TransmitReceive+0x25c>
 8005dcc:	8a7b      	ldrh	r3, [r7, #18]
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	f040 80cf 	bne.w	8005f72 <HAL_SPI_TransmitReceive+0x3fa>
    {
      if (hspi->TxXferCount > 1U)
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d912      	bls.n	8005e04 <HAL_SPI_TransmitReceive+0x28c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005de2:	881a      	ldrh	r2, [r3, #0]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dee:	1c9a      	adds	r2, r3, #2
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	3b02      	subs	r3, #2
 8005dfc:	b29a      	uxth	r2, r3
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005e02:	e0b6      	b.n	8005f72 <HAL_SPI_TransmitReceive+0x3fa>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	330c      	adds	r3, #12
 8005e0e:	7812      	ldrb	r2, [r2, #0]
 8005e10:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e16:	1c5a      	adds	r2, r3, #1
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	3b01      	subs	r3, #1
 8005e24:	b29a      	uxth	r2, r3
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e2a:	e0a2      	b.n	8005f72 <HAL_SPI_TransmitReceive+0x3fa>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	f003 0302 	and.w	r3, r3, #2
 8005e36:	2b02      	cmp	r3, #2
 8005e38:	d134      	bne.n	8005ea4 <HAL_SPI_TransmitReceive+0x32c>
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d02f      	beq.n	8005ea4 <HAL_SPI_TransmitReceive+0x32c>
 8005e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d12c      	bne.n	8005ea4 <HAL_SPI_TransmitReceive+0x32c>
      {
        if (hspi->TxXferCount > 1U)
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d912      	bls.n	8005e7a <HAL_SPI_TransmitReceive+0x302>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e58:	881a      	ldrh	r2, [r3, #0]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e64:	1c9a      	adds	r2, r3, #2
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	3b02      	subs	r3, #2
 8005e72:	b29a      	uxth	r2, r3
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005e78:	e012      	b.n	8005ea0 <HAL_SPI_TransmitReceive+0x328>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	330c      	adds	r3, #12
 8005e84:	7812      	ldrb	r2, [r2, #0]
 8005e86:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e8c:	1c5a      	adds	r2, r3, #1
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	b29a      	uxth	r2, r3
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	f003 0301 	and.w	r3, r3, #1
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d148      	bne.n	8005f44 <HAL_SPI_TransmitReceive+0x3cc>
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d042      	beq.n	8005f44 <HAL_SPI_TransmitReceive+0x3cc>
      {
        if (hspi->RxXferCount > 1U)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d923      	bls.n	8005f12 <HAL_SPI_TransmitReceive+0x39a>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68da      	ldr	r2, [r3, #12]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ed4:	b292      	uxth	r2, r2
 8005ed6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005edc:	1c9a      	adds	r2, r3, #2
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	3b02      	subs	r3, #2
 8005eec:	b29a      	uxth	r2, r3
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d81f      	bhi.n	8005f40 <HAL_SPI_TransmitReceive+0x3c8>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	685a      	ldr	r2, [r3, #4]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005f0e:	605a      	str	r2, [r3, #4]
 8005f10:	e016      	b.n	8005f40 <HAL_SPI_TransmitReceive+0x3c8>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f103 020c 	add.w	r2, r3, #12
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f1e:	7812      	ldrb	r2, [r2, #0]
 8005f20:	b2d2      	uxtb	r2, r2
 8005f22:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f28:	1c5a      	adds	r2, r3, #1
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	3b01      	subs	r3, #1
 8005f38:	b29a      	uxth	r2, r3
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f40:	2301      	movs	r3, #1
 8005f42:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005f44:	f7fc ff94 	bl	8002e70 <HAL_GetTick>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d803      	bhi.n	8005f5c <HAL_SPI_TransmitReceive+0x3e4>
 8005f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f56:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005f5a:	d102      	bne.n	8005f62 <HAL_SPI_TransmitReceive+0x3ea>
 8005f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d107      	bne.n	8005f72 <HAL_SPI_TransmitReceive+0x3fa>
      {
        errorcode = HAL_TIMEOUT;
 8005f62:	2303      	movs	r3, #3
 8005f64:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8005f70:	e026      	b.n	8005fc0 <HAL_SPI_TransmitReceive+0x448>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	f47f af57 	bne.w	8005e2c <HAL_SPI_TransmitReceive+0x2b4>
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	f47f af50 	bne.w	8005e2c <HAL_SPI_TransmitReceive+0x2b4>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f8c:	69fa      	ldr	r2, [r7, #28]
 8005f8e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005f90:	68f8      	ldr	r0, [r7, #12]
 8005f92:	f000 fa5d 	bl	8006450 <SPI_EndRxTxTransaction>
 8005f96:	4603      	mov	r3, r0
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d005      	beq.n	8005fa8 <HAL_SPI_TransmitReceive+0x430>
  {
    errorcode = HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2220      	movs	r2, #32
 8005fa6:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d003      	beq.n	8005fb8 <HAL_SPI_TransmitReceive+0x440>
  {
    errorcode = HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fb6:	e003      	b.n	8005fc0 <HAL_SPI_TransmitReceive+0x448>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8005fc8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3728      	adds	r7, #40	@ 0x28
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b088      	sub	sp, #32
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	099b      	lsrs	r3, r3, #6
 8005ff0:	f003 0301 	and.w	r3, r3, #1
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d10f      	bne.n	8006018 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005ff8:	69bb      	ldr	r3, [r7, #24]
 8005ffa:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00a      	beq.n	8006018 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	099b      	lsrs	r3, r3, #6
 8006006:	f003 0301 	and.w	r3, r3, #1
 800600a:	2b00      	cmp	r3, #0
 800600c:	d004      	beq.n	8006018 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	4798      	blx	r3
    return;
 8006016:	e0d7      	b.n	80061c8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	085b      	lsrs	r3, r3, #1
 800601c:	f003 0301 	and.w	r3, r3, #1
 8006020:	2b00      	cmp	r3, #0
 8006022:	d00a      	beq.n	800603a <HAL_SPI_IRQHandler+0x66>
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	09db      	lsrs	r3, r3, #7
 8006028:	f003 0301 	and.w	r3, r3, #1
 800602c:	2b00      	cmp	r3, #0
 800602e:	d004      	beq.n	800603a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	4798      	blx	r3
    return;
 8006038:	e0c6      	b.n	80061c8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	095b      	lsrs	r3, r3, #5
 800603e:	f003 0301 	and.w	r3, r3, #1
 8006042:	2b00      	cmp	r3, #0
 8006044:	d10c      	bne.n	8006060 <HAL_SPI_IRQHandler+0x8c>
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	099b      	lsrs	r3, r3, #6
 800604a:	f003 0301 	and.w	r3, r3, #1
 800604e:	2b00      	cmp	r3, #0
 8006050:	d106      	bne.n	8006060 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	0a1b      	lsrs	r3, r3, #8
 8006056:	f003 0301 	and.w	r3, r3, #1
 800605a:	2b00      	cmp	r3, #0
 800605c:	f000 80b4 	beq.w	80061c8 <HAL_SPI_IRQHandler+0x1f4>
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	095b      	lsrs	r3, r3, #5
 8006064:	f003 0301 	and.w	r3, r3, #1
 8006068:	2b00      	cmp	r3, #0
 800606a:	f000 80ad 	beq.w	80061c8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	099b      	lsrs	r3, r3, #6
 8006072:	f003 0301 	and.w	r3, r3, #1
 8006076:	2b00      	cmp	r3, #0
 8006078:	d023      	beq.n	80060c2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006080:	b2db      	uxtb	r3, r3
 8006082:	2b03      	cmp	r3, #3
 8006084:	d011      	beq.n	80060aa <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800608a:	f043 0204 	orr.w	r2, r3, #4
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006092:	2300      	movs	r3, #0
 8006094:	617b      	str	r3, [r7, #20]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	617b      	str	r3, [r7, #20]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	617b      	str	r3, [r7, #20]
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	e00b      	b.n	80060c2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060aa:	2300      	movs	r3, #0
 80060ac:	613b      	str	r3, [r7, #16]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	613b      	str	r3, [r7, #16]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	613b      	str	r3, [r7, #16]
 80060be:	693b      	ldr	r3, [r7, #16]
        return;
 80060c0:	e082      	b.n	80061c8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	095b      	lsrs	r3, r3, #5
 80060c6:	f003 0301 	and.w	r3, r3, #1
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d014      	beq.n	80060f8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060d2:	f043 0201 	orr.w	r2, r3, #1
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80060da:	2300      	movs	r3, #0
 80060dc:	60fb      	str	r3, [r7, #12]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	60fb      	str	r3, [r7, #12]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060f4:	601a      	str	r2, [r3, #0]
 80060f6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80060f8:	69bb      	ldr	r3, [r7, #24]
 80060fa:	0a1b      	lsrs	r3, r3, #8
 80060fc:	f003 0301 	and.w	r3, r3, #1
 8006100:	2b00      	cmp	r3, #0
 8006102:	d00c      	beq.n	800611e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006108:	f043 0208 	orr.w	r2, r3, #8
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006110:	2300      	movs	r3, #0
 8006112:	60bb      	str	r3, [r7, #8]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	60bb      	str	r3, [r7, #8]
 800611c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006122:	2b00      	cmp	r3, #0
 8006124:	d04f      	beq.n	80061c6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	685a      	ldr	r2, [r3, #4]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006134:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2201      	movs	r2, #1
 800613a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800613e:	69fb      	ldr	r3, [r7, #28]
 8006140:	f003 0302 	and.w	r3, r3, #2
 8006144:	2b00      	cmp	r3, #0
 8006146:	d104      	bne.n	8006152 <HAL_SPI_IRQHandler+0x17e>
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	f003 0301 	and.w	r3, r3, #1
 800614e:	2b00      	cmp	r3, #0
 8006150:	d034      	beq.n	80061bc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	685a      	ldr	r2, [r3, #4]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f022 0203 	bic.w	r2, r2, #3
 8006160:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006166:	2b00      	cmp	r3, #0
 8006168:	d011      	beq.n	800618e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800616e:	4a18      	ldr	r2, [pc, #96]	@ (80061d0 <HAL_SPI_IRQHandler+0x1fc>)
 8006170:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006176:	4618      	mov	r0, r3
 8006178:	f7fd f954 	bl	8003424 <HAL_DMA_Abort_IT>
 800617c:	4603      	mov	r3, r0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d005      	beq.n	800618e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006186:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006192:	2b00      	cmp	r3, #0
 8006194:	d016      	beq.n	80061c4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800619a:	4a0d      	ldr	r2, [pc, #52]	@ (80061d0 <HAL_SPI_IRQHandler+0x1fc>)
 800619c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061a2:	4618      	mov	r0, r3
 80061a4:	f7fd f93e 	bl	8003424 <HAL_DMA_Abort_IT>
 80061a8:	4603      	mov	r3, r0
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00a      	beq.n	80061c4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061b2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 80061ba:	e003      	b.n	80061c4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f000 f809 	bl	80061d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80061c2:	e000      	b.n	80061c6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80061c4:	bf00      	nop
    return;
 80061c6:	bf00      	nop
  }
}
 80061c8:	3720      	adds	r7, #32
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	080061e9 	.word	0x080061e9

080061d4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80061dc:	bf00      	nop
 80061de:	370c      	adds	r7, #12
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061f4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2200      	movs	r2, #0
 8006202:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006204:	68f8      	ldr	r0, [r7, #12]
 8006206:	f7ff ffe5 	bl	80061d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800620a:	bf00      	nop
 800620c:	3710      	adds	r7, #16
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
	...

08006214 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b088      	sub	sp, #32
 8006218:	af00      	add	r7, sp, #0
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	603b      	str	r3, [r7, #0]
 8006220:	4613      	mov	r3, r2
 8006222:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006224:	f7fc fe24 	bl	8002e70 <HAL_GetTick>
 8006228:	4602      	mov	r2, r0
 800622a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800622c:	1a9b      	subs	r3, r3, r2
 800622e:	683a      	ldr	r2, [r7, #0]
 8006230:	4413      	add	r3, r2
 8006232:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006234:	f7fc fe1c 	bl	8002e70 <HAL_GetTick>
 8006238:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800623a:	4b39      	ldr	r3, [pc, #228]	@ (8006320 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	015b      	lsls	r3, r3, #5
 8006240:	0d1b      	lsrs	r3, r3, #20
 8006242:	69fa      	ldr	r2, [r7, #28]
 8006244:	fb02 f303 	mul.w	r3, r2, r3
 8006248:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800624a:	e054      	b.n	80062f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006252:	d050      	beq.n	80062f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006254:	f7fc fe0c 	bl	8002e70 <HAL_GetTick>
 8006258:	4602      	mov	r2, r0
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	1ad3      	subs	r3, r2, r3
 800625e:	69fa      	ldr	r2, [r7, #28]
 8006260:	429a      	cmp	r2, r3
 8006262:	d902      	bls.n	800626a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d13d      	bne.n	80062e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	685a      	ldr	r2, [r3, #4]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006278:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006282:	d111      	bne.n	80062a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800628c:	d004      	beq.n	8006298 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006296:	d107      	bne.n	80062a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80062a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062b0:	d10f      	bne.n	80062d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80062c0:	601a      	str	r2, [r3, #0]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80062d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2201      	movs	r2, #1
 80062d6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2200      	movs	r2, #0
 80062de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80062e2:	2303      	movs	r3, #3
 80062e4:	e017      	b.n	8006316 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d101      	bne.n	80062f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80062ec:	2300      	movs	r3, #0
 80062ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	3b01      	subs	r3, #1
 80062f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	689a      	ldr	r2, [r3, #8]
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	4013      	ands	r3, r2
 8006300:	68ba      	ldr	r2, [r7, #8]
 8006302:	429a      	cmp	r2, r3
 8006304:	bf0c      	ite	eq
 8006306:	2301      	moveq	r3, #1
 8006308:	2300      	movne	r3, #0
 800630a:	b2db      	uxtb	r3, r3
 800630c:	461a      	mov	r2, r3
 800630e:	79fb      	ldrb	r3, [r7, #7]
 8006310:	429a      	cmp	r2, r3
 8006312:	d19b      	bne.n	800624c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006314:	2300      	movs	r3, #0
}
 8006316:	4618      	mov	r0, r3
 8006318:	3720      	adds	r7, #32
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop
 8006320:	20000004 	.word	0x20000004

08006324 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b08a      	sub	sp, #40	@ 0x28
 8006328:	af00      	add	r7, sp, #0
 800632a:	60f8      	str	r0, [r7, #12]
 800632c:	60b9      	str	r1, [r7, #8]
 800632e:	607a      	str	r2, [r7, #4]
 8006330:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006332:	2300      	movs	r3, #0
 8006334:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006336:	f7fc fd9b 	bl	8002e70 <HAL_GetTick>
 800633a:	4602      	mov	r2, r0
 800633c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800633e:	1a9b      	subs	r3, r3, r2
 8006340:	683a      	ldr	r2, [r7, #0]
 8006342:	4413      	add	r3, r2
 8006344:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006346:	f7fc fd93 	bl	8002e70 <HAL_GetTick>
 800634a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	330c      	adds	r3, #12
 8006352:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006354:	4b3d      	ldr	r3, [pc, #244]	@ (800644c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	4613      	mov	r3, r2
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	4413      	add	r3, r2
 800635e:	00da      	lsls	r2, r3, #3
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	0d1b      	lsrs	r3, r3, #20
 8006364:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006366:	fb02 f303 	mul.w	r3, r2, r3
 800636a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800636c:	e060      	b.n	8006430 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006374:	d107      	bne.n	8006386 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d104      	bne.n	8006386 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	b2db      	uxtb	r3, r3
 8006382:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006384:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800638c:	d050      	beq.n	8006430 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800638e:	f7fc fd6f 	bl	8002e70 <HAL_GetTick>
 8006392:	4602      	mov	r2, r0
 8006394:	6a3b      	ldr	r3, [r7, #32]
 8006396:	1ad3      	subs	r3, r2, r3
 8006398:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800639a:	429a      	cmp	r2, r3
 800639c:	d902      	bls.n	80063a4 <SPI_WaitFifoStateUntilTimeout+0x80>
 800639e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d13d      	bne.n	8006420 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	685a      	ldr	r2, [r3, #4]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80063b2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80063bc:	d111      	bne.n	80063e2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063c6:	d004      	beq.n	80063d2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063d0:	d107      	bne.n	80063e2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80063e0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063ea:	d10f      	bne.n	800640c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80063fa:	601a      	str	r2, [r3, #0]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	681a      	ldr	r2, [r3, #0]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800640a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2201      	movs	r2, #1
 8006410:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2200      	movs	r2, #0
 8006418:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800641c:	2303      	movs	r3, #3
 800641e:	e010      	b.n	8006442 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006420:	69bb      	ldr	r3, [r7, #24]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d101      	bne.n	800642a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006426:	2300      	movs	r3, #0
 8006428:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	3b01      	subs	r3, #1
 800642e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	689a      	ldr	r2, [r3, #8]
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	4013      	ands	r3, r2
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	429a      	cmp	r2, r3
 800643e:	d196      	bne.n	800636e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006440:	2300      	movs	r3, #0
}
 8006442:	4618      	mov	r0, r3
 8006444:	3728      	adds	r7, #40	@ 0x28
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	20000004 	.word	0x20000004

08006450 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b088      	sub	sp, #32
 8006454:	af02      	add	r7, sp, #8
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	9300      	str	r3, [sp, #0]
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	2200      	movs	r2, #0
 8006464:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006468:	68f8      	ldr	r0, [r7, #12]
 800646a:	f7ff ff5b 	bl	8006324 <SPI_WaitFifoStateUntilTimeout>
 800646e:	4603      	mov	r3, r0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d007      	beq.n	8006484 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006478:	f043 0220 	orr.w	r2, r3, #32
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006480:	2303      	movs	r3, #3
 8006482:	e046      	b.n	8006512 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006484:	4b25      	ldr	r3, [pc, #148]	@ (800651c <SPI_EndRxTxTransaction+0xcc>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a25      	ldr	r2, [pc, #148]	@ (8006520 <SPI_EndRxTxTransaction+0xd0>)
 800648a:	fba2 2303 	umull	r2, r3, r2, r3
 800648e:	0d5b      	lsrs	r3, r3, #21
 8006490:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006494:	fb02 f303 	mul.w	r3, r2, r3
 8006498:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80064a2:	d112      	bne.n	80064ca <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	9300      	str	r3, [sp, #0]
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	2200      	movs	r2, #0
 80064ac:	2180      	movs	r1, #128	@ 0x80
 80064ae:	68f8      	ldr	r0, [r7, #12]
 80064b0:	f7ff feb0 	bl	8006214 <SPI_WaitFlagStateUntilTimeout>
 80064b4:	4603      	mov	r3, r0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d016      	beq.n	80064e8 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064be:	f043 0220 	orr.w	r2, r3, #32
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80064c6:	2303      	movs	r3, #3
 80064c8:	e023      	b.n	8006512 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d00a      	beq.n	80064e6 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	3b01      	subs	r3, #1
 80064d4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064e0:	2b80      	cmp	r3, #128	@ 0x80
 80064e2:	d0f2      	beq.n	80064ca <SPI_EndRxTxTransaction+0x7a>
 80064e4:	e000      	b.n	80064e8 <SPI_EndRxTxTransaction+0x98>
        break;
 80064e6:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	9300      	str	r3, [sp, #0]
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80064f4:	68f8      	ldr	r0, [r7, #12]
 80064f6:	f7ff ff15 	bl	8006324 <SPI_WaitFifoStateUntilTimeout>
 80064fa:	4603      	mov	r3, r0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d007      	beq.n	8006510 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006504:	f043 0220 	orr.w	r2, r3, #32
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800650c:	2303      	movs	r3, #3
 800650e:	e000      	b.n	8006512 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8006510:	2300      	movs	r3, #0
}
 8006512:	4618      	mov	r0, r3
 8006514:	3718      	adds	r7, #24
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop
 800651c:	20000004 	.word	0x20000004
 8006520:	165e9f81 	.word	0x165e9f81

08006524 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b082      	sub	sp, #8
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d101      	bne.n	8006536 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e0f5      	b.n	8006722 <HAL_TIM_Base_Init+0x1fe>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a7c      	ldr	r2, [pc, #496]	@ (800672c <HAL_TIM_Base_Init+0x208>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d045      	beq.n	80065cc <HAL_TIM_Base_Init+0xa8>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006548:	d040      	beq.n	80065cc <HAL_TIM_Base_Init+0xa8>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a78      	ldr	r2, [pc, #480]	@ (8006730 <HAL_TIM_Base_Init+0x20c>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d03b      	beq.n	80065cc <HAL_TIM_Base_Init+0xa8>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a76      	ldr	r2, [pc, #472]	@ (8006734 <HAL_TIM_Base_Init+0x210>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d036      	beq.n	80065cc <HAL_TIM_Base_Init+0xa8>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a75      	ldr	r2, [pc, #468]	@ (8006738 <HAL_TIM_Base_Init+0x214>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d031      	beq.n	80065cc <HAL_TIM_Base_Init+0xa8>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a73      	ldr	r2, [pc, #460]	@ (800673c <HAL_TIM_Base_Init+0x218>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d02c      	beq.n	80065cc <HAL_TIM_Base_Init+0xa8>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a72      	ldr	r2, [pc, #456]	@ (8006740 <HAL_TIM_Base_Init+0x21c>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d027      	beq.n	80065cc <HAL_TIM_Base_Init+0xa8>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a70      	ldr	r2, [pc, #448]	@ (8006744 <HAL_TIM_Base_Init+0x220>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d022      	beq.n	80065cc <HAL_TIM_Base_Init+0xa8>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a6f      	ldr	r2, [pc, #444]	@ (8006748 <HAL_TIM_Base_Init+0x224>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d01d      	beq.n	80065cc <HAL_TIM_Base_Init+0xa8>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a6d      	ldr	r2, [pc, #436]	@ (800674c <HAL_TIM_Base_Init+0x228>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d018      	beq.n	80065cc <HAL_TIM_Base_Init+0xa8>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a6c      	ldr	r2, [pc, #432]	@ (8006750 <HAL_TIM_Base_Init+0x22c>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d013      	beq.n	80065cc <HAL_TIM_Base_Init+0xa8>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a6a      	ldr	r2, [pc, #424]	@ (8006754 <HAL_TIM_Base_Init+0x230>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d00e      	beq.n	80065cc <HAL_TIM_Base_Init+0xa8>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a69      	ldr	r2, [pc, #420]	@ (8006758 <HAL_TIM_Base_Init+0x234>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d009      	beq.n	80065cc <HAL_TIM_Base_Init+0xa8>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a67      	ldr	r2, [pc, #412]	@ (800675c <HAL_TIM_Base_Init+0x238>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d004      	beq.n	80065cc <HAL_TIM_Base_Init+0xa8>
 80065c2:	f44f 718b 	mov.w	r1, #278	@ 0x116
 80065c6:	4866      	ldr	r0, [pc, #408]	@ (8006760 <HAL_TIM_Base_Init+0x23c>)
 80065c8:	f7fb ffcc 	bl	8002564 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d014      	beq.n	80065fe <HAL_TIM_Base_Init+0xda>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	2b10      	cmp	r3, #16
 80065da:	d010      	beq.n	80065fe <HAL_TIM_Base_Init+0xda>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	2b20      	cmp	r3, #32
 80065e2:	d00c      	beq.n	80065fe <HAL_TIM_Base_Init+0xda>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	2b40      	cmp	r3, #64	@ 0x40
 80065ea:	d008      	beq.n	80065fe <HAL_TIM_Base_Init+0xda>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	2b60      	cmp	r3, #96	@ 0x60
 80065f2:	d004      	beq.n	80065fe <HAL_TIM_Base_Init+0xda>
 80065f4:	f240 1117 	movw	r1, #279	@ 0x117
 80065f8:	4859      	ldr	r0, [pc, #356]	@ (8006760 <HAL_TIM_Base_Init+0x23c>)
 80065fa:	f7fb ffb3 	bl	8002564 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	691b      	ldr	r3, [r3, #16]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d00e      	beq.n	8006624 <HAL_TIM_Base_Init+0x100>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800660e:	d009      	beq.n	8006624 <HAL_TIM_Base_Init+0x100>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	691b      	ldr	r3, [r3, #16]
 8006614:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006618:	d004      	beq.n	8006624 <HAL_TIM_Base_Init+0x100>
 800661a:	f44f 718c 	mov.w	r1, #280	@ 0x118
 800661e:	4850      	ldr	r0, [pc, #320]	@ (8006760 <HAL_TIM_Base_Init+0x23c>)
 8006620:	f7fb ffa0 	bl	8002564 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800662c:	d004      	beq.n	8006638 <HAL_TIM_Base_Init+0x114>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a41      	ldr	r2, [pc, #260]	@ (8006738 <HAL_TIM_Base_Init+0x214>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d107      	bne.n	8006648 <HAL_TIM_Base_Init+0x124>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	2b00      	cmp	r3, #0
 800663e:	bf14      	ite	ne
 8006640:	2301      	movne	r3, #1
 8006642:	2300      	moveq	r3, #0
 8006644:	b2db      	uxtb	r3, r3
 8006646:	e00e      	b.n	8006666 <HAL_TIM_Base_Init+0x142>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d006      	beq.n	800665e <HAL_TIM_Base_Init+0x13a>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006658:	d201      	bcs.n	800665e <HAL_TIM_Base_Init+0x13a>
 800665a:	2301      	movs	r3, #1
 800665c:	e000      	b.n	8006660 <HAL_TIM_Base_Init+0x13c>
 800665e:	2300      	movs	r3, #0
 8006660:	f003 0301 	and.w	r3, r3, #1
 8006664:	b2db      	uxtb	r3, r3
 8006666:	2b00      	cmp	r3, #0
 8006668:	d104      	bne.n	8006674 <HAL_TIM_Base_Init+0x150>
 800666a:	f240 1119 	movw	r1, #281	@ 0x119
 800666e:	483c      	ldr	r0, [pc, #240]	@ (8006760 <HAL_TIM_Base_Init+0x23c>)
 8006670:	f7fb ff78 	bl	8002564 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	699b      	ldr	r3, [r3, #24]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d008      	beq.n	800668e <HAL_TIM_Base_Init+0x16a>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	699b      	ldr	r3, [r3, #24]
 8006680:	2b80      	cmp	r3, #128	@ 0x80
 8006682:	d004      	beq.n	800668e <HAL_TIM_Base_Init+0x16a>
 8006684:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 8006688:	4835      	ldr	r0, [pc, #212]	@ (8006760 <HAL_TIM_Base_Init+0x23c>)
 800668a:	f7fb ff6b 	bl	8002564 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006694:	b2db      	uxtb	r3, r3
 8006696:	2b00      	cmp	r3, #0
 8006698:	d106      	bne.n	80066a8 <HAL_TIM_Base_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f7fc fa76 	bl	8002b94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2202      	movs	r2, #2
 80066ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	3304      	adds	r3, #4
 80066b8:	4619      	mov	r1, r3
 80066ba:	4610      	mov	r0, r2
 80066bc:	f000 ff36 	bl	800752c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2201      	movs	r2, #1
 80066d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2201      	movs	r2, #1
 80066dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2201      	movs	r2, #1
 80066e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2201      	movs	r2, #1
 80066ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2201      	movs	r2, #1
 8006704:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	3708      	adds	r7, #8
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	40010000 	.word	0x40010000
 8006730:	40000400 	.word	0x40000400
 8006734:	40000800 	.word	0x40000800
 8006738:	40000c00 	.word	0x40000c00
 800673c:	40001000 	.word	0x40001000
 8006740:	40001400 	.word	0x40001400
 8006744:	40010400 	.word	0x40010400
 8006748:	40014000 	.word	0x40014000
 800674c:	40014400 	.word	0x40014400
 8006750:	40014800 	.word	0x40014800
 8006754:	40001800 	.word	0x40001800
 8006758:	40001c00 	.word	0x40001c00
 800675c:	40002000 	.word	0x40002000
 8006760:	08010964 	.word	0x08010964

08006764 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b082      	sub	sp, #8
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d101      	bne.n	8006776 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	e0f5      	b.n	8006962 <HAL_TIM_PWM_Init+0x1fe>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a7c      	ldr	r2, [pc, #496]	@ (800696c <HAL_TIM_PWM_Init+0x208>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d045      	beq.n	800680c <HAL_TIM_PWM_Init+0xa8>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006788:	d040      	beq.n	800680c <HAL_TIM_PWM_Init+0xa8>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a78      	ldr	r2, [pc, #480]	@ (8006970 <HAL_TIM_PWM_Init+0x20c>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d03b      	beq.n	800680c <HAL_TIM_PWM_Init+0xa8>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a76      	ldr	r2, [pc, #472]	@ (8006974 <HAL_TIM_PWM_Init+0x210>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d036      	beq.n	800680c <HAL_TIM_PWM_Init+0xa8>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a75      	ldr	r2, [pc, #468]	@ (8006978 <HAL_TIM_PWM_Init+0x214>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d031      	beq.n	800680c <HAL_TIM_PWM_Init+0xa8>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a73      	ldr	r2, [pc, #460]	@ (800697c <HAL_TIM_PWM_Init+0x218>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d02c      	beq.n	800680c <HAL_TIM_PWM_Init+0xa8>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a72      	ldr	r2, [pc, #456]	@ (8006980 <HAL_TIM_PWM_Init+0x21c>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d027      	beq.n	800680c <HAL_TIM_PWM_Init+0xa8>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a70      	ldr	r2, [pc, #448]	@ (8006984 <HAL_TIM_PWM_Init+0x220>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d022      	beq.n	800680c <HAL_TIM_PWM_Init+0xa8>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a6f      	ldr	r2, [pc, #444]	@ (8006988 <HAL_TIM_PWM_Init+0x224>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d01d      	beq.n	800680c <HAL_TIM_PWM_Init+0xa8>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a6d      	ldr	r2, [pc, #436]	@ (800698c <HAL_TIM_PWM_Init+0x228>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d018      	beq.n	800680c <HAL_TIM_PWM_Init+0xa8>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a6c      	ldr	r2, [pc, #432]	@ (8006990 <HAL_TIM_PWM_Init+0x22c>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d013      	beq.n	800680c <HAL_TIM_PWM_Init+0xa8>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a6a      	ldr	r2, [pc, #424]	@ (8006994 <HAL_TIM_PWM_Init+0x230>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d00e      	beq.n	800680c <HAL_TIM_PWM_Init+0xa8>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a69      	ldr	r2, [pc, #420]	@ (8006998 <HAL_TIM_PWM_Init+0x234>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d009      	beq.n	800680c <HAL_TIM_PWM_Init+0xa8>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a67      	ldr	r2, [pc, #412]	@ (800699c <HAL_TIM_PWM_Init+0x238>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d004      	beq.n	800680c <HAL_TIM_PWM_Init+0xa8>
 8006802:	f240 5133 	movw	r1, #1331	@ 0x533
 8006806:	4866      	ldr	r0, [pc, #408]	@ (80069a0 <HAL_TIM_PWM_Init+0x23c>)
 8006808:	f7fb feac 	bl	8002564 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d014      	beq.n	800683e <HAL_TIM_PWM_Init+0xda>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	2b10      	cmp	r3, #16
 800681a:	d010      	beq.n	800683e <HAL_TIM_PWM_Init+0xda>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	2b20      	cmp	r3, #32
 8006822:	d00c      	beq.n	800683e <HAL_TIM_PWM_Init+0xda>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	2b40      	cmp	r3, #64	@ 0x40
 800682a:	d008      	beq.n	800683e <HAL_TIM_PWM_Init+0xda>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	2b60      	cmp	r3, #96	@ 0x60
 8006832:	d004      	beq.n	800683e <HAL_TIM_PWM_Init+0xda>
 8006834:	f240 5134 	movw	r1, #1332	@ 0x534
 8006838:	4859      	ldr	r0, [pc, #356]	@ (80069a0 <HAL_TIM_PWM_Init+0x23c>)
 800683a:	f7fb fe93 	bl	8002564 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	691b      	ldr	r3, [r3, #16]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d00e      	beq.n	8006864 <HAL_TIM_PWM_Init+0x100>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	691b      	ldr	r3, [r3, #16]
 800684a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800684e:	d009      	beq.n	8006864 <HAL_TIM_PWM_Init+0x100>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	691b      	ldr	r3, [r3, #16]
 8006854:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006858:	d004      	beq.n	8006864 <HAL_TIM_PWM_Init+0x100>
 800685a:	f240 5135 	movw	r1, #1333	@ 0x535
 800685e:	4850      	ldr	r0, [pc, #320]	@ (80069a0 <HAL_TIM_PWM_Init+0x23c>)
 8006860:	f7fb fe80 	bl	8002564 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800686c:	d004      	beq.n	8006878 <HAL_TIM_PWM_Init+0x114>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a41      	ldr	r2, [pc, #260]	@ (8006978 <HAL_TIM_PWM_Init+0x214>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d107      	bne.n	8006888 <HAL_TIM_PWM_Init+0x124>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	2b00      	cmp	r3, #0
 800687e:	bf14      	ite	ne
 8006880:	2301      	movne	r3, #1
 8006882:	2300      	moveq	r3, #0
 8006884:	b2db      	uxtb	r3, r3
 8006886:	e00e      	b.n	80068a6 <HAL_TIM_PWM_Init+0x142>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	68db      	ldr	r3, [r3, #12]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d006      	beq.n	800689e <HAL_TIM_PWM_Init+0x13a>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006898:	d201      	bcs.n	800689e <HAL_TIM_PWM_Init+0x13a>
 800689a:	2301      	movs	r3, #1
 800689c:	e000      	b.n	80068a0 <HAL_TIM_PWM_Init+0x13c>
 800689e:	2300      	movs	r3, #0
 80068a0:	f003 0301 	and.w	r3, r3, #1
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d104      	bne.n	80068b4 <HAL_TIM_PWM_Init+0x150>
 80068aa:	f240 5136 	movw	r1, #1334	@ 0x536
 80068ae:	483c      	ldr	r0, [pc, #240]	@ (80069a0 <HAL_TIM_PWM_Init+0x23c>)
 80068b0:	f7fb fe58 	bl	8002564 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	699b      	ldr	r3, [r3, #24]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d008      	beq.n	80068ce <HAL_TIM_PWM_Init+0x16a>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	699b      	ldr	r3, [r3, #24]
 80068c0:	2b80      	cmp	r3, #128	@ 0x80
 80068c2:	d004      	beq.n	80068ce <HAL_TIM_PWM_Init+0x16a>
 80068c4:	f240 5137 	movw	r1, #1335	@ 0x537
 80068c8:	4835      	ldr	r0, [pc, #212]	@ (80069a0 <HAL_TIM_PWM_Init+0x23c>)
 80068ca:	f7fb fe4b 	bl	8002564 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d106      	bne.n	80068e8 <HAL_TIM_PWM_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2200      	movs	r2, #0
 80068de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 f85e 	bl	80069a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2202      	movs	r2, #2
 80068ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	3304      	adds	r3, #4
 80068f8:	4619      	mov	r1, r3
 80068fa:	4610      	mov	r0, r2
 80068fc:	f000 fe16 	bl	800752c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2201      	movs	r2, #1
 800690c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2201      	movs	r2, #1
 8006914:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2201      	movs	r2, #1
 800691c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2201      	movs	r2, #1
 8006924:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2201      	movs	r2, #1
 800692c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2201      	movs	r2, #1
 8006934:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2201      	movs	r2, #1
 800693c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2201      	movs	r2, #1
 8006944:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2201      	movs	r2, #1
 800694c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2201      	movs	r2, #1
 8006954:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2201      	movs	r2, #1
 800695c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006960:	2300      	movs	r3, #0
}
 8006962:	4618      	mov	r0, r3
 8006964:	3708      	adds	r7, #8
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
 800696a:	bf00      	nop
 800696c:	40010000 	.word	0x40010000
 8006970:	40000400 	.word	0x40000400
 8006974:	40000800 	.word	0x40000800
 8006978:	40000c00 	.word	0x40000c00
 800697c:	40001000 	.word	0x40001000
 8006980:	40001400 	.word	0x40001400
 8006984:	40010400 	.word	0x40010400
 8006988:	40014000 	.word	0x40014000
 800698c:	40014400 	.word	0x40014400
 8006990:	40014800 	.word	0x40014800
 8006994:	40001800 	.word	0x40001800
 8006998:	40001c00 	.word	0x40001c00
 800699c:	40002000 	.word	0x40002000
 80069a0:	08010964 	.word	0x08010964

080069a4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b083      	sub	sp, #12
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80069ac:	bf00      	nop
 80069ae:	370c      	adds	r7, #12
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr

080069b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b086      	sub	sp, #24
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	60b9      	str	r1, [r7, #8]
 80069c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069c4:	2300      	movs	r3, #0
 80069c6:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d016      	beq.n	80069fc <HAL_TIM_PWM_ConfigChannel+0x44>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2b04      	cmp	r3, #4
 80069d2:	d013      	beq.n	80069fc <HAL_TIM_PWM_ConfigChannel+0x44>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2b08      	cmp	r3, #8
 80069d8:	d010      	beq.n	80069fc <HAL_TIM_PWM_ConfigChannel+0x44>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2b0c      	cmp	r3, #12
 80069de:	d00d      	beq.n	80069fc <HAL_TIM_PWM_ConfigChannel+0x44>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2b10      	cmp	r3, #16
 80069e4:	d00a      	beq.n	80069fc <HAL_TIM_PWM_ConfigChannel+0x44>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2b14      	cmp	r3, #20
 80069ea:	d007      	beq.n	80069fc <HAL_TIM_PWM_ConfigChannel+0x44>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2b3c      	cmp	r3, #60	@ 0x3c
 80069f0:	d004      	beq.n	80069fc <HAL_TIM_PWM_ConfigChannel+0x44>
 80069f2:	f241 01b3 	movw	r1, #4275	@ 0x10b3
 80069f6:	4895      	ldr	r0, [pc, #596]	@ (8006c4c <HAL_TIM_PWM_ConfigChannel+0x294>)
 80069f8:	f7fb fdb4 	bl	8002564 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	2b60      	cmp	r3, #96	@ 0x60
 8006a02:	d01c      	beq.n	8006a3e <HAL_TIM_PWM_ConfigChannel+0x86>
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	2b70      	cmp	r3, #112	@ 0x70
 8006a0a:	d018      	beq.n	8006a3e <HAL_TIM_PWM_ConfigChannel+0x86>
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a8f      	ldr	r2, [pc, #572]	@ (8006c50 <HAL_TIM_PWM_ConfigChannel+0x298>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d013      	beq.n	8006a3e <HAL_TIM_PWM_ConfigChannel+0x86>
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a8e      	ldr	r2, [pc, #568]	@ (8006c54 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d00e      	beq.n	8006a3e <HAL_TIM_PWM_ConfigChannel+0x86>
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a8c      	ldr	r2, [pc, #560]	@ (8006c58 <HAL_TIM_PWM_ConfigChannel+0x2a0>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d009      	beq.n	8006a3e <HAL_TIM_PWM_ConfigChannel+0x86>
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a8b      	ldr	r2, [pc, #556]	@ (8006c5c <HAL_TIM_PWM_ConfigChannel+0x2a4>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d004      	beq.n	8006a3e <HAL_TIM_PWM_ConfigChannel+0x86>
 8006a34:	f241 01b4 	movw	r1, #4276	@ 0x10b4
 8006a38:	4884      	ldr	r0, [pc, #528]	@ (8006c4c <HAL_TIM_PWM_ConfigChannel+0x294>)
 8006a3a:	f7fb fd93 	bl	8002564 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d008      	beq.n	8006a58 <HAL_TIM_PWM_ConfigChannel+0xa0>
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	2b02      	cmp	r3, #2
 8006a4c:	d004      	beq.n	8006a58 <HAL_TIM_PWM_ConfigChannel+0xa0>
 8006a4e:	f241 01b5 	movw	r1, #4277	@ 0x10b5
 8006a52:	487e      	ldr	r0, [pc, #504]	@ (8006c4c <HAL_TIM_PWM_ConfigChannel+0x294>)
 8006a54:	f7fb fd86 	bl	8002564 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	691b      	ldr	r3, [r3, #16]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d008      	beq.n	8006a72 <HAL_TIM_PWM_ConfigChannel+0xba>
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	691b      	ldr	r3, [r3, #16]
 8006a64:	2b04      	cmp	r3, #4
 8006a66:	d004      	beq.n	8006a72 <HAL_TIM_PWM_ConfigChannel+0xba>
 8006a68:	f241 01b6 	movw	r1, #4278	@ 0x10b6
 8006a6c:	4877      	ldr	r0, [pc, #476]	@ (8006c4c <HAL_TIM_PWM_ConfigChannel+0x294>)
 8006a6e:	f7fb fd79 	bl	8002564 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d101      	bne.n	8006a80 <HAL_TIM_PWM_ConfigChannel+0xc8>
 8006a7c:	2302      	movs	r3, #2
 8006a7e:	e1f3      	b.n	8006e68 <HAL_TIM_PWM_ConfigChannel+0x4b0>
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2b14      	cmp	r3, #20
 8006a8c:	f200 81e4 	bhi.w	8006e58 <HAL_TIM_PWM_ConfigChannel+0x4a0>
 8006a90:	a201      	add	r2, pc, #4	@ (adr r2, 8006a98 <HAL_TIM_PWM_ConfigChannel+0xe0>)
 8006a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a96:	bf00      	nop
 8006a98:	08006aed 	.word	0x08006aed
 8006a9c:	08006e59 	.word	0x08006e59
 8006aa0:	08006e59 	.word	0x08006e59
 8006aa4:	08006e59 	.word	0x08006e59
 8006aa8:	08006baf 	.word	0x08006baf
 8006aac:	08006e59 	.word	0x08006e59
 8006ab0:	08006e59 	.word	0x08006e59
 8006ab4:	08006e59 	.word	0x08006e59
 8006ab8:	08006c8d 	.word	0x08006c8d
 8006abc:	08006e59 	.word	0x08006e59
 8006ac0:	08006e59 	.word	0x08006e59
 8006ac4:	08006e59 	.word	0x08006e59
 8006ac8:	08006d13 	.word	0x08006d13
 8006acc:	08006e59 	.word	0x08006e59
 8006ad0:	08006e59 	.word	0x08006e59
 8006ad4:	08006e59 	.word	0x08006e59
 8006ad8:	08006d9b 	.word	0x08006d9b
 8006adc:	08006e59 	.word	0x08006e59
 8006ae0:	08006e59 	.word	0x08006e59
 8006ae4:	08006e59 	.word	0x08006e59
 8006ae8:	08006df9 	.word	0x08006df9
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a5b      	ldr	r2, [pc, #364]	@ (8006c60 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d03b      	beq.n	8006b6e <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006afe:	d036      	beq.n	8006b6e <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a57      	ldr	r2, [pc, #348]	@ (8006c64 <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d031      	beq.n	8006b6e <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a56      	ldr	r2, [pc, #344]	@ (8006c68 <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d02c      	beq.n	8006b6e <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a54      	ldr	r2, [pc, #336]	@ (8006c6c <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d027      	beq.n	8006b6e <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a53      	ldr	r2, [pc, #332]	@ (8006c70 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d022      	beq.n	8006b6e <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a51      	ldr	r2, [pc, #324]	@ (8006c74 <HAL_TIM_PWM_ConfigChannel+0x2bc>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d01d      	beq.n	8006b6e <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a50      	ldr	r2, [pc, #320]	@ (8006c78 <HAL_TIM_PWM_ConfigChannel+0x2c0>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d018      	beq.n	8006b6e <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a4e      	ldr	r2, [pc, #312]	@ (8006c7c <HAL_TIM_PWM_ConfigChannel+0x2c4>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d013      	beq.n	8006b6e <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a4d      	ldr	r2, [pc, #308]	@ (8006c80 <HAL_TIM_PWM_ConfigChannel+0x2c8>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d00e      	beq.n	8006b6e <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a4b      	ldr	r2, [pc, #300]	@ (8006c84 <HAL_TIM_PWM_ConfigChannel+0x2cc>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d009      	beq.n	8006b6e <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a4a      	ldr	r2, [pc, #296]	@ (8006c88 <HAL_TIM_PWM_ConfigChannel+0x2d0>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d004      	beq.n	8006b6e <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8006b64:	f44f 5186 	mov.w	r1, #4288	@ 0x10c0
 8006b68:	4838      	ldr	r0, [pc, #224]	@ (8006c4c <HAL_TIM_PWM_ConfigChannel+0x294>)
 8006b6a:	f7fb fcfb 	bl	8002564 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	68b9      	ldr	r1, [r7, #8]
 8006b74:	4618      	mov	r0, r3
 8006b76:	f000 fd85 	bl	8007684 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	699a      	ldr	r2, [r3, #24]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f042 0208 	orr.w	r2, r2, #8
 8006b88:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	699a      	ldr	r2, [r3, #24]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f022 0204 	bic.w	r2, r2, #4
 8006b98:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	6999      	ldr	r1, [r3, #24]
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	691a      	ldr	r2, [r3, #16]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	430a      	orrs	r2, r1
 8006baa:	619a      	str	r2, [r3, #24]
      break;
 8006bac:	e157      	b.n	8006e5e <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a2b      	ldr	r2, [pc, #172]	@ (8006c60 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d027      	beq.n	8006c08 <HAL_TIM_PWM_ConfigChannel+0x250>
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bc0:	d022      	beq.n	8006c08 <HAL_TIM_PWM_ConfigChannel+0x250>
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a27      	ldr	r2, [pc, #156]	@ (8006c64 <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d01d      	beq.n	8006c08 <HAL_TIM_PWM_ConfigChannel+0x250>
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a25      	ldr	r2, [pc, #148]	@ (8006c68 <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d018      	beq.n	8006c08 <HAL_TIM_PWM_ConfigChannel+0x250>
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a24      	ldr	r2, [pc, #144]	@ (8006c6c <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d013      	beq.n	8006c08 <HAL_TIM_PWM_ConfigChannel+0x250>
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a22      	ldr	r2, [pc, #136]	@ (8006c70 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d00e      	beq.n	8006c08 <HAL_TIM_PWM_ConfigChannel+0x250>
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a21      	ldr	r2, [pc, #132]	@ (8006c74 <HAL_TIM_PWM_ConfigChannel+0x2bc>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d009      	beq.n	8006c08 <HAL_TIM_PWM_ConfigChannel+0x250>
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a21      	ldr	r2, [pc, #132]	@ (8006c80 <HAL_TIM_PWM_ConfigChannel+0x2c8>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d004      	beq.n	8006c08 <HAL_TIM_PWM_ConfigChannel+0x250>
 8006bfe:	f241 01d1 	movw	r1, #4305	@ 0x10d1
 8006c02:	4812      	ldr	r0, [pc, #72]	@ (8006c4c <HAL_TIM_PWM_ConfigChannel+0x294>)
 8006c04:	f7fb fcae 	bl	8002564 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	68b9      	ldr	r1, [r7, #8]
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f000 fdd4 	bl	80077bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	699a      	ldr	r2, [r3, #24]
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	699a      	ldr	r2, [r3, #24]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	6999      	ldr	r1, [r3, #24]
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	691b      	ldr	r3, [r3, #16]
 8006c3e:	021a      	lsls	r2, r3, #8
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	430a      	orrs	r2, r1
 8006c46:	619a      	str	r2, [r3, #24]
      break;
 8006c48:	e109      	b.n	8006e5e <HAL_TIM_PWM_ConfigChannel+0x4a6>
 8006c4a:	bf00      	nop
 8006c4c:	08010964 	.word	0x08010964
 8006c50:	00010040 	.word	0x00010040
 8006c54:	00010050 	.word	0x00010050
 8006c58:	00010060 	.word	0x00010060
 8006c5c:	00010070 	.word	0x00010070
 8006c60:	40010000 	.word	0x40010000
 8006c64:	40000400 	.word	0x40000400
 8006c68:	40000800 	.word	0x40000800
 8006c6c:	40000c00 	.word	0x40000c00
 8006c70:	40010400 	.word	0x40010400
 8006c74:	40014000 	.word	0x40014000
 8006c78:	40014400 	.word	0x40014400
 8006c7c:	40014800 	.word	0x40014800
 8006c80:	40001800 	.word	0x40001800
 8006c84:	40001c00 	.word	0x40001c00
 8006c88:	40002000 	.word	0x40002000
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a77      	ldr	r2, [pc, #476]	@ (8006e70 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d01d      	beq.n	8006cd2 <HAL_TIM_PWM_ConfigChannel+0x31a>
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c9e:	d018      	beq.n	8006cd2 <HAL_TIM_PWM_ConfigChannel+0x31a>
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a73      	ldr	r2, [pc, #460]	@ (8006e74 <HAL_TIM_PWM_ConfigChannel+0x4bc>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d013      	beq.n	8006cd2 <HAL_TIM_PWM_ConfigChannel+0x31a>
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a72      	ldr	r2, [pc, #456]	@ (8006e78 <HAL_TIM_PWM_ConfigChannel+0x4c0>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d00e      	beq.n	8006cd2 <HAL_TIM_PWM_ConfigChannel+0x31a>
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a70      	ldr	r2, [pc, #448]	@ (8006e7c <HAL_TIM_PWM_ConfigChannel+0x4c4>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d009      	beq.n	8006cd2 <HAL_TIM_PWM_ConfigChannel+0x31a>
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a6f      	ldr	r2, [pc, #444]	@ (8006e80 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d004      	beq.n	8006cd2 <HAL_TIM_PWM_ConfigChannel+0x31a>
 8006cc8:	f241 01e2 	movw	r1, #4322	@ 0x10e2
 8006ccc:	486d      	ldr	r0, [pc, #436]	@ (8006e84 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 8006cce:	f7fb fc49 	bl	8002564 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	68b9      	ldr	r1, [r7, #8]
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f000 fe0f 	bl	80078fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	69da      	ldr	r2, [r3, #28]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f042 0208 	orr.w	r2, r2, #8
 8006cec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	69da      	ldr	r2, [r3, #28]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f022 0204 	bic.w	r2, r2, #4
 8006cfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	69d9      	ldr	r1, [r3, #28]
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	691a      	ldr	r2, [r3, #16]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	430a      	orrs	r2, r1
 8006d0e:	61da      	str	r2, [r3, #28]
      break;
 8006d10:	e0a5      	b.n	8006e5e <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a56      	ldr	r2, [pc, #344]	@ (8006e70 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d01d      	beq.n	8006d58 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d24:	d018      	beq.n	8006d58 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a52      	ldr	r2, [pc, #328]	@ (8006e74 <HAL_TIM_PWM_ConfigChannel+0x4bc>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d013      	beq.n	8006d58 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a50      	ldr	r2, [pc, #320]	@ (8006e78 <HAL_TIM_PWM_ConfigChannel+0x4c0>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d00e      	beq.n	8006d58 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a4f      	ldr	r2, [pc, #316]	@ (8006e7c <HAL_TIM_PWM_ConfigChannel+0x4c4>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d009      	beq.n	8006d58 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a4d      	ldr	r2, [pc, #308]	@ (8006e80 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d004      	beq.n	8006d58 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8006d4e:	f241 01f3 	movw	r1, #4339	@ 0x10f3
 8006d52:	484c      	ldr	r0, [pc, #304]	@ (8006e84 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 8006d54:	f7fb fc06 	bl	8002564 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	68b9      	ldr	r1, [r7, #8]
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f000 fe6c 	bl	8007a3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	69da      	ldr	r2, [r3, #28]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006d72:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	69da      	ldr	r2, [r3, #28]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d82:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	69d9      	ldr	r1, [r3, #28]
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	691b      	ldr	r3, [r3, #16]
 8006d8e:	021a      	lsls	r2, r3, #8
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	430a      	orrs	r2, r1
 8006d96:	61da      	str	r2, [r3, #28]
      break;
 8006d98:	e061      	b.n	8006e5e <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a34      	ldr	r2, [pc, #208]	@ (8006e70 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d009      	beq.n	8006db8 <HAL_TIM_PWM_ConfigChannel+0x400>
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a35      	ldr	r2, [pc, #212]	@ (8006e80 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d004      	beq.n	8006db8 <HAL_TIM_PWM_ConfigChannel+0x400>
 8006dae:	f241 1104 	movw	r1, #4356	@ 0x1104
 8006db2:	4834      	ldr	r0, [pc, #208]	@ (8006e84 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 8006db4:	f7fb fbd6 	bl	8002564 <assert_failed>

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	68b9      	ldr	r1, [r7, #8]
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f000 fea2 	bl	8007b08 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f042 0208 	orr.w	r2, r2, #8
 8006dd2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f022 0204 	bic.w	r2, r2, #4
 8006de2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	691a      	ldr	r2, [r3, #16]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	430a      	orrs	r2, r1
 8006df4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006df6:	e032      	b.n	8006e5e <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a1c      	ldr	r2, [pc, #112]	@ (8006e70 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d009      	beq.n	8006e16 <HAL_TIM_PWM_ConfigChannel+0x45e>
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a1e      	ldr	r2, [pc, #120]	@ (8006e80 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d004      	beq.n	8006e16 <HAL_TIM_PWM_ConfigChannel+0x45e>
 8006e0c:	f241 1115 	movw	r1, #4373	@ 0x1115
 8006e10:	481c      	ldr	r0, [pc, #112]	@ (8006e84 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 8006e12:	f7fb fba7 	bl	8002564 <assert_failed>

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	68b9      	ldr	r1, [r7, #8]
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f000 fec5 	bl	8007bac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006e30:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e40:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	691b      	ldr	r3, [r3, #16]
 8006e4c:	021a      	lsls	r2, r3, #8
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	430a      	orrs	r2, r1
 8006e54:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006e56:	e002      	b.n	8006e5e <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    default:
      status = HAL_ERROR;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	75fb      	strb	r3, [r7, #23]
      break;
 8006e5c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2200      	movs	r2, #0
 8006e62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006e66:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3718      	adds	r7, #24
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	40010000 	.word	0x40010000
 8006e74:	40000400 	.word	0x40000400
 8006e78:	40000800 	.word	0x40000800
 8006e7c:	40000c00 	.word	0x40000c00
 8006e80:	40010400 	.word	0x40010400
 8006e84:	08010964 	.word	0x08010964

08006e88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b084      	sub	sp, #16
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e92:	2300      	movs	r3, #0
 8006e94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d101      	bne.n	8006ea4 <HAL_TIM_ConfigClockSource+0x1c>
 8006ea0:	2302      	movs	r3, #2
 8006ea2:	e332      	b.n	800750a <HAL_TIM_ConfigClockSource+0x682>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2202      	movs	r2, #2
 8006eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ebc:	d029      	beq.n	8006f12 <HAL_TIM_ConfigClockSource+0x8a>
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	2b70      	cmp	r3, #112	@ 0x70
 8006ec4:	d025      	beq.n	8006f12 <HAL_TIM_ConfigClockSource+0x8a>
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ece:	d020      	beq.n	8006f12 <HAL_TIM_ConfigClockSource+0x8a>
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	2b40      	cmp	r3, #64	@ 0x40
 8006ed6:	d01c      	beq.n	8006f12 <HAL_TIM_ConfigClockSource+0x8a>
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	2b50      	cmp	r3, #80	@ 0x50
 8006ede:	d018      	beq.n	8006f12 <HAL_TIM_ConfigClockSource+0x8a>
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	2b60      	cmp	r3, #96	@ 0x60
 8006ee6:	d014      	beq.n	8006f12 <HAL_TIM_ConfigClockSource+0x8a>
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d010      	beq.n	8006f12 <HAL_TIM_ConfigClockSource+0x8a>
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	2b10      	cmp	r3, #16
 8006ef6:	d00c      	beq.n	8006f12 <HAL_TIM_ConfigClockSource+0x8a>
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	2b20      	cmp	r3, #32
 8006efe:	d008      	beq.n	8006f12 <HAL_TIM_ConfigClockSource+0x8a>
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	2b30      	cmp	r3, #48	@ 0x30
 8006f06:	d004      	beq.n	8006f12 <HAL_TIM_ConfigClockSource+0x8a>
 8006f08:	f241 5151 	movw	r1, #5457	@ 0x1551
 8006f0c:	4893      	ldr	r0, [pc, #588]	@ (800715c <HAL_TIM_ConfigClockSource+0x2d4>)
 8006f0e:	f7fb fb29 	bl	8002564 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f1a:	68ba      	ldr	r2, [r7, #8]
 8006f1c:	4b90      	ldr	r3, [pc, #576]	@ (8007160 <HAL_TIM_ConfigClockSource+0x2d8>)
 8006f1e:	4013      	ands	r3, r2
 8006f20:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006f28:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	68ba      	ldr	r2, [r7, #8]
 8006f30:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f3a:	f000 812d 	beq.w	8007198 <HAL_TIM_ConfigClockSource+0x310>
 8006f3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f42:	f200 82d5 	bhi.w	80074f0 <HAL_TIM_ConfigClockSource+0x668>
 8006f46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f4a:	d02e      	beq.n	8006faa <HAL_TIM_ConfigClockSource+0x122>
 8006f4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f50:	f200 82ce 	bhi.w	80074f0 <HAL_TIM_ConfigClockSource+0x668>
 8006f54:	2b70      	cmp	r3, #112	@ 0x70
 8006f56:	f000 8082 	beq.w	800705e <HAL_TIM_ConfigClockSource+0x1d6>
 8006f5a:	2b70      	cmp	r3, #112	@ 0x70
 8006f5c:	f200 82c8 	bhi.w	80074f0 <HAL_TIM_ConfigClockSource+0x668>
 8006f60:	2b60      	cmp	r3, #96	@ 0x60
 8006f62:	f000 81e0 	beq.w	8007326 <HAL_TIM_ConfigClockSource+0x49e>
 8006f66:	2b60      	cmp	r3, #96	@ 0x60
 8006f68:	f200 82c2 	bhi.w	80074f0 <HAL_TIM_ConfigClockSource+0x668>
 8006f6c:	2b50      	cmp	r3, #80	@ 0x50
 8006f6e:	f000 8184 	beq.w	800727a <HAL_TIM_ConfigClockSource+0x3f2>
 8006f72:	2b50      	cmp	r3, #80	@ 0x50
 8006f74:	f200 82bc 	bhi.w	80074f0 <HAL_TIM_ConfigClockSource+0x668>
 8006f78:	2b40      	cmp	r3, #64	@ 0x40
 8006f7a:	f000 8237 	beq.w	80073ec <HAL_TIM_ConfigClockSource+0x564>
 8006f7e:	2b40      	cmp	r3, #64	@ 0x40
 8006f80:	f200 82b6 	bhi.w	80074f0 <HAL_TIM_ConfigClockSource+0x668>
 8006f84:	2b30      	cmp	r3, #48	@ 0x30
 8006f86:	f000 8287 	beq.w	8007498 <HAL_TIM_ConfigClockSource+0x610>
 8006f8a:	2b30      	cmp	r3, #48	@ 0x30
 8006f8c:	f200 82b0 	bhi.w	80074f0 <HAL_TIM_ConfigClockSource+0x668>
 8006f90:	2b20      	cmp	r3, #32
 8006f92:	f000 8281 	beq.w	8007498 <HAL_TIM_ConfigClockSource+0x610>
 8006f96:	2b20      	cmp	r3, #32
 8006f98:	f200 82aa 	bhi.w	80074f0 <HAL_TIM_ConfigClockSource+0x668>
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	f000 827b 	beq.w	8007498 <HAL_TIM_ConfigClockSource+0x610>
 8006fa2:	2b10      	cmp	r3, #16
 8006fa4:	f000 8278 	beq.w	8007498 <HAL_TIM_ConfigClockSource+0x610>
 8006fa8:	e2a2      	b.n	80074f0 <HAL_TIM_ConfigClockSource+0x668>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a6d      	ldr	r2, [pc, #436]	@ (8007164 <HAL_TIM_ConfigClockSource+0x2dc>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	f000 82a0 	beq.w	80074f6 <HAL_TIM_ConfigClockSource+0x66e>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fbe:	f000 829a 	beq.w	80074f6 <HAL_TIM_ConfigClockSource+0x66e>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a68      	ldr	r2, [pc, #416]	@ (8007168 <HAL_TIM_ConfigClockSource+0x2e0>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	f000 8294 	beq.w	80074f6 <HAL_TIM_ConfigClockSource+0x66e>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a66      	ldr	r2, [pc, #408]	@ (800716c <HAL_TIM_ConfigClockSource+0x2e4>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	f000 828e 	beq.w	80074f6 <HAL_TIM_ConfigClockSource+0x66e>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a64      	ldr	r2, [pc, #400]	@ (8007170 <HAL_TIM_ConfigClockSource+0x2e8>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	f000 8288 	beq.w	80074f6 <HAL_TIM_ConfigClockSource+0x66e>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a62      	ldr	r2, [pc, #392]	@ (8007174 <HAL_TIM_ConfigClockSource+0x2ec>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	f000 8282 	beq.w	80074f6 <HAL_TIM_ConfigClockSource+0x66e>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a60      	ldr	r2, [pc, #384]	@ (8007178 <HAL_TIM_ConfigClockSource+0x2f0>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	f000 827c 	beq.w	80074f6 <HAL_TIM_ConfigClockSource+0x66e>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a5e      	ldr	r2, [pc, #376]	@ (800717c <HAL_TIM_ConfigClockSource+0x2f4>)
 8007004:	4293      	cmp	r3, r2
 8007006:	f000 8276 	beq.w	80074f6 <HAL_TIM_ConfigClockSource+0x66e>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a5c      	ldr	r2, [pc, #368]	@ (8007180 <HAL_TIM_ConfigClockSource+0x2f8>)
 8007010:	4293      	cmp	r3, r2
 8007012:	f000 8270 	beq.w	80074f6 <HAL_TIM_ConfigClockSource+0x66e>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a5a      	ldr	r2, [pc, #360]	@ (8007184 <HAL_TIM_ConfigClockSource+0x2fc>)
 800701c:	4293      	cmp	r3, r2
 800701e:	f000 826a 	beq.w	80074f6 <HAL_TIM_ConfigClockSource+0x66e>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a58      	ldr	r2, [pc, #352]	@ (8007188 <HAL_TIM_ConfigClockSource+0x300>)
 8007028:	4293      	cmp	r3, r2
 800702a:	f000 8264 	beq.w	80074f6 <HAL_TIM_ConfigClockSource+0x66e>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a56      	ldr	r2, [pc, #344]	@ (800718c <HAL_TIM_ConfigClockSource+0x304>)
 8007034:	4293      	cmp	r3, r2
 8007036:	f000 825e 	beq.w	80074f6 <HAL_TIM_ConfigClockSource+0x66e>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a54      	ldr	r2, [pc, #336]	@ (8007190 <HAL_TIM_ConfigClockSource+0x308>)
 8007040:	4293      	cmp	r3, r2
 8007042:	f000 8258 	beq.w	80074f6 <HAL_TIM_ConfigClockSource+0x66e>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a52      	ldr	r2, [pc, #328]	@ (8007194 <HAL_TIM_ConfigClockSource+0x30c>)
 800704c:	4293      	cmp	r3, r2
 800704e:	f000 8252 	beq.w	80074f6 <HAL_TIM_ConfigClockSource+0x66e>
 8007052:	f241 515d 	movw	r1, #5469	@ 0x155d
 8007056:	4841      	ldr	r0, [pc, #260]	@ (800715c <HAL_TIM_ConfigClockSource+0x2d4>)
 8007058:	f7fb fa84 	bl	8002564 <assert_failed>
      break;
 800705c:	e24b      	b.n	80074f6 <HAL_TIM_ConfigClockSource+0x66e>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a40      	ldr	r2, [pc, #256]	@ (8007164 <HAL_TIM_ConfigClockSource+0x2dc>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d027      	beq.n	80070b8 <HAL_TIM_ConfigClockSource+0x230>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007070:	d022      	beq.n	80070b8 <HAL_TIM_ConfigClockSource+0x230>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a3c      	ldr	r2, [pc, #240]	@ (8007168 <HAL_TIM_ConfigClockSource+0x2e0>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d01d      	beq.n	80070b8 <HAL_TIM_ConfigClockSource+0x230>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a3a      	ldr	r2, [pc, #232]	@ (800716c <HAL_TIM_ConfigClockSource+0x2e4>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d018      	beq.n	80070b8 <HAL_TIM_ConfigClockSource+0x230>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a39      	ldr	r2, [pc, #228]	@ (8007170 <HAL_TIM_ConfigClockSource+0x2e8>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d013      	beq.n	80070b8 <HAL_TIM_ConfigClockSource+0x230>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a39      	ldr	r2, [pc, #228]	@ (800717c <HAL_TIM_ConfigClockSource+0x2f4>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d00e      	beq.n	80070b8 <HAL_TIM_ConfigClockSource+0x230>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a38      	ldr	r2, [pc, #224]	@ (8007180 <HAL_TIM_ConfigClockSource+0x2f8>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d009      	beq.n	80070b8 <HAL_TIM_ConfigClockSource+0x230>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a38      	ldr	r2, [pc, #224]	@ (800718c <HAL_TIM_ConfigClockSource+0x304>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d004      	beq.n	80070b8 <HAL_TIM_ConfigClockSource+0x230>
 80070ae:	f241 5164 	movw	r1, #5476	@ 0x1564
 80070b2:	482a      	ldr	r0, [pc, #168]	@ (800715c <HAL_TIM_ConfigClockSource+0x2d4>)
 80070b4:	f7fb fa56 	bl	8002564 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d013      	beq.n	80070e8 <HAL_TIM_ConfigClockSource+0x260>
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070c8:	d00e      	beq.n	80070e8 <HAL_TIM_ConfigClockSource+0x260>
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070d2:	d009      	beq.n	80070e8 <HAL_TIM_ConfigClockSource+0x260>
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80070dc:	d004      	beq.n	80070e8 <HAL_TIM_ConfigClockSource+0x260>
 80070de:	f241 5167 	movw	r1, #5479	@ 0x1567
 80070e2:	481e      	ldr	r0, [pc, #120]	@ (800715c <HAL_TIM_ConfigClockSource+0x2d4>)
 80070e4:	f7fb fa3e 	bl	8002564 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80070f0:	d014      	beq.n	800711c <HAL_TIM_ConfigClockSource+0x294>
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d010      	beq.n	800711c <HAL_TIM_ConfigClockSource+0x294>
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d00c      	beq.n	800711c <HAL_TIM_ConfigClockSource+0x294>
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	2b02      	cmp	r3, #2
 8007108:	d008      	beq.n	800711c <HAL_TIM_ConfigClockSource+0x294>
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	2b0a      	cmp	r3, #10
 8007110:	d004      	beq.n	800711c <HAL_TIM_ConfigClockSource+0x294>
 8007112:	f241 5168 	movw	r1, #5480	@ 0x1568
 8007116:	4811      	ldr	r0, [pc, #68]	@ (800715c <HAL_TIM_ConfigClockSource+0x2d4>)
 8007118:	f7fb fa24 	bl	8002564 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	68db      	ldr	r3, [r3, #12]
 8007120:	2b0f      	cmp	r3, #15
 8007122:	d904      	bls.n	800712e <HAL_TIM_ConfigClockSource+0x2a6>
 8007124:	f241 5169 	movw	r1, #5481	@ 0x1569
 8007128:	480c      	ldr	r0, [pc, #48]	@ (800715c <HAL_TIM_ConfigClockSource+0x2d4>)
 800712a:	f7fb fa1b 	bl	8002564 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800713e:	f000 fe03 	bl	8007d48 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007150:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	68ba      	ldr	r2, [r7, #8]
 8007158:	609a      	str	r2, [r3, #8]
      break;
 800715a:	e1cd      	b.n	80074f8 <HAL_TIM_ConfigClockSource+0x670>
 800715c:	08010964 	.word	0x08010964
 8007160:	fffeff88 	.word	0xfffeff88
 8007164:	40010000 	.word	0x40010000
 8007168:	40000400 	.word	0x40000400
 800716c:	40000800 	.word	0x40000800
 8007170:	40000c00 	.word	0x40000c00
 8007174:	40001000 	.word	0x40001000
 8007178:	40001400 	.word	0x40001400
 800717c:	40010400 	.word	0x40010400
 8007180:	40014000 	.word	0x40014000
 8007184:	40014400 	.word	0x40014400
 8007188:	40014800 	.word	0x40014800
 800718c:	40001800 	.word	0x40001800
 8007190:	40001c00 	.word	0x40001c00
 8007194:	40002000 	.word	0x40002000
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a8d      	ldr	r2, [pc, #564]	@ (80073d4 <HAL_TIM_ConfigClockSource+0x54c>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d01d      	beq.n	80071de <HAL_TIM_ConfigClockSource+0x356>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071aa:	d018      	beq.n	80071de <HAL_TIM_ConfigClockSource+0x356>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a89      	ldr	r2, [pc, #548]	@ (80073d8 <HAL_TIM_ConfigClockSource+0x550>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d013      	beq.n	80071de <HAL_TIM_ConfigClockSource+0x356>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a88      	ldr	r2, [pc, #544]	@ (80073dc <HAL_TIM_ConfigClockSource+0x554>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d00e      	beq.n	80071de <HAL_TIM_ConfigClockSource+0x356>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a86      	ldr	r2, [pc, #536]	@ (80073e0 <HAL_TIM_ConfigClockSource+0x558>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d009      	beq.n	80071de <HAL_TIM_ConfigClockSource+0x356>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a85      	ldr	r2, [pc, #532]	@ (80073e4 <HAL_TIM_ConfigClockSource+0x55c>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d004      	beq.n	80071de <HAL_TIM_ConfigClockSource+0x356>
 80071d4:	f241 517c 	movw	r1, #5500	@ 0x157c
 80071d8:	4883      	ldr	r0, [pc, #524]	@ (80073e8 <HAL_TIM_ConfigClockSource+0x560>)
 80071da:	f7fb f9c3 	bl	8002564 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d013      	beq.n	800720e <HAL_TIM_ConfigClockSource+0x386>
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071ee:	d00e      	beq.n	800720e <HAL_TIM_ConfigClockSource+0x386>
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071f8:	d009      	beq.n	800720e <HAL_TIM_ConfigClockSource+0x386>
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007202:	d004      	beq.n	800720e <HAL_TIM_ConfigClockSource+0x386>
 8007204:	f241 517f 	movw	r1, #5503	@ 0x157f
 8007208:	4877      	ldr	r0, [pc, #476]	@ (80073e8 <HAL_TIM_ConfigClockSource+0x560>)
 800720a:	f7fb f9ab 	bl	8002564 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007216:	d014      	beq.n	8007242 <HAL_TIM_ConfigClockSource+0x3ba>
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d010      	beq.n	8007242 <HAL_TIM_ConfigClockSource+0x3ba>
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d00c      	beq.n	8007242 <HAL_TIM_ConfigClockSource+0x3ba>
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	2b02      	cmp	r3, #2
 800722e:	d008      	beq.n	8007242 <HAL_TIM_ConfigClockSource+0x3ba>
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	2b0a      	cmp	r3, #10
 8007236:	d004      	beq.n	8007242 <HAL_TIM_ConfigClockSource+0x3ba>
 8007238:	f44f 51ac 	mov.w	r1, #5504	@ 0x1580
 800723c:	486a      	ldr	r0, [pc, #424]	@ (80073e8 <HAL_TIM_ConfigClockSource+0x560>)
 800723e:	f7fb f991 	bl	8002564 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	68db      	ldr	r3, [r3, #12]
 8007246:	2b0f      	cmp	r3, #15
 8007248:	d904      	bls.n	8007254 <HAL_TIM_ConfigClockSource+0x3cc>
 800724a:	f241 5181 	movw	r1, #5505	@ 0x1581
 800724e:	4866      	ldr	r0, [pc, #408]	@ (80073e8 <HAL_TIM_ConfigClockSource+0x560>)
 8007250:	f7fb f988 	bl	8002564 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007264:	f000 fd70 	bl	8007d48 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	689a      	ldr	r2, [r3, #8]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007276:	609a      	str	r2, [r3, #8]
      break;
 8007278:	e13e      	b.n	80074f8 <HAL_TIM_ConfigClockSource+0x670>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a55      	ldr	r2, [pc, #340]	@ (80073d4 <HAL_TIM_ConfigClockSource+0x54c>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d01d      	beq.n	80072c0 <HAL_TIM_ConfigClockSource+0x438>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800728c:	d018      	beq.n	80072c0 <HAL_TIM_ConfigClockSource+0x438>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a51      	ldr	r2, [pc, #324]	@ (80073d8 <HAL_TIM_ConfigClockSource+0x550>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d013      	beq.n	80072c0 <HAL_TIM_ConfigClockSource+0x438>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a4f      	ldr	r2, [pc, #316]	@ (80073dc <HAL_TIM_ConfigClockSource+0x554>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d00e      	beq.n	80072c0 <HAL_TIM_ConfigClockSource+0x438>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a4e      	ldr	r2, [pc, #312]	@ (80073e0 <HAL_TIM_ConfigClockSource+0x558>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d009      	beq.n	80072c0 <HAL_TIM_ConfigClockSource+0x438>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a4c      	ldr	r2, [pc, #304]	@ (80073e4 <HAL_TIM_ConfigClockSource+0x55c>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d004      	beq.n	80072c0 <HAL_TIM_ConfigClockSource+0x438>
 80072b6:	f241 5190 	movw	r1, #5520	@ 0x1590
 80072ba:	484b      	ldr	r0, [pc, #300]	@ (80073e8 <HAL_TIM_ConfigClockSource+0x560>)
 80072bc:	f7fb f952 	bl	8002564 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072c8:	d014      	beq.n	80072f4 <HAL_TIM_ConfigClockSource+0x46c>
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d010      	beq.n	80072f4 <HAL_TIM_ConfigClockSource+0x46c>
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d00c      	beq.n	80072f4 <HAL_TIM_ConfigClockSource+0x46c>
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	2b02      	cmp	r3, #2
 80072e0:	d008      	beq.n	80072f4 <HAL_TIM_ConfigClockSource+0x46c>
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	2b0a      	cmp	r3, #10
 80072e8:	d004      	beq.n	80072f4 <HAL_TIM_ConfigClockSource+0x46c>
 80072ea:	f241 5193 	movw	r1, #5523	@ 0x1593
 80072ee:	483e      	ldr	r0, [pc, #248]	@ (80073e8 <HAL_TIM_ConfigClockSource+0x560>)
 80072f0:	f7fb f938 	bl	8002564 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	68db      	ldr	r3, [r3, #12]
 80072f8:	2b0f      	cmp	r3, #15
 80072fa:	d904      	bls.n	8007306 <HAL_TIM_ConfigClockSource+0x47e>
 80072fc:	f241 5194 	movw	r1, #5524	@ 0x1594
 8007300:	4839      	ldr	r0, [pc, #228]	@ (80073e8 <HAL_TIM_ConfigClockSource+0x560>)
 8007302:	f7fb f92f 	bl	8002564 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007312:	461a      	mov	r2, r3
 8007314:	f000 fc9e 	bl	8007c54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	2150      	movs	r1, #80	@ 0x50
 800731e:	4618      	mov	r0, r3
 8007320:	f000 fcf7 	bl	8007d12 <TIM_ITRx_SetConfig>
      break;
 8007324:	e0e8      	b.n	80074f8 <HAL_TIM_ConfigClockSource+0x670>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a2a      	ldr	r2, [pc, #168]	@ (80073d4 <HAL_TIM_ConfigClockSource+0x54c>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d01d      	beq.n	800736c <HAL_TIM_ConfigClockSource+0x4e4>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007338:	d018      	beq.n	800736c <HAL_TIM_ConfigClockSource+0x4e4>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a26      	ldr	r2, [pc, #152]	@ (80073d8 <HAL_TIM_ConfigClockSource+0x550>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d013      	beq.n	800736c <HAL_TIM_ConfigClockSource+0x4e4>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a24      	ldr	r2, [pc, #144]	@ (80073dc <HAL_TIM_ConfigClockSource+0x554>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d00e      	beq.n	800736c <HAL_TIM_ConfigClockSource+0x4e4>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a23      	ldr	r2, [pc, #140]	@ (80073e0 <HAL_TIM_ConfigClockSource+0x558>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d009      	beq.n	800736c <HAL_TIM_ConfigClockSource+0x4e4>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a21      	ldr	r2, [pc, #132]	@ (80073e4 <HAL_TIM_ConfigClockSource+0x55c>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d004      	beq.n	800736c <HAL_TIM_ConfigClockSource+0x4e4>
 8007362:	f44f 51ad 	mov.w	r1, #5536	@ 0x15a0
 8007366:	4820      	ldr	r0, [pc, #128]	@ (80073e8 <HAL_TIM_ConfigClockSource+0x560>)
 8007368:	f7fb f8fc 	bl	8002564 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007374:	d014      	beq.n	80073a0 <HAL_TIM_ConfigClockSource+0x518>
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d010      	beq.n	80073a0 <HAL_TIM_ConfigClockSource+0x518>
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d00c      	beq.n	80073a0 <HAL_TIM_ConfigClockSource+0x518>
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	2b02      	cmp	r3, #2
 800738c:	d008      	beq.n	80073a0 <HAL_TIM_ConfigClockSource+0x518>
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	2b0a      	cmp	r3, #10
 8007394:	d004      	beq.n	80073a0 <HAL_TIM_ConfigClockSource+0x518>
 8007396:	f241 51a3 	movw	r1, #5539	@ 0x15a3
 800739a:	4813      	ldr	r0, [pc, #76]	@ (80073e8 <HAL_TIM_ConfigClockSource+0x560>)
 800739c:	f7fb f8e2 	bl	8002564 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	68db      	ldr	r3, [r3, #12]
 80073a4:	2b0f      	cmp	r3, #15
 80073a6:	d904      	bls.n	80073b2 <HAL_TIM_ConfigClockSource+0x52a>
 80073a8:	f241 51a4 	movw	r1, #5540	@ 0x15a4
 80073ac:	480e      	ldr	r0, [pc, #56]	@ (80073e8 <HAL_TIM_ConfigClockSource+0x560>)
 80073ae:	f7fb f8d9 	bl	8002564 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80073be:	461a      	mov	r2, r3
 80073c0:	f000 fc77 	bl	8007cb2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	2160      	movs	r1, #96	@ 0x60
 80073ca:	4618      	mov	r0, r3
 80073cc:	f000 fca1 	bl	8007d12 <TIM_ITRx_SetConfig>
      break;
 80073d0:	e092      	b.n	80074f8 <HAL_TIM_ConfigClockSource+0x670>
 80073d2:	bf00      	nop
 80073d4:	40010000 	.word	0x40010000
 80073d8:	40000400 	.word	0x40000400
 80073dc:	40000800 	.word	0x40000800
 80073e0:	40000c00 	.word	0x40000c00
 80073e4:	40010400 	.word	0x40010400
 80073e8:	08010964 	.word	0x08010964
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a48      	ldr	r2, [pc, #288]	@ (8007514 <HAL_TIM_ConfigClockSource+0x68c>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d01d      	beq.n	8007432 <HAL_TIM_ConfigClockSource+0x5aa>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073fe:	d018      	beq.n	8007432 <HAL_TIM_ConfigClockSource+0x5aa>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a44      	ldr	r2, [pc, #272]	@ (8007518 <HAL_TIM_ConfigClockSource+0x690>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d013      	beq.n	8007432 <HAL_TIM_ConfigClockSource+0x5aa>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a43      	ldr	r2, [pc, #268]	@ (800751c <HAL_TIM_ConfigClockSource+0x694>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d00e      	beq.n	8007432 <HAL_TIM_ConfigClockSource+0x5aa>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a41      	ldr	r2, [pc, #260]	@ (8007520 <HAL_TIM_ConfigClockSource+0x698>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d009      	beq.n	8007432 <HAL_TIM_ConfigClockSource+0x5aa>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a40      	ldr	r2, [pc, #256]	@ (8007524 <HAL_TIM_ConfigClockSource+0x69c>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d004      	beq.n	8007432 <HAL_TIM_ConfigClockSource+0x5aa>
 8007428:	f241 51b0 	movw	r1, #5552	@ 0x15b0
 800742c:	483e      	ldr	r0, [pc, #248]	@ (8007528 <HAL_TIM_ConfigClockSource+0x6a0>)
 800742e:	f7fb f899 	bl	8002564 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800743a:	d014      	beq.n	8007466 <HAL_TIM_ConfigClockSource+0x5de>
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d010      	beq.n	8007466 <HAL_TIM_ConfigClockSource+0x5de>
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d00c      	beq.n	8007466 <HAL_TIM_ConfigClockSource+0x5de>
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	2b02      	cmp	r3, #2
 8007452:	d008      	beq.n	8007466 <HAL_TIM_ConfigClockSource+0x5de>
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	2b0a      	cmp	r3, #10
 800745a:	d004      	beq.n	8007466 <HAL_TIM_ConfigClockSource+0x5de>
 800745c:	f241 51b3 	movw	r1, #5555	@ 0x15b3
 8007460:	4831      	ldr	r0, [pc, #196]	@ (8007528 <HAL_TIM_ConfigClockSource+0x6a0>)
 8007462:	f7fb f87f 	bl	8002564 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	68db      	ldr	r3, [r3, #12]
 800746a:	2b0f      	cmp	r3, #15
 800746c:	d904      	bls.n	8007478 <HAL_TIM_ConfigClockSource+0x5f0>
 800746e:	f241 51b4 	movw	r1, #5556	@ 0x15b4
 8007472:	482d      	ldr	r0, [pc, #180]	@ (8007528 <HAL_TIM_ConfigClockSource+0x6a0>)
 8007474:	f7fb f876 	bl	8002564 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007484:	461a      	mov	r2, r3
 8007486:	f000 fbe5 	bl	8007c54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	2140      	movs	r1, #64	@ 0x40
 8007490:	4618      	mov	r0, r3
 8007492:	f000 fc3e 	bl	8007d12 <TIM_ITRx_SetConfig>
      break;
 8007496:	e02f      	b.n	80074f8 <HAL_TIM_ConfigClockSource+0x670>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a1d      	ldr	r2, [pc, #116]	@ (8007514 <HAL_TIM_ConfigClockSource+0x68c>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d01d      	beq.n	80074de <HAL_TIM_ConfigClockSource+0x656>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074aa:	d018      	beq.n	80074de <HAL_TIM_ConfigClockSource+0x656>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a19      	ldr	r2, [pc, #100]	@ (8007518 <HAL_TIM_ConfigClockSource+0x690>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d013      	beq.n	80074de <HAL_TIM_ConfigClockSource+0x656>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a18      	ldr	r2, [pc, #96]	@ (800751c <HAL_TIM_ConfigClockSource+0x694>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d00e      	beq.n	80074de <HAL_TIM_ConfigClockSource+0x656>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a16      	ldr	r2, [pc, #88]	@ (8007520 <HAL_TIM_ConfigClockSource+0x698>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d009      	beq.n	80074de <HAL_TIM_ConfigClockSource+0x656>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a15      	ldr	r2, [pc, #84]	@ (8007524 <HAL_TIM_ConfigClockSource+0x69c>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d004      	beq.n	80074de <HAL_TIM_ConfigClockSource+0x656>
 80074d4:	f241 51c3 	movw	r1, #5571	@ 0x15c3
 80074d8:	4813      	ldr	r0, [pc, #76]	@ (8007528 <HAL_TIM_ConfigClockSource+0x6a0>)
 80074da:	f7fb f843 	bl	8002564 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681a      	ldr	r2, [r3, #0]
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4619      	mov	r1, r3
 80074e8:	4610      	mov	r0, r2
 80074ea:	f000 fc12 	bl	8007d12 <TIM_ITRx_SetConfig>
      break;
 80074ee:	e003      	b.n	80074f8 <HAL_TIM_ConfigClockSource+0x670>
    }

    default:
      status = HAL_ERROR;
 80074f0:	2301      	movs	r3, #1
 80074f2:	73fb      	strb	r3, [r7, #15]
      break;
 80074f4:	e000      	b.n	80074f8 <HAL_TIM_ConfigClockSource+0x670>
      break;
 80074f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2201      	movs	r2, #1
 80074fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007508:	7bfb      	ldrb	r3, [r7, #15]
}
 800750a:	4618      	mov	r0, r3
 800750c:	3710      	adds	r7, #16
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
 8007512:	bf00      	nop
 8007514:	40010000 	.word	0x40010000
 8007518:	40000400 	.word	0x40000400
 800751c:	40000800 	.word	0x40000800
 8007520:	40000c00 	.word	0x40000c00
 8007524:	40010400 	.word	0x40010400
 8007528:	08010964 	.word	0x08010964

0800752c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800752c:	b480      	push	{r7}
 800752e:	b085      	sub	sp, #20
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	4a46      	ldr	r2, [pc, #280]	@ (8007658 <TIM_Base_SetConfig+0x12c>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d013      	beq.n	800756c <TIM_Base_SetConfig+0x40>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800754a:	d00f      	beq.n	800756c <TIM_Base_SetConfig+0x40>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	4a43      	ldr	r2, [pc, #268]	@ (800765c <TIM_Base_SetConfig+0x130>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d00b      	beq.n	800756c <TIM_Base_SetConfig+0x40>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	4a42      	ldr	r2, [pc, #264]	@ (8007660 <TIM_Base_SetConfig+0x134>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d007      	beq.n	800756c <TIM_Base_SetConfig+0x40>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	4a41      	ldr	r2, [pc, #260]	@ (8007664 <TIM_Base_SetConfig+0x138>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d003      	beq.n	800756c <TIM_Base_SetConfig+0x40>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	4a40      	ldr	r2, [pc, #256]	@ (8007668 <TIM_Base_SetConfig+0x13c>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d108      	bne.n	800757e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007572:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	68fa      	ldr	r2, [r7, #12]
 800757a:	4313      	orrs	r3, r2
 800757c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4a35      	ldr	r2, [pc, #212]	@ (8007658 <TIM_Base_SetConfig+0x12c>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d02b      	beq.n	80075de <TIM_Base_SetConfig+0xb2>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800758c:	d027      	beq.n	80075de <TIM_Base_SetConfig+0xb2>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	4a32      	ldr	r2, [pc, #200]	@ (800765c <TIM_Base_SetConfig+0x130>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d023      	beq.n	80075de <TIM_Base_SetConfig+0xb2>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	4a31      	ldr	r2, [pc, #196]	@ (8007660 <TIM_Base_SetConfig+0x134>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d01f      	beq.n	80075de <TIM_Base_SetConfig+0xb2>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	4a30      	ldr	r2, [pc, #192]	@ (8007664 <TIM_Base_SetConfig+0x138>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d01b      	beq.n	80075de <TIM_Base_SetConfig+0xb2>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	4a2f      	ldr	r2, [pc, #188]	@ (8007668 <TIM_Base_SetConfig+0x13c>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d017      	beq.n	80075de <TIM_Base_SetConfig+0xb2>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	4a2e      	ldr	r2, [pc, #184]	@ (800766c <TIM_Base_SetConfig+0x140>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d013      	beq.n	80075de <TIM_Base_SetConfig+0xb2>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	4a2d      	ldr	r2, [pc, #180]	@ (8007670 <TIM_Base_SetConfig+0x144>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d00f      	beq.n	80075de <TIM_Base_SetConfig+0xb2>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	4a2c      	ldr	r2, [pc, #176]	@ (8007674 <TIM_Base_SetConfig+0x148>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d00b      	beq.n	80075de <TIM_Base_SetConfig+0xb2>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	4a2b      	ldr	r2, [pc, #172]	@ (8007678 <TIM_Base_SetConfig+0x14c>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d007      	beq.n	80075de <TIM_Base_SetConfig+0xb2>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	4a2a      	ldr	r2, [pc, #168]	@ (800767c <TIM_Base_SetConfig+0x150>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d003      	beq.n	80075de <TIM_Base_SetConfig+0xb2>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	4a29      	ldr	r2, [pc, #164]	@ (8007680 <TIM_Base_SetConfig+0x154>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d108      	bne.n	80075f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80075e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	68db      	ldr	r3, [r3, #12]
 80075ea:	68fa      	ldr	r2, [r7, #12]
 80075ec:	4313      	orrs	r3, r2
 80075ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	695b      	ldr	r3, [r3, #20]
 80075fa:	4313      	orrs	r3, r2
 80075fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	68fa      	ldr	r2, [r7, #12]
 8007602:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	689a      	ldr	r2, [r3, #8]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	681a      	ldr	r2, [r3, #0]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	4a10      	ldr	r2, [pc, #64]	@ (8007658 <TIM_Base_SetConfig+0x12c>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d003      	beq.n	8007624 <TIM_Base_SetConfig+0xf8>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	4a12      	ldr	r2, [pc, #72]	@ (8007668 <TIM_Base_SetConfig+0x13c>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d103      	bne.n	800762c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	691a      	ldr	r2, [r3, #16]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2201      	movs	r2, #1
 8007630:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	691b      	ldr	r3, [r3, #16]
 8007636:	f003 0301 	and.w	r3, r3, #1
 800763a:	2b01      	cmp	r3, #1
 800763c:	d105      	bne.n	800764a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	691b      	ldr	r3, [r3, #16]
 8007642:	f023 0201 	bic.w	r2, r3, #1
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	611a      	str	r2, [r3, #16]
  }
}
 800764a:	bf00      	nop
 800764c:	3714      	adds	r7, #20
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr
 8007656:	bf00      	nop
 8007658:	40010000 	.word	0x40010000
 800765c:	40000400 	.word	0x40000400
 8007660:	40000800 	.word	0x40000800
 8007664:	40000c00 	.word	0x40000c00
 8007668:	40010400 	.word	0x40010400
 800766c:	40014000 	.word	0x40014000
 8007670:	40014400 	.word	0x40014400
 8007674:	40014800 	.word	0x40014800
 8007678:	40001800 	.word	0x40001800
 800767c:	40001c00 	.word	0x40001c00
 8007680:	40002000 	.word	0x40002000

08007684 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b086      	sub	sp, #24
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6a1b      	ldr	r3, [r3, #32]
 8007692:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6a1b      	ldr	r3, [r3, #32]
 8007698:	f023 0201 	bic.w	r2, r3, #1
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	699b      	ldr	r3, [r3, #24]
 80076aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80076ac:	68fa      	ldr	r2, [r7, #12]
 80076ae:	4b3f      	ldr	r3, [pc, #252]	@ (80077ac <TIM_OC1_SetConfig+0x128>)
 80076b0:	4013      	ands	r3, r2
 80076b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f023 0303 	bic.w	r3, r3, #3
 80076ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	68fa      	ldr	r2, [r7, #12]
 80076c2:	4313      	orrs	r3, r2
 80076c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	f023 0302 	bic.w	r3, r3, #2
 80076cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	697a      	ldr	r2, [r7, #20]
 80076d4:	4313      	orrs	r3, r2
 80076d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	4a35      	ldr	r2, [pc, #212]	@ (80077b0 <TIM_OC1_SetConfig+0x12c>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d003      	beq.n	80076e8 <TIM_OC1_SetConfig+0x64>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4a34      	ldr	r2, [pc, #208]	@ (80077b4 <TIM_OC1_SetConfig+0x130>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d119      	bne.n	800771c <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	68db      	ldr	r3, [r3, #12]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d008      	beq.n	8007702 <TIM_OC1_SetConfig+0x7e>
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	2b08      	cmp	r3, #8
 80076f6:	d004      	beq.n	8007702 <TIM_OC1_SetConfig+0x7e>
 80076f8:	f641 3169 	movw	r1, #7017	@ 0x1b69
 80076fc:	482e      	ldr	r0, [pc, #184]	@ (80077b8 <TIM_OC1_SetConfig+0x134>)
 80076fe:	f7fa ff31 	bl	8002564 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	f023 0308 	bic.w	r3, r3, #8
 8007708:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	68db      	ldr	r3, [r3, #12]
 800770e:	697a      	ldr	r2, [r7, #20]
 8007710:	4313      	orrs	r3, r2
 8007712:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	f023 0304 	bic.w	r3, r3, #4
 800771a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	4a24      	ldr	r2, [pc, #144]	@ (80077b0 <TIM_OC1_SetConfig+0x12c>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d003      	beq.n	800772c <TIM_OC1_SetConfig+0xa8>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	4a23      	ldr	r2, [pc, #140]	@ (80077b4 <TIM_OC1_SetConfig+0x130>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d12d      	bne.n	8007788 <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	699b      	ldr	r3, [r3, #24]
 8007730:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007734:	d008      	beq.n	8007748 <TIM_OC1_SetConfig+0xc4>
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	699b      	ldr	r3, [r3, #24]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d004      	beq.n	8007748 <TIM_OC1_SetConfig+0xc4>
 800773e:	f641 3176 	movw	r1, #7030	@ 0x1b76
 8007742:	481d      	ldr	r0, [pc, #116]	@ (80077b8 <TIM_OC1_SetConfig+0x134>)
 8007744:	f7fa ff0e 	bl	8002564 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	695b      	ldr	r3, [r3, #20]
 800774c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007750:	d008      	beq.n	8007764 <TIM_OC1_SetConfig+0xe0>
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	695b      	ldr	r3, [r3, #20]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d004      	beq.n	8007764 <TIM_OC1_SetConfig+0xe0>
 800775a:	f641 3177 	movw	r1, #7031	@ 0x1b77
 800775e:	4816      	ldr	r0, [pc, #88]	@ (80077b8 <TIM_OC1_SetConfig+0x134>)
 8007760:	f7fa ff00 	bl	8002564 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800776a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007772:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	695b      	ldr	r3, [r3, #20]
 8007778:	693a      	ldr	r2, [r7, #16]
 800777a:	4313      	orrs	r3, r2
 800777c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	699b      	ldr	r3, [r3, #24]
 8007782:	693a      	ldr	r2, [r7, #16]
 8007784:	4313      	orrs	r3, r2
 8007786:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	693a      	ldr	r2, [r7, #16]
 800778c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	68fa      	ldr	r2, [r7, #12]
 8007792:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	685a      	ldr	r2, [r3, #4]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	697a      	ldr	r2, [r7, #20]
 80077a0:	621a      	str	r2, [r3, #32]
}
 80077a2:	bf00      	nop
 80077a4:	3718      	adds	r7, #24
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
 80077aa:	bf00      	nop
 80077ac:	fffeff8f 	.word	0xfffeff8f
 80077b0:	40010000 	.word	0x40010000
 80077b4:	40010400 	.word	0x40010400
 80077b8:	08010964 	.word	0x08010964

080077bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b086      	sub	sp, #24
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6a1b      	ldr	r3, [r3, #32]
 80077ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6a1b      	ldr	r3, [r3, #32]
 80077d0:	f023 0210 	bic.w	r2, r3, #16
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	699b      	ldr	r3, [r3, #24]
 80077e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80077e4:	68fa      	ldr	r2, [r7, #12]
 80077e6:	4b41      	ldr	r3, [pc, #260]	@ (80078ec <TIM_OC2_SetConfig+0x130>)
 80077e8:	4013      	ands	r3, r2
 80077ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80077f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	021b      	lsls	r3, r3, #8
 80077fa:	68fa      	ldr	r2, [r7, #12]
 80077fc:	4313      	orrs	r3, r2
 80077fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	f023 0320 	bic.w	r3, r3, #32
 8007806:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	011b      	lsls	r3, r3, #4
 800780e:	697a      	ldr	r2, [r7, #20]
 8007810:	4313      	orrs	r3, r2
 8007812:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	4a36      	ldr	r2, [pc, #216]	@ (80078f0 <TIM_OC2_SetConfig+0x134>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d003      	beq.n	8007824 <TIM_OC2_SetConfig+0x68>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	4a35      	ldr	r2, [pc, #212]	@ (80078f4 <TIM_OC2_SetConfig+0x138>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d11a      	bne.n	800785a <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d008      	beq.n	800783e <TIM_OC2_SetConfig+0x82>
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	68db      	ldr	r3, [r3, #12]
 8007830:	2b08      	cmp	r3, #8
 8007832:	d004      	beq.n	800783e <TIM_OC2_SetConfig+0x82>
 8007834:	f641 31b5 	movw	r1, #7093	@ 0x1bb5
 8007838:	482f      	ldr	r0, [pc, #188]	@ (80078f8 <TIM_OC2_SetConfig+0x13c>)
 800783a:	f7fa fe93 	bl	8002564 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007844:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	011b      	lsls	r3, r3, #4
 800784c:	697a      	ldr	r2, [r7, #20]
 800784e:	4313      	orrs	r3, r2
 8007850:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007858:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	4a24      	ldr	r2, [pc, #144]	@ (80078f0 <TIM_OC2_SetConfig+0x134>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d003      	beq.n	800786a <TIM_OC2_SetConfig+0xae>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	4a23      	ldr	r2, [pc, #140]	@ (80078f4 <TIM_OC2_SetConfig+0x138>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d12f      	bne.n	80078ca <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	699b      	ldr	r3, [r3, #24]
 800786e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007872:	d008      	beq.n	8007886 <TIM_OC2_SetConfig+0xca>
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	699b      	ldr	r3, [r3, #24]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d004      	beq.n	8007886 <TIM_OC2_SetConfig+0xca>
 800787c:	f641 31c2 	movw	r1, #7106	@ 0x1bc2
 8007880:	481d      	ldr	r0, [pc, #116]	@ (80078f8 <TIM_OC2_SetConfig+0x13c>)
 8007882:	f7fa fe6f 	bl	8002564 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	695b      	ldr	r3, [r3, #20]
 800788a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800788e:	d008      	beq.n	80078a2 <TIM_OC2_SetConfig+0xe6>
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	695b      	ldr	r3, [r3, #20]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d004      	beq.n	80078a2 <TIM_OC2_SetConfig+0xe6>
 8007898:	f641 31c3 	movw	r1, #7107	@ 0x1bc3
 800789c:	4816      	ldr	r0, [pc, #88]	@ (80078f8 <TIM_OC2_SetConfig+0x13c>)
 800789e:	f7fa fe61 	bl	8002564 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80078a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80078b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	695b      	ldr	r3, [r3, #20]
 80078b6:	009b      	lsls	r3, r3, #2
 80078b8:	693a      	ldr	r2, [r7, #16]
 80078ba:	4313      	orrs	r3, r2
 80078bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	699b      	ldr	r3, [r3, #24]
 80078c2:	009b      	lsls	r3, r3, #2
 80078c4:	693a      	ldr	r2, [r7, #16]
 80078c6:	4313      	orrs	r3, r2
 80078c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	693a      	ldr	r2, [r7, #16]
 80078ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	68fa      	ldr	r2, [r7, #12]
 80078d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	685a      	ldr	r2, [r3, #4]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	697a      	ldr	r2, [r7, #20]
 80078e2:	621a      	str	r2, [r3, #32]
}
 80078e4:	bf00      	nop
 80078e6:	3718      	adds	r7, #24
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}
 80078ec:	feff8fff 	.word	0xfeff8fff
 80078f0:	40010000 	.word	0x40010000
 80078f4:	40010400 	.word	0x40010400
 80078f8:	08010964 	.word	0x08010964

080078fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b086      	sub	sp, #24
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6a1b      	ldr	r3, [r3, #32]
 800790a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6a1b      	ldr	r3, [r3, #32]
 8007910:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	69db      	ldr	r3, [r3, #28]
 8007922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007924:	68fa      	ldr	r2, [r7, #12]
 8007926:	4b41      	ldr	r3, [pc, #260]	@ (8007a2c <TIM_OC3_SetConfig+0x130>)
 8007928:	4013      	ands	r3, r2
 800792a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f023 0303 	bic.w	r3, r3, #3
 8007932:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	68fa      	ldr	r2, [r7, #12]
 800793a:	4313      	orrs	r3, r2
 800793c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007944:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	689b      	ldr	r3, [r3, #8]
 800794a:	021b      	lsls	r3, r3, #8
 800794c:	697a      	ldr	r2, [r7, #20]
 800794e:	4313      	orrs	r3, r2
 8007950:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	4a36      	ldr	r2, [pc, #216]	@ (8007a30 <TIM_OC3_SetConfig+0x134>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d003      	beq.n	8007962 <TIM_OC3_SetConfig+0x66>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	4a35      	ldr	r2, [pc, #212]	@ (8007a34 <TIM_OC3_SetConfig+0x138>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d11a      	bne.n	8007998 <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	68db      	ldr	r3, [r3, #12]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d008      	beq.n	800797c <TIM_OC3_SetConfig+0x80>
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	68db      	ldr	r3, [r3, #12]
 800796e:	2b08      	cmp	r3, #8
 8007970:	d004      	beq.n	800797c <TIM_OC3_SetConfig+0x80>
 8007972:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 8007976:	4830      	ldr	r0, [pc, #192]	@ (8007a38 <TIM_OC3_SetConfig+0x13c>)
 8007978:	f7fa fdf4 	bl	8002564 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007982:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	68db      	ldr	r3, [r3, #12]
 8007988:	021b      	lsls	r3, r3, #8
 800798a:	697a      	ldr	r2, [r7, #20]
 800798c:	4313      	orrs	r3, r2
 800798e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007996:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	4a25      	ldr	r2, [pc, #148]	@ (8007a30 <TIM_OC3_SetConfig+0x134>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d003      	beq.n	80079a8 <TIM_OC3_SetConfig+0xac>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	4a24      	ldr	r2, [pc, #144]	@ (8007a34 <TIM_OC3_SetConfig+0x138>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d12f      	bne.n	8007a08 <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	699b      	ldr	r3, [r3, #24]
 80079ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079b0:	d008      	beq.n	80079c4 <TIM_OC3_SetConfig+0xc8>
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	699b      	ldr	r3, [r3, #24]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d004      	beq.n	80079c4 <TIM_OC3_SetConfig+0xc8>
 80079ba:	f641 410d 	movw	r1, #7181	@ 0x1c0d
 80079be:	481e      	ldr	r0, [pc, #120]	@ (8007a38 <TIM_OC3_SetConfig+0x13c>)
 80079c0:	f7fa fdd0 	bl	8002564 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	695b      	ldr	r3, [r3, #20]
 80079c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80079cc:	d008      	beq.n	80079e0 <TIM_OC3_SetConfig+0xe4>
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	695b      	ldr	r3, [r3, #20]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d004      	beq.n	80079e0 <TIM_OC3_SetConfig+0xe4>
 80079d6:	f641 410e 	movw	r1, #7182	@ 0x1c0e
 80079da:	4817      	ldr	r0, [pc, #92]	@ (8007a38 <TIM_OC3_SetConfig+0x13c>)
 80079dc:	f7fa fdc2 	bl	8002564 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80079e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80079ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	695b      	ldr	r3, [r3, #20]
 80079f4:	011b      	lsls	r3, r3, #4
 80079f6:	693a      	ldr	r2, [r7, #16]
 80079f8:	4313      	orrs	r3, r2
 80079fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	699b      	ldr	r3, [r3, #24]
 8007a00:	011b      	lsls	r3, r3, #4
 8007a02:	693a      	ldr	r2, [r7, #16]
 8007a04:	4313      	orrs	r3, r2
 8007a06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	693a      	ldr	r2, [r7, #16]
 8007a0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	68fa      	ldr	r2, [r7, #12]
 8007a12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	685a      	ldr	r2, [r3, #4]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	697a      	ldr	r2, [r7, #20]
 8007a20:	621a      	str	r2, [r3, #32]
}
 8007a22:	bf00      	nop
 8007a24:	3718      	adds	r7, #24
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
 8007a2a:	bf00      	nop
 8007a2c:	fffeff8f 	.word	0xfffeff8f
 8007a30:	40010000 	.word	0x40010000
 8007a34:	40010400 	.word	0x40010400
 8007a38:	08010964 	.word	0x08010964

08007a3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b086      	sub	sp, #24
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6a1b      	ldr	r3, [r3, #32]
 8007a4a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6a1b      	ldr	r3, [r3, #32]
 8007a50:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	69db      	ldr	r3, [r3, #28]
 8007a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007a64:	68fa      	ldr	r2, [r7, #12]
 8007a66:	4b24      	ldr	r3, [pc, #144]	@ (8007af8 <TIM_OC4_SetConfig+0xbc>)
 8007a68:	4013      	ands	r3, r2
 8007a6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	021b      	lsls	r3, r3, #8
 8007a7a:	68fa      	ldr	r2, [r7, #12]
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007a86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	031b      	lsls	r3, r3, #12
 8007a8e:	693a      	ldr	r2, [r7, #16]
 8007a90:	4313      	orrs	r3, r2
 8007a92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	4a19      	ldr	r2, [pc, #100]	@ (8007afc <TIM_OC4_SetConfig+0xc0>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d003      	beq.n	8007aa4 <TIM_OC4_SetConfig+0x68>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	4a18      	ldr	r2, [pc, #96]	@ (8007b00 <TIM_OC4_SetConfig+0xc4>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d117      	bne.n	8007ad4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	695b      	ldr	r3, [r3, #20]
 8007aa8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007aac:	d008      	beq.n	8007ac0 <TIM_OC4_SetConfig+0x84>
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	695b      	ldr	r3, [r3, #20]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d004      	beq.n	8007ac0 <TIM_OC4_SetConfig+0x84>
 8007ab6:	f641 414d 	movw	r1, #7245	@ 0x1c4d
 8007aba:	4812      	ldr	r0, [pc, #72]	@ (8007b04 <TIM_OC4_SetConfig+0xc8>)
 8007abc:	f7fa fd52 	bl	8002564 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007ac6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	695b      	ldr	r3, [r3, #20]
 8007acc:	019b      	lsls	r3, r3, #6
 8007ace:	697a      	ldr	r2, [r7, #20]
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	697a      	ldr	r2, [r7, #20]
 8007ad8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	68fa      	ldr	r2, [r7, #12]
 8007ade:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	685a      	ldr	r2, [r3, #4]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	693a      	ldr	r2, [r7, #16]
 8007aec:	621a      	str	r2, [r3, #32]
}
 8007aee:	bf00      	nop
 8007af0:	3718      	adds	r7, #24
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}
 8007af6:	bf00      	nop
 8007af8:	feff8fff 	.word	0xfeff8fff
 8007afc:	40010000 	.word	0x40010000
 8007b00:	40010400 	.word	0x40010400
 8007b04:	08010964 	.word	0x08010964

08007b08 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b087      	sub	sp, #28
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6a1b      	ldr	r3, [r3, #32]
 8007b16:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6a1b      	ldr	r3, [r3, #32]
 8007b1c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007b30:	68fa      	ldr	r2, [r7, #12]
 8007b32:	4b1b      	ldr	r3, [pc, #108]	@ (8007ba0 <TIM_OC5_SetConfig+0x98>)
 8007b34:	4013      	ands	r3, r2
 8007b36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	68fa      	ldr	r2, [r7, #12]
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007b48:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	689b      	ldr	r3, [r3, #8]
 8007b4e:	041b      	lsls	r3, r3, #16
 8007b50:	693a      	ldr	r2, [r7, #16]
 8007b52:	4313      	orrs	r3, r2
 8007b54:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	4a12      	ldr	r2, [pc, #72]	@ (8007ba4 <TIM_OC5_SetConfig+0x9c>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d003      	beq.n	8007b66 <TIM_OC5_SetConfig+0x5e>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	4a11      	ldr	r2, [pc, #68]	@ (8007ba8 <TIM_OC5_SetConfig+0xa0>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d109      	bne.n	8007b7a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b6c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	695b      	ldr	r3, [r3, #20]
 8007b72:	021b      	lsls	r3, r3, #8
 8007b74:	697a      	ldr	r2, [r7, #20]
 8007b76:	4313      	orrs	r3, r2
 8007b78:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	697a      	ldr	r2, [r7, #20]
 8007b7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	68fa      	ldr	r2, [r7, #12]
 8007b84:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	685a      	ldr	r2, [r3, #4]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	693a      	ldr	r2, [r7, #16]
 8007b92:	621a      	str	r2, [r3, #32]
}
 8007b94:	bf00      	nop
 8007b96:	371c      	adds	r7, #28
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr
 8007ba0:	fffeff8f 	.word	0xfffeff8f
 8007ba4:	40010000 	.word	0x40010000
 8007ba8:	40010400 	.word	0x40010400

08007bac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b087      	sub	sp, #28
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6a1b      	ldr	r3, [r3, #32]
 8007bba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6a1b      	ldr	r3, [r3, #32]
 8007bc0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007bd4:	68fa      	ldr	r2, [r7, #12]
 8007bd6:	4b1c      	ldr	r3, [pc, #112]	@ (8007c48 <TIM_OC6_SetConfig+0x9c>)
 8007bd8:	4013      	ands	r3, r2
 8007bda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	021b      	lsls	r3, r3, #8
 8007be2:	68fa      	ldr	r2, [r7, #12]
 8007be4:	4313      	orrs	r3, r2
 8007be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007bee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	689b      	ldr	r3, [r3, #8]
 8007bf4:	051b      	lsls	r3, r3, #20
 8007bf6:	693a      	ldr	r2, [r7, #16]
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	4a13      	ldr	r2, [pc, #76]	@ (8007c4c <TIM_OC6_SetConfig+0xa0>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d003      	beq.n	8007c0c <TIM_OC6_SetConfig+0x60>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	4a12      	ldr	r2, [pc, #72]	@ (8007c50 <TIM_OC6_SetConfig+0xa4>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d109      	bne.n	8007c20 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007c12:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	695b      	ldr	r3, [r3, #20]
 8007c18:	029b      	lsls	r3, r3, #10
 8007c1a:	697a      	ldr	r2, [r7, #20]
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	697a      	ldr	r2, [r7, #20]
 8007c24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	68fa      	ldr	r2, [r7, #12]
 8007c2a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	685a      	ldr	r2, [r3, #4]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	693a      	ldr	r2, [r7, #16]
 8007c38:	621a      	str	r2, [r3, #32]
}
 8007c3a:	bf00      	nop
 8007c3c:	371c      	adds	r7, #28
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c44:	4770      	bx	lr
 8007c46:	bf00      	nop
 8007c48:	feff8fff 	.word	0xfeff8fff
 8007c4c:	40010000 	.word	0x40010000
 8007c50:	40010400 	.word	0x40010400

08007c54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b087      	sub	sp, #28
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	60f8      	str	r0, [r7, #12]
 8007c5c:	60b9      	str	r1, [r7, #8]
 8007c5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	6a1b      	ldr	r3, [r3, #32]
 8007c64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	6a1b      	ldr	r3, [r3, #32]
 8007c6a:	f023 0201 	bic.w	r2, r3, #1
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	699b      	ldr	r3, [r3, #24]
 8007c76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007c7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	011b      	lsls	r3, r3, #4
 8007c84:	693a      	ldr	r2, [r7, #16]
 8007c86:	4313      	orrs	r3, r2
 8007c88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	f023 030a 	bic.w	r3, r3, #10
 8007c90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007c92:	697a      	ldr	r2, [r7, #20]
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	4313      	orrs	r3, r2
 8007c98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	693a      	ldr	r2, [r7, #16]
 8007c9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	697a      	ldr	r2, [r7, #20]
 8007ca4:	621a      	str	r2, [r3, #32]
}
 8007ca6:	bf00      	nop
 8007ca8:	371c      	adds	r7, #28
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr

08007cb2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007cb2:	b480      	push	{r7}
 8007cb4:	b087      	sub	sp, #28
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	60f8      	str	r0, [r7, #12]
 8007cba:	60b9      	str	r1, [r7, #8]
 8007cbc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	6a1b      	ldr	r3, [r3, #32]
 8007cc2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	6a1b      	ldr	r3, [r3, #32]
 8007cc8:	f023 0210 	bic.w	r2, r3, #16
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	699b      	ldr	r3, [r3, #24]
 8007cd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007cdc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	031b      	lsls	r3, r3, #12
 8007ce2:	693a      	ldr	r2, [r7, #16]
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007cee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	011b      	lsls	r3, r3, #4
 8007cf4:	697a      	ldr	r2, [r7, #20]
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	693a      	ldr	r2, [r7, #16]
 8007cfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	697a      	ldr	r2, [r7, #20]
 8007d04:	621a      	str	r2, [r3, #32]
}
 8007d06:	bf00      	nop
 8007d08:	371c      	adds	r7, #28
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr

08007d12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007d12:	b480      	push	{r7}
 8007d14:	b085      	sub	sp, #20
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
 8007d1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d2a:	683a      	ldr	r2, [r7, #0]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	f043 0307 	orr.w	r3, r3, #7
 8007d34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	68fa      	ldr	r2, [r7, #12]
 8007d3a:	609a      	str	r2, [r3, #8]
}
 8007d3c:	bf00      	nop
 8007d3e:	3714      	adds	r7, #20
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr

08007d48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b087      	sub	sp, #28
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	60f8      	str	r0, [r7, #12]
 8007d50:	60b9      	str	r1, [r7, #8]
 8007d52:	607a      	str	r2, [r7, #4]
 8007d54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	689b      	ldr	r3, [r3, #8]
 8007d5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007d62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	021a      	lsls	r2, r3, #8
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	431a      	orrs	r2, r3
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	697a      	ldr	r2, [r7, #20]
 8007d72:	4313      	orrs	r3, r2
 8007d74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	697a      	ldr	r2, [r7, #20]
 8007d7a:	609a      	str	r2, [r3, #8]
}
 8007d7c:	bf00      	nop
 8007d7e:	371c      	adds	r7, #28
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr

08007d88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b084      	sub	sp, #16
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a32      	ldr	r2, [pc, #200]	@ (8007e60 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d027      	beq.n	8007dec <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007da4:	d022      	beq.n	8007dec <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a2e      	ldr	r2, [pc, #184]	@ (8007e64 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d01d      	beq.n	8007dec <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a2c      	ldr	r2, [pc, #176]	@ (8007e68 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d018      	beq.n	8007dec <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a2b      	ldr	r2, [pc, #172]	@ (8007e6c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d013      	beq.n	8007dec <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a29      	ldr	r2, [pc, #164]	@ (8007e70 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d00e      	beq.n	8007dec <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a28      	ldr	r2, [pc, #160]	@ (8007e74 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d009      	beq.n	8007dec <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a26      	ldr	r2, [pc, #152]	@ (8007e78 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d004      	beq.n	8007dec <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007de2:	f240 71ab 	movw	r1, #1963	@ 0x7ab
 8007de6:	4825      	ldr	r0, [pc, #148]	@ (8007e7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007de8:	f7fa fbbc 	bl	8002564 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d020      	beq.n	8007e36 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	2b10      	cmp	r3, #16
 8007dfa:	d01c      	beq.n	8007e36 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	2b20      	cmp	r3, #32
 8007e02:	d018      	beq.n	8007e36 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	2b30      	cmp	r3, #48	@ 0x30
 8007e0a:	d014      	beq.n	8007e36 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	2b40      	cmp	r3, #64	@ 0x40
 8007e12:	d010      	beq.n	8007e36 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	2b50      	cmp	r3, #80	@ 0x50
 8007e1a:	d00c      	beq.n	8007e36 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	2b60      	cmp	r3, #96	@ 0x60
 8007e22:	d008      	beq.n	8007e36 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	2b70      	cmp	r3, #112	@ 0x70
 8007e2a:	d004      	beq.n	8007e36 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007e2c:	f240 71ac 	movw	r1, #1964	@ 0x7ac
 8007e30:	4812      	ldr	r0, [pc, #72]	@ (8007e7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007e32:	f7fa fb97 	bl	8002564 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	689b      	ldr	r3, [r3, #8]
 8007e3a:	2b80      	cmp	r3, #128	@ 0x80
 8007e3c:	d008      	beq.n	8007e50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	689b      	ldr	r3, [r3, #8]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d004      	beq.n	8007e50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007e46:	f240 71ad 	movw	r1, #1965	@ 0x7ad
 8007e4a:	480c      	ldr	r0, [pc, #48]	@ (8007e7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007e4c:	f7fa fb8a 	bl	8002564 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	d112      	bne.n	8007e80 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8007e5a:	2302      	movs	r3, #2
 8007e5c:	e0d7      	b.n	800800e <HAL_TIMEx_MasterConfigSynchronization+0x286>
 8007e5e:	bf00      	nop
 8007e60:	40010000 	.word	0x40010000
 8007e64:	40000400 	.word	0x40000400
 8007e68:	40000800 	.word	0x40000800
 8007e6c:	40000c00 	.word	0x40000c00
 8007e70:	40001000 	.word	0x40001000
 8007e74:	40001400 	.word	0x40001400
 8007e78:	40010400 	.word	0x40010400
 8007e7c:	0801099c 	.word	0x0801099c
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2201      	movs	r2, #1
 8007e84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2202      	movs	r2, #2
 8007e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	689b      	ldr	r3, [r3, #8]
 8007e9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a5c      	ldr	r2, [pc, #368]	@ (8008018 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d004      	beq.n	8007eb4 <HAL_TIMEx_MasterConfigSynchronization+0x12c>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a5b      	ldr	r2, [pc, #364]	@ (800801c <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d161      	bne.n	8007f78 <HAL_TIMEx_MasterConfigSynchronization+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d054      	beq.n	8007f66 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ec4:	d04f      	beq.n	8007f66 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007ece:	d04a      	beq.n	8007f66 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007ed8:	d045      	beq.n	8007f66 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007ee2:	d040      	beq.n	8007f66 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8007eec:	d03b      	beq.n	8007f66 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007ef6:	d036      	beq.n	8007f66 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007f00:	d031      	beq.n	8007f66 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	f5b3 0fe0 	cmp.w	r3, #7340032	@ 0x700000
 8007f0a:	d02c      	beq.n	8007f66 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007f14:	d027      	beq.n	8007f66 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	f5b3 0f10 	cmp.w	r3, #9437184	@ 0x900000
 8007f1e:	d022      	beq.n	8007f66 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8007f28:	d01d      	beq.n	8007f66 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	f5b3 0f30 	cmp.w	r3, #11534336	@ 0xb00000
 8007f32:	d018      	beq.n	8007f66 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007f3c:	d013      	beq.n	8007f66 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	f5b3 0f50 	cmp.w	r3, #13631488	@ 0xd00000
 8007f46:	d00e      	beq.n	8007f66 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	f5b3 0f60 	cmp.w	r3, #14680064	@ 0xe00000
 8007f50:	d009      	beq.n	8007f66 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	f5b3 0f70 	cmp.w	r3, #15728640	@ 0xf00000
 8007f5a:	d004      	beq.n	8007f66 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007f5c:	f240 71bf 	movw	r1, #1983	@ 0x7bf
 8007f60:	482f      	ldr	r0, [pc, #188]	@ (8008020 <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 8007f62:	f7fa faff 	bl	8002564 <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007f6c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	68fa      	ldr	r2, [r7, #12]
 8007f74:	4313      	orrs	r3, r2
 8007f76:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	68fa      	ldr	r2, [r7, #12]
 8007f86:	4313      	orrs	r3, r2
 8007f88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	68fa      	ldr	r2, [r7, #12]
 8007f90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a20      	ldr	r2, [pc, #128]	@ (8008018 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d022      	beq.n	8007fe2 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fa4:	d01d      	beq.n	8007fe2 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a1e      	ldr	r2, [pc, #120]	@ (8008024 <HAL_TIMEx_MasterConfigSynchronization+0x29c>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d018      	beq.n	8007fe2 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a1c      	ldr	r2, [pc, #112]	@ (8008028 <HAL_TIMEx_MasterConfigSynchronization+0x2a0>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d013      	beq.n	8007fe2 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a1b      	ldr	r2, [pc, #108]	@ (800802c <HAL_TIMEx_MasterConfigSynchronization+0x2a4>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d00e      	beq.n	8007fe2 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a14      	ldr	r2, [pc, #80]	@ (800801c <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d009      	beq.n	8007fe2 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4a17      	ldr	r2, [pc, #92]	@ (8008030 <HAL_TIMEx_MasterConfigSynchronization+0x2a8>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d004      	beq.n	8007fe2 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a15      	ldr	r2, [pc, #84]	@ (8008034 <HAL_TIMEx_MasterConfigSynchronization+0x2ac>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d10c      	bne.n	8007ffc <HAL_TIMEx_MasterConfigSynchronization+0x274>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007fe8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	68ba      	ldr	r2, [r7, #8]
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	68ba      	ldr	r2, [r7, #8]
 8007ffa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2201      	movs	r2, #1
 8008000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2200      	movs	r2, #0
 8008008:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800800c:	2300      	movs	r3, #0
}
 800800e:	4618      	mov	r0, r3
 8008010:	3710      	adds	r7, #16
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}
 8008016:	bf00      	nop
 8008018:	40010000 	.word	0x40010000
 800801c:	40010400 	.word	0x40010400
 8008020:	0801099c 	.word	0x0801099c
 8008024:	40000400 	.word	0x40000400
 8008028:	40000800 	.word	0x40000800
 800802c:	40000c00 	.word	0x40000c00
 8008030:	40014000 	.word	0x40014000
 8008034:	40001800 	.word	0x40001800

08008038 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b082      	sub	sp, #8
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d101      	bne.n	800804a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008046:	2301      	movs	r3, #1
 8008048:	e09f      	b.n	800818a <HAL_UART_Init+0x152>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	699b      	ldr	r3, [r3, #24]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d02d      	beq.n	80080ae <HAL_UART_Init+0x76>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4a4f      	ldr	r2, [pc, #316]	@ (8008194 <HAL_UART_Init+0x15c>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d055      	beq.n	8008108 <HAL_UART_Init+0xd0>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a4d      	ldr	r2, [pc, #308]	@ (8008198 <HAL_UART_Init+0x160>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d050      	beq.n	8008108 <HAL_UART_Init+0xd0>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a4c      	ldr	r2, [pc, #304]	@ (800819c <HAL_UART_Init+0x164>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d04b      	beq.n	8008108 <HAL_UART_Init+0xd0>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a4a      	ldr	r2, [pc, #296]	@ (80081a0 <HAL_UART_Init+0x168>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d046      	beq.n	8008108 <HAL_UART_Init+0xd0>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4a49      	ldr	r2, [pc, #292]	@ (80081a4 <HAL_UART_Init+0x16c>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d041      	beq.n	8008108 <HAL_UART_Init+0xd0>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a47      	ldr	r2, [pc, #284]	@ (80081a8 <HAL_UART_Init+0x170>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d03c      	beq.n	8008108 <HAL_UART_Init+0xd0>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a46      	ldr	r2, [pc, #280]	@ (80081ac <HAL_UART_Init+0x174>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d037      	beq.n	8008108 <HAL_UART_Init+0xd0>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a44      	ldr	r2, [pc, #272]	@ (80081b0 <HAL_UART_Init+0x178>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d032      	beq.n	8008108 <HAL_UART_Init+0xd0>
 80080a2:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80080a6:	4843      	ldr	r0, [pc, #268]	@ (80081b4 <HAL_UART_Init+0x17c>)
 80080a8:	f7fa fa5c 	bl	8002564 <assert_failed>
 80080ac:	e02c      	b.n	8008108 <HAL_UART_Init+0xd0>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4a38      	ldr	r2, [pc, #224]	@ (8008194 <HAL_UART_Init+0x15c>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d027      	beq.n	8008108 <HAL_UART_Init+0xd0>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4a36      	ldr	r2, [pc, #216]	@ (8008198 <HAL_UART_Init+0x160>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d022      	beq.n	8008108 <HAL_UART_Init+0xd0>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a35      	ldr	r2, [pc, #212]	@ (800819c <HAL_UART_Init+0x164>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d01d      	beq.n	8008108 <HAL_UART_Init+0xd0>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a33      	ldr	r2, [pc, #204]	@ (80081a0 <HAL_UART_Init+0x168>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d018      	beq.n	8008108 <HAL_UART_Init+0xd0>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a32      	ldr	r2, [pc, #200]	@ (80081a4 <HAL_UART_Init+0x16c>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d013      	beq.n	8008108 <HAL_UART_Init+0xd0>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a30      	ldr	r2, [pc, #192]	@ (80081a8 <HAL_UART_Init+0x170>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d00e      	beq.n	8008108 <HAL_UART_Init+0xd0>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a2f      	ldr	r2, [pc, #188]	@ (80081ac <HAL_UART_Init+0x174>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d009      	beq.n	8008108 <HAL_UART_Init+0xd0>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a2d      	ldr	r2, [pc, #180]	@ (80081b0 <HAL_UART_Init+0x178>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d004      	beq.n	8008108 <HAL_UART_Init+0xd0>
 80080fe:	f240 1131 	movw	r1, #305	@ 0x131
 8008102:	482c      	ldr	r0, [pc, #176]	@ (80081b4 <HAL_UART_Init+0x17c>)
 8008104:	f7fa fa2e 	bl	8002564 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800810c:	2b00      	cmp	r3, #0
 800810e:	d106      	bne.n	800811e <HAL_UART_Init+0xe6>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2200      	movs	r2, #0
 8008114:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f7fa fd8f 	bl	8002c3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2224      	movs	r2, #36	@ 0x24
 8008122:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	681a      	ldr	r2, [r3, #0]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f022 0201 	bic.w	r2, r2, #1
 8008132:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008138:	2b00      	cmp	r3, #0
 800813a:	d002      	beq.n	8008142 <HAL_UART_Init+0x10a>
  {
    UART_AdvFeatureConfig(huart);
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f000 fb31 	bl	80087a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f000 f838 	bl	80081b8 <UART_SetConfig>
 8008148:	4603      	mov	r3, r0
 800814a:	2b01      	cmp	r3, #1
 800814c:	d101      	bne.n	8008152 <HAL_UART_Init+0x11a>
  {
    return HAL_ERROR;
 800814e:	2301      	movs	r3, #1
 8008150:	e01b      	b.n	800818a <HAL_UART_Init+0x152>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	685a      	ldr	r2, [r3, #4]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008160:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	689a      	ldr	r2, [r3, #8]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008170:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	681a      	ldr	r2, [r3, #0]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f042 0201 	orr.w	r2, r2, #1
 8008180:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 fc66 	bl	8008a54 <UART_CheckIdleState>
 8008188:	4603      	mov	r3, r0
}
 800818a:	4618      	mov	r0, r3
 800818c:	3708      	adds	r7, #8
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
 8008192:	bf00      	nop
 8008194:	40011000 	.word	0x40011000
 8008198:	40004400 	.word	0x40004400
 800819c:	40004800 	.word	0x40004800
 80081a0:	40004c00 	.word	0x40004c00
 80081a4:	40005000 	.word	0x40005000
 80081a8:	40011400 	.word	0x40011400
 80081ac:	40007800 	.word	0x40007800
 80081b0:	40007c00 	.word	0x40007c00
 80081b4:	080109d8 	.word	0x080109d8

080081b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b088      	sub	sp, #32
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80081c0:	2300      	movs	r3, #0
 80081c2:	77bb      	strb	r3, [r7, #30]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	4aa0      	ldr	r2, [pc, #640]	@ (800844c <UART_SetConfig+0x294>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d904      	bls.n	80081d8 <UART_SetConfig+0x20>
 80081ce:	f640 315f 	movw	r1, #2911	@ 0xb5f
 80081d2:	489f      	ldr	r0, [pc, #636]	@ (8008450 <UART_SetConfig+0x298>)
 80081d4:	f7fa f9c6 	bl	8002564 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80081e0:	d00d      	beq.n	80081fe <UART_SetConfig+0x46>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	689b      	ldr	r3, [r3, #8]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d009      	beq.n	80081fe <UART_SetConfig+0x46>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081f2:	d004      	beq.n	80081fe <UART_SetConfig+0x46>
 80081f4:	f44f 6136 	mov.w	r1, #2912	@ 0xb60
 80081f8:	4895      	ldr	r0, [pc, #596]	@ (8008450 <UART_SetConfig+0x298>)
 80081fa:	f7fa f9b3 	bl	8002564 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	68db      	ldr	r3, [r3, #12]
 8008202:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008206:	d012      	beq.n	800822e <UART_SetConfig+0x76>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	68db      	ldr	r3, [r3, #12]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d00e      	beq.n	800822e <UART_SetConfig+0x76>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	68db      	ldr	r3, [r3, #12]
 8008214:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008218:	d009      	beq.n	800822e <UART_SetConfig+0x76>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	68db      	ldr	r3, [r3, #12]
 800821e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008222:	d004      	beq.n	800822e <UART_SetConfig+0x76>
 8008224:	f640 3161 	movw	r1, #2913	@ 0xb61
 8008228:	4889      	ldr	r0, [pc, #548]	@ (8008450 <UART_SetConfig+0x298>)
 800822a:	f7fa f99b 	bl	8002564 <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6a1b      	ldr	r3, [r3, #32]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d009      	beq.n	800824a <UART_SetConfig+0x92>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6a1b      	ldr	r3, [r3, #32]
 800823a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800823e:	d004      	beq.n	800824a <UART_SetConfig+0x92>
 8008240:	f640 3162 	movw	r1, #2914	@ 0xb62
 8008244:	4882      	ldr	r0, [pc, #520]	@ (8008450 <UART_SetConfig+0x298>)
 8008246:	f7fa f98d 	bl	8002564 <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	691b      	ldr	r3, [r3, #16]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d00e      	beq.n	8008270 <UART_SetConfig+0xb8>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	691b      	ldr	r3, [r3, #16]
 8008256:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800825a:	d009      	beq.n	8008270 <UART_SetConfig+0xb8>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	691b      	ldr	r3, [r3, #16]
 8008260:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008264:	d004      	beq.n	8008270 <UART_SetConfig+0xb8>
 8008266:	f640 3164 	movw	r1, #2916	@ 0xb64
 800826a:	4879      	ldr	r0, [pc, #484]	@ (8008450 <UART_SetConfig+0x298>)
 800826c:	f7fa f97a 	bl	8002564 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	695b      	ldr	r3, [r3, #20]
 8008274:	f023 030c 	bic.w	r3, r3, #12
 8008278:	2b00      	cmp	r3, #0
 800827a:	d103      	bne.n	8008284 <UART_SetConfig+0xcc>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	695b      	ldr	r3, [r3, #20]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d104      	bne.n	800828e <UART_SetConfig+0xd6>
 8008284:	f640 3165 	movw	r1, #2917	@ 0xb65
 8008288:	4871      	ldr	r0, [pc, #452]	@ (8008450 <UART_SetConfig+0x298>)
 800828a:	f7fa f96b 	bl	8002564 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	699b      	ldr	r3, [r3, #24]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d013      	beq.n	80082be <UART_SetConfig+0x106>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	699b      	ldr	r3, [r3, #24]
 800829a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800829e:	d00e      	beq.n	80082be <UART_SetConfig+0x106>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	699b      	ldr	r3, [r3, #24]
 80082a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082a8:	d009      	beq.n	80082be <UART_SetConfig+0x106>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	699b      	ldr	r3, [r3, #24]
 80082ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80082b2:	d004      	beq.n	80082be <UART_SetConfig+0x106>
 80082b4:	f640 3166 	movw	r1, #2918	@ 0xb66
 80082b8:	4865      	ldr	r0, [pc, #404]	@ (8008450 <UART_SetConfig+0x298>)
 80082ba:	f7fa f953 	bl	8002564 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	69db      	ldr	r3, [r3, #28]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d009      	beq.n	80082da <UART_SetConfig+0x122>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	69db      	ldr	r3, [r3, #28]
 80082ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80082ce:	d004      	beq.n	80082da <UART_SetConfig+0x122>
 80082d0:	f640 3167 	movw	r1, #2919	@ 0xb67
 80082d4:	485e      	ldr	r0, [pc, #376]	@ (8008450 <UART_SetConfig+0x298>)
 80082d6:	f7fa f945 	bl	8002564 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	689a      	ldr	r2, [r3, #8]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	691b      	ldr	r3, [r3, #16]
 80082e2:	431a      	orrs	r2, r3
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	695b      	ldr	r3, [r3, #20]
 80082e8:	431a      	orrs	r2, r3
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	69db      	ldr	r3, [r3, #28]
 80082ee:	4313      	orrs	r3, r2
 80082f0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	681a      	ldr	r2, [r3, #0]
 80082f8:	4b56      	ldr	r3, [pc, #344]	@ (8008454 <UART_SetConfig+0x29c>)
 80082fa:	4013      	ands	r3, r2
 80082fc:	687a      	ldr	r2, [r7, #4]
 80082fe:	6812      	ldr	r2, [r2, #0]
 8008300:	6979      	ldr	r1, [r7, #20]
 8008302:	430b      	orrs	r3, r1
 8008304:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	68da      	ldr	r2, [r3, #12]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	430a      	orrs	r2, r1
 800831a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	699b      	ldr	r3, [r3, #24]
 8008320:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6a1b      	ldr	r3, [r3, #32]
 8008326:	697a      	ldr	r2, [r7, #20]
 8008328:	4313      	orrs	r3, r2
 800832a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	689b      	ldr	r3, [r3, #8]
 8008332:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	697a      	ldr	r2, [r7, #20]
 800833c:	430a      	orrs	r2, r1
 800833e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a44      	ldr	r2, [pc, #272]	@ (8008458 <UART_SetConfig+0x2a0>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d121      	bne.n	800838e <UART_SetConfig+0x1d6>
 800834a:	4b44      	ldr	r3, [pc, #272]	@ (800845c <UART_SetConfig+0x2a4>)
 800834c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008350:	f003 0303 	and.w	r3, r3, #3
 8008354:	2b03      	cmp	r3, #3
 8008356:	d817      	bhi.n	8008388 <UART_SetConfig+0x1d0>
 8008358:	a201      	add	r2, pc, #4	@ (adr r2, 8008360 <UART_SetConfig+0x1a8>)
 800835a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800835e:	bf00      	nop
 8008360:	08008371 	.word	0x08008371
 8008364:	0800837d 	.word	0x0800837d
 8008368:	08008377 	.word	0x08008377
 800836c:	08008383 	.word	0x08008383
 8008370:	2301      	movs	r3, #1
 8008372:	77fb      	strb	r3, [r7, #31]
 8008374:	e14c      	b.n	8008610 <UART_SetConfig+0x458>
 8008376:	2302      	movs	r3, #2
 8008378:	77fb      	strb	r3, [r7, #31]
 800837a:	e149      	b.n	8008610 <UART_SetConfig+0x458>
 800837c:	2304      	movs	r3, #4
 800837e:	77fb      	strb	r3, [r7, #31]
 8008380:	e146      	b.n	8008610 <UART_SetConfig+0x458>
 8008382:	2308      	movs	r3, #8
 8008384:	77fb      	strb	r3, [r7, #31]
 8008386:	e143      	b.n	8008610 <UART_SetConfig+0x458>
 8008388:	2310      	movs	r3, #16
 800838a:	77fb      	strb	r3, [r7, #31]
 800838c:	e140      	b.n	8008610 <UART_SetConfig+0x458>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4a33      	ldr	r2, [pc, #204]	@ (8008460 <UART_SetConfig+0x2a8>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d132      	bne.n	80083fe <UART_SetConfig+0x246>
 8008398:	4b30      	ldr	r3, [pc, #192]	@ (800845c <UART_SetConfig+0x2a4>)
 800839a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800839e:	f003 030c 	and.w	r3, r3, #12
 80083a2:	2b0c      	cmp	r3, #12
 80083a4:	d828      	bhi.n	80083f8 <UART_SetConfig+0x240>
 80083a6:	a201      	add	r2, pc, #4	@ (adr r2, 80083ac <UART_SetConfig+0x1f4>)
 80083a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ac:	080083e1 	.word	0x080083e1
 80083b0:	080083f9 	.word	0x080083f9
 80083b4:	080083f9 	.word	0x080083f9
 80083b8:	080083f9 	.word	0x080083f9
 80083bc:	080083ed 	.word	0x080083ed
 80083c0:	080083f9 	.word	0x080083f9
 80083c4:	080083f9 	.word	0x080083f9
 80083c8:	080083f9 	.word	0x080083f9
 80083cc:	080083e7 	.word	0x080083e7
 80083d0:	080083f9 	.word	0x080083f9
 80083d4:	080083f9 	.word	0x080083f9
 80083d8:	080083f9 	.word	0x080083f9
 80083dc:	080083f3 	.word	0x080083f3
 80083e0:	2300      	movs	r3, #0
 80083e2:	77fb      	strb	r3, [r7, #31]
 80083e4:	e114      	b.n	8008610 <UART_SetConfig+0x458>
 80083e6:	2302      	movs	r3, #2
 80083e8:	77fb      	strb	r3, [r7, #31]
 80083ea:	e111      	b.n	8008610 <UART_SetConfig+0x458>
 80083ec:	2304      	movs	r3, #4
 80083ee:	77fb      	strb	r3, [r7, #31]
 80083f0:	e10e      	b.n	8008610 <UART_SetConfig+0x458>
 80083f2:	2308      	movs	r3, #8
 80083f4:	77fb      	strb	r3, [r7, #31]
 80083f6:	e10b      	b.n	8008610 <UART_SetConfig+0x458>
 80083f8:	2310      	movs	r3, #16
 80083fa:	77fb      	strb	r3, [r7, #31]
 80083fc:	e108      	b.n	8008610 <UART_SetConfig+0x458>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4a18      	ldr	r2, [pc, #96]	@ (8008464 <UART_SetConfig+0x2ac>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d12f      	bne.n	8008468 <UART_SetConfig+0x2b0>
 8008408:	4b14      	ldr	r3, [pc, #80]	@ (800845c <UART_SetConfig+0x2a4>)
 800840a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800840e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008412:	2b30      	cmp	r3, #48	@ 0x30
 8008414:	d013      	beq.n	800843e <UART_SetConfig+0x286>
 8008416:	2b30      	cmp	r3, #48	@ 0x30
 8008418:	d814      	bhi.n	8008444 <UART_SetConfig+0x28c>
 800841a:	2b20      	cmp	r3, #32
 800841c:	d009      	beq.n	8008432 <UART_SetConfig+0x27a>
 800841e:	2b20      	cmp	r3, #32
 8008420:	d810      	bhi.n	8008444 <UART_SetConfig+0x28c>
 8008422:	2b00      	cmp	r3, #0
 8008424:	d002      	beq.n	800842c <UART_SetConfig+0x274>
 8008426:	2b10      	cmp	r3, #16
 8008428:	d006      	beq.n	8008438 <UART_SetConfig+0x280>
 800842a:	e00b      	b.n	8008444 <UART_SetConfig+0x28c>
 800842c:	2300      	movs	r3, #0
 800842e:	77fb      	strb	r3, [r7, #31]
 8008430:	e0ee      	b.n	8008610 <UART_SetConfig+0x458>
 8008432:	2302      	movs	r3, #2
 8008434:	77fb      	strb	r3, [r7, #31]
 8008436:	e0eb      	b.n	8008610 <UART_SetConfig+0x458>
 8008438:	2304      	movs	r3, #4
 800843a:	77fb      	strb	r3, [r7, #31]
 800843c:	e0e8      	b.n	8008610 <UART_SetConfig+0x458>
 800843e:	2308      	movs	r3, #8
 8008440:	77fb      	strb	r3, [r7, #31]
 8008442:	e0e5      	b.n	8008610 <UART_SetConfig+0x458>
 8008444:	2310      	movs	r3, #16
 8008446:	77fb      	strb	r3, [r7, #31]
 8008448:	e0e2      	b.n	8008610 <UART_SetConfig+0x458>
 800844a:	bf00      	nop
 800844c:	019bfcc0 	.word	0x019bfcc0
 8008450:	080109d8 	.word	0x080109d8
 8008454:	efff69f3 	.word	0xefff69f3
 8008458:	40011000 	.word	0x40011000
 800845c:	40023800 	.word	0x40023800
 8008460:	40004400 	.word	0x40004400
 8008464:	40004800 	.word	0x40004800
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4aa5      	ldr	r2, [pc, #660]	@ (8008704 <UART_SetConfig+0x54c>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d120      	bne.n	80084b4 <UART_SetConfig+0x2fc>
 8008472:	4ba5      	ldr	r3, [pc, #660]	@ (8008708 <UART_SetConfig+0x550>)
 8008474:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008478:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800847c:	2bc0      	cmp	r3, #192	@ 0xc0
 800847e:	d013      	beq.n	80084a8 <UART_SetConfig+0x2f0>
 8008480:	2bc0      	cmp	r3, #192	@ 0xc0
 8008482:	d814      	bhi.n	80084ae <UART_SetConfig+0x2f6>
 8008484:	2b80      	cmp	r3, #128	@ 0x80
 8008486:	d009      	beq.n	800849c <UART_SetConfig+0x2e4>
 8008488:	2b80      	cmp	r3, #128	@ 0x80
 800848a:	d810      	bhi.n	80084ae <UART_SetConfig+0x2f6>
 800848c:	2b00      	cmp	r3, #0
 800848e:	d002      	beq.n	8008496 <UART_SetConfig+0x2de>
 8008490:	2b40      	cmp	r3, #64	@ 0x40
 8008492:	d006      	beq.n	80084a2 <UART_SetConfig+0x2ea>
 8008494:	e00b      	b.n	80084ae <UART_SetConfig+0x2f6>
 8008496:	2300      	movs	r3, #0
 8008498:	77fb      	strb	r3, [r7, #31]
 800849a:	e0b9      	b.n	8008610 <UART_SetConfig+0x458>
 800849c:	2302      	movs	r3, #2
 800849e:	77fb      	strb	r3, [r7, #31]
 80084a0:	e0b6      	b.n	8008610 <UART_SetConfig+0x458>
 80084a2:	2304      	movs	r3, #4
 80084a4:	77fb      	strb	r3, [r7, #31]
 80084a6:	e0b3      	b.n	8008610 <UART_SetConfig+0x458>
 80084a8:	2308      	movs	r3, #8
 80084aa:	77fb      	strb	r3, [r7, #31]
 80084ac:	e0b0      	b.n	8008610 <UART_SetConfig+0x458>
 80084ae:	2310      	movs	r3, #16
 80084b0:	77fb      	strb	r3, [r7, #31]
 80084b2:	e0ad      	b.n	8008610 <UART_SetConfig+0x458>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a94      	ldr	r2, [pc, #592]	@ (800870c <UART_SetConfig+0x554>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d125      	bne.n	800850a <UART_SetConfig+0x352>
 80084be:	4b92      	ldr	r3, [pc, #584]	@ (8008708 <UART_SetConfig+0x550>)
 80084c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80084c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80084cc:	d017      	beq.n	80084fe <UART_SetConfig+0x346>
 80084ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80084d2:	d817      	bhi.n	8008504 <UART_SetConfig+0x34c>
 80084d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084d8:	d00b      	beq.n	80084f2 <UART_SetConfig+0x33a>
 80084da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084de:	d811      	bhi.n	8008504 <UART_SetConfig+0x34c>
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d003      	beq.n	80084ec <UART_SetConfig+0x334>
 80084e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084e8:	d006      	beq.n	80084f8 <UART_SetConfig+0x340>
 80084ea:	e00b      	b.n	8008504 <UART_SetConfig+0x34c>
 80084ec:	2300      	movs	r3, #0
 80084ee:	77fb      	strb	r3, [r7, #31]
 80084f0:	e08e      	b.n	8008610 <UART_SetConfig+0x458>
 80084f2:	2302      	movs	r3, #2
 80084f4:	77fb      	strb	r3, [r7, #31]
 80084f6:	e08b      	b.n	8008610 <UART_SetConfig+0x458>
 80084f8:	2304      	movs	r3, #4
 80084fa:	77fb      	strb	r3, [r7, #31]
 80084fc:	e088      	b.n	8008610 <UART_SetConfig+0x458>
 80084fe:	2308      	movs	r3, #8
 8008500:	77fb      	strb	r3, [r7, #31]
 8008502:	e085      	b.n	8008610 <UART_SetConfig+0x458>
 8008504:	2310      	movs	r3, #16
 8008506:	77fb      	strb	r3, [r7, #31]
 8008508:	e082      	b.n	8008610 <UART_SetConfig+0x458>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4a80      	ldr	r2, [pc, #512]	@ (8008710 <UART_SetConfig+0x558>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d125      	bne.n	8008560 <UART_SetConfig+0x3a8>
 8008514:	4b7c      	ldr	r3, [pc, #496]	@ (8008708 <UART_SetConfig+0x550>)
 8008516:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800851a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800851e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008522:	d017      	beq.n	8008554 <UART_SetConfig+0x39c>
 8008524:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008528:	d817      	bhi.n	800855a <UART_SetConfig+0x3a2>
 800852a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800852e:	d00b      	beq.n	8008548 <UART_SetConfig+0x390>
 8008530:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008534:	d811      	bhi.n	800855a <UART_SetConfig+0x3a2>
 8008536:	2b00      	cmp	r3, #0
 8008538:	d003      	beq.n	8008542 <UART_SetConfig+0x38a>
 800853a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800853e:	d006      	beq.n	800854e <UART_SetConfig+0x396>
 8008540:	e00b      	b.n	800855a <UART_SetConfig+0x3a2>
 8008542:	2301      	movs	r3, #1
 8008544:	77fb      	strb	r3, [r7, #31]
 8008546:	e063      	b.n	8008610 <UART_SetConfig+0x458>
 8008548:	2302      	movs	r3, #2
 800854a:	77fb      	strb	r3, [r7, #31]
 800854c:	e060      	b.n	8008610 <UART_SetConfig+0x458>
 800854e:	2304      	movs	r3, #4
 8008550:	77fb      	strb	r3, [r7, #31]
 8008552:	e05d      	b.n	8008610 <UART_SetConfig+0x458>
 8008554:	2308      	movs	r3, #8
 8008556:	77fb      	strb	r3, [r7, #31]
 8008558:	e05a      	b.n	8008610 <UART_SetConfig+0x458>
 800855a:	2310      	movs	r3, #16
 800855c:	77fb      	strb	r3, [r7, #31]
 800855e:	e057      	b.n	8008610 <UART_SetConfig+0x458>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a6b      	ldr	r2, [pc, #428]	@ (8008714 <UART_SetConfig+0x55c>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d125      	bne.n	80085b6 <UART_SetConfig+0x3fe>
 800856a:	4b67      	ldr	r3, [pc, #412]	@ (8008708 <UART_SetConfig+0x550>)
 800856c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008570:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8008574:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008578:	d017      	beq.n	80085aa <UART_SetConfig+0x3f2>
 800857a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800857e:	d817      	bhi.n	80085b0 <UART_SetConfig+0x3f8>
 8008580:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008584:	d00b      	beq.n	800859e <UART_SetConfig+0x3e6>
 8008586:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800858a:	d811      	bhi.n	80085b0 <UART_SetConfig+0x3f8>
 800858c:	2b00      	cmp	r3, #0
 800858e:	d003      	beq.n	8008598 <UART_SetConfig+0x3e0>
 8008590:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008594:	d006      	beq.n	80085a4 <UART_SetConfig+0x3ec>
 8008596:	e00b      	b.n	80085b0 <UART_SetConfig+0x3f8>
 8008598:	2300      	movs	r3, #0
 800859a:	77fb      	strb	r3, [r7, #31]
 800859c:	e038      	b.n	8008610 <UART_SetConfig+0x458>
 800859e:	2302      	movs	r3, #2
 80085a0:	77fb      	strb	r3, [r7, #31]
 80085a2:	e035      	b.n	8008610 <UART_SetConfig+0x458>
 80085a4:	2304      	movs	r3, #4
 80085a6:	77fb      	strb	r3, [r7, #31]
 80085a8:	e032      	b.n	8008610 <UART_SetConfig+0x458>
 80085aa:	2308      	movs	r3, #8
 80085ac:	77fb      	strb	r3, [r7, #31]
 80085ae:	e02f      	b.n	8008610 <UART_SetConfig+0x458>
 80085b0:	2310      	movs	r3, #16
 80085b2:	77fb      	strb	r3, [r7, #31]
 80085b4:	e02c      	b.n	8008610 <UART_SetConfig+0x458>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4a57      	ldr	r2, [pc, #348]	@ (8008718 <UART_SetConfig+0x560>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d125      	bne.n	800860c <UART_SetConfig+0x454>
 80085c0:	4b51      	ldr	r3, [pc, #324]	@ (8008708 <UART_SetConfig+0x550>)
 80085c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085c6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80085ca:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80085ce:	d017      	beq.n	8008600 <UART_SetConfig+0x448>
 80085d0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80085d4:	d817      	bhi.n	8008606 <UART_SetConfig+0x44e>
 80085d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80085da:	d00b      	beq.n	80085f4 <UART_SetConfig+0x43c>
 80085dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80085e0:	d811      	bhi.n	8008606 <UART_SetConfig+0x44e>
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d003      	beq.n	80085ee <UART_SetConfig+0x436>
 80085e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80085ea:	d006      	beq.n	80085fa <UART_SetConfig+0x442>
 80085ec:	e00b      	b.n	8008606 <UART_SetConfig+0x44e>
 80085ee:	2300      	movs	r3, #0
 80085f0:	77fb      	strb	r3, [r7, #31]
 80085f2:	e00d      	b.n	8008610 <UART_SetConfig+0x458>
 80085f4:	2302      	movs	r3, #2
 80085f6:	77fb      	strb	r3, [r7, #31]
 80085f8:	e00a      	b.n	8008610 <UART_SetConfig+0x458>
 80085fa:	2304      	movs	r3, #4
 80085fc:	77fb      	strb	r3, [r7, #31]
 80085fe:	e007      	b.n	8008610 <UART_SetConfig+0x458>
 8008600:	2308      	movs	r3, #8
 8008602:	77fb      	strb	r3, [r7, #31]
 8008604:	e004      	b.n	8008610 <UART_SetConfig+0x458>
 8008606:	2310      	movs	r3, #16
 8008608:	77fb      	strb	r3, [r7, #31]
 800860a:	e001      	b.n	8008610 <UART_SetConfig+0x458>
 800860c:	2310      	movs	r3, #16
 800860e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	69db      	ldr	r3, [r3, #28]
 8008614:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008618:	d15c      	bne.n	80086d4 <UART_SetConfig+0x51c>
  {
    switch (clocksource)
 800861a:	7ffb      	ldrb	r3, [r7, #31]
 800861c:	2b08      	cmp	r3, #8
 800861e:	d828      	bhi.n	8008672 <UART_SetConfig+0x4ba>
 8008620:	a201      	add	r2, pc, #4	@ (adr r2, 8008628 <UART_SetConfig+0x470>)
 8008622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008626:	bf00      	nop
 8008628:	0800864d 	.word	0x0800864d
 800862c:	08008655 	.word	0x08008655
 8008630:	0800865d 	.word	0x0800865d
 8008634:	08008673 	.word	0x08008673
 8008638:	08008663 	.word	0x08008663
 800863c:	08008673 	.word	0x08008673
 8008640:	08008673 	.word	0x08008673
 8008644:	08008673 	.word	0x08008673
 8008648:	0800866b 	.word	0x0800866b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800864c:	f7fc f87c 	bl	8004748 <HAL_RCC_GetPCLK1Freq>
 8008650:	61b8      	str	r0, [r7, #24]
        break;
 8008652:	e013      	b.n	800867c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008654:	f7fc f88c 	bl	8004770 <HAL_RCC_GetPCLK2Freq>
 8008658:	61b8      	str	r0, [r7, #24]
        break;
 800865a:	e00f      	b.n	800867c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800865c:	4b2f      	ldr	r3, [pc, #188]	@ (800871c <UART_SetConfig+0x564>)
 800865e:	61bb      	str	r3, [r7, #24]
        break;
 8008660:	e00c      	b.n	800867c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008662:	f7fb ff9f 	bl	80045a4 <HAL_RCC_GetSysClockFreq>
 8008666:	61b8      	str	r0, [r7, #24]
        break;
 8008668:	e008      	b.n	800867c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800866a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800866e:	61bb      	str	r3, [r7, #24]
        break;
 8008670:	e004      	b.n	800867c <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 8008672:	2300      	movs	r3, #0
 8008674:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008676:	2301      	movs	r3, #1
 8008678:	77bb      	strb	r3, [r7, #30]
        break;
 800867a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800867c:	69bb      	ldr	r3, [r7, #24]
 800867e:	2b00      	cmp	r3, #0
 8008680:	f000 8082 	beq.w	8008788 <UART_SetConfig+0x5d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008684:	69bb      	ldr	r3, [r7, #24]
 8008686:	005a      	lsls	r2, r3, #1
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	085b      	lsrs	r3, r3, #1
 800868e:	441a      	add	r2, r3
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	fbb2 f3f3 	udiv	r3, r2, r3
 8008698:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	2b0f      	cmp	r3, #15
 800869e:	d916      	bls.n	80086ce <UART_SetConfig+0x516>
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80086a6:	d212      	bcs.n	80086ce <UART_SetConfig+0x516>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	b29b      	uxth	r3, r3
 80086ac:	f023 030f 	bic.w	r3, r3, #15
 80086b0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	085b      	lsrs	r3, r3, #1
 80086b6:	b29b      	uxth	r3, r3
 80086b8:	f003 0307 	and.w	r3, r3, #7
 80086bc:	b29a      	uxth	r2, r3
 80086be:	89fb      	ldrh	r3, [r7, #14]
 80086c0:	4313      	orrs	r3, r2
 80086c2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	89fa      	ldrh	r2, [r7, #14]
 80086ca:	60da      	str	r2, [r3, #12]
 80086cc:	e05c      	b.n	8008788 <UART_SetConfig+0x5d0>
      }
      else
      {
        ret = HAL_ERROR;
 80086ce:	2301      	movs	r3, #1
 80086d0:	77bb      	strb	r3, [r7, #30]
 80086d2:	e059      	b.n	8008788 <UART_SetConfig+0x5d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80086d4:	7ffb      	ldrb	r3, [r7, #31]
 80086d6:	2b08      	cmp	r3, #8
 80086d8:	d835      	bhi.n	8008746 <UART_SetConfig+0x58e>
 80086da:	a201      	add	r2, pc, #4	@ (adr r2, 80086e0 <UART_SetConfig+0x528>)
 80086dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086e0:	08008721 	.word	0x08008721
 80086e4:	08008729 	.word	0x08008729
 80086e8:	08008731 	.word	0x08008731
 80086ec:	08008747 	.word	0x08008747
 80086f0:	08008737 	.word	0x08008737
 80086f4:	08008747 	.word	0x08008747
 80086f8:	08008747 	.word	0x08008747
 80086fc:	08008747 	.word	0x08008747
 8008700:	0800873f 	.word	0x0800873f
 8008704:	40004c00 	.word	0x40004c00
 8008708:	40023800 	.word	0x40023800
 800870c:	40005000 	.word	0x40005000
 8008710:	40011400 	.word	0x40011400
 8008714:	40007800 	.word	0x40007800
 8008718:	40007c00 	.word	0x40007c00
 800871c:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008720:	f7fc f812 	bl	8004748 <HAL_RCC_GetPCLK1Freq>
 8008724:	61b8      	str	r0, [r7, #24]
        break;
 8008726:	e013      	b.n	8008750 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008728:	f7fc f822 	bl	8004770 <HAL_RCC_GetPCLK2Freq>
 800872c:	61b8      	str	r0, [r7, #24]
        break;
 800872e:	e00f      	b.n	8008750 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008730:	4b1b      	ldr	r3, [pc, #108]	@ (80087a0 <UART_SetConfig+0x5e8>)
 8008732:	61bb      	str	r3, [r7, #24]
        break;
 8008734:	e00c      	b.n	8008750 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008736:	f7fb ff35 	bl	80045a4 <HAL_RCC_GetSysClockFreq>
 800873a:	61b8      	str	r0, [r7, #24]
        break;
 800873c:	e008      	b.n	8008750 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800873e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008742:	61bb      	str	r3, [r7, #24]
        break;
 8008744:	e004      	b.n	8008750 <UART_SetConfig+0x598>
      default:
        pclk = 0U;
 8008746:	2300      	movs	r3, #0
 8008748:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800874a:	2301      	movs	r3, #1
 800874c:	77bb      	strb	r3, [r7, #30]
        break;
 800874e:	bf00      	nop
    }

    if (pclk != 0U)
 8008750:	69bb      	ldr	r3, [r7, #24]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d018      	beq.n	8008788 <UART_SetConfig+0x5d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	685b      	ldr	r3, [r3, #4]
 800875a:	085a      	lsrs	r2, r3, #1
 800875c:	69bb      	ldr	r3, [r7, #24]
 800875e:	441a      	add	r2, r3
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	fbb2 f3f3 	udiv	r3, r2, r3
 8008768:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	2b0f      	cmp	r3, #15
 800876e:	d909      	bls.n	8008784 <UART_SetConfig+0x5cc>
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008776:	d205      	bcs.n	8008784 <UART_SetConfig+0x5cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	b29a      	uxth	r2, r3
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	60da      	str	r2, [r3, #12]
 8008782:	e001      	b.n	8008788 <UART_SetConfig+0x5d0>
      }
      else
      {
        ret = HAL_ERROR;
 8008784:	2301      	movs	r3, #1
 8008786:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2200      	movs	r2, #0
 800878c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2200      	movs	r2, #0
 8008792:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008794:	7fbb      	ldrb	r3, [r7, #30]
}
 8008796:	4618      	mov	r0, r3
 8008798:	3720      	adds	r7, #32
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}
 800879e:	bf00      	nop
 80087a0:	00f42400 	.word	0x00f42400

080087a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b082      	sub	sp, #8
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087b0:	2bff      	cmp	r3, #255	@ 0xff
 80087b2:	d904      	bls.n	80087be <UART_AdvFeatureConfig+0x1a>
 80087b4:	f640 31e8 	movw	r1, #3048	@ 0xbe8
 80087b8:	488e      	ldr	r0, [pc, #568]	@ (80089f4 <UART_AdvFeatureConfig+0x250>)
 80087ba:	f7f9 fed3 	bl	8002564 <assert_failed>

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087c2:	f003 0308 	and.w	r3, r3, #8
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d018      	beq.n	80087fc <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d009      	beq.n	80087e6 <UART_AdvFeatureConfig+0x42>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80087da:	d004      	beq.n	80087e6 <UART_AdvFeatureConfig+0x42>
 80087dc:	f640 31ed 	movw	r1, #3053	@ 0xbed
 80087e0:	4884      	ldr	r0, [pc, #528]	@ (80089f4 <UART_AdvFeatureConfig+0x250>)
 80087e2:	f7f9 febf 	bl	8002564 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	685b      	ldr	r3, [r3, #4]
 80087ec:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	430a      	orrs	r2, r1
 80087fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008800:	f003 0301 	and.w	r3, r3, #1
 8008804:	2b00      	cmp	r3, #0
 8008806:	d018      	beq.n	800883a <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800880c:	2b00      	cmp	r3, #0
 800880e:	d009      	beq.n	8008824 <UART_AdvFeatureConfig+0x80>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008814:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008818:	d004      	beq.n	8008824 <UART_AdvFeatureConfig+0x80>
 800881a:	f640 31f4 	movw	r1, #3060	@ 0xbf4
 800881e:	4875      	ldr	r0, [pc, #468]	@ (80089f4 <UART_AdvFeatureConfig+0x250>)
 8008820:	f7f9 fea0 	bl	8002564 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	685b      	ldr	r3, [r3, #4]
 800882a:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	430a      	orrs	r2, r1
 8008838:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800883e:	f003 0302 	and.w	r3, r3, #2
 8008842:	2b00      	cmp	r3, #0
 8008844:	d018      	beq.n	8008878 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800884a:	2b00      	cmp	r3, #0
 800884c:	d009      	beq.n	8008862 <UART_AdvFeatureConfig+0xbe>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008852:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008856:	d004      	beq.n	8008862 <UART_AdvFeatureConfig+0xbe>
 8008858:	f640 31fb 	movw	r1, #3067	@ 0xbfb
 800885c:	4865      	ldr	r0, [pc, #404]	@ (80089f4 <UART_AdvFeatureConfig+0x250>)
 800885e:	f7f9 fe81 	bl	8002564 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	685b      	ldr	r3, [r3, #4]
 8008868:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	430a      	orrs	r2, r1
 8008876:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800887c:	f003 0304 	and.w	r3, r3, #4
 8008880:	2b00      	cmp	r3, #0
 8008882:	d018      	beq.n	80088b6 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008888:	2b00      	cmp	r3, #0
 800888a:	d009      	beq.n	80088a0 <UART_AdvFeatureConfig+0xfc>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008890:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008894:	d004      	beq.n	80088a0 <UART_AdvFeatureConfig+0xfc>
 8008896:	f640 4102 	movw	r1, #3074	@ 0xc02
 800889a:	4856      	ldr	r0, [pc, #344]	@ (80089f4 <UART_AdvFeatureConfig+0x250>)
 800889c:	f7f9 fe62 	bl	8002564 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	685b      	ldr	r3, [r3, #4]
 80088a6:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	430a      	orrs	r2, r1
 80088b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088ba:	f003 0310 	and.w	r3, r3, #16
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d018      	beq.n	80088f4 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d009      	beq.n	80088de <UART_AdvFeatureConfig+0x13a>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088d2:	d004      	beq.n	80088de <UART_AdvFeatureConfig+0x13a>
 80088d4:	f640 4109 	movw	r1, #3081	@ 0xc09
 80088d8:	4846      	ldr	r0, [pc, #280]	@ (80089f4 <UART_AdvFeatureConfig+0x250>)
 80088da:	f7f9 fe43 	bl	8002564 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	689b      	ldr	r3, [r3, #8]
 80088e4:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	430a      	orrs	r2, r1
 80088f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088f8:	f003 0320 	and.w	r3, r3, #32
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d018      	beq.n	8008932 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008904:	2b00      	cmp	r3, #0
 8008906:	d009      	beq.n	800891c <UART_AdvFeatureConfig+0x178>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800890c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008910:	d004      	beq.n	800891c <UART_AdvFeatureConfig+0x178>
 8008912:	f44f 6141 	mov.w	r1, #3088	@ 0xc10
 8008916:	4837      	ldr	r0, [pc, #220]	@ (80089f4 <UART_AdvFeatureConfig+0x250>)
 8008918:	f7f9 fe24 	bl	8002564 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	689b      	ldr	r3, [r3, #8]
 8008922:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	430a      	orrs	r2, r1
 8008930:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008936:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800893a:	2b00      	cmp	r3, #0
 800893c:	d064      	beq.n	8008a08 <UART_AdvFeatureConfig+0x264>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	4a2d      	ldr	r2, [pc, #180]	@ (80089f8 <UART_AdvFeatureConfig+0x254>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d013      	beq.n	8008970 <UART_AdvFeatureConfig+0x1cc>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4a2b      	ldr	r2, [pc, #172]	@ (80089fc <UART_AdvFeatureConfig+0x258>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d00e      	beq.n	8008970 <UART_AdvFeatureConfig+0x1cc>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4a2a      	ldr	r2, [pc, #168]	@ (8008a00 <UART_AdvFeatureConfig+0x25c>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d009      	beq.n	8008970 <UART_AdvFeatureConfig+0x1cc>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a28      	ldr	r2, [pc, #160]	@ (8008a04 <UART_AdvFeatureConfig+0x260>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d004      	beq.n	8008970 <UART_AdvFeatureConfig+0x1cc>
 8008966:	f640 4117 	movw	r1, #3095	@ 0xc17
 800896a:	4822      	ldr	r0, [pc, #136]	@ (80089f4 <UART_AdvFeatureConfig+0x250>)
 800896c:	f7f9 fdfa 	bl	8002564 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008974:	2b00      	cmp	r3, #0
 8008976:	d009      	beq.n	800898c <UART_AdvFeatureConfig+0x1e8>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800897c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008980:	d004      	beq.n	800898c <UART_AdvFeatureConfig+0x1e8>
 8008982:	f640 4118 	movw	r1, #3096	@ 0xc18
 8008986:	481b      	ldr	r0, [pc, #108]	@ (80089f4 <UART_AdvFeatureConfig+0x250>)
 8008988:	f7f9 fdec 	bl	8002564 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	685b      	ldr	r3, [r3, #4]
 8008992:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	430a      	orrs	r2, r1
 80089a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80089aa:	d12d      	bne.n	8008a08 <UART_AdvFeatureConfig+0x264>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d013      	beq.n	80089dc <UART_AdvFeatureConfig+0x238>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80089bc:	d00e      	beq.n	80089dc <UART_AdvFeatureConfig+0x238>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80089c6:	d009      	beq.n	80089dc <UART_AdvFeatureConfig+0x238>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089cc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80089d0:	d004      	beq.n	80089dc <UART_AdvFeatureConfig+0x238>
 80089d2:	f640 411d 	movw	r1, #3101	@ 0xc1d
 80089d6:	4807      	ldr	r0, [pc, #28]	@ (80089f4 <UART_AdvFeatureConfig+0x250>)
 80089d8:	f7f9 fdc4 	bl	8002564 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	430a      	orrs	r2, r1
 80089f0:	605a      	str	r2, [r3, #4]
 80089f2:	e009      	b.n	8008a08 <UART_AdvFeatureConfig+0x264>
 80089f4:	080109d8 	.word	0x080109d8
 80089f8:	40011000 	.word	0x40011000
 80089fc:	40004400 	.word	0x40004400
 8008a00:	40004800 	.word	0x40004800
 8008a04:	40011400 	.word	0x40011400
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d018      	beq.n	8008a46 <UART_AdvFeatureConfig+0x2a2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d009      	beq.n	8008a30 <UART_AdvFeatureConfig+0x28c>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a20:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008a24:	d004      	beq.n	8008a30 <UART_AdvFeatureConfig+0x28c>
 8008a26:	f640 4125 	movw	r1, #3109	@ 0xc25
 8008a2a:	4809      	ldr	r0, [pc, #36]	@ (8008a50 <UART_AdvFeatureConfig+0x2ac>)
 8008a2c:	f7f9 fd9a 	bl	8002564 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	685b      	ldr	r3, [r3, #4]
 8008a36:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	430a      	orrs	r2, r1
 8008a44:	605a      	str	r2, [r3, #4]
  }
}
 8008a46:	bf00      	nop
 8008a48:	3708      	adds	r7, #8
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}
 8008a4e:	bf00      	nop
 8008a50:	080109d8 	.word	0x080109d8

08008a54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b08c      	sub	sp, #48	@ 0x30
 8008a58:	af02      	add	r7, sp, #8
 8008a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008a64:	f7fa fa04 	bl	8002e70 <HAL_GetTick>
 8008a68:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f003 0308 	and.w	r3, r3, #8
 8008a74:	2b08      	cmp	r3, #8
 8008a76:	d12e      	bne.n	8008ad6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a78:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008a7c:	9300      	str	r3, [sp, #0]
 8008a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a80:	2200      	movs	r2, #0
 8008a82:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f000 f83b 	bl	8008b02 <UART_WaitOnFlagUntilTimeout>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d021      	beq.n	8008ad6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a98:	693b      	ldr	r3, [r7, #16]
 8008a9a:	e853 3f00 	ldrex	r3, [r3]
 8008a9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008aa6:	623b      	str	r3, [r7, #32]
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	461a      	mov	r2, r3
 8008aae:	6a3b      	ldr	r3, [r7, #32]
 8008ab0:	61fb      	str	r3, [r7, #28]
 8008ab2:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ab4:	69b9      	ldr	r1, [r7, #24]
 8008ab6:	69fa      	ldr	r2, [r7, #28]
 8008ab8:	e841 2300 	strex	r3, r2, [r1]
 8008abc:	617b      	str	r3, [r7, #20]
   return(result);
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d1e6      	bne.n	8008a92 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2220      	movs	r2, #32
 8008ac8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2200      	movs	r2, #0
 8008ace:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ad2:	2303      	movs	r3, #3
 8008ad4:	e011      	b.n	8008afa <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2220      	movs	r2, #32
 8008ada:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2220      	movs	r2, #32
 8008ae0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2200      	movs	r2, #0
 8008aee:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2200      	movs	r2, #0
 8008af4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8008af8:	2300      	movs	r3, #0
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3728      	adds	r7, #40	@ 0x28
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}

08008b02 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008b02:	b580      	push	{r7, lr}
 8008b04:	b084      	sub	sp, #16
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	60f8      	str	r0, [r7, #12]
 8008b0a:	60b9      	str	r1, [r7, #8]
 8008b0c:	603b      	str	r3, [r7, #0]
 8008b0e:	4613      	mov	r3, r2
 8008b10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b12:	e04f      	b.n	8008bb4 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b14:	69bb      	ldr	r3, [r7, #24]
 8008b16:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008b1a:	d04b      	beq.n	8008bb4 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b1c:	f7fa f9a8 	bl	8002e70 <HAL_GetTick>
 8008b20:	4602      	mov	r2, r0
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	1ad3      	subs	r3, r2, r3
 8008b26:	69ba      	ldr	r2, [r7, #24]
 8008b28:	429a      	cmp	r2, r3
 8008b2a:	d302      	bcc.n	8008b32 <UART_WaitOnFlagUntilTimeout+0x30>
 8008b2c:	69bb      	ldr	r3, [r7, #24]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d101      	bne.n	8008b36 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008b32:	2303      	movs	r3, #3
 8008b34:	e04e      	b.n	8008bd4 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f003 0304 	and.w	r3, r3, #4
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d037      	beq.n	8008bb4 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	2b80      	cmp	r3, #128	@ 0x80
 8008b48:	d034      	beq.n	8008bb4 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	2b40      	cmp	r3, #64	@ 0x40
 8008b4e:	d031      	beq.n	8008bb4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	69db      	ldr	r3, [r3, #28]
 8008b56:	f003 0308 	and.w	r3, r3, #8
 8008b5a:	2b08      	cmp	r3, #8
 8008b5c:	d110      	bne.n	8008b80 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	2208      	movs	r2, #8
 8008b64:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008b66:	68f8      	ldr	r0, [r7, #12]
 8008b68:	f000 f838 	bl	8008bdc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	2208      	movs	r2, #8
 8008b70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	2200      	movs	r2, #0
 8008b78:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	e029      	b.n	8008bd4 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	69db      	ldr	r3, [r3, #28]
 8008b86:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008b8a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008b8e:	d111      	bne.n	8008bb4 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008b98:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008b9a:	68f8      	ldr	r0, [r7, #12]
 8008b9c:	f000 f81e 	bl	8008bdc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	2220      	movs	r2, #32
 8008ba4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	2200      	movs	r2, #0
 8008bac:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8008bb0:	2303      	movs	r3, #3
 8008bb2:	e00f      	b.n	8008bd4 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	69da      	ldr	r2, [r3, #28]
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	4013      	ands	r3, r2
 8008bbe:	68ba      	ldr	r2, [r7, #8]
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	bf0c      	ite	eq
 8008bc4:	2301      	moveq	r3, #1
 8008bc6:	2300      	movne	r3, #0
 8008bc8:	b2db      	uxtb	r3, r3
 8008bca:	461a      	mov	r2, r3
 8008bcc:	79fb      	ldrb	r3, [r7, #7]
 8008bce:	429a      	cmp	r2, r3
 8008bd0:	d0a0      	beq.n	8008b14 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008bd2:	2300      	movs	r3, #0
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3710      	adds	r7, #16
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}

08008bdc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b095      	sub	sp, #84	@ 0x54
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bec:	e853 3f00 	ldrex	r3, [r3]
 8008bf0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bf4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008bf8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	461a      	mov	r2, r3
 8008c00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c02:	643b      	str	r3, [r7, #64]	@ 0x40
 8008c04:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c06:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008c08:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008c0a:	e841 2300 	strex	r3, r2, [r1]
 8008c0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d1e6      	bne.n	8008be4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	3308      	adds	r3, #8
 8008c1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c1e:	6a3b      	ldr	r3, [r7, #32]
 8008c20:	e853 3f00 	ldrex	r3, [r3]
 8008c24:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c26:	69fb      	ldr	r3, [r7, #28]
 8008c28:	f023 0301 	bic.w	r3, r3, #1
 8008c2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	3308      	adds	r3, #8
 8008c34:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008c36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008c38:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c3a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008c3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c3e:	e841 2300 	strex	r3, r2, [r1]
 8008c42:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d1e5      	bne.n	8008c16 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c4e:	2b01      	cmp	r3, #1
 8008c50:	d118      	bne.n	8008c84 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	e853 3f00 	ldrex	r3, [r3]
 8008c5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	f023 0310 	bic.w	r3, r3, #16
 8008c66:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	461a      	mov	r2, r3
 8008c6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c70:	61bb      	str	r3, [r7, #24]
 8008c72:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c74:	6979      	ldr	r1, [r7, #20]
 8008c76:	69ba      	ldr	r2, [r7, #24]
 8008c78:	e841 2300 	strex	r3, r2, [r1]
 8008c7c:	613b      	str	r3, [r7, #16]
   return(result);
 8008c7e:	693b      	ldr	r3, [r7, #16]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d1e6      	bne.n	8008c52 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2220      	movs	r2, #32
 8008c88:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2200      	movs	r2, #0
 8008c96:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008c98:	bf00      	nop
 8008c9a:	3754      	adds	r7, #84	@ 0x54
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca2:	4770      	bx	lr

08008ca4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b083      	sub	sp, #12
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f103 0208 	add.w	r2, r3, #8
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008cbc:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f103 0208 	add.w	r2, r3, #8
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f103 0208 	add.w	r2, r3, #8
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 8008cd8:	bf00      	nop
 8008cda:	370c      	adds	r7, #12
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce2:	4770      	bx	lr

08008ce4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b083      	sub	sp, #12
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 8008cf2:	bf00      	nop
 8008cf4:	370c      	adds	r7, #12
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfc:	4770      	bx	lr

08008cfe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8008cfe:	b480      	push	{r7}
 8008d00:	b085      	sub	sp, #20
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	6078      	str	r0, [r7, #4]
 8008d06:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	68fa      	ldr	r2, [r7, #12]
 8008d12:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	689a      	ldr	r2, [r3, #8]
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	689b      	ldr	r3, [r3, #8]
 8008d20:	683a      	ldr	r2, [r7, #0]
 8008d22:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	683a      	ldr	r2, [r7, #0]
 8008d28:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	687a      	ldr	r2, [r7, #4]
 8008d2e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	1c5a      	adds	r2, r3, #1
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsertEnd();
}
 8008d3a:	bf00      	nop
 8008d3c:	3714      	adds	r7, #20
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d44:	4770      	bx	lr

08008d46 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8008d46:	b480      	push	{r7}
 8008d48:	b085      	sub	sp, #20
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	6078      	str	r0, [r7, #4]
 8008d4e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008d5c:	d103      	bne.n	8008d66 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	691b      	ldr	r3, [r3, #16]
 8008d62:	60fb      	str	r3, [r7, #12]
 8008d64:	e00c      	b.n	8008d80 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	3308      	adds	r3, #8
 8008d6a:	60fb      	str	r3, [r7, #12]
 8008d6c:	e002      	b.n	8008d74 <vListInsert+0x2e>
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	685b      	ldr	r3, [r3, #4]
 8008d72:	60fb      	str	r3, [r7, #12]
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	685b      	ldr	r3, [r3, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	68ba      	ldr	r2, [r7, #8]
 8008d7c:	429a      	cmp	r2, r3
 8008d7e:	d2f6      	bcs.n	8008d6e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	685a      	ldr	r2, [r3, #4]
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	685b      	ldr	r3, [r3, #4]
 8008d8c:	683a      	ldr	r2, [r7, #0]
 8008d8e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	68fa      	ldr	r2, [r7, #12]
 8008d94:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	683a      	ldr	r2, [r7, #0]
 8008d9a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	687a      	ldr	r2, [r7, #4]
 8008da0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	1c5a      	adds	r2, r3, #1
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 8008dac:	bf00      	nop
 8008dae:	3714      	adds	r7, #20
 8008db0:	46bd      	mov	sp, r7
 8008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db6:	4770      	bx	lr

08008db8 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008db8:	b480      	push	{r7}
 8008dba:	b085      	sub	sp, #20
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	691b      	ldr	r3, [r3, #16]
 8008dc4:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	687a      	ldr	r2, [r7, #4]
 8008dcc:	6892      	ldr	r2, [r2, #8]
 8008dce:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	689b      	ldr	r3, [r3, #8]
 8008dd4:	687a      	ldr	r2, [r7, #4]
 8008dd6:	6852      	ldr	r2, [r2, #4]
 8008dd8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	685b      	ldr	r3, [r3, #4]
 8008dde:	687a      	ldr	r2, [r7, #4]
 8008de0:	429a      	cmp	r2, r3
 8008de2:	d103      	bne.n	8008dec <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	689a      	ldr	r2, [r3, #8]
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2200      	movs	r2, #0
 8008df0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	1e5a      	subs	r2, r3, #1
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3714      	adds	r7, #20
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr

08008e0c <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b086      	sub	sp, #24
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
 8008e14:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8008e16:	2301      	movs	r3, #1
 8008e18:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d110      	bne.n	8008e46 <xQueueGenericReset+0x3a>
    __asm volatile
 8008e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e28:	b672      	cpsid	i
 8008e2a:	f383 8811 	msr	BASEPRI, r3
 8008e2e:	f3bf 8f6f 	isb	sy
 8008e32:	f3bf 8f4f 	dsb	sy
 8008e36:	b662      	cpsie	i
 8008e38:	60fb      	str	r3, [r7, #12]
}
 8008e3a:	bf00      	nop
 8008e3c:	f240 1137 	movw	r1, #311	@ 0x137
 8008e40:	483f      	ldr	r0, [pc, #252]	@ (8008f40 <xQueueGenericReset+0x134>)
 8008e42:	f7f9 fad9 	bl	80023f8 <vAssertCalled>

    if( ( pxQueue != NULL ) &&
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d05d      	beq.n	8008f08 <xQueueGenericReset+0xfc>
        ( pxQueue->uxLength >= 1U ) &&
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d059      	beq.n	8008f08 <xQueueGenericReset+0xfc>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e5c:	2100      	movs	r1, #0
 8008e5e:	fba3 2302 	umull	r2, r3, r3, r2
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d000      	beq.n	8008e68 <xQueueGenericReset+0x5c>
 8008e66:	2101      	movs	r1, #1
 8008e68:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d14c      	bne.n	8008f08 <xQueueGenericReset+0xfc>
    {
        taskENTER_CRITICAL();
 8008e6e:	f002 fdcf 	bl	800ba10 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	681a      	ldr	r2, [r3, #0]
 8008e76:	693b      	ldr	r3, [r7, #16]
 8008e78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e7a:	6939      	ldr	r1, [r7, #16]
 8008e7c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008e7e:	fb01 f303 	mul.w	r3, r1, r3
 8008e82:	441a      	add	r2, r3
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8008e8e:	693b      	ldr	r3, [r7, #16]
 8008e90:	681a      	ldr	r2, [r3, #0]
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	681a      	ldr	r2, [r3, #0]
 8008e9a:	693b      	ldr	r3, [r7, #16]
 8008e9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e9e:	3b01      	subs	r3, #1
 8008ea0:	6939      	ldr	r1, [r7, #16]
 8008ea2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008ea4:	fb01 f303 	mul.w	r3, r1, r3
 8008ea8:	441a      	add	r2, r3
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8008eae:	693b      	ldr	r3, [r7, #16]
 8008eb0:	22ff      	movs	r2, #255	@ 0xff
 8008eb2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	22ff      	movs	r2, #255	@ 0xff
 8008eba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d114      	bne.n	8008eee <xQueueGenericReset+0xe2>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	691b      	ldr	r3, [r3, #16]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d01a      	beq.n	8008f02 <xQueueGenericReset+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	3310      	adds	r3, #16
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f001 fc85 	bl	800a7e0 <xTaskRemoveFromEventList>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d012      	beq.n	8008f02 <xQueueGenericReset+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8008edc:	4b19      	ldr	r3, [pc, #100]	@ (8008f44 <xQueueGenericReset+0x138>)
 8008ede:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ee2:	601a      	str	r2, [r3, #0]
 8008ee4:	f3bf 8f4f 	dsb	sy
 8008ee8:	f3bf 8f6f 	isb	sy
 8008eec:	e009      	b.n	8008f02 <xQueueGenericReset+0xf6>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	3310      	adds	r3, #16
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f7ff fed6 	bl	8008ca4 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	3324      	adds	r3, #36	@ 0x24
 8008efc:	4618      	mov	r0, r3
 8008efe:	f7ff fed1 	bl	8008ca4 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8008f02:	f002 fdbd 	bl	800ba80 <vPortExitCritical>
 8008f06:	e001      	b.n	8008f0c <xQueueGenericReset+0x100>
    }
    else
    {
        xReturn = pdFAIL;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d110      	bne.n	8008f34 <xQueueGenericReset+0x128>
    __asm volatile
 8008f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f16:	b672      	cpsid	i
 8008f18:	f383 8811 	msr	BASEPRI, r3
 8008f1c:	f3bf 8f6f 	isb	sy
 8008f20:	f3bf 8f4f 	dsb	sy
 8008f24:	b662      	cpsie	i
 8008f26:	60bb      	str	r3, [r7, #8]
}
 8008f28:	bf00      	nop
 8008f2a:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 8008f2e:	4804      	ldr	r0, [pc, #16]	@ (8008f40 <xQueueGenericReset+0x134>)
 8008f30:	f7f9 fa62 	bl	80023f8 <vAssertCalled>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 8008f34:	697b      	ldr	r3, [r7, #20]
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3718      	adds	r7, #24
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}
 8008f3e:	bf00      	nop
 8008f40:	08010a14 	.word	0x08010a14
 8008f44:	e000ed04 	.word	0xe000ed04

08008f48 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b08a      	sub	sp, #40	@ 0x28
 8008f4c:	af02      	add	r7, sp, #8
 8008f4e:	60f8      	str	r0, [r7, #12]
 8008f50:	60b9      	str	r1, [r7, #8]
 8008f52:	4613      	mov	r3, r2
 8008f54:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8008f56:	2300      	movs	r3, #0
 8008f58:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d02e      	beq.n	8008fbe <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8008f60:	2100      	movs	r1, #0
 8008f62:	68ba      	ldr	r2, [r7, #8]
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	fba3 2302 	umull	r2, r3, r3, r2
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d000      	beq.n	8008f70 <xQueueGenericCreate+0x28>
 8008f6e:	2101      	movs	r1, #1
 8008f70:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d123      	bne.n	8008fbe <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	68ba      	ldr	r2, [r7, #8]
 8008f7a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8008f7e:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8008f82:	d81c      	bhi.n	8008fbe <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	68ba      	ldr	r2, [r7, #8]
 8008f88:	fb02 f303 	mul.w	r3, r2, r3
 8008f8c:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8008f8e:	69bb      	ldr	r3, [r7, #24]
 8008f90:	3350      	adds	r3, #80	@ 0x50
 8008f92:	4618      	mov	r0, r3
 8008f94:	f7f9 fd50 	bl	8002a38 <pvPortMalloc>
 8008f98:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8008f9a:	69fb      	ldr	r3, [r7, #28]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d022      	beq.n	8008fe6 <xQueueGenericCreate+0x9e>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008fa0:	69fb      	ldr	r3, [r7, #28]
 8008fa2:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	3350      	adds	r3, #80	@ 0x50
 8008fa8:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008faa:	79fa      	ldrb	r2, [r7, #7]
 8008fac:	69fb      	ldr	r3, [r7, #28]
 8008fae:	9300      	str	r3, [sp, #0]
 8008fb0:	4613      	mov	r3, r2
 8008fb2:	697a      	ldr	r2, [r7, #20]
 8008fb4:	68b9      	ldr	r1, [r7, #8]
 8008fb6:	68f8      	ldr	r0, [r7, #12]
 8008fb8:	f000 f81c 	bl	8008ff4 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8008fbc:	e013      	b.n	8008fe6 <xQueueGenericCreate+0x9e>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8008fbe:	69fb      	ldr	r3, [r7, #28]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d110      	bne.n	8008fe6 <xQueueGenericCreate+0x9e>
    __asm volatile
 8008fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fc8:	b672      	cpsid	i
 8008fca:	f383 8811 	msr	BASEPRI, r3
 8008fce:	f3bf 8f6f 	isb	sy
 8008fd2:	f3bf 8f4f 	dsb	sy
 8008fd6:	b662      	cpsie	i
 8008fd8:	613b      	str	r3, [r7, #16]
}
 8008fda:	bf00      	nop
 8008fdc:	f240 212a 	movw	r1, #554	@ 0x22a
 8008fe0:	4803      	ldr	r0, [pc, #12]	@ (8008ff0 <xQueueGenericCreate+0xa8>)
 8008fe2:	f7f9 fa09 	bl	80023f8 <vAssertCalled>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
 8008fe6:	69fb      	ldr	r3, [r7, #28]
    }
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3720      	adds	r7, #32
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}
 8008ff0:	08010a14 	.word	0x08010a14

08008ff4 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b084      	sub	sp, #16
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	60f8      	str	r0, [r7, #12]
 8008ffc:	60b9      	str	r1, [r7, #8]
 8008ffe:	607a      	str	r2, [r7, #4]
 8009000:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d103      	bne.n	8009010 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009008:	69bb      	ldr	r3, [r7, #24]
 800900a:	69ba      	ldr	r2, [r7, #24]
 800900c:	601a      	str	r2, [r3, #0]
 800900e:	e002      	b.n	8009016 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009010:	69bb      	ldr	r3, [r7, #24]
 8009012:	687a      	ldr	r2, [r7, #4]
 8009014:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8009016:	69bb      	ldr	r3, [r7, #24]
 8009018:	68fa      	ldr	r2, [r7, #12]
 800901a:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800901c:	69bb      	ldr	r3, [r7, #24]
 800901e:	68ba      	ldr	r2, [r7, #8]
 8009020:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009022:	2101      	movs	r1, #1
 8009024:	69b8      	ldr	r0, [r7, #24]
 8009026:	f7ff fef1 	bl	8008e0c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800902a:	69bb      	ldr	r3, [r7, #24]
 800902c:	78fa      	ldrb	r2, [r7, #3]
 800902e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8009032:	bf00      	nop
 8009034:	3710      	adds	r7, #16
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}

0800903a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 800903a:	b580      	push	{r7, lr}
 800903c:	b082      	sub	sp, #8
 800903e:	af00      	add	r7, sp, #0
 8009040:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d00e      	beq.n	8009066 <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2200      	movs	r2, #0
 800904c:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2200      	movs	r2, #0
 8009052:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2200      	movs	r2, #0
 8009058:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800905a:	2300      	movs	r3, #0
 800905c:	2200      	movs	r2, #0
 800905e:	2100      	movs	r1, #0
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f000 f897 	bl	8009194 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 8009066:	bf00      	nop
 8009068:	3708      	adds	r7, #8
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}

0800906e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 800906e:	b580      	push	{r7, lr}
 8009070:	b086      	sub	sp, #24
 8009072:	af00      	add	r7, sp, #0
 8009074:	4603      	mov	r3, r0
 8009076:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009078:	2301      	movs	r3, #1
 800907a:	617b      	str	r3, [r7, #20]
 800907c:	2300      	movs	r3, #0
 800907e:	613b      	str	r3, [r7, #16]

        traceENTER_xQueueCreateMutex( ucQueueType );

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009080:	79fb      	ldrb	r3, [r7, #7]
 8009082:	461a      	mov	r2, r3
 8009084:	6939      	ldr	r1, [r7, #16]
 8009086:	6978      	ldr	r0, [r7, #20]
 8009088:	f7ff ff5e 	bl	8008f48 <xQueueGenericCreate>
 800908c:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800908e:	68f8      	ldr	r0, [r7, #12]
 8009090:	f7ff ffd3 	bl	800903a <prvInitialiseMutex>

        traceRETURN_xQueueCreateMutex( xNewQueue );

        return xNewQueue;
 8009094:	68fb      	ldr	r3, [r7, #12]
    }
 8009096:	4618      	mov	r0, r3
 8009098:	3718      	adds	r7, #24
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}
	...

080090a0 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

    BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
    {
 80090a0:	b590      	push	{r4, r7, lr}
 80090a2:	b087      	sub	sp, #28
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	613b      	str	r3, [r7, #16]

        traceENTER_xQueueGiveMutexRecursive( xMutex );

        configASSERT( pxMutex );
 80090ac:	693b      	ldr	r3, [r7, #16]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d110      	bne.n	80090d4 <xQueueGiveMutexRecursive+0x34>
    __asm volatile
 80090b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090b6:	b672      	cpsid	i
 80090b8:	f383 8811 	msr	BASEPRI, r3
 80090bc:	f3bf 8f6f 	isb	sy
 80090c0:	f3bf 8f4f 	dsb	sy
 80090c4:	b662      	cpsie	i
 80090c6:	60fb      	str	r3, [r7, #12]
}
 80090c8:	bf00      	nop
 80090ca:	f240 21fb 	movw	r1, #763	@ 0x2fb
 80090ce:	4811      	ldr	r0, [pc, #68]	@ (8009114 <xQueueGiveMutexRecursive+0x74>)
 80090d0:	f7f9 f992 	bl	80023f8 <vAssertCalled>
         * change outside of this task.  If this task does not hold the mutex then
         * pxMutexHolder can never coincidentally equal the tasks handle, and as
         * this is the only condition we are interested in it does not matter if
         * pxMutexHolder is accessed simultaneously by another task.  Therefore no
         * mutual exclusion is required to test the pxMutexHolder variable. */
        if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	689c      	ldr	r4, [r3, #8]
 80090d8:	f001 fdae 	bl	800ac38 <xTaskGetCurrentTaskHandle>
 80090dc:	4603      	mov	r3, r0
 80090de:	429c      	cmp	r4, r3
 80090e0:	d111      	bne.n	8009106 <xQueueGiveMutexRecursive+0x66>
            /* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
             * the task handle, therefore no underflow check is required.  Also,
             * uxRecursiveCallCount is only modified by the mutex holder, and as
             * there can only be one, no mutual exclusion is required to modify the
             * uxRecursiveCallCount member. */
            ( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	68db      	ldr	r3, [r3, #12]
 80090e6:	1e5a      	subs	r2, r3, #1
 80090e8:	693b      	ldr	r3, [r7, #16]
 80090ea:	60da      	str	r2, [r3, #12]

            /* Has the recursive call count unwound to 0? */
            if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80090ec:	693b      	ldr	r3, [r7, #16]
 80090ee:	68db      	ldr	r3, [r3, #12]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d105      	bne.n	8009100 <xQueueGiveMutexRecursive+0x60>
            {
                /* Return the mutex.  This will automatically unblock any other
                 * task that might be waiting to access the mutex. */
                ( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80090f4:	2300      	movs	r3, #0
 80090f6:	2200      	movs	r2, #0
 80090f8:	2100      	movs	r1, #0
 80090fa:	6938      	ldr	r0, [r7, #16]
 80090fc:	f000 f84a 	bl	8009194 <xQueueGenericSend>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            xReturn = pdPASS;
 8009100:	2301      	movs	r3, #1
 8009102:	617b      	str	r3, [r7, #20]
 8009104:	e001      	b.n	800910a <xQueueGiveMutexRecursive+0x6a>
        }
        else
        {
            /* The mutex cannot be given because the calling task is not the
             * holder. */
            xReturn = pdFAIL;
 8009106:	2300      	movs	r3, #0
 8009108:	617b      	str	r3, [r7, #20]
            traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
        }

        traceRETURN_xQueueGiveMutexRecursive( xReturn );

        return xReturn;
 800910a:	697b      	ldr	r3, [r7, #20]
    }
 800910c:	4618      	mov	r0, r3
 800910e:	371c      	adds	r7, #28
 8009110:	46bd      	mov	sp, r7
 8009112:	bd90      	pop	{r4, r7, pc}
 8009114:	08010a14 	.word	0x08010a14

08009118 <xQueueTakeMutexRecursive>:

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

    BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex,
                                         TickType_t xTicksToWait )
    {
 8009118:	b590      	push	{r4, r7, lr}
 800911a:	b087      	sub	sp, #28
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn;
        Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	613b      	str	r3, [r7, #16]

        traceENTER_xQueueTakeMutexRecursive( xMutex, xTicksToWait );

        configASSERT( pxMutex );
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d110      	bne.n	800914e <xQueueTakeMutexRecursive+0x36>
    __asm volatile
 800912c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009130:	b672      	cpsid	i
 8009132:	f383 8811 	msr	BASEPRI, r3
 8009136:	f3bf 8f6f 	isb	sy
 800913a:	f3bf 8f4f 	dsb	sy
 800913e:	b662      	cpsie	i
 8009140:	60fb      	str	r3, [r7, #12]
}
 8009142:	bf00      	nop
 8009144:	f240 3137 	movw	r1, #823	@ 0x337
 8009148:	4811      	ldr	r0, [pc, #68]	@ (8009190 <xQueueTakeMutexRecursive+0x78>)
 800914a:	f7f9 f955 	bl	80023f8 <vAssertCalled>
        /* Comments regarding mutual exclusion as per those within
         * xQueueGiveMutexRecursive(). */

        traceTAKE_MUTEX_RECURSIVE( pxMutex );

        if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	689c      	ldr	r4, [r3, #8]
 8009152:	f001 fd71 	bl	800ac38 <xTaskGetCurrentTaskHandle>
 8009156:	4603      	mov	r3, r0
 8009158:	429c      	cmp	r4, r3
 800915a:	d107      	bne.n	800916c <xQueueTakeMutexRecursive+0x54>
        {
            ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	68db      	ldr	r3, [r3, #12]
 8009160:	1c5a      	adds	r2, r3, #1
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	60da      	str	r2, [r3, #12]
            xReturn = pdPASS;
 8009166:	2301      	movs	r3, #1
 8009168:	617b      	str	r3, [r7, #20]
 800916a:	e00c      	b.n	8009186 <xQueueTakeMutexRecursive+0x6e>
        }
        else
        {
            xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800916c:	6839      	ldr	r1, [r7, #0]
 800916e:	6938      	ldr	r0, [r7, #16]
 8009170:	f000 fa1c 	bl	80095ac <xQueueSemaphoreTake>
 8009174:	6178      	str	r0, [r7, #20]

            /* pdPASS will only be returned if the mutex was successfully
             * obtained.  The calling task may have entered the Blocked state
             * before reaching here. */
            if( xReturn != pdFAIL )
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d004      	beq.n	8009186 <xQueueTakeMutexRecursive+0x6e>
            {
                ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	68db      	ldr	r3, [r3, #12]
 8009180:	1c5a      	adds	r2, r3, #1
 8009182:	693b      	ldr	r3, [r7, #16]
 8009184:	60da      	str	r2, [r3, #12]
            }
        }

        traceRETURN_xQueueTakeMutexRecursive( xReturn );

        return xReturn;
 8009186:	697b      	ldr	r3, [r7, #20]
    }
 8009188:	4618      	mov	r0, r3
 800918a:	371c      	adds	r7, #28
 800918c:	46bd      	mov	sp, r7
 800918e:	bd90      	pop	{r4, r7, pc}
 8009190:	08010a14 	.word	0x08010a14

08009194 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b08e      	sub	sp, #56	@ 0x38
 8009198:	af00      	add	r7, sp, #0
 800919a:	60f8      	str	r0, [r7, #12]
 800919c:	60b9      	str	r1, [r7, #8]
 800919e:	607a      	str	r2, [r7, #4]
 80091a0:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80091a2:	2300      	movs	r3, #0
 80091a4:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	633b      	str	r3, [r7, #48]	@ 0x30

    traceENTER_xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );

    configASSERT( pxQueue );
 80091aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d110      	bne.n	80091d2 <xQueueGenericSend+0x3e>
    __asm volatile
 80091b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091b4:	b672      	cpsid	i
 80091b6:	f383 8811 	msr	BASEPRI, r3
 80091ba:	f3bf 8f6f 	isb	sy
 80091be:	f3bf 8f4f 	dsb	sy
 80091c2:	b662      	cpsie	i
 80091c4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80091c6:	bf00      	nop
 80091c8:	f240 31b6 	movw	r1, #950	@ 0x3b6
 80091cc:	487b      	ldr	r0, [pc, #492]	@ (80093bc <xQueueGenericSend+0x228>)
 80091ce:	f7f9 f913 	bl	80023f8 <vAssertCalled>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d103      	bne.n	80091e0 <xQueueGenericSend+0x4c>
 80091d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d101      	bne.n	80091e4 <xQueueGenericSend+0x50>
 80091e0:	2301      	movs	r3, #1
 80091e2:	e000      	b.n	80091e6 <xQueueGenericSend+0x52>
 80091e4:	2300      	movs	r3, #0
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d110      	bne.n	800920c <xQueueGenericSend+0x78>
    __asm volatile
 80091ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091ee:	b672      	cpsid	i
 80091f0:	f383 8811 	msr	BASEPRI, r3
 80091f4:	f3bf 8f6f 	isb	sy
 80091f8:	f3bf 8f4f 	dsb	sy
 80091fc:	b662      	cpsie	i
 80091fe:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009200:	bf00      	nop
 8009202:	f240 31b7 	movw	r1, #951	@ 0x3b7
 8009206:	486d      	ldr	r0, [pc, #436]	@ (80093bc <xQueueGenericSend+0x228>)
 8009208:	f7f9 f8f6 	bl	80023f8 <vAssertCalled>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	2b02      	cmp	r3, #2
 8009210:	d103      	bne.n	800921a <xQueueGenericSend+0x86>
 8009212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009214:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009216:	2b01      	cmp	r3, #1
 8009218:	d101      	bne.n	800921e <xQueueGenericSend+0x8a>
 800921a:	2301      	movs	r3, #1
 800921c:	e000      	b.n	8009220 <xQueueGenericSend+0x8c>
 800921e:	2300      	movs	r3, #0
 8009220:	2b00      	cmp	r3, #0
 8009222:	d110      	bne.n	8009246 <xQueueGenericSend+0xb2>
    __asm volatile
 8009224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009228:	b672      	cpsid	i
 800922a:	f383 8811 	msr	BASEPRI, r3
 800922e:	f3bf 8f6f 	isb	sy
 8009232:	f3bf 8f4f 	dsb	sy
 8009236:	b662      	cpsie	i
 8009238:	623b      	str	r3, [r7, #32]
}
 800923a:	bf00      	nop
 800923c:	f44f 716e 	mov.w	r1, #952	@ 0x3b8
 8009240:	485e      	ldr	r0, [pc, #376]	@ (80093bc <xQueueGenericSend+0x228>)
 8009242:	f7f9 f8d9 	bl	80023f8 <vAssertCalled>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009246:	f001 fd07 	bl	800ac58 <xTaskGetSchedulerState>
 800924a:	4603      	mov	r3, r0
 800924c:	2b00      	cmp	r3, #0
 800924e:	d102      	bne.n	8009256 <xQueueGenericSend+0xc2>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d101      	bne.n	800925a <xQueueGenericSend+0xc6>
 8009256:	2301      	movs	r3, #1
 8009258:	e000      	b.n	800925c <xQueueGenericSend+0xc8>
 800925a:	2300      	movs	r3, #0
 800925c:	2b00      	cmp	r3, #0
 800925e:	d110      	bne.n	8009282 <xQueueGenericSend+0xee>
    __asm volatile
 8009260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009264:	b672      	cpsid	i
 8009266:	f383 8811 	msr	BASEPRI, r3
 800926a:	f3bf 8f6f 	isb	sy
 800926e:	f3bf 8f4f 	dsb	sy
 8009272:	b662      	cpsie	i
 8009274:	61fb      	str	r3, [r7, #28]
}
 8009276:	bf00      	nop
 8009278:	f240 31bb 	movw	r1, #955	@ 0x3bb
 800927c:	484f      	ldr	r0, [pc, #316]	@ (80093bc <xQueueGenericSend+0x228>)
 800927e:	f7f9 f8bb 	bl	80023f8 <vAssertCalled>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8009282:	f002 fbc5 	bl	800ba10 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009288:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800928a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800928c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800928e:	429a      	cmp	r2, r3
 8009290:	d302      	bcc.n	8009298 <xQueueGenericSend+0x104>
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	2b02      	cmp	r3, #2
 8009296:	d129      	bne.n	80092ec <xQueueGenericSend+0x158>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009298:	683a      	ldr	r2, [r7, #0]
 800929a:	68b9      	ldr	r1, [r7, #8]
 800929c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800929e:	f000 faaf 	bl	8009800 <prvCopyDataToQueue>
 80092a2:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80092a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d010      	beq.n	80092ce <xQueueGenericSend+0x13a>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80092ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ae:	3324      	adds	r3, #36	@ 0x24
 80092b0:	4618      	mov	r0, r3
 80092b2:	f001 fa95 	bl	800a7e0 <xTaskRemoveFromEventList>
 80092b6:	4603      	mov	r3, r0
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d013      	beq.n	80092e4 <xQueueGenericSend+0x150>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 80092bc:	4b40      	ldr	r3, [pc, #256]	@ (80093c0 <xQueueGenericSend+0x22c>)
 80092be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80092c2:	601a      	str	r2, [r3, #0]
 80092c4:	f3bf 8f4f 	dsb	sy
 80092c8:	f3bf 8f6f 	isb	sy
 80092cc:	e00a      	b.n	80092e4 <xQueueGenericSend+0x150>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 80092ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d007      	beq.n	80092e4 <xQueueGenericSend+0x150>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 80092d4:	4b3a      	ldr	r3, [pc, #232]	@ (80093c0 <xQueueGenericSend+0x22c>)
 80092d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80092da:	601a      	str	r2, [r3, #0]
 80092dc:	f3bf 8f4f 	dsb	sy
 80092e0:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80092e4:	f002 fbcc 	bl	800ba80 <vPortExitCritical>

                traceRETURN_xQueueGenericSend( pdPASS );

                return pdPASS;
 80092e8:	2301      	movs	r3, #1
 80092ea:	e063      	b.n	80093b4 <xQueueGenericSend+0x220>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d103      	bne.n	80092fa <xQueueGenericSend+0x166>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80092f2:	f002 fbc5 	bl	800ba80 <vPortExitCritical>
                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );

                    return errQUEUE_FULL;
 80092f6:	2300      	movs	r3, #0
 80092f8:	e05c      	b.n	80093b4 <xQueueGenericSend+0x220>
                }
                else if( xEntryTimeSet == pdFALSE )
 80092fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d106      	bne.n	800930e <xQueueGenericSend+0x17a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8009300:	f107 0314 	add.w	r3, r7, #20
 8009304:	4618      	mov	r0, r3
 8009306:	f001 fb49 	bl	800a99c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800930a:	2301      	movs	r3, #1
 800930c:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800930e:	f002 fbb7 	bl	800ba80 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8009312:	f000 feef 	bl	800a0f4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8009316:	f002 fb7b 	bl	800ba10 <vPortEnterCritical>
 800931a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800931c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009320:	b25b      	sxtb	r3, r3
 8009322:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009326:	d103      	bne.n	8009330 <xQueueGenericSend+0x19c>
 8009328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800932a:	2200      	movs	r2, #0
 800932c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009332:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009336:	b25b      	sxtb	r3, r3
 8009338:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800933c:	d103      	bne.n	8009346 <xQueueGenericSend+0x1b2>
 800933e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009340:	2200      	movs	r2, #0
 8009342:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009346:	f002 fb9b 	bl	800ba80 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800934a:	1d3a      	adds	r2, r7, #4
 800934c:	f107 0314 	add.w	r3, r7, #20
 8009350:	4611      	mov	r1, r2
 8009352:	4618      	mov	r0, r3
 8009354:	f001 fb38 	bl	800a9c8 <xTaskCheckForTimeOut>
 8009358:	4603      	mov	r3, r0
 800935a:	2b00      	cmp	r3, #0
 800935c:	d124      	bne.n	80093a8 <xQueueGenericSend+0x214>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800935e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009360:	f000 fb46 	bl	80099f0 <prvIsQueueFull>
 8009364:	4603      	mov	r3, r0
 8009366:	2b00      	cmp	r3, #0
 8009368:	d018      	beq.n	800939c <xQueueGenericSend+0x208>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800936a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800936c:	3310      	adds	r3, #16
 800936e:	687a      	ldr	r2, [r7, #4]
 8009370:	4611      	mov	r1, r2
 8009372:	4618      	mov	r0, r3
 8009374:	f001 f9ba 	bl	800a6ec <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8009378:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800937a:	f000 fad1 	bl	8009920 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800937e:	f000 fec7 	bl	800a110 <xTaskResumeAll>
 8009382:	4603      	mov	r3, r0
 8009384:	2b00      	cmp	r3, #0
 8009386:	f47f af7c 	bne.w	8009282 <xQueueGenericSend+0xee>
                {
                    taskYIELD_WITHIN_API();
 800938a:	4b0d      	ldr	r3, [pc, #52]	@ (80093c0 <xQueueGenericSend+0x22c>)
 800938c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009390:	601a      	str	r2, [r3, #0]
 8009392:	f3bf 8f4f 	dsb	sy
 8009396:	f3bf 8f6f 	isb	sy
 800939a:	e772      	b.n	8009282 <xQueueGenericSend+0xee>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800939c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800939e:	f000 fabf 	bl	8009920 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80093a2:	f000 feb5 	bl	800a110 <xTaskResumeAll>
 80093a6:	e76c      	b.n	8009282 <xQueueGenericSend+0xee>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80093a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80093aa:	f000 fab9 	bl	8009920 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80093ae:	f000 feaf 	bl	800a110 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );

            return errQUEUE_FULL;
 80093b2:	2300      	movs	r3, #0
        }
    }
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	3738      	adds	r7, #56	@ 0x38
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}
 80093bc:	08010a14 	.word	0x08010a14
 80093c0:	e000ed04 	.word	0xe000ed04

080093c4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b08c      	sub	sp, #48	@ 0x30
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	60f8      	str	r0, [r7, #12]
 80093cc:	60b9      	str	r1, [r7, #8]
 80093ce:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80093d0:	2300      	movs	r3, #0
 80093d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80093d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d110      	bne.n	8009400 <xQueueReceive+0x3c>
    __asm volatile
 80093de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093e2:	b672      	cpsid	i
 80093e4:	f383 8811 	msr	BASEPRI, r3
 80093e8:	f3bf 8f6f 	isb	sy
 80093ec:	f3bf 8f4f 	dsb	sy
 80093f0:	b662      	cpsie	i
 80093f2:	623b      	str	r3, [r7, #32]
}
 80093f4:	bf00      	nop
 80093f6:	f240 51e9 	movw	r1, #1513	@ 0x5e9
 80093fa:	486a      	ldr	r0, [pc, #424]	@ (80095a4 <xQueueReceive+0x1e0>)
 80093fc:	f7f8 fffc 	bl	80023f8 <vAssertCalled>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d103      	bne.n	800940e <xQueueReceive+0x4a>
 8009406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800940a:	2b00      	cmp	r3, #0
 800940c:	d101      	bne.n	8009412 <xQueueReceive+0x4e>
 800940e:	2301      	movs	r3, #1
 8009410:	e000      	b.n	8009414 <xQueueReceive+0x50>
 8009412:	2300      	movs	r3, #0
 8009414:	2b00      	cmp	r3, #0
 8009416:	d110      	bne.n	800943a <xQueueReceive+0x76>
    __asm volatile
 8009418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800941c:	b672      	cpsid	i
 800941e:	f383 8811 	msr	BASEPRI, r3
 8009422:	f3bf 8f6f 	isb	sy
 8009426:	f3bf 8f4f 	dsb	sy
 800942a:	b662      	cpsie	i
 800942c:	61fb      	str	r3, [r7, #28]
}
 800942e:	bf00      	nop
 8009430:	f240 51ed 	movw	r1, #1517	@ 0x5ed
 8009434:	485b      	ldr	r0, [pc, #364]	@ (80095a4 <xQueueReceive+0x1e0>)
 8009436:	f7f8 ffdf 	bl	80023f8 <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800943a:	f001 fc0d 	bl	800ac58 <xTaskGetSchedulerState>
 800943e:	4603      	mov	r3, r0
 8009440:	2b00      	cmp	r3, #0
 8009442:	d102      	bne.n	800944a <xQueueReceive+0x86>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d101      	bne.n	800944e <xQueueReceive+0x8a>
 800944a:	2301      	movs	r3, #1
 800944c:	e000      	b.n	8009450 <xQueueReceive+0x8c>
 800944e:	2300      	movs	r3, #0
 8009450:	2b00      	cmp	r3, #0
 8009452:	d110      	bne.n	8009476 <xQueueReceive+0xb2>
    __asm volatile
 8009454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009458:	b672      	cpsid	i
 800945a:	f383 8811 	msr	BASEPRI, r3
 800945e:	f3bf 8f6f 	isb	sy
 8009462:	f3bf 8f4f 	dsb	sy
 8009466:	b662      	cpsie	i
 8009468:	61bb      	str	r3, [r7, #24]
}
 800946a:	bf00      	nop
 800946c:	f240 51f2 	movw	r1, #1522	@ 0x5f2
 8009470:	484c      	ldr	r0, [pc, #304]	@ (80095a4 <xQueueReceive+0x1e0>)
 8009472:	f7f8 ffc1 	bl	80023f8 <vAssertCalled>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8009476:	f002 facb 	bl	800ba10 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800947a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800947c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800947e:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009482:	2b00      	cmp	r3, #0
 8009484:	d01f      	beq.n	80094c6 <xQueueReceive+0x102>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009486:	68b9      	ldr	r1, [r7, #8]
 8009488:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800948a:	f000 fa23 	bl	80098d4 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 800948e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009490:	1e5a      	subs	r2, r3, #1
 8009492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009494:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009498:	691b      	ldr	r3, [r3, #16]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d00f      	beq.n	80094be <xQueueReceive+0xfa>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800949e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094a0:	3310      	adds	r3, #16
 80094a2:	4618      	mov	r0, r3
 80094a4:	f001 f99c 	bl	800a7e0 <xTaskRemoveFromEventList>
 80094a8:	4603      	mov	r3, r0
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d007      	beq.n	80094be <xQueueReceive+0xfa>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80094ae:	4b3e      	ldr	r3, [pc, #248]	@ (80095a8 <xQueueReceive+0x1e4>)
 80094b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80094b4:	601a      	str	r2, [r3, #0]
 80094b6:	f3bf 8f4f 	dsb	sy
 80094ba:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80094be:	f002 fadf 	bl	800ba80 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
 80094c2:	2301      	movs	r3, #1
 80094c4:	e069      	b.n	800959a <xQueueReceive+0x1d6>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d103      	bne.n	80094d4 <xQueueReceive+0x110>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80094cc:	f002 fad8 	bl	800ba80 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 80094d0:	2300      	movs	r3, #0
 80094d2:	e062      	b.n	800959a <xQueueReceive+0x1d6>
                }
                else if( xEntryTimeSet == pdFALSE )
 80094d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d106      	bne.n	80094e8 <xQueueReceive+0x124>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80094da:	f107 0310 	add.w	r3, r7, #16
 80094de:	4618      	mov	r0, r3
 80094e0:	f001 fa5c 	bl	800a99c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80094e4:	2301      	movs	r3, #1
 80094e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80094e8:	f002 faca 	bl	800ba80 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80094ec:	f000 fe02 	bl	800a0f4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80094f0:	f002 fa8e 	bl	800ba10 <vPortEnterCritical>
 80094f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094f6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80094fa:	b25b      	sxtb	r3, r3
 80094fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009500:	d103      	bne.n	800950a <xQueueReceive+0x146>
 8009502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009504:	2200      	movs	r2, #0
 8009506:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800950a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800950c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009510:	b25b      	sxtb	r3, r3
 8009512:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009516:	d103      	bne.n	8009520 <xQueueReceive+0x15c>
 8009518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800951a:	2200      	movs	r2, #0
 800951c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009520:	f002 faae 	bl	800ba80 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009524:	1d3a      	adds	r2, r7, #4
 8009526:	f107 0310 	add.w	r3, r7, #16
 800952a:	4611      	mov	r1, r2
 800952c:	4618      	mov	r0, r3
 800952e:	f001 fa4b 	bl	800a9c8 <xTaskCheckForTimeOut>
 8009532:	4603      	mov	r3, r0
 8009534:	2b00      	cmp	r3, #0
 8009536:	d123      	bne.n	8009580 <xQueueReceive+0x1bc>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009538:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800953a:	f000 fa43 	bl	80099c4 <prvIsQueueEmpty>
 800953e:	4603      	mov	r3, r0
 8009540:	2b00      	cmp	r3, #0
 8009542:	d017      	beq.n	8009574 <xQueueReceive+0x1b0>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009546:	3324      	adds	r3, #36	@ 0x24
 8009548:	687a      	ldr	r2, [r7, #4]
 800954a:	4611      	mov	r1, r2
 800954c:	4618      	mov	r0, r3
 800954e:	f001 f8cd 	bl	800a6ec <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8009552:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009554:	f000 f9e4 	bl	8009920 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8009558:	f000 fdda 	bl	800a110 <xTaskResumeAll>
 800955c:	4603      	mov	r3, r0
 800955e:	2b00      	cmp	r3, #0
 8009560:	d189      	bne.n	8009476 <xQueueReceive+0xb2>
                {
                    taskYIELD_WITHIN_API();
 8009562:	4b11      	ldr	r3, [pc, #68]	@ (80095a8 <xQueueReceive+0x1e4>)
 8009564:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009568:	601a      	str	r2, [r3, #0]
 800956a:	f3bf 8f4f 	dsb	sy
 800956e:	f3bf 8f6f 	isb	sy
 8009572:	e780      	b.n	8009476 <xQueueReceive+0xb2>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8009574:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009576:	f000 f9d3 	bl	8009920 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800957a:	f000 fdc9 	bl	800a110 <xTaskResumeAll>
 800957e:	e77a      	b.n	8009476 <xQueueReceive+0xb2>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8009580:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009582:	f000 f9cd 	bl	8009920 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8009586:	f000 fdc3 	bl	800a110 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800958a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800958c:	f000 fa1a 	bl	80099c4 <prvIsQueueEmpty>
 8009590:	4603      	mov	r3, r0
 8009592:	2b00      	cmp	r3, #0
 8009594:	f43f af6f 	beq.w	8009476 <xQueueReceive+0xb2>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 8009598:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 800959a:	4618      	mov	r0, r3
 800959c:	3730      	adds	r7, #48	@ 0x30
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}
 80095a2:	bf00      	nop
 80095a4:	08010a14 	.word	0x08010a14
 80095a8:	e000ed04 	.word	0xe000ed04

080095ac <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b08c      	sub	sp, #48	@ 0x30
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 80095b6:	2300      	movs	r3, #0
 80095b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	627b      	str	r3, [r7, #36]	@ 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 80095be:	2300      	movs	r3, #0
 80095c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    #endif

    traceENTER_xQueueSemaphoreTake( xQueue, xTicksToWait );

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80095c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d110      	bne.n	80095ea <xQueueSemaphoreTake+0x3e>
    __asm volatile
 80095c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095cc:	b672      	cpsid	i
 80095ce:	f383 8811 	msr	BASEPRI, r3
 80095d2:	f3bf 8f6f 	isb	sy
 80095d6:	f3bf 8f4f 	dsb	sy
 80095da:	b662      	cpsie	i
 80095dc:	61bb      	str	r3, [r7, #24]
}
 80095de:	bf00      	nop
 80095e0:	f240 6182 	movw	r1, #1666	@ 0x682
 80095e4:	4878      	ldr	r0, [pc, #480]	@ (80097c8 <xQueueSemaphoreTake+0x21c>)
 80095e6:	f7f8 ff07 	bl	80023f8 <vAssertCalled>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 80095ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d010      	beq.n	8009614 <xQueueSemaphoreTake+0x68>
    __asm volatile
 80095f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095f6:	b672      	cpsid	i
 80095f8:	f383 8811 	msr	BASEPRI, r3
 80095fc:	f3bf 8f6f 	isb	sy
 8009600:	f3bf 8f4f 	dsb	sy
 8009604:	b662      	cpsie	i
 8009606:	617b      	str	r3, [r7, #20]
}
 8009608:	bf00      	nop
 800960a:	f240 6186 	movw	r1, #1670	@ 0x686
 800960e:	486e      	ldr	r0, [pc, #440]	@ (80097c8 <xQueueSemaphoreTake+0x21c>)
 8009610:	f7f8 fef2 	bl	80023f8 <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009614:	f001 fb20 	bl	800ac58 <xTaskGetSchedulerState>
 8009618:	4603      	mov	r3, r0
 800961a:	2b00      	cmp	r3, #0
 800961c:	d102      	bne.n	8009624 <xQueueSemaphoreTake+0x78>
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d101      	bne.n	8009628 <xQueueSemaphoreTake+0x7c>
 8009624:	2301      	movs	r3, #1
 8009626:	e000      	b.n	800962a <xQueueSemaphoreTake+0x7e>
 8009628:	2300      	movs	r3, #0
 800962a:	2b00      	cmp	r3, #0
 800962c:	d110      	bne.n	8009650 <xQueueSemaphoreTake+0xa4>
    __asm volatile
 800962e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009632:	b672      	cpsid	i
 8009634:	f383 8811 	msr	BASEPRI, r3
 8009638:	f3bf 8f6f 	isb	sy
 800963c:	f3bf 8f4f 	dsb	sy
 8009640:	b662      	cpsie	i
 8009642:	613b      	str	r3, [r7, #16]
}
 8009644:	bf00      	nop
 8009646:	f240 618b 	movw	r1, #1675	@ 0x68b
 800964a:	485f      	ldr	r0, [pc, #380]	@ (80097c8 <xQueueSemaphoreTake+0x21c>)
 800964c:	f7f8 fed4 	bl	80023f8 <vAssertCalled>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8009650:	f002 f9de 	bl	800ba10 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009656:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009658:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800965a:	6a3b      	ldr	r3, [r7, #32]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d024      	beq.n	80096aa <xQueueSemaphoreTake+0xfe>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxSemaphoreCount - ( UBaseType_t ) 1 );
 8009660:	6a3b      	ldr	r3, [r7, #32]
 8009662:	1e5a      	subs	r2, r3, #1
 8009664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009666:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d104      	bne.n	800967a <xQueueSemaphoreTake+0xce>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009670:	f001 fd2e 	bl	800b0d0 <pvTaskIncrementMutexHeldCount>
 8009674:	4602      	mov	r2, r0
 8009676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009678:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800967a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800967c:	691b      	ldr	r3, [r3, #16]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d00f      	beq.n	80096a2 <xQueueSemaphoreTake+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009684:	3310      	adds	r3, #16
 8009686:	4618      	mov	r0, r3
 8009688:	f001 f8aa 	bl	800a7e0 <xTaskRemoveFromEventList>
 800968c:	4603      	mov	r3, r0
 800968e:	2b00      	cmp	r3, #0
 8009690:	d007      	beq.n	80096a2 <xQueueSemaphoreTake+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8009692:	4b4e      	ldr	r3, [pc, #312]	@ (80097cc <xQueueSemaphoreTake+0x220>)
 8009694:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009698:	601a      	str	r2, [r3, #0]
 800969a:	f3bf 8f4f 	dsb	sy
 800969e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80096a2:	f002 f9ed 	bl	800ba80 <vPortExitCritical>

                traceRETURN_xQueueSemaphoreTake( pdPASS );

                return pdPASS;
 80096a6:	2301      	movs	r3, #1
 80096a8:	e089      	b.n	80097be <xQueueSemaphoreTake+0x212>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d103      	bne.n	80096b8 <xQueueSemaphoreTake+0x10c>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 80096b0:	f002 f9e6 	bl	800ba80 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 80096b4:	2300      	movs	r3, #0
 80096b6:	e082      	b.n	80097be <xQueueSemaphoreTake+0x212>
                }
                else if( xEntryTimeSet == pdFALSE )
 80096b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d106      	bne.n	80096cc <xQueueSemaphoreTake+0x120>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80096be:	f107 0308 	add.w	r3, r7, #8
 80096c2:	4618      	mov	r0, r3
 80096c4:	f001 f96a 	bl	800a99c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80096c8:	2301      	movs	r3, #1
 80096ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80096cc:	f002 f9d8 	bl	800ba80 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80096d0:	f000 fd10 	bl	800a0f4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80096d4:	f002 f99c 	bl	800ba10 <vPortEnterCritical>
 80096d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096da:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80096de:	b25b      	sxtb	r3, r3
 80096e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80096e4:	d103      	bne.n	80096ee <xQueueSemaphoreTake+0x142>
 80096e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096e8:	2200      	movs	r2, #0
 80096ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80096ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80096f4:	b25b      	sxtb	r3, r3
 80096f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80096fa:	d103      	bne.n	8009704 <xQueueSemaphoreTake+0x158>
 80096fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096fe:	2200      	movs	r2, #0
 8009700:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009704:	f002 f9bc 	bl	800ba80 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009708:	463a      	mov	r2, r7
 800970a:	f107 0308 	add.w	r3, r7, #8
 800970e:	4611      	mov	r1, r2
 8009710:	4618      	mov	r0, r3
 8009712:	f001 f959 	bl	800a9c8 <xTaskCheckForTimeOut>
 8009716:	4603      	mov	r3, r0
 8009718:	2b00      	cmp	r3, #0
 800971a:	d132      	bne.n	8009782 <xQueueSemaphoreTake+0x1d6>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800971c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800971e:	f000 f951 	bl	80099c4 <prvIsQueueEmpty>
 8009722:	4603      	mov	r3, r0
 8009724:	2b00      	cmp	r3, #0
 8009726:	d026      	beq.n	8009776 <xQueueSemaphoreTake+0x1ca>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d109      	bne.n	8009744 <xQueueSemaphoreTake+0x198>
                    {
                        taskENTER_CRITICAL();
 8009730:	f002 f96e 	bl	800ba10 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009736:	689b      	ldr	r3, [r3, #8]
 8009738:	4618      	mov	r0, r3
 800973a:	f001 faab 	bl	800ac94 <xTaskPriorityInherit>
 800973e:	62b8      	str	r0, [r7, #40]	@ 0x28
                        }
                        taskEXIT_CRITICAL();
 8009740:	f002 f99e 	bl	800ba80 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009746:	3324      	adds	r3, #36	@ 0x24
 8009748:	683a      	ldr	r2, [r7, #0]
 800974a:	4611      	mov	r1, r2
 800974c:	4618      	mov	r0, r3
 800974e:	f000 ffcd 	bl	800a6ec <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8009752:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009754:	f000 f8e4 	bl	8009920 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8009758:	f000 fcda 	bl	800a110 <xTaskResumeAll>
 800975c:	4603      	mov	r3, r0
 800975e:	2b00      	cmp	r3, #0
 8009760:	f47f af76 	bne.w	8009650 <xQueueSemaphoreTake+0xa4>
                {
                    taskYIELD_WITHIN_API();
 8009764:	4b19      	ldr	r3, [pc, #100]	@ (80097cc <xQueueSemaphoreTake+0x220>)
 8009766:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800976a:	601a      	str	r2, [r3, #0]
 800976c:	f3bf 8f4f 	dsb	sy
 8009770:	f3bf 8f6f 	isb	sy
 8009774:	e76c      	b.n	8009650 <xQueueSemaphoreTake+0xa4>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8009776:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009778:	f000 f8d2 	bl	8009920 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800977c:	f000 fcc8 	bl	800a110 <xTaskResumeAll>
 8009780:	e766      	b.n	8009650 <xQueueSemaphoreTake+0xa4>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8009782:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009784:	f000 f8cc 	bl	8009920 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8009788:	f000 fcc2 	bl	800a110 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800978c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800978e:	f000 f919 	bl	80099c4 <prvIsQueueEmpty>
 8009792:	4603      	mov	r3, r0
 8009794:	2b00      	cmp	r3, #0
 8009796:	f43f af5b 	beq.w	8009650 <xQueueSemaphoreTake+0xa4>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 800979a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800979c:	2b00      	cmp	r3, #0
 800979e:	d00d      	beq.n	80097bc <xQueueSemaphoreTake+0x210>
                    {
                        taskENTER_CRITICAL();
 80097a0:	f002 f936 	bl	800ba10 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80097a4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80097a6:	f000 f813 	bl	80097d0 <prvGetDisinheritPriorityAfterTimeout>
 80097aa:	61f8      	str	r0, [r7, #28]
                             * mutex to the ready list for its new priority. Coverity thinks that
                             * it can result in out-of-bounds access which is not true because
                             * uxHighestWaitingPriority, as returned by prvGetDisinheritPriorityAfterTimeout,
                             * is capped at ( configMAX_PRIORITIES - 1 ). */
                            /* coverity[overrun] */
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80097ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097ae:	689b      	ldr	r3, [r3, #8]
 80097b0:	69f9      	ldr	r1, [r7, #28]
 80097b2:	4618      	mov	r0, r3
 80097b4:	f001 fbc2 	bl	800af3c <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 80097b8:	f002 f962 	bl	800ba80 <vPortExitCritical>
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 80097bc:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 80097be:	4618      	mov	r0, r3
 80097c0:	3730      	adds	r7, #48	@ 0x30
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}
 80097c6:	bf00      	nop
 80097c8:	08010a14 	.word	0x08010a14
 80097cc:	e000ed04 	.word	0xe000ed04

080097d0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 80097d0:	b480      	push	{r7}
 80097d2:	b085      	sub	sp, #20
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d006      	beq.n	80097ee <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) ( ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) ) );
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f1c3 0307 	rsb	r3, r3, #7
 80097ea:	60fb      	str	r3, [r7, #12]
 80097ec:	e001      	b.n	80097f2 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80097ee:	2300      	movs	r3, #0
 80097f0:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 80097f2:	68fb      	ldr	r3, [r7, #12]
    }
 80097f4:	4618      	mov	r0, r3
 80097f6:	3714      	adds	r7, #20
 80097f8:	46bd      	mov	sp, r7
 80097fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fe:	4770      	bx	lr

08009800 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b086      	sub	sp, #24
 8009804:	af00      	add	r7, sp, #0
 8009806:	60f8      	str	r0, [r7, #12]
 8009808:	60b9      	str	r1, [r7, #8]
 800980a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800980c:	2300      	movs	r3, #0
 800980e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009814:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800981a:	2b00      	cmp	r3, #0
 800981c:	d10d      	bne.n	800983a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d14d      	bne.n	80098c2 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	689b      	ldr	r3, [r3, #8]
 800982a:	4618      	mov	r0, r3
 800982c:	f001 fad2 	bl	800add4 <xTaskPriorityDisinherit>
 8009830:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	2200      	movs	r2, #0
 8009836:	609a      	str	r2, [r3, #8]
 8009838:	e043      	b.n	80098c2 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d119      	bne.n	8009874 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	6858      	ldr	r0, [r3, #4]
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009848:	461a      	mov	r2, r3
 800984a:	68b9      	ldr	r1, [r7, #8]
 800984c:	f004 fb03 	bl	800de56 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	685a      	ldr	r2, [r3, #4]
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009858:	441a      	add	r2, r3
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	685a      	ldr	r2, [r3, #4]
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	689b      	ldr	r3, [r3, #8]
 8009866:	429a      	cmp	r2, r3
 8009868:	d32b      	bcc.n	80098c2 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681a      	ldr	r2, [r3, #0]
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	605a      	str	r2, [r3, #4]
 8009872:	e026      	b.n	80098c2 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	68d8      	ldr	r0, [r3, #12]
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800987c:	461a      	mov	r2, r3
 800987e:	68b9      	ldr	r1, [r7, #8]
 8009880:	f004 fae9 	bl	800de56 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	68da      	ldr	r2, [r3, #12]
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800988c:	425b      	negs	r3, r3
 800988e:	441a      	add	r2, r3
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	68da      	ldr	r2, [r3, #12]
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	429a      	cmp	r2, r3
 800989e:	d207      	bcs.n	80098b0 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	689a      	ldr	r2, [r3, #8]
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098a8:	425b      	negs	r3, r3
 80098aa:	441a      	add	r2, r3
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2b02      	cmp	r3, #2
 80098b4:	d105      	bne.n	80098c2 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80098b6:	693b      	ldr	r3, [r7, #16]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d002      	beq.n	80098c2 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80098bc:	693b      	ldr	r3, [r7, #16]
 80098be:	3b01      	subs	r3, #1
 80098c0:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 80098c2:	693b      	ldr	r3, [r7, #16]
 80098c4:	1c5a      	adds	r2, r3, #1
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 80098ca:	697b      	ldr	r3, [r7, #20]
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	3718      	adds	r7, #24
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}

080098d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b082      	sub	sp, #8
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
 80098dc:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d018      	beq.n	8009918 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	68da      	ldr	r2, [r3, #12]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098ee:	441a      	add	r2, r3
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	68da      	ldr	r2, [r3, #12]
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	689b      	ldr	r3, [r3, #8]
 80098fc:	429a      	cmp	r2, r3
 80098fe:	d303      	bcc.n	8009908 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681a      	ldr	r2, [r3, #0]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	68d9      	ldr	r1, [r3, #12]
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009910:	461a      	mov	r2, r3
 8009912:	6838      	ldr	r0, [r7, #0]
 8009914:	f004 fa9f 	bl	800de56 <memcpy>
    }
}
 8009918:	bf00      	nop
 800991a:	3708      	adds	r7, #8
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}

08009920 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b084      	sub	sp, #16
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8009928:	f002 f872 	bl	800ba10 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009932:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8009934:	e011      	b.n	800995a <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800993a:	2b00      	cmp	r3, #0
 800993c:	d012      	beq.n	8009964 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	3324      	adds	r3, #36	@ 0x24
 8009942:	4618      	mov	r0, r3
 8009944:	f000 ff4c 	bl	800a7e0 <xTaskRemoveFromEventList>
 8009948:	4603      	mov	r3, r0
 800994a:	2b00      	cmp	r3, #0
 800994c:	d001      	beq.n	8009952 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800994e:	f001 f8af 	bl	800aab0 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8009952:	7bfb      	ldrb	r3, [r7, #15]
 8009954:	3b01      	subs	r3, #1
 8009956:	b2db      	uxtb	r3, r3
 8009958:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800995a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800995e:	2b00      	cmp	r3, #0
 8009960:	dce9      	bgt.n	8009936 <prvUnlockQueue+0x16>
 8009962:	e000      	b.n	8009966 <prvUnlockQueue+0x46>
                    break;
 8009964:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	22ff      	movs	r2, #255	@ 0xff
 800996a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 800996e:	f002 f887 	bl	800ba80 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8009972:	f002 f84d 	bl	800ba10 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800997c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800997e:	e011      	b.n	80099a4 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	691b      	ldr	r3, [r3, #16]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d012      	beq.n	80099ae <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	3310      	adds	r3, #16
 800998c:	4618      	mov	r0, r3
 800998e:	f000 ff27 	bl	800a7e0 <xTaskRemoveFromEventList>
 8009992:	4603      	mov	r3, r0
 8009994:	2b00      	cmp	r3, #0
 8009996:	d001      	beq.n	800999c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8009998:	f001 f88a 	bl	800aab0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800999c:	7bbb      	ldrb	r3, [r7, #14]
 800999e:	3b01      	subs	r3, #1
 80099a0:	b2db      	uxtb	r3, r3
 80099a2:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80099a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	dce9      	bgt.n	8009980 <prvUnlockQueue+0x60>
 80099ac:	e000      	b.n	80099b0 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80099ae:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	22ff      	movs	r2, #255	@ 0xff
 80099b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 80099b8:	f002 f862 	bl	800ba80 <vPortExitCritical>
}
 80099bc:	bf00      	nop
 80099be:	3710      	adds	r7, #16
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b084      	sub	sp, #16
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80099cc:	f002 f820 	bl	800ba10 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d102      	bne.n	80099de <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80099d8:	2301      	movs	r3, #1
 80099da:	60fb      	str	r3, [r7, #12]
 80099dc:	e001      	b.n	80099e2 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80099de:	2300      	movs	r3, #0
 80099e0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80099e2:	f002 f84d 	bl	800ba80 <vPortExitCritical>

    return xReturn;
 80099e6:	68fb      	ldr	r3, [r7, #12]
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	3710      	adds	r7, #16
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}

080099f0 <prvIsQueueFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b084      	sub	sp, #16
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80099f8:	f002 f80a 	bl	800ba10 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a04:	429a      	cmp	r2, r3
 8009a06:	d102      	bne.n	8009a0e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8009a08:	2301      	movs	r3, #1
 8009a0a:	60fb      	str	r3, [r7, #12]
 8009a0c:	e001      	b.n	8009a12 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8009a12:	f002 f835 	bl	800ba80 <vPortExitCritical>

    return xReturn;
 8009a16:	68fb      	ldr	r3, [r7, #12]
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3710      	adds	r7, #16
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}

08009a20 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b086      	sub	sp, #24
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	60f8      	str	r0, [r7, #12]
 8009a28:	60b9      	str	r1, [r7, #8]
 8009a2a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8009a30:	f001 ffee 	bl	800ba10 <vPortEnterCritical>
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009a3a:	b25b      	sxtb	r3, r3
 8009a3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009a40:	d103      	bne.n	8009a4a <vQueueWaitForMessageRestricted+0x2a>
 8009a42:	697b      	ldr	r3, [r7, #20]
 8009a44:	2200      	movs	r2, #0
 8009a46:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009a4a:	697b      	ldr	r3, [r7, #20]
 8009a4c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009a50:	b25b      	sxtb	r3, r3
 8009a52:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009a56:	d103      	bne.n	8009a60 <vQueueWaitForMessageRestricted+0x40>
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009a60:	f002 f80e 	bl	800ba80 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d106      	bne.n	8009a7a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	3324      	adds	r3, #36	@ 0x24
 8009a70:	687a      	ldr	r2, [r7, #4]
 8009a72:	68b9      	ldr	r1, [r7, #8]
 8009a74:	4618      	mov	r0, r3
 8009a76:	f000 fe65 	bl	800a744 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8009a7a:	6978      	ldr	r0, [r7, #20]
 8009a7c:	f7ff ff50 	bl	8009920 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
    }
 8009a80:	bf00      	nop
 8009a82:	3718      	adds	r7, #24
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}

08009a88 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b08a      	sub	sp, #40	@ 0x28
 8009a8c:	af04      	add	r7, sp, #16
 8009a8e:	60f8      	str	r0, [r7, #12]
 8009a90:	60b9      	str	r1, [r7, #8]
 8009a92:	607a      	str	r2, [r7, #4]
 8009a94:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	009b      	lsls	r3, r3, #2
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f7f8 ffcc 	bl	8002a38 <pvPortMalloc>
 8009aa0:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d013      	beq.n	8009ad0 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8009aa8:	20b0      	movs	r0, #176	@ 0xb0
 8009aaa:	f7f8 ffc5 	bl	8002a38 <pvPortMalloc>
 8009aae:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8009ab0:	697b      	ldr	r3, [r7, #20]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d008      	beq.n	8009ac8 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8009ab6:	22b0      	movs	r2, #176	@ 0xb0
 8009ab8:	2100      	movs	r1, #0
 8009aba:	6978      	ldr	r0, [r7, #20]
 8009abc:	f004 f8dc 	bl	800dc78 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8009ac0:	697b      	ldr	r3, [r7, #20]
 8009ac2:	693a      	ldr	r2, [r7, #16]
 8009ac4:	631a      	str	r2, [r3, #48]	@ 0x30
 8009ac6:	e005      	b.n	8009ad4 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8009ac8:	6938      	ldr	r0, [r7, #16]
 8009aca:	f7f8 ffc3 	bl	8002a54 <vPortFree>
 8009ace:	e001      	b.n	8009ad4 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8009ad4:	697b      	ldr	r3, [r7, #20]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d00d      	beq.n	8009af6 <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009ada:	2300      	movs	r3, #0
 8009adc:	9303      	str	r3, [sp, #12]
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	9302      	str	r3, [sp, #8]
 8009ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ae4:	9301      	str	r3, [sp, #4]
 8009ae6:	6a3b      	ldr	r3, [r7, #32]
 8009ae8:	9300      	str	r3, [sp, #0]
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	687a      	ldr	r2, [r7, #4]
 8009aee:	68b9      	ldr	r1, [r7, #8]
 8009af0:	68f8      	ldr	r0, [r7, #12]
 8009af2:	f000 f829 	bl	8009b48 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8009af6:	697b      	ldr	r3, [r7, #20]
    }
 8009af8:	4618      	mov	r0, r3
 8009afa:	3718      	adds	r7, #24
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}

08009b00 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b088      	sub	sp, #32
 8009b04:	af02      	add	r7, sp, #8
 8009b06:	60f8      	str	r0, [r7, #12]
 8009b08:	60b9      	str	r1, [r7, #8]
 8009b0a:	607a      	str	r2, [r7, #4]
 8009b0c:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8009b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b10:	9301      	str	r3, [sp, #4]
 8009b12:	6a3b      	ldr	r3, [r7, #32]
 8009b14:	9300      	str	r3, [sp, #0]
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	687a      	ldr	r2, [r7, #4]
 8009b1a:	68b9      	ldr	r1, [r7, #8]
 8009b1c:	68f8      	ldr	r0, [r7, #12]
 8009b1e:	f7ff ffb3 	bl	8009a88 <prvCreateTask>
 8009b22:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d005      	beq.n	8009b36 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8009b2a:	6938      	ldr	r0, [r7, #16]
 8009b2c:	f000 f8c2 	bl	8009cb4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8009b30:	2301      	movs	r3, #1
 8009b32:	617b      	str	r3, [r7, #20]
 8009b34:	e002      	b.n	8009b3c <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009b36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009b3a:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 8009b3c:	697b      	ldr	r3, [r7, #20]
    }
 8009b3e:	4618      	mov	r0, r3
 8009b40:	3718      	adds	r7, #24
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}
	...

08009b48 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b088      	sub	sp, #32
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	60f8      	str	r0, [r7, #12]
 8009b50:	60b9      	str	r1, [r7, #8]
 8009b52:	607a      	str	r2, [r7, #4]
 8009b54:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8009b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b58:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	009b      	lsls	r3, r3, #2
 8009b5e:	461a      	mov	r2, r3
 8009b60:	21a5      	movs	r1, #165	@ 0xa5
 8009b62:	f004 f889 	bl	800dc78 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8009b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009b6a:	6879      	ldr	r1, [r7, #4]
 8009b6c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8009b70:	440b      	add	r3, r1
 8009b72:	009b      	lsls	r3, r3, #2
 8009b74:	4413      	add	r3, r2
 8009b76:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8009b78:	69bb      	ldr	r3, [r7, #24]
 8009b7a:	f023 0307 	bic.w	r3, r3, #7
 8009b7e:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8009b80:	69bb      	ldr	r3, [r7, #24]
 8009b82:	f003 0307 	and.w	r3, r3, #7
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d010      	beq.n	8009bac <prvInitialiseNewTask+0x64>
    __asm volatile
 8009b8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b8e:	b672      	cpsid	i
 8009b90:	f383 8811 	msr	BASEPRI, r3
 8009b94:	f3bf 8f6f 	isb	sy
 8009b98:	f3bf 8f4f 	dsb	sy
 8009b9c:	b662      	cpsie	i
 8009b9e:	617b      	str	r3, [r7, #20]
}
 8009ba0:	bf00      	nop
 8009ba2:	f240 712e 	movw	r1, #1838	@ 0x72e
 8009ba6:	483f      	ldr	r0, [pc, #252]	@ (8009ca4 <prvInitialiseNewTask+0x15c>)
 8009ba8:	f7f8 fc26 	bl	80023f8 <vAssertCalled>

        #if ( configRECORD_STACK_HIGH_ADDRESS == 1 )
        {
            /* Also record the stack's high address, which may assist
             * debugging. */
            pxNewTCB->pxEndOfStack = pxTopOfStack;
 8009bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bae:	69ba      	ldr	r2, [r7, #24]
 8009bb0:	645a      	str	r2, [r3, #68]	@ 0x44
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d01e      	beq.n	8009bf6 <prvInitialiseNewTask+0xae>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009bb8:	2300      	movs	r3, #0
 8009bba:	61fb      	str	r3, [r7, #28]
 8009bbc:	e012      	b.n	8009be4 <prvInitialiseNewTask+0x9c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009bbe:	68ba      	ldr	r2, [r7, #8]
 8009bc0:	69fb      	ldr	r3, [r7, #28]
 8009bc2:	4413      	add	r3, r2
 8009bc4:	7819      	ldrb	r1, [r3, #0]
 8009bc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009bc8:	69fb      	ldr	r3, [r7, #28]
 8009bca:	4413      	add	r3, r2
 8009bcc:	3334      	adds	r3, #52	@ 0x34
 8009bce:	460a      	mov	r2, r1
 8009bd0:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8009bd2:	68ba      	ldr	r2, [r7, #8]
 8009bd4:	69fb      	ldr	r3, [r7, #28]
 8009bd6:	4413      	add	r3, r2
 8009bd8:	781b      	ldrb	r3, [r3, #0]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d006      	beq.n	8009bec <prvInitialiseNewTask+0xa4>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009bde:	69fb      	ldr	r3, [r7, #28]
 8009be0:	3301      	adds	r3, #1
 8009be2:	61fb      	str	r3, [r7, #28]
 8009be4:	69fb      	ldr	r3, [r7, #28]
 8009be6:	2b0f      	cmp	r3, #15
 8009be8:	d9e9      	bls.n	8009bbe <prvInitialiseNewTask+0x76>
 8009bea:	e000      	b.n	8009bee <prvInitialiseNewTask+0xa6>
            {
                break;
 8009bec:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8009bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8009bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bf8:	2b06      	cmp	r3, #6
 8009bfa:	d910      	bls.n	8009c1e <prvInitialiseNewTask+0xd6>
    __asm volatile
 8009bfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c00:	b672      	cpsid	i
 8009c02:	f383 8811 	msr	BASEPRI, r3
 8009c06:	f3bf 8f6f 	isb	sy
 8009c0a:	f3bf 8f4f 	dsb	sy
 8009c0e:	b662      	cpsie	i
 8009c10:	613b      	str	r3, [r7, #16]
}
 8009c12:	bf00      	nop
 8009c14:	f240 7164 	movw	r1, #1892	@ 0x764
 8009c18:	4822      	ldr	r0, [pc, #136]	@ (8009ca4 <prvInitialiseNewTask+0x15c>)
 8009c1a:	f7f8 fbed 	bl	80023f8 <vAssertCalled>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c20:	2b06      	cmp	r3, #6
 8009c22:	d901      	bls.n	8009c28 <prvInitialiseNewTask+0xe0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009c24:	2306      	movs	r3, #6
 8009c26:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8009c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009c2c:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8009c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c30:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009c32:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c36:	3304      	adds	r3, #4
 8009c38:	4618      	mov	r0, r3
 8009c3a:	f7ff f853 	bl	8008ce4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c40:	3318      	adds	r3, #24
 8009c42:	4618      	mov	r0, r3
 8009c44:	f7ff f84e 	bl	8008ce4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c4c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8009c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c50:	f1c3 0207 	rsb	r2, r3, #7
 8009c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c56:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c5c:	625a      	str	r2, [r3, #36]	@ 0x24
    #endif

    #if ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 )
    {
        /* Allocate and initialize memory for the task's TLS Block. */
        configINIT_TLS_BLOCK( pxNewTCB->xTLSBlock, pxTopOfStack );
 8009c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c60:	335c      	adds	r3, #92	@ 0x5c
 8009c62:	224c      	movs	r2, #76	@ 0x4c
 8009c64:	2100      	movs	r1, #0
 8009c66:	4618      	mov	r0, r3
 8009c68:	f004 f806 	bl	800dc78 <memset>
 8009c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c6e:	4a0e      	ldr	r2, [pc, #56]	@ (8009ca8 <prvInitialiseNewTask+0x160>)
 8009c70:	661a      	str	r2, [r3, #96]	@ 0x60
 8009c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c74:	4a0d      	ldr	r2, [pc, #52]	@ (8009cac <prvInitialiseNewTask+0x164>)
 8009c76:	665a      	str	r2, [r3, #100]	@ 0x64
 8009c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c7a:	4a0d      	ldr	r2, [pc, #52]	@ (8009cb0 <prvInitialiseNewTask+0x168>)
 8009c7c:	669a      	str	r2, [r3, #104]	@ 0x68
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009c7e:	683a      	ldr	r2, [r7, #0]
 8009c80:	68f9      	ldr	r1, [r7, #12]
 8009c82:	69b8      	ldr	r0, [r7, #24]
 8009c84:	f001 fd50 	bl	800b728 <pxPortInitialiseStack>
 8009c88:	4602      	mov	r2, r0
 8009c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c8c:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8009c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d002      	beq.n	8009c9a <prvInitialiseNewTask+0x152>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c98:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8009c9a:	bf00      	nop
 8009c9c:	3720      	adds	r7, #32
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}
 8009ca2:	bf00      	nop
 8009ca4:	08010ac8 	.word	0x08010ac8
 8009ca8:	200004d0 	.word	0x200004d0
 8009cac:	20000538 	.word	0x20000538
 8009cb0:	200005a0 	.word	0x200005a0

08009cb4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b084      	sub	sp, #16
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8009cbc:	f001 fea8 	bl	800ba10 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8009cc0:	4b41      	ldr	r3, [pc, #260]	@ (8009dc8 <prvAddNewTaskToReadyList+0x114>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	3301      	adds	r3, #1
 8009cc6:	4a40      	ldr	r2, [pc, #256]	@ (8009dc8 <prvAddNewTaskToReadyList+0x114>)
 8009cc8:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 8009cca:	4b40      	ldr	r3, [pc, #256]	@ (8009dcc <prvAddNewTaskToReadyList+0x118>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d109      	bne.n	8009ce6 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8009cd2:	4a3e      	ldr	r2, [pc, #248]	@ (8009dcc <prvAddNewTaskToReadyList+0x118>)
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009cd8:	4b3b      	ldr	r3, [pc, #236]	@ (8009dc8 <prvAddNewTaskToReadyList+0x114>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	2b01      	cmp	r3, #1
 8009cde:	d110      	bne.n	8009d02 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8009ce0:	f000 ff0a 	bl	800aaf8 <prvInitialiseTaskLists>
 8009ce4:	e00d      	b.n	8009d02 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8009ce6:	4b3a      	ldr	r3, [pc, #232]	@ (8009dd0 <prvAddNewTaskToReadyList+0x11c>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d109      	bne.n	8009d02 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009cee:	4b37      	ldr	r3, [pc, #220]	@ (8009dcc <prvAddNewTaskToReadyList+0x118>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cf8:	429a      	cmp	r2, r3
 8009cfa:	d802      	bhi.n	8009d02 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8009cfc:	4a33      	ldr	r2, [pc, #204]	@ (8009dcc <prvAddNewTaskToReadyList+0x118>)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8009d02:	4b34      	ldr	r3, [pc, #208]	@ (8009dd4 <prvAddNewTaskToReadyList+0x120>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	3301      	adds	r3, #1
 8009d08:	4a32      	ldr	r2, [pc, #200]	@ (8009dd4 <prvAddNewTaskToReadyList+0x120>)
 8009d0a:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009d0c:	4b31      	ldr	r3, [pc, #196]	@ (8009dd4 <prvAddNewTaskToReadyList+0x120>)
 8009d0e:	681a      	ldr	r2, [r3, #0]
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	649a      	str	r2, [r3, #72]	@ 0x48
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d18:	2201      	movs	r2, #1
 8009d1a:	409a      	lsls	r2, r3
 8009d1c:	4b2e      	ldr	r3, [pc, #184]	@ (8009dd8 <prvAddNewTaskToReadyList+0x124>)
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	4313      	orrs	r3, r2
 8009d22:	4a2d      	ldr	r2, [pc, #180]	@ (8009dd8 <prvAddNewTaskToReadyList+0x124>)
 8009d24:	6013      	str	r3, [r2, #0]
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d2a:	492c      	ldr	r1, [pc, #176]	@ (8009ddc <prvAddNewTaskToReadyList+0x128>)
 8009d2c:	4613      	mov	r3, r2
 8009d2e:	009b      	lsls	r3, r3, #2
 8009d30:	4413      	add	r3, r2
 8009d32:	009b      	lsls	r3, r3, #2
 8009d34:	440b      	add	r3, r1
 8009d36:	3304      	adds	r3, #4
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	60fb      	str	r3, [r7, #12]
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	68fa      	ldr	r2, [r7, #12]
 8009d40:	609a      	str	r2, [r3, #8]
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	689a      	ldr	r2, [r3, #8]
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	60da      	str	r2, [r3, #12]
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	689b      	ldr	r3, [r3, #8]
 8009d4e:	687a      	ldr	r2, [r7, #4]
 8009d50:	3204      	adds	r2, #4
 8009d52:	605a      	str	r2, [r3, #4]
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	1d1a      	adds	r2, r3, #4
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	609a      	str	r2, [r3, #8]
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d60:	4613      	mov	r3, r2
 8009d62:	009b      	lsls	r3, r3, #2
 8009d64:	4413      	add	r3, r2
 8009d66:	009b      	lsls	r3, r3, #2
 8009d68:	4a1c      	ldr	r2, [pc, #112]	@ (8009ddc <prvAddNewTaskToReadyList+0x128>)
 8009d6a:	441a      	add	r2, r3
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	615a      	str	r2, [r3, #20]
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d74:	4919      	ldr	r1, [pc, #100]	@ (8009ddc <prvAddNewTaskToReadyList+0x128>)
 8009d76:	4613      	mov	r3, r2
 8009d78:	009b      	lsls	r3, r3, #2
 8009d7a:	4413      	add	r3, r2
 8009d7c:	009b      	lsls	r3, r3, #2
 8009d7e:	440b      	add	r3, r1
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	687a      	ldr	r2, [r7, #4]
 8009d84:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009d86:	1c59      	adds	r1, r3, #1
 8009d88:	4814      	ldr	r0, [pc, #80]	@ (8009ddc <prvAddNewTaskToReadyList+0x128>)
 8009d8a:	4613      	mov	r3, r2
 8009d8c:	009b      	lsls	r3, r3, #2
 8009d8e:	4413      	add	r3, r2
 8009d90:	009b      	lsls	r3, r3, #2
 8009d92:	4403      	add	r3, r0
 8009d94:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8009d96:	f001 fe73 	bl	800ba80 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8009d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8009dd0 <prvAddNewTaskToReadyList+0x11c>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d00e      	beq.n	8009dc0 <prvAddNewTaskToReadyList+0x10c>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8009da2:	4b0a      	ldr	r3, [pc, #40]	@ (8009dcc <prvAddNewTaskToReadyList+0x118>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dac:	429a      	cmp	r2, r3
 8009dae:	d207      	bcs.n	8009dc0 <prvAddNewTaskToReadyList+0x10c>
 8009db0:	4b0b      	ldr	r3, [pc, #44]	@ (8009de0 <prvAddNewTaskToReadyList+0x12c>)
 8009db2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009db6:	601a      	str	r2, [r3, #0]
 8009db8:	f3bf 8f4f 	dsb	sy
 8009dbc:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8009dc0:	bf00      	nop
 8009dc2:	3710      	adds	r7, #16
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}
 8009dc8:	20000450 	.word	0x20000450
 8009dcc:	20000350 	.word	0x20000350
 8009dd0:	2000045c 	.word	0x2000045c
 8009dd4:	2000046c 	.word	0x2000046c
 8009dd8:	20000458 	.word	0x20000458
 8009ddc:	20000354 	.word	0x20000354
 8009de0:	e000ed04 	.word	0xe000ed04

08009de4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b086      	sub	sp, #24
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        BaseType_t xDeleteTCBInIdleTask = pdFALSE;
 8009dec:	2300      	movs	r3, #0
 8009dee:	617b      	str	r3, [r7, #20]
        BaseType_t xTaskIsRunningOrYielding;

        traceENTER_vTaskDelete( xTaskToDelete );

        taskENTER_CRITICAL();
 8009df0:	f001 fe0e 	bl	800ba10 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d102      	bne.n	8009e00 <vTaskDelete+0x1c>
 8009dfa:	4b44      	ldr	r3, [pc, #272]	@ (8009f0c <vTaskDelete+0x128>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	e000      	b.n	8009e02 <vTaskDelete+0x1e>
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	613b      	str	r3, [r7, #16]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	3304      	adds	r3, #4
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f7fe ffd5 	bl	8008db8 <uxListRemove>
 8009e0e:	4603      	mov	r3, r0
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d115      	bne.n	8009e40 <vTaskDelete+0x5c>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009e14:	693b      	ldr	r3, [r7, #16]
 8009e16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e18:	493d      	ldr	r1, [pc, #244]	@ (8009f10 <vTaskDelete+0x12c>)
 8009e1a:	4613      	mov	r3, r2
 8009e1c:	009b      	lsls	r3, r3, #2
 8009e1e:	4413      	add	r3, r2
 8009e20:	009b      	lsls	r3, r3, #2
 8009e22:	440b      	add	r3, r1
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d10a      	bne.n	8009e40 <vTaskDelete+0x5c>
 8009e2a:	693b      	ldr	r3, [r7, #16]
 8009e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e2e:	2201      	movs	r2, #1
 8009e30:	fa02 f303 	lsl.w	r3, r2, r3
 8009e34:	43da      	mvns	r2, r3
 8009e36:	4b37      	ldr	r3, [pc, #220]	@ (8009f14 <vTaskDelete+0x130>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	4013      	ands	r3, r2
 8009e3c:	4a35      	ldr	r2, [pc, #212]	@ (8009f14 <vTaskDelete+0x130>)
 8009e3e:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009e40:	693b      	ldr	r3, [r7, #16]
 8009e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d004      	beq.n	8009e52 <vTaskDelete+0x6e>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	3318      	adds	r3, #24
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f7fe ffb3 	bl	8008db8 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8009e52:	4b31      	ldr	r3, [pc, #196]	@ (8009f18 <vTaskDelete+0x134>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	3301      	adds	r3, #1
 8009e58:	4a2f      	ldr	r2, [pc, #188]	@ (8009f18 <vTaskDelete+0x134>)
 8009e5a:	6013      	str	r3, [r2, #0]

            /* Use temp variable as distinct sequence points for reading volatile
             * variables prior to a logical operator to ensure compliance with
             * MISRA C 2012 Rule 13.5. */
            xTaskIsRunningOrYielding = taskTASK_IS_RUNNING_OR_SCHEDULED_TO_YIELD( pxTCB );
 8009e5c:	4b2b      	ldr	r3, [pc, #172]	@ (8009f0c <vTaskDelete+0x128>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	693a      	ldr	r2, [r7, #16]
 8009e62:	429a      	cmp	r2, r3
 8009e64:	d101      	bne.n	8009e6a <vTaskDelete+0x86>
 8009e66:	2301      	movs	r3, #1
 8009e68:	e000      	b.n	8009e6c <vTaskDelete+0x88>
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	60fb      	str	r3, [r7, #12]

            /* If the task is running (or yielding), we must add it to the
             * termination list so that an idle task can delete it when it is
             * no longer running. */
            if( ( xSchedulerRunning != pdFALSE ) && ( xTaskIsRunningOrYielding != pdFALSE ) )
 8009e6e:	4b2b      	ldr	r3, [pc, #172]	@ (8009f1c <vTaskDelete+0x138>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d010      	beq.n	8009e98 <vTaskDelete+0xb4>
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d00d      	beq.n	8009e98 <vTaskDelete+0xb4>
                 * deleted. This cannot complete when the task is still running
                 * on a core, as a context switch to another task is required.
                 * Place the task in the termination list. The idle task will check
                 * the termination list and free up any memory allocated by the
                 * scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8009e7c:	693b      	ldr	r3, [r7, #16]
 8009e7e:	3304      	adds	r3, #4
 8009e80:	4619      	mov	r1, r3
 8009e82:	4827      	ldr	r0, [pc, #156]	@ (8009f20 <vTaskDelete+0x13c>)
 8009e84:	f7fe ff3b 	bl	8008cfe <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8009e88:	4b26      	ldr	r3, [pc, #152]	@ (8009f24 <vTaskDelete+0x140>)
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	3301      	adds	r3, #1
 8009e8e:	4a25      	ldr	r2, [pc, #148]	@ (8009f24 <vTaskDelete+0x140>)
 8009e90:	6013      	str	r3, [r2, #0]
                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );

                /* Delete the task TCB in idle task. */
                xDeleteTCBInIdleTask = pdTRUE;
 8009e92:	2301      	movs	r3, #1
 8009e94:	617b      	str	r3, [r7, #20]
 8009e96:	e006      	b.n	8009ea6 <vTaskDelete+0xc2>
                }
                #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8009e98:	4b23      	ldr	r3, [pc, #140]	@ (8009f28 <vTaskDelete+0x144>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	3b01      	subs	r3, #1
 8009e9e:	4a22      	ldr	r2, [pc, #136]	@ (8009f28 <vTaskDelete+0x144>)
 8009ea0:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8009ea2:	f000 fead 	bl	800ac00 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8009ea6:	f001 fdeb 	bl	800ba80 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( xDeleteTCBInIdleTask != pdTRUE )
 8009eaa:	697b      	ldr	r3, [r7, #20]
 8009eac:	2b01      	cmp	r3, #1
 8009eae:	d002      	beq.n	8009eb6 <vTaskDelete+0xd2>
        {
            prvDeleteTCB( pxTCB );
 8009eb0:	6938      	ldr	r0, [r7, #16]
 8009eb2:	f000 fe8f 	bl	800abd4 <prvDeleteTCB>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        #if ( configNUMBER_OF_CORES == 1 )
        {
            if( xSchedulerRunning != pdFALSE )
 8009eb6:	4b19      	ldr	r3, [pc, #100]	@ (8009f1c <vTaskDelete+0x138>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d021      	beq.n	8009f02 <vTaskDelete+0x11e>
            {
                if( pxTCB == pxCurrentTCB )
 8009ebe:	4b13      	ldr	r3, [pc, #76]	@ (8009f0c <vTaskDelete+0x128>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	693a      	ldr	r2, [r7, #16]
 8009ec4:	429a      	cmp	r2, r3
 8009ec6:	d11c      	bne.n	8009f02 <vTaskDelete+0x11e>
                {
                    configASSERT( uxSchedulerSuspended == 0 );
 8009ec8:	4b18      	ldr	r3, [pc, #96]	@ (8009f2c <vTaskDelete+0x148>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d010      	beq.n	8009ef2 <vTaskDelete+0x10e>
    __asm volatile
 8009ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ed4:	b672      	cpsid	i
 8009ed6:	f383 8811 	msr	BASEPRI, r3
 8009eda:	f3bf 8f6f 	isb	sy
 8009ede:	f3bf 8f4f 	dsb	sy
 8009ee2:	b662      	cpsie	i
 8009ee4:	60bb      	str	r3, [r7, #8]
}
 8009ee6:	bf00      	nop
 8009ee8:	f640 1114 	movw	r1, #2324	@ 0x914
 8009eec:	4810      	ldr	r0, [pc, #64]	@ (8009f30 <vTaskDelete+0x14c>)
 8009eee:	f7f8 fa83 	bl	80023f8 <vAssertCalled>
                    taskYIELD_WITHIN_API();
 8009ef2:	4b10      	ldr	r3, [pc, #64]	@ (8009f34 <vTaskDelete+0x150>)
 8009ef4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ef8:	601a      	str	r2, [r3, #0]
 8009efa:	f3bf 8f4f 	dsb	sy
 8009efe:	f3bf 8f6f 	isb	sy
            }
        }
        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

        traceRETURN_vTaskDelete();
    }
 8009f02:	bf00      	nop
 8009f04:	3718      	adds	r7, #24
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}
 8009f0a:	bf00      	nop
 8009f0c:	20000350 	.word	0x20000350
 8009f10:	20000354 	.word	0x20000354
 8009f14:	20000458 	.word	0x20000458
 8009f18:	2000046c 	.word	0x2000046c
 8009f1c:	2000045c 	.word	0x2000045c
 8009f20:	20000424 	.word	0x20000424
 8009f24:	20000438 	.word	0x20000438
 8009f28:	20000450 	.word	0x20000450
 8009f2c:	20000478 	.word	0x20000478
 8009f30:	08010ac8 	.word	0x08010ac8
 8009f34:	e000ed04 	.word	0xe000ed04

08009f38 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b084      	sub	sp, #16
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8009f40:	2300      	movs	r3, #0
 8009f42:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d01d      	beq.n	8009f86 <vTaskDelay+0x4e>
        {
            vTaskSuspendAll();
 8009f4a:	f000 f8d3 	bl	800a0f4 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 8009f4e:	4b15      	ldr	r3, [pc, #84]	@ (8009fa4 <vTaskDelay+0x6c>)
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	2b01      	cmp	r3, #1
 8009f54:	d010      	beq.n	8009f78 <vTaskDelay+0x40>
    __asm volatile
 8009f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f5a:	b672      	cpsid	i
 8009f5c:	f383 8811 	msr	BASEPRI, r3
 8009f60:	f3bf 8f6f 	isb	sy
 8009f64:	f3bf 8f4f 	dsb	sy
 8009f68:	b662      	cpsie	i
 8009f6a:	60bb      	str	r3, [r7, #8]
}
 8009f6c:	bf00      	nop
 8009f6e:	f640 118e 	movw	r1, #2446	@ 0x98e
 8009f72:	480d      	ldr	r0, [pc, #52]	@ (8009fa8 <vTaskDelay+0x70>)
 8009f74:	f7f8 fa40 	bl	80023f8 <vAssertCalled>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009f78:	2100      	movs	r1, #0
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f001 f8c0 	bl	800b100 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8009f80:	f000 f8c6 	bl	800a110 <xTaskResumeAll>
 8009f84:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d107      	bne.n	8009f9c <vTaskDelay+0x64>
        {
            taskYIELD_WITHIN_API();
 8009f8c:	4b07      	ldr	r3, [pc, #28]	@ (8009fac <vTaskDelay+0x74>)
 8009f8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f92:	601a      	str	r2, [r3, #0]
 8009f94:	f3bf 8f4f 	dsb	sy
 8009f98:	f3bf 8f6f 	isb	sy
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
    }
 8009f9c:	bf00      	nop
 8009f9e:	3710      	adds	r7, #16
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}
 8009fa4:	20000478 	.word	0x20000478
 8009fa8:	08010ac8 	.word	0x08010ac8
 8009fac:	e000ed04 	.word	0xe000ed04

08009fb0 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b08a      	sub	sp, #40	@ 0x28
 8009fb4:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	617b      	str	r3, [r7, #20]
 8009fc2:	e011      	b.n	8009fe8 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8009fc4:	4a1d      	ldr	r2, [pc, #116]	@ (800a03c <prvCreateIdleTasks+0x8c>)
 8009fc6:	697b      	ldr	r3, [r7, #20]
 8009fc8:	4413      	add	r3, r2
 8009fca:	7819      	ldrb	r1, [r3, #0]
 8009fcc:	463a      	mov	r2, r7
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	4413      	add	r3, r2
 8009fd2:	460a      	mov	r2, r1
 8009fd4:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8009fd6:	463a      	mov	r2, r7
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	4413      	add	r3, r2
 8009fdc:	781b      	ldrb	r3, [r3, #0]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d006      	beq.n	8009ff0 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	3301      	adds	r3, #1
 8009fe6:	617b      	str	r3, [r7, #20]
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	2b0f      	cmp	r3, #15
 8009fec:	ddea      	ble.n	8009fc4 <prvCreateIdleTasks+0x14>
 8009fee:	e000      	b.n	8009ff2 <prvCreateIdleTasks+0x42>
        {
            break;
 8009ff0:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	61bb      	str	r3, [r7, #24]
 8009ff6:	e016      	b.n	800a026 <prvCreateIdleTasks+0x76>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8009ff8:	4b11      	ldr	r3, [pc, #68]	@ (800a040 <prvCreateIdleTasks+0x90>)
 8009ffa:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 8009ffc:	69bb      	ldr	r3, [r7, #24]
 8009ffe:	009b      	lsls	r3, r3, #2
 800a000:	4a10      	ldr	r2, [pc, #64]	@ (800a044 <prvCreateIdleTasks+0x94>)
 800a002:	4413      	add	r3, r2
 800a004:	4639      	mov	r1, r7
 800a006:	9301      	str	r3, [sp, #4]
 800a008:	2300      	movs	r3, #0
 800a00a:	9300      	str	r3, [sp, #0]
 800a00c:	2300      	movs	r3, #0
 800a00e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a012:	6938      	ldr	r0, [r7, #16]
 800a014:	f7ff fd74 	bl	8009b00 <xTaskCreate>
 800a018:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 800a01a:	69fb      	ldr	r3, [r7, #28]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d006      	beq.n	800a02e <prvCreateIdleTasks+0x7e>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 800a020:	69bb      	ldr	r3, [r7, #24]
 800a022:	3301      	adds	r3, #1
 800a024:	61bb      	str	r3, [r7, #24]
 800a026:	69bb      	ldr	r3, [r7, #24]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	dde5      	ble.n	8009ff8 <prvCreateIdleTasks+0x48>
 800a02c:	e000      	b.n	800a030 <prvCreateIdleTasks+0x80>
        {
            break;
 800a02e:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 800a030:	69fb      	ldr	r3, [r7, #28]
}
 800a032:	4618      	mov	r0, r3
 800a034:	3720      	adds	r7, #32
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}
 800a03a:	bf00      	nop
 800a03c:	08010b7c 	.word	0x08010b7c
 800a040:	0800aac9 	.word	0x0800aac9
 800a044:	20000474 	.word	0x20000474

0800a048 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b084      	sub	sp, #16
 800a04c:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 800a04e:	f7ff ffaf 	bl	8009fb0 <prvCreateIdleTasks>
 800a052:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	2b01      	cmp	r3, #1
 800a058:	d102      	bne.n	800a060 <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 800a05a:	f001 f8d3 	bl	800b204 <xTimerCreateTimerTask>
 800a05e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	2b01      	cmp	r3, #1
 800a064:	d11d      	bne.n	800a0a2 <vTaskStartScheduler+0x5a>
    __asm volatile
 800a066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a06a:	b672      	cpsid	i
 800a06c:	f383 8811 	msr	BASEPRI, r3
 800a070:	f3bf 8f6f 	isb	sy
 800a074:	f3bf 8f4f 	dsb	sy
 800a078:	b662      	cpsie	i
 800a07a:	60bb      	str	r3, [r7, #8]
}
 800a07c:	bf00      	nop

        #if ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 )
        {
            /* Switch C-Runtime's TLS Block to point to the TLS
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 800a07e:	4b16      	ldr	r3, [pc, #88]	@ (800a0d8 <vTaskStartScheduler+0x90>)
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	335c      	adds	r3, #92	@ 0x5c
 800a084:	4a15      	ldr	r2, [pc, #84]	@ (800a0dc <vTaskStartScheduler+0x94>)
 800a086:	6013      	str	r3, [r2, #0]
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800a088:	4b15      	ldr	r3, [pc, #84]	@ (800a0e0 <vTaskStartScheduler+0x98>)
 800a08a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a08e:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800a090:	4b14      	ldr	r3, [pc, #80]	@ (800a0e4 <vTaskStartScheduler+0x9c>)
 800a092:	2201      	movs	r2, #1
 800a094:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a096:	4b14      	ldr	r3, [pc, #80]	@ (800a0e8 <vTaskStartScheduler+0xa0>)
 800a098:	2200      	movs	r2, #0
 800a09a:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 800a09c:	f001 fbda 	bl	800b854 <xPortStartScheduler>
 800a0a0:	e014      	b.n	800a0cc <vTaskStartScheduler+0x84>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a0a8:	d110      	bne.n	800a0cc <vTaskStartScheduler+0x84>
    __asm volatile
 800a0aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0ae:	b672      	cpsid	i
 800a0b0:	f383 8811 	msr	BASEPRI, r3
 800a0b4:	f3bf 8f6f 	isb	sy
 800a0b8:	f3bf 8f4f 	dsb	sy
 800a0bc:	b662      	cpsie	i
 800a0be:	607b      	str	r3, [r7, #4]
}
 800a0c0:	bf00      	nop
 800a0c2:	f640 61a9 	movw	r1, #3753	@ 0xea9
 800a0c6:	4809      	ldr	r0, [pc, #36]	@ (800a0ec <vTaskStartScheduler+0xa4>)
 800a0c8:	f7f8 f996 	bl	80023f8 <vAssertCalled>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800a0cc:	4b08      	ldr	r3, [pc, #32]	@ (800a0f0 <vTaskStartScheduler+0xa8>)
 800a0ce:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 800a0d0:	bf00      	nop
 800a0d2:	3710      	adds	r7, #16
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}
 800a0d8:	20000350 	.word	0x20000350
 800a0dc:	2000018c 	.word	0x2000018c
 800a0e0:	20000470 	.word	0x20000470
 800a0e4:	2000045c 	.word	0x2000045c
 800a0e8:	20000454 	.word	0x20000454
 800a0ec:	08010ac8 	.word	0x08010ac8
 800a0f0:	08010f4c 	.word	0x08010f4c

0800a0f4 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 800a0f8:	4b04      	ldr	r3, [pc, #16]	@ (800a10c <vTaskSuspendAll+0x18>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	3301      	adds	r3, #1
 800a0fe:	4a03      	ldr	r2, [pc, #12]	@ (800a10c <vTaskSuspendAll+0x18>)
 800a100:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 800a102:	bf00      	nop
 800a104:	46bd      	mov	sp, r7
 800a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10a:	4770      	bx	lr
 800a10c:	20000478 	.word	0x20000478

0800a110 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b088      	sub	sp, #32
 800a114:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800a116:	2300      	movs	r3, #0
 800a118:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800a11a:	2300      	movs	r3, #0
 800a11c:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 800a11e:	f001 fc77 	bl	800ba10 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 800a122:	2300      	movs	r3, #0
 800a124:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 800a126:	4b78      	ldr	r3, [pc, #480]	@ (800a308 <xTaskResumeAll+0x1f8>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d110      	bne.n	800a150 <xTaskResumeAll+0x40>
    __asm volatile
 800a12e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a132:	b672      	cpsid	i
 800a134:	f383 8811 	msr	BASEPRI, r3
 800a138:	f3bf 8f6f 	isb	sy
 800a13c:	f3bf 8f4f 	dsb	sy
 800a140:	b662      	cpsie	i
 800a142:	603b      	str	r3, [r7, #0]
}
 800a144:	bf00      	nop
 800a146:	f640 718b 	movw	r1, #3979	@ 0xf8b
 800a14a:	4870      	ldr	r0, [pc, #448]	@ (800a30c <xTaskResumeAll+0x1fc>)
 800a14c:	f7f8 f954 	bl	80023f8 <vAssertCalled>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 800a150:	4b6d      	ldr	r3, [pc, #436]	@ (800a308 <xTaskResumeAll+0x1f8>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	3b01      	subs	r3, #1
 800a156:	4a6c      	ldr	r2, [pc, #432]	@ (800a308 <xTaskResumeAll+0x1f8>)
 800a158:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800a15a:	4b6b      	ldr	r3, [pc, #428]	@ (800a308 <xTaskResumeAll+0x1f8>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	f040 80ca 	bne.w	800a2f8 <xTaskResumeAll+0x1e8>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a164:	4b6a      	ldr	r3, [pc, #424]	@ (800a310 <xTaskResumeAll+0x200>)
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	f000 80c5 	beq.w	800a2f8 <xTaskResumeAll+0x1e8>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a16e:	e08e      	b.n	800a28e <xTaskResumeAll+0x17e>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800a170:	4b68      	ldr	r3, [pc, #416]	@ (800a314 <xTaskResumeAll+0x204>)
 800a172:	68db      	ldr	r3, [r3, #12]
 800a174:	68db      	ldr	r3, [r3, #12]
 800a176:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800a178:	69fb      	ldr	r3, [r7, #28]
 800a17a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a17c:	60fb      	str	r3, [r7, #12]
 800a17e:	69fb      	ldr	r3, [r7, #28]
 800a180:	69db      	ldr	r3, [r3, #28]
 800a182:	69fa      	ldr	r2, [r7, #28]
 800a184:	6a12      	ldr	r2, [r2, #32]
 800a186:	609a      	str	r2, [r3, #8]
 800a188:	69fb      	ldr	r3, [r7, #28]
 800a18a:	6a1b      	ldr	r3, [r3, #32]
 800a18c:	69fa      	ldr	r2, [r7, #28]
 800a18e:	69d2      	ldr	r2, [r2, #28]
 800a190:	605a      	str	r2, [r3, #4]
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	685a      	ldr	r2, [r3, #4]
 800a196:	69fb      	ldr	r3, [r7, #28]
 800a198:	3318      	adds	r3, #24
 800a19a:	429a      	cmp	r2, r3
 800a19c:	d103      	bne.n	800a1a6 <xTaskResumeAll+0x96>
 800a19e:	69fb      	ldr	r3, [r7, #28]
 800a1a0:	6a1a      	ldr	r2, [r3, #32]
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	605a      	str	r2, [r3, #4]
 800a1a6:	69fb      	ldr	r3, [r7, #28]
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	629a      	str	r2, [r3, #40]	@ 0x28
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	1e5a      	subs	r2, r3, #1
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800a1b6:	69fb      	ldr	r3, [r7, #28]
 800a1b8:	695b      	ldr	r3, [r3, #20]
 800a1ba:	60bb      	str	r3, [r7, #8]
 800a1bc:	69fb      	ldr	r3, [r7, #28]
 800a1be:	689b      	ldr	r3, [r3, #8]
 800a1c0:	69fa      	ldr	r2, [r7, #28]
 800a1c2:	68d2      	ldr	r2, [r2, #12]
 800a1c4:	609a      	str	r2, [r3, #8]
 800a1c6:	69fb      	ldr	r3, [r7, #28]
 800a1c8:	68db      	ldr	r3, [r3, #12]
 800a1ca:	69fa      	ldr	r2, [r7, #28]
 800a1cc:	6892      	ldr	r2, [r2, #8]
 800a1ce:	605a      	str	r2, [r3, #4]
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	685a      	ldr	r2, [r3, #4]
 800a1d4:	69fb      	ldr	r3, [r7, #28]
 800a1d6:	3304      	adds	r3, #4
 800a1d8:	429a      	cmp	r2, r3
 800a1da:	d103      	bne.n	800a1e4 <xTaskResumeAll+0xd4>
 800a1dc:	69fb      	ldr	r3, [r7, #28]
 800a1de:	68da      	ldr	r2, [r3, #12]
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	605a      	str	r2, [r3, #4]
 800a1e4:	69fb      	ldr	r3, [r7, #28]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	615a      	str	r2, [r3, #20]
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	1e5a      	subs	r2, r3, #1
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 800a1f4:	69fb      	ldr	r3, [r7, #28]
 800a1f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1f8:	2201      	movs	r2, #1
 800a1fa:	409a      	lsls	r2, r3
 800a1fc:	4b46      	ldr	r3, [pc, #280]	@ (800a318 <xTaskResumeAll+0x208>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4313      	orrs	r3, r2
 800a202:	4a45      	ldr	r2, [pc, #276]	@ (800a318 <xTaskResumeAll+0x208>)
 800a204:	6013      	str	r3, [r2, #0]
 800a206:	69fb      	ldr	r3, [r7, #28]
 800a208:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a20a:	4944      	ldr	r1, [pc, #272]	@ (800a31c <xTaskResumeAll+0x20c>)
 800a20c:	4613      	mov	r3, r2
 800a20e:	009b      	lsls	r3, r3, #2
 800a210:	4413      	add	r3, r2
 800a212:	009b      	lsls	r3, r3, #2
 800a214:	440b      	add	r3, r1
 800a216:	3304      	adds	r3, #4
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	607b      	str	r3, [r7, #4]
 800a21c:	69fb      	ldr	r3, [r7, #28]
 800a21e:	687a      	ldr	r2, [r7, #4]
 800a220:	609a      	str	r2, [r3, #8]
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	689a      	ldr	r2, [r3, #8]
 800a226:	69fb      	ldr	r3, [r7, #28]
 800a228:	60da      	str	r2, [r3, #12]
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	689b      	ldr	r3, [r3, #8]
 800a22e:	69fa      	ldr	r2, [r7, #28]
 800a230:	3204      	adds	r2, #4
 800a232:	605a      	str	r2, [r3, #4]
 800a234:	69fb      	ldr	r3, [r7, #28]
 800a236:	1d1a      	adds	r2, r3, #4
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	609a      	str	r2, [r3, #8]
 800a23c:	69fb      	ldr	r3, [r7, #28]
 800a23e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a240:	4613      	mov	r3, r2
 800a242:	009b      	lsls	r3, r3, #2
 800a244:	4413      	add	r3, r2
 800a246:	009b      	lsls	r3, r3, #2
 800a248:	4a34      	ldr	r2, [pc, #208]	@ (800a31c <xTaskResumeAll+0x20c>)
 800a24a:	441a      	add	r2, r3
 800a24c:	69fb      	ldr	r3, [r7, #28]
 800a24e:	615a      	str	r2, [r3, #20]
 800a250:	69fb      	ldr	r3, [r7, #28]
 800a252:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a254:	4931      	ldr	r1, [pc, #196]	@ (800a31c <xTaskResumeAll+0x20c>)
 800a256:	4613      	mov	r3, r2
 800a258:	009b      	lsls	r3, r3, #2
 800a25a:	4413      	add	r3, r2
 800a25c:	009b      	lsls	r3, r3, #2
 800a25e:	440b      	add	r3, r1
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	69fa      	ldr	r2, [r7, #28]
 800a264:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800a266:	1c59      	adds	r1, r3, #1
 800a268:	482c      	ldr	r0, [pc, #176]	@ (800a31c <xTaskResumeAll+0x20c>)
 800a26a:	4613      	mov	r3, r2
 800a26c:	009b      	lsls	r3, r3, #2
 800a26e:	4413      	add	r3, r2
 800a270:	009b      	lsls	r3, r3, #2
 800a272:	4403      	add	r3, r0
 800a274:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a276:	69fb      	ldr	r3, [r7, #28]
 800a278:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a27a:	4b29      	ldr	r3, [pc, #164]	@ (800a320 <xTaskResumeAll+0x210>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a280:	429a      	cmp	r2, r3
 800a282:	d904      	bls.n	800a28e <xTaskResumeAll+0x17e>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 800a284:	4a27      	ldr	r2, [pc, #156]	@ (800a324 <xTaskResumeAll+0x214>)
 800a286:	693b      	ldr	r3, [r7, #16]
 800a288:	2101      	movs	r1, #1
 800a28a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a28e:	4b21      	ldr	r3, [pc, #132]	@ (800a314 <xTaskResumeAll+0x204>)
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	2b00      	cmp	r3, #0
 800a294:	f47f af6c 	bne.w	800a170 <xTaskResumeAll+0x60>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 800a298:	69fb      	ldr	r3, [r7, #28]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d001      	beq.n	800a2a2 <xTaskResumeAll+0x192>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 800a29e:	f000 fcaf 	bl	800ac00 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a2a2:	4b21      	ldr	r3, [pc, #132]	@ (800a328 <xTaskResumeAll+0x218>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 800a2a8:	697b      	ldr	r3, [r7, #20]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d012      	beq.n	800a2d4 <xTaskResumeAll+0x1c4>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 800a2ae:	f000 f84f 	bl	800a350 <xTaskIncrementTick>
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d004      	beq.n	800a2c2 <xTaskResumeAll+0x1b2>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 800a2b8:	4a1a      	ldr	r2, [pc, #104]	@ (800a324 <xTaskResumeAll+0x214>)
 800a2ba:	693b      	ldr	r3, [r7, #16]
 800a2bc:	2101      	movs	r1, #1
 800a2be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	3b01      	subs	r3, #1
 800a2c6:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d1ef      	bne.n	800a2ae <xTaskResumeAll+0x19e>

                            xPendedTicks = 0;
 800a2ce:	4b16      	ldr	r3, [pc, #88]	@ (800a328 <xTaskResumeAll+0x218>)
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 800a2d4:	4a13      	ldr	r2, [pc, #76]	@ (800a324 <xTaskResumeAll+0x214>)
 800a2d6:	693b      	ldr	r3, [r7, #16]
 800a2d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d00b      	beq.n	800a2f8 <xTaskResumeAll+0x1e8>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 800a2e4:	4b0e      	ldr	r3, [pc, #56]	@ (800a320 <xTaskResumeAll+0x210>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	4b10      	ldr	r3, [pc, #64]	@ (800a32c <xTaskResumeAll+0x21c>)
 800a2ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a2ee:	601a      	str	r2, [r3, #0]
 800a2f0:	f3bf 8f4f 	dsb	sy
 800a2f4:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800a2f8:	f001 fbc2 	bl	800ba80 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 800a2fc:	69bb      	ldr	r3, [r7, #24]
}
 800a2fe:	4618      	mov	r0, r3
 800a300:	3720      	adds	r7, #32
 800a302:	46bd      	mov	sp, r7
 800a304:	bd80      	pop	{r7, pc}
 800a306:	bf00      	nop
 800a308:	20000478 	.word	0x20000478
 800a30c:	08010ac8 	.word	0x08010ac8
 800a310:	20000450 	.word	0x20000450
 800a314:	20000410 	.word	0x20000410
 800a318:	20000458 	.word	0x20000458
 800a31c:	20000354 	.word	0x20000354
 800a320:	20000350 	.word	0x20000350
 800a324:	20000464 	.word	0x20000464
 800a328:	20000460 	.word	0x20000460
 800a32c:	e000ed04 	.word	0xe000ed04

0800a330 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a330:	b480      	push	{r7}
 800a332:	b083      	sub	sp, #12
 800a334:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800a336:	4b05      	ldr	r3, [pc, #20]	@ (800a34c <xTaskGetTickCount+0x1c>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );

    return xTicks;
 800a33c:	687b      	ldr	r3, [r7, #4]
}
 800a33e:	4618      	mov	r0, r3
 800a340:	370c      	adds	r7, #12
 800a342:	46bd      	mov	sp, r7
 800a344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a348:	4770      	bx	lr
 800a34a:	bf00      	nop
 800a34c:	20000454 	.word	0x20000454

0800a350 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b08a      	sub	sp, #40	@ 0x28
 800a354:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800a356:	2300      	movs	r3, #0
 800a358:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800a35a:	4b81      	ldr	r3, [pc, #516]	@ (800a560 <xTaskIncrementTick+0x210>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	f040 80f4 	bne.w	800a54c <xTaskIncrementTick+0x1fc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a364:	4b7f      	ldr	r3, [pc, #508]	@ (800a564 <xTaskIncrementTick+0x214>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	3301      	adds	r3, #1
 800a36a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800a36c:	4a7d      	ldr	r2, [pc, #500]	@ (800a564 <xTaskIncrementTick+0x214>)
 800a36e:	6a3b      	ldr	r3, [r7, #32]
 800a370:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 800a372:	6a3b      	ldr	r3, [r7, #32]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d126      	bne.n	800a3c6 <xTaskIncrementTick+0x76>
        {
            taskSWITCH_DELAYED_LISTS();
 800a378:	4b7b      	ldr	r3, [pc, #492]	@ (800a568 <xTaskIncrementTick+0x218>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d010      	beq.n	800a3a4 <xTaskIncrementTick+0x54>
    __asm volatile
 800a382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a386:	b672      	cpsid	i
 800a388:	f383 8811 	msr	BASEPRI, r3
 800a38c:	f3bf 8f6f 	isb	sy
 800a390:	f3bf 8f4f 	dsb	sy
 800a394:	b662      	cpsie	i
 800a396:	607b      	str	r3, [r7, #4]
}
 800a398:	bf00      	nop
 800a39a:	f241 215f 	movw	r1, #4703	@ 0x125f
 800a39e:	4873      	ldr	r0, [pc, #460]	@ (800a56c <xTaskIncrementTick+0x21c>)
 800a3a0:	f7f8 f82a 	bl	80023f8 <vAssertCalled>
 800a3a4:	4b70      	ldr	r3, [pc, #448]	@ (800a568 <xTaskIncrementTick+0x218>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	61fb      	str	r3, [r7, #28]
 800a3aa:	4b71      	ldr	r3, [pc, #452]	@ (800a570 <xTaskIncrementTick+0x220>)
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	4a6e      	ldr	r2, [pc, #440]	@ (800a568 <xTaskIncrementTick+0x218>)
 800a3b0:	6013      	str	r3, [r2, #0]
 800a3b2:	4a6f      	ldr	r2, [pc, #444]	@ (800a570 <xTaskIncrementTick+0x220>)
 800a3b4:	69fb      	ldr	r3, [r7, #28]
 800a3b6:	6013      	str	r3, [r2, #0]
 800a3b8:	4b6e      	ldr	r3, [pc, #440]	@ (800a574 <xTaskIncrementTick+0x224>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	3301      	adds	r3, #1
 800a3be:	4a6d      	ldr	r2, [pc, #436]	@ (800a574 <xTaskIncrementTick+0x224>)
 800a3c0:	6013      	str	r3, [r2, #0]
 800a3c2:	f000 fc1d 	bl	800ac00 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800a3c6:	4b6c      	ldr	r3, [pc, #432]	@ (800a578 <xTaskIncrementTick+0x228>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	6a3a      	ldr	r2, [r7, #32]
 800a3cc:	429a      	cmp	r2, r3
 800a3ce:	f0c0 80a8 	bcc.w	800a522 <xTaskIncrementTick+0x1d2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a3d2:	4b65      	ldr	r3, [pc, #404]	@ (800a568 <xTaskIncrementTick+0x218>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d104      	bne.n	800a3e6 <xTaskIncrementTick+0x96>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 800a3dc:	4b66      	ldr	r3, [pc, #408]	@ (800a578 <xTaskIncrementTick+0x228>)
 800a3de:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a3e2:	601a      	str	r2, [r3, #0]
                    break;
 800a3e4:	e09d      	b.n	800a522 <xTaskIncrementTick+0x1d2>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a3e6:	4b60      	ldr	r3, [pc, #384]	@ (800a568 <xTaskIncrementTick+0x218>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	68db      	ldr	r3, [r3, #12]
 800a3ec:	68db      	ldr	r3, [r3, #12]
 800a3ee:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a3f0:	69bb      	ldr	r3, [r7, #24]
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800a3f6:	6a3a      	ldr	r2, [r7, #32]
 800a3f8:	697b      	ldr	r3, [r7, #20]
 800a3fa:	429a      	cmp	r2, r3
 800a3fc:	d203      	bcs.n	800a406 <xTaskIncrementTick+0xb6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800a3fe:	4a5e      	ldr	r2, [pc, #376]	@ (800a578 <xTaskIncrementTick+0x228>)
 800a400:	697b      	ldr	r3, [r7, #20]
 800a402:	6013      	str	r3, [r2, #0]
                        break;
 800a404:	e08d      	b.n	800a522 <xTaskIncrementTick+0x1d2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800a406:	69bb      	ldr	r3, [r7, #24]
 800a408:	695b      	ldr	r3, [r3, #20]
 800a40a:	613b      	str	r3, [r7, #16]
 800a40c:	69bb      	ldr	r3, [r7, #24]
 800a40e:	689b      	ldr	r3, [r3, #8]
 800a410:	69ba      	ldr	r2, [r7, #24]
 800a412:	68d2      	ldr	r2, [r2, #12]
 800a414:	609a      	str	r2, [r3, #8]
 800a416:	69bb      	ldr	r3, [r7, #24]
 800a418:	68db      	ldr	r3, [r3, #12]
 800a41a:	69ba      	ldr	r2, [r7, #24]
 800a41c:	6892      	ldr	r2, [r2, #8]
 800a41e:	605a      	str	r2, [r3, #4]
 800a420:	693b      	ldr	r3, [r7, #16]
 800a422:	685a      	ldr	r2, [r3, #4]
 800a424:	69bb      	ldr	r3, [r7, #24]
 800a426:	3304      	adds	r3, #4
 800a428:	429a      	cmp	r2, r3
 800a42a:	d103      	bne.n	800a434 <xTaskIncrementTick+0xe4>
 800a42c:	69bb      	ldr	r3, [r7, #24]
 800a42e:	68da      	ldr	r2, [r3, #12]
 800a430:	693b      	ldr	r3, [r7, #16]
 800a432:	605a      	str	r2, [r3, #4]
 800a434:	69bb      	ldr	r3, [r7, #24]
 800a436:	2200      	movs	r2, #0
 800a438:	615a      	str	r2, [r3, #20]
 800a43a:	693b      	ldr	r3, [r7, #16]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	1e5a      	subs	r2, r3, #1
 800a440:	693b      	ldr	r3, [r7, #16]
 800a442:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a444:	69bb      	ldr	r3, [r7, #24]
 800a446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d01e      	beq.n	800a48a <xTaskIncrementTick+0x13a>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800a44c:	69bb      	ldr	r3, [r7, #24]
 800a44e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a450:	60fb      	str	r3, [r7, #12]
 800a452:	69bb      	ldr	r3, [r7, #24]
 800a454:	69db      	ldr	r3, [r3, #28]
 800a456:	69ba      	ldr	r2, [r7, #24]
 800a458:	6a12      	ldr	r2, [r2, #32]
 800a45a:	609a      	str	r2, [r3, #8]
 800a45c:	69bb      	ldr	r3, [r7, #24]
 800a45e:	6a1b      	ldr	r3, [r3, #32]
 800a460:	69ba      	ldr	r2, [r7, #24]
 800a462:	69d2      	ldr	r2, [r2, #28]
 800a464:	605a      	str	r2, [r3, #4]
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	685a      	ldr	r2, [r3, #4]
 800a46a:	69bb      	ldr	r3, [r7, #24]
 800a46c:	3318      	adds	r3, #24
 800a46e:	429a      	cmp	r2, r3
 800a470:	d103      	bne.n	800a47a <xTaskIncrementTick+0x12a>
 800a472:	69bb      	ldr	r3, [r7, #24]
 800a474:	6a1a      	ldr	r2, [r3, #32]
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	605a      	str	r2, [r3, #4]
 800a47a:	69bb      	ldr	r3, [r7, #24]
 800a47c:	2200      	movs	r2, #0
 800a47e:	629a      	str	r2, [r3, #40]	@ 0x28
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	1e5a      	subs	r2, r3, #1
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800a48a:	69bb      	ldr	r3, [r7, #24]
 800a48c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a48e:	2201      	movs	r2, #1
 800a490:	409a      	lsls	r2, r3
 800a492:	4b3a      	ldr	r3, [pc, #232]	@ (800a57c <xTaskIncrementTick+0x22c>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	4313      	orrs	r3, r2
 800a498:	4a38      	ldr	r2, [pc, #224]	@ (800a57c <xTaskIncrementTick+0x22c>)
 800a49a:	6013      	str	r3, [r2, #0]
 800a49c:	69bb      	ldr	r3, [r7, #24]
 800a49e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4a0:	4937      	ldr	r1, [pc, #220]	@ (800a580 <xTaskIncrementTick+0x230>)
 800a4a2:	4613      	mov	r3, r2
 800a4a4:	009b      	lsls	r3, r3, #2
 800a4a6:	4413      	add	r3, r2
 800a4a8:	009b      	lsls	r3, r3, #2
 800a4aa:	440b      	add	r3, r1
 800a4ac:	3304      	adds	r3, #4
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	60bb      	str	r3, [r7, #8]
 800a4b2:	69bb      	ldr	r3, [r7, #24]
 800a4b4:	68ba      	ldr	r2, [r7, #8]
 800a4b6:	609a      	str	r2, [r3, #8]
 800a4b8:	68bb      	ldr	r3, [r7, #8]
 800a4ba:	689a      	ldr	r2, [r3, #8]
 800a4bc:	69bb      	ldr	r3, [r7, #24]
 800a4be:	60da      	str	r2, [r3, #12]
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	689b      	ldr	r3, [r3, #8]
 800a4c4:	69ba      	ldr	r2, [r7, #24]
 800a4c6:	3204      	adds	r2, #4
 800a4c8:	605a      	str	r2, [r3, #4]
 800a4ca:	69bb      	ldr	r3, [r7, #24]
 800a4cc:	1d1a      	adds	r2, r3, #4
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	609a      	str	r2, [r3, #8]
 800a4d2:	69bb      	ldr	r3, [r7, #24]
 800a4d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4d6:	4613      	mov	r3, r2
 800a4d8:	009b      	lsls	r3, r3, #2
 800a4da:	4413      	add	r3, r2
 800a4dc:	009b      	lsls	r3, r3, #2
 800a4de:	4a28      	ldr	r2, [pc, #160]	@ (800a580 <xTaskIncrementTick+0x230>)
 800a4e0:	441a      	add	r2, r3
 800a4e2:	69bb      	ldr	r3, [r7, #24]
 800a4e4:	615a      	str	r2, [r3, #20]
 800a4e6:	69bb      	ldr	r3, [r7, #24]
 800a4e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4ea:	4925      	ldr	r1, [pc, #148]	@ (800a580 <xTaskIncrementTick+0x230>)
 800a4ec:	4613      	mov	r3, r2
 800a4ee:	009b      	lsls	r3, r3, #2
 800a4f0:	4413      	add	r3, r2
 800a4f2:	009b      	lsls	r3, r3, #2
 800a4f4:	440b      	add	r3, r1
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	69ba      	ldr	r2, [r7, #24]
 800a4fa:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800a4fc:	1c59      	adds	r1, r3, #1
 800a4fe:	4820      	ldr	r0, [pc, #128]	@ (800a580 <xTaskIncrementTick+0x230>)
 800a500:	4613      	mov	r3, r2
 800a502:	009b      	lsls	r3, r3, #2
 800a504:	4413      	add	r3, r2
 800a506:	009b      	lsls	r3, r3, #2
 800a508:	4403      	add	r3, r0
 800a50a:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a50c:	69bb      	ldr	r3, [r7, #24]
 800a50e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a510:	4b1c      	ldr	r3, [pc, #112]	@ (800a584 <xTaskIncrementTick+0x234>)
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a516:	429a      	cmp	r2, r3
 800a518:	f67f af5b 	bls.w	800a3d2 <xTaskIncrementTick+0x82>
                            {
                                xSwitchRequired = pdTRUE;
 800a51c:	2301      	movs	r3, #1
 800a51e:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a520:	e757      	b.n	800a3d2 <xTaskIncrementTick+0x82>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 800a522:	4b18      	ldr	r3, [pc, #96]	@ (800a584 <xTaskIncrementTick+0x234>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a528:	4915      	ldr	r1, [pc, #84]	@ (800a580 <xTaskIncrementTick+0x230>)
 800a52a:	4613      	mov	r3, r2
 800a52c:	009b      	lsls	r3, r3, #2
 800a52e:	4413      	add	r3, r2
 800a530:	009b      	lsls	r3, r3, #2
 800a532:	440b      	add	r3, r1
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	2b01      	cmp	r3, #1
 800a538:	d901      	bls.n	800a53e <xTaskIncrementTick+0x1ee>
                {
                    xSwitchRequired = pdTRUE;
 800a53a:	2301      	movs	r3, #1
 800a53c:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 800a53e:	4b12      	ldr	r3, [pc, #72]	@ (800a588 <xTaskIncrementTick+0x238>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d007      	beq.n	800a556 <xTaskIncrementTick+0x206>
                {
                    xSwitchRequired = pdTRUE;
 800a546:	2301      	movs	r3, #1
 800a548:	627b      	str	r3, [r7, #36]	@ 0x24
 800a54a:	e004      	b.n	800a556 <xTaskIncrementTick+0x206>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 800a54c:	4b0f      	ldr	r3, [pc, #60]	@ (800a58c <xTaskIncrementTick+0x23c>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	3301      	adds	r3, #1
 800a552:	4a0e      	ldr	r2, [pc, #56]	@ (800a58c <xTaskIncrementTick+0x23c>)
 800a554:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 800a556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a558:	4618      	mov	r0, r3
 800a55a:	3728      	adds	r7, #40	@ 0x28
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}
 800a560:	20000478 	.word	0x20000478
 800a564:	20000454 	.word	0x20000454
 800a568:	20000408 	.word	0x20000408
 800a56c:	08010ac8 	.word	0x08010ac8
 800a570:	2000040c 	.word	0x2000040c
 800a574:	20000468 	.word	0x20000468
 800a578:	20000470 	.word	0x20000470
 800a57c:	20000458 	.word	0x20000458
 800a580:	20000354 	.word	0x20000354
 800a584:	20000350 	.word	0x20000350
 800a588:	20000464 	.word	0x20000464
 800a58c:	20000460 	.word	0x20000460

0800a590 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 800a590:	b580      	push	{r7, lr}
 800a592:	b088      	sub	sp, #32
 800a594:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 800a596:	4b4c      	ldr	r3, [pc, #304]	@ (800a6c8 <vTaskSwitchContext+0x138>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d003      	beq.n	800a5a6 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 800a59e:	4b4b      	ldr	r3, [pc, #300]	@ (800a6cc <vTaskSwitchContext+0x13c>)
 800a5a0:	2201      	movs	r2, #1
 800a5a2:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 800a5a4:	e08c      	b.n	800a6c0 <vTaskSwitchContext+0x130>
            xYieldPendings[ 0 ] = pdFALSE;
 800a5a6:	4b49      	ldr	r3, [pc, #292]	@ (800a6cc <vTaskSwitchContext+0x13c>)
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	601a      	str	r2, [r3, #0]
                    ulTotalRunTime[ 0 ] = portGET_RUN_TIME_COUNTER_VALUE();
 800a5ac:	f7ff fec0 	bl	800a330 <xTaskGetTickCount>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	4a47      	ldr	r2, [pc, #284]	@ (800a6d0 <vTaskSwitchContext+0x140>)
 800a5b4:	6013      	str	r3, [r2, #0]
                if( ulTotalRunTime[ 0 ] > ulTaskSwitchedInTime[ 0 ] )
 800a5b6:	4b46      	ldr	r3, [pc, #280]	@ (800a6d0 <vTaskSwitchContext+0x140>)
 800a5b8:	681a      	ldr	r2, [r3, #0]
 800a5ba:	4b46      	ldr	r3, [pc, #280]	@ (800a6d4 <vTaskSwitchContext+0x144>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	429a      	cmp	r2, r3
 800a5c0:	d909      	bls.n	800a5d6 <vTaskSwitchContext+0x46>
                    pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime[ 0 ] - ulTaskSwitchedInTime[ 0 ] );
 800a5c2:	4b43      	ldr	r3, [pc, #268]	@ (800a6d0 <vTaskSwitchContext+0x140>)
 800a5c4:	681a      	ldr	r2, [r3, #0]
 800a5c6:	4b43      	ldr	r3, [pc, #268]	@ (800a6d4 <vTaskSwitchContext+0x144>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	1ad1      	subs	r1, r2, r3
 800a5cc:	4b42      	ldr	r3, [pc, #264]	@ (800a6d8 <vTaskSwitchContext+0x148>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a5d2:	440a      	add	r2, r1
 800a5d4:	659a      	str	r2, [r3, #88]	@ 0x58
                ulTaskSwitchedInTime[ 0 ] = ulTotalRunTime[ 0 ];
 800a5d6:	4b3e      	ldr	r3, [pc, #248]	@ (800a6d0 <vTaskSwitchContext+0x140>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	4a3e      	ldr	r2, [pc, #248]	@ (800a6d4 <vTaskSwitchContext+0x144>)
 800a5dc:	6013      	str	r3, [r2, #0]
            taskCHECK_FOR_STACK_OVERFLOW();
 800a5de:	4b3e      	ldr	r3, [pc, #248]	@ (800a6d8 <vTaskSwitchContext+0x148>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5e4:	61fb      	str	r3, [r7, #28]
 800a5e6:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 800a5ea:	61bb      	str	r3, [r7, #24]
 800a5ec:	69fb      	ldr	r3, [r7, #28]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	69ba      	ldr	r2, [r7, #24]
 800a5f2:	429a      	cmp	r2, r3
 800a5f4:	d111      	bne.n	800a61a <vTaskSwitchContext+0x8a>
 800a5f6:	69fb      	ldr	r3, [r7, #28]
 800a5f8:	3304      	adds	r3, #4
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	69ba      	ldr	r2, [r7, #24]
 800a5fe:	429a      	cmp	r2, r3
 800a600:	d10b      	bne.n	800a61a <vTaskSwitchContext+0x8a>
 800a602:	69fb      	ldr	r3, [r7, #28]
 800a604:	3308      	adds	r3, #8
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	69ba      	ldr	r2, [r7, #24]
 800a60a:	429a      	cmp	r2, r3
 800a60c:	d105      	bne.n	800a61a <vTaskSwitchContext+0x8a>
 800a60e:	69fb      	ldr	r3, [r7, #28]
 800a610:	330c      	adds	r3, #12
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	69ba      	ldr	r2, [r7, #24]
 800a616:	429a      	cmp	r2, r3
 800a618:	d009      	beq.n	800a62e <vTaskSwitchContext+0x9e>
 800a61a:	4b2f      	ldr	r3, [pc, #188]	@ (800a6d8 <vTaskSwitchContext+0x148>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	3334      	adds	r3, #52	@ 0x34
 800a620:	617b      	str	r3, [r7, #20]
 800a622:	4b2d      	ldr	r3, [pc, #180]	@ (800a6d8 <vTaskSwitchContext+0x148>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	6979      	ldr	r1, [r7, #20]
 800a628:	4618      	mov	r0, r3
 800a62a:	f7f7 fa75 	bl	8001b18 <vApplicationStackOverflowHook>
            taskSELECT_HIGHEST_PRIORITY_TASK();
 800a62e:	4b2b      	ldr	r3, [pc, #172]	@ (800a6dc <vTaskSwitchContext+0x14c>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	60bb      	str	r3, [r7, #8]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	fab3 f383 	clz	r3, r3
 800a63a:	71fb      	strb	r3, [r7, #7]
        return ucReturn;
 800a63c:	79fb      	ldrb	r3, [r7, #7]
 800a63e:	f1c3 031f 	rsb	r3, r3, #31
 800a642:	613b      	str	r3, [r7, #16]
 800a644:	4926      	ldr	r1, [pc, #152]	@ (800a6e0 <vTaskSwitchContext+0x150>)
 800a646:	693a      	ldr	r2, [r7, #16]
 800a648:	4613      	mov	r3, r2
 800a64a:	009b      	lsls	r3, r3, #2
 800a64c:	4413      	add	r3, r2
 800a64e:	009b      	lsls	r3, r3, #2
 800a650:	440b      	add	r3, r1
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d110      	bne.n	800a67a <vTaskSwitchContext+0xea>
    __asm volatile
 800a658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a65c:	b672      	cpsid	i
 800a65e:	f383 8811 	msr	BASEPRI, r3
 800a662:	f3bf 8f6f 	isb	sy
 800a666:	f3bf 8f4f 	dsb	sy
 800a66a:	b662      	cpsie	i
 800a66c:	603b      	str	r3, [r7, #0]
}
 800a66e:	bf00      	nop
 800a670:	f241 31fa 	movw	r1, #5114	@ 0x13fa
 800a674:	481b      	ldr	r0, [pc, #108]	@ (800a6e4 <vTaskSwitchContext+0x154>)
 800a676:	f7f7 febf 	bl	80023f8 <vAssertCalled>
 800a67a:	693a      	ldr	r2, [r7, #16]
 800a67c:	4613      	mov	r3, r2
 800a67e:	009b      	lsls	r3, r3, #2
 800a680:	4413      	add	r3, r2
 800a682:	009b      	lsls	r3, r3, #2
 800a684:	4a16      	ldr	r2, [pc, #88]	@ (800a6e0 <vTaskSwitchContext+0x150>)
 800a686:	4413      	add	r3, r2
 800a688:	60fb      	str	r3, [r7, #12]
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	685b      	ldr	r3, [r3, #4]
 800a68e:	685a      	ldr	r2, [r3, #4]
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	605a      	str	r2, [r3, #4]
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	685a      	ldr	r2, [r3, #4]
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	3308      	adds	r3, #8
 800a69c:	429a      	cmp	r2, r3
 800a69e:	d103      	bne.n	800a6a8 <vTaskSwitchContext+0x118>
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	68da      	ldr	r2, [r3, #12]
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	605a      	str	r2, [r3, #4]
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	685b      	ldr	r3, [r3, #4]
 800a6ac:	68db      	ldr	r3, [r3, #12]
 800a6ae:	4a0a      	ldr	r2, [pc, #40]	@ (800a6d8 <vTaskSwitchContext+0x148>)
 800a6b0:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 800a6b2:	4b09      	ldr	r3, [pc, #36]	@ (800a6d8 <vTaskSwitchContext+0x148>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
                configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 800a6b6:	4b08      	ldr	r3, [pc, #32]	@ (800a6d8 <vTaskSwitchContext+0x148>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	335c      	adds	r3, #92	@ 0x5c
 800a6bc:	4a0a      	ldr	r2, [pc, #40]	@ (800a6e8 <vTaskSwitchContext+0x158>)
 800a6be:	6013      	str	r3, [r2, #0]
    }
 800a6c0:	bf00      	nop
 800a6c2:	3720      	adds	r7, #32
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bd80      	pop	{r7, pc}
 800a6c8:	20000478 	.word	0x20000478
 800a6cc:	20000464 	.word	0x20000464
 800a6d0:	20000480 	.word	0x20000480
 800a6d4:	2000047c 	.word	0x2000047c
 800a6d8:	20000350 	.word	0x20000350
 800a6dc:	20000458 	.word	0x20000458
 800a6e0:	20000354 	.word	0x20000354
 800a6e4:	08010ac8 	.word	0x08010ac8
 800a6e8:	2000018c 	.word	0x2000018c

0800a6ec <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b084      	sub	sp, #16
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
 800a6f4:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d110      	bne.n	800a71e <vTaskPlaceOnEventList+0x32>
    __asm volatile
 800a6fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a700:	b672      	cpsid	i
 800a702:	f383 8811 	msr	BASEPRI, r3
 800a706:	f3bf 8f6f 	isb	sy
 800a70a:	f3bf 8f4f 	dsb	sy
 800a70e:	b662      	cpsie	i
 800a710:	60fb      	str	r3, [r7, #12]
}
 800a712:	bf00      	nop
 800a714:	f44f 51a4 	mov.w	r1, #5248	@ 0x1480
 800a718:	4808      	ldr	r0, [pc, #32]	@ (800a73c <vTaskPlaceOnEventList+0x50>)
 800a71a:	f7f7 fe6d 	bl	80023f8 <vAssertCalled>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a71e:	4b08      	ldr	r3, [pc, #32]	@ (800a740 <vTaskPlaceOnEventList+0x54>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	3318      	adds	r3, #24
 800a724:	4619      	mov	r1, r3
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	f7fe fb0d 	bl	8008d46 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a72c:	2101      	movs	r1, #1
 800a72e:	6838      	ldr	r0, [r7, #0]
 800a730:	f000 fce6 	bl	800b100 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 800a734:	bf00      	nop
 800a736:	3710      	adds	r7, #16
 800a738:	46bd      	mov	sp, r7
 800a73a:	bd80      	pop	{r7, pc}
 800a73c:	08010ac8 	.word	0x08010ac8
 800a740:	20000350 	.word	0x20000350

0800a744 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800a744:	b580      	push	{r7, lr}
 800a746:	b086      	sub	sp, #24
 800a748:	af00      	add	r7, sp, #0
 800a74a:	60f8      	str	r0, [r7, #12]
 800a74c:	60b9      	str	r1, [r7, #8]
 800a74e:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d110      	bne.n	800a778 <vTaskPlaceOnEventListRestricted+0x34>
    __asm volatile
 800a756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a75a:	b672      	cpsid	i
 800a75c:	f383 8811 	msr	BASEPRI, r3
 800a760:	f3bf 8f6f 	isb	sy
 800a764:	f3bf 8f4f 	dsb	sy
 800a768:	b662      	cpsie	i
 800a76a:	613b      	str	r3, [r7, #16]
}
 800a76c:	bf00      	nop
 800a76e:	f241 41be 	movw	r1, #5310	@ 0x14be
 800a772:	4819      	ldr	r0, [pc, #100]	@ (800a7d8 <vTaskPlaceOnEventListRestricted+0x94>)
 800a774:	f7f7 fe40 	bl	80023f8 <vAssertCalled>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	685b      	ldr	r3, [r3, #4]
 800a77c:	617b      	str	r3, [r7, #20]
 800a77e:	4b17      	ldr	r3, [pc, #92]	@ (800a7dc <vTaskPlaceOnEventListRestricted+0x98>)
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	697a      	ldr	r2, [r7, #20]
 800a784:	61da      	str	r2, [r3, #28]
 800a786:	4b15      	ldr	r3, [pc, #84]	@ (800a7dc <vTaskPlaceOnEventListRestricted+0x98>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	697a      	ldr	r2, [r7, #20]
 800a78c:	6892      	ldr	r2, [r2, #8]
 800a78e:	621a      	str	r2, [r3, #32]
 800a790:	4b12      	ldr	r3, [pc, #72]	@ (800a7dc <vTaskPlaceOnEventListRestricted+0x98>)
 800a792:	681a      	ldr	r2, [r3, #0]
 800a794:	697b      	ldr	r3, [r7, #20]
 800a796:	689b      	ldr	r3, [r3, #8]
 800a798:	3218      	adds	r2, #24
 800a79a:	605a      	str	r2, [r3, #4]
 800a79c:	4b0f      	ldr	r3, [pc, #60]	@ (800a7dc <vTaskPlaceOnEventListRestricted+0x98>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f103 0218 	add.w	r2, r3, #24
 800a7a4:	697b      	ldr	r3, [r7, #20]
 800a7a6:	609a      	str	r2, [r3, #8]
 800a7a8:	4b0c      	ldr	r3, [pc, #48]	@ (800a7dc <vTaskPlaceOnEventListRestricted+0x98>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	68fa      	ldr	r2, [r7, #12]
 800a7ae:	629a      	str	r2, [r3, #40]	@ 0x28
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	1c5a      	adds	r2, r3, #1
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d002      	beq.n	800a7c6 <vTaskPlaceOnEventListRestricted+0x82>
        {
            xTicksToWait = portMAX_DELAY;
 800a7c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a7c4:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a7c6:	6879      	ldr	r1, [r7, #4]
 800a7c8:	68b8      	ldr	r0, [r7, #8]
 800a7ca:	f000 fc99 	bl	800b100 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
    }
 800a7ce:	bf00      	nop
 800a7d0:	3718      	adds	r7, #24
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}
 800a7d6:	bf00      	nop
 800a7d8:	08010ac8 	.word	0x08010ac8
 800a7dc:	20000350 	.word	0x20000350

0800a7e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b08a      	sub	sp, #40	@ 0x28
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	68db      	ldr	r3, [r3, #12]
 800a7ec:	68db      	ldr	r3, [r3, #12]
 800a7ee:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 800a7f0:	6a3b      	ldr	r3, [r7, #32]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d110      	bne.n	800a818 <xTaskRemoveFromEventList+0x38>
    __asm volatile
 800a7f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7fa:	b672      	cpsid	i
 800a7fc:	f383 8811 	msr	BASEPRI, r3
 800a800:	f3bf 8f6f 	isb	sy
 800a804:	f3bf 8f4f 	dsb	sy
 800a808:	b662      	cpsie	i
 800a80a:	60fb      	str	r3, [r7, #12]
}
 800a80c:	bf00      	nop
 800a80e:	f241 41f5 	movw	r1, #5365	@ 0x14f5
 800a812:	485b      	ldr	r0, [pc, #364]	@ (800a980 <xTaskRemoveFromEventList+0x1a0>)
 800a814:	f7f7 fdf0 	bl	80023f8 <vAssertCalled>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800a818:	6a3b      	ldr	r3, [r7, #32]
 800a81a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a81c:	61fb      	str	r3, [r7, #28]
 800a81e:	6a3b      	ldr	r3, [r7, #32]
 800a820:	69db      	ldr	r3, [r3, #28]
 800a822:	6a3a      	ldr	r2, [r7, #32]
 800a824:	6a12      	ldr	r2, [r2, #32]
 800a826:	609a      	str	r2, [r3, #8]
 800a828:	6a3b      	ldr	r3, [r7, #32]
 800a82a:	6a1b      	ldr	r3, [r3, #32]
 800a82c:	6a3a      	ldr	r2, [r7, #32]
 800a82e:	69d2      	ldr	r2, [r2, #28]
 800a830:	605a      	str	r2, [r3, #4]
 800a832:	69fb      	ldr	r3, [r7, #28]
 800a834:	685a      	ldr	r2, [r3, #4]
 800a836:	6a3b      	ldr	r3, [r7, #32]
 800a838:	3318      	adds	r3, #24
 800a83a:	429a      	cmp	r2, r3
 800a83c:	d103      	bne.n	800a846 <xTaskRemoveFromEventList+0x66>
 800a83e:	6a3b      	ldr	r3, [r7, #32]
 800a840:	6a1a      	ldr	r2, [r3, #32]
 800a842:	69fb      	ldr	r3, [r7, #28]
 800a844:	605a      	str	r2, [r3, #4]
 800a846:	6a3b      	ldr	r3, [r7, #32]
 800a848:	2200      	movs	r2, #0
 800a84a:	629a      	str	r2, [r3, #40]	@ 0x28
 800a84c:	69fb      	ldr	r3, [r7, #28]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	1e5a      	subs	r2, r3, #1
 800a852:	69fb      	ldr	r3, [r7, #28]
 800a854:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800a856:	4b4b      	ldr	r3, [pc, #300]	@ (800a984 <xTaskRemoveFromEventList+0x1a4>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d160      	bne.n	800a920 <xTaskRemoveFromEventList+0x140>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800a85e:	6a3b      	ldr	r3, [r7, #32]
 800a860:	695b      	ldr	r3, [r3, #20]
 800a862:	617b      	str	r3, [r7, #20]
 800a864:	6a3b      	ldr	r3, [r7, #32]
 800a866:	689b      	ldr	r3, [r3, #8]
 800a868:	6a3a      	ldr	r2, [r7, #32]
 800a86a:	68d2      	ldr	r2, [r2, #12]
 800a86c:	609a      	str	r2, [r3, #8]
 800a86e:	6a3b      	ldr	r3, [r7, #32]
 800a870:	68db      	ldr	r3, [r3, #12]
 800a872:	6a3a      	ldr	r2, [r7, #32]
 800a874:	6892      	ldr	r2, [r2, #8]
 800a876:	605a      	str	r2, [r3, #4]
 800a878:	697b      	ldr	r3, [r7, #20]
 800a87a:	685a      	ldr	r2, [r3, #4]
 800a87c:	6a3b      	ldr	r3, [r7, #32]
 800a87e:	3304      	adds	r3, #4
 800a880:	429a      	cmp	r2, r3
 800a882:	d103      	bne.n	800a88c <xTaskRemoveFromEventList+0xac>
 800a884:	6a3b      	ldr	r3, [r7, #32]
 800a886:	68da      	ldr	r2, [r3, #12]
 800a888:	697b      	ldr	r3, [r7, #20]
 800a88a:	605a      	str	r2, [r3, #4]
 800a88c:	6a3b      	ldr	r3, [r7, #32]
 800a88e:	2200      	movs	r2, #0
 800a890:	615a      	str	r2, [r3, #20]
 800a892:	697b      	ldr	r3, [r7, #20]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	1e5a      	subs	r2, r3, #1
 800a898:	697b      	ldr	r3, [r7, #20]
 800a89a:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800a89c:	6a3b      	ldr	r3, [r7, #32]
 800a89e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8a0:	2201      	movs	r2, #1
 800a8a2:	409a      	lsls	r2, r3
 800a8a4:	4b38      	ldr	r3, [pc, #224]	@ (800a988 <xTaskRemoveFromEventList+0x1a8>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	4313      	orrs	r3, r2
 800a8aa:	4a37      	ldr	r2, [pc, #220]	@ (800a988 <xTaskRemoveFromEventList+0x1a8>)
 800a8ac:	6013      	str	r3, [r2, #0]
 800a8ae:	6a3b      	ldr	r3, [r7, #32]
 800a8b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8b2:	4936      	ldr	r1, [pc, #216]	@ (800a98c <xTaskRemoveFromEventList+0x1ac>)
 800a8b4:	4613      	mov	r3, r2
 800a8b6:	009b      	lsls	r3, r3, #2
 800a8b8:	4413      	add	r3, r2
 800a8ba:	009b      	lsls	r3, r3, #2
 800a8bc:	440b      	add	r3, r1
 800a8be:	3304      	adds	r3, #4
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	613b      	str	r3, [r7, #16]
 800a8c4:	6a3b      	ldr	r3, [r7, #32]
 800a8c6:	693a      	ldr	r2, [r7, #16]
 800a8c8:	609a      	str	r2, [r3, #8]
 800a8ca:	693b      	ldr	r3, [r7, #16]
 800a8cc:	689a      	ldr	r2, [r3, #8]
 800a8ce:	6a3b      	ldr	r3, [r7, #32]
 800a8d0:	60da      	str	r2, [r3, #12]
 800a8d2:	693b      	ldr	r3, [r7, #16]
 800a8d4:	689b      	ldr	r3, [r3, #8]
 800a8d6:	6a3a      	ldr	r2, [r7, #32]
 800a8d8:	3204      	adds	r2, #4
 800a8da:	605a      	str	r2, [r3, #4]
 800a8dc:	6a3b      	ldr	r3, [r7, #32]
 800a8de:	1d1a      	adds	r2, r3, #4
 800a8e0:	693b      	ldr	r3, [r7, #16]
 800a8e2:	609a      	str	r2, [r3, #8]
 800a8e4:	6a3b      	ldr	r3, [r7, #32]
 800a8e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8e8:	4613      	mov	r3, r2
 800a8ea:	009b      	lsls	r3, r3, #2
 800a8ec:	4413      	add	r3, r2
 800a8ee:	009b      	lsls	r3, r3, #2
 800a8f0:	4a26      	ldr	r2, [pc, #152]	@ (800a98c <xTaskRemoveFromEventList+0x1ac>)
 800a8f2:	441a      	add	r2, r3
 800a8f4:	6a3b      	ldr	r3, [r7, #32]
 800a8f6:	615a      	str	r2, [r3, #20]
 800a8f8:	6a3b      	ldr	r3, [r7, #32]
 800a8fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8fc:	4923      	ldr	r1, [pc, #140]	@ (800a98c <xTaskRemoveFromEventList+0x1ac>)
 800a8fe:	4613      	mov	r3, r2
 800a900:	009b      	lsls	r3, r3, #2
 800a902:	4413      	add	r3, r2
 800a904:	009b      	lsls	r3, r3, #2
 800a906:	440b      	add	r3, r1
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	6a3a      	ldr	r2, [r7, #32]
 800a90c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800a90e:	1c59      	adds	r1, r3, #1
 800a910:	481e      	ldr	r0, [pc, #120]	@ (800a98c <xTaskRemoveFromEventList+0x1ac>)
 800a912:	4613      	mov	r3, r2
 800a914:	009b      	lsls	r3, r3, #2
 800a916:	4413      	add	r3, r2
 800a918:	009b      	lsls	r3, r3, #2
 800a91a:	4403      	add	r3, r0
 800a91c:	6019      	str	r1, [r3, #0]
 800a91e:	e01b      	b.n	800a958 <xTaskRemoveFromEventList+0x178>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a920:	4b1b      	ldr	r3, [pc, #108]	@ (800a990 <xTaskRemoveFromEventList+0x1b0>)
 800a922:	685b      	ldr	r3, [r3, #4]
 800a924:	61bb      	str	r3, [r7, #24]
 800a926:	6a3b      	ldr	r3, [r7, #32]
 800a928:	69ba      	ldr	r2, [r7, #24]
 800a92a:	61da      	str	r2, [r3, #28]
 800a92c:	69bb      	ldr	r3, [r7, #24]
 800a92e:	689a      	ldr	r2, [r3, #8]
 800a930:	6a3b      	ldr	r3, [r7, #32]
 800a932:	621a      	str	r2, [r3, #32]
 800a934:	69bb      	ldr	r3, [r7, #24]
 800a936:	689b      	ldr	r3, [r3, #8]
 800a938:	6a3a      	ldr	r2, [r7, #32]
 800a93a:	3218      	adds	r2, #24
 800a93c:	605a      	str	r2, [r3, #4]
 800a93e:	6a3b      	ldr	r3, [r7, #32]
 800a940:	f103 0218 	add.w	r2, r3, #24
 800a944:	69bb      	ldr	r3, [r7, #24]
 800a946:	609a      	str	r2, [r3, #8]
 800a948:	6a3b      	ldr	r3, [r7, #32]
 800a94a:	4a11      	ldr	r2, [pc, #68]	@ (800a990 <xTaskRemoveFromEventList+0x1b0>)
 800a94c:	629a      	str	r2, [r3, #40]	@ 0x28
 800a94e:	4b10      	ldr	r3, [pc, #64]	@ (800a990 <xTaskRemoveFromEventList+0x1b0>)
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	3301      	adds	r3, #1
 800a954:	4a0e      	ldr	r2, [pc, #56]	@ (800a990 <xTaskRemoveFromEventList+0x1b0>)
 800a956:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a958:	6a3b      	ldr	r3, [r7, #32]
 800a95a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a95c:	4b0d      	ldr	r3, [pc, #52]	@ (800a994 <xTaskRemoveFromEventList+0x1b4>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a962:	429a      	cmp	r2, r3
 800a964:	d905      	bls.n	800a972 <xTaskRemoveFromEventList+0x192>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 800a966:	2301      	movs	r3, #1
 800a968:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 800a96a:	4b0b      	ldr	r3, [pc, #44]	@ (800a998 <xTaskRemoveFromEventList+0x1b8>)
 800a96c:	2201      	movs	r2, #1
 800a96e:	601a      	str	r2, [r3, #0]
 800a970:	e001      	b.n	800a976 <xTaskRemoveFromEventList+0x196>
        }
        else
        {
            xReturn = pdFALSE;
 800a972:	2300      	movs	r3, #0
 800a974:	627b      	str	r3, [r7, #36]	@ 0x24
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 800a976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a978:	4618      	mov	r0, r3
 800a97a:	3728      	adds	r7, #40	@ 0x28
 800a97c:	46bd      	mov	sp, r7
 800a97e:	bd80      	pop	{r7, pc}
 800a980:	08010ac8 	.word	0x08010ac8
 800a984:	20000478 	.word	0x20000478
 800a988:	20000458 	.word	0x20000458
 800a98c:	20000354 	.word	0x20000354
 800a990:	20000410 	.word	0x20000410
 800a994:	20000350 	.word	0x20000350
 800a998:	20000464 	.word	0x20000464

0800a99c <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a99c:	b480      	push	{r7}
 800a99e:	b083      	sub	sp, #12
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a9a4:	4b06      	ldr	r3, [pc, #24]	@ (800a9c0 <vTaskInternalSetTimeOutState+0x24>)
 800a9a6:	681a      	ldr	r2, [r3, #0]
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800a9ac:	4b05      	ldr	r3, [pc, #20]	@ (800a9c4 <vTaskInternalSetTimeOutState+0x28>)
 800a9ae:	681a      	ldr	r2, [r3, #0]
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 800a9b4:	bf00      	nop
 800a9b6:	370c      	adds	r7, #12
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9be:	4770      	bx	lr
 800a9c0:	20000468 	.word	0x20000468
 800a9c4:	20000454 	.word	0x20000454

0800a9c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b088      	sub	sp, #32
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
 800a9d0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d110      	bne.n	800a9fa <xTaskCheckForTimeOut+0x32>
    __asm volatile
 800a9d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9dc:	b672      	cpsid	i
 800a9de:	f383 8811 	msr	BASEPRI, r3
 800a9e2:	f3bf 8f6f 	isb	sy
 800a9e6:	f3bf 8f4f 	dsb	sy
 800a9ea:	b662      	cpsie	i
 800a9ec:	613b      	str	r3, [r7, #16]
}
 800a9ee:	bf00      	nop
 800a9f0:	f241 51a5 	movw	r1, #5541	@ 0x15a5
 800a9f4:	482b      	ldr	r0, [pc, #172]	@ (800aaa4 <xTaskCheckForTimeOut+0xdc>)
 800a9f6:	f7f7 fcff 	bl	80023f8 <vAssertCalled>
    configASSERT( pxTicksToWait );
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d110      	bne.n	800aa22 <xTaskCheckForTimeOut+0x5a>
    __asm volatile
 800aa00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa04:	b672      	cpsid	i
 800aa06:	f383 8811 	msr	BASEPRI, r3
 800aa0a:	f3bf 8f6f 	isb	sy
 800aa0e:	f3bf 8f4f 	dsb	sy
 800aa12:	b662      	cpsie	i
 800aa14:	60fb      	str	r3, [r7, #12]
}
 800aa16:	bf00      	nop
 800aa18:	f241 51a6 	movw	r1, #5542	@ 0x15a6
 800aa1c:	4821      	ldr	r0, [pc, #132]	@ (800aaa4 <xTaskCheckForTimeOut+0xdc>)
 800aa1e:	f7f7 fceb 	bl	80023f8 <vAssertCalled>

    taskENTER_CRITICAL();
 800aa22:	f000 fff5 	bl	800ba10 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800aa26:	4b20      	ldr	r3, [pc, #128]	@ (800aaa8 <xTaskCheckForTimeOut+0xe0>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	685b      	ldr	r3, [r3, #4]
 800aa30:	69ba      	ldr	r2, [r7, #24]
 800aa32:	1ad3      	subs	r3, r2, r3
 800aa34:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aa3e:	d102      	bne.n	800aa46 <xTaskCheckForTimeOut+0x7e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800aa40:	2300      	movs	r3, #0
 800aa42:	61fb      	str	r3, [r7, #28]
 800aa44:	e026      	b.n	800aa94 <xTaskCheckForTimeOut+0xcc>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681a      	ldr	r2, [r3, #0]
 800aa4a:	4b18      	ldr	r3, [pc, #96]	@ (800aaac <xTaskCheckForTimeOut+0xe4>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	429a      	cmp	r2, r3
 800aa50:	d00a      	beq.n	800aa68 <xTaskCheckForTimeOut+0xa0>
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	685b      	ldr	r3, [r3, #4]
 800aa56:	69ba      	ldr	r2, [r7, #24]
 800aa58:	429a      	cmp	r2, r3
 800aa5a:	d305      	bcc.n	800aa68 <xTaskCheckForTimeOut+0xa0>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	2200      	movs	r2, #0
 800aa64:	601a      	str	r2, [r3, #0]
 800aa66:	e015      	b.n	800aa94 <xTaskCheckForTimeOut+0xcc>
        }
        else if( xElapsedTime < *pxTicksToWait )
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	697a      	ldr	r2, [r7, #20]
 800aa6e:	429a      	cmp	r2, r3
 800aa70:	d20b      	bcs.n	800aa8a <xTaskCheckForTimeOut+0xc2>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	681a      	ldr	r2, [r3, #0]
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	1ad2      	subs	r2, r2, r3
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800aa7e:	6878      	ldr	r0, [r7, #4]
 800aa80:	f7ff ff8c 	bl	800a99c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800aa84:	2300      	movs	r3, #0
 800aa86:	61fb      	str	r3, [r7, #28]
 800aa88:	e004      	b.n	800aa94 <xTaskCheckForTimeOut+0xcc>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800aa90:	2301      	movs	r3, #1
 800aa92:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800aa94:	f000 fff4 	bl	800ba80 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 800aa98:	69fb      	ldr	r3, [r7, #28]
}
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	3720      	adds	r7, #32
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}
 800aaa2:	bf00      	nop
 800aaa4:	08010ac8 	.word	0x08010ac8
 800aaa8:	20000454 	.word	0x20000454
 800aaac:	20000468 	.word	0x20000468

0800aab0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800aab0:	b480      	push	{r7}
 800aab2:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 800aab4:	4b03      	ldr	r3, [pc, #12]	@ (800aac4 <vTaskMissedYield+0x14>)
 800aab6:	2201      	movs	r2, #1
 800aab8:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 800aaba:	bf00      	nop
 800aabc:	46bd      	mov	sp, r7
 800aabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac2:	4770      	bx	lr
 800aac4:	20000464 	.word	0x20000464

0800aac8 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b082      	sub	sp, #8
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800aad0:	f000 f852 	bl	800ab78 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 800aad4:	4b06      	ldr	r3, [pc, #24]	@ (800aaf0 <prvIdleTask+0x28>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	2b01      	cmp	r3, #1
 800aada:	d9f9      	bls.n	800aad0 <prvIdleTask+0x8>
            {
                taskYIELD();
 800aadc:	4b05      	ldr	r3, [pc, #20]	@ (800aaf4 <prvIdleTask+0x2c>)
 800aade:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aae2:	601a      	str	r2, [r3, #0]
 800aae4:	f3bf 8f4f 	dsb	sy
 800aae8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800aaec:	e7f0      	b.n	800aad0 <prvIdleTask+0x8>
 800aaee:	bf00      	nop
 800aaf0:	20000354 	.word	0x20000354
 800aaf4:	e000ed04 	.word	0xe000ed04

0800aaf8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b082      	sub	sp, #8
 800aafc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aafe:	2300      	movs	r3, #0
 800ab00:	607b      	str	r3, [r7, #4]
 800ab02:	e00c      	b.n	800ab1e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ab04:	687a      	ldr	r2, [r7, #4]
 800ab06:	4613      	mov	r3, r2
 800ab08:	009b      	lsls	r3, r3, #2
 800ab0a:	4413      	add	r3, r2
 800ab0c:	009b      	lsls	r3, r3, #2
 800ab0e:	4a12      	ldr	r2, [pc, #72]	@ (800ab58 <prvInitialiseTaskLists+0x60>)
 800ab10:	4413      	add	r3, r2
 800ab12:	4618      	mov	r0, r3
 800ab14:	f7fe f8c6 	bl	8008ca4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	3301      	adds	r3, #1
 800ab1c:	607b      	str	r3, [r7, #4]
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2b06      	cmp	r3, #6
 800ab22:	d9ef      	bls.n	800ab04 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800ab24:	480d      	ldr	r0, [pc, #52]	@ (800ab5c <prvInitialiseTaskLists+0x64>)
 800ab26:	f7fe f8bd 	bl	8008ca4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800ab2a:	480d      	ldr	r0, [pc, #52]	@ (800ab60 <prvInitialiseTaskLists+0x68>)
 800ab2c:	f7fe f8ba 	bl	8008ca4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800ab30:	480c      	ldr	r0, [pc, #48]	@ (800ab64 <prvInitialiseTaskLists+0x6c>)
 800ab32:	f7fe f8b7 	bl	8008ca4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800ab36:	480c      	ldr	r0, [pc, #48]	@ (800ab68 <prvInitialiseTaskLists+0x70>)
 800ab38:	f7fe f8b4 	bl	8008ca4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800ab3c:	480b      	ldr	r0, [pc, #44]	@ (800ab6c <prvInitialiseTaskLists+0x74>)
 800ab3e:	f7fe f8b1 	bl	8008ca4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800ab42:	4b0b      	ldr	r3, [pc, #44]	@ (800ab70 <prvInitialiseTaskLists+0x78>)
 800ab44:	4a05      	ldr	r2, [pc, #20]	@ (800ab5c <prvInitialiseTaskLists+0x64>)
 800ab46:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ab48:	4b0a      	ldr	r3, [pc, #40]	@ (800ab74 <prvInitialiseTaskLists+0x7c>)
 800ab4a:	4a05      	ldr	r2, [pc, #20]	@ (800ab60 <prvInitialiseTaskLists+0x68>)
 800ab4c:	601a      	str	r2, [r3, #0]
}
 800ab4e:	bf00      	nop
 800ab50:	3708      	adds	r7, #8
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bd80      	pop	{r7, pc}
 800ab56:	bf00      	nop
 800ab58:	20000354 	.word	0x20000354
 800ab5c:	200003e0 	.word	0x200003e0
 800ab60:	200003f4 	.word	0x200003f4
 800ab64:	20000410 	.word	0x20000410
 800ab68:	20000424 	.word	0x20000424
 800ab6c:	2000043c 	.word	0x2000043c
 800ab70:	20000408 	.word	0x20000408
 800ab74:	2000040c 	.word	0x2000040c

0800ab78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b082      	sub	sp, #8
 800ab7c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ab7e:	e019      	b.n	800abb4 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 800ab80:	f000 ff46 	bl	800ba10 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800ab84:	4b10      	ldr	r3, [pc, #64]	@ (800abc8 <prvCheckTasksWaitingTermination+0x50>)
 800ab86:	68db      	ldr	r3, [r3, #12]
 800ab88:	68db      	ldr	r3, [r3, #12]
 800ab8a:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	3304      	adds	r3, #4
 800ab90:	4618      	mov	r0, r3
 800ab92:	f7fe f911 	bl	8008db8 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 800ab96:	4b0d      	ldr	r3, [pc, #52]	@ (800abcc <prvCheckTasksWaitingTermination+0x54>)
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	3b01      	subs	r3, #1
 800ab9c:	4a0b      	ldr	r2, [pc, #44]	@ (800abcc <prvCheckTasksWaitingTermination+0x54>)
 800ab9e:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 800aba0:	4b0b      	ldr	r3, [pc, #44]	@ (800abd0 <prvCheckTasksWaitingTermination+0x58>)
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	3b01      	subs	r3, #1
 800aba6:	4a0a      	ldr	r2, [pc, #40]	@ (800abd0 <prvCheckTasksWaitingTermination+0x58>)
 800aba8:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 800abaa:	f000 ff69 	bl	800ba80 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800abae:	6878      	ldr	r0, [r7, #4]
 800abb0:	f000 f810 	bl	800abd4 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800abb4:	4b06      	ldr	r3, [pc, #24]	@ (800abd0 <prvCheckTasksWaitingTermination+0x58>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d1e1      	bne.n	800ab80 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800abbc:	bf00      	nop
 800abbe:	bf00      	nop
 800abc0:	3708      	adds	r7, #8
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd80      	pop	{r7, pc}
 800abc6:	bf00      	nop
 800abc8:	20000424 	.word	0x20000424
 800abcc:	20000450 	.word	0x20000450
 800abd0:	20000438 	.word	0x20000438

0800abd4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b082      	sub	sp, #8
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
        portCLEAN_UP_TCB( pxTCB );

        #if ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 )
        {
            /* Free up the memory allocated for the task's TLS Block. */
            configDEINIT_TLS_BLOCK( pxTCB->xTLSBlock );
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	335c      	adds	r3, #92	@ 0x5c
 800abe0:	4618      	mov	r0, r3
 800abe2:	f003 f877 	bl	800dcd4 <_reclaim_reent>

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abea:	4618      	mov	r0, r3
 800abec:	f7f7 ff32 	bl	8002a54 <vPortFree>
            vPortFree( pxTCB );
 800abf0:	6878      	ldr	r0, [r7, #4]
 800abf2:	f7f7 ff2f 	bl	8002a54 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800abf6:	bf00      	nop
 800abf8:	3708      	adds	r7, #8
 800abfa:	46bd      	mov	sp, r7
 800abfc:	bd80      	pop	{r7, pc}
	...

0800ac00 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ac00:	b480      	push	{r7}
 800ac02:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ac04:	4b0a      	ldr	r3, [pc, #40]	@ (800ac30 <prvResetNextTaskUnblockTime+0x30>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d104      	bne.n	800ac18 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800ac0e:	4b09      	ldr	r3, [pc, #36]	@ (800ac34 <prvResetNextTaskUnblockTime+0x34>)
 800ac10:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ac14:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800ac16:	e005      	b.n	800ac24 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800ac18:	4b05      	ldr	r3, [pc, #20]	@ (800ac30 <prvResetNextTaskUnblockTime+0x30>)
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	68db      	ldr	r3, [r3, #12]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	4a04      	ldr	r2, [pc, #16]	@ (800ac34 <prvResetNextTaskUnblockTime+0x34>)
 800ac22:	6013      	str	r3, [r2, #0]
}
 800ac24:	bf00      	nop
 800ac26:	46bd      	mov	sp, r7
 800ac28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2c:	4770      	bx	lr
 800ac2e:	bf00      	nop
 800ac30:	20000408 	.word	0x20000408
 800ac34:	20000470 	.word	0x20000470

0800ac38 <xTaskGetCurrentTaskHandle>:

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) || ( configNUMBER_OF_CORES > 1 )

    #if ( configNUMBER_OF_CORES == 1 )
        TaskHandle_t xTaskGetCurrentTaskHandle( void )
        {
 800ac38:	b480      	push	{r7}
 800ac3a:	b083      	sub	sp, #12
 800ac3c:	af00      	add	r7, sp, #0
            traceENTER_xTaskGetCurrentTaskHandle();

            /* A critical section is not required as this is not called from
             * an interrupt and the current TCB will always be the same for any
             * individual execution thread. */
            xReturn = pxCurrentTCB;
 800ac3e:	4b05      	ldr	r3, [pc, #20]	@ (800ac54 <xTaskGetCurrentTaskHandle+0x1c>)
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	607b      	str	r3, [r7, #4]

            traceRETURN_xTaskGetCurrentTaskHandle( xReturn );

            return xReturn;
 800ac44:	687b      	ldr	r3, [r7, #4]
        }
 800ac46:	4618      	mov	r0, r3
 800ac48:	370c      	adds	r7, #12
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac50:	4770      	bx	lr
 800ac52:	bf00      	nop
 800ac54:	20000350 	.word	0x20000350

0800ac58 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800ac58:	b480      	push	{r7}
 800ac5a:	b083      	sub	sp, #12
 800ac5c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 800ac5e:	4b0b      	ldr	r3, [pc, #44]	@ (800ac8c <xTaskGetSchedulerState+0x34>)
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d102      	bne.n	800ac6c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800ac66:	2301      	movs	r3, #1
 800ac68:	607b      	str	r3, [r7, #4]
 800ac6a:	e008      	b.n	800ac7e <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800ac6c:	4b08      	ldr	r3, [pc, #32]	@ (800ac90 <xTaskGetSchedulerState+0x38>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d102      	bne.n	800ac7a <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 800ac74:	2302      	movs	r3, #2
 800ac76:	607b      	str	r3, [r7, #4]
 800ac78:	e001      	b.n	800ac7e <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	607b      	str	r3, [r7, #4]
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );

        return xReturn;
 800ac7e:	687b      	ldr	r3, [r7, #4]
    }
 800ac80:	4618      	mov	r0, r3
 800ac82:	370c      	adds	r7, #12
 800ac84:	46bd      	mov	sp, r7
 800ac86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8a:	4770      	bx	lr
 800ac8c:	2000045c 	.word	0x2000045c
 800ac90:	20000478 	.word	0x20000478

0800ac94 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b086      	sub	sp, #24
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800aca0:	2300      	movs	r3, #0
 800aca2:	617b      	str	r3, [r7, #20]

        traceENTER_xTaskPriorityInherit( pxMutexHolder );

        /* If the mutex is taken by an interrupt, the mutex holder is NULL. Priority
         * inheritance is not applied in this scenario. */
        if( pxMutexHolder != NULL )
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	f000 8089 	beq.w	800adbe <xTaskPriorityInherit+0x12a>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800acac:	693b      	ldr	r3, [r7, #16]
 800acae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800acb0:	4b45      	ldr	r3, [pc, #276]	@ (800adc8 <xTaskPriorityInherit+0x134>)
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acb6:	429a      	cmp	r2, r3
 800acb8:	d278      	bcs.n	800adac <xTaskPriorityInherit+0x118>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 800acba:	693b      	ldr	r3, [r7, #16]
 800acbc:	699b      	ldr	r3, [r3, #24]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	db06      	blt.n	800acd0 <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority );
 800acc2:	4b41      	ldr	r3, [pc, #260]	@ (800adc8 <xTaskPriorityInherit+0x134>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acc8:	f1c3 0207 	rsb	r2, r3, #7
 800accc:	693b      	ldr	r3, [r7, #16]
 800acce:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800acd0:	693b      	ldr	r3, [r7, #16]
 800acd2:	6959      	ldr	r1, [r3, #20]
 800acd4:	693b      	ldr	r3, [r7, #16]
 800acd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800acd8:	4613      	mov	r3, r2
 800acda:	009b      	lsls	r3, r3, #2
 800acdc:	4413      	add	r3, r2
 800acde:	009b      	lsls	r3, r3, #2
 800ace0:	4a3a      	ldr	r2, [pc, #232]	@ (800adcc <xTaskPriorityInherit+0x138>)
 800ace2:	4413      	add	r3, r2
 800ace4:	4299      	cmp	r1, r3
 800ace6:	d159      	bne.n	800ad9c <xTaskPriorityInherit+0x108>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ace8:	693b      	ldr	r3, [r7, #16]
 800acea:	3304      	adds	r3, #4
 800acec:	4618      	mov	r0, r3
 800acee:	f7fe f863 	bl	8008db8 <uxListRemove>
 800acf2:	4603      	mov	r3, r0
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d10a      	bne.n	800ad0e <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800acf8:	693b      	ldr	r3, [r7, #16]
 800acfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acfc:	2201      	movs	r2, #1
 800acfe:	fa02 f303 	lsl.w	r3, r2, r3
 800ad02:	43da      	mvns	r2, r3
 800ad04:	4b32      	ldr	r3, [pc, #200]	@ (800add0 <xTaskPriorityInherit+0x13c>)
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	4013      	ands	r3, r2
 800ad0a:	4a31      	ldr	r2, [pc, #196]	@ (800add0 <xTaskPriorityInherit+0x13c>)
 800ad0c:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ad0e:	4b2e      	ldr	r3, [pc, #184]	@ (800adc8 <xTaskPriorityInherit+0x134>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad14:	693b      	ldr	r3, [r7, #16]
 800ad16:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 800ad18:	693b      	ldr	r3, [r7, #16]
 800ad1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad1c:	2201      	movs	r2, #1
 800ad1e:	409a      	lsls	r2, r3
 800ad20:	4b2b      	ldr	r3, [pc, #172]	@ (800add0 <xTaskPriorityInherit+0x13c>)
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	4313      	orrs	r3, r2
 800ad26:	4a2a      	ldr	r2, [pc, #168]	@ (800add0 <xTaskPriorityInherit+0x13c>)
 800ad28:	6013      	str	r3, [r2, #0]
 800ad2a:	693b      	ldr	r3, [r7, #16]
 800ad2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad2e:	4927      	ldr	r1, [pc, #156]	@ (800adcc <xTaskPriorityInherit+0x138>)
 800ad30:	4613      	mov	r3, r2
 800ad32:	009b      	lsls	r3, r3, #2
 800ad34:	4413      	add	r3, r2
 800ad36:	009b      	lsls	r3, r3, #2
 800ad38:	440b      	add	r3, r1
 800ad3a:	3304      	adds	r3, #4
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	60fb      	str	r3, [r7, #12]
 800ad40:	693b      	ldr	r3, [r7, #16]
 800ad42:	68fa      	ldr	r2, [r7, #12]
 800ad44:	609a      	str	r2, [r3, #8]
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	689a      	ldr	r2, [r3, #8]
 800ad4a:	693b      	ldr	r3, [r7, #16]
 800ad4c:	60da      	str	r2, [r3, #12]
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	689b      	ldr	r3, [r3, #8]
 800ad52:	693a      	ldr	r2, [r7, #16]
 800ad54:	3204      	adds	r2, #4
 800ad56:	605a      	str	r2, [r3, #4]
 800ad58:	693b      	ldr	r3, [r7, #16]
 800ad5a:	1d1a      	adds	r2, r3, #4
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	609a      	str	r2, [r3, #8]
 800ad60:	693b      	ldr	r3, [r7, #16]
 800ad62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad64:	4613      	mov	r3, r2
 800ad66:	009b      	lsls	r3, r3, #2
 800ad68:	4413      	add	r3, r2
 800ad6a:	009b      	lsls	r3, r3, #2
 800ad6c:	4a17      	ldr	r2, [pc, #92]	@ (800adcc <xTaskPriorityInherit+0x138>)
 800ad6e:	441a      	add	r2, r3
 800ad70:	693b      	ldr	r3, [r7, #16]
 800ad72:	615a      	str	r2, [r3, #20]
 800ad74:	693b      	ldr	r3, [r7, #16]
 800ad76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad78:	4914      	ldr	r1, [pc, #80]	@ (800adcc <xTaskPriorityInherit+0x138>)
 800ad7a:	4613      	mov	r3, r2
 800ad7c:	009b      	lsls	r3, r3, #2
 800ad7e:	4413      	add	r3, r2
 800ad80:	009b      	lsls	r3, r3, #2
 800ad82:	440b      	add	r3, r1
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	693a      	ldr	r2, [r7, #16]
 800ad88:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800ad8a:	1c59      	adds	r1, r3, #1
 800ad8c:	480f      	ldr	r0, [pc, #60]	@ (800adcc <xTaskPriorityInherit+0x138>)
 800ad8e:	4613      	mov	r3, r2
 800ad90:	009b      	lsls	r3, r3, #2
 800ad92:	4413      	add	r3, r2
 800ad94:	009b      	lsls	r3, r3, #2
 800ad96:	4403      	add	r3, r0
 800ad98:	6019      	str	r1, [r3, #0]
 800ad9a:	e004      	b.n	800ada6 <xTaskPriorityInherit+0x112>
                    #endif /* if ( configNUMBER_OF_CORES > 1 ) */
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ad9c:	4b0a      	ldr	r3, [pc, #40]	@ (800adc8 <xTaskPriorityInherit+0x134>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ada2:	693b      	ldr	r3, [r7, #16]
 800ada4:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 800ada6:	2301      	movs	r3, #1
 800ada8:	617b      	str	r3, [r7, #20]
 800adaa:	e008      	b.n	800adbe <xTaskPriorityInherit+0x12a>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800adac:	693b      	ldr	r3, [r7, #16]
 800adae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800adb0:	4b05      	ldr	r3, [pc, #20]	@ (800adc8 <xTaskPriorityInherit+0x134>)
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adb6:	429a      	cmp	r2, r3
 800adb8:	d201      	bcs.n	800adbe <xTaskPriorityInherit+0x12a>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 800adba:	2301      	movs	r3, #1
 800adbc:	617b      	str	r3, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityInherit( xReturn );

        return xReturn;
 800adbe:	697b      	ldr	r3, [r7, #20]
    }
 800adc0:	4618      	mov	r0, r3
 800adc2:	3718      	adds	r7, #24
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}
 800adc8:	20000350 	.word	0x20000350
 800adcc:	20000354 	.word	0x20000354
 800add0:	20000458 	.word	0x20000458

0800add4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800add4:	b580      	push	{r7, lr}
 800add6:	b088      	sub	sp, #32
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 800ade0:	2300      	movs	r3, #0
 800ade2:	61fb      	str	r3, [r7, #28]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	f000 809a 	beq.w	800af20 <xTaskPriorityDisinherit+0x14c>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800adec:	4b4f      	ldr	r3, [pc, #316]	@ (800af2c <xTaskPriorityDisinherit+0x158>)
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	69ba      	ldr	r2, [r7, #24]
 800adf2:	429a      	cmp	r2, r3
 800adf4:	d010      	beq.n	800ae18 <xTaskPriorityDisinherit+0x44>
    __asm volatile
 800adf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adfa:	b672      	cpsid	i
 800adfc:	f383 8811 	msr	BASEPRI, r3
 800ae00:	f3bf 8f6f 	isb	sy
 800ae04:	f3bf 8f4f 	dsb	sy
 800ae08:	b662      	cpsie	i
 800ae0a:	613b      	str	r3, [r7, #16]
}
 800ae0c:	bf00      	nop
 800ae0e:	f641 2128 	movw	r1, #6696	@ 0x1a28
 800ae12:	4847      	ldr	r0, [pc, #284]	@ (800af30 <xTaskPriorityDisinherit+0x15c>)
 800ae14:	f7f7 faf0 	bl	80023f8 <vAssertCalled>
            configASSERT( pxTCB->uxMutexesHeld );
 800ae18:	69bb      	ldr	r3, [r7, #24]
 800ae1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d110      	bne.n	800ae42 <xTaskPriorityDisinherit+0x6e>
    __asm volatile
 800ae20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae24:	b672      	cpsid	i
 800ae26:	f383 8811 	msr	BASEPRI, r3
 800ae2a:	f3bf 8f6f 	isb	sy
 800ae2e:	f3bf 8f4f 	dsb	sy
 800ae32:	b662      	cpsie	i
 800ae34:	60fb      	str	r3, [r7, #12]
}
 800ae36:	bf00      	nop
 800ae38:	f641 2129 	movw	r1, #6697	@ 0x1a29
 800ae3c:	483c      	ldr	r0, [pc, #240]	@ (800af30 <xTaskPriorityDisinherit+0x15c>)
 800ae3e:	f7f7 fadb 	bl	80023f8 <vAssertCalled>
            ( pxTCB->uxMutexesHeld )--;
 800ae42:	69bb      	ldr	r3, [r7, #24]
 800ae44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae46:	1e5a      	subs	r2, r3, #1
 800ae48:	69bb      	ldr	r3, [r7, #24]
 800ae4a:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ae4c:	69bb      	ldr	r3, [r7, #24]
 800ae4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae50:	69bb      	ldr	r3, [r7, #24]
 800ae52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae54:	429a      	cmp	r2, r3
 800ae56:	d063      	beq.n	800af20 <xTaskPriorityDisinherit+0x14c>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ae58:	69bb      	ldr	r3, [r7, #24]
 800ae5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d15f      	bne.n	800af20 <xTaskPriorityDisinherit+0x14c>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ae60:	69bb      	ldr	r3, [r7, #24]
 800ae62:	3304      	adds	r3, #4
 800ae64:	4618      	mov	r0, r3
 800ae66:	f7fd ffa7 	bl	8008db8 <uxListRemove>
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d10a      	bne.n	800ae86 <xTaskPriorityDisinherit+0xb2>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800ae70:	69bb      	ldr	r3, [r7, #24]
 800ae72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae74:	2201      	movs	r2, #1
 800ae76:	fa02 f303 	lsl.w	r3, r2, r3
 800ae7a:	43da      	mvns	r2, r3
 800ae7c:	4b2d      	ldr	r3, [pc, #180]	@ (800af34 <xTaskPriorityDisinherit+0x160>)
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	4013      	ands	r3, r2
 800ae82:	4a2c      	ldr	r2, [pc, #176]	@ (800af34 <xTaskPriorityDisinherit+0x160>)
 800ae84:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ae86:	69bb      	ldr	r3, [r7, #24]
 800ae88:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ae8a:	69bb      	ldr	r3, [r7, #24]
 800ae8c:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 800ae8e:	69bb      	ldr	r3, [r7, #24]
 800ae90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae92:	f1c3 0207 	rsb	r2, r3, #7
 800ae96:	69bb      	ldr	r3, [r7, #24]
 800ae98:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800ae9a:	69bb      	ldr	r3, [r7, #24]
 800ae9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae9e:	2201      	movs	r2, #1
 800aea0:	409a      	lsls	r2, r3
 800aea2:	4b24      	ldr	r3, [pc, #144]	@ (800af34 <xTaskPriorityDisinherit+0x160>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	4313      	orrs	r3, r2
 800aea8:	4a22      	ldr	r2, [pc, #136]	@ (800af34 <xTaskPriorityDisinherit+0x160>)
 800aeaa:	6013      	str	r3, [r2, #0]
 800aeac:	69bb      	ldr	r3, [r7, #24]
 800aeae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aeb0:	4921      	ldr	r1, [pc, #132]	@ (800af38 <xTaskPriorityDisinherit+0x164>)
 800aeb2:	4613      	mov	r3, r2
 800aeb4:	009b      	lsls	r3, r3, #2
 800aeb6:	4413      	add	r3, r2
 800aeb8:	009b      	lsls	r3, r3, #2
 800aeba:	440b      	add	r3, r1
 800aebc:	3304      	adds	r3, #4
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	617b      	str	r3, [r7, #20]
 800aec2:	69bb      	ldr	r3, [r7, #24]
 800aec4:	697a      	ldr	r2, [r7, #20]
 800aec6:	609a      	str	r2, [r3, #8]
 800aec8:	697b      	ldr	r3, [r7, #20]
 800aeca:	689a      	ldr	r2, [r3, #8]
 800aecc:	69bb      	ldr	r3, [r7, #24]
 800aece:	60da      	str	r2, [r3, #12]
 800aed0:	697b      	ldr	r3, [r7, #20]
 800aed2:	689b      	ldr	r3, [r3, #8]
 800aed4:	69ba      	ldr	r2, [r7, #24]
 800aed6:	3204      	adds	r2, #4
 800aed8:	605a      	str	r2, [r3, #4]
 800aeda:	69bb      	ldr	r3, [r7, #24]
 800aedc:	1d1a      	adds	r2, r3, #4
 800aede:	697b      	ldr	r3, [r7, #20]
 800aee0:	609a      	str	r2, [r3, #8]
 800aee2:	69bb      	ldr	r3, [r7, #24]
 800aee4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aee6:	4613      	mov	r3, r2
 800aee8:	009b      	lsls	r3, r3, #2
 800aeea:	4413      	add	r3, r2
 800aeec:	009b      	lsls	r3, r3, #2
 800aeee:	4a12      	ldr	r2, [pc, #72]	@ (800af38 <xTaskPriorityDisinherit+0x164>)
 800aef0:	441a      	add	r2, r3
 800aef2:	69bb      	ldr	r3, [r7, #24]
 800aef4:	615a      	str	r2, [r3, #20]
 800aef6:	69bb      	ldr	r3, [r7, #24]
 800aef8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aefa:	490f      	ldr	r1, [pc, #60]	@ (800af38 <xTaskPriorityDisinherit+0x164>)
 800aefc:	4613      	mov	r3, r2
 800aefe:	009b      	lsls	r3, r3, #2
 800af00:	4413      	add	r3, r2
 800af02:	009b      	lsls	r3, r3, #2
 800af04:	440b      	add	r3, r1
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	69ba      	ldr	r2, [r7, #24]
 800af0a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800af0c:	1c59      	adds	r1, r3, #1
 800af0e:	480a      	ldr	r0, [pc, #40]	@ (800af38 <xTaskPriorityDisinherit+0x164>)
 800af10:	4613      	mov	r3, r2
 800af12:	009b      	lsls	r3, r3, #2
 800af14:	4413      	add	r3, r2
 800af16:	009b      	lsls	r3, r3, #2
 800af18:	4403      	add	r3, r0
 800af1a:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800af1c:	2301      	movs	r3, #1
 800af1e:	61fb      	str	r3, [r7, #28]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );

        return xReturn;
 800af20:	69fb      	ldr	r3, [r7, #28]
    }
 800af22:	4618      	mov	r0, r3
 800af24:	3720      	adds	r7, #32
 800af26:	46bd      	mov	sp, r7
 800af28:	bd80      	pop	{r7, pc}
 800af2a:	bf00      	nop
 800af2c:	20000350 	.word	0x20000350
 800af30:	08010ac8 	.word	0x08010ac8
 800af34:	20000458 	.word	0x20000458
 800af38:	20000354 	.word	0x20000354

0800af3c <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b08a      	sub	sp, #40	@ 0x28
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
 800af44:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800af4a:	2301      	movs	r3, #1
 800af4c:	61fb      	str	r3, [r7, #28]

        traceENTER_vTaskPriorityDisinheritAfterTimeout( pxMutexHolder, uxHighestPriorityWaitingTask );

        if( pxMutexHolder != NULL )
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2b00      	cmp	r3, #0
 800af52:	f000 80b0 	beq.w	800b0b6 <vTaskPriorityDisinheritAfterTimeout+0x17a>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 800af56:	6a3b      	ldr	r3, [r7, #32]
 800af58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d110      	bne.n	800af80 <vTaskPriorityDisinheritAfterTimeout+0x44>
    __asm volatile
 800af5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af62:	b672      	cpsid	i
 800af64:	f383 8811 	msr	BASEPRI, r3
 800af68:	f3bf 8f6f 	isb	sy
 800af6c:	f3bf 8f4f 	dsb	sy
 800af70:	b662      	cpsie	i
 800af72:	613b      	str	r3, [r7, #16]
}
 800af74:	bf00      	nop
 800af76:	f641 2186 	movw	r1, #6790	@ 0x1a86
 800af7a:	4851      	ldr	r0, [pc, #324]	@ (800b0c0 <vTaskPriorityDisinheritAfterTimeout+0x184>)
 800af7c:	f7f7 fa3c 	bl	80023f8 <vAssertCalled>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800af80:	6a3b      	ldr	r3, [r7, #32]
 800af82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af84:	683a      	ldr	r2, [r7, #0]
 800af86:	429a      	cmp	r2, r3
 800af88:	d902      	bls.n	800af90 <vTaskPriorityDisinheritAfterTimeout+0x54>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	627b      	str	r3, [r7, #36]	@ 0x24
 800af8e:	e002      	b.n	800af96 <vTaskPriorityDisinheritAfterTimeout+0x5a>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 800af90:	6a3b      	ldr	r3, [r7, #32]
 800af92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af94:	627b      	str	r3, [r7, #36]	@ 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 800af96:	6a3b      	ldr	r3, [r7, #32]
 800af98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af9c:	429a      	cmp	r2, r3
 800af9e:	f000 808a 	beq.w	800b0b6 <vTaskPriorityDisinheritAfterTimeout+0x17a>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800afa2:	6a3b      	ldr	r3, [r7, #32]
 800afa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800afa6:	69fa      	ldr	r2, [r7, #28]
 800afa8:	429a      	cmp	r2, r3
 800afaa:	f040 8084 	bne.w	800b0b6 <vTaskPriorityDisinheritAfterTimeout+0x17a>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 800afae:	4b45      	ldr	r3, [pc, #276]	@ (800b0c4 <vTaskPriorityDisinheritAfterTimeout+0x188>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	6a3a      	ldr	r2, [r7, #32]
 800afb4:	429a      	cmp	r2, r3
 800afb6:	d110      	bne.n	800afda <vTaskPriorityDisinheritAfterTimeout+0x9e>
    __asm volatile
 800afb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afbc:	b672      	cpsid	i
 800afbe:	f383 8811 	msr	BASEPRI, r3
 800afc2:	f3bf 8f6f 	isb	sy
 800afc6:	f3bf 8f4f 	dsb	sy
 800afca:	b662      	cpsie	i
 800afcc:	60fb      	str	r3, [r7, #12]
}
 800afce:	bf00      	nop
 800afd0:	f641 21a1 	movw	r1, #6817	@ 0x1aa1
 800afd4:	483a      	ldr	r0, [pc, #232]	@ (800b0c0 <vTaskPriorityDisinheritAfterTimeout+0x184>)
 800afd6:	f7f7 fa0f 	bl	80023f8 <vAssertCalled>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800afda:	6a3b      	ldr	r3, [r7, #32]
 800afdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afde:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 800afe0:	6a3b      	ldr	r3, [r7, #32]
 800afe2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800afe4:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 800afe6:	6a3b      	ldr	r3, [r7, #32]
 800afe8:	699b      	ldr	r3, [r3, #24]
 800afea:	2b00      	cmp	r3, #0
 800afec:	db04      	blt.n	800aff8 <vTaskPriorityDisinheritAfterTimeout+0xbc>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse );
 800afee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aff0:	f1c3 0207 	rsb	r2, r3, #7
 800aff4:	6a3b      	ldr	r3, [r7, #32]
 800aff6:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800aff8:	6a3b      	ldr	r3, [r7, #32]
 800affa:	6959      	ldr	r1, [r3, #20]
 800affc:	69ba      	ldr	r2, [r7, #24]
 800affe:	4613      	mov	r3, r2
 800b000:	009b      	lsls	r3, r3, #2
 800b002:	4413      	add	r3, r2
 800b004:	009b      	lsls	r3, r3, #2
 800b006:	4a30      	ldr	r2, [pc, #192]	@ (800b0c8 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
 800b008:	4413      	add	r3, r2
 800b00a:	4299      	cmp	r1, r3
 800b00c:	d153      	bne.n	800b0b6 <vTaskPriorityDisinheritAfterTimeout+0x17a>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b00e:	6a3b      	ldr	r3, [r7, #32]
 800b010:	3304      	adds	r3, #4
 800b012:	4618      	mov	r0, r3
 800b014:	f7fd fed0 	bl	8008db8 <uxListRemove>
 800b018:	4603      	mov	r3, r0
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d10a      	bne.n	800b034 <vTaskPriorityDisinheritAfterTimeout+0xf8>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800b01e:	6a3b      	ldr	r3, [r7, #32]
 800b020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b022:	2201      	movs	r2, #1
 800b024:	fa02 f303 	lsl.w	r3, r2, r3
 800b028:	43da      	mvns	r2, r3
 800b02a:	4b28      	ldr	r3, [pc, #160]	@ (800b0cc <vTaskPriorityDisinheritAfterTimeout+0x190>)
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	4013      	ands	r3, r2
 800b030:	4a26      	ldr	r2, [pc, #152]	@ (800b0cc <vTaskPriorityDisinheritAfterTimeout+0x190>)
 800b032:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 800b034:	6a3b      	ldr	r3, [r7, #32]
 800b036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b038:	2201      	movs	r2, #1
 800b03a:	409a      	lsls	r2, r3
 800b03c:	4b23      	ldr	r3, [pc, #140]	@ (800b0cc <vTaskPriorityDisinheritAfterTimeout+0x190>)
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	4313      	orrs	r3, r2
 800b042:	4a22      	ldr	r2, [pc, #136]	@ (800b0cc <vTaskPriorityDisinheritAfterTimeout+0x190>)
 800b044:	6013      	str	r3, [r2, #0]
 800b046:	6a3b      	ldr	r3, [r7, #32]
 800b048:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b04a:	491f      	ldr	r1, [pc, #124]	@ (800b0c8 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
 800b04c:	4613      	mov	r3, r2
 800b04e:	009b      	lsls	r3, r3, #2
 800b050:	4413      	add	r3, r2
 800b052:	009b      	lsls	r3, r3, #2
 800b054:	440b      	add	r3, r1
 800b056:	3304      	adds	r3, #4
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	617b      	str	r3, [r7, #20]
 800b05c:	6a3b      	ldr	r3, [r7, #32]
 800b05e:	697a      	ldr	r2, [r7, #20]
 800b060:	609a      	str	r2, [r3, #8]
 800b062:	697b      	ldr	r3, [r7, #20]
 800b064:	689a      	ldr	r2, [r3, #8]
 800b066:	6a3b      	ldr	r3, [r7, #32]
 800b068:	60da      	str	r2, [r3, #12]
 800b06a:	697b      	ldr	r3, [r7, #20]
 800b06c:	689b      	ldr	r3, [r3, #8]
 800b06e:	6a3a      	ldr	r2, [r7, #32]
 800b070:	3204      	adds	r2, #4
 800b072:	605a      	str	r2, [r3, #4]
 800b074:	6a3b      	ldr	r3, [r7, #32]
 800b076:	1d1a      	adds	r2, r3, #4
 800b078:	697b      	ldr	r3, [r7, #20]
 800b07a:	609a      	str	r2, [r3, #8]
 800b07c:	6a3b      	ldr	r3, [r7, #32]
 800b07e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b080:	4613      	mov	r3, r2
 800b082:	009b      	lsls	r3, r3, #2
 800b084:	4413      	add	r3, r2
 800b086:	009b      	lsls	r3, r3, #2
 800b088:	4a0f      	ldr	r2, [pc, #60]	@ (800b0c8 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
 800b08a:	441a      	add	r2, r3
 800b08c:	6a3b      	ldr	r3, [r7, #32]
 800b08e:	615a      	str	r2, [r3, #20]
 800b090:	6a3b      	ldr	r3, [r7, #32]
 800b092:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b094:	490c      	ldr	r1, [pc, #48]	@ (800b0c8 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
 800b096:	4613      	mov	r3, r2
 800b098:	009b      	lsls	r3, r3, #2
 800b09a:	4413      	add	r3, r2
 800b09c:	009b      	lsls	r3, r3, #2
 800b09e:	440b      	add	r3, r1
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	6a3a      	ldr	r2, [r7, #32]
 800b0a4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800b0a6:	1c59      	adds	r1, r3, #1
 800b0a8:	4807      	ldr	r0, [pc, #28]	@ (800b0c8 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
 800b0aa:	4613      	mov	r3, r2
 800b0ac:	009b      	lsls	r3, r3, #2
 800b0ae:	4413      	add	r3, r2
 800b0b0:	009b      	lsls	r3, r3, #2
 800b0b2:	4403      	add	r3, r0
 800b0b4:	6019      	str	r1, [r3, #0]
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskPriorityDisinheritAfterTimeout();
    }
 800b0b6:	bf00      	nop
 800b0b8:	3728      	adds	r7, #40	@ 0x28
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}
 800b0be:	bf00      	nop
 800b0c0:	08010ac8 	.word	0x08010ac8
 800b0c4:	20000350 	.word	0x20000350
 800b0c8:	20000354 	.word	0x20000354
 800b0cc:	20000458 	.word	0x20000458

0800b0d0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 800b0d0:	b480      	push	{r7}
 800b0d2:	b083      	sub	sp, #12
 800b0d4:	af00      	add	r7, sp, #0
        TCB_t * pxTCB;

        traceENTER_pvTaskIncrementMutexHeldCount();

        pxTCB = pxCurrentTCB;
 800b0d6:	4b09      	ldr	r3, [pc, #36]	@ (800b0fc <pvTaskIncrementMutexHeldCount+0x2c>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	607b      	str	r3, [r7, #4]

        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxTCB != NULL )
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d004      	beq.n	800b0ec <pvTaskIncrementMutexHeldCount+0x1c>
        {
            ( pxTCB->uxMutexesHeld )++;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b0e6:	1c5a      	adds	r2, r3, #1
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        traceRETURN_pvTaskIncrementMutexHeldCount( pxTCB );

        return pxTCB;
 800b0ec:	687b      	ldr	r3, [r7, #4]
    }
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	370c      	adds	r7, #12
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f8:	4770      	bx	lr
 800b0fa:	bf00      	nop
 800b0fc:	20000350 	.word	0x20000350

0800b100 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b088      	sub	sp, #32
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
 800b108:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800b10a:	4b37      	ldr	r3, [pc, #220]	@ (800b1e8 <prvAddCurrentTaskToDelayedList+0xe8>)
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 800b110:	4b36      	ldr	r3, [pc, #216]	@ (800b1ec <prvAddCurrentTaskToDelayedList+0xec>)
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 800b116:	4b36      	ldr	r3, [pc, #216]	@ (800b1f0 <prvAddCurrentTaskToDelayedList+0xf0>)
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b11c:	4b35      	ldr	r3, [pc, #212]	@ (800b1f4 <prvAddCurrentTaskToDelayedList+0xf4>)
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	3304      	adds	r3, #4
 800b122:	4618      	mov	r0, r3
 800b124:	f7fd fe48 	bl	8008db8 <uxListRemove>
 800b128:	4603      	mov	r3, r0
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d10b      	bne.n	800b146 <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800b12e:	4b31      	ldr	r3, [pc, #196]	@ (800b1f4 <prvAddCurrentTaskToDelayedList+0xf4>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b134:	2201      	movs	r2, #1
 800b136:	fa02 f303 	lsl.w	r3, r2, r3
 800b13a:	43da      	mvns	r2, r3
 800b13c:	4b2e      	ldr	r3, [pc, #184]	@ (800b1f8 <prvAddCurrentTaskToDelayedList+0xf8>)
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	4013      	ands	r3, r2
 800b142:	4a2d      	ldr	r2, [pc, #180]	@ (800b1f8 <prvAddCurrentTaskToDelayedList+0xf8>)
 800b144:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b14c:	d124      	bne.n	800b198 <prvAddCurrentTaskToDelayedList+0x98>
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d021      	beq.n	800b198 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b154:	4b29      	ldr	r3, [pc, #164]	@ (800b1fc <prvAddCurrentTaskToDelayedList+0xfc>)
 800b156:	685b      	ldr	r3, [r3, #4]
 800b158:	613b      	str	r3, [r7, #16]
 800b15a:	4b26      	ldr	r3, [pc, #152]	@ (800b1f4 <prvAddCurrentTaskToDelayedList+0xf4>)
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	693a      	ldr	r2, [r7, #16]
 800b160:	609a      	str	r2, [r3, #8]
 800b162:	4b24      	ldr	r3, [pc, #144]	@ (800b1f4 <prvAddCurrentTaskToDelayedList+0xf4>)
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	693a      	ldr	r2, [r7, #16]
 800b168:	6892      	ldr	r2, [r2, #8]
 800b16a:	60da      	str	r2, [r3, #12]
 800b16c:	4b21      	ldr	r3, [pc, #132]	@ (800b1f4 <prvAddCurrentTaskToDelayedList+0xf4>)
 800b16e:	681a      	ldr	r2, [r3, #0]
 800b170:	693b      	ldr	r3, [r7, #16]
 800b172:	689b      	ldr	r3, [r3, #8]
 800b174:	3204      	adds	r2, #4
 800b176:	605a      	str	r2, [r3, #4]
 800b178:	4b1e      	ldr	r3, [pc, #120]	@ (800b1f4 <prvAddCurrentTaskToDelayedList+0xf4>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	1d1a      	adds	r2, r3, #4
 800b17e:	693b      	ldr	r3, [r7, #16]
 800b180:	609a      	str	r2, [r3, #8]
 800b182:	4b1c      	ldr	r3, [pc, #112]	@ (800b1f4 <prvAddCurrentTaskToDelayedList+0xf4>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	4a1d      	ldr	r2, [pc, #116]	@ (800b1fc <prvAddCurrentTaskToDelayedList+0xfc>)
 800b188:	615a      	str	r2, [r3, #20]
 800b18a:	4b1c      	ldr	r3, [pc, #112]	@ (800b1fc <prvAddCurrentTaskToDelayedList+0xfc>)
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	3301      	adds	r3, #1
 800b190:	4a1a      	ldr	r2, [pc, #104]	@ (800b1fc <prvAddCurrentTaskToDelayedList+0xfc>)
 800b192:	6013      	str	r3, [r2, #0]
 800b194:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800b196:	e022      	b.n	800b1de <prvAddCurrentTaskToDelayedList+0xde>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800b198:	69fa      	ldr	r2, [r7, #28]
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	4413      	add	r3, r2
 800b19e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b1a0:	4b14      	ldr	r3, [pc, #80]	@ (800b1f4 <prvAddCurrentTaskToDelayedList+0xf4>)
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	68fa      	ldr	r2, [r7, #12]
 800b1a6:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800b1a8:	68fa      	ldr	r2, [r7, #12]
 800b1aa:	69fb      	ldr	r3, [r7, #28]
 800b1ac:	429a      	cmp	r2, r3
 800b1ae:	d207      	bcs.n	800b1c0 <prvAddCurrentTaskToDelayedList+0xc0>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 800b1b0:	4b10      	ldr	r3, [pc, #64]	@ (800b1f4 <prvAddCurrentTaskToDelayedList+0xf4>)
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	3304      	adds	r3, #4
 800b1b6:	4619      	mov	r1, r3
 800b1b8:	6978      	ldr	r0, [r7, #20]
 800b1ba:	f7fd fdc4 	bl	8008d46 <vListInsert>
}
 800b1be:	e00e      	b.n	800b1de <prvAddCurrentTaskToDelayedList+0xde>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 800b1c0:	4b0c      	ldr	r3, [pc, #48]	@ (800b1f4 <prvAddCurrentTaskToDelayedList+0xf4>)
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	3304      	adds	r3, #4
 800b1c6:	4619      	mov	r1, r3
 800b1c8:	69b8      	ldr	r0, [r7, #24]
 800b1ca:	f7fd fdbc 	bl	8008d46 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800b1ce:	4b0c      	ldr	r3, [pc, #48]	@ (800b200 <prvAddCurrentTaskToDelayedList+0x100>)
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	68fa      	ldr	r2, [r7, #12]
 800b1d4:	429a      	cmp	r2, r3
 800b1d6:	d202      	bcs.n	800b1de <prvAddCurrentTaskToDelayedList+0xde>
                    xNextTaskUnblockTime = xTimeToWake;
 800b1d8:	4a09      	ldr	r2, [pc, #36]	@ (800b200 <prvAddCurrentTaskToDelayedList+0x100>)
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	6013      	str	r3, [r2, #0]
}
 800b1de:	bf00      	nop
 800b1e0:	3720      	adds	r7, #32
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd80      	pop	{r7, pc}
 800b1e6:	bf00      	nop
 800b1e8:	20000454 	.word	0x20000454
 800b1ec:	20000408 	.word	0x20000408
 800b1f0:	2000040c 	.word	0x2000040c
 800b1f4:	20000350 	.word	0x20000350
 800b1f8:	20000458 	.word	0x20000458
 800b1fc:	2000043c 	.word	0x2000043c
 800b200:	20000470 	.word	0x20000470

0800b204 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800b204:	b580      	push	{r7, lr}
 800b206:	b084      	sub	sp, #16
 800b208:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800b20a:	2300      	movs	r3, #0
 800b20c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800b20e:	f000 fa61 	bl	800b6d4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800b212:	4b14      	ldr	r3, [pc, #80]	@ (800b264 <xTimerCreateTimerTask+0x60>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d00b      	beq.n	800b232 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800b21a:	4b13      	ldr	r3, [pc, #76]	@ (800b268 <xTimerCreateTimerTask+0x64>)
 800b21c:	9301      	str	r3, [sp, #4]
 800b21e:	2306      	movs	r3, #6
 800b220:	9300      	str	r3, [sp, #0]
 800b222:	2300      	movs	r3, #0
 800b224:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800b228:	4910      	ldr	r1, [pc, #64]	@ (800b26c <xTimerCreateTimerTask+0x68>)
 800b22a:	4811      	ldr	r0, [pc, #68]	@ (800b270 <xTimerCreateTimerTask+0x6c>)
 800b22c:	f7fe fc68 	bl	8009b00 <xTaskCreate>
 800b230:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d110      	bne.n	800b25a <xTimerCreateTimerTask+0x56>
    __asm volatile
 800b238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b23c:	b672      	cpsid	i
 800b23e:	f383 8811 	msr	BASEPRI, r3
 800b242:	f3bf 8f6f 	isb	sy
 800b246:	f3bf 8f4f 	dsb	sy
 800b24a:	b662      	cpsie	i
 800b24c:	603b      	str	r3, [r7, #0]
}
 800b24e:	bf00      	nop
 800b250:	f44f 71a3 	mov.w	r1, #326	@ 0x146
 800b254:	4807      	ldr	r0, [pc, #28]	@ (800b274 <xTimerCreateTimerTask+0x70>)
 800b256:	f7f7 f8cf 	bl	80023f8 <vAssertCalled>

        traceRETURN_xTimerCreateTimerTask( xReturn );

        return xReturn;
 800b25a:	687b      	ldr	r3, [r7, #4]
    }
 800b25c:	4618      	mov	r0, r3
 800b25e:	3708      	adds	r7, #8
 800b260:	46bd      	mov	sp, r7
 800b262:	bd80      	pop	{r7, pc}
 800b264:	200004b4 	.word	0x200004b4
 800b268:	200004b8 	.word	0x200004b8
 800b26c:	08010bac 	.word	0x08010bac
 800b270:	0800b31d 	.word	0x0800b31d
 800b274:	08010bb4 	.word	0x08010bb4

0800b278 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800b278:	b580      	push	{r7, lr}
 800b27a:	b084      	sub	sp, #16
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	60f8      	str	r0, [r7, #12]
 800b280:	60b9      	str	r1, [r7, #8]
 800b282:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800b284:	e008      	b.n	800b298 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	699b      	ldr	r3, [r3, #24]
 800b28a:	68ba      	ldr	r2, [r7, #8]
 800b28c:	4413      	add	r3, r2
 800b28e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	6a1b      	ldr	r3, [r3, #32]
 800b294:	68f8      	ldr	r0, [r7, #12]
 800b296:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	699a      	ldr	r2, [r3, #24]
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	18d1      	adds	r1, r2, r3
 800b2a0:	68bb      	ldr	r3, [r7, #8]
 800b2a2:	687a      	ldr	r2, [r7, #4]
 800b2a4:	68f8      	ldr	r0, [r7, #12]
 800b2a6:	f000 f8df 	bl	800b468 <prvInsertTimerInActiveList>
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d1ea      	bne.n	800b286 <prvReloadTimer+0xe>
        }
    }
 800b2b0:	bf00      	nop
 800b2b2:	bf00      	nop
 800b2b4:	3710      	adds	r7, #16
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bd80      	pop	{r7, pc}
	...

0800b2bc <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b084      	sub	sp, #16
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
 800b2c4:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b2c6:	4b14      	ldr	r3, [pc, #80]	@ (800b318 <prvProcessExpiredTimer+0x5c>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	68db      	ldr	r3, [r3, #12]
 800b2cc:	68db      	ldr	r3, [r3, #12]
 800b2ce:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	3304      	adds	r3, #4
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	f7fd fd6f 	bl	8008db8 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b2e0:	f003 0304 	and.w	r3, r3, #4
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d005      	beq.n	800b2f4 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800b2e8:	683a      	ldr	r2, [r7, #0]
 800b2ea:	6879      	ldr	r1, [r7, #4]
 800b2ec:	68f8      	ldr	r0, [r7, #12]
 800b2ee:	f7ff ffc3 	bl	800b278 <prvReloadTimer>
 800b2f2:	e008      	b.n	800b306 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b2fa:	f023 0301 	bic.w	r3, r3, #1
 800b2fe:	b2da      	uxtb	r2, r3
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	6a1b      	ldr	r3, [r3, #32]
 800b30a:	68f8      	ldr	r0, [r7, #12]
 800b30c:	4798      	blx	r3
    }
 800b30e:	bf00      	nop
 800b310:	3710      	adds	r7, #16
 800b312:	46bd      	mov	sp, r7
 800b314:	bd80      	pop	{r7, pc}
 800b316:	bf00      	nop
 800b318:	200004ac 	.word	0x200004ac

0800b31c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b084      	sub	sp, #16
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b324:	f107 0308 	add.w	r3, r7, #8
 800b328:	4618      	mov	r0, r3
 800b32a:	f000 f859 	bl	800b3e0 <prvGetNextExpireTime>
 800b32e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	4619      	mov	r1, r3
 800b334:	68f8      	ldr	r0, [r7, #12]
 800b336:	f000 f805 	bl	800b344 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800b33a:	f000 f8d7 	bl	800b4ec <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b33e:	bf00      	nop
 800b340:	e7f0      	b.n	800b324 <prvTimerTask+0x8>
	...

0800b344 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800b344:	b580      	push	{r7, lr}
 800b346:	b084      	sub	sp, #16
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
 800b34c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800b34e:	f7fe fed1 	bl	800a0f4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b352:	f107 0308 	add.w	r3, r7, #8
 800b356:	4618      	mov	r0, r3
 800b358:	f000 f866 	bl	800b428 <prvSampleTimeNow>
 800b35c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800b35e:	68bb      	ldr	r3, [r7, #8]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d130      	bne.n	800b3c6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d10a      	bne.n	800b380 <prvProcessTimerOrBlockTask+0x3c>
 800b36a:	687a      	ldr	r2, [r7, #4]
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	429a      	cmp	r2, r3
 800b370:	d806      	bhi.n	800b380 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800b372:	f7fe fecd 	bl	800a110 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b376:	68f9      	ldr	r1, [r7, #12]
 800b378:	6878      	ldr	r0, [r7, #4]
 800b37a:	f7ff ff9f 	bl	800b2bc <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800b37e:	e024      	b.n	800b3ca <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d008      	beq.n	800b398 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b386:	4b13      	ldr	r3, [pc, #76]	@ (800b3d4 <prvProcessTimerOrBlockTask+0x90>)
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d101      	bne.n	800b394 <prvProcessTimerOrBlockTask+0x50>
 800b390:	2301      	movs	r3, #1
 800b392:	e000      	b.n	800b396 <prvProcessTimerOrBlockTask+0x52>
 800b394:	2300      	movs	r3, #0
 800b396:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b398:	4b0f      	ldr	r3, [pc, #60]	@ (800b3d8 <prvProcessTimerOrBlockTask+0x94>)
 800b39a:	6818      	ldr	r0, [r3, #0]
 800b39c:	687a      	ldr	r2, [r7, #4]
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	1ad3      	subs	r3, r2, r3
 800b3a2:	683a      	ldr	r2, [r7, #0]
 800b3a4:	4619      	mov	r1, r3
 800b3a6:	f7fe fb3b 	bl	8009a20 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800b3aa:	f7fe feb1 	bl	800a110 <xTaskResumeAll>
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d10a      	bne.n	800b3ca <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 800b3b4:	4b09      	ldr	r3, [pc, #36]	@ (800b3dc <prvProcessTimerOrBlockTask+0x98>)
 800b3b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b3ba:	601a      	str	r2, [r3, #0]
 800b3bc:	f3bf 8f4f 	dsb	sy
 800b3c0:	f3bf 8f6f 	isb	sy
    }
 800b3c4:	e001      	b.n	800b3ca <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800b3c6:	f7fe fea3 	bl	800a110 <xTaskResumeAll>
    }
 800b3ca:	bf00      	nop
 800b3cc:	3710      	adds	r7, #16
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	bd80      	pop	{r7, pc}
 800b3d2:	bf00      	nop
 800b3d4:	200004b0 	.word	0x200004b0
 800b3d8:	200004b4 	.word	0x200004b4
 800b3dc:	e000ed04 	.word	0xe000ed04

0800b3e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800b3e0:	b480      	push	{r7}
 800b3e2:	b085      	sub	sp, #20
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b3e8:	4b0e      	ldr	r3, [pc, #56]	@ (800b424 <prvGetNextExpireTime+0x44>)
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d101      	bne.n	800b3f6 <prvGetNextExpireTime+0x16>
 800b3f2:	2201      	movs	r2, #1
 800b3f4:	e000      	b.n	800b3f8 <prvGetNextExpireTime+0x18>
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d105      	bne.n	800b410 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b404:	4b07      	ldr	r3, [pc, #28]	@ (800b424 <prvGetNextExpireTime+0x44>)
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	68db      	ldr	r3, [r3, #12]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	60fb      	str	r3, [r7, #12]
 800b40e:	e001      	b.n	800b414 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800b410:	2300      	movs	r3, #0
 800b412:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800b414:	68fb      	ldr	r3, [r7, #12]
    }
 800b416:	4618      	mov	r0, r3
 800b418:	3714      	adds	r7, #20
 800b41a:	46bd      	mov	sp, r7
 800b41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b420:	4770      	bx	lr
 800b422:	bf00      	nop
 800b424:	200004ac 	.word	0x200004ac

0800b428 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800b428:	b580      	push	{r7, lr}
 800b42a:	b084      	sub	sp, #16
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 800b430:	f7fe ff7e 	bl	800a330 <xTaskGetTickCount>
 800b434:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800b436:	4b0b      	ldr	r3, [pc, #44]	@ (800b464 <prvSampleTimeNow+0x3c>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	68fa      	ldr	r2, [r7, #12]
 800b43c:	429a      	cmp	r2, r3
 800b43e:	d205      	bcs.n	800b44c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800b440:	f000 f922 	bl	800b688 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2201      	movs	r2, #1
 800b448:	601a      	str	r2, [r3, #0]
 800b44a:	e002      	b.n	800b452 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2200      	movs	r2, #0
 800b450:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800b452:	4a04      	ldr	r2, [pc, #16]	@ (800b464 <prvSampleTimeNow+0x3c>)
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800b458:	68fb      	ldr	r3, [r7, #12]
    }
 800b45a:	4618      	mov	r0, r3
 800b45c:	3710      	adds	r7, #16
 800b45e:	46bd      	mov	sp, r7
 800b460:	bd80      	pop	{r7, pc}
 800b462:	bf00      	nop
 800b464:	200004bc 	.word	0x200004bc

0800b468 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800b468:	b580      	push	{r7, lr}
 800b46a:	b086      	sub	sp, #24
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	60f8      	str	r0, [r7, #12]
 800b470:	60b9      	str	r1, [r7, #8]
 800b472:	607a      	str	r2, [r7, #4]
 800b474:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800b476:	2300      	movs	r3, #0
 800b478:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	68ba      	ldr	r2, [r7, #8]
 800b47e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	68fa      	ldr	r2, [r7, #12]
 800b484:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800b486:	68ba      	ldr	r2, [r7, #8]
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	429a      	cmp	r2, r3
 800b48c:	d812      	bhi.n	800b4b4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 800b48e:	687a      	ldr	r2, [r7, #4]
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	1ad2      	subs	r2, r2, r3
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	699b      	ldr	r3, [r3, #24]
 800b498:	429a      	cmp	r2, r3
 800b49a:	d302      	bcc.n	800b4a2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800b49c:	2301      	movs	r3, #1
 800b49e:	617b      	str	r3, [r7, #20]
 800b4a0:	e01b      	b.n	800b4da <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b4a2:	4b10      	ldr	r3, [pc, #64]	@ (800b4e4 <prvInsertTimerInActiveList+0x7c>)
 800b4a4:	681a      	ldr	r2, [r3, #0]
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	3304      	adds	r3, #4
 800b4aa:	4619      	mov	r1, r3
 800b4ac:	4610      	mov	r0, r2
 800b4ae:	f7fd fc4a 	bl	8008d46 <vListInsert>
 800b4b2:	e012      	b.n	800b4da <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b4b4:	687a      	ldr	r2, [r7, #4]
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	429a      	cmp	r2, r3
 800b4ba:	d206      	bcs.n	800b4ca <prvInsertTimerInActiveList+0x62>
 800b4bc:	68ba      	ldr	r2, [r7, #8]
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	429a      	cmp	r2, r3
 800b4c2:	d302      	bcc.n	800b4ca <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800b4c4:	2301      	movs	r3, #1
 800b4c6:	617b      	str	r3, [r7, #20]
 800b4c8:	e007      	b.n	800b4da <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b4ca:	4b07      	ldr	r3, [pc, #28]	@ (800b4e8 <prvInsertTimerInActiveList+0x80>)
 800b4cc:	681a      	ldr	r2, [r3, #0]
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	3304      	adds	r3, #4
 800b4d2:	4619      	mov	r1, r3
 800b4d4:	4610      	mov	r0, r2
 800b4d6:	f7fd fc36 	bl	8008d46 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800b4da:	697b      	ldr	r3, [r7, #20]
    }
 800b4dc:	4618      	mov	r0, r3
 800b4de:	3718      	adds	r7, #24
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	bd80      	pop	{r7, pc}
 800b4e4:	200004b0 	.word	0x200004b0
 800b4e8:	200004ac 	.word	0x200004ac

0800b4ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b088      	sub	sp, #32
 800b4f0:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 800b4f2:	f107 0308 	add.w	r3, r7, #8
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	601a      	str	r2, [r3, #0]
 800b4fa:	605a      	str	r2, [r3, #4]
 800b4fc:	609a      	str	r2, [r3, #8]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 800b4fe:	e0ae      	b.n	800b65e <prvProcessReceivedCommands+0x172>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b500:	68bb      	ldr	r3, [r7, #8]
 800b502:	2b00      	cmp	r3, #0
 800b504:	f2c0 80ab 	blt.w	800b65e <prvProcessReceivedCommands+0x172>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b508:	693b      	ldr	r3, [r7, #16]
 800b50a:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800b50c:	69fb      	ldr	r3, [r7, #28]
 800b50e:	695b      	ldr	r3, [r3, #20]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d004      	beq.n	800b51e <prvProcessReceivedCommands+0x32>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b514:	69fb      	ldr	r3, [r7, #28]
 800b516:	3304      	adds	r3, #4
 800b518:	4618      	mov	r0, r3
 800b51a:	f7fd fc4d 	bl	8008db8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b51e:	1d3b      	adds	r3, r7, #4
 800b520:	4618      	mov	r0, r3
 800b522:	f7ff ff81 	bl	800b428 <prvSampleTimeNow>
 800b526:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 800b528:	68bb      	ldr	r3, [r7, #8]
 800b52a:	3b01      	subs	r3, #1
 800b52c:	2b08      	cmp	r3, #8
 800b52e:	f200 8093 	bhi.w	800b658 <prvProcessReceivedCommands+0x16c>
 800b532:	a201      	add	r2, pc, #4	@ (adr r2, 800b538 <prvProcessReceivedCommands+0x4c>)
 800b534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b538:	0800b55d 	.word	0x0800b55d
 800b53c:	0800b55d 	.word	0x0800b55d
 800b540:	0800b5c5 	.word	0x0800b5c5
 800b544:	0800b5d9 	.word	0x0800b5d9
 800b548:	0800b62f 	.word	0x0800b62f
 800b54c:	0800b55d 	.word	0x0800b55d
 800b550:	0800b55d 	.word	0x0800b55d
 800b554:	0800b5c5 	.word	0x0800b5c5
 800b558:	0800b5d9 	.word	0x0800b5d9
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 800b55c:	69fb      	ldr	r3, [r7, #28]
 800b55e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b562:	f043 0301 	orr.w	r3, r3, #1
 800b566:	b2da      	uxtb	r2, r3
 800b568:	69fb      	ldr	r3, [r7, #28]
 800b56a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b56e:	68fa      	ldr	r2, [r7, #12]
 800b570:	69fb      	ldr	r3, [r7, #28]
 800b572:	699b      	ldr	r3, [r3, #24]
 800b574:	18d1      	adds	r1, r2, r3
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	69ba      	ldr	r2, [r7, #24]
 800b57a:	69f8      	ldr	r0, [r7, #28]
 800b57c:	f7ff ff74 	bl	800b468 <prvInsertTimerInActiveList>
 800b580:	4603      	mov	r3, r0
 800b582:	2b00      	cmp	r3, #0
 800b584:	d06a      	beq.n	800b65c <prvProcessReceivedCommands+0x170>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 800b586:	69fb      	ldr	r3, [r7, #28]
 800b588:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b58c:	f003 0304 	and.w	r3, r3, #4
 800b590:	2b00      	cmp	r3, #0
 800b592:	d009      	beq.n	800b5a8 <prvProcessReceivedCommands+0xbc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800b594:	68fa      	ldr	r2, [r7, #12]
 800b596:	69fb      	ldr	r3, [r7, #28]
 800b598:	699b      	ldr	r3, [r3, #24]
 800b59a:	4413      	add	r3, r2
 800b59c:	69ba      	ldr	r2, [r7, #24]
 800b59e:	4619      	mov	r1, r3
 800b5a0:	69f8      	ldr	r0, [r7, #28]
 800b5a2:	f7ff fe69 	bl	800b278 <prvReloadTimer>
 800b5a6:	e008      	b.n	800b5ba <prvProcessReceivedCommands+0xce>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800b5a8:	69fb      	ldr	r3, [r7, #28]
 800b5aa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b5ae:	f023 0301 	bic.w	r3, r3, #1
 800b5b2:	b2da      	uxtb	r2, r3
 800b5b4:	69fb      	ldr	r3, [r7, #28]
 800b5b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b5ba:	69fb      	ldr	r3, [r7, #28]
 800b5bc:	6a1b      	ldr	r3, [r3, #32]
 800b5be:	69f8      	ldr	r0, [r7, #28]
 800b5c0:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800b5c2:	e04b      	b.n	800b65c <prvProcessReceivedCommands+0x170>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800b5c4:	69fb      	ldr	r3, [r7, #28]
 800b5c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b5ca:	f023 0301 	bic.w	r3, r3, #1
 800b5ce:	b2da      	uxtb	r2, r3
 800b5d0:	69fb      	ldr	r3, [r7, #28]
 800b5d2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800b5d6:	e042      	b.n	800b65e <prvProcessReceivedCommands+0x172>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 800b5d8:	69fb      	ldr	r3, [r7, #28]
 800b5da:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b5de:	f043 0301 	orr.w	r3, r3, #1
 800b5e2:	b2da      	uxtb	r2, r3
 800b5e4:	69fb      	ldr	r3, [r7, #28]
 800b5e6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b5ea:	68fa      	ldr	r2, [r7, #12]
 800b5ec:	69fb      	ldr	r3, [r7, #28]
 800b5ee:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b5f0:	69fb      	ldr	r3, [r7, #28]
 800b5f2:	699b      	ldr	r3, [r3, #24]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d110      	bne.n	800b61a <prvProcessReceivedCommands+0x12e>
    __asm volatile
 800b5f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5fc:	b672      	cpsid	i
 800b5fe:	f383 8811 	msr	BASEPRI, r3
 800b602:	f3bf 8f6f 	isb	sy
 800b606:	f3bf 8f4f 	dsb	sy
 800b60a:	b662      	cpsie	i
 800b60c:	617b      	str	r3, [r7, #20]
}
 800b60e:	bf00      	nop
 800b610:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 800b614:	481a      	ldr	r0, [pc, #104]	@ (800b680 <prvProcessReceivedCommands+0x194>)
 800b616:	f7f6 feef 	bl	80023f8 <vAssertCalled>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b61a:	69fb      	ldr	r3, [r7, #28]
 800b61c:	699a      	ldr	r2, [r3, #24]
 800b61e:	69bb      	ldr	r3, [r7, #24]
 800b620:	18d1      	adds	r1, r2, r3
 800b622:	69bb      	ldr	r3, [r7, #24]
 800b624:	69ba      	ldr	r2, [r7, #24]
 800b626:	69f8      	ldr	r0, [r7, #28]
 800b628:	f7ff ff1e 	bl	800b468 <prvInsertTimerInActiveList>
                        break;
 800b62c:	e017      	b.n	800b65e <prvProcessReceivedCommands+0x172>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b62e:	69fb      	ldr	r3, [r7, #28]
 800b630:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b634:	f003 0302 	and.w	r3, r3, #2
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d103      	bne.n	800b644 <prvProcessReceivedCommands+0x158>
                            {
                                vPortFree( pxTimer );
 800b63c:	69f8      	ldr	r0, [r7, #28]
 800b63e:	f7f7 fa09 	bl	8002a54 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800b642:	e00c      	b.n	800b65e <prvProcessReceivedCommands+0x172>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800b644:	69fb      	ldr	r3, [r7, #28]
 800b646:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b64a:	f023 0301 	bic.w	r3, r3, #1
 800b64e:	b2da      	uxtb	r2, r3
 800b650:	69fb      	ldr	r3, [r7, #28]
 800b652:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800b656:	e002      	b.n	800b65e <prvProcessReceivedCommands+0x172>

                    default:
                        /* Don't expect to get here. */
                        break;
 800b658:	bf00      	nop
 800b65a:	e000      	b.n	800b65e <prvProcessReceivedCommands+0x172>
                        break;
 800b65c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 800b65e:	4b09      	ldr	r3, [pc, #36]	@ (800b684 <prvProcessReceivedCommands+0x198>)
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	f107 0108 	add.w	r1, r7, #8
 800b666:	2200      	movs	r2, #0
 800b668:	4618      	mov	r0, r3
 800b66a:	f7fd feab 	bl	80093c4 <xQueueReceive>
 800b66e:	4603      	mov	r3, r0
 800b670:	2b00      	cmp	r3, #0
 800b672:	f47f af45 	bne.w	800b500 <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 800b676:	bf00      	nop
 800b678:	bf00      	nop
 800b67a:	3720      	adds	r7, #32
 800b67c:	46bd      	mov	sp, r7
 800b67e:	bd80      	pop	{r7, pc}
 800b680:	08010bb4 	.word	0x08010bb4
 800b684:	200004b4 	.word	0x200004b4

0800b688 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800b688:	b580      	push	{r7, lr}
 800b68a:	b082      	sub	sp, #8
 800b68c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b68e:	e009      	b.n	800b6a4 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b690:	4b0e      	ldr	r3, [pc, #56]	@ (800b6cc <prvSwitchTimerLists+0x44>)
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	68db      	ldr	r3, [r3, #12]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800b69a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800b69e:	6838      	ldr	r0, [r7, #0]
 800b6a0:	f7ff fe0c 	bl	800b2bc <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b6a4:	4b09      	ldr	r3, [pc, #36]	@ (800b6cc <prvSwitchTimerLists+0x44>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d1f0      	bne.n	800b690 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800b6ae:	4b07      	ldr	r3, [pc, #28]	@ (800b6cc <prvSwitchTimerLists+0x44>)
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800b6b4:	4b06      	ldr	r3, [pc, #24]	@ (800b6d0 <prvSwitchTimerLists+0x48>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	4a04      	ldr	r2, [pc, #16]	@ (800b6cc <prvSwitchTimerLists+0x44>)
 800b6ba:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800b6bc:	4a04      	ldr	r2, [pc, #16]	@ (800b6d0 <prvSwitchTimerLists+0x48>)
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	6013      	str	r3, [r2, #0]
    }
 800b6c2:	bf00      	nop
 800b6c4:	3708      	adds	r7, #8
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	bd80      	pop	{r7, pc}
 800b6ca:	bf00      	nop
 800b6cc:	200004ac 	.word	0x200004ac
 800b6d0:	200004b0 	.word	0x200004b0

0800b6d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800b6d8:	f000 f99a 	bl	800ba10 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800b6dc:	4b0d      	ldr	r3, [pc, #52]	@ (800b714 <prvCheckForValidListAndQueue+0x40>)
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d113      	bne.n	800b70c <prvCheckForValidListAndQueue+0x38>
            {
                vListInitialise( &xActiveTimerList1 );
 800b6e4:	480c      	ldr	r0, [pc, #48]	@ (800b718 <prvCheckForValidListAndQueue+0x44>)
 800b6e6:	f7fd fadd 	bl	8008ca4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800b6ea:	480c      	ldr	r0, [pc, #48]	@ (800b71c <prvCheckForValidListAndQueue+0x48>)
 800b6ec:	f7fd fada 	bl	8008ca4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800b6f0:	4b0b      	ldr	r3, [pc, #44]	@ (800b720 <prvCheckForValidListAndQueue+0x4c>)
 800b6f2:	4a09      	ldr	r2, [pc, #36]	@ (800b718 <prvCheckForValidListAndQueue+0x44>)
 800b6f4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800b6f6:	4b0b      	ldr	r3, [pc, #44]	@ (800b724 <prvCheckForValidListAndQueue+0x50>)
 800b6f8:	4a08      	ldr	r2, [pc, #32]	@ (800b71c <prvCheckForValidListAndQueue+0x48>)
 800b6fa:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	210c      	movs	r1, #12
 800b700:	2008      	movs	r0, #8
 800b702:	f7fd fc21 	bl	8008f48 <xQueueGenericCreate>
 800b706:	4603      	mov	r3, r0
 800b708:	4a02      	ldr	r2, [pc, #8]	@ (800b714 <prvCheckForValidListAndQueue+0x40>)
 800b70a:	6013      	str	r3, [r2, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800b70c:	f000 f9b8 	bl	800ba80 <vPortExitCritical>
    }
 800b710:	bf00      	nop
 800b712:	bd80      	pop	{r7, pc}
 800b714:	200004b4 	.word	0x200004b4
 800b718:	20000484 	.word	0x20000484
 800b71c:	20000498 	.word	0x20000498
 800b720:	200004ac 	.word	0x200004ac
 800b724:	200004b0 	.word	0x200004b0

0800b728 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800b728:	b480      	push	{r7}
 800b72a:	b085      	sub	sp, #20
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	60f8      	str	r0, [r7, #12]
 800b730:	60b9      	str	r1, [r7, #8]
 800b732:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	3b04      	subs	r3, #4
 800b738:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b740:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	3b04      	subs	r3, #4
 800b746:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800b748:	68bb      	ldr	r3, [r7, #8]
 800b74a:	f023 0201 	bic.w	r2, r3, #1
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	3b04      	subs	r3, #4
 800b756:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800b758:	4a0c      	ldr	r2, [pc, #48]	@ (800b78c <pxPortInitialiseStack+0x64>)
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	3b14      	subs	r3, #20
 800b762:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800b764:	687a      	ldr	r2, [r7, #4]
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	3b04      	subs	r3, #4
 800b76e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	f06f 0202 	mvn.w	r2, #2
 800b776:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	3b20      	subs	r3, #32
 800b77c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800b77e:	68fb      	ldr	r3, [r7, #12]
}
 800b780:	4618      	mov	r0, r3
 800b782:	3714      	adds	r7, #20
 800b784:	46bd      	mov	sp, r7
 800b786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78a:	4770      	bx	lr
 800b78c:	0800b791 	.word	0x0800b791

0800b790 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b084      	sub	sp, #16
 800b794:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800b796:	2300      	movs	r3, #0
 800b798:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800b79a:	4b15      	ldr	r3, [pc, #84]	@ (800b7f0 <prvTaskExitError+0x60>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b7a2:	d00f      	beq.n	800b7c4 <prvTaskExitError+0x34>
    __asm volatile
 800b7a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7a8:	b672      	cpsid	i
 800b7aa:	f383 8811 	msr	BASEPRI, r3
 800b7ae:	f3bf 8f6f 	isb	sy
 800b7b2:	f3bf 8f4f 	dsb	sy
 800b7b6:	b662      	cpsie	i
 800b7b8:	60fb      	str	r3, [r7, #12]
}
 800b7ba:	bf00      	nop
 800b7bc:	21ee      	movs	r1, #238	@ 0xee
 800b7be:	480d      	ldr	r0, [pc, #52]	@ (800b7f4 <prvTaskExitError+0x64>)
 800b7c0:	f7f6 fe1a 	bl	80023f8 <vAssertCalled>
    __asm volatile
 800b7c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7c8:	b672      	cpsid	i
 800b7ca:	f383 8811 	msr	BASEPRI, r3
 800b7ce:	f3bf 8f6f 	isb	sy
 800b7d2:	f3bf 8f4f 	dsb	sy
 800b7d6:	b662      	cpsie	i
 800b7d8:	60bb      	str	r3, [r7, #8]
}
 800b7da:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800b7dc:	bf00      	nop
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d0fc      	beq.n	800b7de <prvTaskExitError+0x4e>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800b7e4:	bf00      	nop
 800b7e6:	bf00      	nop
 800b7e8:	3710      	adds	r7, #16
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}
 800b7ee:	bf00      	nop
 800b7f0:	20000010 	.word	0x20000010
 800b7f4:	08010c68 	.word	0x08010c68
	...

0800b800 <SVC_Handler>:
/*-----------------------------------------------------------*/
void vPortSVCHandler( void )
{
	__asm volatile (
 800b800:	4b07      	ldr	r3, [pc, #28]	@ (800b820 <pxCurrentTCBConst2>)
 800b802:	6819      	ldr	r1, [r3, #0]
 800b804:	6808      	ldr	r0, [r1, #0]
 800b806:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b80a:	f380 8809 	msr	PSP, r0
 800b80e:	f3bf 8f6f 	isb	sy
 800b812:	f04f 0000 	mov.w	r0, #0
 800b816:	f380 8811 	msr	BASEPRI, r0
 800b81a:	4770      	bx	lr
 800b81c:	f3af 8000 	nop.w

0800b820 <pxCurrentTCBConst2>:
 800b820:	20000350 	.word	0x20000350
	        "   bx r14                          \n"
	        "                                   \n"
	        "   .align 4                        \n"
	        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
	        );
}
 800b824:	bf00      	nop
 800b826:	bf00      	nop

0800b828 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 800b828:	4808      	ldr	r0, [pc, #32]	@ (800b84c <prvPortStartFirstTask+0x24>)
 800b82a:	6800      	ldr	r0, [r0, #0]
 800b82c:	6800      	ldr	r0, [r0, #0]
 800b82e:	f380 8808 	msr	MSP, r0
 800b832:	f04f 0000 	mov.w	r0, #0
 800b836:	f380 8814 	msr	CONTROL, r0
 800b83a:	b662      	cpsie	i
 800b83c:	b661      	cpsie	f
 800b83e:	f3bf 8f4f 	dsb	sy
 800b842:	f3bf 8f6f 	isb	sy
 800b846:	df00      	svc	0
 800b848:	bf00      	nop
 800b84a:	0000      	.short	0x0000
 800b84c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 800b850:	bf00      	nop
 800b852:	bf00      	nop

0800b854 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b08a      	sub	sp, #40	@ 0x28
 800b858:	af00      	add	r7, sp, #0
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 800b85a:	4b62      	ldr	r3, [pc, #392]	@ (800b9e4 <xPortStartScheduler+0x190>)
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	627b      	str	r3, [r7, #36]	@ 0x24
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 800b860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b862:	332c      	adds	r3, #44	@ 0x2c
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	4a60      	ldr	r2, [pc, #384]	@ (800b9e8 <xPortStartScheduler+0x194>)
 800b868:	4293      	cmp	r3, r2
 800b86a:	d010      	beq.n	800b88e <xPortStartScheduler+0x3a>
    __asm volatile
 800b86c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b870:	b672      	cpsid	i
 800b872:	f383 8811 	msr	BASEPRI, r3
 800b876:	f3bf 8f6f 	isb	sy
 800b87a:	f3bf 8f4f 	dsb	sy
 800b87e:	b662      	cpsie	i
 800b880:	61bb      	str	r3, [r7, #24]
}
 800b882:	bf00      	nop
 800b884:	f240 114b 	movw	r1, #331	@ 0x14b
 800b888:	4858      	ldr	r0, [pc, #352]	@ (800b9ec <xPortStartScheduler+0x198>)
 800b88a:	f7f6 fdb5 	bl	80023f8 <vAssertCalled>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 800b88e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b890:	3338      	adds	r3, #56	@ 0x38
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	4a56      	ldr	r2, [pc, #344]	@ (800b9f0 <xPortStartScheduler+0x19c>)
 800b896:	4293      	cmp	r3, r2
 800b898:	d010      	beq.n	800b8bc <xPortStartScheduler+0x68>
    __asm volatile
 800b89a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b89e:	b672      	cpsid	i
 800b8a0:	f383 8811 	msr	BASEPRI, r3
 800b8a4:	f3bf 8f6f 	isb	sy
 800b8a8:	f3bf 8f4f 	dsb	sy
 800b8ac:	b662      	cpsie	i
 800b8ae:	61fb      	str	r3, [r7, #28]
}
 800b8b0:	bf00      	nop
 800b8b2:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 800b8b6:	484d      	ldr	r0, [pc, #308]	@ (800b9ec <xPortStartScheduler+0x198>)
 800b8b8:	f7f6 fd9e 	bl	80023f8 <vAssertCalled>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 800b8bc:	2300      	movs	r3, #0
 800b8be:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b8c0:	4b4c      	ldr	r3, [pc, #304]	@ (800b9f4 <xPortStartScheduler+0x1a0>)
 800b8c2:	623b      	str	r3, [r7, #32]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 800b8c4:	6a3b      	ldr	r3, [r7, #32]
 800b8c6:	781b      	ldrb	r3, [r3, #0]
 800b8c8:	b2db      	uxtb	r3, r3
 800b8ca:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b8cc:	6a3b      	ldr	r3, [r7, #32]
 800b8ce:	22ff      	movs	r2, #255	@ 0xff
 800b8d0:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b8d2:	6a3b      	ldr	r3, [r7, #32]
 800b8d4:	781b      	ldrb	r3, [r3, #0]
 800b8d6:	b2db      	uxtb	r3, r3
 800b8d8:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b8da:	79fb      	ldrb	r3, [r7, #7]
 800b8dc:	b2db      	uxtb	r3, r3
 800b8de:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b8e2:	b2da      	uxtb	r2, r3
 800b8e4:	4b44      	ldr	r3, [pc, #272]	@ (800b9f8 <xPortStartScheduler+0x1a4>)
 800b8e6:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 800b8e8:	4b43      	ldr	r3, [pc, #268]	@ (800b9f8 <xPortStartScheduler+0x1a4>)
 800b8ea:	781b      	ldrb	r3, [r3, #0]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d110      	bne.n	800b912 <xPortStartScheduler+0xbe>
    __asm volatile
 800b8f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8f4:	b672      	cpsid	i
 800b8f6:	f383 8811 	msr	BASEPRI, r3
 800b8fa:	f3bf 8f6f 	isb	sy
 800b8fe:	f3bf 8f4f 	dsb	sy
 800b902:	b662      	cpsie	i
 800b904:	617b      	str	r3, [r7, #20]
}
 800b906:	bf00      	nop
 800b908:	f240 116f 	movw	r1, #367	@ 0x16f
 800b90c:	4837      	ldr	r0, [pc, #220]	@ (800b9ec <xPortStartScheduler+0x198>)
 800b90e:	f7f6 fd73 	bl	80023f8 <vAssertCalled>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 800b912:	79fb      	ldrb	r3, [r7, #7]
 800b914:	b2db      	uxtb	r3, r3
 800b916:	43db      	mvns	r3, r3
 800b918:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d019      	beq.n	800b954 <xPortStartScheduler+0x100>
    __asm volatile
 800b920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b924:	b672      	cpsid	i
 800b926:	f383 8811 	msr	BASEPRI, r3
 800b92a:	f3bf 8f6f 	isb	sy
 800b92e:	f3bf 8f4f 	dsb	sy
 800b932:	b662      	cpsie	i
 800b934:	613b      	str	r3, [r7, #16]
}
 800b936:	bf00      	nop
 800b938:	f240 1173 	movw	r1, #371	@ 0x173
 800b93c:	482b      	ldr	r0, [pc, #172]	@ (800b9ec <xPortStartScheduler+0x198>)
 800b93e:	f7f6 fd5b 	bl	80023f8 <vAssertCalled>

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b942:	e007      	b.n	800b954 <xPortStartScheduler+0x100>
        {
            ulImplementedPrioBits++;
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	3301      	adds	r3, #1
 800b948:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b94a:	79fb      	ldrb	r3, [r7, #7]
 800b94c:	b2db      	uxtb	r3, r3
 800b94e:	005b      	lsls	r3, r3, #1
 800b950:	b2db      	uxtb	r3, r3
 800b952:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b954:	79fb      	ldrb	r3, [r7, #7]
 800b956:	b2db      	uxtb	r3, r3
 800b958:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b95c:	2b80      	cmp	r3, #128	@ 0x80
 800b95e:	d0f1      	beq.n	800b944 <xPortStartScheduler+0xf0>
        }

        if( ulImplementedPrioBits == 8 )
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	2b08      	cmp	r3, #8
 800b964:	d103      	bne.n	800b96e <xPortStartScheduler+0x11a>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 800b966:	4b25      	ldr	r3, [pc, #148]	@ (800b9fc <xPortStartScheduler+0x1a8>)
 800b968:	2200      	movs	r2, #0
 800b96a:	601a      	str	r2, [r3, #0]
 800b96c:	e004      	b.n	800b978 <xPortStartScheduler+0x124>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 800b96e:	68bb      	ldr	r3, [r7, #8]
 800b970:	f1c3 0307 	rsb	r3, r3, #7
 800b974:	4a21      	ldr	r2, [pc, #132]	@ (800b9fc <xPortStartScheduler+0x1a8>)
 800b976:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b978:	4b20      	ldr	r3, [pc, #128]	@ (800b9fc <xPortStartScheduler+0x1a8>)
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	021b      	lsls	r3, r3, #8
 800b97e:	4a1f      	ldr	r2, [pc, #124]	@ (800b9fc <xPortStartScheduler+0x1a8>)
 800b980:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b982:	4b1e      	ldr	r3, [pc, #120]	@ (800b9fc <xPortStartScheduler+0x1a8>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b98a:	4a1c      	ldr	r2, [pc, #112]	@ (800b9fc <xPortStartScheduler+0x1a8>)
 800b98c:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 800b98e:	7bfb      	ldrb	r3, [r7, #15]
 800b990:	b2da      	uxtb	r2, r3
 800b992:	6a3b      	ldr	r3, [r7, #32]
 800b994:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800b996:	4b1a      	ldr	r3, [pc, #104]	@ (800ba00 <xPortStartScheduler+0x1ac>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	4a19      	ldr	r2, [pc, #100]	@ (800ba00 <xPortStartScheduler+0x1ac>)
 800b99c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b9a0:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800b9a2:	4b17      	ldr	r3, [pc, #92]	@ (800ba00 <xPortStartScheduler+0x1ac>)
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	4a16      	ldr	r2, [pc, #88]	@ (800ba00 <xPortStartScheduler+0x1ac>)
 800b9a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b9ac:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 800b9ae:	4b15      	ldr	r3, [pc, #84]	@ (800ba04 <xPortStartScheduler+0x1b0>)
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800b9b4:	f000 f8ec 	bl	800bb90 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800b9b8:	4b13      	ldr	r3, [pc, #76]	@ (800ba08 <xPortStartScheduler+0x1b4>)
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800b9be:	f000 f90b 	bl	800bbd8 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b9c2:	4b12      	ldr	r3, [pc, #72]	@ (800ba0c <xPortStartScheduler+0x1b8>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	4a11      	ldr	r2, [pc, #68]	@ (800ba0c <xPortStartScheduler+0x1b8>)
 800b9c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b9cc:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800b9ce:	f7ff ff2b 	bl	800b828 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800b9d2:	f7fe fddd 	bl	800a590 <vTaskSwitchContext>
    prvTaskExitError();
 800b9d6:	f7ff fedb 	bl	800b790 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800b9da:	2300      	movs	r3, #0
}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	3728      	adds	r7, #40	@ 0x28
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd80      	pop	{r7, pc}
 800b9e4:	e000ed08 	.word	0xe000ed08
 800b9e8:	0800b801 	.word	0x0800b801
 800b9ec:	08010c68 	.word	0x08010c68
 800b9f0:	0800bae1 	.word	0x0800bae1
 800b9f4:	e000e400 	.word	0xe000e400
 800b9f8:	200004c0 	.word	0x200004c0
 800b9fc:	200004c4 	.word	0x200004c4
 800ba00:	e000ed20 	.word	0xe000ed20
 800ba04:	e000ed1c 	.word	0xe000ed1c
 800ba08:	20000010 	.word	0x20000010
 800ba0c:	e000ef34 	.word	0xe000ef34

0800ba10 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b082      	sub	sp, #8
 800ba14:	af00      	add	r7, sp, #0
    __asm volatile
 800ba16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba1a:	b672      	cpsid	i
 800ba1c:	f383 8811 	msr	BASEPRI, r3
 800ba20:	f3bf 8f6f 	isb	sy
 800ba24:	f3bf 8f4f 	dsb	sy
 800ba28:	b662      	cpsie	i
 800ba2a:	607b      	str	r3, [r7, #4]
}
 800ba2c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800ba2e:	4b11      	ldr	r3, [pc, #68]	@ (800ba74 <vPortEnterCritical+0x64>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	3301      	adds	r3, #1
 800ba34:	4a0f      	ldr	r2, [pc, #60]	@ (800ba74 <vPortEnterCritical+0x64>)
 800ba36:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800ba38:	4b0e      	ldr	r3, [pc, #56]	@ (800ba74 <vPortEnterCritical+0x64>)
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	2b01      	cmp	r3, #1
 800ba3e:	d115      	bne.n	800ba6c <vPortEnterCritical+0x5c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ba40:	4b0d      	ldr	r3, [pc, #52]	@ (800ba78 <vPortEnterCritical+0x68>)
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	b2db      	uxtb	r3, r3
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d010      	beq.n	800ba6c <vPortEnterCritical+0x5c>
    __asm volatile
 800ba4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba4e:	b672      	cpsid	i
 800ba50:	f383 8811 	msr	BASEPRI, r3
 800ba54:	f3bf 8f6f 	isb	sy
 800ba58:	f3bf 8f4f 	dsb	sy
 800ba5c:	b662      	cpsie	i
 800ba5e:	603b      	str	r3, [r7, #0]
}
 800ba60:	bf00      	nop
 800ba62:	f44f 71ee 	mov.w	r1, #476	@ 0x1dc
 800ba66:	4805      	ldr	r0, [pc, #20]	@ (800ba7c <vPortEnterCritical+0x6c>)
 800ba68:	f7f6 fcc6 	bl	80023f8 <vAssertCalled>
    }
}
 800ba6c:	bf00      	nop
 800ba6e:	3708      	adds	r7, #8
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bd80      	pop	{r7, pc}
 800ba74:	20000010 	.word	0x20000010
 800ba78:	e000ed04 	.word	0xe000ed04
 800ba7c:	08010c68 	.word	0x08010c68

0800ba80 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b082      	sub	sp, #8
 800ba84:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800ba86:	4b14      	ldr	r3, [pc, #80]	@ (800bad8 <vPortExitCritical+0x58>)
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d110      	bne.n	800bab0 <vPortExitCritical+0x30>
    __asm volatile
 800ba8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba92:	b672      	cpsid	i
 800ba94:	f383 8811 	msr	BASEPRI, r3
 800ba98:	f3bf 8f6f 	isb	sy
 800ba9c:	f3bf 8f4f 	dsb	sy
 800baa0:	b662      	cpsie	i
 800baa2:	607b      	str	r3, [r7, #4]
}
 800baa4:	bf00      	nop
 800baa6:	f240 11e3 	movw	r1, #483	@ 0x1e3
 800baaa:	480c      	ldr	r0, [pc, #48]	@ (800badc <vPortExitCritical+0x5c>)
 800baac:	f7f6 fca4 	bl	80023f8 <vAssertCalled>
    uxCriticalNesting--;
 800bab0:	4b09      	ldr	r3, [pc, #36]	@ (800bad8 <vPortExitCritical+0x58>)
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	3b01      	subs	r3, #1
 800bab6:	4a08      	ldr	r2, [pc, #32]	@ (800bad8 <vPortExitCritical+0x58>)
 800bab8:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800baba:	4b07      	ldr	r3, [pc, #28]	@ (800bad8 <vPortExitCritical+0x58>)
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d105      	bne.n	800bace <vPortExitCritical+0x4e>
 800bac2:	2300      	movs	r3, #0
 800bac4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 800bacc:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800bace:	bf00      	nop
 800bad0:	3708      	adds	r7, #8
 800bad2:	46bd      	mov	sp, r7
 800bad4:	bd80      	pop	{r7, pc}
 800bad6:	bf00      	nop
 800bad8:	20000010 	.word	0x20000010
 800badc:	08010c68 	.word	0x08010c68

0800bae0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 800bae0:	f3ef 8009 	mrs	r0, PSP
 800bae4:	f3bf 8f6f 	isb	sy
 800bae8:	4b15      	ldr	r3, [pc, #84]	@ (800bb40 <pxCurrentTCBConst>)
 800baea:	681a      	ldr	r2, [r3, #0]
 800baec:	f01e 0f10 	tst.w	lr, #16
 800baf0:	bf08      	it	eq
 800baf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800baf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bafa:	6010      	str	r0, [r2, #0]
 800bafc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bb00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800bb04:	b672      	cpsid	i
 800bb06:	f380 8811 	msr	BASEPRI, r0
 800bb0a:	f3bf 8f4f 	dsb	sy
 800bb0e:	f3bf 8f6f 	isb	sy
 800bb12:	b662      	cpsie	i
 800bb14:	f7fe fd3c 	bl	800a590 <vTaskSwitchContext>
 800bb18:	f04f 0000 	mov.w	r0, #0
 800bb1c:	f380 8811 	msr	BASEPRI, r0
 800bb20:	bc09      	pop	{r0, r3}
 800bb22:	6819      	ldr	r1, [r3, #0]
 800bb24:	6808      	ldr	r0, [r1, #0]
 800bb26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb2a:	f01e 0f10 	tst.w	lr, #16
 800bb2e:	bf08      	it	eq
 800bb30:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bb34:	f380 8809 	msr	PSP, r0
 800bb38:	f3bf 8f6f 	isb	sy
 800bb3c:	4770      	bx	lr
 800bb3e:	bf00      	nop

0800bb40 <pxCurrentTCBConst>:
 800bb40:	20000350 	.word	0x20000350
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 800bb44:	bf00      	nop
 800bb46:	bf00      	nop

0800bb48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b082      	sub	sp, #8
 800bb4c:	af00      	add	r7, sp, #0
    __asm volatile
 800bb4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb52:	b672      	cpsid	i
 800bb54:	f383 8811 	msr	BASEPRI, r3
 800bb58:	f3bf 8f6f 	isb	sy
 800bb5c:	f3bf 8f4f 	dsb	sy
 800bb60:	b662      	cpsie	i
 800bb62:	607b      	str	r3, [r7, #4]
}
 800bb64:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800bb66:	f7fe fbf3 	bl	800a350 <xTaskIncrementTick>
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d003      	beq.n	800bb78 <xPortSysTickHandler+0x30>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bb70:	4b06      	ldr	r3, [pc, #24]	@ (800bb8c <xPortSysTickHandler+0x44>)
 800bb72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb76:	601a      	str	r2, [r3, #0]
 800bb78:	2300      	movs	r3, #0
 800bb7a:	603b      	str	r3, [r7, #0]
    __asm volatile
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	f383 8811 	msr	BASEPRI, r3
}
 800bb82:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 800bb84:	bf00      	nop
 800bb86:	3708      	adds	r7, #8
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	bd80      	pop	{r7, pc}
 800bb8c:	e000ed04 	.word	0xe000ed04

0800bb90 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800bb90:	b480      	push	{r7}
 800bb92:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bb94:	4b0b      	ldr	r3, [pc, #44]	@ (800bbc4 <vPortSetupTimerInterrupt+0x34>)
 800bb96:	2200      	movs	r2, #0
 800bb98:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bb9a:	4b0b      	ldr	r3, [pc, #44]	@ (800bbc8 <vPortSetupTimerInterrupt+0x38>)
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bba0:	4b0a      	ldr	r3, [pc, #40]	@ (800bbcc <vPortSetupTimerInterrupt+0x3c>)
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	4a0a      	ldr	r2, [pc, #40]	@ (800bbd0 <vPortSetupTimerInterrupt+0x40>)
 800bba6:	fba2 2303 	umull	r2, r3, r2, r3
 800bbaa:	099b      	lsrs	r3, r3, #6
 800bbac:	4a09      	ldr	r2, [pc, #36]	@ (800bbd4 <vPortSetupTimerInterrupt+0x44>)
 800bbae:	3b01      	subs	r3, #1
 800bbb0:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bbb2:	4b04      	ldr	r3, [pc, #16]	@ (800bbc4 <vPortSetupTimerInterrupt+0x34>)
 800bbb4:	2207      	movs	r2, #7
 800bbb6:	601a      	str	r2, [r3, #0]
}
 800bbb8:	bf00      	nop
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc0:	4770      	bx	lr
 800bbc2:	bf00      	nop
 800bbc4:	e000e010 	.word	0xe000e010
 800bbc8:	e000e018 	.word	0xe000e018
 800bbcc:	20000004 	.word	0x20000004
 800bbd0:	10624dd3 	.word	0x10624dd3
 800bbd4:	e000e014 	.word	0xe000e014

0800bbd8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 800bbd8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800bbe8 <vPortEnableVFP+0x10>
 800bbdc:	6801      	ldr	r1, [r0, #0]
 800bbde:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800bbe2:	6001      	str	r1, [r0, #0]
 800bbe4:	4770      	bx	lr
 800bbe6:	0000      	.short	0x0000
 800bbe8:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 800bbec:	bf00      	nop
 800bbee:	bf00      	nop

0800bbf0 <__assert_func>:
 800bbf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bbf2:	4614      	mov	r4, r2
 800bbf4:	461a      	mov	r2, r3
 800bbf6:	4b09      	ldr	r3, [pc, #36]	@ (800bc1c <__assert_func+0x2c>)
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	4605      	mov	r5, r0
 800bbfc:	68d8      	ldr	r0, [r3, #12]
 800bbfe:	b14c      	cbz	r4, 800bc14 <__assert_func+0x24>
 800bc00:	4b07      	ldr	r3, [pc, #28]	@ (800bc20 <__assert_func+0x30>)
 800bc02:	9100      	str	r1, [sp, #0]
 800bc04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bc08:	4906      	ldr	r1, [pc, #24]	@ (800bc24 <__assert_func+0x34>)
 800bc0a:	462b      	mov	r3, r5
 800bc0c:	f001 fe9a 	bl	800d944 <fiprintf>
 800bc10:	f002 f940 	bl	800de94 <abort>
 800bc14:	4b04      	ldr	r3, [pc, #16]	@ (800bc28 <__assert_func+0x38>)
 800bc16:	461c      	mov	r4, r3
 800bc18:	e7f3      	b.n	800bc02 <__assert_func+0x12>
 800bc1a:	bf00      	nop
 800bc1c:	2000018c 	.word	0x2000018c
 800bc20:	08010f50 	.word	0x08010f50
 800bc24:	08010f5d 	.word	0x08010f5d
 800bc28:	08010f8b 	.word	0x08010f8b

0800bc2c <_calloc_r>:
 800bc2c:	b570      	push	{r4, r5, r6, lr}
 800bc2e:	fba1 5402 	umull	r5, r4, r1, r2
 800bc32:	b934      	cbnz	r4, 800bc42 <_calloc_r+0x16>
 800bc34:	4629      	mov	r1, r5
 800bc36:	f000 f83f 	bl	800bcb8 <_malloc_r>
 800bc3a:	4606      	mov	r6, r0
 800bc3c:	b928      	cbnz	r0, 800bc4a <_calloc_r+0x1e>
 800bc3e:	4630      	mov	r0, r6
 800bc40:	bd70      	pop	{r4, r5, r6, pc}
 800bc42:	220c      	movs	r2, #12
 800bc44:	6002      	str	r2, [r0, #0]
 800bc46:	2600      	movs	r6, #0
 800bc48:	e7f9      	b.n	800bc3e <_calloc_r+0x12>
 800bc4a:	462a      	mov	r2, r5
 800bc4c:	4621      	mov	r1, r4
 800bc4e:	f002 f813 	bl	800dc78 <memset>
 800bc52:	e7f4      	b.n	800bc3e <_calloc_r+0x12>

0800bc54 <malloc>:
 800bc54:	4b02      	ldr	r3, [pc, #8]	@ (800bc60 <malloc+0xc>)
 800bc56:	4601      	mov	r1, r0
 800bc58:	6818      	ldr	r0, [r3, #0]
 800bc5a:	f000 b82d 	b.w	800bcb8 <_malloc_r>
 800bc5e:	bf00      	nop
 800bc60:	2000018c 	.word	0x2000018c

0800bc64 <free>:
 800bc64:	4b02      	ldr	r3, [pc, #8]	@ (800bc70 <free+0xc>)
 800bc66:	4601      	mov	r1, r0
 800bc68:	6818      	ldr	r0, [r3, #0]
 800bc6a:	f002 bf75 	b.w	800eb58 <_free_r>
 800bc6e:	bf00      	nop
 800bc70:	2000018c 	.word	0x2000018c

0800bc74 <sbrk_aligned>:
 800bc74:	b570      	push	{r4, r5, r6, lr}
 800bc76:	4e0f      	ldr	r6, [pc, #60]	@ (800bcb4 <sbrk_aligned+0x40>)
 800bc78:	460c      	mov	r4, r1
 800bc7a:	6831      	ldr	r1, [r6, #0]
 800bc7c:	4605      	mov	r5, r0
 800bc7e:	b911      	cbnz	r1, 800bc86 <sbrk_aligned+0x12>
 800bc80:	f7f6 fe08 	bl	8002894 <_sbrk_r>
 800bc84:	6030      	str	r0, [r6, #0]
 800bc86:	4621      	mov	r1, r4
 800bc88:	4628      	mov	r0, r5
 800bc8a:	f7f6 fe03 	bl	8002894 <_sbrk_r>
 800bc8e:	1c43      	adds	r3, r0, #1
 800bc90:	d103      	bne.n	800bc9a <sbrk_aligned+0x26>
 800bc92:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800bc96:	4620      	mov	r0, r4
 800bc98:	bd70      	pop	{r4, r5, r6, pc}
 800bc9a:	1cc4      	adds	r4, r0, #3
 800bc9c:	f024 0403 	bic.w	r4, r4, #3
 800bca0:	42a0      	cmp	r0, r4
 800bca2:	d0f8      	beq.n	800bc96 <sbrk_aligned+0x22>
 800bca4:	1a21      	subs	r1, r4, r0
 800bca6:	4628      	mov	r0, r5
 800bca8:	f7f6 fdf4 	bl	8002894 <_sbrk_r>
 800bcac:	3001      	adds	r0, #1
 800bcae:	d1f2      	bne.n	800bc96 <sbrk_aligned+0x22>
 800bcb0:	e7ef      	b.n	800bc92 <sbrk_aligned+0x1e>
 800bcb2:	bf00      	nop
 800bcb4:	200004c8 	.word	0x200004c8

0800bcb8 <_malloc_r>:
 800bcb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcbc:	1ccd      	adds	r5, r1, #3
 800bcbe:	f025 0503 	bic.w	r5, r5, #3
 800bcc2:	3508      	adds	r5, #8
 800bcc4:	2d0c      	cmp	r5, #12
 800bcc6:	bf38      	it	cc
 800bcc8:	250c      	movcc	r5, #12
 800bcca:	2d00      	cmp	r5, #0
 800bccc:	4606      	mov	r6, r0
 800bcce:	db01      	blt.n	800bcd4 <_malloc_r+0x1c>
 800bcd0:	42a9      	cmp	r1, r5
 800bcd2:	d904      	bls.n	800bcde <_malloc_r+0x26>
 800bcd4:	230c      	movs	r3, #12
 800bcd6:	6033      	str	r3, [r6, #0]
 800bcd8:	2000      	movs	r0, #0
 800bcda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcde:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bdb4 <_malloc_r+0xfc>
 800bce2:	f7f6 fe5b 	bl	800299c <__malloc_lock>
 800bce6:	f8d8 3000 	ldr.w	r3, [r8]
 800bcea:	461c      	mov	r4, r3
 800bcec:	bb44      	cbnz	r4, 800bd40 <_malloc_r+0x88>
 800bcee:	4629      	mov	r1, r5
 800bcf0:	4630      	mov	r0, r6
 800bcf2:	f7ff ffbf 	bl	800bc74 <sbrk_aligned>
 800bcf6:	1c43      	adds	r3, r0, #1
 800bcf8:	4604      	mov	r4, r0
 800bcfa:	d158      	bne.n	800bdae <_malloc_r+0xf6>
 800bcfc:	f8d8 4000 	ldr.w	r4, [r8]
 800bd00:	4627      	mov	r7, r4
 800bd02:	2f00      	cmp	r7, #0
 800bd04:	d143      	bne.n	800bd8e <_malloc_r+0xd6>
 800bd06:	2c00      	cmp	r4, #0
 800bd08:	d04b      	beq.n	800bda2 <_malloc_r+0xea>
 800bd0a:	6823      	ldr	r3, [r4, #0]
 800bd0c:	4639      	mov	r1, r7
 800bd0e:	4630      	mov	r0, r6
 800bd10:	eb04 0903 	add.w	r9, r4, r3
 800bd14:	f7f6 fdbe 	bl	8002894 <_sbrk_r>
 800bd18:	4581      	cmp	r9, r0
 800bd1a:	d142      	bne.n	800bda2 <_malloc_r+0xea>
 800bd1c:	6821      	ldr	r1, [r4, #0]
 800bd1e:	1a6d      	subs	r5, r5, r1
 800bd20:	4629      	mov	r1, r5
 800bd22:	4630      	mov	r0, r6
 800bd24:	f7ff ffa6 	bl	800bc74 <sbrk_aligned>
 800bd28:	3001      	adds	r0, #1
 800bd2a:	d03a      	beq.n	800bda2 <_malloc_r+0xea>
 800bd2c:	6823      	ldr	r3, [r4, #0]
 800bd2e:	442b      	add	r3, r5
 800bd30:	6023      	str	r3, [r4, #0]
 800bd32:	f8d8 3000 	ldr.w	r3, [r8]
 800bd36:	685a      	ldr	r2, [r3, #4]
 800bd38:	bb62      	cbnz	r2, 800bd94 <_malloc_r+0xdc>
 800bd3a:	f8c8 7000 	str.w	r7, [r8]
 800bd3e:	e00f      	b.n	800bd60 <_malloc_r+0xa8>
 800bd40:	6822      	ldr	r2, [r4, #0]
 800bd42:	1b52      	subs	r2, r2, r5
 800bd44:	d420      	bmi.n	800bd88 <_malloc_r+0xd0>
 800bd46:	2a0b      	cmp	r2, #11
 800bd48:	d917      	bls.n	800bd7a <_malloc_r+0xc2>
 800bd4a:	1961      	adds	r1, r4, r5
 800bd4c:	42a3      	cmp	r3, r4
 800bd4e:	6025      	str	r5, [r4, #0]
 800bd50:	bf18      	it	ne
 800bd52:	6059      	strne	r1, [r3, #4]
 800bd54:	6863      	ldr	r3, [r4, #4]
 800bd56:	bf08      	it	eq
 800bd58:	f8c8 1000 	streq.w	r1, [r8]
 800bd5c:	5162      	str	r2, [r4, r5]
 800bd5e:	604b      	str	r3, [r1, #4]
 800bd60:	4630      	mov	r0, r6
 800bd62:	f7f6 fe55 	bl	8002a10 <__malloc_unlock>
 800bd66:	f104 000b 	add.w	r0, r4, #11
 800bd6a:	1d23      	adds	r3, r4, #4
 800bd6c:	f020 0007 	bic.w	r0, r0, #7
 800bd70:	1ac2      	subs	r2, r0, r3
 800bd72:	bf1c      	itt	ne
 800bd74:	1a1b      	subne	r3, r3, r0
 800bd76:	50a3      	strne	r3, [r4, r2]
 800bd78:	e7af      	b.n	800bcda <_malloc_r+0x22>
 800bd7a:	6862      	ldr	r2, [r4, #4]
 800bd7c:	42a3      	cmp	r3, r4
 800bd7e:	bf0c      	ite	eq
 800bd80:	f8c8 2000 	streq.w	r2, [r8]
 800bd84:	605a      	strne	r2, [r3, #4]
 800bd86:	e7eb      	b.n	800bd60 <_malloc_r+0xa8>
 800bd88:	4623      	mov	r3, r4
 800bd8a:	6864      	ldr	r4, [r4, #4]
 800bd8c:	e7ae      	b.n	800bcec <_malloc_r+0x34>
 800bd8e:	463c      	mov	r4, r7
 800bd90:	687f      	ldr	r7, [r7, #4]
 800bd92:	e7b6      	b.n	800bd02 <_malloc_r+0x4a>
 800bd94:	461a      	mov	r2, r3
 800bd96:	685b      	ldr	r3, [r3, #4]
 800bd98:	42a3      	cmp	r3, r4
 800bd9a:	d1fb      	bne.n	800bd94 <_malloc_r+0xdc>
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	6053      	str	r3, [r2, #4]
 800bda0:	e7de      	b.n	800bd60 <_malloc_r+0xa8>
 800bda2:	230c      	movs	r3, #12
 800bda4:	6033      	str	r3, [r6, #0]
 800bda6:	4630      	mov	r0, r6
 800bda8:	f7f6 fe32 	bl	8002a10 <__malloc_unlock>
 800bdac:	e794      	b.n	800bcd8 <_malloc_r+0x20>
 800bdae:	6005      	str	r5, [r0, #0]
 800bdb0:	e7d6      	b.n	800bd60 <_malloc_r+0xa8>
 800bdb2:	bf00      	nop
 800bdb4:	200004cc 	.word	0x200004cc

0800bdb8 <mallinfo>:
 800bdb8:	b510      	push	{r4, lr}
 800bdba:	4b03      	ldr	r3, [pc, #12]	@ (800bdc8 <mallinfo+0x10>)
 800bdbc:	4604      	mov	r4, r0
 800bdbe:	6819      	ldr	r1, [r3, #0]
 800bdc0:	f003 fa4e 	bl	800f260 <_mallinfo_r>
 800bdc4:	4620      	mov	r0, r4
 800bdc6:	bd10      	pop	{r4, pc}
 800bdc8:	2000018c 	.word	0x2000018c

0800bdcc <sulp>:
 800bdcc:	b570      	push	{r4, r5, r6, lr}
 800bdce:	4604      	mov	r4, r0
 800bdd0:	460d      	mov	r5, r1
 800bdd2:	ec45 4b10 	vmov	d0, r4, r5
 800bdd6:	4616      	mov	r6, r2
 800bdd8:	f003 fdf4 	bl	800f9c4 <__ulp>
 800bddc:	ec51 0b10 	vmov	r0, r1, d0
 800bde0:	b17e      	cbz	r6, 800be02 <sulp+0x36>
 800bde2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800bde6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	dd09      	ble.n	800be02 <sulp+0x36>
 800bdee:	051b      	lsls	r3, r3, #20
 800bdf0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800bdf4:	2400      	movs	r4, #0
 800bdf6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800bdfa:	4622      	mov	r2, r4
 800bdfc:	462b      	mov	r3, r5
 800bdfe:	f7f4 fc1b 	bl	8000638 <__aeabi_dmul>
 800be02:	ec41 0b10 	vmov	d0, r0, r1
 800be06:	bd70      	pop	{r4, r5, r6, pc}

0800be08 <_strtod_l>:
 800be08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be0c:	b09f      	sub	sp, #124	@ 0x7c
 800be0e:	460c      	mov	r4, r1
 800be10:	9217      	str	r2, [sp, #92]	@ 0x5c
 800be12:	2200      	movs	r2, #0
 800be14:	921a      	str	r2, [sp, #104]	@ 0x68
 800be16:	9005      	str	r0, [sp, #20]
 800be18:	f04f 0a00 	mov.w	sl, #0
 800be1c:	f04f 0b00 	mov.w	fp, #0
 800be20:	460a      	mov	r2, r1
 800be22:	9219      	str	r2, [sp, #100]	@ 0x64
 800be24:	7811      	ldrb	r1, [r2, #0]
 800be26:	292b      	cmp	r1, #43	@ 0x2b
 800be28:	d04a      	beq.n	800bec0 <_strtod_l+0xb8>
 800be2a:	d838      	bhi.n	800be9e <_strtod_l+0x96>
 800be2c:	290d      	cmp	r1, #13
 800be2e:	d832      	bhi.n	800be96 <_strtod_l+0x8e>
 800be30:	2908      	cmp	r1, #8
 800be32:	d832      	bhi.n	800be9a <_strtod_l+0x92>
 800be34:	2900      	cmp	r1, #0
 800be36:	d03b      	beq.n	800beb0 <_strtod_l+0xa8>
 800be38:	2200      	movs	r2, #0
 800be3a:	920e      	str	r2, [sp, #56]	@ 0x38
 800be3c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800be3e:	782a      	ldrb	r2, [r5, #0]
 800be40:	2a30      	cmp	r2, #48	@ 0x30
 800be42:	f040 80b2 	bne.w	800bfaa <_strtod_l+0x1a2>
 800be46:	786a      	ldrb	r2, [r5, #1]
 800be48:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800be4c:	2a58      	cmp	r2, #88	@ 0x58
 800be4e:	d16e      	bne.n	800bf2e <_strtod_l+0x126>
 800be50:	9302      	str	r3, [sp, #8]
 800be52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800be54:	9301      	str	r3, [sp, #4]
 800be56:	ab1a      	add	r3, sp, #104	@ 0x68
 800be58:	9300      	str	r3, [sp, #0]
 800be5a:	4a8f      	ldr	r2, [pc, #572]	@ (800c098 <_strtod_l+0x290>)
 800be5c:	9805      	ldr	r0, [sp, #20]
 800be5e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800be60:	a919      	add	r1, sp, #100	@ 0x64
 800be62:	f002 ff2b 	bl	800ecbc <__gethex>
 800be66:	f010 060f 	ands.w	r6, r0, #15
 800be6a:	4604      	mov	r4, r0
 800be6c:	d005      	beq.n	800be7a <_strtod_l+0x72>
 800be6e:	2e06      	cmp	r6, #6
 800be70:	d128      	bne.n	800bec4 <_strtod_l+0xbc>
 800be72:	3501      	adds	r5, #1
 800be74:	2300      	movs	r3, #0
 800be76:	9519      	str	r5, [sp, #100]	@ 0x64
 800be78:	930e      	str	r3, [sp, #56]	@ 0x38
 800be7a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	f040 858e 	bne.w	800c99e <_strtod_l+0xb96>
 800be82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800be84:	b1cb      	cbz	r3, 800beba <_strtod_l+0xb2>
 800be86:	4652      	mov	r2, sl
 800be88:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800be8c:	ec43 2b10 	vmov	d0, r2, r3
 800be90:	b01f      	add	sp, #124	@ 0x7c
 800be92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be96:	2920      	cmp	r1, #32
 800be98:	d1ce      	bne.n	800be38 <_strtod_l+0x30>
 800be9a:	3201      	adds	r2, #1
 800be9c:	e7c1      	b.n	800be22 <_strtod_l+0x1a>
 800be9e:	292d      	cmp	r1, #45	@ 0x2d
 800bea0:	d1ca      	bne.n	800be38 <_strtod_l+0x30>
 800bea2:	2101      	movs	r1, #1
 800bea4:	910e      	str	r1, [sp, #56]	@ 0x38
 800bea6:	1c51      	adds	r1, r2, #1
 800bea8:	9119      	str	r1, [sp, #100]	@ 0x64
 800beaa:	7852      	ldrb	r2, [r2, #1]
 800beac:	2a00      	cmp	r2, #0
 800beae:	d1c5      	bne.n	800be3c <_strtod_l+0x34>
 800beb0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800beb2:	9419      	str	r4, [sp, #100]	@ 0x64
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	f040 8570 	bne.w	800c99a <_strtod_l+0xb92>
 800beba:	4652      	mov	r2, sl
 800bebc:	465b      	mov	r3, fp
 800bebe:	e7e5      	b.n	800be8c <_strtod_l+0x84>
 800bec0:	2100      	movs	r1, #0
 800bec2:	e7ef      	b.n	800bea4 <_strtod_l+0x9c>
 800bec4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800bec6:	b13a      	cbz	r2, 800bed8 <_strtod_l+0xd0>
 800bec8:	2135      	movs	r1, #53	@ 0x35
 800beca:	a81c      	add	r0, sp, #112	@ 0x70
 800becc:	f003 fe74 	bl	800fbb8 <__copybits>
 800bed0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bed2:	9805      	ldr	r0, [sp, #20]
 800bed4:	f003 fa4a 	bl	800f36c <_Bfree>
 800bed8:	3e01      	subs	r6, #1
 800beda:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800bedc:	2e04      	cmp	r6, #4
 800bede:	d806      	bhi.n	800beee <_strtod_l+0xe6>
 800bee0:	e8df f006 	tbb	[pc, r6]
 800bee4:	201d0314 	.word	0x201d0314
 800bee8:	14          	.byte	0x14
 800bee9:	00          	.byte	0x00
 800beea:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800beee:	05e1      	lsls	r1, r4, #23
 800bef0:	bf48      	it	mi
 800bef2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800bef6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800befa:	0d1b      	lsrs	r3, r3, #20
 800befc:	051b      	lsls	r3, r3, #20
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d1bb      	bne.n	800be7a <_strtod_l+0x72>
 800bf02:	f001 ff7b 	bl	800ddfc <__errno>
 800bf06:	2322      	movs	r3, #34	@ 0x22
 800bf08:	6003      	str	r3, [r0, #0]
 800bf0a:	e7b6      	b.n	800be7a <_strtod_l+0x72>
 800bf0c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800bf10:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800bf14:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800bf18:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800bf1c:	e7e7      	b.n	800beee <_strtod_l+0xe6>
 800bf1e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800c0a0 <_strtod_l+0x298>
 800bf22:	e7e4      	b.n	800beee <_strtod_l+0xe6>
 800bf24:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800bf28:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800bf2c:	e7df      	b.n	800beee <_strtod_l+0xe6>
 800bf2e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bf30:	1c5a      	adds	r2, r3, #1
 800bf32:	9219      	str	r2, [sp, #100]	@ 0x64
 800bf34:	785b      	ldrb	r3, [r3, #1]
 800bf36:	2b30      	cmp	r3, #48	@ 0x30
 800bf38:	d0f9      	beq.n	800bf2e <_strtod_l+0x126>
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d09d      	beq.n	800be7a <_strtod_l+0x72>
 800bf3e:	2301      	movs	r3, #1
 800bf40:	2700      	movs	r7, #0
 800bf42:	9308      	str	r3, [sp, #32]
 800bf44:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bf46:	930c      	str	r3, [sp, #48]	@ 0x30
 800bf48:	970b      	str	r7, [sp, #44]	@ 0x2c
 800bf4a:	46b9      	mov	r9, r7
 800bf4c:	220a      	movs	r2, #10
 800bf4e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800bf50:	7805      	ldrb	r5, [r0, #0]
 800bf52:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800bf56:	b2d9      	uxtb	r1, r3
 800bf58:	2909      	cmp	r1, #9
 800bf5a:	d928      	bls.n	800bfae <_strtod_l+0x1a6>
 800bf5c:	494f      	ldr	r1, [pc, #316]	@ (800c09c <_strtod_l+0x294>)
 800bf5e:	2201      	movs	r2, #1
 800bf60:	f001 fe92 	bl	800dc88 <strncmp>
 800bf64:	2800      	cmp	r0, #0
 800bf66:	d032      	beq.n	800bfce <_strtod_l+0x1c6>
 800bf68:	2000      	movs	r0, #0
 800bf6a:	462a      	mov	r2, r5
 800bf6c:	900a      	str	r0, [sp, #40]	@ 0x28
 800bf6e:	464d      	mov	r5, r9
 800bf70:	4603      	mov	r3, r0
 800bf72:	2a65      	cmp	r2, #101	@ 0x65
 800bf74:	d001      	beq.n	800bf7a <_strtod_l+0x172>
 800bf76:	2a45      	cmp	r2, #69	@ 0x45
 800bf78:	d114      	bne.n	800bfa4 <_strtod_l+0x19c>
 800bf7a:	b91d      	cbnz	r5, 800bf84 <_strtod_l+0x17c>
 800bf7c:	9a08      	ldr	r2, [sp, #32]
 800bf7e:	4302      	orrs	r2, r0
 800bf80:	d096      	beq.n	800beb0 <_strtod_l+0xa8>
 800bf82:	2500      	movs	r5, #0
 800bf84:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800bf86:	1c62      	adds	r2, r4, #1
 800bf88:	9219      	str	r2, [sp, #100]	@ 0x64
 800bf8a:	7862      	ldrb	r2, [r4, #1]
 800bf8c:	2a2b      	cmp	r2, #43	@ 0x2b
 800bf8e:	d07a      	beq.n	800c086 <_strtod_l+0x27e>
 800bf90:	2a2d      	cmp	r2, #45	@ 0x2d
 800bf92:	d07e      	beq.n	800c092 <_strtod_l+0x28a>
 800bf94:	f04f 0c00 	mov.w	ip, #0
 800bf98:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800bf9c:	2909      	cmp	r1, #9
 800bf9e:	f240 8085 	bls.w	800c0ac <_strtod_l+0x2a4>
 800bfa2:	9419      	str	r4, [sp, #100]	@ 0x64
 800bfa4:	f04f 0800 	mov.w	r8, #0
 800bfa8:	e0a5      	b.n	800c0f6 <_strtod_l+0x2ee>
 800bfaa:	2300      	movs	r3, #0
 800bfac:	e7c8      	b.n	800bf40 <_strtod_l+0x138>
 800bfae:	f1b9 0f08 	cmp.w	r9, #8
 800bfb2:	bfd8      	it	le
 800bfb4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800bfb6:	f100 0001 	add.w	r0, r0, #1
 800bfba:	bfda      	itte	le
 800bfbc:	fb02 3301 	mlale	r3, r2, r1, r3
 800bfc0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800bfc2:	fb02 3707 	mlagt	r7, r2, r7, r3
 800bfc6:	f109 0901 	add.w	r9, r9, #1
 800bfca:	9019      	str	r0, [sp, #100]	@ 0x64
 800bfcc:	e7bf      	b.n	800bf4e <_strtod_l+0x146>
 800bfce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bfd0:	1c5a      	adds	r2, r3, #1
 800bfd2:	9219      	str	r2, [sp, #100]	@ 0x64
 800bfd4:	785a      	ldrb	r2, [r3, #1]
 800bfd6:	f1b9 0f00 	cmp.w	r9, #0
 800bfda:	d03b      	beq.n	800c054 <_strtod_l+0x24c>
 800bfdc:	900a      	str	r0, [sp, #40]	@ 0x28
 800bfde:	464d      	mov	r5, r9
 800bfe0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800bfe4:	2b09      	cmp	r3, #9
 800bfe6:	d912      	bls.n	800c00e <_strtod_l+0x206>
 800bfe8:	2301      	movs	r3, #1
 800bfea:	e7c2      	b.n	800bf72 <_strtod_l+0x16a>
 800bfec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bfee:	1c5a      	adds	r2, r3, #1
 800bff0:	9219      	str	r2, [sp, #100]	@ 0x64
 800bff2:	785a      	ldrb	r2, [r3, #1]
 800bff4:	3001      	adds	r0, #1
 800bff6:	2a30      	cmp	r2, #48	@ 0x30
 800bff8:	d0f8      	beq.n	800bfec <_strtod_l+0x1e4>
 800bffa:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800bffe:	2b08      	cmp	r3, #8
 800c000:	f200 84d2 	bhi.w	800c9a8 <_strtod_l+0xba0>
 800c004:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c006:	900a      	str	r0, [sp, #40]	@ 0x28
 800c008:	2000      	movs	r0, #0
 800c00a:	930c      	str	r3, [sp, #48]	@ 0x30
 800c00c:	4605      	mov	r5, r0
 800c00e:	3a30      	subs	r2, #48	@ 0x30
 800c010:	f100 0301 	add.w	r3, r0, #1
 800c014:	d018      	beq.n	800c048 <_strtod_l+0x240>
 800c016:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c018:	4419      	add	r1, r3
 800c01a:	910a      	str	r1, [sp, #40]	@ 0x28
 800c01c:	462e      	mov	r6, r5
 800c01e:	f04f 0e0a 	mov.w	lr, #10
 800c022:	1c71      	adds	r1, r6, #1
 800c024:	eba1 0c05 	sub.w	ip, r1, r5
 800c028:	4563      	cmp	r3, ip
 800c02a:	dc15      	bgt.n	800c058 <_strtod_l+0x250>
 800c02c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800c030:	182b      	adds	r3, r5, r0
 800c032:	2b08      	cmp	r3, #8
 800c034:	f105 0501 	add.w	r5, r5, #1
 800c038:	4405      	add	r5, r0
 800c03a:	dc1a      	bgt.n	800c072 <_strtod_l+0x26a>
 800c03c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c03e:	230a      	movs	r3, #10
 800c040:	fb03 2301 	mla	r3, r3, r1, r2
 800c044:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c046:	2300      	movs	r3, #0
 800c048:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c04a:	1c51      	adds	r1, r2, #1
 800c04c:	9119      	str	r1, [sp, #100]	@ 0x64
 800c04e:	7852      	ldrb	r2, [r2, #1]
 800c050:	4618      	mov	r0, r3
 800c052:	e7c5      	b.n	800bfe0 <_strtod_l+0x1d8>
 800c054:	4648      	mov	r0, r9
 800c056:	e7ce      	b.n	800bff6 <_strtod_l+0x1ee>
 800c058:	2e08      	cmp	r6, #8
 800c05a:	dc05      	bgt.n	800c068 <_strtod_l+0x260>
 800c05c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800c05e:	fb0e f606 	mul.w	r6, lr, r6
 800c062:	960b      	str	r6, [sp, #44]	@ 0x2c
 800c064:	460e      	mov	r6, r1
 800c066:	e7dc      	b.n	800c022 <_strtod_l+0x21a>
 800c068:	2910      	cmp	r1, #16
 800c06a:	bfd8      	it	le
 800c06c:	fb0e f707 	mulle.w	r7, lr, r7
 800c070:	e7f8      	b.n	800c064 <_strtod_l+0x25c>
 800c072:	2b0f      	cmp	r3, #15
 800c074:	bfdc      	itt	le
 800c076:	230a      	movle	r3, #10
 800c078:	fb03 2707 	mlale	r7, r3, r7, r2
 800c07c:	e7e3      	b.n	800c046 <_strtod_l+0x23e>
 800c07e:	2300      	movs	r3, #0
 800c080:	930a      	str	r3, [sp, #40]	@ 0x28
 800c082:	2301      	movs	r3, #1
 800c084:	e77a      	b.n	800bf7c <_strtod_l+0x174>
 800c086:	f04f 0c00 	mov.w	ip, #0
 800c08a:	1ca2      	adds	r2, r4, #2
 800c08c:	9219      	str	r2, [sp, #100]	@ 0x64
 800c08e:	78a2      	ldrb	r2, [r4, #2]
 800c090:	e782      	b.n	800bf98 <_strtod_l+0x190>
 800c092:	f04f 0c01 	mov.w	ip, #1
 800c096:	e7f8      	b.n	800c08a <_strtod_l+0x282>
 800c098:	0801113c 	.word	0x0801113c
 800c09c:	08010f8c 	.word	0x08010f8c
 800c0a0:	7ff00000 	.word	0x7ff00000
 800c0a4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c0a6:	1c51      	adds	r1, r2, #1
 800c0a8:	9119      	str	r1, [sp, #100]	@ 0x64
 800c0aa:	7852      	ldrb	r2, [r2, #1]
 800c0ac:	2a30      	cmp	r2, #48	@ 0x30
 800c0ae:	d0f9      	beq.n	800c0a4 <_strtod_l+0x29c>
 800c0b0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800c0b4:	2908      	cmp	r1, #8
 800c0b6:	f63f af75 	bhi.w	800bfa4 <_strtod_l+0x19c>
 800c0ba:	3a30      	subs	r2, #48	@ 0x30
 800c0bc:	9209      	str	r2, [sp, #36]	@ 0x24
 800c0be:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c0c0:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c0c2:	f04f 080a 	mov.w	r8, #10
 800c0c6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c0c8:	1c56      	adds	r6, r2, #1
 800c0ca:	9619      	str	r6, [sp, #100]	@ 0x64
 800c0cc:	7852      	ldrb	r2, [r2, #1]
 800c0ce:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800c0d2:	f1be 0f09 	cmp.w	lr, #9
 800c0d6:	d939      	bls.n	800c14c <_strtod_l+0x344>
 800c0d8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c0da:	1a76      	subs	r6, r6, r1
 800c0dc:	2e08      	cmp	r6, #8
 800c0de:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800c0e2:	dc03      	bgt.n	800c0ec <_strtod_l+0x2e4>
 800c0e4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c0e6:	4588      	cmp	r8, r1
 800c0e8:	bfa8      	it	ge
 800c0ea:	4688      	movge	r8, r1
 800c0ec:	f1bc 0f00 	cmp.w	ip, #0
 800c0f0:	d001      	beq.n	800c0f6 <_strtod_l+0x2ee>
 800c0f2:	f1c8 0800 	rsb	r8, r8, #0
 800c0f6:	2d00      	cmp	r5, #0
 800c0f8:	d14e      	bne.n	800c198 <_strtod_l+0x390>
 800c0fa:	9908      	ldr	r1, [sp, #32]
 800c0fc:	4308      	orrs	r0, r1
 800c0fe:	f47f aebc 	bne.w	800be7a <_strtod_l+0x72>
 800c102:	2b00      	cmp	r3, #0
 800c104:	f47f aed4 	bne.w	800beb0 <_strtod_l+0xa8>
 800c108:	2a69      	cmp	r2, #105	@ 0x69
 800c10a:	d028      	beq.n	800c15e <_strtod_l+0x356>
 800c10c:	dc25      	bgt.n	800c15a <_strtod_l+0x352>
 800c10e:	2a49      	cmp	r2, #73	@ 0x49
 800c110:	d025      	beq.n	800c15e <_strtod_l+0x356>
 800c112:	2a4e      	cmp	r2, #78	@ 0x4e
 800c114:	f47f aecc 	bne.w	800beb0 <_strtod_l+0xa8>
 800c118:	499a      	ldr	r1, [pc, #616]	@ (800c384 <_strtod_l+0x57c>)
 800c11a:	a819      	add	r0, sp, #100	@ 0x64
 800c11c:	f002 fff0 	bl	800f100 <__match>
 800c120:	2800      	cmp	r0, #0
 800c122:	f43f aec5 	beq.w	800beb0 <_strtod_l+0xa8>
 800c126:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c128:	781b      	ldrb	r3, [r3, #0]
 800c12a:	2b28      	cmp	r3, #40	@ 0x28
 800c12c:	d12e      	bne.n	800c18c <_strtod_l+0x384>
 800c12e:	4996      	ldr	r1, [pc, #600]	@ (800c388 <_strtod_l+0x580>)
 800c130:	aa1c      	add	r2, sp, #112	@ 0x70
 800c132:	a819      	add	r0, sp, #100	@ 0x64
 800c134:	f002 fff8 	bl	800f128 <__hexnan>
 800c138:	2805      	cmp	r0, #5
 800c13a:	d127      	bne.n	800c18c <_strtod_l+0x384>
 800c13c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c13e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800c142:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c146:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c14a:	e696      	b.n	800be7a <_strtod_l+0x72>
 800c14c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c14e:	fb08 2101 	mla	r1, r8, r1, r2
 800c152:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800c156:	9209      	str	r2, [sp, #36]	@ 0x24
 800c158:	e7b5      	b.n	800c0c6 <_strtod_l+0x2be>
 800c15a:	2a6e      	cmp	r2, #110	@ 0x6e
 800c15c:	e7da      	b.n	800c114 <_strtod_l+0x30c>
 800c15e:	498b      	ldr	r1, [pc, #556]	@ (800c38c <_strtod_l+0x584>)
 800c160:	a819      	add	r0, sp, #100	@ 0x64
 800c162:	f002 ffcd 	bl	800f100 <__match>
 800c166:	2800      	cmp	r0, #0
 800c168:	f43f aea2 	beq.w	800beb0 <_strtod_l+0xa8>
 800c16c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c16e:	4988      	ldr	r1, [pc, #544]	@ (800c390 <_strtod_l+0x588>)
 800c170:	3b01      	subs	r3, #1
 800c172:	a819      	add	r0, sp, #100	@ 0x64
 800c174:	9319      	str	r3, [sp, #100]	@ 0x64
 800c176:	f002 ffc3 	bl	800f100 <__match>
 800c17a:	b910      	cbnz	r0, 800c182 <_strtod_l+0x37a>
 800c17c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c17e:	3301      	adds	r3, #1
 800c180:	9319      	str	r3, [sp, #100]	@ 0x64
 800c182:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800c3a0 <_strtod_l+0x598>
 800c186:	f04f 0a00 	mov.w	sl, #0
 800c18a:	e676      	b.n	800be7a <_strtod_l+0x72>
 800c18c:	4881      	ldr	r0, [pc, #516]	@ (800c394 <_strtod_l+0x58c>)
 800c18e:	f001 fe73 	bl	800de78 <nan>
 800c192:	ec5b ab10 	vmov	sl, fp, d0
 800c196:	e670      	b.n	800be7a <_strtod_l+0x72>
 800c198:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c19a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800c19c:	eba8 0303 	sub.w	r3, r8, r3
 800c1a0:	f1b9 0f00 	cmp.w	r9, #0
 800c1a4:	bf08      	it	eq
 800c1a6:	46a9      	moveq	r9, r5
 800c1a8:	2d10      	cmp	r5, #16
 800c1aa:	9309      	str	r3, [sp, #36]	@ 0x24
 800c1ac:	462c      	mov	r4, r5
 800c1ae:	bfa8      	it	ge
 800c1b0:	2410      	movge	r4, #16
 800c1b2:	f7f4 f9c7 	bl	8000544 <__aeabi_ui2d>
 800c1b6:	2d09      	cmp	r5, #9
 800c1b8:	4682      	mov	sl, r0
 800c1ba:	468b      	mov	fp, r1
 800c1bc:	dc13      	bgt.n	800c1e6 <_strtod_l+0x3de>
 800c1be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	f43f ae5a 	beq.w	800be7a <_strtod_l+0x72>
 800c1c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1c8:	dd78      	ble.n	800c2bc <_strtod_l+0x4b4>
 800c1ca:	2b16      	cmp	r3, #22
 800c1cc:	dc5f      	bgt.n	800c28e <_strtod_l+0x486>
 800c1ce:	4972      	ldr	r1, [pc, #456]	@ (800c398 <_strtod_l+0x590>)
 800c1d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c1d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c1d8:	4652      	mov	r2, sl
 800c1da:	465b      	mov	r3, fp
 800c1dc:	f7f4 fa2c 	bl	8000638 <__aeabi_dmul>
 800c1e0:	4682      	mov	sl, r0
 800c1e2:	468b      	mov	fp, r1
 800c1e4:	e649      	b.n	800be7a <_strtod_l+0x72>
 800c1e6:	4b6c      	ldr	r3, [pc, #432]	@ (800c398 <_strtod_l+0x590>)
 800c1e8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c1ec:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800c1f0:	f7f4 fa22 	bl	8000638 <__aeabi_dmul>
 800c1f4:	4682      	mov	sl, r0
 800c1f6:	4638      	mov	r0, r7
 800c1f8:	468b      	mov	fp, r1
 800c1fa:	f7f4 f9a3 	bl	8000544 <__aeabi_ui2d>
 800c1fe:	4602      	mov	r2, r0
 800c200:	460b      	mov	r3, r1
 800c202:	4650      	mov	r0, sl
 800c204:	4659      	mov	r1, fp
 800c206:	f7f4 f861 	bl	80002cc <__adddf3>
 800c20a:	2d0f      	cmp	r5, #15
 800c20c:	4682      	mov	sl, r0
 800c20e:	468b      	mov	fp, r1
 800c210:	ddd5      	ble.n	800c1be <_strtod_l+0x3b6>
 800c212:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c214:	1b2c      	subs	r4, r5, r4
 800c216:	441c      	add	r4, r3
 800c218:	2c00      	cmp	r4, #0
 800c21a:	f340 8093 	ble.w	800c344 <_strtod_l+0x53c>
 800c21e:	f014 030f 	ands.w	r3, r4, #15
 800c222:	d00a      	beq.n	800c23a <_strtod_l+0x432>
 800c224:	495c      	ldr	r1, [pc, #368]	@ (800c398 <_strtod_l+0x590>)
 800c226:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c22a:	4652      	mov	r2, sl
 800c22c:	465b      	mov	r3, fp
 800c22e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c232:	f7f4 fa01 	bl	8000638 <__aeabi_dmul>
 800c236:	4682      	mov	sl, r0
 800c238:	468b      	mov	fp, r1
 800c23a:	f034 040f 	bics.w	r4, r4, #15
 800c23e:	d073      	beq.n	800c328 <_strtod_l+0x520>
 800c240:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800c244:	dd49      	ble.n	800c2da <_strtod_l+0x4d2>
 800c246:	2400      	movs	r4, #0
 800c248:	46a0      	mov	r8, r4
 800c24a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c24c:	46a1      	mov	r9, r4
 800c24e:	9a05      	ldr	r2, [sp, #20]
 800c250:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800c3a0 <_strtod_l+0x598>
 800c254:	2322      	movs	r3, #34	@ 0x22
 800c256:	6013      	str	r3, [r2, #0]
 800c258:	f04f 0a00 	mov.w	sl, #0
 800c25c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c25e:	2b00      	cmp	r3, #0
 800c260:	f43f ae0b 	beq.w	800be7a <_strtod_l+0x72>
 800c264:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c266:	9805      	ldr	r0, [sp, #20]
 800c268:	f003 f880 	bl	800f36c <_Bfree>
 800c26c:	9805      	ldr	r0, [sp, #20]
 800c26e:	4649      	mov	r1, r9
 800c270:	f003 f87c 	bl	800f36c <_Bfree>
 800c274:	9805      	ldr	r0, [sp, #20]
 800c276:	4641      	mov	r1, r8
 800c278:	f003 f878 	bl	800f36c <_Bfree>
 800c27c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c27e:	9805      	ldr	r0, [sp, #20]
 800c280:	f003 f874 	bl	800f36c <_Bfree>
 800c284:	9805      	ldr	r0, [sp, #20]
 800c286:	4621      	mov	r1, r4
 800c288:	f003 f870 	bl	800f36c <_Bfree>
 800c28c:	e5f5      	b.n	800be7a <_strtod_l+0x72>
 800c28e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c290:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800c294:	4293      	cmp	r3, r2
 800c296:	dbbc      	blt.n	800c212 <_strtod_l+0x40a>
 800c298:	4c3f      	ldr	r4, [pc, #252]	@ (800c398 <_strtod_l+0x590>)
 800c29a:	f1c5 050f 	rsb	r5, r5, #15
 800c29e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c2a2:	4652      	mov	r2, sl
 800c2a4:	465b      	mov	r3, fp
 800c2a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c2aa:	f7f4 f9c5 	bl	8000638 <__aeabi_dmul>
 800c2ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2b0:	1b5d      	subs	r5, r3, r5
 800c2b2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c2b6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c2ba:	e78f      	b.n	800c1dc <_strtod_l+0x3d4>
 800c2bc:	3316      	adds	r3, #22
 800c2be:	dba8      	blt.n	800c212 <_strtod_l+0x40a>
 800c2c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c2c2:	eba3 0808 	sub.w	r8, r3, r8
 800c2c6:	4b34      	ldr	r3, [pc, #208]	@ (800c398 <_strtod_l+0x590>)
 800c2c8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800c2cc:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c2d0:	4650      	mov	r0, sl
 800c2d2:	4659      	mov	r1, fp
 800c2d4:	f7f4 fada 	bl	800088c <__aeabi_ddiv>
 800c2d8:	e782      	b.n	800c1e0 <_strtod_l+0x3d8>
 800c2da:	2300      	movs	r3, #0
 800c2dc:	4f2f      	ldr	r7, [pc, #188]	@ (800c39c <_strtod_l+0x594>)
 800c2de:	1124      	asrs	r4, r4, #4
 800c2e0:	4650      	mov	r0, sl
 800c2e2:	4659      	mov	r1, fp
 800c2e4:	461e      	mov	r6, r3
 800c2e6:	2c01      	cmp	r4, #1
 800c2e8:	dc21      	bgt.n	800c32e <_strtod_l+0x526>
 800c2ea:	b10b      	cbz	r3, 800c2f0 <_strtod_l+0x4e8>
 800c2ec:	4682      	mov	sl, r0
 800c2ee:	468b      	mov	fp, r1
 800c2f0:	492a      	ldr	r1, [pc, #168]	@ (800c39c <_strtod_l+0x594>)
 800c2f2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c2f6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800c2fa:	4652      	mov	r2, sl
 800c2fc:	465b      	mov	r3, fp
 800c2fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c302:	f7f4 f999 	bl	8000638 <__aeabi_dmul>
 800c306:	4b26      	ldr	r3, [pc, #152]	@ (800c3a0 <_strtod_l+0x598>)
 800c308:	460a      	mov	r2, r1
 800c30a:	400b      	ands	r3, r1
 800c30c:	4925      	ldr	r1, [pc, #148]	@ (800c3a4 <_strtod_l+0x59c>)
 800c30e:	428b      	cmp	r3, r1
 800c310:	4682      	mov	sl, r0
 800c312:	d898      	bhi.n	800c246 <_strtod_l+0x43e>
 800c314:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800c318:	428b      	cmp	r3, r1
 800c31a:	bf86      	itte	hi
 800c31c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800c3a8 <_strtod_l+0x5a0>
 800c320:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800c324:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800c328:	2300      	movs	r3, #0
 800c32a:	9308      	str	r3, [sp, #32]
 800c32c:	e076      	b.n	800c41c <_strtod_l+0x614>
 800c32e:	07e2      	lsls	r2, r4, #31
 800c330:	d504      	bpl.n	800c33c <_strtod_l+0x534>
 800c332:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c336:	f7f4 f97f 	bl	8000638 <__aeabi_dmul>
 800c33a:	2301      	movs	r3, #1
 800c33c:	3601      	adds	r6, #1
 800c33e:	1064      	asrs	r4, r4, #1
 800c340:	3708      	adds	r7, #8
 800c342:	e7d0      	b.n	800c2e6 <_strtod_l+0x4de>
 800c344:	d0f0      	beq.n	800c328 <_strtod_l+0x520>
 800c346:	4264      	negs	r4, r4
 800c348:	f014 020f 	ands.w	r2, r4, #15
 800c34c:	d00a      	beq.n	800c364 <_strtod_l+0x55c>
 800c34e:	4b12      	ldr	r3, [pc, #72]	@ (800c398 <_strtod_l+0x590>)
 800c350:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c354:	4650      	mov	r0, sl
 800c356:	4659      	mov	r1, fp
 800c358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c35c:	f7f4 fa96 	bl	800088c <__aeabi_ddiv>
 800c360:	4682      	mov	sl, r0
 800c362:	468b      	mov	fp, r1
 800c364:	1124      	asrs	r4, r4, #4
 800c366:	d0df      	beq.n	800c328 <_strtod_l+0x520>
 800c368:	2c1f      	cmp	r4, #31
 800c36a:	dd1f      	ble.n	800c3ac <_strtod_l+0x5a4>
 800c36c:	2400      	movs	r4, #0
 800c36e:	46a0      	mov	r8, r4
 800c370:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c372:	46a1      	mov	r9, r4
 800c374:	9a05      	ldr	r2, [sp, #20]
 800c376:	2322      	movs	r3, #34	@ 0x22
 800c378:	f04f 0a00 	mov.w	sl, #0
 800c37c:	f04f 0b00 	mov.w	fp, #0
 800c380:	6013      	str	r3, [r2, #0]
 800c382:	e76b      	b.n	800c25c <_strtod_l+0x454>
 800c384:	08010f9b 	.word	0x08010f9b
 800c388:	08011128 	.word	0x08011128
 800c38c:	08010f93 	.word	0x08010f93
 800c390:	08010fd2 	.word	0x08010fd2
 800c394:	08010f8b 	.word	0x08010f8b
 800c398:	080111b0 	.word	0x080111b0
 800c39c:	08011188 	.word	0x08011188
 800c3a0:	7ff00000 	.word	0x7ff00000
 800c3a4:	7ca00000 	.word	0x7ca00000
 800c3a8:	7fefffff 	.word	0x7fefffff
 800c3ac:	f014 0310 	ands.w	r3, r4, #16
 800c3b0:	bf18      	it	ne
 800c3b2:	236a      	movne	r3, #106	@ 0x6a
 800c3b4:	4ea9      	ldr	r6, [pc, #676]	@ (800c65c <_strtod_l+0x854>)
 800c3b6:	9308      	str	r3, [sp, #32]
 800c3b8:	4650      	mov	r0, sl
 800c3ba:	4659      	mov	r1, fp
 800c3bc:	2300      	movs	r3, #0
 800c3be:	07e7      	lsls	r7, r4, #31
 800c3c0:	d504      	bpl.n	800c3cc <_strtod_l+0x5c4>
 800c3c2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c3c6:	f7f4 f937 	bl	8000638 <__aeabi_dmul>
 800c3ca:	2301      	movs	r3, #1
 800c3cc:	1064      	asrs	r4, r4, #1
 800c3ce:	f106 0608 	add.w	r6, r6, #8
 800c3d2:	d1f4      	bne.n	800c3be <_strtod_l+0x5b6>
 800c3d4:	b10b      	cbz	r3, 800c3da <_strtod_l+0x5d2>
 800c3d6:	4682      	mov	sl, r0
 800c3d8:	468b      	mov	fp, r1
 800c3da:	9b08      	ldr	r3, [sp, #32]
 800c3dc:	b1b3      	cbz	r3, 800c40c <_strtod_l+0x604>
 800c3de:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c3e2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	4659      	mov	r1, fp
 800c3ea:	dd0f      	ble.n	800c40c <_strtod_l+0x604>
 800c3ec:	2b1f      	cmp	r3, #31
 800c3ee:	dd56      	ble.n	800c49e <_strtod_l+0x696>
 800c3f0:	2b34      	cmp	r3, #52	@ 0x34
 800c3f2:	bfde      	ittt	le
 800c3f4:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800c3f8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800c3fc:	4093      	lslle	r3, r2
 800c3fe:	f04f 0a00 	mov.w	sl, #0
 800c402:	bfcc      	ite	gt
 800c404:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800c408:	ea03 0b01 	andle.w	fp, r3, r1
 800c40c:	2200      	movs	r2, #0
 800c40e:	2300      	movs	r3, #0
 800c410:	4650      	mov	r0, sl
 800c412:	4659      	mov	r1, fp
 800c414:	f7f4 fb78 	bl	8000b08 <__aeabi_dcmpeq>
 800c418:	2800      	cmp	r0, #0
 800c41a:	d1a7      	bne.n	800c36c <_strtod_l+0x564>
 800c41c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c41e:	9300      	str	r3, [sp, #0]
 800c420:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c422:	9805      	ldr	r0, [sp, #20]
 800c424:	462b      	mov	r3, r5
 800c426:	464a      	mov	r2, r9
 800c428:	f003 f808 	bl	800f43c <__s2b>
 800c42c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800c42e:	2800      	cmp	r0, #0
 800c430:	f43f af09 	beq.w	800c246 <_strtod_l+0x43e>
 800c434:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c436:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c438:	2a00      	cmp	r2, #0
 800c43a:	eba3 0308 	sub.w	r3, r3, r8
 800c43e:	bfa8      	it	ge
 800c440:	2300      	movge	r3, #0
 800c442:	9312      	str	r3, [sp, #72]	@ 0x48
 800c444:	2400      	movs	r4, #0
 800c446:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c44a:	9316      	str	r3, [sp, #88]	@ 0x58
 800c44c:	46a0      	mov	r8, r4
 800c44e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c450:	9805      	ldr	r0, [sp, #20]
 800c452:	6859      	ldr	r1, [r3, #4]
 800c454:	f002 ff4a 	bl	800f2ec <_Balloc>
 800c458:	4681      	mov	r9, r0
 800c45a:	2800      	cmp	r0, #0
 800c45c:	f43f aef7 	beq.w	800c24e <_strtod_l+0x446>
 800c460:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c462:	691a      	ldr	r2, [r3, #16]
 800c464:	3202      	adds	r2, #2
 800c466:	f103 010c 	add.w	r1, r3, #12
 800c46a:	0092      	lsls	r2, r2, #2
 800c46c:	300c      	adds	r0, #12
 800c46e:	f001 fcf2 	bl	800de56 <memcpy>
 800c472:	ec4b ab10 	vmov	d0, sl, fp
 800c476:	9805      	ldr	r0, [sp, #20]
 800c478:	aa1c      	add	r2, sp, #112	@ 0x70
 800c47a:	a91b      	add	r1, sp, #108	@ 0x6c
 800c47c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800c480:	f003 fb10 	bl	800faa4 <__d2b>
 800c484:	901a      	str	r0, [sp, #104]	@ 0x68
 800c486:	2800      	cmp	r0, #0
 800c488:	f43f aee1 	beq.w	800c24e <_strtod_l+0x446>
 800c48c:	9805      	ldr	r0, [sp, #20]
 800c48e:	2101      	movs	r1, #1
 800c490:	f003 f86a 	bl	800f568 <__i2b>
 800c494:	4680      	mov	r8, r0
 800c496:	b948      	cbnz	r0, 800c4ac <_strtod_l+0x6a4>
 800c498:	f04f 0800 	mov.w	r8, #0
 800c49c:	e6d7      	b.n	800c24e <_strtod_l+0x446>
 800c49e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c4a2:	fa02 f303 	lsl.w	r3, r2, r3
 800c4a6:	ea03 0a0a 	and.w	sl, r3, sl
 800c4aa:	e7af      	b.n	800c40c <_strtod_l+0x604>
 800c4ac:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800c4ae:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800c4b0:	2d00      	cmp	r5, #0
 800c4b2:	bfab      	itete	ge
 800c4b4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800c4b6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800c4b8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800c4ba:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800c4bc:	bfac      	ite	ge
 800c4be:	18ef      	addge	r7, r5, r3
 800c4c0:	1b5e      	sublt	r6, r3, r5
 800c4c2:	9b08      	ldr	r3, [sp, #32]
 800c4c4:	1aed      	subs	r5, r5, r3
 800c4c6:	4415      	add	r5, r2
 800c4c8:	4b65      	ldr	r3, [pc, #404]	@ (800c660 <_strtod_l+0x858>)
 800c4ca:	3d01      	subs	r5, #1
 800c4cc:	429d      	cmp	r5, r3
 800c4ce:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c4d2:	da50      	bge.n	800c576 <_strtod_l+0x76e>
 800c4d4:	1b5b      	subs	r3, r3, r5
 800c4d6:	2b1f      	cmp	r3, #31
 800c4d8:	eba2 0203 	sub.w	r2, r2, r3
 800c4dc:	f04f 0101 	mov.w	r1, #1
 800c4e0:	dc3d      	bgt.n	800c55e <_strtod_l+0x756>
 800c4e2:	fa01 f303 	lsl.w	r3, r1, r3
 800c4e6:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	9310      	str	r3, [sp, #64]	@ 0x40
 800c4ec:	18bd      	adds	r5, r7, r2
 800c4ee:	9b08      	ldr	r3, [sp, #32]
 800c4f0:	42af      	cmp	r7, r5
 800c4f2:	4416      	add	r6, r2
 800c4f4:	441e      	add	r6, r3
 800c4f6:	463b      	mov	r3, r7
 800c4f8:	bfa8      	it	ge
 800c4fa:	462b      	movge	r3, r5
 800c4fc:	42b3      	cmp	r3, r6
 800c4fe:	bfa8      	it	ge
 800c500:	4633      	movge	r3, r6
 800c502:	2b00      	cmp	r3, #0
 800c504:	bfc2      	ittt	gt
 800c506:	1aed      	subgt	r5, r5, r3
 800c508:	1af6      	subgt	r6, r6, r3
 800c50a:	1aff      	subgt	r7, r7, r3
 800c50c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c50e:	2b00      	cmp	r3, #0
 800c510:	dd16      	ble.n	800c540 <_strtod_l+0x738>
 800c512:	4641      	mov	r1, r8
 800c514:	9805      	ldr	r0, [sp, #20]
 800c516:	461a      	mov	r2, r3
 800c518:	f003 f8de 	bl	800f6d8 <__pow5mult>
 800c51c:	4680      	mov	r8, r0
 800c51e:	2800      	cmp	r0, #0
 800c520:	d0ba      	beq.n	800c498 <_strtod_l+0x690>
 800c522:	4601      	mov	r1, r0
 800c524:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c526:	9805      	ldr	r0, [sp, #20]
 800c528:	f003 f834 	bl	800f594 <__multiply>
 800c52c:	900a      	str	r0, [sp, #40]	@ 0x28
 800c52e:	2800      	cmp	r0, #0
 800c530:	f43f ae8d 	beq.w	800c24e <_strtod_l+0x446>
 800c534:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c536:	9805      	ldr	r0, [sp, #20]
 800c538:	f002 ff18 	bl	800f36c <_Bfree>
 800c53c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c53e:	931a      	str	r3, [sp, #104]	@ 0x68
 800c540:	2d00      	cmp	r5, #0
 800c542:	dc1d      	bgt.n	800c580 <_strtod_l+0x778>
 800c544:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c546:	2b00      	cmp	r3, #0
 800c548:	dd23      	ble.n	800c592 <_strtod_l+0x78a>
 800c54a:	4649      	mov	r1, r9
 800c54c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800c54e:	9805      	ldr	r0, [sp, #20]
 800c550:	f003 f8c2 	bl	800f6d8 <__pow5mult>
 800c554:	4681      	mov	r9, r0
 800c556:	b9e0      	cbnz	r0, 800c592 <_strtod_l+0x78a>
 800c558:	f04f 0900 	mov.w	r9, #0
 800c55c:	e677      	b.n	800c24e <_strtod_l+0x446>
 800c55e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800c562:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800c566:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800c56a:	35e2      	adds	r5, #226	@ 0xe2
 800c56c:	fa01 f305 	lsl.w	r3, r1, r5
 800c570:	9310      	str	r3, [sp, #64]	@ 0x40
 800c572:	9113      	str	r1, [sp, #76]	@ 0x4c
 800c574:	e7ba      	b.n	800c4ec <_strtod_l+0x6e4>
 800c576:	2300      	movs	r3, #0
 800c578:	9310      	str	r3, [sp, #64]	@ 0x40
 800c57a:	2301      	movs	r3, #1
 800c57c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c57e:	e7b5      	b.n	800c4ec <_strtod_l+0x6e4>
 800c580:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c582:	9805      	ldr	r0, [sp, #20]
 800c584:	462a      	mov	r2, r5
 800c586:	f003 f901 	bl	800f78c <__lshift>
 800c58a:	901a      	str	r0, [sp, #104]	@ 0x68
 800c58c:	2800      	cmp	r0, #0
 800c58e:	d1d9      	bne.n	800c544 <_strtod_l+0x73c>
 800c590:	e65d      	b.n	800c24e <_strtod_l+0x446>
 800c592:	2e00      	cmp	r6, #0
 800c594:	dd07      	ble.n	800c5a6 <_strtod_l+0x79e>
 800c596:	4649      	mov	r1, r9
 800c598:	9805      	ldr	r0, [sp, #20]
 800c59a:	4632      	mov	r2, r6
 800c59c:	f003 f8f6 	bl	800f78c <__lshift>
 800c5a0:	4681      	mov	r9, r0
 800c5a2:	2800      	cmp	r0, #0
 800c5a4:	d0d8      	beq.n	800c558 <_strtod_l+0x750>
 800c5a6:	2f00      	cmp	r7, #0
 800c5a8:	dd08      	ble.n	800c5bc <_strtod_l+0x7b4>
 800c5aa:	4641      	mov	r1, r8
 800c5ac:	9805      	ldr	r0, [sp, #20]
 800c5ae:	463a      	mov	r2, r7
 800c5b0:	f003 f8ec 	bl	800f78c <__lshift>
 800c5b4:	4680      	mov	r8, r0
 800c5b6:	2800      	cmp	r0, #0
 800c5b8:	f43f ae49 	beq.w	800c24e <_strtod_l+0x446>
 800c5bc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c5be:	9805      	ldr	r0, [sp, #20]
 800c5c0:	464a      	mov	r2, r9
 800c5c2:	f003 f96b 	bl	800f89c <__mdiff>
 800c5c6:	4604      	mov	r4, r0
 800c5c8:	2800      	cmp	r0, #0
 800c5ca:	f43f ae40 	beq.w	800c24e <_strtod_l+0x446>
 800c5ce:	68c3      	ldr	r3, [r0, #12]
 800c5d0:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	60c3      	str	r3, [r0, #12]
 800c5d6:	4641      	mov	r1, r8
 800c5d8:	f003 f944 	bl	800f864 <__mcmp>
 800c5dc:	2800      	cmp	r0, #0
 800c5de:	da45      	bge.n	800c66c <_strtod_l+0x864>
 800c5e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c5e2:	ea53 030a 	orrs.w	r3, r3, sl
 800c5e6:	d16b      	bne.n	800c6c0 <_strtod_l+0x8b8>
 800c5e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d167      	bne.n	800c6c0 <_strtod_l+0x8b8>
 800c5f0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c5f4:	0d1b      	lsrs	r3, r3, #20
 800c5f6:	051b      	lsls	r3, r3, #20
 800c5f8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c5fc:	d960      	bls.n	800c6c0 <_strtod_l+0x8b8>
 800c5fe:	6963      	ldr	r3, [r4, #20]
 800c600:	b913      	cbnz	r3, 800c608 <_strtod_l+0x800>
 800c602:	6923      	ldr	r3, [r4, #16]
 800c604:	2b01      	cmp	r3, #1
 800c606:	dd5b      	ble.n	800c6c0 <_strtod_l+0x8b8>
 800c608:	4621      	mov	r1, r4
 800c60a:	2201      	movs	r2, #1
 800c60c:	9805      	ldr	r0, [sp, #20]
 800c60e:	f003 f8bd 	bl	800f78c <__lshift>
 800c612:	4641      	mov	r1, r8
 800c614:	4604      	mov	r4, r0
 800c616:	f003 f925 	bl	800f864 <__mcmp>
 800c61a:	2800      	cmp	r0, #0
 800c61c:	dd50      	ble.n	800c6c0 <_strtod_l+0x8b8>
 800c61e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c622:	9a08      	ldr	r2, [sp, #32]
 800c624:	0d1b      	lsrs	r3, r3, #20
 800c626:	051b      	lsls	r3, r3, #20
 800c628:	2a00      	cmp	r2, #0
 800c62a:	d06a      	beq.n	800c702 <_strtod_l+0x8fa>
 800c62c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c630:	d867      	bhi.n	800c702 <_strtod_l+0x8fa>
 800c632:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800c636:	f67f ae9d 	bls.w	800c374 <_strtod_l+0x56c>
 800c63a:	4b0a      	ldr	r3, [pc, #40]	@ (800c664 <_strtod_l+0x85c>)
 800c63c:	4650      	mov	r0, sl
 800c63e:	4659      	mov	r1, fp
 800c640:	2200      	movs	r2, #0
 800c642:	f7f3 fff9 	bl	8000638 <__aeabi_dmul>
 800c646:	4b08      	ldr	r3, [pc, #32]	@ (800c668 <_strtod_l+0x860>)
 800c648:	400b      	ands	r3, r1
 800c64a:	4682      	mov	sl, r0
 800c64c:	468b      	mov	fp, r1
 800c64e:	2b00      	cmp	r3, #0
 800c650:	f47f ae08 	bne.w	800c264 <_strtod_l+0x45c>
 800c654:	9a05      	ldr	r2, [sp, #20]
 800c656:	2322      	movs	r3, #34	@ 0x22
 800c658:	6013      	str	r3, [r2, #0]
 800c65a:	e603      	b.n	800c264 <_strtod_l+0x45c>
 800c65c:	08011150 	.word	0x08011150
 800c660:	fffffc02 	.word	0xfffffc02
 800c664:	39500000 	.word	0x39500000
 800c668:	7ff00000 	.word	0x7ff00000
 800c66c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800c670:	d165      	bne.n	800c73e <_strtod_l+0x936>
 800c672:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c674:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c678:	b35a      	cbz	r2, 800c6d2 <_strtod_l+0x8ca>
 800c67a:	4a9f      	ldr	r2, [pc, #636]	@ (800c8f8 <_strtod_l+0xaf0>)
 800c67c:	4293      	cmp	r3, r2
 800c67e:	d12b      	bne.n	800c6d8 <_strtod_l+0x8d0>
 800c680:	9b08      	ldr	r3, [sp, #32]
 800c682:	4651      	mov	r1, sl
 800c684:	b303      	cbz	r3, 800c6c8 <_strtod_l+0x8c0>
 800c686:	4b9d      	ldr	r3, [pc, #628]	@ (800c8fc <_strtod_l+0xaf4>)
 800c688:	465a      	mov	r2, fp
 800c68a:	4013      	ands	r3, r2
 800c68c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800c690:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c694:	d81b      	bhi.n	800c6ce <_strtod_l+0x8c6>
 800c696:	0d1b      	lsrs	r3, r3, #20
 800c698:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c69c:	fa02 f303 	lsl.w	r3, r2, r3
 800c6a0:	4299      	cmp	r1, r3
 800c6a2:	d119      	bne.n	800c6d8 <_strtod_l+0x8d0>
 800c6a4:	4b96      	ldr	r3, [pc, #600]	@ (800c900 <_strtod_l+0xaf8>)
 800c6a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c6a8:	429a      	cmp	r2, r3
 800c6aa:	d102      	bne.n	800c6b2 <_strtod_l+0x8aa>
 800c6ac:	3101      	adds	r1, #1
 800c6ae:	f43f adce 	beq.w	800c24e <_strtod_l+0x446>
 800c6b2:	4b92      	ldr	r3, [pc, #584]	@ (800c8fc <_strtod_l+0xaf4>)
 800c6b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c6b6:	401a      	ands	r2, r3
 800c6b8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800c6bc:	f04f 0a00 	mov.w	sl, #0
 800c6c0:	9b08      	ldr	r3, [sp, #32]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d1b9      	bne.n	800c63a <_strtod_l+0x832>
 800c6c6:	e5cd      	b.n	800c264 <_strtod_l+0x45c>
 800c6c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c6cc:	e7e8      	b.n	800c6a0 <_strtod_l+0x898>
 800c6ce:	4613      	mov	r3, r2
 800c6d0:	e7e6      	b.n	800c6a0 <_strtod_l+0x898>
 800c6d2:	ea53 030a 	orrs.w	r3, r3, sl
 800c6d6:	d0a2      	beq.n	800c61e <_strtod_l+0x816>
 800c6d8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c6da:	b1db      	cbz	r3, 800c714 <_strtod_l+0x90c>
 800c6dc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c6de:	4213      	tst	r3, r2
 800c6e0:	d0ee      	beq.n	800c6c0 <_strtod_l+0x8b8>
 800c6e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c6e4:	9a08      	ldr	r2, [sp, #32]
 800c6e6:	4650      	mov	r0, sl
 800c6e8:	4659      	mov	r1, fp
 800c6ea:	b1bb      	cbz	r3, 800c71c <_strtod_l+0x914>
 800c6ec:	f7ff fb6e 	bl	800bdcc <sulp>
 800c6f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c6f4:	ec53 2b10 	vmov	r2, r3, d0
 800c6f8:	f7f3 fde8 	bl	80002cc <__adddf3>
 800c6fc:	4682      	mov	sl, r0
 800c6fe:	468b      	mov	fp, r1
 800c700:	e7de      	b.n	800c6c0 <_strtod_l+0x8b8>
 800c702:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800c706:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c70a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c70e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800c712:	e7d5      	b.n	800c6c0 <_strtod_l+0x8b8>
 800c714:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c716:	ea13 0f0a 	tst.w	r3, sl
 800c71a:	e7e1      	b.n	800c6e0 <_strtod_l+0x8d8>
 800c71c:	f7ff fb56 	bl	800bdcc <sulp>
 800c720:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c724:	ec53 2b10 	vmov	r2, r3, d0
 800c728:	f7f3 fdce 	bl	80002c8 <__aeabi_dsub>
 800c72c:	2200      	movs	r2, #0
 800c72e:	2300      	movs	r3, #0
 800c730:	4682      	mov	sl, r0
 800c732:	468b      	mov	fp, r1
 800c734:	f7f4 f9e8 	bl	8000b08 <__aeabi_dcmpeq>
 800c738:	2800      	cmp	r0, #0
 800c73a:	d0c1      	beq.n	800c6c0 <_strtod_l+0x8b8>
 800c73c:	e61a      	b.n	800c374 <_strtod_l+0x56c>
 800c73e:	4641      	mov	r1, r8
 800c740:	4620      	mov	r0, r4
 800c742:	f003 fa07 	bl	800fb54 <__ratio>
 800c746:	ec57 6b10 	vmov	r6, r7, d0
 800c74a:	2200      	movs	r2, #0
 800c74c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c750:	4630      	mov	r0, r6
 800c752:	4639      	mov	r1, r7
 800c754:	f7f4 f9ec 	bl	8000b30 <__aeabi_dcmple>
 800c758:	2800      	cmp	r0, #0
 800c75a:	d06f      	beq.n	800c83c <_strtod_l+0xa34>
 800c75c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d17a      	bne.n	800c858 <_strtod_l+0xa50>
 800c762:	f1ba 0f00 	cmp.w	sl, #0
 800c766:	d158      	bne.n	800c81a <_strtod_l+0xa12>
 800c768:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c76a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d15a      	bne.n	800c828 <_strtod_l+0xa20>
 800c772:	4b64      	ldr	r3, [pc, #400]	@ (800c904 <_strtod_l+0xafc>)
 800c774:	2200      	movs	r2, #0
 800c776:	4630      	mov	r0, r6
 800c778:	4639      	mov	r1, r7
 800c77a:	f7f4 f9cf 	bl	8000b1c <__aeabi_dcmplt>
 800c77e:	2800      	cmp	r0, #0
 800c780:	d159      	bne.n	800c836 <_strtod_l+0xa2e>
 800c782:	4630      	mov	r0, r6
 800c784:	4639      	mov	r1, r7
 800c786:	4b60      	ldr	r3, [pc, #384]	@ (800c908 <_strtod_l+0xb00>)
 800c788:	2200      	movs	r2, #0
 800c78a:	f7f3 ff55 	bl	8000638 <__aeabi_dmul>
 800c78e:	4606      	mov	r6, r0
 800c790:	460f      	mov	r7, r1
 800c792:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800c796:	9606      	str	r6, [sp, #24]
 800c798:	9307      	str	r3, [sp, #28]
 800c79a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c79e:	4d57      	ldr	r5, [pc, #348]	@ (800c8fc <_strtod_l+0xaf4>)
 800c7a0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c7a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c7a6:	401d      	ands	r5, r3
 800c7a8:	4b58      	ldr	r3, [pc, #352]	@ (800c90c <_strtod_l+0xb04>)
 800c7aa:	429d      	cmp	r5, r3
 800c7ac:	f040 80b2 	bne.w	800c914 <_strtod_l+0xb0c>
 800c7b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c7b2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800c7b6:	ec4b ab10 	vmov	d0, sl, fp
 800c7ba:	f003 f903 	bl	800f9c4 <__ulp>
 800c7be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c7c2:	ec51 0b10 	vmov	r0, r1, d0
 800c7c6:	f7f3 ff37 	bl	8000638 <__aeabi_dmul>
 800c7ca:	4652      	mov	r2, sl
 800c7cc:	465b      	mov	r3, fp
 800c7ce:	f7f3 fd7d 	bl	80002cc <__adddf3>
 800c7d2:	460b      	mov	r3, r1
 800c7d4:	4949      	ldr	r1, [pc, #292]	@ (800c8fc <_strtod_l+0xaf4>)
 800c7d6:	4a4e      	ldr	r2, [pc, #312]	@ (800c910 <_strtod_l+0xb08>)
 800c7d8:	4019      	ands	r1, r3
 800c7da:	4291      	cmp	r1, r2
 800c7dc:	4682      	mov	sl, r0
 800c7de:	d942      	bls.n	800c866 <_strtod_l+0xa5e>
 800c7e0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c7e2:	4b47      	ldr	r3, [pc, #284]	@ (800c900 <_strtod_l+0xaf8>)
 800c7e4:	429a      	cmp	r2, r3
 800c7e6:	d103      	bne.n	800c7f0 <_strtod_l+0x9e8>
 800c7e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c7ea:	3301      	adds	r3, #1
 800c7ec:	f43f ad2f 	beq.w	800c24e <_strtod_l+0x446>
 800c7f0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800c900 <_strtod_l+0xaf8>
 800c7f4:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800c7f8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c7fa:	9805      	ldr	r0, [sp, #20]
 800c7fc:	f002 fdb6 	bl	800f36c <_Bfree>
 800c800:	9805      	ldr	r0, [sp, #20]
 800c802:	4649      	mov	r1, r9
 800c804:	f002 fdb2 	bl	800f36c <_Bfree>
 800c808:	9805      	ldr	r0, [sp, #20]
 800c80a:	4641      	mov	r1, r8
 800c80c:	f002 fdae 	bl	800f36c <_Bfree>
 800c810:	9805      	ldr	r0, [sp, #20]
 800c812:	4621      	mov	r1, r4
 800c814:	f002 fdaa 	bl	800f36c <_Bfree>
 800c818:	e619      	b.n	800c44e <_strtod_l+0x646>
 800c81a:	f1ba 0f01 	cmp.w	sl, #1
 800c81e:	d103      	bne.n	800c828 <_strtod_l+0xa20>
 800c820:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c822:	2b00      	cmp	r3, #0
 800c824:	f43f ada6 	beq.w	800c374 <_strtod_l+0x56c>
 800c828:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800c8d8 <_strtod_l+0xad0>
 800c82c:	4f35      	ldr	r7, [pc, #212]	@ (800c904 <_strtod_l+0xafc>)
 800c82e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c832:	2600      	movs	r6, #0
 800c834:	e7b1      	b.n	800c79a <_strtod_l+0x992>
 800c836:	4f34      	ldr	r7, [pc, #208]	@ (800c908 <_strtod_l+0xb00>)
 800c838:	2600      	movs	r6, #0
 800c83a:	e7aa      	b.n	800c792 <_strtod_l+0x98a>
 800c83c:	4b32      	ldr	r3, [pc, #200]	@ (800c908 <_strtod_l+0xb00>)
 800c83e:	4630      	mov	r0, r6
 800c840:	4639      	mov	r1, r7
 800c842:	2200      	movs	r2, #0
 800c844:	f7f3 fef8 	bl	8000638 <__aeabi_dmul>
 800c848:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c84a:	4606      	mov	r6, r0
 800c84c:	460f      	mov	r7, r1
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d09f      	beq.n	800c792 <_strtod_l+0x98a>
 800c852:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c856:	e7a0      	b.n	800c79a <_strtod_l+0x992>
 800c858:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800c8e0 <_strtod_l+0xad8>
 800c85c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c860:	ec57 6b17 	vmov	r6, r7, d7
 800c864:	e799      	b.n	800c79a <_strtod_l+0x992>
 800c866:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800c86a:	9b08      	ldr	r3, [sp, #32]
 800c86c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800c870:	2b00      	cmp	r3, #0
 800c872:	d1c1      	bne.n	800c7f8 <_strtod_l+0x9f0>
 800c874:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c878:	0d1b      	lsrs	r3, r3, #20
 800c87a:	051b      	lsls	r3, r3, #20
 800c87c:	429d      	cmp	r5, r3
 800c87e:	d1bb      	bne.n	800c7f8 <_strtod_l+0x9f0>
 800c880:	4630      	mov	r0, r6
 800c882:	4639      	mov	r1, r7
 800c884:	f7f4 fa38 	bl	8000cf8 <__aeabi_d2lz>
 800c888:	f7f3 fea8 	bl	80005dc <__aeabi_l2d>
 800c88c:	4602      	mov	r2, r0
 800c88e:	460b      	mov	r3, r1
 800c890:	4630      	mov	r0, r6
 800c892:	4639      	mov	r1, r7
 800c894:	f7f3 fd18 	bl	80002c8 <__aeabi_dsub>
 800c898:	460b      	mov	r3, r1
 800c89a:	4602      	mov	r2, r0
 800c89c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c8a0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800c8a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c8a6:	ea46 060a 	orr.w	r6, r6, sl
 800c8aa:	431e      	orrs	r6, r3
 800c8ac:	d06f      	beq.n	800c98e <_strtod_l+0xb86>
 800c8ae:	a30e      	add	r3, pc, #56	@ (adr r3, 800c8e8 <_strtod_l+0xae0>)
 800c8b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8b4:	f7f4 f932 	bl	8000b1c <__aeabi_dcmplt>
 800c8b8:	2800      	cmp	r0, #0
 800c8ba:	f47f acd3 	bne.w	800c264 <_strtod_l+0x45c>
 800c8be:	a30c      	add	r3, pc, #48	@ (adr r3, 800c8f0 <_strtod_l+0xae8>)
 800c8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c8c8:	f7f4 f946 	bl	8000b58 <__aeabi_dcmpgt>
 800c8cc:	2800      	cmp	r0, #0
 800c8ce:	d093      	beq.n	800c7f8 <_strtod_l+0x9f0>
 800c8d0:	e4c8      	b.n	800c264 <_strtod_l+0x45c>
 800c8d2:	bf00      	nop
 800c8d4:	f3af 8000 	nop.w
 800c8d8:	00000000 	.word	0x00000000
 800c8dc:	bff00000 	.word	0xbff00000
 800c8e0:	00000000 	.word	0x00000000
 800c8e4:	3ff00000 	.word	0x3ff00000
 800c8e8:	94a03595 	.word	0x94a03595
 800c8ec:	3fdfffff 	.word	0x3fdfffff
 800c8f0:	35afe535 	.word	0x35afe535
 800c8f4:	3fe00000 	.word	0x3fe00000
 800c8f8:	000fffff 	.word	0x000fffff
 800c8fc:	7ff00000 	.word	0x7ff00000
 800c900:	7fefffff 	.word	0x7fefffff
 800c904:	3ff00000 	.word	0x3ff00000
 800c908:	3fe00000 	.word	0x3fe00000
 800c90c:	7fe00000 	.word	0x7fe00000
 800c910:	7c9fffff 	.word	0x7c9fffff
 800c914:	9b08      	ldr	r3, [sp, #32]
 800c916:	b323      	cbz	r3, 800c962 <_strtod_l+0xb5a>
 800c918:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800c91c:	d821      	bhi.n	800c962 <_strtod_l+0xb5a>
 800c91e:	a328      	add	r3, pc, #160	@ (adr r3, 800c9c0 <_strtod_l+0xbb8>)
 800c920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c924:	4630      	mov	r0, r6
 800c926:	4639      	mov	r1, r7
 800c928:	f7f4 f902 	bl	8000b30 <__aeabi_dcmple>
 800c92c:	b1a0      	cbz	r0, 800c958 <_strtod_l+0xb50>
 800c92e:	4639      	mov	r1, r7
 800c930:	4630      	mov	r0, r6
 800c932:	f7f4 f959 	bl	8000be8 <__aeabi_d2uiz>
 800c936:	2801      	cmp	r0, #1
 800c938:	bf38      	it	cc
 800c93a:	2001      	movcc	r0, #1
 800c93c:	f7f3 fe02 	bl	8000544 <__aeabi_ui2d>
 800c940:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c942:	4606      	mov	r6, r0
 800c944:	460f      	mov	r7, r1
 800c946:	b9fb      	cbnz	r3, 800c988 <_strtod_l+0xb80>
 800c948:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c94c:	9014      	str	r0, [sp, #80]	@ 0x50
 800c94e:	9315      	str	r3, [sp, #84]	@ 0x54
 800c950:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800c954:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c958:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c95a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800c95e:	1b5b      	subs	r3, r3, r5
 800c960:	9311      	str	r3, [sp, #68]	@ 0x44
 800c962:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c966:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800c96a:	f003 f82b 	bl	800f9c4 <__ulp>
 800c96e:	4650      	mov	r0, sl
 800c970:	ec53 2b10 	vmov	r2, r3, d0
 800c974:	4659      	mov	r1, fp
 800c976:	f7f3 fe5f 	bl	8000638 <__aeabi_dmul>
 800c97a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c97e:	f7f3 fca5 	bl	80002cc <__adddf3>
 800c982:	4682      	mov	sl, r0
 800c984:	468b      	mov	fp, r1
 800c986:	e770      	b.n	800c86a <_strtod_l+0xa62>
 800c988:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800c98c:	e7e0      	b.n	800c950 <_strtod_l+0xb48>
 800c98e:	a30e      	add	r3, pc, #56	@ (adr r3, 800c9c8 <_strtod_l+0xbc0>)
 800c990:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c994:	f7f4 f8c2 	bl	8000b1c <__aeabi_dcmplt>
 800c998:	e798      	b.n	800c8cc <_strtod_l+0xac4>
 800c99a:	2300      	movs	r3, #0
 800c99c:	930e      	str	r3, [sp, #56]	@ 0x38
 800c99e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800c9a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c9a2:	6013      	str	r3, [r2, #0]
 800c9a4:	f7ff ba6d 	b.w	800be82 <_strtod_l+0x7a>
 800c9a8:	2a65      	cmp	r2, #101	@ 0x65
 800c9aa:	f43f ab68 	beq.w	800c07e <_strtod_l+0x276>
 800c9ae:	2a45      	cmp	r2, #69	@ 0x45
 800c9b0:	f43f ab65 	beq.w	800c07e <_strtod_l+0x276>
 800c9b4:	2301      	movs	r3, #1
 800c9b6:	f7ff bba0 	b.w	800c0fa <_strtod_l+0x2f2>
 800c9ba:	bf00      	nop
 800c9bc:	f3af 8000 	nop.w
 800c9c0:	ffc00000 	.word	0xffc00000
 800c9c4:	41dfffff 	.word	0x41dfffff
 800c9c8:	94a03595 	.word	0x94a03595
 800c9cc:	3fcfffff 	.word	0x3fcfffff

0800c9d0 <_strtod_r>:
 800c9d0:	4b01      	ldr	r3, [pc, #4]	@ (800c9d8 <_strtod_r+0x8>)
 800c9d2:	f7ff ba19 	b.w	800be08 <_strtod_l>
 800c9d6:	bf00      	nop
 800c9d8:	20000020 	.word	0x20000020

0800c9dc <__cvt>:
 800c9dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c9e0:	ec57 6b10 	vmov	r6, r7, d0
 800c9e4:	2f00      	cmp	r7, #0
 800c9e6:	460c      	mov	r4, r1
 800c9e8:	4619      	mov	r1, r3
 800c9ea:	463b      	mov	r3, r7
 800c9ec:	bfbb      	ittet	lt
 800c9ee:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c9f2:	461f      	movlt	r7, r3
 800c9f4:	2300      	movge	r3, #0
 800c9f6:	232d      	movlt	r3, #45	@ 0x2d
 800c9f8:	700b      	strb	r3, [r1, #0]
 800c9fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c9fc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ca00:	4691      	mov	r9, r2
 800ca02:	f023 0820 	bic.w	r8, r3, #32
 800ca06:	bfbc      	itt	lt
 800ca08:	4632      	movlt	r2, r6
 800ca0a:	4616      	movlt	r6, r2
 800ca0c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ca10:	d005      	beq.n	800ca1e <__cvt+0x42>
 800ca12:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ca16:	d100      	bne.n	800ca1a <__cvt+0x3e>
 800ca18:	3401      	adds	r4, #1
 800ca1a:	2102      	movs	r1, #2
 800ca1c:	e000      	b.n	800ca20 <__cvt+0x44>
 800ca1e:	2103      	movs	r1, #3
 800ca20:	ab03      	add	r3, sp, #12
 800ca22:	9301      	str	r3, [sp, #4]
 800ca24:	ab02      	add	r3, sp, #8
 800ca26:	9300      	str	r3, [sp, #0]
 800ca28:	ec47 6b10 	vmov	d0, r6, r7
 800ca2c:	4653      	mov	r3, sl
 800ca2e:	4622      	mov	r2, r4
 800ca30:	f001 fac2 	bl	800dfb8 <_dtoa_r>
 800ca34:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ca38:	4605      	mov	r5, r0
 800ca3a:	d119      	bne.n	800ca70 <__cvt+0x94>
 800ca3c:	f019 0f01 	tst.w	r9, #1
 800ca40:	d00e      	beq.n	800ca60 <__cvt+0x84>
 800ca42:	eb00 0904 	add.w	r9, r0, r4
 800ca46:	2200      	movs	r2, #0
 800ca48:	2300      	movs	r3, #0
 800ca4a:	4630      	mov	r0, r6
 800ca4c:	4639      	mov	r1, r7
 800ca4e:	f7f4 f85b 	bl	8000b08 <__aeabi_dcmpeq>
 800ca52:	b108      	cbz	r0, 800ca58 <__cvt+0x7c>
 800ca54:	f8cd 900c 	str.w	r9, [sp, #12]
 800ca58:	2230      	movs	r2, #48	@ 0x30
 800ca5a:	9b03      	ldr	r3, [sp, #12]
 800ca5c:	454b      	cmp	r3, r9
 800ca5e:	d31e      	bcc.n	800ca9e <__cvt+0xc2>
 800ca60:	9b03      	ldr	r3, [sp, #12]
 800ca62:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ca64:	1b5b      	subs	r3, r3, r5
 800ca66:	4628      	mov	r0, r5
 800ca68:	6013      	str	r3, [r2, #0]
 800ca6a:	b004      	add	sp, #16
 800ca6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca70:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ca74:	eb00 0904 	add.w	r9, r0, r4
 800ca78:	d1e5      	bne.n	800ca46 <__cvt+0x6a>
 800ca7a:	7803      	ldrb	r3, [r0, #0]
 800ca7c:	2b30      	cmp	r3, #48	@ 0x30
 800ca7e:	d10a      	bne.n	800ca96 <__cvt+0xba>
 800ca80:	2200      	movs	r2, #0
 800ca82:	2300      	movs	r3, #0
 800ca84:	4630      	mov	r0, r6
 800ca86:	4639      	mov	r1, r7
 800ca88:	f7f4 f83e 	bl	8000b08 <__aeabi_dcmpeq>
 800ca8c:	b918      	cbnz	r0, 800ca96 <__cvt+0xba>
 800ca8e:	f1c4 0401 	rsb	r4, r4, #1
 800ca92:	f8ca 4000 	str.w	r4, [sl]
 800ca96:	f8da 3000 	ldr.w	r3, [sl]
 800ca9a:	4499      	add	r9, r3
 800ca9c:	e7d3      	b.n	800ca46 <__cvt+0x6a>
 800ca9e:	1c59      	adds	r1, r3, #1
 800caa0:	9103      	str	r1, [sp, #12]
 800caa2:	701a      	strb	r2, [r3, #0]
 800caa4:	e7d9      	b.n	800ca5a <__cvt+0x7e>

0800caa6 <__exponent>:
 800caa6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800caa8:	2900      	cmp	r1, #0
 800caaa:	bfba      	itte	lt
 800caac:	4249      	neglt	r1, r1
 800caae:	232d      	movlt	r3, #45	@ 0x2d
 800cab0:	232b      	movge	r3, #43	@ 0x2b
 800cab2:	2909      	cmp	r1, #9
 800cab4:	7002      	strb	r2, [r0, #0]
 800cab6:	7043      	strb	r3, [r0, #1]
 800cab8:	dd29      	ble.n	800cb0e <__exponent+0x68>
 800caba:	f10d 0307 	add.w	r3, sp, #7
 800cabe:	461d      	mov	r5, r3
 800cac0:	270a      	movs	r7, #10
 800cac2:	461a      	mov	r2, r3
 800cac4:	fbb1 f6f7 	udiv	r6, r1, r7
 800cac8:	fb07 1416 	mls	r4, r7, r6, r1
 800cacc:	3430      	adds	r4, #48	@ 0x30
 800cace:	f802 4c01 	strb.w	r4, [r2, #-1]
 800cad2:	460c      	mov	r4, r1
 800cad4:	2c63      	cmp	r4, #99	@ 0x63
 800cad6:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800cada:	4631      	mov	r1, r6
 800cadc:	dcf1      	bgt.n	800cac2 <__exponent+0x1c>
 800cade:	3130      	adds	r1, #48	@ 0x30
 800cae0:	1e94      	subs	r4, r2, #2
 800cae2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800cae6:	1c41      	adds	r1, r0, #1
 800cae8:	4623      	mov	r3, r4
 800caea:	42ab      	cmp	r3, r5
 800caec:	d30a      	bcc.n	800cb04 <__exponent+0x5e>
 800caee:	f10d 0309 	add.w	r3, sp, #9
 800caf2:	1a9b      	subs	r3, r3, r2
 800caf4:	42ac      	cmp	r4, r5
 800caf6:	bf88      	it	hi
 800caf8:	2300      	movhi	r3, #0
 800cafa:	3302      	adds	r3, #2
 800cafc:	4403      	add	r3, r0
 800cafe:	1a18      	subs	r0, r3, r0
 800cb00:	b003      	add	sp, #12
 800cb02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb04:	f813 6b01 	ldrb.w	r6, [r3], #1
 800cb08:	f801 6f01 	strb.w	r6, [r1, #1]!
 800cb0c:	e7ed      	b.n	800caea <__exponent+0x44>
 800cb0e:	2330      	movs	r3, #48	@ 0x30
 800cb10:	3130      	adds	r1, #48	@ 0x30
 800cb12:	7083      	strb	r3, [r0, #2]
 800cb14:	70c1      	strb	r1, [r0, #3]
 800cb16:	1d03      	adds	r3, r0, #4
 800cb18:	e7f1      	b.n	800cafe <__exponent+0x58>
	...

0800cb1c <_printf_float>:
 800cb1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb20:	b08d      	sub	sp, #52	@ 0x34
 800cb22:	460c      	mov	r4, r1
 800cb24:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800cb28:	4616      	mov	r6, r2
 800cb2a:	461f      	mov	r7, r3
 800cb2c:	4605      	mov	r5, r0
 800cb2e:	f001 f8bd 	bl	800dcac <_localeconv_r>
 800cb32:	6803      	ldr	r3, [r0, #0]
 800cb34:	9304      	str	r3, [sp, #16]
 800cb36:	4618      	mov	r0, r3
 800cb38:	f7f3 fbba 	bl	80002b0 <strlen>
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	930a      	str	r3, [sp, #40]	@ 0x28
 800cb40:	f8d8 3000 	ldr.w	r3, [r8]
 800cb44:	9005      	str	r0, [sp, #20]
 800cb46:	3307      	adds	r3, #7
 800cb48:	f023 0307 	bic.w	r3, r3, #7
 800cb4c:	f103 0208 	add.w	r2, r3, #8
 800cb50:	f894 a018 	ldrb.w	sl, [r4, #24]
 800cb54:	f8d4 b000 	ldr.w	fp, [r4]
 800cb58:	f8c8 2000 	str.w	r2, [r8]
 800cb5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cb60:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800cb64:	9307      	str	r3, [sp, #28]
 800cb66:	f8cd 8018 	str.w	r8, [sp, #24]
 800cb6a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800cb6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cb72:	4b9c      	ldr	r3, [pc, #624]	@ (800cde4 <_printf_float+0x2c8>)
 800cb74:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cb78:	f7f3 fff8 	bl	8000b6c <__aeabi_dcmpun>
 800cb7c:	bb70      	cbnz	r0, 800cbdc <_printf_float+0xc0>
 800cb7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cb82:	4b98      	ldr	r3, [pc, #608]	@ (800cde4 <_printf_float+0x2c8>)
 800cb84:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cb88:	f7f3 ffd2 	bl	8000b30 <__aeabi_dcmple>
 800cb8c:	bb30      	cbnz	r0, 800cbdc <_printf_float+0xc0>
 800cb8e:	2200      	movs	r2, #0
 800cb90:	2300      	movs	r3, #0
 800cb92:	4640      	mov	r0, r8
 800cb94:	4649      	mov	r1, r9
 800cb96:	f7f3 ffc1 	bl	8000b1c <__aeabi_dcmplt>
 800cb9a:	b110      	cbz	r0, 800cba2 <_printf_float+0x86>
 800cb9c:	232d      	movs	r3, #45	@ 0x2d
 800cb9e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cba2:	4a91      	ldr	r2, [pc, #580]	@ (800cde8 <_printf_float+0x2cc>)
 800cba4:	4b91      	ldr	r3, [pc, #580]	@ (800cdec <_printf_float+0x2d0>)
 800cba6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800cbaa:	bf8c      	ite	hi
 800cbac:	4690      	movhi	r8, r2
 800cbae:	4698      	movls	r8, r3
 800cbb0:	2303      	movs	r3, #3
 800cbb2:	6123      	str	r3, [r4, #16]
 800cbb4:	f02b 0304 	bic.w	r3, fp, #4
 800cbb8:	6023      	str	r3, [r4, #0]
 800cbba:	f04f 0900 	mov.w	r9, #0
 800cbbe:	9700      	str	r7, [sp, #0]
 800cbc0:	4633      	mov	r3, r6
 800cbc2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800cbc4:	4621      	mov	r1, r4
 800cbc6:	4628      	mov	r0, r5
 800cbc8:	f000 f9d2 	bl	800cf70 <_printf_common>
 800cbcc:	3001      	adds	r0, #1
 800cbce:	f040 808d 	bne.w	800ccec <_printf_float+0x1d0>
 800cbd2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cbd6:	b00d      	add	sp, #52	@ 0x34
 800cbd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbdc:	4642      	mov	r2, r8
 800cbde:	464b      	mov	r3, r9
 800cbe0:	4640      	mov	r0, r8
 800cbe2:	4649      	mov	r1, r9
 800cbe4:	f7f3 ffc2 	bl	8000b6c <__aeabi_dcmpun>
 800cbe8:	b140      	cbz	r0, 800cbfc <_printf_float+0xe0>
 800cbea:	464b      	mov	r3, r9
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	bfbc      	itt	lt
 800cbf0:	232d      	movlt	r3, #45	@ 0x2d
 800cbf2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800cbf6:	4a7e      	ldr	r2, [pc, #504]	@ (800cdf0 <_printf_float+0x2d4>)
 800cbf8:	4b7e      	ldr	r3, [pc, #504]	@ (800cdf4 <_printf_float+0x2d8>)
 800cbfa:	e7d4      	b.n	800cba6 <_printf_float+0x8a>
 800cbfc:	6863      	ldr	r3, [r4, #4]
 800cbfe:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800cc02:	9206      	str	r2, [sp, #24]
 800cc04:	1c5a      	adds	r2, r3, #1
 800cc06:	d13b      	bne.n	800cc80 <_printf_float+0x164>
 800cc08:	2306      	movs	r3, #6
 800cc0a:	6063      	str	r3, [r4, #4]
 800cc0c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800cc10:	2300      	movs	r3, #0
 800cc12:	6022      	str	r2, [r4, #0]
 800cc14:	9303      	str	r3, [sp, #12]
 800cc16:	ab0a      	add	r3, sp, #40	@ 0x28
 800cc18:	e9cd a301 	strd	sl, r3, [sp, #4]
 800cc1c:	ab09      	add	r3, sp, #36	@ 0x24
 800cc1e:	9300      	str	r3, [sp, #0]
 800cc20:	6861      	ldr	r1, [r4, #4]
 800cc22:	ec49 8b10 	vmov	d0, r8, r9
 800cc26:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800cc2a:	4628      	mov	r0, r5
 800cc2c:	f7ff fed6 	bl	800c9dc <__cvt>
 800cc30:	9b06      	ldr	r3, [sp, #24]
 800cc32:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cc34:	2b47      	cmp	r3, #71	@ 0x47
 800cc36:	4680      	mov	r8, r0
 800cc38:	d129      	bne.n	800cc8e <_printf_float+0x172>
 800cc3a:	1cc8      	adds	r0, r1, #3
 800cc3c:	db02      	blt.n	800cc44 <_printf_float+0x128>
 800cc3e:	6863      	ldr	r3, [r4, #4]
 800cc40:	4299      	cmp	r1, r3
 800cc42:	dd41      	ble.n	800ccc8 <_printf_float+0x1ac>
 800cc44:	f1aa 0a02 	sub.w	sl, sl, #2
 800cc48:	fa5f fa8a 	uxtb.w	sl, sl
 800cc4c:	3901      	subs	r1, #1
 800cc4e:	4652      	mov	r2, sl
 800cc50:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800cc54:	9109      	str	r1, [sp, #36]	@ 0x24
 800cc56:	f7ff ff26 	bl	800caa6 <__exponent>
 800cc5a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cc5c:	1813      	adds	r3, r2, r0
 800cc5e:	2a01      	cmp	r2, #1
 800cc60:	4681      	mov	r9, r0
 800cc62:	6123      	str	r3, [r4, #16]
 800cc64:	dc02      	bgt.n	800cc6c <_printf_float+0x150>
 800cc66:	6822      	ldr	r2, [r4, #0]
 800cc68:	07d2      	lsls	r2, r2, #31
 800cc6a:	d501      	bpl.n	800cc70 <_printf_float+0x154>
 800cc6c:	3301      	adds	r3, #1
 800cc6e:	6123      	str	r3, [r4, #16]
 800cc70:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d0a2      	beq.n	800cbbe <_printf_float+0xa2>
 800cc78:	232d      	movs	r3, #45	@ 0x2d
 800cc7a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cc7e:	e79e      	b.n	800cbbe <_printf_float+0xa2>
 800cc80:	9a06      	ldr	r2, [sp, #24]
 800cc82:	2a47      	cmp	r2, #71	@ 0x47
 800cc84:	d1c2      	bne.n	800cc0c <_printf_float+0xf0>
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d1c0      	bne.n	800cc0c <_printf_float+0xf0>
 800cc8a:	2301      	movs	r3, #1
 800cc8c:	e7bd      	b.n	800cc0a <_printf_float+0xee>
 800cc8e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cc92:	d9db      	bls.n	800cc4c <_printf_float+0x130>
 800cc94:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800cc98:	d118      	bne.n	800cccc <_printf_float+0x1b0>
 800cc9a:	2900      	cmp	r1, #0
 800cc9c:	6863      	ldr	r3, [r4, #4]
 800cc9e:	dd0b      	ble.n	800ccb8 <_printf_float+0x19c>
 800cca0:	6121      	str	r1, [r4, #16]
 800cca2:	b913      	cbnz	r3, 800ccaa <_printf_float+0x18e>
 800cca4:	6822      	ldr	r2, [r4, #0]
 800cca6:	07d0      	lsls	r0, r2, #31
 800cca8:	d502      	bpl.n	800ccb0 <_printf_float+0x194>
 800ccaa:	3301      	adds	r3, #1
 800ccac:	440b      	add	r3, r1
 800ccae:	6123      	str	r3, [r4, #16]
 800ccb0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ccb2:	f04f 0900 	mov.w	r9, #0
 800ccb6:	e7db      	b.n	800cc70 <_printf_float+0x154>
 800ccb8:	b913      	cbnz	r3, 800ccc0 <_printf_float+0x1a4>
 800ccba:	6822      	ldr	r2, [r4, #0]
 800ccbc:	07d2      	lsls	r2, r2, #31
 800ccbe:	d501      	bpl.n	800ccc4 <_printf_float+0x1a8>
 800ccc0:	3302      	adds	r3, #2
 800ccc2:	e7f4      	b.n	800ccae <_printf_float+0x192>
 800ccc4:	2301      	movs	r3, #1
 800ccc6:	e7f2      	b.n	800ccae <_printf_float+0x192>
 800ccc8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800cccc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ccce:	4299      	cmp	r1, r3
 800ccd0:	db05      	blt.n	800ccde <_printf_float+0x1c2>
 800ccd2:	6823      	ldr	r3, [r4, #0]
 800ccd4:	6121      	str	r1, [r4, #16]
 800ccd6:	07d8      	lsls	r0, r3, #31
 800ccd8:	d5ea      	bpl.n	800ccb0 <_printf_float+0x194>
 800ccda:	1c4b      	adds	r3, r1, #1
 800ccdc:	e7e7      	b.n	800ccae <_printf_float+0x192>
 800ccde:	2900      	cmp	r1, #0
 800cce0:	bfd4      	ite	le
 800cce2:	f1c1 0202 	rsble	r2, r1, #2
 800cce6:	2201      	movgt	r2, #1
 800cce8:	4413      	add	r3, r2
 800ccea:	e7e0      	b.n	800ccae <_printf_float+0x192>
 800ccec:	6823      	ldr	r3, [r4, #0]
 800ccee:	055a      	lsls	r2, r3, #21
 800ccf0:	d407      	bmi.n	800cd02 <_printf_float+0x1e6>
 800ccf2:	6923      	ldr	r3, [r4, #16]
 800ccf4:	4642      	mov	r2, r8
 800ccf6:	4631      	mov	r1, r6
 800ccf8:	4628      	mov	r0, r5
 800ccfa:	47b8      	blx	r7
 800ccfc:	3001      	adds	r0, #1
 800ccfe:	d12b      	bne.n	800cd58 <_printf_float+0x23c>
 800cd00:	e767      	b.n	800cbd2 <_printf_float+0xb6>
 800cd02:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cd06:	f240 80dd 	bls.w	800cec4 <_printf_float+0x3a8>
 800cd0a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800cd0e:	2200      	movs	r2, #0
 800cd10:	2300      	movs	r3, #0
 800cd12:	f7f3 fef9 	bl	8000b08 <__aeabi_dcmpeq>
 800cd16:	2800      	cmp	r0, #0
 800cd18:	d033      	beq.n	800cd82 <_printf_float+0x266>
 800cd1a:	4a37      	ldr	r2, [pc, #220]	@ (800cdf8 <_printf_float+0x2dc>)
 800cd1c:	2301      	movs	r3, #1
 800cd1e:	4631      	mov	r1, r6
 800cd20:	4628      	mov	r0, r5
 800cd22:	47b8      	blx	r7
 800cd24:	3001      	adds	r0, #1
 800cd26:	f43f af54 	beq.w	800cbd2 <_printf_float+0xb6>
 800cd2a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800cd2e:	4543      	cmp	r3, r8
 800cd30:	db02      	blt.n	800cd38 <_printf_float+0x21c>
 800cd32:	6823      	ldr	r3, [r4, #0]
 800cd34:	07d8      	lsls	r0, r3, #31
 800cd36:	d50f      	bpl.n	800cd58 <_printf_float+0x23c>
 800cd38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cd3c:	4631      	mov	r1, r6
 800cd3e:	4628      	mov	r0, r5
 800cd40:	47b8      	blx	r7
 800cd42:	3001      	adds	r0, #1
 800cd44:	f43f af45 	beq.w	800cbd2 <_printf_float+0xb6>
 800cd48:	f04f 0900 	mov.w	r9, #0
 800cd4c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800cd50:	f104 0a1a 	add.w	sl, r4, #26
 800cd54:	45c8      	cmp	r8, r9
 800cd56:	dc09      	bgt.n	800cd6c <_printf_float+0x250>
 800cd58:	6823      	ldr	r3, [r4, #0]
 800cd5a:	079b      	lsls	r3, r3, #30
 800cd5c:	f100 8103 	bmi.w	800cf66 <_printf_float+0x44a>
 800cd60:	68e0      	ldr	r0, [r4, #12]
 800cd62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cd64:	4298      	cmp	r0, r3
 800cd66:	bfb8      	it	lt
 800cd68:	4618      	movlt	r0, r3
 800cd6a:	e734      	b.n	800cbd6 <_printf_float+0xba>
 800cd6c:	2301      	movs	r3, #1
 800cd6e:	4652      	mov	r2, sl
 800cd70:	4631      	mov	r1, r6
 800cd72:	4628      	mov	r0, r5
 800cd74:	47b8      	blx	r7
 800cd76:	3001      	adds	r0, #1
 800cd78:	f43f af2b 	beq.w	800cbd2 <_printf_float+0xb6>
 800cd7c:	f109 0901 	add.w	r9, r9, #1
 800cd80:	e7e8      	b.n	800cd54 <_printf_float+0x238>
 800cd82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	dc39      	bgt.n	800cdfc <_printf_float+0x2e0>
 800cd88:	4a1b      	ldr	r2, [pc, #108]	@ (800cdf8 <_printf_float+0x2dc>)
 800cd8a:	2301      	movs	r3, #1
 800cd8c:	4631      	mov	r1, r6
 800cd8e:	4628      	mov	r0, r5
 800cd90:	47b8      	blx	r7
 800cd92:	3001      	adds	r0, #1
 800cd94:	f43f af1d 	beq.w	800cbd2 <_printf_float+0xb6>
 800cd98:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800cd9c:	ea59 0303 	orrs.w	r3, r9, r3
 800cda0:	d102      	bne.n	800cda8 <_printf_float+0x28c>
 800cda2:	6823      	ldr	r3, [r4, #0]
 800cda4:	07d9      	lsls	r1, r3, #31
 800cda6:	d5d7      	bpl.n	800cd58 <_printf_float+0x23c>
 800cda8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cdac:	4631      	mov	r1, r6
 800cdae:	4628      	mov	r0, r5
 800cdb0:	47b8      	blx	r7
 800cdb2:	3001      	adds	r0, #1
 800cdb4:	f43f af0d 	beq.w	800cbd2 <_printf_float+0xb6>
 800cdb8:	f04f 0a00 	mov.w	sl, #0
 800cdbc:	f104 0b1a 	add.w	fp, r4, #26
 800cdc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdc2:	425b      	negs	r3, r3
 800cdc4:	4553      	cmp	r3, sl
 800cdc6:	dc01      	bgt.n	800cdcc <_printf_float+0x2b0>
 800cdc8:	464b      	mov	r3, r9
 800cdca:	e793      	b.n	800ccf4 <_printf_float+0x1d8>
 800cdcc:	2301      	movs	r3, #1
 800cdce:	465a      	mov	r2, fp
 800cdd0:	4631      	mov	r1, r6
 800cdd2:	4628      	mov	r0, r5
 800cdd4:	47b8      	blx	r7
 800cdd6:	3001      	adds	r0, #1
 800cdd8:	f43f aefb 	beq.w	800cbd2 <_printf_float+0xb6>
 800cddc:	f10a 0a01 	add.w	sl, sl, #1
 800cde0:	e7ee      	b.n	800cdc0 <_printf_float+0x2a4>
 800cde2:	bf00      	nop
 800cde4:	7fefffff 	.word	0x7fefffff
 800cde8:	08010f92 	.word	0x08010f92
 800cdec:	08010f8e 	.word	0x08010f8e
 800cdf0:	08010f9a 	.word	0x08010f9a
 800cdf4:	08010f96 	.word	0x08010f96
 800cdf8:	08010f9e 	.word	0x08010f9e
 800cdfc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cdfe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ce02:	4553      	cmp	r3, sl
 800ce04:	bfa8      	it	ge
 800ce06:	4653      	movge	r3, sl
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	4699      	mov	r9, r3
 800ce0c:	dc36      	bgt.n	800ce7c <_printf_float+0x360>
 800ce0e:	f04f 0b00 	mov.w	fp, #0
 800ce12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ce16:	f104 021a 	add.w	r2, r4, #26
 800ce1a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ce1c:	9306      	str	r3, [sp, #24]
 800ce1e:	eba3 0309 	sub.w	r3, r3, r9
 800ce22:	455b      	cmp	r3, fp
 800ce24:	dc31      	bgt.n	800ce8a <_printf_float+0x36e>
 800ce26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce28:	459a      	cmp	sl, r3
 800ce2a:	dc3a      	bgt.n	800cea2 <_printf_float+0x386>
 800ce2c:	6823      	ldr	r3, [r4, #0]
 800ce2e:	07da      	lsls	r2, r3, #31
 800ce30:	d437      	bmi.n	800cea2 <_printf_float+0x386>
 800ce32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce34:	ebaa 0903 	sub.w	r9, sl, r3
 800ce38:	9b06      	ldr	r3, [sp, #24]
 800ce3a:	ebaa 0303 	sub.w	r3, sl, r3
 800ce3e:	4599      	cmp	r9, r3
 800ce40:	bfa8      	it	ge
 800ce42:	4699      	movge	r9, r3
 800ce44:	f1b9 0f00 	cmp.w	r9, #0
 800ce48:	dc33      	bgt.n	800ceb2 <_printf_float+0x396>
 800ce4a:	f04f 0800 	mov.w	r8, #0
 800ce4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ce52:	f104 0b1a 	add.w	fp, r4, #26
 800ce56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce58:	ebaa 0303 	sub.w	r3, sl, r3
 800ce5c:	eba3 0309 	sub.w	r3, r3, r9
 800ce60:	4543      	cmp	r3, r8
 800ce62:	f77f af79 	ble.w	800cd58 <_printf_float+0x23c>
 800ce66:	2301      	movs	r3, #1
 800ce68:	465a      	mov	r2, fp
 800ce6a:	4631      	mov	r1, r6
 800ce6c:	4628      	mov	r0, r5
 800ce6e:	47b8      	blx	r7
 800ce70:	3001      	adds	r0, #1
 800ce72:	f43f aeae 	beq.w	800cbd2 <_printf_float+0xb6>
 800ce76:	f108 0801 	add.w	r8, r8, #1
 800ce7a:	e7ec      	b.n	800ce56 <_printf_float+0x33a>
 800ce7c:	4642      	mov	r2, r8
 800ce7e:	4631      	mov	r1, r6
 800ce80:	4628      	mov	r0, r5
 800ce82:	47b8      	blx	r7
 800ce84:	3001      	adds	r0, #1
 800ce86:	d1c2      	bne.n	800ce0e <_printf_float+0x2f2>
 800ce88:	e6a3      	b.n	800cbd2 <_printf_float+0xb6>
 800ce8a:	2301      	movs	r3, #1
 800ce8c:	4631      	mov	r1, r6
 800ce8e:	4628      	mov	r0, r5
 800ce90:	9206      	str	r2, [sp, #24]
 800ce92:	47b8      	blx	r7
 800ce94:	3001      	adds	r0, #1
 800ce96:	f43f ae9c 	beq.w	800cbd2 <_printf_float+0xb6>
 800ce9a:	9a06      	ldr	r2, [sp, #24]
 800ce9c:	f10b 0b01 	add.w	fp, fp, #1
 800cea0:	e7bb      	b.n	800ce1a <_printf_float+0x2fe>
 800cea2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cea6:	4631      	mov	r1, r6
 800cea8:	4628      	mov	r0, r5
 800ceaa:	47b8      	blx	r7
 800ceac:	3001      	adds	r0, #1
 800ceae:	d1c0      	bne.n	800ce32 <_printf_float+0x316>
 800ceb0:	e68f      	b.n	800cbd2 <_printf_float+0xb6>
 800ceb2:	9a06      	ldr	r2, [sp, #24]
 800ceb4:	464b      	mov	r3, r9
 800ceb6:	4442      	add	r2, r8
 800ceb8:	4631      	mov	r1, r6
 800ceba:	4628      	mov	r0, r5
 800cebc:	47b8      	blx	r7
 800cebe:	3001      	adds	r0, #1
 800cec0:	d1c3      	bne.n	800ce4a <_printf_float+0x32e>
 800cec2:	e686      	b.n	800cbd2 <_printf_float+0xb6>
 800cec4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800cec8:	f1ba 0f01 	cmp.w	sl, #1
 800cecc:	dc01      	bgt.n	800ced2 <_printf_float+0x3b6>
 800cece:	07db      	lsls	r3, r3, #31
 800ced0:	d536      	bpl.n	800cf40 <_printf_float+0x424>
 800ced2:	2301      	movs	r3, #1
 800ced4:	4642      	mov	r2, r8
 800ced6:	4631      	mov	r1, r6
 800ced8:	4628      	mov	r0, r5
 800ceda:	47b8      	blx	r7
 800cedc:	3001      	adds	r0, #1
 800cede:	f43f ae78 	beq.w	800cbd2 <_printf_float+0xb6>
 800cee2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cee6:	4631      	mov	r1, r6
 800cee8:	4628      	mov	r0, r5
 800ceea:	47b8      	blx	r7
 800ceec:	3001      	adds	r0, #1
 800ceee:	f43f ae70 	beq.w	800cbd2 <_printf_float+0xb6>
 800cef2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800cef6:	2200      	movs	r2, #0
 800cef8:	2300      	movs	r3, #0
 800cefa:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800cefe:	f7f3 fe03 	bl	8000b08 <__aeabi_dcmpeq>
 800cf02:	b9c0      	cbnz	r0, 800cf36 <_printf_float+0x41a>
 800cf04:	4653      	mov	r3, sl
 800cf06:	f108 0201 	add.w	r2, r8, #1
 800cf0a:	4631      	mov	r1, r6
 800cf0c:	4628      	mov	r0, r5
 800cf0e:	47b8      	blx	r7
 800cf10:	3001      	adds	r0, #1
 800cf12:	d10c      	bne.n	800cf2e <_printf_float+0x412>
 800cf14:	e65d      	b.n	800cbd2 <_printf_float+0xb6>
 800cf16:	2301      	movs	r3, #1
 800cf18:	465a      	mov	r2, fp
 800cf1a:	4631      	mov	r1, r6
 800cf1c:	4628      	mov	r0, r5
 800cf1e:	47b8      	blx	r7
 800cf20:	3001      	adds	r0, #1
 800cf22:	f43f ae56 	beq.w	800cbd2 <_printf_float+0xb6>
 800cf26:	f108 0801 	add.w	r8, r8, #1
 800cf2a:	45d0      	cmp	r8, sl
 800cf2c:	dbf3      	blt.n	800cf16 <_printf_float+0x3fa>
 800cf2e:	464b      	mov	r3, r9
 800cf30:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800cf34:	e6df      	b.n	800ccf6 <_printf_float+0x1da>
 800cf36:	f04f 0800 	mov.w	r8, #0
 800cf3a:	f104 0b1a 	add.w	fp, r4, #26
 800cf3e:	e7f4      	b.n	800cf2a <_printf_float+0x40e>
 800cf40:	2301      	movs	r3, #1
 800cf42:	4642      	mov	r2, r8
 800cf44:	e7e1      	b.n	800cf0a <_printf_float+0x3ee>
 800cf46:	2301      	movs	r3, #1
 800cf48:	464a      	mov	r2, r9
 800cf4a:	4631      	mov	r1, r6
 800cf4c:	4628      	mov	r0, r5
 800cf4e:	47b8      	blx	r7
 800cf50:	3001      	adds	r0, #1
 800cf52:	f43f ae3e 	beq.w	800cbd2 <_printf_float+0xb6>
 800cf56:	f108 0801 	add.w	r8, r8, #1
 800cf5a:	68e3      	ldr	r3, [r4, #12]
 800cf5c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cf5e:	1a5b      	subs	r3, r3, r1
 800cf60:	4543      	cmp	r3, r8
 800cf62:	dcf0      	bgt.n	800cf46 <_printf_float+0x42a>
 800cf64:	e6fc      	b.n	800cd60 <_printf_float+0x244>
 800cf66:	f04f 0800 	mov.w	r8, #0
 800cf6a:	f104 0919 	add.w	r9, r4, #25
 800cf6e:	e7f4      	b.n	800cf5a <_printf_float+0x43e>

0800cf70 <_printf_common>:
 800cf70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf74:	4616      	mov	r6, r2
 800cf76:	4698      	mov	r8, r3
 800cf78:	688a      	ldr	r2, [r1, #8]
 800cf7a:	690b      	ldr	r3, [r1, #16]
 800cf7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cf80:	4293      	cmp	r3, r2
 800cf82:	bfb8      	it	lt
 800cf84:	4613      	movlt	r3, r2
 800cf86:	6033      	str	r3, [r6, #0]
 800cf88:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cf8c:	4607      	mov	r7, r0
 800cf8e:	460c      	mov	r4, r1
 800cf90:	b10a      	cbz	r2, 800cf96 <_printf_common+0x26>
 800cf92:	3301      	adds	r3, #1
 800cf94:	6033      	str	r3, [r6, #0]
 800cf96:	6823      	ldr	r3, [r4, #0]
 800cf98:	0699      	lsls	r1, r3, #26
 800cf9a:	bf42      	ittt	mi
 800cf9c:	6833      	ldrmi	r3, [r6, #0]
 800cf9e:	3302      	addmi	r3, #2
 800cfa0:	6033      	strmi	r3, [r6, #0]
 800cfa2:	6825      	ldr	r5, [r4, #0]
 800cfa4:	f015 0506 	ands.w	r5, r5, #6
 800cfa8:	d106      	bne.n	800cfb8 <_printf_common+0x48>
 800cfaa:	f104 0a19 	add.w	sl, r4, #25
 800cfae:	68e3      	ldr	r3, [r4, #12]
 800cfb0:	6832      	ldr	r2, [r6, #0]
 800cfb2:	1a9b      	subs	r3, r3, r2
 800cfb4:	42ab      	cmp	r3, r5
 800cfb6:	dc26      	bgt.n	800d006 <_printf_common+0x96>
 800cfb8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cfbc:	6822      	ldr	r2, [r4, #0]
 800cfbe:	3b00      	subs	r3, #0
 800cfc0:	bf18      	it	ne
 800cfc2:	2301      	movne	r3, #1
 800cfc4:	0692      	lsls	r2, r2, #26
 800cfc6:	d42b      	bmi.n	800d020 <_printf_common+0xb0>
 800cfc8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cfcc:	4641      	mov	r1, r8
 800cfce:	4638      	mov	r0, r7
 800cfd0:	47c8      	blx	r9
 800cfd2:	3001      	adds	r0, #1
 800cfd4:	d01e      	beq.n	800d014 <_printf_common+0xa4>
 800cfd6:	6823      	ldr	r3, [r4, #0]
 800cfd8:	6922      	ldr	r2, [r4, #16]
 800cfda:	f003 0306 	and.w	r3, r3, #6
 800cfde:	2b04      	cmp	r3, #4
 800cfe0:	bf02      	ittt	eq
 800cfe2:	68e5      	ldreq	r5, [r4, #12]
 800cfe4:	6833      	ldreq	r3, [r6, #0]
 800cfe6:	1aed      	subeq	r5, r5, r3
 800cfe8:	68a3      	ldr	r3, [r4, #8]
 800cfea:	bf0c      	ite	eq
 800cfec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cff0:	2500      	movne	r5, #0
 800cff2:	4293      	cmp	r3, r2
 800cff4:	bfc4      	itt	gt
 800cff6:	1a9b      	subgt	r3, r3, r2
 800cff8:	18ed      	addgt	r5, r5, r3
 800cffa:	2600      	movs	r6, #0
 800cffc:	341a      	adds	r4, #26
 800cffe:	42b5      	cmp	r5, r6
 800d000:	d11a      	bne.n	800d038 <_printf_common+0xc8>
 800d002:	2000      	movs	r0, #0
 800d004:	e008      	b.n	800d018 <_printf_common+0xa8>
 800d006:	2301      	movs	r3, #1
 800d008:	4652      	mov	r2, sl
 800d00a:	4641      	mov	r1, r8
 800d00c:	4638      	mov	r0, r7
 800d00e:	47c8      	blx	r9
 800d010:	3001      	adds	r0, #1
 800d012:	d103      	bne.n	800d01c <_printf_common+0xac>
 800d014:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d01c:	3501      	adds	r5, #1
 800d01e:	e7c6      	b.n	800cfae <_printf_common+0x3e>
 800d020:	18e1      	adds	r1, r4, r3
 800d022:	1c5a      	adds	r2, r3, #1
 800d024:	2030      	movs	r0, #48	@ 0x30
 800d026:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d02a:	4422      	add	r2, r4
 800d02c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d030:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d034:	3302      	adds	r3, #2
 800d036:	e7c7      	b.n	800cfc8 <_printf_common+0x58>
 800d038:	2301      	movs	r3, #1
 800d03a:	4622      	mov	r2, r4
 800d03c:	4641      	mov	r1, r8
 800d03e:	4638      	mov	r0, r7
 800d040:	47c8      	blx	r9
 800d042:	3001      	adds	r0, #1
 800d044:	d0e6      	beq.n	800d014 <_printf_common+0xa4>
 800d046:	3601      	adds	r6, #1
 800d048:	e7d9      	b.n	800cffe <_printf_common+0x8e>
	...

0800d04c <_printf_i>:
 800d04c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d050:	7e0f      	ldrb	r7, [r1, #24]
 800d052:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d054:	2f78      	cmp	r7, #120	@ 0x78
 800d056:	4691      	mov	r9, r2
 800d058:	4680      	mov	r8, r0
 800d05a:	460c      	mov	r4, r1
 800d05c:	469a      	mov	sl, r3
 800d05e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d062:	d807      	bhi.n	800d074 <_printf_i+0x28>
 800d064:	2f62      	cmp	r7, #98	@ 0x62
 800d066:	d80a      	bhi.n	800d07e <_printf_i+0x32>
 800d068:	2f00      	cmp	r7, #0
 800d06a:	f000 80d1 	beq.w	800d210 <_printf_i+0x1c4>
 800d06e:	2f58      	cmp	r7, #88	@ 0x58
 800d070:	f000 80b8 	beq.w	800d1e4 <_printf_i+0x198>
 800d074:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d078:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d07c:	e03a      	b.n	800d0f4 <_printf_i+0xa8>
 800d07e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d082:	2b15      	cmp	r3, #21
 800d084:	d8f6      	bhi.n	800d074 <_printf_i+0x28>
 800d086:	a101      	add	r1, pc, #4	@ (adr r1, 800d08c <_printf_i+0x40>)
 800d088:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d08c:	0800d0e5 	.word	0x0800d0e5
 800d090:	0800d0f9 	.word	0x0800d0f9
 800d094:	0800d075 	.word	0x0800d075
 800d098:	0800d075 	.word	0x0800d075
 800d09c:	0800d075 	.word	0x0800d075
 800d0a0:	0800d075 	.word	0x0800d075
 800d0a4:	0800d0f9 	.word	0x0800d0f9
 800d0a8:	0800d075 	.word	0x0800d075
 800d0ac:	0800d075 	.word	0x0800d075
 800d0b0:	0800d075 	.word	0x0800d075
 800d0b4:	0800d075 	.word	0x0800d075
 800d0b8:	0800d1f7 	.word	0x0800d1f7
 800d0bc:	0800d123 	.word	0x0800d123
 800d0c0:	0800d1b1 	.word	0x0800d1b1
 800d0c4:	0800d075 	.word	0x0800d075
 800d0c8:	0800d075 	.word	0x0800d075
 800d0cc:	0800d219 	.word	0x0800d219
 800d0d0:	0800d075 	.word	0x0800d075
 800d0d4:	0800d123 	.word	0x0800d123
 800d0d8:	0800d075 	.word	0x0800d075
 800d0dc:	0800d075 	.word	0x0800d075
 800d0e0:	0800d1b9 	.word	0x0800d1b9
 800d0e4:	6833      	ldr	r3, [r6, #0]
 800d0e6:	1d1a      	adds	r2, r3, #4
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	6032      	str	r2, [r6, #0]
 800d0ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d0f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d0f4:	2301      	movs	r3, #1
 800d0f6:	e09c      	b.n	800d232 <_printf_i+0x1e6>
 800d0f8:	6833      	ldr	r3, [r6, #0]
 800d0fa:	6820      	ldr	r0, [r4, #0]
 800d0fc:	1d19      	adds	r1, r3, #4
 800d0fe:	6031      	str	r1, [r6, #0]
 800d100:	0606      	lsls	r6, r0, #24
 800d102:	d501      	bpl.n	800d108 <_printf_i+0xbc>
 800d104:	681d      	ldr	r5, [r3, #0]
 800d106:	e003      	b.n	800d110 <_printf_i+0xc4>
 800d108:	0645      	lsls	r5, r0, #25
 800d10a:	d5fb      	bpl.n	800d104 <_printf_i+0xb8>
 800d10c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d110:	2d00      	cmp	r5, #0
 800d112:	da03      	bge.n	800d11c <_printf_i+0xd0>
 800d114:	232d      	movs	r3, #45	@ 0x2d
 800d116:	426d      	negs	r5, r5
 800d118:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d11c:	4858      	ldr	r0, [pc, #352]	@ (800d280 <_printf_i+0x234>)
 800d11e:	230a      	movs	r3, #10
 800d120:	e011      	b.n	800d146 <_printf_i+0xfa>
 800d122:	6821      	ldr	r1, [r4, #0]
 800d124:	6833      	ldr	r3, [r6, #0]
 800d126:	0608      	lsls	r0, r1, #24
 800d128:	f853 5b04 	ldr.w	r5, [r3], #4
 800d12c:	d402      	bmi.n	800d134 <_printf_i+0xe8>
 800d12e:	0649      	lsls	r1, r1, #25
 800d130:	bf48      	it	mi
 800d132:	b2ad      	uxthmi	r5, r5
 800d134:	2f6f      	cmp	r7, #111	@ 0x6f
 800d136:	4852      	ldr	r0, [pc, #328]	@ (800d280 <_printf_i+0x234>)
 800d138:	6033      	str	r3, [r6, #0]
 800d13a:	bf14      	ite	ne
 800d13c:	230a      	movne	r3, #10
 800d13e:	2308      	moveq	r3, #8
 800d140:	2100      	movs	r1, #0
 800d142:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d146:	6866      	ldr	r6, [r4, #4]
 800d148:	60a6      	str	r6, [r4, #8]
 800d14a:	2e00      	cmp	r6, #0
 800d14c:	db05      	blt.n	800d15a <_printf_i+0x10e>
 800d14e:	6821      	ldr	r1, [r4, #0]
 800d150:	432e      	orrs	r6, r5
 800d152:	f021 0104 	bic.w	r1, r1, #4
 800d156:	6021      	str	r1, [r4, #0]
 800d158:	d04b      	beq.n	800d1f2 <_printf_i+0x1a6>
 800d15a:	4616      	mov	r6, r2
 800d15c:	fbb5 f1f3 	udiv	r1, r5, r3
 800d160:	fb03 5711 	mls	r7, r3, r1, r5
 800d164:	5dc7      	ldrb	r7, [r0, r7]
 800d166:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d16a:	462f      	mov	r7, r5
 800d16c:	42bb      	cmp	r3, r7
 800d16e:	460d      	mov	r5, r1
 800d170:	d9f4      	bls.n	800d15c <_printf_i+0x110>
 800d172:	2b08      	cmp	r3, #8
 800d174:	d10b      	bne.n	800d18e <_printf_i+0x142>
 800d176:	6823      	ldr	r3, [r4, #0]
 800d178:	07df      	lsls	r7, r3, #31
 800d17a:	d508      	bpl.n	800d18e <_printf_i+0x142>
 800d17c:	6923      	ldr	r3, [r4, #16]
 800d17e:	6861      	ldr	r1, [r4, #4]
 800d180:	4299      	cmp	r1, r3
 800d182:	bfde      	ittt	le
 800d184:	2330      	movle	r3, #48	@ 0x30
 800d186:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d18a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800d18e:	1b92      	subs	r2, r2, r6
 800d190:	6122      	str	r2, [r4, #16]
 800d192:	f8cd a000 	str.w	sl, [sp]
 800d196:	464b      	mov	r3, r9
 800d198:	aa03      	add	r2, sp, #12
 800d19a:	4621      	mov	r1, r4
 800d19c:	4640      	mov	r0, r8
 800d19e:	f7ff fee7 	bl	800cf70 <_printf_common>
 800d1a2:	3001      	adds	r0, #1
 800d1a4:	d14a      	bne.n	800d23c <_printf_i+0x1f0>
 800d1a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d1aa:	b004      	add	sp, #16
 800d1ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1b0:	6823      	ldr	r3, [r4, #0]
 800d1b2:	f043 0320 	orr.w	r3, r3, #32
 800d1b6:	6023      	str	r3, [r4, #0]
 800d1b8:	4832      	ldr	r0, [pc, #200]	@ (800d284 <_printf_i+0x238>)
 800d1ba:	2778      	movs	r7, #120	@ 0x78
 800d1bc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d1c0:	6823      	ldr	r3, [r4, #0]
 800d1c2:	6831      	ldr	r1, [r6, #0]
 800d1c4:	061f      	lsls	r7, r3, #24
 800d1c6:	f851 5b04 	ldr.w	r5, [r1], #4
 800d1ca:	d402      	bmi.n	800d1d2 <_printf_i+0x186>
 800d1cc:	065f      	lsls	r7, r3, #25
 800d1ce:	bf48      	it	mi
 800d1d0:	b2ad      	uxthmi	r5, r5
 800d1d2:	6031      	str	r1, [r6, #0]
 800d1d4:	07d9      	lsls	r1, r3, #31
 800d1d6:	bf44      	itt	mi
 800d1d8:	f043 0320 	orrmi.w	r3, r3, #32
 800d1dc:	6023      	strmi	r3, [r4, #0]
 800d1de:	b11d      	cbz	r5, 800d1e8 <_printf_i+0x19c>
 800d1e0:	2310      	movs	r3, #16
 800d1e2:	e7ad      	b.n	800d140 <_printf_i+0xf4>
 800d1e4:	4826      	ldr	r0, [pc, #152]	@ (800d280 <_printf_i+0x234>)
 800d1e6:	e7e9      	b.n	800d1bc <_printf_i+0x170>
 800d1e8:	6823      	ldr	r3, [r4, #0]
 800d1ea:	f023 0320 	bic.w	r3, r3, #32
 800d1ee:	6023      	str	r3, [r4, #0]
 800d1f0:	e7f6      	b.n	800d1e0 <_printf_i+0x194>
 800d1f2:	4616      	mov	r6, r2
 800d1f4:	e7bd      	b.n	800d172 <_printf_i+0x126>
 800d1f6:	6833      	ldr	r3, [r6, #0]
 800d1f8:	6825      	ldr	r5, [r4, #0]
 800d1fa:	6961      	ldr	r1, [r4, #20]
 800d1fc:	1d18      	adds	r0, r3, #4
 800d1fe:	6030      	str	r0, [r6, #0]
 800d200:	062e      	lsls	r6, r5, #24
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	d501      	bpl.n	800d20a <_printf_i+0x1be>
 800d206:	6019      	str	r1, [r3, #0]
 800d208:	e002      	b.n	800d210 <_printf_i+0x1c4>
 800d20a:	0668      	lsls	r0, r5, #25
 800d20c:	d5fb      	bpl.n	800d206 <_printf_i+0x1ba>
 800d20e:	8019      	strh	r1, [r3, #0]
 800d210:	2300      	movs	r3, #0
 800d212:	6123      	str	r3, [r4, #16]
 800d214:	4616      	mov	r6, r2
 800d216:	e7bc      	b.n	800d192 <_printf_i+0x146>
 800d218:	6833      	ldr	r3, [r6, #0]
 800d21a:	1d1a      	adds	r2, r3, #4
 800d21c:	6032      	str	r2, [r6, #0]
 800d21e:	681e      	ldr	r6, [r3, #0]
 800d220:	6862      	ldr	r2, [r4, #4]
 800d222:	2100      	movs	r1, #0
 800d224:	4630      	mov	r0, r6
 800d226:	f7f2 fff3 	bl	8000210 <memchr>
 800d22a:	b108      	cbz	r0, 800d230 <_printf_i+0x1e4>
 800d22c:	1b80      	subs	r0, r0, r6
 800d22e:	6060      	str	r0, [r4, #4]
 800d230:	6863      	ldr	r3, [r4, #4]
 800d232:	6123      	str	r3, [r4, #16]
 800d234:	2300      	movs	r3, #0
 800d236:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d23a:	e7aa      	b.n	800d192 <_printf_i+0x146>
 800d23c:	6923      	ldr	r3, [r4, #16]
 800d23e:	4632      	mov	r2, r6
 800d240:	4649      	mov	r1, r9
 800d242:	4640      	mov	r0, r8
 800d244:	47d0      	blx	sl
 800d246:	3001      	adds	r0, #1
 800d248:	d0ad      	beq.n	800d1a6 <_printf_i+0x15a>
 800d24a:	6823      	ldr	r3, [r4, #0]
 800d24c:	079b      	lsls	r3, r3, #30
 800d24e:	d413      	bmi.n	800d278 <_printf_i+0x22c>
 800d250:	68e0      	ldr	r0, [r4, #12]
 800d252:	9b03      	ldr	r3, [sp, #12]
 800d254:	4298      	cmp	r0, r3
 800d256:	bfb8      	it	lt
 800d258:	4618      	movlt	r0, r3
 800d25a:	e7a6      	b.n	800d1aa <_printf_i+0x15e>
 800d25c:	2301      	movs	r3, #1
 800d25e:	4632      	mov	r2, r6
 800d260:	4649      	mov	r1, r9
 800d262:	4640      	mov	r0, r8
 800d264:	47d0      	blx	sl
 800d266:	3001      	adds	r0, #1
 800d268:	d09d      	beq.n	800d1a6 <_printf_i+0x15a>
 800d26a:	3501      	adds	r5, #1
 800d26c:	68e3      	ldr	r3, [r4, #12]
 800d26e:	9903      	ldr	r1, [sp, #12]
 800d270:	1a5b      	subs	r3, r3, r1
 800d272:	42ab      	cmp	r3, r5
 800d274:	dcf2      	bgt.n	800d25c <_printf_i+0x210>
 800d276:	e7eb      	b.n	800d250 <_printf_i+0x204>
 800d278:	2500      	movs	r5, #0
 800d27a:	f104 0619 	add.w	r6, r4, #25
 800d27e:	e7f5      	b.n	800d26c <_printf_i+0x220>
 800d280:	08010fa0 	.word	0x08010fa0
 800d284:	08010fb1 	.word	0x08010fb1

0800d288 <_scanf_float>:
 800d288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d28c:	b087      	sub	sp, #28
 800d28e:	4691      	mov	r9, r2
 800d290:	9303      	str	r3, [sp, #12]
 800d292:	688b      	ldr	r3, [r1, #8]
 800d294:	1e5a      	subs	r2, r3, #1
 800d296:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800d29a:	bf81      	itttt	hi
 800d29c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800d2a0:	eb03 0b05 	addhi.w	fp, r3, r5
 800d2a4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800d2a8:	608b      	strhi	r3, [r1, #8]
 800d2aa:	680b      	ldr	r3, [r1, #0]
 800d2ac:	460a      	mov	r2, r1
 800d2ae:	f04f 0500 	mov.w	r5, #0
 800d2b2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800d2b6:	f842 3b1c 	str.w	r3, [r2], #28
 800d2ba:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d2be:	4680      	mov	r8, r0
 800d2c0:	460c      	mov	r4, r1
 800d2c2:	bf98      	it	ls
 800d2c4:	f04f 0b00 	movls.w	fp, #0
 800d2c8:	9201      	str	r2, [sp, #4]
 800d2ca:	4616      	mov	r6, r2
 800d2cc:	46aa      	mov	sl, r5
 800d2ce:	462f      	mov	r7, r5
 800d2d0:	9502      	str	r5, [sp, #8]
 800d2d2:	68a2      	ldr	r2, [r4, #8]
 800d2d4:	b15a      	cbz	r2, 800d2ee <_scanf_float+0x66>
 800d2d6:	f8d9 3000 	ldr.w	r3, [r9]
 800d2da:	781b      	ldrb	r3, [r3, #0]
 800d2dc:	2b4e      	cmp	r3, #78	@ 0x4e
 800d2de:	d863      	bhi.n	800d3a8 <_scanf_float+0x120>
 800d2e0:	2b40      	cmp	r3, #64	@ 0x40
 800d2e2:	d83b      	bhi.n	800d35c <_scanf_float+0xd4>
 800d2e4:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800d2e8:	b2c8      	uxtb	r0, r1
 800d2ea:	280e      	cmp	r0, #14
 800d2ec:	d939      	bls.n	800d362 <_scanf_float+0xda>
 800d2ee:	b11f      	cbz	r7, 800d2f8 <_scanf_float+0x70>
 800d2f0:	6823      	ldr	r3, [r4, #0]
 800d2f2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d2f6:	6023      	str	r3, [r4, #0]
 800d2f8:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800d2fc:	f1ba 0f01 	cmp.w	sl, #1
 800d300:	f200 8114 	bhi.w	800d52c <_scanf_float+0x2a4>
 800d304:	9b01      	ldr	r3, [sp, #4]
 800d306:	429e      	cmp	r6, r3
 800d308:	f200 8105 	bhi.w	800d516 <_scanf_float+0x28e>
 800d30c:	2001      	movs	r0, #1
 800d30e:	b007      	add	sp, #28
 800d310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d314:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800d318:	2a0d      	cmp	r2, #13
 800d31a:	d8e8      	bhi.n	800d2ee <_scanf_float+0x66>
 800d31c:	a101      	add	r1, pc, #4	@ (adr r1, 800d324 <_scanf_float+0x9c>)
 800d31e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d322:	bf00      	nop
 800d324:	0800d46d 	.word	0x0800d46d
 800d328:	0800d2ef 	.word	0x0800d2ef
 800d32c:	0800d2ef 	.word	0x0800d2ef
 800d330:	0800d2ef 	.word	0x0800d2ef
 800d334:	0800d4c9 	.word	0x0800d4c9
 800d338:	0800d4a3 	.word	0x0800d4a3
 800d33c:	0800d2ef 	.word	0x0800d2ef
 800d340:	0800d2ef 	.word	0x0800d2ef
 800d344:	0800d47b 	.word	0x0800d47b
 800d348:	0800d2ef 	.word	0x0800d2ef
 800d34c:	0800d2ef 	.word	0x0800d2ef
 800d350:	0800d2ef 	.word	0x0800d2ef
 800d354:	0800d2ef 	.word	0x0800d2ef
 800d358:	0800d437 	.word	0x0800d437
 800d35c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800d360:	e7da      	b.n	800d318 <_scanf_float+0x90>
 800d362:	290e      	cmp	r1, #14
 800d364:	d8c3      	bhi.n	800d2ee <_scanf_float+0x66>
 800d366:	a001      	add	r0, pc, #4	@ (adr r0, 800d36c <_scanf_float+0xe4>)
 800d368:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d36c:	0800d427 	.word	0x0800d427
 800d370:	0800d2ef 	.word	0x0800d2ef
 800d374:	0800d427 	.word	0x0800d427
 800d378:	0800d4b7 	.word	0x0800d4b7
 800d37c:	0800d2ef 	.word	0x0800d2ef
 800d380:	0800d3c9 	.word	0x0800d3c9
 800d384:	0800d40d 	.word	0x0800d40d
 800d388:	0800d40d 	.word	0x0800d40d
 800d38c:	0800d40d 	.word	0x0800d40d
 800d390:	0800d40d 	.word	0x0800d40d
 800d394:	0800d40d 	.word	0x0800d40d
 800d398:	0800d40d 	.word	0x0800d40d
 800d39c:	0800d40d 	.word	0x0800d40d
 800d3a0:	0800d40d 	.word	0x0800d40d
 800d3a4:	0800d40d 	.word	0x0800d40d
 800d3a8:	2b6e      	cmp	r3, #110	@ 0x6e
 800d3aa:	d809      	bhi.n	800d3c0 <_scanf_float+0x138>
 800d3ac:	2b60      	cmp	r3, #96	@ 0x60
 800d3ae:	d8b1      	bhi.n	800d314 <_scanf_float+0x8c>
 800d3b0:	2b54      	cmp	r3, #84	@ 0x54
 800d3b2:	d07b      	beq.n	800d4ac <_scanf_float+0x224>
 800d3b4:	2b59      	cmp	r3, #89	@ 0x59
 800d3b6:	d19a      	bne.n	800d2ee <_scanf_float+0x66>
 800d3b8:	2d07      	cmp	r5, #7
 800d3ba:	d198      	bne.n	800d2ee <_scanf_float+0x66>
 800d3bc:	2508      	movs	r5, #8
 800d3be:	e02f      	b.n	800d420 <_scanf_float+0x198>
 800d3c0:	2b74      	cmp	r3, #116	@ 0x74
 800d3c2:	d073      	beq.n	800d4ac <_scanf_float+0x224>
 800d3c4:	2b79      	cmp	r3, #121	@ 0x79
 800d3c6:	e7f6      	b.n	800d3b6 <_scanf_float+0x12e>
 800d3c8:	6821      	ldr	r1, [r4, #0]
 800d3ca:	05c8      	lsls	r0, r1, #23
 800d3cc:	d51e      	bpl.n	800d40c <_scanf_float+0x184>
 800d3ce:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800d3d2:	6021      	str	r1, [r4, #0]
 800d3d4:	3701      	adds	r7, #1
 800d3d6:	f1bb 0f00 	cmp.w	fp, #0
 800d3da:	d003      	beq.n	800d3e4 <_scanf_float+0x15c>
 800d3dc:	3201      	adds	r2, #1
 800d3de:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800d3e2:	60a2      	str	r2, [r4, #8]
 800d3e4:	68a3      	ldr	r3, [r4, #8]
 800d3e6:	3b01      	subs	r3, #1
 800d3e8:	60a3      	str	r3, [r4, #8]
 800d3ea:	6923      	ldr	r3, [r4, #16]
 800d3ec:	3301      	adds	r3, #1
 800d3ee:	6123      	str	r3, [r4, #16]
 800d3f0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800d3f4:	3b01      	subs	r3, #1
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	f8c9 3004 	str.w	r3, [r9, #4]
 800d3fc:	f340 8082 	ble.w	800d504 <_scanf_float+0x27c>
 800d400:	f8d9 3000 	ldr.w	r3, [r9]
 800d404:	3301      	adds	r3, #1
 800d406:	f8c9 3000 	str.w	r3, [r9]
 800d40a:	e762      	b.n	800d2d2 <_scanf_float+0x4a>
 800d40c:	eb1a 0105 	adds.w	r1, sl, r5
 800d410:	f47f af6d 	bne.w	800d2ee <_scanf_float+0x66>
 800d414:	6822      	ldr	r2, [r4, #0]
 800d416:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800d41a:	6022      	str	r2, [r4, #0]
 800d41c:	460d      	mov	r5, r1
 800d41e:	468a      	mov	sl, r1
 800d420:	f806 3b01 	strb.w	r3, [r6], #1
 800d424:	e7de      	b.n	800d3e4 <_scanf_float+0x15c>
 800d426:	6822      	ldr	r2, [r4, #0]
 800d428:	0610      	lsls	r0, r2, #24
 800d42a:	f57f af60 	bpl.w	800d2ee <_scanf_float+0x66>
 800d42e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d432:	6022      	str	r2, [r4, #0]
 800d434:	e7f4      	b.n	800d420 <_scanf_float+0x198>
 800d436:	f1ba 0f00 	cmp.w	sl, #0
 800d43a:	d10c      	bne.n	800d456 <_scanf_float+0x1ce>
 800d43c:	b977      	cbnz	r7, 800d45c <_scanf_float+0x1d4>
 800d43e:	6822      	ldr	r2, [r4, #0]
 800d440:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800d444:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800d448:	d108      	bne.n	800d45c <_scanf_float+0x1d4>
 800d44a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d44e:	6022      	str	r2, [r4, #0]
 800d450:	f04f 0a01 	mov.w	sl, #1
 800d454:	e7e4      	b.n	800d420 <_scanf_float+0x198>
 800d456:	f1ba 0f02 	cmp.w	sl, #2
 800d45a:	d050      	beq.n	800d4fe <_scanf_float+0x276>
 800d45c:	2d01      	cmp	r5, #1
 800d45e:	d002      	beq.n	800d466 <_scanf_float+0x1de>
 800d460:	2d04      	cmp	r5, #4
 800d462:	f47f af44 	bne.w	800d2ee <_scanf_float+0x66>
 800d466:	3501      	adds	r5, #1
 800d468:	b2ed      	uxtb	r5, r5
 800d46a:	e7d9      	b.n	800d420 <_scanf_float+0x198>
 800d46c:	f1ba 0f01 	cmp.w	sl, #1
 800d470:	f47f af3d 	bne.w	800d2ee <_scanf_float+0x66>
 800d474:	f04f 0a02 	mov.w	sl, #2
 800d478:	e7d2      	b.n	800d420 <_scanf_float+0x198>
 800d47a:	b975      	cbnz	r5, 800d49a <_scanf_float+0x212>
 800d47c:	2f00      	cmp	r7, #0
 800d47e:	f47f af37 	bne.w	800d2f0 <_scanf_float+0x68>
 800d482:	6822      	ldr	r2, [r4, #0]
 800d484:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800d488:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800d48c:	f040 8103 	bne.w	800d696 <_scanf_float+0x40e>
 800d490:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d494:	6022      	str	r2, [r4, #0]
 800d496:	2501      	movs	r5, #1
 800d498:	e7c2      	b.n	800d420 <_scanf_float+0x198>
 800d49a:	2d03      	cmp	r5, #3
 800d49c:	d0e3      	beq.n	800d466 <_scanf_float+0x1de>
 800d49e:	2d05      	cmp	r5, #5
 800d4a0:	e7df      	b.n	800d462 <_scanf_float+0x1da>
 800d4a2:	2d02      	cmp	r5, #2
 800d4a4:	f47f af23 	bne.w	800d2ee <_scanf_float+0x66>
 800d4a8:	2503      	movs	r5, #3
 800d4aa:	e7b9      	b.n	800d420 <_scanf_float+0x198>
 800d4ac:	2d06      	cmp	r5, #6
 800d4ae:	f47f af1e 	bne.w	800d2ee <_scanf_float+0x66>
 800d4b2:	2507      	movs	r5, #7
 800d4b4:	e7b4      	b.n	800d420 <_scanf_float+0x198>
 800d4b6:	6822      	ldr	r2, [r4, #0]
 800d4b8:	0591      	lsls	r1, r2, #22
 800d4ba:	f57f af18 	bpl.w	800d2ee <_scanf_float+0x66>
 800d4be:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800d4c2:	6022      	str	r2, [r4, #0]
 800d4c4:	9702      	str	r7, [sp, #8]
 800d4c6:	e7ab      	b.n	800d420 <_scanf_float+0x198>
 800d4c8:	6822      	ldr	r2, [r4, #0]
 800d4ca:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800d4ce:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800d4d2:	d005      	beq.n	800d4e0 <_scanf_float+0x258>
 800d4d4:	0550      	lsls	r0, r2, #21
 800d4d6:	f57f af0a 	bpl.w	800d2ee <_scanf_float+0x66>
 800d4da:	2f00      	cmp	r7, #0
 800d4dc:	f000 80db 	beq.w	800d696 <_scanf_float+0x40e>
 800d4e0:	0591      	lsls	r1, r2, #22
 800d4e2:	bf58      	it	pl
 800d4e4:	9902      	ldrpl	r1, [sp, #8]
 800d4e6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d4ea:	bf58      	it	pl
 800d4ec:	1a79      	subpl	r1, r7, r1
 800d4ee:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800d4f2:	bf58      	it	pl
 800d4f4:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800d4f8:	6022      	str	r2, [r4, #0]
 800d4fa:	2700      	movs	r7, #0
 800d4fc:	e790      	b.n	800d420 <_scanf_float+0x198>
 800d4fe:	f04f 0a03 	mov.w	sl, #3
 800d502:	e78d      	b.n	800d420 <_scanf_float+0x198>
 800d504:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800d508:	4649      	mov	r1, r9
 800d50a:	4640      	mov	r0, r8
 800d50c:	4798      	blx	r3
 800d50e:	2800      	cmp	r0, #0
 800d510:	f43f aedf 	beq.w	800d2d2 <_scanf_float+0x4a>
 800d514:	e6eb      	b.n	800d2ee <_scanf_float+0x66>
 800d516:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d51a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d51e:	464a      	mov	r2, r9
 800d520:	4640      	mov	r0, r8
 800d522:	4798      	blx	r3
 800d524:	6923      	ldr	r3, [r4, #16]
 800d526:	3b01      	subs	r3, #1
 800d528:	6123      	str	r3, [r4, #16]
 800d52a:	e6eb      	b.n	800d304 <_scanf_float+0x7c>
 800d52c:	1e6b      	subs	r3, r5, #1
 800d52e:	2b06      	cmp	r3, #6
 800d530:	d824      	bhi.n	800d57c <_scanf_float+0x2f4>
 800d532:	2d02      	cmp	r5, #2
 800d534:	d836      	bhi.n	800d5a4 <_scanf_float+0x31c>
 800d536:	9b01      	ldr	r3, [sp, #4]
 800d538:	429e      	cmp	r6, r3
 800d53a:	f67f aee7 	bls.w	800d30c <_scanf_float+0x84>
 800d53e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d542:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d546:	464a      	mov	r2, r9
 800d548:	4640      	mov	r0, r8
 800d54a:	4798      	blx	r3
 800d54c:	6923      	ldr	r3, [r4, #16]
 800d54e:	3b01      	subs	r3, #1
 800d550:	6123      	str	r3, [r4, #16]
 800d552:	e7f0      	b.n	800d536 <_scanf_float+0x2ae>
 800d554:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d558:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800d55c:	464a      	mov	r2, r9
 800d55e:	4640      	mov	r0, r8
 800d560:	4798      	blx	r3
 800d562:	6923      	ldr	r3, [r4, #16]
 800d564:	3b01      	subs	r3, #1
 800d566:	6123      	str	r3, [r4, #16]
 800d568:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800d56c:	fa5f fa8a 	uxtb.w	sl, sl
 800d570:	f1ba 0f02 	cmp.w	sl, #2
 800d574:	d1ee      	bne.n	800d554 <_scanf_float+0x2cc>
 800d576:	3d03      	subs	r5, #3
 800d578:	b2ed      	uxtb	r5, r5
 800d57a:	1b76      	subs	r6, r6, r5
 800d57c:	6823      	ldr	r3, [r4, #0]
 800d57e:	05da      	lsls	r2, r3, #23
 800d580:	d530      	bpl.n	800d5e4 <_scanf_float+0x35c>
 800d582:	055b      	lsls	r3, r3, #21
 800d584:	d511      	bpl.n	800d5aa <_scanf_float+0x322>
 800d586:	9b01      	ldr	r3, [sp, #4]
 800d588:	429e      	cmp	r6, r3
 800d58a:	f67f aebf 	bls.w	800d30c <_scanf_float+0x84>
 800d58e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d592:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d596:	464a      	mov	r2, r9
 800d598:	4640      	mov	r0, r8
 800d59a:	4798      	blx	r3
 800d59c:	6923      	ldr	r3, [r4, #16]
 800d59e:	3b01      	subs	r3, #1
 800d5a0:	6123      	str	r3, [r4, #16]
 800d5a2:	e7f0      	b.n	800d586 <_scanf_float+0x2fe>
 800d5a4:	46aa      	mov	sl, r5
 800d5a6:	46b3      	mov	fp, r6
 800d5a8:	e7de      	b.n	800d568 <_scanf_float+0x2e0>
 800d5aa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d5ae:	6923      	ldr	r3, [r4, #16]
 800d5b0:	2965      	cmp	r1, #101	@ 0x65
 800d5b2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800d5b6:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800d5ba:	6123      	str	r3, [r4, #16]
 800d5bc:	d00c      	beq.n	800d5d8 <_scanf_float+0x350>
 800d5be:	2945      	cmp	r1, #69	@ 0x45
 800d5c0:	d00a      	beq.n	800d5d8 <_scanf_float+0x350>
 800d5c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d5c6:	464a      	mov	r2, r9
 800d5c8:	4640      	mov	r0, r8
 800d5ca:	4798      	blx	r3
 800d5cc:	6923      	ldr	r3, [r4, #16]
 800d5ce:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800d5d2:	3b01      	subs	r3, #1
 800d5d4:	1eb5      	subs	r5, r6, #2
 800d5d6:	6123      	str	r3, [r4, #16]
 800d5d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d5dc:	464a      	mov	r2, r9
 800d5de:	4640      	mov	r0, r8
 800d5e0:	4798      	blx	r3
 800d5e2:	462e      	mov	r6, r5
 800d5e4:	6822      	ldr	r2, [r4, #0]
 800d5e6:	f012 0210 	ands.w	r2, r2, #16
 800d5ea:	d001      	beq.n	800d5f0 <_scanf_float+0x368>
 800d5ec:	2000      	movs	r0, #0
 800d5ee:	e68e      	b.n	800d30e <_scanf_float+0x86>
 800d5f0:	7032      	strb	r2, [r6, #0]
 800d5f2:	6823      	ldr	r3, [r4, #0]
 800d5f4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800d5f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d5fc:	d125      	bne.n	800d64a <_scanf_float+0x3c2>
 800d5fe:	9b02      	ldr	r3, [sp, #8]
 800d600:	429f      	cmp	r7, r3
 800d602:	d00a      	beq.n	800d61a <_scanf_float+0x392>
 800d604:	1bda      	subs	r2, r3, r7
 800d606:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800d60a:	429e      	cmp	r6, r3
 800d60c:	bf28      	it	cs
 800d60e:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800d612:	4922      	ldr	r1, [pc, #136]	@ (800d69c <_scanf_float+0x414>)
 800d614:	4630      	mov	r0, r6
 800d616:	f000 fa35 	bl	800da84 <siprintf>
 800d61a:	9901      	ldr	r1, [sp, #4]
 800d61c:	2200      	movs	r2, #0
 800d61e:	4640      	mov	r0, r8
 800d620:	f7ff f9d6 	bl	800c9d0 <_strtod_r>
 800d624:	9b03      	ldr	r3, [sp, #12]
 800d626:	6821      	ldr	r1, [r4, #0]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	f011 0f02 	tst.w	r1, #2
 800d62e:	ec57 6b10 	vmov	r6, r7, d0
 800d632:	f103 0204 	add.w	r2, r3, #4
 800d636:	d015      	beq.n	800d664 <_scanf_float+0x3dc>
 800d638:	9903      	ldr	r1, [sp, #12]
 800d63a:	600a      	str	r2, [r1, #0]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	e9c3 6700 	strd	r6, r7, [r3]
 800d642:	68e3      	ldr	r3, [r4, #12]
 800d644:	3301      	adds	r3, #1
 800d646:	60e3      	str	r3, [r4, #12]
 800d648:	e7d0      	b.n	800d5ec <_scanf_float+0x364>
 800d64a:	9b04      	ldr	r3, [sp, #16]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d0e4      	beq.n	800d61a <_scanf_float+0x392>
 800d650:	9905      	ldr	r1, [sp, #20]
 800d652:	230a      	movs	r3, #10
 800d654:	3101      	adds	r1, #1
 800d656:	4640      	mov	r0, r8
 800d658:	f002 fb9a 	bl	800fd90 <_strtol_r>
 800d65c:	9b04      	ldr	r3, [sp, #16]
 800d65e:	9e05      	ldr	r6, [sp, #20]
 800d660:	1ac2      	subs	r2, r0, r3
 800d662:	e7d0      	b.n	800d606 <_scanf_float+0x37e>
 800d664:	f011 0f04 	tst.w	r1, #4
 800d668:	9903      	ldr	r1, [sp, #12]
 800d66a:	600a      	str	r2, [r1, #0]
 800d66c:	d1e6      	bne.n	800d63c <_scanf_float+0x3b4>
 800d66e:	681d      	ldr	r5, [r3, #0]
 800d670:	4632      	mov	r2, r6
 800d672:	463b      	mov	r3, r7
 800d674:	4630      	mov	r0, r6
 800d676:	4639      	mov	r1, r7
 800d678:	f7f3 fa78 	bl	8000b6c <__aeabi_dcmpun>
 800d67c:	b128      	cbz	r0, 800d68a <_scanf_float+0x402>
 800d67e:	4808      	ldr	r0, [pc, #32]	@ (800d6a0 <_scanf_float+0x418>)
 800d680:	f000 fc02 	bl	800de88 <nanf>
 800d684:	ed85 0a00 	vstr	s0, [r5]
 800d688:	e7db      	b.n	800d642 <_scanf_float+0x3ba>
 800d68a:	4630      	mov	r0, r6
 800d68c:	4639      	mov	r1, r7
 800d68e:	f7f3 facb 	bl	8000c28 <__aeabi_d2f>
 800d692:	6028      	str	r0, [r5, #0]
 800d694:	e7d5      	b.n	800d642 <_scanf_float+0x3ba>
 800d696:	2700      	movs	r7, #0
 800d698:	e62e      	b.n	800d2f8 <_scanf_float+0x70>
 800d69a:	bf00      	nop
 800d69c:	08010fc2 	.word	0x08010fc2
 800d6a0:	08010f8b 	.word	0x08010f8b

0800d6a4 <__sflush_r>:
 800d6a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d6a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6ac:	0716      	lsls	r6, r2, #28
 800d6ae:	4605      	mov	r5, r0
 800d6b0:	460c      	mov	r4, r1
 800d6b2:	d454      	bmi.n	800d75e <__sflush_r+0xba>
 800d6b4:	684b      	ldr	r3, [r1, #4]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	dc02      	bgt.n	800d6c0 <__sflush_r+0x1c>
 800d6ba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	dd48      	ble.n	800d752 <__sflush_r+0xae>
 800d6c0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d6c2:	2e00      	cmp	r6, #0
 800d6c4:	d045      	beq.n	800d752 <__sflush_r+0xae>
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d6cc:	682f      	ldr	r7, [r5, #0]
 800d6ce:	6a21      	ldr	r1, [r4, #32]
 800d6d0:	602b      	str	r3, [r5, #0]
 800d6d2:	d030      	beq.n	800d736 <__sflush_r+0x92>
 800d6d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d6d6:	89a3      	ldrh	r3, [r4, #12]
 800d6d8:	0759      	lsls	r1, r3, #29
 800d6da:	d505      	bpl.n	800d6e8 <__sflush_r+0x44>
 800d6dc:	6863      	ldr	r3, [r4, #4]
 800d6de:	1ad2      	subs	r2, r2, r3
 800d6e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d6e2:	b10b      	cbz	r3, 800d6e8 <__sflush_r+0x44>
 800d6e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d6e6:	1ad2      	subs	r2, r2, r3
 800d6e8:	2300      	movs	r3, #0
 800d6ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d6ec:	6a21      	ldr	r1, [r4, #32]
 800d6ee:	4628      	mov	r0, r5
 800d6f0:	47b0      	blx	r6
 800d6f2:	1c43      	adds	r3, r0, #1
 800d6f4:	89a3      	ldrh	r3, [r4, #12]
 800d6f6:	d106      	bne.n	800d706 <__sflush_r+0x62>
 800d6f8:	6829      	ldr	r1, [r5, #0]
 800d6fa:	291d      	cmp	r1, #29
 800d6fc:	d82b      	bhi.n	800d756 <__sflush_r+0xb2>
 800d6fe:	4a2a      	ldr	r2, [pc, #168]	@ (800d7a8 <__sflush_r+0x104>)
 800d700:	40ca      	lsrs	r2, r1
 800d702:	07d6      	lsls	r6, r2, #31
 800d704:	d527      	bpl.n	800d756 <__sflush_r+0xb2>
 800d706:	2200      	movs	r2, #0
 800d708:	6062      	str	r2, [r4, #4]
 800d70a:	04d9      	lsls	r1, r3, #19
 800d70c:	6922      	ldr	r2, [r4, #16]
 800d70e:	6022      	str	r2, [r4, #0]
 800d710:	d504      	bpl.n	800d71c <__sflush_r+0x78>
 800d712:	1c42      	adds	r2, r0, #1
 800d714:	d101      	bne.n	800d71a <__sflush_r+0x76>
 800d716:	682b      	ldr	r3, [r5, #0]
 800d718:	b903      	cbnz	r3, 800d71c <__sflush_r+0x78>
 800d71a:	6560      	str	r0, [r4, #84]	@ 0x54
 800d71c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d71e:	602f      	str	r7, [r5, #0]
 800d720:	b1b9      	cbz	r1, 800d752 <__sflush_r+0xae>
 800d722:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d726:	4299      	cmp	r1, r3
 800d728:	d002      	beq.n	800d730 <__sflush_r+0x8c>
 800d72a:	4628      	mov	r0, r5
 800d72c:	f001 fa14 	bl	800eb58 <_free_r>
 800d730:	2300      	movs	r3, #0
 800d732:	6363      	str	r3, [r4, #52]	@ 0x34
 800d734:	e00d      	b.n	800d752 <__sflush_r+0xae>
 800d736:	2301      	movs	r3, #1
 800d738:	4628      	mov	r0, r5
 800d73a:	47b0      	blx	r6
 800d73c:	4602      	mov	r2, r0
 800d73e:	1c50      	adds	r0, r2, #1
 800d740:	d1c9      	bne.n	800d6d6 <__sflush_r+0x32>
 800d742:	682b      	ldr	r3, [r5, #0]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d0c6      	beq.n	800d6d6 <__sflush_r+0x32>
 800d748:	2b1d      	cmp	r3, #29
 800d74a:	d001      	beq.n	800d750 <__sflush_r+0xac>
 800d74c:	2b16      	cmp	r3, #22
 800d74e:	d11e      	bne.n	800d78e <__sflush_r+0xea>
 800d750:	602f      	str	r7, [r5, #0]
 800d752:	2000      	movs	r0, #0
 800d754:	e022      	b.n	800d79c <__sflush_r+0xf8>
 800d756:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d75a:	b21b      	sxth	r3, r3
 800d75c:	e01b      	b.n	800d796 <__sflush_r+0xf2>
 800d75e:	690f      	ldr	r7, [r1, #16]
 800d760:	2f00      	cmp	r7, #0
 800d762:	d0f6      	beq.n	800d752 <__sflush_r+0xae>
 800d764:	0793      	lsls	r3, r2, #30
 800d766:	680e      	ldr	r6, [r1, #0]
 800d768:	bf08      	it	eq
 800d76a:	694b      	ldreq	r3, [r1, #20]
 800d76c:	600f      	str	r7, [r1, #0]
 800d76e:	bf18      	it	ne
 800d770:	2300      	movne	r3, #0
 800d772:	eba6 0807 	sub.w	r8, r6, r7
 800d776:	608b      	str	r3, [r1, #8]
 800d778:	f1b8 0f00 	cmp.w	r8, #0
 800d77c:	dde9      	ble.n	800d752 <__sflush_r+0xae>
 800d77e:	6a21      	ldr	r1, [r4, #32]
 800d780:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d782:	4643      	mov	r3, r8
 800d784:	463a      	mov	r2, r7
 800d786:	4628      	mov	r0, r5
 800d788:	47b0      	blx	r6
 800d78a:	2800      	cmp	r0, #0
 800d78c:	dc08      	bgt.n	800d7a0 <__sflush_r+0xfc>
 800d78e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d792:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d796:	81a3      	strh	r3, [r4, #12]
 800d798:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d79c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7a0:	4407      	add	r7, r0
 800d7a2:	eba8 0800 	sub.w	r8, r8, r0
 800d7a6:	e7e7      	b.n	800d778 <__sflush_r+0xd4>
 800d7a8:	20400001 	.word	0x20400001

0800d7ac <_fflush_r>:
 800d7ac:	b538      	push	{r3, r4, r5, lr}
 800d7ae:	690b      	ldr	r3, [r1, #16]
 800d7b0:	4605      	mov	r5, r0
 800d7b2:	460c      	mov	r4, r1
 800d7b4:	b913      	cbnz	r3, 800d7bc <_fflush_r+0x10>
 800d7b6:	2500      	movs	r5, #0
 800d7b8:	4628      	mov	r0, r5
 800d7ba:	bd38      	pop	{r3, r4, r5, pc}
 800d7bc:	b118      	cbz	r0, 800d7c6 <_fflush_r+0x1a>
 800d7be:	6a03      	ldr	r3, [r0, #32]
 800d7c0:	b90b      	cbnz	r3, 800d7c6 <_fflush_r+0x1a>
 800d7c2:	f000 f8a7 	bl	800d914 <__sinit>
 800d7c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d0f3      	beq.n	800d7b6 <_fflush_r+0xa>
 800d7ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d7d0:	07d0      	lsls	r0, r2, #31
 800d7d2:	d404      	bmi.n	800d7de <_fflush_r+0x32>
 800d7d4:	0599      	lsls	r1, r3, #22
 800d7d6:	d402      	bmi.n	800d7de <_fflush_r+0x32>
 800d7d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d7da:	f000 fb3a 	bl	800de52 <__retarget_lock_acquire_recursive>
 800d7de:	4628      	mov	r0, r5
 800d7e0:	4621      	mov	r1, r4
 800d7e2:	f7ff ff5f 	bl	800d6a4 <__sflush_r>
 800d7e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d7e8:	07da      	lsls	r2, r3, #31
 800d7ea:	4605      	mov	r5, r0
 800d7ec:	d4e4      	bmi.n	800d7b8 <_fflush_r+0xc>
 800d7ee:	89a3      	ldrh	r3, [r4, #12]
 800d7f0:	059b      	lsls	r3, r3, #22
 800d7f2:	d4e1      	bmi.n	800d7b8 <_fflush_r+0xc>
 800d7f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d7f6:	f000 fb2d 	bl	800de54 <__retarget_lock_release_recursive>
 800d7fa:	e7dd      	b.n	800d7b8 <_fflush_r+0xc>

0800d7fc <std>:
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	b510      	push	{r4, lr}
 800d800:	4604      	mov	r4, r0
 800d802:	e9c0 3300 	strd	r3, r3, [r0]
 800d806:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d80a:	6083      	str	r3, [r0, #8]
 800d80c:	8181      	strh	r1, [r0, #12]
 800d80e:	6643      	str	r3, [r0, #100]	@ 0x64
 800d810:	81c2      	strh	r2, [r0, #14]
 800d812:	6183      	str	r3, [r0, #24]
 800d814:	4619      	mov	r1, r3
 800d816:	2208      	movs	r2, #8
 800d818:	305c      	adds	r0, #92	@ 0x5c
 800d81a:	f000 fa2d 	bl	800dc78 <memset>
 800d81e:	4b0d      	ldr	r3, [pc, #52]	@ (800d854 <std+0x58>)
 800d820:	6263      	str	r3, [r4, #36]	@ 0x24
 800d822:	4b0d      	ldr	r3, [pc, #52]	@ (800d858 <std+0x5c>)
 800d824:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d826:	4b0d      	ldr	r3, [pc, #52]	@ (800d85c <std+0x60>)
 800d828:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d82a:	4b0d      	ldr	r3, [pc, #52]	@ (800d860 <std+0x64>)
 800d82c:	6323      	str	r3, [r4, #48]	@ 0x30
 800d82e:	4b0d      	ldr	r3, [pc, #52]	@ (800d864 <std+0x68>)
 800d830:	6224      	str	r4, [r4, #32]
 800d832:	429c      	cmp	r4, r3
 800d834:	d006      	beq.n	800d844 <std+0x48>
 800d836:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d83a:	4294      	cmp	r4, r2
 800d83c:	d002      	beq.n	800d844 <std+0x48>
 800d83e:	33d0      	adds	r3, #208	@ 0xd0
 800d840:	429c      	cmp	r4, r3
 800d842:	d105      	bne.n	800d850 <std+0x54>
 800d844:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d84c:	f000 bb00 	b.w	800de50 <__retarget_lock_init_recursive>
 800d850:	bd10      	pop	{r4, pc}
 800d852:	bf00      	nop
 800d854:	0800dac9 	.word	0x0800dac9
 800d858:	0800daeb 	.word	0x0800daeb
 800d85c:	0800db23 	.word	0x0800db23
 800d860:	0800db47 	.word	0x0800db47
 800d864:	200004d0 	.word	0x200004d0

0800d868 <stdio_exit_handler>:
 800d868:	4a02      	ldr	r2, [pc, #8]	@ (800d874 <stdio_exit_handler+0xc>)
 800d86a:	4903      	ldr	r1, [pc, #12]	@ (800d878 <stdio_exit_handler+0x10>)
 800d86c:	4803      	ldr	r0, [pc, #12]	@ (800d87c <stdio_exit_handler+0x14>)
 800d86e:	f000 b87b 	b.w	800d968 <_fwalk_sglue>
 800d872:	bf00      	nop
 800d874:	20000014 	.word	0x20000014
 800d878:	0800d7ad 	.word	0x0800d7ad
 800d87c:	20000190 	.word	0x20000190

0800d880 <cleanup_stdio>:
 800d880:	6841      	ldr	r1, [r0, #4]
 800d882:	4b0c      	ldr	r3, [pc, #48]	@ (800d8b4 <cleanup_stdio+0x34>)
 800d884:	4299      	cmp	r1, r3
 800d886:	b510      	push	{r4, lr}
 800d888:	4604      	mov	r4, r0
 800d88a:	d001      	beq.n	800d890 <cleanup_stdio+0x10>
 800d88c:	f7ff ff8e 	bl	800d7ac <_fflush_r>
 800d890:	68a1      	ldr	r1, [r4, #8]
 800d892:	4b09      	ldr	r3, [pc, #36]	@ (800d8b8 <cleanup_stdio+0x38>)
 800d894:	4299      	cmp	r1, r3
 800d896:	d002      	beq.n	800d89e <cleanup_stdio+0x1e>
 800d898:	4620      	mov	r0, r4
 800d89a:	f7ff ff87 	bl	800d7ac <_fflush_r>
 800d89e:	68e1      	ldr	r1, [r4, #12]
 800d8a0:	4b06      	ldr	r3, [pc, #24]	@ (800d8bc <cleanup_stdio+0x3c>)
 800d8a2:	4299      	cmp	r1, r3
 800d8a4:	d004      	beq.n	800d8b0 <cleanup_stdio+0x30>
 800d8a6:	4620      	mov	r0, r4
 800d8a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d8ac:	f7ff bf7e 	b.w	800d7ac <_fflush_r>
 800d8b0:	bd10      	pop	{r4, pc}
 800d8b2:	bf00      	nop
 800d8b4:	200004d0 	.word	0x200004d0
 800d8b8:	20000538 	.word	0x20000538
 800d8bc:	200005a0 	.word	0x200005a0

0800d8c0 <global_stdio_init.part.0>:
 800d8c0:	b510      	push	{r4, lr}
 800d8c2:	4b0b      	ldr	r3, [pc, #44]	@ (800d8f0 <global_stdio_init.part.0+0x30>)
 800d8c4:	4c0b      	ldr	r4, [pc, #44]	@ (800d8f4 <global_stdio_init.part.0+0x34>)
 800d8c6:	4a0c      	ldr	r2, [pc, #48]	@ (800d8f8 <global_stdio_init.part.0+0x38>)
 800d8c8:	601a      	str	r2, [r3, #0]
 800d8ca:	4620      	mov	r0, r4
 800d8cc:	2200      	movs	r2, #0
 800d8ce:	2104      	movs	r1, #4
 800d8d0:	f7ff ff94 	bl	800d7fc <std>
 800d8d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d8d8:	2201      	movs	r2, #1
 800d8da:	2109      	movs	r1, #9
 800d8dc:	f7ff ff8e 	bl	800d7fc <std>
 800d8e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d8e4:	2202      	movs	r2, #2
 800d8e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d8ea:	2112      	movs	r1, #18
 800d8ec:	f7ff bf86 	b.w	800d7fc <std>
 800d8f0:	20000608 	.word	0x20000608
 800d8f4:	200004d0 	.word	0x200004d0
 800d8f8:	0800d869 	.word	0x0800d869

0800d8fc <__sfp_lock_acquire>:
 800d8fc:	4801      	ldr	r0, [pc, #4]	@ (800d904 <__sfp_lock_acquire+0x8>)
 800d8fe:	f000 baa8 	b.w	800de52 <__retarget_lock_acquire_recursive>
 800d902:	bf00      	nop
 800d904:	20000610 	.word	0x20000610

0800d908 <__sfp_lock_release>:
 800d908:	4801      	ldr	r0, [pc, #4]	@ (800d910 <__sfp_lock_release+0x8>)
 800d90a:	f000 baa3 	b.w	800de54 <__retarget_lock_release_recursive>
 800d90e:	bf00      	nop
 800d910:	20000610 	.word	0x20000610

0800d914 <__sinit>:
 800d914:	b510      	push	{r4, lr}
 800d916:	4604      	mov	r4, r0
 800d918:	f7ff fff0 	bl	800d8fc <__sfp_lock_acquire>
 800d91c:	6a23      	ldr	r3, [r4, #32]
 800d91e:	b11b      	cbz	r3, 800d928 <__sinit+0x14>
 800d920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d924:	f7ff bff0 	b.w	800d908 <__sfp_lock_release>
 800d928:	4b04      	ldr	r3, [pc, #16]	@ (800d93c <__sinit+0x28>)
 800d92a:	6223      	str	r3, [r4, #32]
 800d92c:	4b04      	ldr	r3, [pc, #16]	@ (800d940 <__sinit+0x2c>)
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d1f5      	bne.n	800d920 <__sinit+0xc>
 800d934:	f7ff ffc4 	bl	800d8c0 <global_stdio_init.part.0>
 800d938:	e7f2      	b.n	800d920 <__sinit+0xc>
 800d93a:	bf00      	nop
 800d93c:	0800d881 	.word	0x0800d881
 800d940:	20000608 	.word	0x20000608

0800d944 <fiprintf>:
 800d944:	b40e      	push	{r1, r2, r3}
 800d946:	b503      	push	{r0, r1, lr}
 800d948:	4601      	mov	r1, r0
 800d94a:	ab03      	add	r3, sp, #12
 800d94c:	4805      	ldr	r0, [pc, #20]	@ (800d964 <fiprintf+0x20>)
 800d94e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d952:	6800      	ldr	r0, [r0, #0]
 800d954:	9301      	str	r3, [sp, #4]
 800d956:	f002 fbab 	bl	80100b0 <_vfiprintf_r>
 800d95a:	b002      	add	sp, #8
 800d95c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d960:	b003      	add	sp, #12
 800d962:	4770      	bx	lr
 800d964:	2000018c 	.word	0x2000018c

0800d968 <_fwalk_sglue>:
 800d968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d96c:	4607      	mov	r7, r0
 800d96e:	4688      	mov	r8, r1
 800d970:	4614      	mov	r4, r2
 800d972:	2600      	movs	r6, #0
 800d974:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d978:	f1b9 0901 	subs.w	r9, r9, #1
 800d97c:	d505      	bpl.n	800d98a <_fwalk_sglue+0x22>
 800d97e:	6824      	ldr	r4, [r4, #0]
 800d980:	2c00      	cmp	r4, #0
 800d982:	d1f7      	bne.n	800d974 <_fwalk_sglue+0xc>
 800d984:	4630      	mov	r0, r6
 800d986:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d98a:	89ab      	ldrh	r3, [r5, #12]
 800d98c:	2b01      	cmp	r3, #1
 800d98e:	d907      	bls.n	800d9a0 <_fwalk_sglue+0x38>
 800d990:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d994:	3301      	adds	r3, #1
 800d996:	d003      	beq.n	800d9a0 <_fwalk_sglue+0x38>
 800d998:	4629      	mov	r1, r5
 800d99a:	4638      	mov	r0, r7
 800d99c:	47c0      	blx	r8
 800d99e:	4306      	orrs	r6, r0
 800d9a0:	3568      	adds	r5, #104	@ 0x68
 800d9a2:	e7e9      	b.n	800d978 <_fwalk_sglue+0x10>

0800d9a4 <iprintf>:
 800d9a4:	b40f      	push	{r0, r1, r2, r3}
 800d9a6:	b507      	push	{r0, r1, r2, lr}
 800d9a8:	4906      	ldr	r1, [pc, #24]	@ (800d9c4 <iprintf+0x20>)
 800d9aa:	ab04      	add	r3, sp, #16
 800d9ac:	6808      	ldr	r0, [r1, #0]
 800d9ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800d9b2:	6881      	ldr	r1, [r0, #8]
 800d9b4:	9301      	str	r3, [sp, #4]
 800d9b6:	f002 fb7b 	bl	80100b0 <_vfiprintf_r>
 800d9ba:	b003      	add	sp, #12
 800d9bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800d9c0:	b004      	add	sp, #16
 800d9c2:	4770      	bx	lr
 800d9c4:	2000018c 	.word	0x2000018c

0800d9c8 <_puts_r>:
 800d9c8:	6a03      	ldr	r3, [r0, #32]
 800d9ca:	b570      	push	{r4, r5, r6, lr}
 800d9cc:	6884      	ldr	r4, [r0, #8]
 800d9ce:	4605      	mov	r5, r0
 800d9d0:	460e      	mov	r6, r1
 800d9d2:	b90b      	cbnz	r3, 800d9d8 <_puts_r+0x10>
 800d9d4:	f7ff ff9e 	bl	800d914 <__sinit>
 800d9d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d9da:	07db      	lsls	r3, r3, #31
 800d9dc:	d405      	bmi.n	800d9ea <_puts_r+0x22>
 800d9de:	89a3      	ldrh	r3, [r4, #12]
 800d9e0:	0598      	lsls	r0, r3, #22
 800d9e2:	d402      	bmi.n	800d9ea <_puts_r+0x22>
 800d9e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d9e6:	f000 fa34 	bl	800de52 <__retarget_lock_acquire_recursive>
 800d9ea:	89a3      	ldrh	r3, [r4, #12]
 800d9ec:	0719      	lsls	r1, r3, #28
 800d9ee:	d502      	bpl.n	800d9f6 <_puts_r+0x2e>
 800d9f0:	6923      	ldr	r3, [r4, #16]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d135      	bne.n	800da62 <_puts_r+0x9a>
 800d9f6:	4621      	mov	r1, r4
 800d9f8:	4628      	mov	r0, r5
 800d9fa:	f000 f8e7 	bl	800dbcc <__swsetup_r>
 800d9fe:	b380      	cbz	r0, 800da62 <_puts_r+0x9a>
 800da00:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800da04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800da06:	07da      	lsls	r2, r3, #31
 800da08:	d405      	bmi.n	800da16 <_puts_r+0x4e>
 800da0a:	89a3      	ldrh	r3, [r4, #12]
 800da0c:	059b      	lsls	r3, r3, #22
 800da0e:	d402      	bmi.n	800da16 <_puts_r+0x4e>
 800da10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800da12:	f000 fa1f 	bl	800de54 <__retarget_lock_release_recursive>
 800da16:	4628      	mov	r0, r5
 800da18:	bd70      	pop	{r4, r5, r6, pc}
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	da04      	bge.n	800da28 <_puts_r+0x60>
 800da1e:	69a2      	ldr	r2, [r4, #24]
 800da20:	429a      	cmp	r2, r3
 800da22:	dc17      	bgt.n	800da54 <_puts_r+0x8c>
 800da24:	290a      	cmp	r1, #10
 800da26:	d015      	beq.n	800da54 <_puts_r+0x8c>
 800da28:	6823      	ldr	r3, [r4, #0]
 800da2a:	1c5a      	adds	r2, r3, #1
 800da2c:	6022      	str	r2, [r4, #0]
 800da2e:	7019      	strb	r1, [r3, #0]
 800da30:	68a3      	ldr	r3, [r4, #8]
 800da32:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800da36:	3b01      	subs	r3, #1
 800da38:	60a3      	str	r3, [r4, #8]
 800da3a:	2900      	cmp	r1, #0
 800da3c:	d1ed      	bne.n	800da1a <_puts_r+0x52>
 800da3e:	2b00      	cmp	r3, #0
 800da40:	da11      	bge.n	800da66 <_puts_r+0x9e>
 800da42:	4622      	mov	r2, r4
 800da44:	210a      	movs	r1, #10
 800da46:	4628      	mov	r0, r5
 800da48:	f000 f881 	bl	800db4e <__swbuf_r>
 800da4c:	3001      	adds	r0, #1
 800da4e:	d0d7      	beq.n	800da00 <_puts_r+0x38>
 800da50:	250a      	movs	r5, #10
 800da52:	e7d7      	b.n	800da04 <_puts_r+0x3c>
 800da54:	4622      	mov	r2, r4
 800da56:	4628      	mov	r0, r5
 800da58:	f000 f879 	bl	800db4e <__swbuf_r>
 800da5c:	3001      	adds	r0, #1
 800da5e:	d1e7      	bne.n	800da30 <_puts_r+0x68>
 800da60:	e7ce      	b.n	800da00 <_puts_r+0x38>
 800da62:	3e01      	subs	r6, #1
 800da64:	e7e4      	b.n	800da30 <_puts_r+0x68>
 800da66:	6823      	ldr	r3, [r4, #0]
 800da68:	1c5a      	adds	r2, r3, #1
 800da6a:	6022      	str	r2, [r4, #0]
 800da6c:	220a      	movs	r2, #10
 800da6e:	701a      	strb	r2, [r3, #0]
 800da70:	e7ee      	b.n	800da50 <_puts_r+0x88>
	...

0800da74 <puts>:
 800da74:	4b02      	ldr	r3, [pc, #8]	@ (800da80 <puts+0xc>)
 800da76:	4601      	mov	r1, r0
 800da78:	6818      	ldr	r0, [r3, #0]
 800da7a:	f7ff bfa5 	b.w	800d9c8 <_puts_r>
 800da7e:	bf00      	nop
 800da80:	2000018c 	.word	0x2000018c

0800da84 <siprintf>:
 800da84:	b40e      	push	{r1, r2, r3}
 800da86:	b510      	push	{r4, lr}
 800da88:	b09d      	sub	sp, #116	@ 0x74
 800da8a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800da8c:	9002      	str	r0, [sp, #8]
 800da8e:	9006      	str	r0, [sp, #24]
 800da90:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800da94:	480a      	ldr	r0, [pc, #40]	@ (800dac0 <siprintf+0x3c>)
 800da96:	9107      	str	r1, [sp, #28]
 800da98:	9104      	str	r1, [sp, #16]
 800da9a:	490a      	ldr	r1, [pc, #40]	@ (800dac4 <siprintf+0x40>)
 800da9c:	f853 2b04 	ldr.w	r2, [r3], #4
 800daa0:	9105      	str	r1, [sp, #20]
 800daa2:	2400      	movs	r4, #0
 800daa4:	a902      	add	r1, sp, #8
 800daa6:	6800      	ldr	r0, [r0, #0]
 800daa8:	9301      	str	r3, [sp, #4]
 800daaa:	941b      	str	r4, [sp, #108]	@ 0x6c
 800daac:	f002 f9da 	bl	800fe64 <_svfiprintf_r>
 800dab0:	9b02      	ldr	r3, [sp, #8]
 800dab2:	701c      	strb	r4, [r3, #0]
 800dab4:	b01d      	add	sp, #116	@ 0x74
 800dab6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800daba:	b003      	add	sp, #12
 800dabc:	4770      	bx	lr
 800dabe:	bf00      	nop
 800dac0:	2000018c 	.word	0x2000018c
 800dac4:	ffff0208 	.word	0xffff0208

0800dac8 <__sread>:
 800dac8:	b510      	push	{r4, lr}
 800daca:	460c      	mov	r4, r1
 800dacc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dad0:	f000 f970 	bl	800ddb4 <_read_r>
 800dad4:	2800      	cmp	r0, #0
 800dad6:	bfab      	itete	ge
 800dad8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800dada:	89a3      	ldrhlt	r3, [r4, #12]
 800dadc:	181b      	addge	r3, r3, r0
 800dade:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800dae2:	bfac      	ite	ge
 800dae4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800dae6:	81a3      	strhlt	r3, [r4, #12]
 800dae8:	bd10      	pop	{r4, pc}

0800daea <__swrite>:
 800daea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800daee:	461f      	mov	r7, r3
 800daf0:	898b      	ldrh	r3, [r1, #12]
 800daf2:	05db      	lsls	r3, r3, #23
 800daf4:	4605      	mov	r5, r0
 800daf6:	460c      	mov	r4, r1
 800daf8:	4616      	mov	r6, r2
 800dafa:	d505      	bpl.n	800db08 <__swrite+0x1e>
 800dafc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db00:	2302      	movs	r3, #2
 800db02:	2200      	movs	r2, #0
 800db04:	f000 f944 	bl	800dd90 <_lseek_r>
 800db08:	89a3      	ldrh	r3, [r4, #12]
 800db0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800db0e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800db12:	81a3      	strh	r3, [r4, #12]
 800db14:	4632      	mov	r2, r6
 800db16:	463b      	mov	r3, r7
 800db18:	4628      	mov	r0, r5
 800db1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800db1e:	f000 b95b 	b.w	800ddd8 <_write_r>

0800db22 <__sseek>:
 800db22:	b510      	push	{r4, lr}
 800db24:	460c      	mov	r4, r1
 800db26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db2a:	f000 f931 	bl	800dd90 <_lseek_r>
 800db2e:	1c43      	adds	r3, r0, #1
 800db30:	89a3      	ldrh	r3, [r4, #12]
 800db32:	bf15      	itete	ne
 800db34:	6560      	strne	r0, [r4, #84]	@ 0x54
 800db36:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800db3a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800db3e:	81a3      	strheq	r3, [r4, #12]
 800db40:	bf18      	it	ne
 800db42:	81a3      	strhne	r3, [r4, #12]
 800db44:	bd10      	pop	{r4, pc}

0800db46 <__sclose>:
 800db46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db4a:	f000 b8b3 	b.w	800dcb4 <_close_r>

0800db4e <__swbuf_r>:
 800db4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db50:	460e      	mov	r6, r1
 800db52:	4614      	mov	r4, r2
 800db54:	4605      	mov	r5, r0
 800db56:	b118      	cbz	r0, 800db60 <__swbuf_r+0x12>
 800db58:	6a03      	ldr	r3, [r0, #32]
 800db5a:	b90b      	cbnz	r3, 800db60 <__swbuf_r+0x12>
 800db5c:	f7ff feda 	bl	800d914 <__sinit>
 800db60:	69a3      	ldr	r3, [r4, #24]
 800db62:	60a3      	str	r3, [r4, #8]
 800db64:	89a3      	ldrh	r3, [r4, #12]
 800db66:	071a      	lsls	r2, r3, #28
 800db68:	d501      	bpl.n	800db6e <__swbuf_r+0x20>
 800db6a:	6923      	ldr	r3, [r4, #16]
 800db6c:	b943      	cbnz	r3, 800db80 <__swbuf_r+0x32>
 800db6e:	4621      	mov	r1, r4
 800db70:	4628      	mov	r0, r5
 800db72:	f000 f82b 	bl	800dbcc <__swsetup_r>
 800db76:	b118      	cbz	r0, 800db80 <__swbuf_r+0x32>
 800db78:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800db7c:	4638      	mov	r0, r7
 800db7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db80:	6823      	ldr	r3, [r4, #0]
 800db82:	6922      	ldr	r2, [r4, #16]
 800db84:	1a98      	subs	r0, r3, r2
 800db86:	6963      	ldr	r3, [r4, #20]
 800db88:	b2f6      	uxtb	r6, r6
 800db8a:	4283      	cmp	r3, r0
 800db8c:	4637      	mov	r7, r6
 800db8e:	dc05      	bgt.n	800db9c <__swbuf_r+0x4e>
 800db90:	4621      	mov	r1, r4
 800db92:	4628      	mov	r0, r5
 800db94:	f7ff fe0a 	bl	800d7ac <_fflush_r>
 800db98:	2800      	cmp	r0, #0
 800db9a:	d1ed      	bne.n	800db78 <__swbuf_r+0x2a>
 800db9c:	68a3      	ldr	r3, [r4, #8]
 800db9e:	3b01      	subs	r3, #1
 800dba0:	60a3      	str	r3, [r4, #8]
 800dba2:	6823      	ldr	r3, [r4, #0]
 800dba4:	1c5a      	adds	r2, r3, #1
 800dba6:	6022      	str	r2, [r4, #0]
 800dba8:	701e      	strb	r6, [r3, #0]
 800dbaa:	6962      	ldr	r2, [r4, #20]
 800dbac:	1c43      	adds	r3, r0, #1
 800dbae:	429a      	cmp	r2, r3
 800dbb0:	d004      	beq.n	800dbbc <__swbuf_r+0x6e>
 800dbb2:	89a3      	ldrh	r3, [r4, #12]
 800dbb4:	07db      	lsls	r3, r3, #31
 800dbb6:	d5e1      	bpl.n	800db7c <__swbuf_r+0x2e>
 800dbb8:	2e0a      	cmp	r6, #10
 800dbba:	d1df      	bne.n	800db7c <__swbuf_r+0x2e>
 800dbbc:	4621      	mov	r1, r4
 800dbbe:	4628      	mov	r0, r5
 800dbc0:	f7ff fdf4 	bl	800d7ac <_fflush_r>
 800dbc4:	2800      	cmp	r0, #0
 800dbc6:	d0d9      	beq.n	800db7c <__swbuf_r+0x2e>
 800dbc8:	e7d6      	b.n	800db78 <__swbuf_r+0x2a>
	...

0800dbcc <__swsetup_r>:
 800dbcc:	b538      	push	{r3, r4, r5, lr}
 800dbce:	4b29      	ldr	r3, [pc, #164]	@ (800dc74 <__swsetup_r+0xa8>)
 800dbd0:	4605      	mov	r5, r0
 800dbd2:	6818      	ldr	r0, [r3, #0]
 800dbd4:	460c      	mov	r4, r1
 800dbd6:	b118      	cbz	r0, 800dbe0 <__swsetup_r+0x14>
 800dbd8:	6a03      	ldr	r3, [r0, #32]
 800dbda:	b90b      	cbnz	r3, 800dbe0 <__swsetup_r+0x14>
 800dbdc:	f7ff fe9a 	bl	800d914 <__sinit>
 800dbe0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dbe4:	0719      	lsls	r1, r3, #28
 800dbe6:	d422      	bmi.n	800dc2e <__swsetup_r+0x62>
 800dbe8:	06da      	lsls	r2, r3, #27
 800dbea:	d407      	bmi.n	800dbfc <__swsetup_r+0x30>
 800dbec:	2209      	movs	r2, #9
 800dbee:	602a      	str	r2, [r5, #0]
 800dbf0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dbf4:	81a3      	strh	r3, [r4, #12]
 800dbf6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dbfa:	e033      	b.n	800dc64 <__swsetup_r+0x98>
 800dbfc:	0758      	lsls	r0, r3, #29
 800dbfe:	d512      	bpl.n	800dc26 <__swsetup_r+0x5a>
 800dc00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dc02:	b141      	cbz	r1, 800dc16 <__swsetup_r+0x4a>
 800dc04:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dc08:	4299      	cmp	r1, r3
 800dc0a:	d002      	beq.n	800dc12 <__swsetup_r+0x46>
 800dc0c:	4628      	mov	r0, r5
 800dc0e:	f000 ffa3 	bl	800eb58 <_free_r>
 800dc12:	2300      	movs	r3, #0
 800dc14:	6363      	str	r3, [r4, #52]	@ 0x34
 800dc16:	89a3      	ldrh	r3, [r4, #12]
 800dc18:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800dc1c:	81a3      	strh	r3, [r4, #12]
 800dc1e:	2300      	movs	r3, #0
 800dc20:	6063      	str	r3, [r4, #4]
 800dc22:	6923      	ldr	r3, [r4, #16]
 800dc24:	6023      	str	r3, [r4, #0]
 800dc26:	89a3      	ldrh	r3, [r4, #12]
 800dc28:	f043 0308 	orr.w	r3, r3, #8
 800dc2c:	81a3      	strh	r3, [r4, #12]
 800dc2e:	6923      	ldr	r3, [r4, #16]
 800dc30:	b94b      	cbnz	r3, 800dc46 <__swsetup_r+0x7a>
 800dc32:	89a3      	ldrh	r3, [r4, #12]
 800dc34:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800dc38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dc3c:	d003      	beq.n	800dc46 <__swsetup_r+0x7a>
 800dc3e:	4621      	mov	r1, r4
 800dc40:	4628      	mov	r0, r5
 800dc42:	f002 fb73 	bl	801032c <__smakebuf_r>
 800dc46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc4a:	f013 0201 	ands.w	r2, r3, #1
 800dc4e:	d00a      	beq.n	800dc66 <__swsetup_r+0x9a>
 800dc50:	2200      	movs	r2, #0
 800dc52:	60a2      	str	r2, [r4, #8]
 800dc54:	6962      	ldr	r2, [r4, #20]
 800dc56:	4252      	negs	r2, r2
 800dc58:	61a2      	str	r2, [r4, #24]
 800dc5a:	6922      	ldr	r2, [r4, #16]
 800dc5c:	b942      	cbnz	r2, 800dc70 <__swsetup_r+0xa4>
 800dc5e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800dc62:	d1c5      	bne.n	800dbf0 <__swsetup_r+0x24>
 800dc64:	bd38      	pop	{r3, r4, r5, pc}
 800dc66:	0799      	lsls	r1, r3, #30
 800dc68:	bf58      	it	pl
 800dc6a:	6962      	ldrpl	r2, [r4, #20]
 800dc6c:	60a2      	str	r2, [r4, #8]
 800dc6e:	e7f4      	b.n	800dc5a <__swsetup_r+0x8e>
 800dc70:	2000      	movs	r0, #0
 800dc72:	e7f7      	b.n	800dc64 <__swsetup_r+0x98>
 800dc74:	2000018c 	.word	0x2000018c

0800dc78 <memset>:
 800dc78:	4402      	add	r2, r0
 800dc7a:	4603      	mov	r3, r0
 800dc7c:	4293      	cmp	r3, r2
 800dc7e:	d100      	bne.n	800dc82 <memset+0xa>
 800dc80:	4770      	bx	lr
 800dc82:	f803 1b01 	strb.w	r1, [r3], #1
 800dc86:	e7f9      	b.n	800dc7c <memset+0x4>

0800dc88 <strncmp>:
 800dc88:	b510      	push	{r4, lr}
 800dc8a:	b16a      	cbz	r2, 800dca8 <strncmp+0x20>
 800dc8c:	3901      	subs	r1, #1
 800dc8e:	1884      	adds	r4, r0, r2
 800dc90:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc94:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800dc98:	429a      	cmp	r2, r3
 800dc9a:	d103      	bne.n	800dca4 <strncmp+0x1c>
 800dc9c:	42a0      	cmp	r0, r4
 800dc9e:	d001      	beq.n	800dca4 <strncmp+0x1c>
 800dca0:	2a00      	cmp	r2, #0
 800dca2:	d1f5      	bne.n	800dc90 <strncmp+0x8>
 800dca4:	1ad0      	subs	r0, r2, r3
 800dca6:	bd10      	pop	{r4, pc}
 800dca8:	4610      	mov	r0, r2
 800dcaa:	e7fc      	b.n	800dca6 <strncmp+0x1e>

0800dcac <_localeconv_r>:
 800dcac:	4800      	ldr	r0, [pc, #0]	@ (800dcb0 <_localeconv_r+0x4>)
 800dcae:	4770      	bx	lr
 800dcb0:	20000110 	.word	0x20000110

0800dcb4 <_close_r>:
 800dcb4:	b538      	push	{r3, r4, r5, lr}
 800dcb6:	4d06      	ldr	r5, [pc, #24]	@ (800dcd0 <_close_r+0x1c>)
 800dcb8:	2300      	movs	r3, #0
 800dcba:	4604      	mov	r4, r0
 800dcbc:	4608      	mov	r0, r1
 800dcbe:	602b      	str	r3, [r5, #0]
 800dcc0:	f7f4 fd94 	bl	80027ec <_close>
 800dcc4:	1c43      	adds	r3, r0, #1
 800dcc6:	d102      	bne.n	800dcce <_close_r+0x1a>
 800dcc8:	682b      	ldr	r3, [r5, #0]
 800dcca:	b103      	cbz	r3, 800dcce <_close_r+0x1a>
 800dccc:	6023      	str	r3, [r4, #0]
 800dcce:	bd38      	pop	{r3, r4, r5, pc}
 800dcd0:	2000060c 	.word	0x2000060c

0800dcd4 <_reclaim_reent>:
 800dcd4:	4b2d      	ldr	r3, [pc, #180]	@ (800dd8c <_reclaim_reent+0xb8>)
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	4283      	cmp	r3, r0
 800dcda:	b570      	push	{r4, r5, r6, lr}
 800dcdc:	4604      	mov	r4, r0
 800dcde:	d053      	beq.n	800dd88 <_reclaim_reent+0xb4>
 800dce0:	69c3      	ldr	r3, [r0, #28]
 800dce2:	b31b      	cbz	r3, 800dd2c <_reclaim_reent+0x58>
 800dce4:	68db      	ldr	r3, [r3, #12]
 800dce6:	b163      	cbz	r3, 800dd02 <_reclaim_reent+0x2e>
 800dce8:	2500      	movs	r5, #0
 800dcea:	69e3      	ldr	r3, [r4, #28]
 800dcec:	68db      	ldr	r3, [r3, #12]
 800dcee:	5959      	ldr	r1, [r3, r5]
 800dcf0:	b9b1      	cbnz	r1, 800dd20 <_reclaim_reent+0x4c>
 800dcf2:	3504      	adds	r5, #4
 800dcf4:	2d80      	cmp	r5, #128	@ 0x80
 800dcf6:	d1f8      	bne.n	800dcea <_reclaim_reent+0x16>
 800dcf8:	69e3      	ldr	r3, [r4, #28]
 800dcfa:	4620      	mov	r0, r4
 800dcfc:	68d9      	ldr	r1, [r3, #12]
 800dcfe:	f000 ff2b 	bl	800eb58 <_free_r>
 800dd02:	69e3      	ldr	r3, [r4, #28]
 800dd04:	6819      	ldr	r1, [r3, #0]
 800dd06:	b111      	cbz	r1, 800dd0e <_reclaim_reent+0x3a>
 800dd08:	4620      	mov	r0, r4
 800dd0a:	f000 ff25 	bl	800eb58 <_free_r>
 800dd0e:	69e3      	ldr	r3, [r4, #28]
 800dd10:	689d      	ldr	r5, [r3, #8]
 800dd12:	b15d      	cbz	r5, 800dd2c <_reclaim_reent+0x58>
 800dd14:	4629      	mov	r1, r5
 800dd16:	4620      	mov	r0, r4
 800dd18:	682d      	ldr	r5, [r5, #0]
 800dd1a:	f000 ff1d 	bl	800eb58 <_free_r>
 800dd1e:	e7f8      	b.n	800dd12 <_reclaim_reent+0x3e>
 800dd20:	680e      	ldr	r6, [r1, #0]
 800dd22:	4620      	mov	r0, r4
 800dd24:	f000 ff18 	bl	800eb58 <_free_r>
 800dd28:	4631      	mov	r1, r6
 800dd2a:	e7e1      	b.n	800dcf0 <_reclaim_reent+0x1c>
 800dd2c:	6961      	ldr	r1, [r4, #20]
 800dd2e:	b111      	cbz	r1, 800dd36 <_reclaim_reent+0x62>
 800dd30:	4620      	mov	r0, r4
 800dd32:	f000 ff11 	bl	800eb58 <_free_r>
 800dd36:	69e1      	ldr	r1, [r4, #28]
 800dd38:	b111      	cbz	r1, 800dd40 <_reclaim_reent+0x6c>
 800dd3a:	4620      	mov	r0, r4
 800dd3c:	f000 ff0c 	bl	800eb58 <_free_r>
 800dd40:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800dd42:	b111      	cbz	r1, 800dd4a <_reclaim_reent+0x76>
 800dd44:	4620      	mov	r0, r4
 800dd46:	f000 ff07 	bl	800eb58 <_free_r>
 800dd4a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dd4c:	b111      	cbz	r1, 800dd54 <_reclaim_reent+0x80>
 800dd4e:	4620      	mov	r0, r4
 800dd50:	f000 ff02 	bl	800eb58 <_free_r>
 800dd54:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800dd56:	b111      	cbz	r1, 800dd5e <_reclaim_reent+0x8a>
 800dd58:	4620      	mov	r0, r4
 800dd5a:	f000 fefd 	bl	800eb58 <_free_r>
 800dd5e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800dd60:	b111      	cbz	r1, 800dd68 <_reclaim_reent+0x94>
 800dd62:	4620      	mov	r0, r4
 800dd64:	f000 fef8 	bl	800eb58 <_free_r>
 800dd68:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800dd6a:	b111      	cbz	r1, 800dd72 <_reclaim_reent+0x9e>
 800dd6c:	4620      	mov	r0, r4
 800dd6e:	f000 fef3 	bl	800eb58 <_free_r>
 800dd72:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800dd74:	b111      	cbz	r1, 800dd7c <_reclaim_reent+0xa8>
 800dd76:	4620      	mov	r0, r4
 800dd78:	f000 feee 	bl	800eb58 <_free_r>
 800dd7c:	6a23      	ldr	r3, [r4, #32]
 800dd7e:	b11b      	cbz	r3, 800dd88 <_reclaim_reent+0xb4>
 800dd80:	4620      	mov	r0, r4
 800dd82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dd86:	4718      	bx	r3
 800dd88:	bd70      	pop	{r4, r5, r6, pc}
 800dd8a:	bf00      	nop
 800dd8c:	2000018c 	.word	0x2000018c

0800dd90 <_lseek_r>:
 800dd90:	b538      	push	{r3, r4, r5, lr}
 800dd92:	4d07      	ldr	r5, [pc, #28]	@ (800ddb0 <_lseek_r+0x20>)
 800dd94:	4604      	mov	r4, r0
 800dd96:	4608      	mov	r0, r1
 800dd98:	4611      	mov	r1, r2
 800dd9a:	2200      	movs	r2, #0
 800dd9c:	602a      	str	r2, [r5, #0]
 800dd9e:	461a      	mov	r2, r3
 800dda0:	f7f4 fd6a 	bl	8002878 <_lseek>
 800dda4:	1c43      	adds	r3, r0, #1
 800dda6:	d102      	bne.n	800ddae <_lseek_r+0x1e>
 800dda8:	682b      	ldr	r3, [r5, #0]
 800ddaa:	b103      	cbz	r3, 800ddae <_lseek_r+0x1e>
 800ddac:	6023      	str	r3, [r4, #0]
 800ddae:	bd38      	pop	{r3, r4, r5, pc}
 800ddb0:	2000060c 	.word	0x2000060c

0800ddb4 <_read_r>:
 800ddb4:	b538      	push	{r3, r4, r5, lr}
 800ddb6:	4d07      	ldr	r5, [pc, #28]	@ (800ddd4 <_read_r+0x20>)
 800ddb8:	4604      	mov	r4, r0
 800ddba:	4608      	mov	r0, r1
 800ddbc:	4611      	mov	r1, r2
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	602a      	str	r2, [r5, #0]
 800ddc2:	461a      	mov	r2, r3
 800ddc4:	f7f4 fc5c 	bl	8002680 <_read>
 800ddc8:	1c43      	adds	r3, r0, #1
 800ddca:	d102      	bne.n	800ddd2 <_read_r+0x1e>
 800ddcc:	682b      	ldr	r3, [r5, #0]
 800ddce:	b103      	cbz	r3, 800ddd2 <_read_r+0x1e>
 800ddd0:	6023      	str	r3, [r4, #0]
 800ddd2:	bd38      	pop	{r3, r4, r5, pc}
 800ddd4:	2000060c 	.word	0x2000060c

0800ddd8 <_write_r>:
 800ddd8:	b538      	push	{r3, r4, r5, lr}
 800ddda:	4d07      	ldr	r5, [pc, #28]	@ (800ddf8 <_write_r+0x20>)
 800dddc:	4604      	mov	r4, r0
 800ddde:	4608      	mov	r0, r1
 800dde0:	4611      	mov	r1, r2
 800dde2:	2200      	movs	r2, #0
 800dde4:	602a      	str	r2, [r5, #0]
 800dde6:	461a      	mov	r2, r3
 800dde8:	f7f4 fc90 	bl	800270c <_write>
 800ddec:	1c43      	adds	r3, r0, #1
 800ddee:	d102      	bne.n	800ddf6 <_write_r+0x1e>
 800ddf0:	682b      	ldr	r3, [r5, #0]
 800ddf2:	b103      	cbz	r3, 800ddf6 <_write_r+0x1e>
 800ddf4:	6023      	str	r3, [r4, #0]
 800ddf6:	bd38      	pop	{r3, r4, r5, pc}
 800ddf8:	2000060c 	.word	0x2000060c

0800ddfc <__errno>:
 800ddfc:	4b01      	ldr	r3, [pc, #4]	@ (800de04 <__errno+0x8>)
 800ddfe:	6818      	ldr	r0, [r3, #0]
 800de00:	4770      	bx	lr
 800de02:	bf00      	nop
 800de04:	2000018c 	.word	0x2000018c

0800de08 <__libc_init_array>:
 800de08:	b570      	push	{r4, r5, r6, lr}
 800de0a:	4d0d      	ldr	r5, [pc, #52]	@ (800de40 <__libc_init_array+0x38>)
 800de0c:	4c0d      	ldr	r4, [pc, #52]	@ (800de44 <__libc_init_array+0x3c>)
 800de0e:	1b64      	subs	r4, r4, r5
 800de10:	10a4      	asrs	r4, r4, #2
 800de12:	2600      	movs	r6, #0
 800de14:	42a6      	cmp	r6, r4
 800de16:	d109      	bne.n	800de2c <__libc_init_array+0x24>
 800de18:	4d0b      	ldr	r5, [pc, #44]	@ (800de48 <__libc_init_array+0x40>)
 800de1a:	4c0c      	ldr	r4, [pc, #48]	@ (800de4c <__libc_init_array+0x44>)
 800de1c:	f002 fb4a 	bl	80104b4 <_init>
 800de20:	1b64      	subs	r4, r4, r5
 800de22:	10a4      	asrs	r4, r4, #2
 800de24:	2600      	movs	r6, #0
 800de26:	42a6      	cmp	r6, r4
 800de28:	d105      	bne.n	800de36 <__libc_init_array+0x2e>
 800de2a:	bd70      	pop	{r4, r5, r6, pc}
 800de2c:	f855 3b04 	ldr.w	r3, [r5], #4
 800de30:	4798      	blx	r3
 800de32:	3601      	adds	r6, #1
 800de34:	e7ee      	b.n	800de14 <__libc_init_array+0xc>
 800de36:	f855 3b04 	ldr.w	r3, [r5], #4
 800de3a:	4798      	blx	r3
 800de3c:	3601      	adds	r6, #1
 800de3e:	e7f2      	b.n	800de26 <__libc_init_array+0x1e>
 800de40:	08011384 	.word	0x08011384
 800de44:	08011384 	.word	0x08011384
 800de48:	08011384 	.word	0x08011384
 800de4c:	0801138c 	.word	0x0801138c

0800de50 <__retarget_lock_init_recursive>:
 800de50:	4770      	bx	lr

0800de52 <__retarget_lock_acquire_recursive>:
 800de52:	4770      	bx	lr

0800de54 <__retarget_lock_release_recursive>:
 800de54:	4770      	bx	lr

0800de56 <memcpy>:
 800de56:	440a      	add	r2, r1
 800de58:	4291      	cmp	r1, r2
 800de5a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800de5e:	d100      	bne.n	800de62 <memcpy+0xc>
 800de60:	4770      	bx	lr
 800de62:	b510      	push	{r4, lr}
 800de64:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de68:	f803 4f01 	strb.w	r4, [r3, #1]!
 800de6c:	4291      	cmp	r1, r2
 800de6e:	d1f9      	bne.n	800de64 <memcpy+0xe>
 800de70:	bd10      	pop	{r4, pc}
 800de72:	0000      	movs	r0, r0
 800de74:	0000      	movs	r0, r0
	...

0800de78 <nan>:
 800de78:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800de80 <nan+0x8>
 800de7c:	4770      	bx	lr
 800de7e:	bf00      	nop
 800de80:	00000000 	.word	0x00000000
 800de84:	7ff80000 	.word	0x7ff80000

0800de88 <nanf>:
 800de88:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800de90 <nanf+0x8>
 800de8c:	4770      	bx	lr
 800de8e:	bf00      	nop
 800de90:	7fc00000 	.word	0x7fc00000

0800de94 <abort>:
 800de94:	b508      	push	{r3, lr}
 800de96:	2006      	movs	r0, #6
 800de98:	f002 fac6 	bl	8010428 <raise>
 800de9c:	2001      	movs	r0, #1
 800de9e:	f7f4 fbe3 	bl	8002668 <_exit>

0800dea2 <quorem>:
 800dea2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dea6:	6903      	ldr	r3, [r0, #16]
 800dea8:	690c      	ldr	r4, [r1, #16]
 800deaa:	42a3      	cmp	r3, r4
 800deac:	4607      	mov	r7, r0
 800deae:	db7e      	blt.n	800dfae <quorem+0x10c>
 800deb0:	3c01      	subs	r4, #1
 800deb2:	f101 0814 	add.w	r8, r1, #20
 800deb6:	00a3      	lsls	r3, r4, #2
 800deb8:	f100 0514 	add.w	r5, r0, #20
 800debc:	9300      	str	r3, [sp, #0]
 800debe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dec2:	9301      	str	r3, [sp, #4]
 800dec4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800dec8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800decc:	3301      	adds	r3, #1
 800dece:	429a      	cmp	r2, r3
 800ded0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ded4:	fbb2 f6f3 	udiv	r6, r2, r3
 800ded8:	d32e      	bcc.n	800df38 <quorem+0x96>
 800deda:	f04f 0a00 	mov.w	sl, #0
 800dede:	46c4      	mov	ip, r8
 800dee0:	46ae      	mov	lr, r5
 800dee2:	46d3      	mov	fp, sl
 800dee4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800dee8:	b298      	uxth	r0, r3
 800deea:	fb06 a000 	mla	r0, r6, r0, sl
 800deee:	0c02      	lsrs	r2, r0, #16
 800def0:	0c1b      	lsrs	r3, r3, #16
 800def2:	fb06 2303 	mla	r3, r6, r3, r2
 800def6:	f8de 2000 	ldr.w	r2, [lr]
 800defa:	b280      	uxth	r0, r0
 800defc:	b292      	uxth	r2, r2
 800defe:	1a12      	subs	r2, r2, r0
 800df00:	445a      	add	r2, fp
 800df02:	f8de 0000 	ldr.w	r0, [lr]
 800df06:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800df0a:	b29b      	uxth	r3, r3
 800df0c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800df10:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800df14:	b292      	uxth	r2, r2
 800df16:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800df1a:	45e1      	cmp	r9, ip
 800df1c:	f84e 2b04 	str.w	r2, [lr], #4
 800df20:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800df24:	d2de      	bcs.n	800dee4 <quorem+0x42>
 800df26:	9b00      	ldr	r3, [sp, #0]
 800df28:	58eb      	ldr	r3, [r5, r3]
 800df2a:	b92b      	cbnz	r3, 800df38 <quorem+0x96>
 800df2c:	9b01      	ldr	r3, [sp, #4]
 800df2e:	3b04      	subs	r3, #4
 800df30:	429d      	cmp	r5, r3
 800df32:	461a      	mov	r2, r3
 800df34:	d32f      	bcc.n	800df96 <quorem+0xf4>
 800df36:	613c      	str	r4, [r7, #16]
 800df38:	4638      	mov	r0, r7
 800df3a:	f001 fc93 	bl	800f864 <__mcmp>
 800df3e:	2800      	cmp	r0, #0
 800df40:	db25      	blt.n	800df8e <quorem+0xec>
 800df42:	4629      	mov	r1, r5
 800df44:	2000      	movs	r0, #0
 800df46:	f858 2b04 	ldr.w	r2, [r8], #4
 800df4a:	f8d1 c000 	ldr.w	ip, [r1]
 800df4e:	fa1f fe82 	uxth.w	lr, r2
 800df52:	fa1f f38c 	uxth.w	r3, ip
 800df56:	eba3 030e 	sub.w	r3, r3, lr
 800df5a:	4403      	add	r3, r0
 800df5c:	0c12      	lsrs	r2, r2, #16
 800df5e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800df62:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800df66:	b29b      	uxth	r3, r3
 800df68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800df6c:	45c1      	cmp	r9, r8
 800df6e:	f841 3b04 	str.w	r3, [r1], #4
 800df72:	ea4f 4022 	mov.w	r0, r2, asr #16
 800df76:	d2e6      	bcs.n	800df46 <quorem+0xa4>
 800df78:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800df7c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800df80:	b922      	cbnz	r2, 800df8c <quorem+0xea>
 800df82:	3b04      	subs	r3, #4
 800df84:	429d      	cmp	r5, r3
 800df86:	461a      	mov	r2, r3
 800df88:	d30b      	bcc.n	800dfa2 <quorem+0x100>
 800df8a:	613c      	str	r4, [r7, #16]
 800df8c:	3601      	adds	r6, #1
 800df8e:	4630      	mov	r0, r6
 800df90:	b003      	add	sp, #12
 800df92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df96:	6812      	ldr	r2, [r2, #0]
 800df98:	3b04      	subs	r3, #4
 800df9a:	2a00      	cmp	r2, #0
 800df9c:	d1cb      	bne.n	800df36 <quorem+0x94>
 800df9e:	3c01      	subs	r4, #1
 800dfa0:	e7c6      	b.n	800df30 <quorem+0x8e>
 800dfa2:	6812      	ldr	r2, [r2, #0]
 800dfa4:	3b04      	subs	r3, #4
 800dfa6:	2a00      	cmp	r2, #0
 800dfa8:	d1ef      	bne.n	800df8a <quorem+0xe8>
 800dfaa:	3c01      	subs	r4, #1
 800dfac:	e7ea      	b.n	800df84 <quorem+0xe2>
 800dfae:	2000      	movs	r0, #0
 800dfb0:	e7ee      	b.n	800df90 <quorem+0xee>
 800dfb2:	0000      	movs	r0, r0
 800dfb4:	0000      	movs	r0, r0
	...

0800dfb8 <_dtoa_r>:
 800dfb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfbc:	69c7      	ldr	r7, [r0, #28]
 800dfbe:	b097      	sub	sp, #92	@ 0x5c
 800dfc0:	ed8d 0b04 	vstr	d0, [sp, #16]
 800dfc4:	ec55 4b10 	vmov	r4, r5, d0
 800dfc8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800dfca:	9107      	str	r1, [sp, #28]
 800dfcc:	4681      	mov	r9, r0
 800dfce:	920c      	str	r2, [sp, #48]	@ 0x30
 800dfd0:	9311      	str	r3, [sp, #68]	@ 0x44
 800dfd2:	b97f      	cbnz	r7, 800dff4 <_dtoa_r+0x3c>
 800dfd4:	2010      	movs	r0, #16
 800dfd6:	f7fd fe3d 	bl	800bc54 <malloc>
 800dfda:	4602      	mov	r2, r0
 800dfdc:	f8c9 001c 	str.w	r0, [r9, #28]
 800dfe0:	b920      	cbnz	r0, 800dfec <_dtoa_r+0x34>
 800dfe2:	4ba9      	ldr	r3, [pc, #676]	@ (800e288 <_dtoa_r+0x2d0>)
 800dfe4:	21ef      	movs	r1, #239	@ 0xef
 800dfe6:	48a9      	ldr	r0, [pc, #676]	@ (800e28c <_dtoa_r+0x2d4>)
 800dfe8:	f7fd fe02 	bl	800bbf0 <__assert_func>
 800dfec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800dff0:	6007      	str	r7, [r0, #0]
 800dff2:	60c7      	str	r7, [r0, #12]
 800dff4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800dff8:	6819      	ldr	r1, [r3, #0]
 800dffa:	b159      	cbz	r1, 800e014 <_dtoa_r+0x5c>
 800dffc:	685a      	ldr	r2, [r3, #4]
 800dffe:	604a      	str	r2, [r1, #4]
 800e000:	2301      	movs	r3, #1
 800e002:	4093      	lsls	r3, r2
 800e004:	608b      	str	r3, [r1, #8]
 800e006:	4648      	mov	r0, r9
 800e008:	f001 f9b0 	bl	800f36c <_Bfree>
 800e00c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e010:	2200      	movs	r2, #0
 800e012:	601a      	str	r2, [r3, #0]
 800e014:	1e2b      	subs	r3, r5, #0
 800e016:	bfb9      	ittee	lt
 800e018:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e01c:	9305      	strlt	r3, [sp, #20]
 800e01e:	2300      	movge	r3, #0
 800e020:	6033      	strge	r3, [r6, #0]
 800e022:	9f05      	ldr	r7, [sp, #20]
 800e024:	4b9a      	ldr	r3, [pc, #616]	@ (800e290 <_dtoa_r+0x2d8>)
 800e026:	bfbc      	itt	lt
 800e028:	2201      	movlt	r2, #1
 800e02a:	6032      	strlt	r2, [r6, #0]
 800e02c:	43bb      	bics	r3, r7
 800e02e:	d112      	bne.n	800e056 <_dtoa_r+0x9e>
 800e030:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e032:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e036:	6013      	str	r3, [r2, #0]
 800e038:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e03c:	4323      	orrs	r3, r4
 800e03e:	f000 855a 	beq.w	800eaf6 <_dtoa_r+0xb3e>
 800e042:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e044:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800e2a4 <_dtoa_r+0x2ec>
 800e048:	2b00      	cmp	r3, #0
 800e04a:	f000 855c 	beq.w	800eb06 <_dtoa_r+0xb4e>
 800e04e:	f10a 0303 	add.w	r3, sl, #3
 800e052:	f000 bd56 	b.w	800eb02 <_dtoa_r+0xb4a>
 800e056:	ed9d 7b04 	vldr	d7, [sp, #16]
 800e05a:	2200      	movs	r2, #0
 800e05c:	ec51 0b17 	vmov	r0, r1, d7
 800e060:	2300      	movs	r3, #0
 800e062:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800e066:	f7f2 fd4f 	bl	8000b08 <__aeabi_dcmpeq>
 800e06a:	4680      	mov	r8, r0
 800e06c:	b158      	cbz	r0, 800e086 <_dtoa_r+0xce>
 800e06e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e070:	2301      	movs	r3, #1
 800e072:	6013      	str	r3, [r2, #0]
 800e074:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e076:	b113      	cbz	r3, 800e07e <_dtoa_r+0xc6>
 800e078:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800e07a:	4b86      	ldr	r3, [pc, #536]	@ (800e294 <_dtoa_r+0x2dc>)
 800e07c:	6013      	str	r3, [r2, #0]
 800e07e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800e2a8 <_dtoa_r+0x2f0>
 800e082:	f000 bd40 	b.w	800eb06 <_dtoa_r+0xb4e>
 800e086:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800e08a:	aa14      	add	r2, sp, #80	@ 0x50
 800e08c:	a915      	add	r1, sp, #84	@ 0x54
 800e08e:	4648      	mov	r0, r9
 800e090:	f001 fd08 	bl	800faa4 <__d2b>
 800e094:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e098:	9002      	str	r0, [sp, #8]
 800e09a:	2e00      	cmp	r6, #0
 800e09c:	d078      	beq.n	800e190 <_dtoa_r+0x1d8>
 800e09e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e0a0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800e0a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e0a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e0ac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e0b0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e0b4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e0b8:	4619      	mov	r1, r3
 800e0ba:	2200      	movs	r2, #0
 800e0bc:	4b76      	ldr	r3, [pc, #472]	@ (800e298 <_dtoa_r+0x2e0>)
 800e0be:	f7f2 f903 	bl	80002c8 <__aeabi_dsub>
 800e0c2:	a36b      	add	r3, pc, #428	@ (adr r3, 800e270 <_dtoa_r+0x2b8>)
 800e0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0c8:	f7f2 fab6 	bl	8000638 <__aeabi_dmul>
 800e0cc:	a36a      	add	r3, pc, #424	@ (adr r3, 800e278 <_dtoa_r+0x2c0>)
 800e0ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0d2:	f7f2 f8fb 	bl	80002cc <__adddf3>
 800e0d6:	4604      	mov	r4, r0
 800e0d8:	4630      	mov	r0, r6
 800e0da:	460d      	mov	r5, r1
 800e0dc:	f7f2 fa42 	bl	8000564 <__aeabi_i2d>
 800e0e0:	a367      	add	r3, pc, #412	@ (adr r3, 800e280 <_dtoa_r+0x2c8>)
 800e0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0e6:	f7f2 faa7 	bl	8000638 <__aeabi_dmul>
 800e0ea:	4602      	mov	r2, r0
 800e0ec:	460b      	mov	r3, r1
 800e0ee:	4620      	mov	r0, r4
 800e0f0:	4629      	mov	r1, r5
 800e0f2:	f7f2 f8eb 	bl	80002cc <__adddf3>
 800e0f6:	4604      	mov	r4, r0
 800e0f8:	460d      	mov	r5, r1
 800e0fa:	f7f2 fd4d 	bl	8000b98 <__aeabi_d2iz>
 800e0fe:	2200      	movs	r2, #0
 800e100:	4607      	mov	r7, r0
 800e102:	2300      	movs	r3, #0
 800e104:	4620      	mov	r0, r4
 800e106:	4629      	mov	r1, r5
 800e108:	f7f2 fd08 	bl	8000b1c <__aeabi_dcmplt>
 800e10c:	b140      	cbz	r0, 800e120 <_dtoa_r+0x168>
 800e10e:	4638      	mov	r0, r7
 800e110:	f7f2 fa28 	bl	8000564 <__aeabi_i2d>
 800e114:	4622      	mov	r2, r4
 800e116:	462b      	mov	r3, r5
 800e118:	f7f2 fcf6 	bl	8000b08 <__aeabi_dcmpeq>
 800e11c:	b900      	cbnz	r0, 800e120 <_dtoa_r+0x168>
 800e11e:	3f01      	subs	r7, #1
 800e120:	2f16      	cmp	r7, #22
 800e122:	d852      	bhi.n	800e1ca <_dtoa_r+0x212>
 800e124:	4b5d      	ldr	r3, [pc, #372]	@ (800e29c <_dtoa_r+0x2e4>)
 800e126:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e12e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e132:	f7f2 fcf3 	bl	8000b1c <__aeabi_dcmplt>
 800e136:	2800      	cmp	r0, #0
 800e138:	d049      	beq.n	800e1ce <_dtoa_r+0x216>
 800e13a:	3f01      	subs	r7, #1
 800e13c:	2300      	movs	r3, #0
 800e13e:	9310      	str	r3, [sp, #64]	@ 0x40
 800e140:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e142:	1b9b      	subs	r3, r3, r6
 800e144:	1e5a      	subs	r2, r3, #1
 800e146:	bf45      	ittet	mi
 800e148:	f1c3 0301 	rsbmi	r3, r3, #1
 800e14c:	9300      	strmi	r3, [sp, #0]
 800e14e:	2300      	movpl	r3, #0
 800e150:	2300      	movmi	r3, #0
 800e152:	9206      	str	r2, [sp, #24]
 800e154:	bf54      	ite	pl
 800e156:	9300      	strpl	r3, [sp, #0]
 800e158:	9306      	strmi	r3, [sp, #24]
 800e15a:	2f00      	cmp	r7, #0
 800e15c:	db39      	blt.n	800e1d2 <_dtoa_r+0x21a>
 800e15e:	9b06      	ldr	r3, [sp, #24]
 800e160:	970d      	str	r7, [sp, #52]	@ 0x34
 800e162:	443b      	add	r3, r7
 800e164:	9306      	str	r3, [sp, #24]
 800e166:	2300      	movs	r3, #0
 800e168:	9308      	str	r3, [sp, #32]
 800e16a:	9b07      	ldr	r3, [sp, #28]
 800e16c:	2b09      	cmp	r3, #9
 800e16e:	d863      	bhi.n	800e238 <_dtoa_r+0x280>
 800e170:	2b05      	cmp	r3, #5
 800e172:	bfc4      	itt	gt
 800e174:	3b04      	subgt	r3, #4
 800e176:	9307      	strgt	r3, [sp, #28]
 800e178:	9b07      	ldr	r3, [sp, #28]
 800e17a:	f1a3 0302 	sub.w	r3, r3, #2
 800e17e:	bfcc      	ite	gt
 800e180:	2400      	movgt	r4, #0
 800e182:	2401      	movle	r4, #1
 800e184:	2b03      	cmp	r3, #3
 800e186:	d863      	bhi.n	800e250 <_dtoa_r+0x298>
 800e188:	e8df f003 	tbb	[pc, r3]
 800e18c:	2b375452 	.word	0x2b375452
 800e190:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800e194:	441e      	add	r6, r3
 800e196:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e19a:	2b20      	cmp	r3, #32
 800e19c:	bfc1      	itttt	gt
 800e19e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e1a2:	409f      	lslgt	r7, r3
 800e1a4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e1a8:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e1ac:	bfd6      	itet	le
 800e1ae:	f1c3 0320 	rsble	r3, r3, #32
 800e1b2:	ea47 0003 	orrgt.w	r0, r7, r3
 800e1b6:	fa04 f003 	lslle.w	r0, r4, r3
 800e1ba:	f7f2 f9c3 	bl	8000544 <__aeabi_ui2d>
 800e1be:	2201      	movs	r2, #1
 800e1c0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e1c4:	3e01      	subs	r6, #1
 800e1c6:	9212      	str	r2, [sp, #72]	@ 0x48
 800e1c8:	e776      	b.n	800e0b8 <_dtoa_r+0x100>
 800e1ca:	2301      	movs	r3, #1
 800e1cc:	e7b7      	b.n	800e13e <_dtoa_r+0x186>
 800e1ce:	9010      	str	r0, [sp, #64]	@ 0x40
 800e1d0:	e7b6      	b.n	800e140 <_dtoa_r+0x188>
 800e1d2:	9b00      	ldr	r3, [sp, #0]
 800e1d4:	1bdb      	subs	r3, r3, r7
 800e1d6:	9300      	str	r3, [sp, #0]
 800e1d8:	427b      	negs	r3, r7
 800e1da:	9308      	str	r3, [sp, #32]
 800e1dc:	2300      	movs	r3, #0
 800e1de:	930d      	str	r3, [sp, #52]	@ 0x34
 800e1e0:	e7c3      	b.n	800e16a <_dtoa_r+0x1b2>
 800e1e2:	2301      	movs	r3, #1
 800e1e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800e1e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e1e8:	eb07 0b03 	add.w	fp, r7, r3
 800e1ec:	f10b 0301 	add.w	r3, fp, #1
 800e1f0:	2b01      	cmp	r3, #1
 800e1f2:	9303      	str	r3, [sp, #12]
 800e1f4:	bfb8      	it	lt
 800e1f6:	2301      	movlt	r3, #1
 800e1f8:	e006      	b.n	800e208 <_dtoa_r+0x250>
 800e1fa:	2301      	movs	r3, #1
 800e1fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800e1fe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e200:	2b00      	cmp	r3, #0
 800e202:	dd28      	ble.n	800e256 <_dtoa_r+0x29e>
 800e204:	469b      	mov	fp, r3
 800e206:	9303      	str	r3, [sp, #12]
 800e208:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800e20c:	2100      	movs	r1, #0
 800e20e:	2204      	movs	r2, #4
 800e210:	f102 0514 	add.w	r5, r2, #20
 800e214:	429d      	cmp	r5, r3
 800e216:	d926      	bls.n	800e266 <_dtoa_r+0x2ae>
 800e218:	6041      	str	r1, [r0, #4]
 800e21a:	4648      	mov	r0, r9
 800e21c:	f001 f866 	bl	800f2ec <_Balloc>
 800e220:	4682      	mov	sl, r0
 800e222:	2800      	cmp	r0, #0
 800e224:	d142      	bne.n	800e2ac <_dtoa_r+0x2f4>
 800e226:	4b1e      	ldr	r3, [pc, #120]	@ (800e2a0 <_dtoa_r+0x2e8>)
 800e228:	4602      	mov	r2, r0
 800e22a:	f240 11af 	movw	r1, #431	@ 0x1af
 800e22e:	e6da      	b.n	800dfe6 <_dtoa_r+0x2e>
 800e230:	2300      	movs	r3, #0
 800e232:	e7e3      	b.n	800e1fc <_dtoa_r+0x244>
 800e234:	2300      	movs	r3, #0
 800e236:	e7d5      	b.n	800e1e4 <_dtoa_r+0x22c>
 800e238:	2401      	movs	r4, #1
 800e23a:	2300      	movs	r3, #0
 800e23c:	9307      	str	r3, [sp, #28]
 800e23e:	9409      	str	r4, [sp, #36]	@ 0x24
 800e240:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800e244:	2200      	movs	r2, #0
 800e246:	f8cd b00c 	str.w	fp, [sp, #12]
 800e24a:	2312      	movs	r3, #18
 800e24c:	920c      	str	r2, [sp, #48]	@ 0x30
 800e24e:	e7db      	b.n	800e208 <_dtoa_r+0x250>
 800e250:	2301      	movs	r3, #1
 800e252:	9309      	str	r3, [sp, #36]	@ 0x24
 800e254:	e7f4      	b.n	800e240 <_dtoa_r+0x288>
 800e256:	f04f 0b01 	mov.w	fp, #1
 800e25a:	f8cd b00c 	str.w	fp, [sp, #12]
 800e25e:	465b      	mov	r3, fp
 800e260:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800e264:	e7d0      	b.n	800e208 <_dtoa_r+0x250>
 800e266:	3101      	adds	r1, #1
 800e268:	0052      	lsls	r2, r2, #1
 800e26a:	e7d1      	b.n	800e210 <_dtoa_r+0x258>
 800e26c:	f3af 8000 	nop.w
 800e270:	636f4361 	.word	0x636f4361
 800e274:	3fd287a7 	.word	0x3fd287a7
 800e278:	8b60c8b3 	.word	0x8b60c8b3
 800e27c:	3fc68a28 	.word	0x3fc68a28
 800e280:	509f79fb 	.word	0x509f79fb
 800e284:	3fd34413 	.word	0x3fd34413
 800e288:	08010fdc 	.word	0x08010fdc
 800e28c:	08010ff3 	.word	0x08010ff3
 800e290:	7ff00000 	.word	0x7ff00000
 800e294:	08010f9f 	.word	0x08010f9f
 800e298:	3ff80000 	.word	0x3ff80000
 800e29c:	080111b0 	.word	0x080111b0
 800e2a0:	0801104b 	.word	0x0801104b
 800e2a4:	08010fd8 	.word	0x08010fd8
 800e2a8:	08010f9e 	.word	0x08010f9e
 800e2ac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e2b0:	6018      	str	r0, [r3, #0]
 800e2b2:	9b03      	ldr	r3, [sp, #12]
 800e2b4:	2b0e      	cmp	r3, #14
 800e2b6:	f200 80a1 	bhi.w	800e3fc <_dtoa_r+0x444>
 800e2ba:	2c00      	cmp	r4, #0
 800e2bc:	f000 809e 	beq.w	800e3fc <_dtoa_r+0x444>
 800e2c0:	2f00      	cmp	r7, #0
 800e2c2:	dd33      	ble.n	800e32c <_dtoa_r+0x374>
 800e2c4:	4b9c      	ldr	r3, [pc, #624]	@ (800e538 <_dtoa_r+0x580>)
 800e2c6:	f007 020f 	and.w	r2, r7, #15
 800e2ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e2ce:	ed93 7b00 	vldr	d7, [r3]
 800e2d2:	05f8      	lsls	r0, r7, #23
 800e2d4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800e2d8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e2dc:	d516      	bpl.n	800e30c <_dtoa_r+0x354>
 800e2de:	4b97      	ldr	r3, [pc, #604]	@ (800e53c <_dtoa_r+0x584>)
 800e2e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e2e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e2e8:	f7f2 fad0 	bl	800088c <__aeabi_ddiv>
 800e2ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e2f0:	f004 040f 	and.w	r4, r4, #15
 800e2f4:	2603      	movs	r6, #3
 800e2f6:	4d91      	ldr	r5, [pc, #580]	@ (800e53c <_dtoa_r+0x584>)
 800e2f8:	b954      	cbnz	r4, 800e310 <_dtoa_r+0x358>
 800e2fa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e2fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e302:	f7f2 fac3 	bl	800088c <__aeabi_ddiv>
 800e306:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e30a:	e028      	b.n	800e35e <_dtoa_r+0x3a6>
 800e30c:	2602      	movs	r6, #2
 800e30e:	e7f2      	b.n	800e2f6 <_dtoa_r+0x33e>
 800e310:	07e1      	lsls	r1, r4, #31
 800e312:	d508      	bpl.n	800e326 <_dtoa_r+0x36e>
 800e314:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e318:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e31c:	f7f2 f98c 	bl	8000638 <__aeabi_dmul>
 800e320:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e324:	3601      	adds	r6, #1
 800e326:	1064      	asrs	r4, r4, #1
 800e328:	3508      	adds	r5, #8
 800e32a:	e7e5      	b.n	800e2f8 <_dtoa_r+0x340>
 800e32c:	f000 80af 	beq.w	800e48e <_dtoa_r+0x4d6>
 800e330:	427c      	negs	r4, r7
 800e332:	4b81      	ldr	r3, [pc, #516]	@ (800e538 <_dtoa_r+0x580>)
 800e334:	4d81      	ldr	r5, [pc, #516]	@ (800e53c <_dtoa_r+0x584>)
 800e336:	f004 020f 	and.w	r2, r4, #15
 800e33a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e33e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e342:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e346:	f7f2 f977 	bl	8000638 <__aeabi_dmul>
 800e34a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e34e:	1124      	asrs	r4, r4, #4
 800e350:	2300      	movs	r3, #0
 800e352:	2602      	movs	r6, #2
 800e354:	2c00      	cmp	r4, #0
 800e356:	f040 808f 	bne.w	800e478 <_dtoa_r+0x4c0>
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d1d3      	bne.n	800e306 <_dtoa_r+0x34e>
 800e35e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e360:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800e364:	2b00      	cmp	r3, #0
 800e366:	f000 8094 	beq.w	800e492 <_dtoa_r+0x4da>
 800e36a:	4b75      	ldr	r3, [pc, #468]	@ (800e540 <_dtoa_r+0x588>)
 800e36c:	2200      	movs	r2, #0
 800e36e:	4620      	mov	r0, r4
 800e370:	4629      	mov	r1, r5
 800e372:	f7f2 fbd3 	bl	8000b1c <__aeabi_dcmplt>
 800e376:	2800      	cmp	r0, #0
 800e378:	f000 808b 	beq.w	800e492 <_dtoa_r+0x4da>
 800e37c:	9b03      	ldr	r3, [sp, #12]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	f000 8087 	beq.w	800e492 <_dtoa_r+0x4da>
 800e384:	f1bb 0f00 	cmp.w	fp, #0
 800e388:	dd34      	ble.n	800e3f4 <_dtoa_r+0x43c>
 800e38a:	4620      	mov	r0, r4
 800e38c:	4b6d      	ldr	r3, [pc, #436]	@ (800e544 <_dtoa_r+0x58c>)
 800e38e:	2200      	movs	r2, #0
 800e390:	4629      	mov	r1, r5
 800e392:	f7f2 f951 	bl	8000638 <__aeabi_dmul>
 800e396:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e39a:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800e39e:	3601      	adds	r6, #1
 800e3a0:	465c      	mov	r4, fp
 800e3a2:	4630      	mov	r0, r6
 800e3a4:	f7f2 f8de 	bl	8000564 <__aeabi_i2d>
 800e3a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e3ac:	f7f2 f944 	bl	8000638 <__aeabi_dmul>
 800e3b0:	4b65      	ldr	r3, [pc, #404]	@ (800e548 <_dtoa_r+0x590>)
 800e3b2:	2200      	movs	r2, #0
 800e3b4:	f7f1 ff8a 	bl	80002cc <__adddf3>
 800e3b8:	4605      	mov	r5, r0
 800e3ba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e3be:	2c00      	cmp	r4, #0
 800e3c0:	d16a      	bne.n	800e498 <_dtoa_r+0x4e0>
 800e3c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e3c6:	4b61      	ldr	r3, [pc, #388]	@ (800e54c <_dtoa_r+0x594>)
 800e3c8:	2200      	movs	r2, #0
 800e3ca:	f7f1 ff7d 	bl	80002c8 <__aeabi_dsub>
 800e3ce:	4602      	mov	r2, r0
 800e3d0:	460b      	mov	r3, r1
 800e3d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e3d6:	462a      	mov	r2, r5
 800e3d8:	4633      	mov	r3, r6
 800e3da:	f7f2 fbbd 	bl	8000b58 <__aeabi_dcmpgt>
 800e3de:	2800      	cmp	r0, #0
 800e3e0:	f040 8298 	bne.w	800e914 <_dtoa_r+0x95c>
 800e3e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e3e8:	462a      	mov	r2, r5
 800e3ea:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e3ee:	f7f2 fb95 	bl	8000b1c <__aeabi_dcmplt>
 800e3f2:	bb38      	cbnz	r0, 800e444 <_dtoa_r+0x48c>
 800e3f4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800e3f8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800e3fc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	f2c0 8157 	blt.w	800e6b2 <_dtoa_r+0x6fa>
 800e404:	2f0e      	cmp	r7, #14
 800e406:	f300 8154 	bgt.w	800e6b2 <_dtoa_r+0x6fa>
 800e40a:	4b4b      	ldr	r3, [pc, #300]	@ (800e538 <_dtoa_r+0x580>)
 800e40c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e410:	ed93 7b00 	vldr	d7, [r3]
 800e414:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e416:	2b00      	cmp	r3, #0
 800e418:	ed8d 7b00 	vstr	d7, [sp]
 800e41c:	f280 80e5 	bge.w	800e5ea <_dtoa_r+0x632>
 800e420:	9b03      	ldr	r3, [sp, #12]
 800e422:	2b00      	cmp	r3, #0
 800e424:	f300 80e1 	bgt.w	800e5ea <_dtoa_r+0x632>
 800e428:	d10c      	bne.n	800e444 <_dtoa_r+0x48c>
 800e42a:	4b48      	ldr	r3, [pc, #288]	@ (800e54c <_dtoa_r+0x594>)
 800e42c:	2200      	movs	r2, #0
 800e42e:	ec51 0b17 	vmov	r0, r1, d7
 800e432:	f7f2 f901 	bl	8000638 <__aeabi_dmul>
 800e436:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e43a:	f7f2 fb83 	bl	8000b44 <__aeabi_dcmpge>
 800e43e:	2800      	cmp	r0, #0
 800e440:	f000 8266 	beq.w	800e910 <_dtoa_r+0x958>
 800e444:	2400      	movs	r4, #0
 800e446:	4625      	mov	r5, r4
 800e448:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e44a:	4656      	mov	r6, sl
 800e44c:	ea6f 0803 	mvn.w	r8, r3
 800e450:	2700      	movs	r7, #0
 800e452:	4621      	mov	r1, r4
 800e454:	4648      	mov	r0, r9
 800e456:	f000 ff89 	bl	800f36c <_Bfree>
 800e45a:	2d00      	cmp	r5, #0
 800e45c:	f000 80bd 	beq.w	800e5da <_dtoa_r+0x622>
 800e460:	b12f      	cbz	r7, 800e46e <_dtoa_r+0x4b6>
 800e462:	42af      	cmp	r7, r5
 800e464:	d003      	beq.n	800e46e <_dtoa_r+0x4b6>
 800e466:	4639      	mov	r1, r7
 800e468:	4648      	mov	r0, r9
 800e46a:	f000 ff7f 	bl	800f36c <_Bfree>
 800e46e:	4629      	mov	r1, r5
 800e470:	4648      	mov	r0, r9
 800e472:	f000 ff7b 	bl	800f36c <_Bfree>
 800e476:	e0b0      	b.n	800e5da <_dtoa_r+0x622>
 800e478:	07e2      	lsls	r2, r4, #31
 800e47a:	d505      	bpl.n	800e488 <_dtoa_r+0x4d0>
 800e47c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e480:	f7f2 f8da 	bl	8000638 <__aeabi_dmul>
 800e484:	3601      	adds	r6, #1
 800e486:	2301      	movs	r3, #1
 800e488:	1064      	asrs	r4, r4, #1
 800e48a:	3508      	adds	r5, #8
 800e48c:	e762      	b.n	800e354 <_dtoa_r+0x39c>
 800e48e:	2602      	movs	r6, #2
 800e490:	e765      	b.n	800e35e <_dtoa_r+0x3a6>
 800e492:	9c03      	ldr	r4, [sp, #12]
 800e494:	46b8      	mov	r8, r7
 800e496:	e784      	b.n	800e3a2 <_dtoa_r+0x3ea>
 800e498:	4b27      	ldr	r3, [pc, #156]	@ (800e538 <_dtoa_r+0x580>)
 800e49a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e49c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e4a0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e4a4:	4454      	add	r4, sl
 800e4a6:	2900      	cmp	r1, #0
 800e4a8:	d054      	beq.n	800e554 <_dtoa_r+0x59c>
 800e4aa:	4929      	ldr	r1, [pc, #164]	@ (800e550 <_dtoa_r+0x598>)
 800e4ac:	2000      	movs	r0, #0
 800e4ae:	f7f2 f9ed 	bl	800088c <__aeabi_ddiv>
 800e4b2:	4633      	mov	r3, r6
 800e4b4:	462a      	mov	r2, r5
 800e4b6:	f7f1 ff07 	bl	80002c8 <__aeabi_dsub>
 800e4ba:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e4be:	4656      	mov	r6, sl
 800e4c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e4c4:	f7f2 fb68 	bl	8000b98 <__aeabi_d2iz>
 800e4c8:	4605      	mov	r5, r0
 800e4ca:	f7f2 f84b 	bl	8000564 <__aeabi_i2d>
 800e4ce:	4602      	mov	r2, r0
 800e4d0:	460b      	mov	r3, r1
 800e4d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e4d6:	f7f1 fef7 	bl	80002c8 <__aeabi_dsub>
 800e4da:	3530      	adds	r5, #48	@ 0x30
 800e4dc:	4602      	mov	r2, r0
 800e4de:	460b      	mov	r3, r1
 800e4e0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e4e4:	f806 5b01 	strb.w	r5, [r6], #1
 800e4e8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e4ec:	f7f2 fb16 	bl	8000b1c <__aeabi_dcmplt>
 800e4f0:	2800      	cmp	r0, #0
 800e4f2:	d172      	bne.n	800e5da <_dtoa_r+0x622>
 800e4f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e4f8:	4911      	ldr	r1, [pc, #68]	@ (800e540 <_dtoa_r+0x588>)
 800e4fa:	2000      	movs	r0, #0
 800e4fc:	f7f1 fee4 	bl	80002c8 <__aeabi_dsub>
 800e500:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e504:	f7f2 fb0a 	bl	8000b1c <__aeabi_dcmplt>
 800e508:	2800      	cmp	r0, #0
 800e50a:	f040 80b4 	bne.w	800e676 <_dtoa_r+0x6be>
 800e50e:	42a6      	cmp	r6, r4
 800e510:	f43f af70 	beq.w	800e3f4 <_dtoa_r+0x43c>
 800e514:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e518:	4b0a      	ldr	r3, [pc, #40]	@ (800e544 <_dtoa_r+0x58c>)
 800e51a:	2200      	movs	r2, #0
 800e51c:	f7f2 f88c 	bl	8000638 <__aeabi_dmul>
 800e520:	4b08      	ldr	r3, [pc, #32]	@ (800e544 <_dtoa_r+0x58c>)
 800e522:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e526:	2200      	movs	r2, #0
 800e528:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e52c:	f7f2 f884 	bl	8000638 <__aeabi_dmul>
 800e530:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e534:	e7c4      	b.n	800e4c0 <_dtoa_r+0x508>
 800e536:	bf00      	nop
 800e538:	080111b0 	.word	0x080111b0
 800e53c:	08011188 	.word	0x08011188
 800e540:	3ff00000 	.word	0x3ff00000
 800e544:	40240000 	.word	0x40240000
 800e548:	401c0000 	.word	0x401c0000
 800e54c:	40140000 	.word	0x40140000
 800e550:	3fe00000 	.word	0x3fe00000
 800e554:	4631      	mov	r1, r6
 800e556:	4628      	mov	r0, r5
 800e558:	f7f2 f86e 	bl	8000638 <__aeabi_dmul>
 800e55c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e560:	9413      	str	r4, [sp, #76]	@ 0x4c
 800e562:	4656      	mov	r6, sl
 800e564:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e568:	f7f2 fb16 	bl	8000b98 <__aeabi_d2iz>
 800e56c:	4605      	mov	r5, r0
 800e56e:	f7f1 fff9 	bl	8000564 <__aeabi_i2d>
 800e572:	4602      	mov	r2, r0
 800e574:	460b      	mov	r3, r1
 800e576:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e57a:	f7f1 fea5 	bl	80002c8 <__aeabi_dsub>
 800e57e:	3530      	adds	r5, #48	@ 0x30
 800e580:	f806 5b01 	strb.w	r5, [r6], #1
 800e584:	4602      	mov	r2, r0
 800e586:	460b      	mov	r3, r1
 800e588:	42a6      	cmp	r6, r4
 800e58a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e58e:	f04f 0200 	mov.w	r2, #0
 800e592:	d124      	bne.n	800e5de <_dtoa_r+0x626>
 800e594:	4baf      	ldr	r3, [pc, #700]	@ (800e854 <_dtoa_r+0x89c>)
 800e596:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e59a:	f7f1 fe97 	bl	80002cc <__adddf3>
 800e59e:	4602      	mov	r2, r0
 800e5a0:	460b      	mov	r3, r1
 800e5a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e5a6:	f7f2 fad7 	bl	8000b58 <__aeabi_dcmpgt>
 800e5aa:	2800      	cmp	r0, #0
 800e5ac:	d163      	bne.n	800e676 <_dtoa_r+0x6be>
 800e5ae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e5b2:	49a8      	ldr	r1, [pc, #672]	@ (800e854 <_dtoa_r+0x89c>)
 800e5b4:	2000      	movs	r0, #0
 800e5b6:	f7f1 fe87 	bl	80002c8 <__aeabi_dsub>
 800e5ba:	4602      	mov	r2, r0
 800e5bc:	460b      	mov	r3, r1
 800e5be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e5c2:	f7f2 faab 	bl	8000b1c <__aeabi_dcmplt>
 800e5c6:	2800      	cmp	r0, #0
 800e5c8:	f43f af14 	beq.w	800e3f4 <_dtoa_r+0x43c>
 800e5cc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800e5ce:	1e73      	subs	r3, r6, #1
 800e5d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e5d2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e5d6:	2b30      	cmp	r3, #48	@ 0x30
 800e5d8:	d0f8      	beq.n	800e5cc <_dtoa_r+0x614>
 800e5da:	4647      	mov	r7, r8
 800e5dc:	e03b      	b.n	800e656 <_dtoa_r+0x69e>
 800e5de:	4b9e      	ldr	r3, [pc, #632]	@ (800e858 <_dtoa_r+0x8a0>)
 800e5e0:	f7f2 f82a 	bl	8000638 <__aeabi_dmul>
 800e5e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e5e8:	e7bc      	b.n	800e564 <_dtoa_r+0x5ac>
 800e5ea:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800e5ee:	4656      	mov	r6, sl
 800e5f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e5f4:	4620      	mov	r0, r4
 800e5f6:	4629      	mov	r1, r5
 800e5f8:	f7f2 f948 	bl	800088c <__aeabi_ddiv>
 800e5fc:	f7f2 facc 	bl	8000b98 <__aeabi_d2iz>
 800e600:	4680      	mov	r8, r0
 800e602:	f7f1 ffaf 	bl	8000564 <__aeabi_i2d>
 800e606:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e60a:	f7f2 f815 	bl	8000638 <__aeabi_dmul>
 800e60e:	4602      	mov	r2, r0
 800e610:	460b      	mov	r3, r1
 800e612:	4620      	mov	r0, r4
 800e614:	4629      	mov	r1, r5
 800e616:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e61a:	f7f1 fe55 	bl	80002c8 <__aeabi_dsub>
 800e61e:	f806 4b01 	strb.w	r4, [r6], #1
 800e622:	9d03      	ldr	r5, [sp, #12]
 800e624:	eba6 040a 	sub.w	r4, r6, sl
 800e628:	42a5      	cmp	r5, r4
 800e62a:	4602      	mov	r2, r0
 800e62c:	460b      	mov	r3, r1
 800e62e:	d133      	bne.n	800e698 <_dtoa_r+0x6e0>
 800e630:	f7f1 fe4c 	bl	80002cc <__adddf3>
 800e634:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e638:	4604      	mov	r4, r0
 800e63a:	460d      	mov	r5, r1
 800e63c:	f7f2 fa8c 	bl	8000b58 <__aeabi_dcmpgt>
 800e640:	b9c0      	cbnz	r0, 800e674 <_dtoa_r+0x6bc>
 800e642:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e646:	4620      	mov	r0, r4
 800e648:	4629      	mov	r1, r5
 800e64a:	f7f2 fa5d 	bl	8000b08 <__aeabi_dcmpeq>
 800e64e:	b110      	cbz	r0, 800e656 <_dtoa_r+0x69e>
 800e650:	f018 0f01 	tst.w	r8, #1
 800e654:	d10e      	bne.n	800e674 <_dtoa_r+0x6bc>
 800e656:	9902      	ldr	r1, [sp, #8]
 800e658:	4648      	mov	r0, r9
 800e65a:	f000 fe87 	bl	800f36c <_Bfree>
 800e65e:	2300      	movs	r3, #0
 800e660:	7033      	strb	r3, [r6, #0]
 800e662:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e664:	3701      	adds	r7, #1
 800e666:	601f      	str	r7, [r3, #0]
 800e668:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	f000 824b 	beq.w	800eb06 <_dtoa_r+0xb4e>
 800e670:	601e      	str	r6, [r3, #0]
 800e672:	e248      	b.n	800eb06 <_dtoa_r+0xb4e>
 800e674:	46b8      	mov	r8, r7
 800e676:	4633      	mov	r3, r6
 800e678:	461e      	mov	r6, r3
 800e67a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e67e:	2a39      	cmp	r2, #57	@ 0x39
 800e680:	d106      	bne.n	800e690 <_dtoa_r+0x6d8>
 800e682:	459a      	cmp	sl, r3
 800e684:	d1f8      	bne.n	800e678 <_dtoa_r+0x6c0>
 800e686:	2230      	movs	r2, #48	@ 0x30
 800e688:	f108 0801 	add.w	r8, r8, #1
 800e68c:	f88a 2000 	strb.w	r2, [sl]
 800e690:	781a      	ldrb	r2, [r3, #0]
 800e692:	3201      	adds	r2, #1
 800e694:	701a      	strb	r2, [r3, #0]
 800e696:	e7a0      	b.n	800e5da <_dtoa_r+0x622>
 800e698:	4b6f      	ldr	r3, [pc, #444]	@ (800e858 <_dtoa_r+0x8a0>)
 800e69a:	2200      	movs	r2, #0
 800e69c:	f7f1 ffcc 	bl	8000638 <__aeabi_dmul>
 800e6a0:	2200      	movs	r2, #0
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	4604      	mov	r4, r0
 800e6a6:	460d      	mov	r5, r1
 800e6a8:	f7f2 fa2e 	bl	8000b08 <__aeabi_dcmpeq>
 800e6ac:	2800      	cmp	r0, #0
 800e6ae:	d09f      	beq.n	800e5f0 <_dtoa_r+0x638>
 800e6b0:	e7d1      	b.n	800e656 <_dtoa_r+0x69e>
 800e6b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e6b4:	2a00      	cmp	r2, #0
 800e6b6:	f000 80ea 	beq.w	800e88e <_dtoa_r+0x8d6>
 800e6ba:	9a07      	ldr	r2, [sp, #28]
 800e6bc:	2a01      	cmp	r2, #1
 800e6be:	f300 80cd 	bgt.w	800e85c <_dtoa_r+0x8a4>
 800e6c2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e6c4:	2a00      	cmp	r2, #0
 800e6c6:	f000 80c1 	beq.w	800e84c <_dtoa_r+0x894>
 800e6ca:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e6ce:	9c08      	ldr	r4, [sp, #32]
 800e6d0:	9e00      	ldr	r6, [sp, #0]
 800e6d2:	9a00      	ldr	r2, [sp, #0]
 800e6d4:	441a      	add	r2, r3
 800e6d6:	9200      	str	r2, [sp, #0]
 800e6d8:	9a06      	ldr	r2, [sp, #24]
 800e6da:	2101      	movs	r1, #1
 800e6dc:	441a      	add	r2, r3
 800e6de:	4648      	mov	r0, r9
 800e6e0:	9206      	str	r2, [sp, #24]
 800e6e2:	f000 ff41 	bl	800f568 <__i2b>
 800e6e6:	4605      	mov	r5, r0
 800e6e8:	b166      	cbz	r6, 800e704 <_dtoa_r+0x74c>
 800e6ea:	9b06      	ldr	r3, [sp, #24]
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	dd09      	ble.n	800e704 <_dtoa_r+0x74c>
 800e6f0:	42b3      	cmp	r3, r6
 800e6f2:	9a00      	ldr	r2, [sp, #0]
 800e6f4:	bfa8      	it	ge
 800e6f6:	4633      	movge	r3, r6
 800e6f8:	1ad2      	subs	r2, r2, r3
 800e6fa:	9200      	str	r2, [sp, #0]
 800e6fc:	9a06      	ldr	r2, [sp, #24]
 800e6fe:	1af6      	subs	r6, r6, r3
 800e700:	1ad3      	subs	r3, r2, r3
 800e702:	9306      	str	r3, [sp, #24]
 800e704:	9b08      	ldr	r3, [sp, #32]
 800e706:	b30b      	cbz	r3, 800e74c <_dtoa_r+0x794>
 800e708:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	f000 80c6 	beq.w	800e89c <_dtoa_r+0x8e4>
 800e710:	2c00      	cmp	r4, #0
 800e712:	f000 80c0 	beq.w	800e896 <_dtoa_r+0x8de>
 800e716:	4629      	mov	r1, r5
 800e718:	4622      	mov	r2, r4
 800e71a:	4648      	mov	r0, r9
 800e71c:	f000 ffdc 	bl	800f6d8 <__pow5mult>
 800e720:	9a02      	ldr	r2, [sp, #8]
 800e722:	4601      	mov	r1, r0
 800e724:	4605      	mov	r5, r0
 800e726:	4648      	mov	r0, r9
 800e728:	f000 ff34 	bl	800f594 <__multiply>
 800e72c:	9902      	ldr	r1, [sp, #8]
 800e72e:	4680      	mov	r8, r0
 800e730:	4648      	mov	r0, r9
 800e732:	f000 fe1b 	bl	800f36c <_Bfree>
 800e736:	9b08      	ldr	r3, [sp, #32]
 800e738:	1b1b      	subs	r3, r3, r4
 800e73a:	9308      	str	r3, [sp, #32]
 800e73c:	f000 80b1 	beq.w	800e8a2 <_dtoa_r+0x8ea>
 800e740:	9a08      	ldr	r2, [sp, #32]
 800e742:	4641      	mov	r1, r8
 800e744:	4648      	mov	r0, r9
 800e746:	f000 ffc7 	bl	800f6d8 <__pow5mult>
 800e74a:	9002      	str	r0, [sp, #8]
 800e74c:	2101      	movs	r1, #1
 800e74e:	4648      	mov	r0, r9
 800e750:	f000 ff0a 	bl	800f568 <__i2b>
 800e754:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e756:	4604      	mov	r4, r0
 800e758:	2b00      	cmp	r3, #0
 800e75a:	f000 81d8 	beq.w	800eb0e <_dtoa_r+0xb56>
 800e75e:	461a      	mov	r2, r3
 800e760:	4601      	mov	r1, r0
 800e762:	4648      	mov	r0, r9
 800e764:	f000 ffb8 	bl	800f6d8 <__pow5mult>
 800e768:	9b07      	ldr	r3, [sp, #28]
 800e76a:	2b01      	cmp	r3, #1
 800e76c:	4604      	mov	r4, r0
 800e76e:	f300 809f 	bgt.w	800e8b0 <_dtoa_r+0x8f8>
 800e772:	9b04      	ldr	r3, [sp, #16]
 800e774:	2b00      	cmp	r3, #0
 800e776:	f040 8097 	bne.w	800e8a8 <_dtoa_r+0x8f0>
 800e77a:	9b05      	ldr	r3, [sp, #20]
 800e77c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e780:	2b00      	cmp	r3, #0
 800e782:	f040 8093 	bne.w	800e8ac <_dtoa_r+0x8f4>
 800e786:	9b05      	ldr	r3, [sp, #20]
 800e788:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e78c:	0d1b      	lsrs	r3, r3, #20
 800e78e:	051b      	lsls	r3, r3, #20
 800e790:	b133      	cbz	r3, 800e7a0 <_dtoa_r+0x7e8>
 800e792:	9b00      	ldr	r3, [sp, #0]
 800e794:	3301      	adds	r3, #1
 800e796:	9300      	str	r3, [sp, #0]
 800e798:	9b06      	ldr	r3, [sp, #24]
 800e79a:	3301      	adds	r3, #1
 800e79c:	9306      	str	r3, [sp, #24]
 800e79e:	2301      	movs	r3, #1
 800e7a0:	9308      	str	r3, [sp, #32]
 800e7a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	f000 81b8 	beq.w	800eb1a <_dtoa_r+0xb62>
 800e7aa:	6923      	ldr	r3, [r4, #16]
 800e7ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e7b0:	6918      	ldr	r0, [r3, #16]
 800e7b2:	f000 fe8d 	bl	800f4d0 <__hi0bits>
 800e7b6:	f1c0 0020 	rsb	r0, r0, #32
 800e7ba:	9b06      	ldr	r3, [sp, #24]
 800e7bc:	4418      	add	r0, r3
 800e7be:	f010 001f 	ands.w	r0, r0, #31
 800e7c2:	f000 8082 	beq.w	800e8ca <_dtoa_r+0x912>
 800e7c6:	f1c0 0320 	rsb	r3, r0, #32
 800e7ca:	2b04      	cmp	r3, #4
 800e7cc:	dd73      	ble.n	800e8b6 <_dtoa_r+0x8fe>
 800e7ce:	9b00      	ldr	r3, [sp, #0]
 800e7d0:	f1c0 001c 	rsb	r0, r0, #28
 800e7d4:	4403      	add	r3, r0
 800e7d6:	9300      	str	r3, [sp, #0]
 800e7d8:	9b06      	ldr	r3, [sp, #24]
 800e7da:	4403      	add	r3, r0
 800e7dc:	4406      	add	r6, r0
 800e7de:	9306      	str	r3, [sp, #24]
 800e7e0:	9b00      	ldr	r3, [sp, #0]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	dd05      	ble.n	800e7f2 <_dtoa_r+0x83a>
 800e7e6:	9902      	ldr	r1, [sp, #8]
 800e7e8:	461a      	mov	r2, r3
 800e7ea:	4648      	mov	r0, r9
 800e7ec:	f000 ffce 	bl	800f78c <__lshift>
 800e7f0:	9002      	str	r0, [sp, #8]
 800e7f2:	9b06      	ldr	r3, [sp, #24]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	dd05      	ble.n	800e804 <_dtoa_r+0x84c>
 800e7f8:	4621      	mov	r1, r4
 800e7fa:	461a      	mov	r2, r3
 800e7fc:	4648      	mov	r0, r9
 800e7fe:	f000 ffc5 	bl	800f78c <__lshift>
 800e802:	4604      	mov	r4, r0
 800e804:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e806:	2b00      	cmp	r3, #0
 800e808:	d061      	beq.n	800e8ce <_dtoa_r+0x916>
 800e80a:	9802      	ldr	r0, [sp, #8]
 800e80c:	4621      	mov	r1, r4
 800e80e:	f001 f829 	bl	800f864 <__mcmp>
 800e812:	2800      	cmp	r0, #0
 800e814:	da5b      	bge.n	800e8ce <_dtoa_r+0x916>
 800e816:	2300      	movs	r3, #0
 800e818:	9902      	ldr	r1, [sp, #8]
 800e81a:	220a      	movs	r2, #10
 800e81c:	4648      	mov	r0, r9
 800e81e:	f000 fdc7 	bl	800f3b0 <__multadd>
 800e822:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e824:	9002      	str	r0, [sp, #8]
 800e826:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	f000 8177 	beq.w	800eb1e <_dtoa_r+0xb66>
 800e830:	4629      	mov	r1, r5
 800e832:	2300      	movs	r3, #0
 800e834:	220a      	movs	r2, #10
 800e836:	4648      	mov	r0, r9
 800e838:	f000 fdba 	bl	800f3b0 <__multadd>
 800e83c:	f1bb 0f00 	cmp.w	fp, #0
 800e840:	4605      	mov	r5, r0
 800e842:	dc6f      	bgt.n	800e924 <_dtoa_r+0x96c>
 800e844:	9b07      	ldr	r3, [sp, #28]
 800e846:	2b02      	cmp	r3, #2
 800e848:	dc49      	bgt.n	800e8de <_dtoa_r+0x926>
 800e84a:	e06b      	b.n	800e924 <_dtoa_r+0x96c>
 800e84c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e84e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e852:	e73c      	b.n	800e6ce <_dtoa_r+0x716>
 800e854:	3fe00000 	.word	0x3fe00000
 800e858:	40240000 	.word	0x40240000
 800e85c:	9b03      	ldr	r3, [sp, #12]
 800e85e:	1e5c      	subs	r4, r3, #1
 800e860:	9b08      	ldr	r3, [sp, #32]
 800e862:	42a3      	cmp	r3, r4
 800e864:	db09      	blt.n	800e87a <_dtoa_r+0x8c2>
 800e866:	1b1c      	subs	r4, r3, r4
 800e868:	9b03      	ldr	r3, [sp, #12]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	f6bf af30 	bge.w	800e6d0 <_dtoa_r+0x718>
 800e870:	9b00      	ldr	r3, [sp, #0]
 800e872:	9a03      	ldr	r2, [sp, #12]
 800e874:	1a9e      	subs	r6, r3, r2
 800e876:	2300      	movs	r3, #0
 800e878:	e72b      	b.n	800e6d2 <_dtoa_r+0x71a>
 800e87a:	9b08      	ldr	r3, [sp, #32]
 800e87c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e87e:	9408      	str	r4, [sp, #32]
 800e880:	1ae3      	subs	r3, r4, r3
 800e882:	441a      	add	r2, r3
 800e884:	9e00      	ldr	r6, [sp, #0]
 800e886:	9b03      	ldr	r3, [sp, #12]
 800e888:	920d      	str	r2, [sp, #52]	@ 0x34
 800e88a:	2400      	movs	r4, #0
 800e88c:	e721      	b.n	800e6d2 <_dtoa_r+0x71a>
 800e88e:	9c08      	ldr	r4, [sp, #32]
 800e890:	9e00      	ldr	r6, [sp, #0]
 800e892:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800e894:	e728      	b.n	800e6e8 <_dtoa_r+0x730>
 800e896:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800e89a:	e751      	b.n	800e740 <_dtoa_r+0x788>
 800e89c:	9a08      	ldr	r2, [sp, #32]
 800e89e:	9902      	ldr	r1, [sp, #8]
 800e8a0:	e750      	b.n	800e744 <_dtoa_r+0x78c>
 800e8a2:	f8cd 8008 	str.w	r8, [sp, #8]
 800e8a6:	e751      	b.n	800e74c <_dtoa_r+0x794>
 800e8a8:	2300      	movs	r3, #0
 800e8aa:	e779      	b.n	800e7a0 <_dtoa_r+0x7e8>
 800e8ac:	9b04      	ldr	r3, [sp, #16]
 800e8ae:	e777      	b.n	800e7a0 <_dtoa_r+0x7e8>
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	9308      	str	r3, [sp, #32]
 800e8b4:	e779      	b.n	800e7aa <_dtoa_r+0x7f2>
 800e8b6:	d093      	beq.n	800e7e0 <_dtoa_r+0x828>
 800e8b8:	9a00      	ldr	r2, [sp, #0]
 800e8ba:	331c      	adds	r3, #28
 800e8bc:	441a      	add	r2, r3
 800e8be:	9200      	str	r2, [sp, #0]
 800e8c0:	9a06      	ldr	r2, [sp, #24]
 800e8c2:	441a      	add	r2, r3
 800e8c4:	441e      	add	r6, r3
 800e8c6:	9206      	str	r2, [sp, #24]
 800e8c8:	e78a      	b.n	800e7e0 <_dtoa_r+0x828>
 800e8ca:	4603      	mov	r3, r0
 800e8cc:	e7f4      	b.n	800e8b8 <_dtoa_r+0x900>
 800e8ce:	9b03      	ldr	r3, [sp, #12]
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	46b8      	mov	r8, r7
 800e8d4:	dc20      	bgt.n	800e918 <_dtoa_r+0x960>
 800e8d6:	469b      	mov	fp, r3
 800e8d8:	9b07      	ldr	r3, [sp, #28]
 800e8da:	2b02      	cmp	r3, #2
 800e8dc:	dd1e      	ble.n	800e91c <_dtoa_r+0x964>
 800e8de:	f1bb 0f00 	cmp.w	fp, #0
 800e8e2:	f47f adb1 	bne.w	800e448 <_dtoa_r+0x490>
 800e8e6:	4621      	mov	r1, r4
 800e8e8:	465b      	mov	r3, fp
 800e8ea:	2205      	movs	r2, #5
 800e8ec:	4648      	mov	r0, r9
 800e8ee:	f000 fd5f 	bl	800f3b0 <__multadd>
 800e8f2:	4601      	mov	r1, r0
 800e8f4:	4604      	mov	r4, r0
 800e8f6:	9802      	ldr	r0, [sp, #8]
 800e8f8:	f000 ffb4 	bl	800f864 <__mcmp>
 800e8fc:	2800      	cmp	r0, #0
 800e8fe:	f77f ada3 	ble.w	800e448 <_dtoa_r+0x490>
 800e902:	4656      	mov	r6, sl
 800e904:	2331      	movs	r3, #49	@ 0x31
 800e906:	f806 3b01 	strb.w	r3, [r6], #1
 800e90a:	f108 0801 	add.w	r8, r8, #1
 800e90e:	e59f      	b.n	800e450 <_dtoa_r+0x498>
 800e910:	9c03      	ldr	r4, [sp, #12]
 800e912:	46b8      	mov	r8, r7
 800e914:	4625      	mov	r5, r4
 800e916:	e7f4      	b.n	800e902 <_dtoa_r+0x94a>
 800e918:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800e91c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e91e:	2b00      	cmp	r3, #0
 800e920:	f000 8101 	beq.w	800eb26 <_dtoa_r+0xb6e>
 800e924:	2e00      	cmp	r6, #0
 800e926:	dd05      	ble.n	800e934 <_dtoa_r+0x97c>
 800e928:	4629      	mov	r1, r5
 800e92a:	4632      	mov	r2, r6
 800e92c:	4648      	mov	r0, r9
 800e92e:	f000 ff2d 	bl	800f78c <__lshift>
 800e932:	4605      	mov	r5, r0
 800e934:	9b08      	ldr	r3, [sp, #32]
 800e936:	2b00      	cmp	r3, #0
 800e938:	d05c      	beq.n	800e9f4 <_dtoa_r+0xa3c>
 800e93a:	6869      	ldr	r1, [r5, #4]
 800e93c:	4648      	mov	r0, r9
 800e93e:	f000 fcd5 	bl	800f2ec <_Balloc>
 800e942:	4606      	mov	r6, r0
 800e944:	b928      	cbnz	r0, 800e952 <_dtoa_r+0x99a>
 800e946:	4b82      	ldr	r3, [pc, #520]	@ (800eb50 <_dtoa_r+0xb98>)
 800e948:	4602      	mov	r2, r0
 800e94a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e94e:	f7ff bb4a 	b.w	800dfe6 <_dtoa_r+0x2e>
 800e952:	692a      	ldr	r2, [r5, #16]
 800e954:	3202      	adds	r2, #2
 800e956:	0092      	lsls	r2, r2, #2
 800e958:	f105 010c 	add.w	r1, r5, #12
 800e95c:	300c      	adds	r0, #12
 800e95e:	f7ff fa7a 	bl	800de56 <memcpy>
 800e962:	2201      	movs	r2, #1
 800e964:	4631      	mov	r1, r6
 800e966:	4648      	mov	r0, r9
 800e968:	f000 ff10 	bl	800f78c <__lshift>
 800e96c:	f10a 0301 	add.w	r3, sl, #1
 800e970:	9300      	str	r3, [sp, #0]
 800e972:	eb0a 030b 	add.w	r3, sl, fp
 800e976:	9308      	str	r3, [sp, #32]
 800e978:	9b04      	ldr	r3, [sp, #16]
 800e97a:	f003 0301 	and.w	r3, r3, #1
 800e97e:	462f      	mov	r7, r5
 800e980:	9306      	str	r3, [sp, #24]
 800e982:	4605      	mov	r5, r0
 800e984:	9b00      	ldr	r3, [sp, #0]
 800e986:	9802      	ldr	r0, [sp, #8]
 800e988:	4621      	mov	r1, r4
 800e98a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800e98e:	f7ff fa88 	bl	800dea2 <quorem>
 800e992:	4603      	mov	r3, r0
 800e994:	3330      	adds	r3, #48	@ 0x30
 800e996:	9003      	str	r0, [sp, #12]
 800e998:	4639      	mov	r1, r7
 800e99a:	9802      	ldr	r0, [sp, #8]
 800e99c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e99e:	f000 ff61 	bl	800f864 <__mcmp>
 800e9a2:	462a      	mov	r2, r5
 800e9a4:	9004      	str	r0, [sp, #16]
 800e9a6:	4621      	mov	r1, r4
 800e9a8:	4648      	mov	r0, r9
 800e9aa:	f000 ff77 	bl	800f89c <__mdiff>
 800e9ae:	68c2      	ldr	r2, [r0, #12]
 800e9b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9b2:	4606      	mov	r6, r0
 800e9b4:	bb02      	cbnz	r2, 800e9f8 <_dtoa_r+0xa40>
 800e9b6:	4601      	mov	r1, r0
 800e9b8:	9802      	ldr	r0, [sp, #8]
 800e9ba:	f000 ff53 	bl	800f864 <__mcmp>
 800e9be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9c0:	4602      	mov	r2, r0
 800e9c2:	4631      	mov	r1, r6
 800e9c4:	4648      	mov	r0, r9
 800e9c6:	920c      	str	r2, [sp, #48]	@ 0x30
 800e9c8:	9309      	str	r3, [sp, #36]	@ 0x24
 800e9ca:	f000 fccf 	bl	800f36c <_Bfree>
 800e9ce:	9b07      	ldr	r3, [sp, #28]
 800e9d0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e9d2:	9e00      	ldr	r6, [sp, #0]
 800e9d4:	ea42 0103 	orr.w	r1, r2, r3
 800e9d8:	9b06      	ldr	r3, [sp, #24]
 800e9da:	4319      	orrs	r1, r3
 800e9dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9de:	d10d      	bne.n	800e9fc <_dtoa_r+0xa44>
 800e9e0:	2b39      	cmp	r3, #57	@ 0x39
 800e9e2:	d027      	beq.n	800ea34 <_dtoa_r+0xa7c>
 800e9e4:	9a04      	ldr	r2, [sp, #16]
 800e9e6:	2a00      	cmp	r2, #0
 800e9e8:	dd01      	ble.n	800e9ee <_dtoa_r+0xa36>
 800e9ea:	9b03      	ldr	r3, [sp, #12]
 800e9ec:	3331      	adds	r3, #49	@ 0x31
 800e9ee:	f88b 3000 	strb.w	r3, [fp]
 800e9f2:	e52e      	b.n	800e452 <_dtoa_r+0x49a>
 800e9f4:	4628      	mov	r0, r5
 800e9f6:	e7b9      	b.n	800e96c <_dtoa_r+0x9b4>
 800e9f8:	2201      	movs	r2, #1
 800e9fa:	e7e2      	b.n	800e9c2 <_dtoa_r+0xa0a>
 800e9fc:	9904      	ldr	r1, [sp, #16]
 800e9fe:	2900      	cmp	r1, #0
 800ea00:	db04      	blt.n	800ea0c <_dtoa_r+0xa54>
 800ea02:	9807      	ldr	r0, [sp, #28]
 800ea04:	4301      	orrs	r1, r0
 800ea06:	9806      	ldr	r0, [sp, #24]
 800ea08:	4301      	orrs	r1, r0
 800ea0a:	d120      	bne.n	800ea4e <_dtoa_r+0xa96>
 800ea0c:	2a00      	cmp	r2, #0
 800ea0e:	ddee      	ble.n	800e9ee <_dtoa_r+0xa36>
 800ea10:	9902      	ldr	r1, [sp, #8]
 800ea12:	9300      	str	r3, [sp, #0]
 800ea14:	2201      	movs	r2, #1
 800ea16:	4648      	mov	r0, r9
 800ea18:	f000 feb8 	bl	800f78c <__lshift>
 800ea1c:	4621      	mov	r1, r4
 800ea1e:	9002      	str	r0, [sp, #8]
 800ea20:	f000 ff20 	bl	800f864 <__mcmp>
 800ea24:	2800      	cmp	r0, #0
 800ea26:	9b00      	ldr	r3, [sp, #0]
 800ea28:	dc02      	bgt.n	800ea30 <_dtoa_r+0xa78>
 800ea2a:	d1e0      	bne.n	800e9ee <_dtoa_r+0xa36>
 800ea2c:	07da      	lsls	r2, r3, #31
 800ea2e:	d5de      	bpl.n	800e9ee <_dtoa_r+0xa36>
 800ea30:	2b39      	cmp	r3, #57	@ 0x39
 800ea32:	d1da      	bne.n	800e9ea <_dtoa_r+0xa32>
 800ea34:	2339      	movs	r3, #57	@ 0x39
 800ea36:	f88b 3000 	strb.w	r3, [fp]
 800ea3a:	4633      	mov	r3, r6
 800ea3c:	461e      	mov	r6, r3
 800ea3e:	3b01      	subs	r3, #1
 800ea40:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ea44:	2a39      	cmp	r2, #57	@ 0x39
 800ea46:	d04e      	beq.n	800eae6 <_dtoa_r+0xb2e>
 800ea48:	3201      	adds	r2, #1
 800ea4a:	701a      	strb	r2, [r3, #0]
 800ea4c:	e501      	b.n	800e452 <_dtoa_r+0x49a>
 800ea4e:	2a00      	cmp	r2, #0
 800ea50:	dd03      	ble.n	800ea5a <_dtoa_r+0xaa2>
 800ea52:	2b39      	cmp	r3, #57	@ 0x39
 800ea54:	d0ee      	beq.n	800ea34 <_dtoa_r+0xa7c>
 800ea56:	3301      	adds	r3, #1
 800ea58:	e7c9      	b.n	800e9ee <_dtoa_r+0xa36>
 800ea5a:	9a00      	ldr	r2, [sp, #0]
 800ea5c:	9908      	ldr	r1, [sp, #32]
 800ea5e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ea62:	428a      	cmp	r2, r1
 800ea64:	d028      	beq.n	800eab8 <_dtoa_r+0xb00>
 800ea66:	9902      	ldr	r1, [sp, #8]
 800ea68:	2300      	movs	r3, #0
 800ea6a:	220a      	movs	r2, #10
 800ea6c:	4648      	mov	r0, r9
 800ea6e:	f000 fc9f 	bl	800f3b0 <__multadd>
 800ea72:	42af      	cmp	r7, r5
 800ea74:	9002      	str	r0, [sp, #8]
 800ea76:	f04f 0300 	mov.w	r3, #0
 800ea7a:	f04f 020a 	mov.w	r2, #10
 800ea7e:	4639      	mov	r1, r7
 800ea80:	4648      	mov	r0, r9
 800ea82:	d107      	bne.n	800ea94 <_dtoa_r+0xadc>
 800ea84:	f000 fc94 	bl	800f3b0 <__multadd>
 800ea88:	4607      	mov	r7, r0
 800ea8a:	4605      	mov	r5, r0
 800ea8c:	9b00      	ldr	r3, [sp, #0]
 800ea8e:	3301      	adds	r3, #1
 800ea90:	9300      	str	r3, [sp, #0]
 800ea92:	e777      	b.n	800e984 <_dtoa_r+0x9cc>
 800ea94:	f000 fc8c 	bl	800f3b0 <__multadd>
 800ea98:	4629      	mov	r1, r5
 800ea9a:	4607      	mov	r7, r0
 800ea9c:	2300      	movs	r3, #0
 800ea9e:	220a      	movs	r2, #10
 800eaa0:	4648      	mov	r0, r9
 800eaa2:	f000 fc85 	bl	800f3b0 <__multadd>
 800eaa6:	4605      	mov	r5, r0
 800eaa8:	e7f0      	b.n	800ea8c <_dtoa_r+0xad4>
 800eaaa:	f1bb 0f00 	cmp.w	fp, #0
 800eaae:	bfcc      	ite	gt
 800eab0:	465e      	movgt	r6, fp
 800eab2:	2601      	movle	r6, #1
 800eab4:	4456      	add	r6, sl
 800eab6:	2700      	movs	r7, #0
 800eab8:	9902      	ldr	r1, [sp, #8]
 800eaba:	9300      	str	r3, [sp, #0]
 800eabc:	2201      	movs	r2, #1
 800eabe:	4648      	mov	r0, r9
 800eac0:	f000 fe64 	bl	800f78c <__lshift>
 800eac4:	4621      	mov	r1, r4
 800eac6:	9002      	str	r0, [sp, #8]
 800eac8:	f000 fecc 	bl	800f864 <__mcmp>
 800eacc:	2800      	cmp	r0, #0
 800eace:	dcb4      	bgt.n	800ea3a <_dtoa_r+0xa82>
 800ead0:	d102      	bne.n	800ead8 <_dtoa_r+0xb20>
 800ead2:	9b00      	ldr	r3, [sp, #0]
 800ead4:	07db      	lsls	r3, r3, #31
 800ead6:	d4b0      	bmi.n	800ea3a <_dtoa_r+0xa82>
 800ead8:	4633      	mov	r3, r6
 800eada:	461e      	mov	r6, r3
 800eadc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800eae0:	2a30      	cmp	r2, #48	@ 0x30
 800eae2:	d0fa      	beq.n	800eada <_dtoa_r+0xb22>
 800eae4:	e4b5      	b.n	800e452 <_dtoa_r+0x49a>
 800eae6:	459a      	cmp	sl, r3
 800eae8:	d1a8      	bne.n	800ea3c <_dtoa_r+0xa84>
 800eaea:	2331      	movs	r3, #49	@ 0x31
 800eaec:	f108 0801 	add.w	r8, r8, #1
 800eaf0:	f88a 3000 	strb.w	r3, [sl]
 800eaf4:	e4ad      	b.n	800e452 <_dtoa_r+0x49a>
 800eaf6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800eaf8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800eb54 <_dtoa_r+0xb9c>
 800eafc:	b11b      	cbz	r3, 800eb06 <_dtoa_r+0xb4e>
 800eafe:	f10a 0308 	add.w	r3, sl, #8
 800eb02:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800eb04:	6013      	str	r3, [r2, #0]
 800eb06:	4650      	mov	r0, sl
 800eb08:	b017      	add	sp, #92	@ 0x5c
 800eb0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb0e:	9b07      	ldr	r3, [sp, #28]
 800eb10:	2b01      	cmp	r3, #1
 800eb12:	f77f ae2e 	ble.w	800e772 <_dtoa_r+0x7ba>
 800eb16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800eb18:	9308      	str	r3, [sp, #32]
 800eb1a:	2001      	movs	r0, #1
 800eb1c:	e64d      	b.n	800e7ba <_dtoa_r+0x802>
 800eb1e:	f1bb 0f00 	cmp.w	fp, #0
 800eb22:	f77f aed9 	ble.w	800e8d8 <_dtoa_r+0x920>
 800eb26:	4656      	mov	r6, sl
 800eb28:	9802      	ldr	r0, [sp, #8]
 800eb2a:	4621      	mov	r1, r4
 800eb2c:	f7ff f9b9 	bl	800dea2 <quorem>
 800eb30:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800eb34:	f806 3b01 	strb.w	r3, [r6], #1
 800eb38:	eba6 020a 	sub.w	r2, r6, sl
 800eb3c:	4593      	cmp	fp, r2
 800eb3e:	ddb4      	ble.n	800eaaa <_dtoa_r+0xaf2>
 800eb40:	9902      	ldr	r1, [sp, #8]
 800eb42:	2300      	movs	r3, #0
 800eb44:	220a      	movs	r2, #10
 800eb46:	4648      	mov	r0, r9
 800eb48:	f000 fc32 	bl	800f3b0 <__multadd>
 800eb4c:	9002      	str	r0, [sp, #8]
 800eb4e:	e7eb      	b.n	800eb28 <_dtoa_r+0xb70>
 800eb50:	0801104b 	.word	0x0801104b
 800eb54:	08010fcf 	.word	0x08010fcf

0800eb58 <_free_r>:
 800eb58:	b538      	push	{r3, r4, r5, lr}
 800eb5a:	4605      	mov	r5, r0
 800eb5c:	2900      	cmp	r1, #0
 800eb5e:	d041      	beq.n	800ebe4 <_free_r+0x8c>
 800eb60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eb64:	1f0c      	subs	r4, r1, #4
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	bfb8      	it	lt
 800eb6a:	18e4      	addlt	r4, r4, r3
 800eb6c:	f7f3 ff16 	bl	800299c <__malloc_lock>
 800eb70:	4a1d      	ldr	r2, [pc, #116]	@ (800ebe8 <_free_r+0x90>)
 800eb72:	6813      	ldr	r3, [r2, #0]
 800eb74:	b933      	cbnz	r3, 800eb84 <_free_r+0x2c>
 800eb76:	6063      	str	r3, [r4, #4]
 800eb78:	6014      	str	r4, [r2, #0]
 800eb7a:	4628      	mov	r0, r5
 800eb7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eb80:	f7f3 bf46 	b.w	8002a10 <__malloc_unlock>
 800eb84:	42a3      	cmp	r3, r4
 800eb86:	d908      	bls.n	800eb9a <_free_r+0x42>
 800eb88:	6820      	ldr	r0, [r4, #0]
 800eb8a:	1821      	adds	r1, r4, r0
 800eb8c:	428b      	cmp	r3, r1
 800eb8e:	bf01      	itttt	eq
 800eb90:	6819      	ldreq	r1, [r3, #0]
 800eb92:	685b      	ldreq	r3, [r3, #4]
 800eb94:	1809      	addeq	r1, r1, r0
 800eb96:	6021      	streq	r1, [r4, #0]
 800eb98:	e7ed      	b.n	800eb76 <_free_r+0x1e>
 800eb9a:	461a      	mov	r2, r3
 800eb9c:	685b      	ldr	r3, [r3, #4]
 800eb9e:	b10b      	cbz	r3, 800eba4 <_free_r+0x4c>
 800eba0:	42a3      	cmp	r3, r4
 800eba2:	d9fa      	bls.n	800eb9a <_free_r+0x42>
 800eba4:	6811      	ldr	r1, [r2, #0]
 800eba6:	1850      	adds	r0, r2, r1
 800eba8:	42a0      	cmp	r0, r4
 800ebaa:	d10b      	bne.n	800ebc4 <_free_r+0x6c>
 800ebac:	6820      	ldr	r0, [r4, #0]
 800ebae:	4401      	add	r1, r0
 800ebb0:	1850      	adds	r0, r2, r1
 800ebb2:	4283      	cmp	r3, r0
 800ebb4:	6011      	str	r1, [r2, #0]
 800ebb6:	d1e0      	bne.n	800eb7a <_free_r+0x22>
 800ebb8:	6818      	ldr	r0, [r3, #0]
 800ebba:	685b      	ldr	r3, [r3, #4]
 800ebbc:	6053      	str	r3, [r2, #4]
 800ebbe:	4408      	add	r0, r1
 800ebc0:	6010      	str	r0, [r2, #0]
 800ebc2:	e7da      	b.n	800eb7a <_free_r+0x22>
 800ebc4:	d902      	bls.n	800ebcc <_free_r+0x74>
 800ebc6:	230c      	movs	r3, #12
 800ebc8:	602b      	str	r3, [r5, #0]
 800ebca:	e7d6      	b.n	800eb7a <_free_r+0x22>
 800ebcc:	6820      	ldr	r0, [r4, #0]
 800ebce:	1821      	adds	r1, r4, r0
 800ebd0:	428b      	cmp	r3, r1
 800ebd2:	bf04      	itt	eq
 800ebd4:	6819      	ldreq	r1, [r3, #0]
 800ebd6:	685b      	ldreq	r3, [r3, #4]
 800ebd8:	6063      	str	r3, [r4, #4]
 800ebda:	bf04      	itt	eq
 800ebdc:	1809      	addeq	r1, r1, r0
 800ebde:	6021      	streq	r1, [r4, #0]
 800ebe0:	6054      	str	r4, [r2, #4]
 800ebe2:	e7ca      	b.n	800eb7a <_free_r+0x22>
 800ebe4:	bd38      	pop	{r3, r4, r5, pc}
 800ebe6:	bf00      	nop
 800ebe8:	200004cc 	.word	0x200004cc

0800ebec <rshift>:
 800ebec:	6903      	ldr	r3, [r0, #16]
 800ebee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ebf2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ebf6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ebfa:	f100 0414 	add.w	r4, r0, #20
 800ebfe:	dd45      	ble.n	800ec8c <rshift+0xa0>
 800ec00:	f011 011f 	ands.w	r1, r1, #31
 800ec04:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ec08:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ec0c:	d10c      	bne.n	800ec28 <rshift+0x3c>
 800ec0e:	f100 0710 	add.w	r7, r0, #16
 800ec12:	4629      	mov	r1, r5
 800ec14:	42b1      	cmp	r1, r6
 800ec16:	d334      	bcc.n	800ec82 <rshift+0x96>
 800ec18:	1a9b      	subs	r3, r3, r2
 800ec1a:	009b      	lsls	r3, r3, #2
 800ec1c:	1eea      	subs	r2, r5, #3
 800ec1e:	4296      	cmp	r6, r2
 800ec20:	bf38      	it	cc
 800ec22:	2300      	movcc	r3, #0
 800ec24:	4423      	add	r3, r4
 800ec26:	e015      	b.n	800ec54 <rshift+0x68>
 800ec28:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ec2c:	f1c1 0820 	rsb	r8, r1, #32
 800ec30:	40cf      	lsrs	r7, r1
 800ec32:	f105 0e04 	add.w	lr, r5, #4
 800ec36:	46a1      	mov	r9, r4
 800ec38:	4576      	cmp	r6, lr
 800ec3a:	46f4      	mov	ip, lr
 800ec3c:	d815      	bhi.n	800ec6a <rshift+0x7e>
 800ec3e:	1a9a      	subs	r2, r3, r2
 800ec40:	0092      	lsls	r2, r2, #2
 800ec42:	3a04      	subs	r2, #4
 800ec44:	3501      	adds	r5, #1
 800ec46:	42ae      	cmp	r6, r5
 800ec48:	bf38      	it	cc
 800ec4a:	2200      	movcc	r2, #0
 800ec4c:	18a3      	adds	r3, r4, r2
 800ec4e:	50a7      	str	r7, [r4, r2]
 800ec50:	b107      	cbz	r7, 800ec54 <rshift+0x68>
 800ec52:	3304      	adds	r3, #4
 800ec54:	1b1a      	subs	r2, r3, r4
 800ec56:	42a3      	cmp	r3, r4
 800ec58:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ec5c:	bf08      	it	eq
 800ec5e:	2300      	moveq	r3, #0
 800ec60:	6102      	str	r2, [r0, #16]
 800ec62:	bf08      	it	eq
 800ec64:	6143      	streq	r3, [r0, #20]
 800ec66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ec6a:	f8dc c000 	ldr.w	ip, [ip]
 800ec6e:	fa0c fc08 	lsl.w	ip, ip, r8
 800ec72:	ea4c 0707 	orr.w	r7, ip, r7
 800ec76:	f849 7b04 	str.w	r7, [r9], #4
 800ec7a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ec7e:	40cf      	lsrs	r7, r1
 800ec80:	e7da      	b.n	800ec38 <rshift+0x4c>
 800ec82:	f851 cb04 	ldr.w	ip, [r1], #4
 800ec86:	f847 cf04 	str.w	ip, [r7, #4]!
 800ec8a:	e7c3      	b.n	800ec14 <rshift+0x28>
 800ec8c:	4623      	mov	r3, r4
 800ec8e:	e7e1      	b.n	800ec54 <rshift+0x68>

0800ec90 <__hexdig_fun>:
 800ec90:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ec94:	2b09      	cmp	r3, #9
 800ec96:	d802      	bhi.n	800ec9e <__hexdig_fun+0xe>
 800ec98:	3820      	subs	r0, #32
 800ec9a:	b2c0      	uxtb	r0, r0
 800ec9c:	4770      	bx	lr
 800ec9e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800eca2:	2b05      	cmp	r3, #5
 800eca4:	d801      	bhi.n	800ecaa <__hexdig_fun+0x1a>
 800eca6:	3847      	subs	r0, #71	@ 0x47
 800eca8:	e7f7      	b.n	800ec9a <__hexdig_fun+0xa>
 800ecaa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ecae:	2b05      	cmp	r3, #5
 800ecb0:	d801      	bhi.n	800ecb6 <__hexdig_fun+0x26>
 800ecb2:	3827      	subs	r0, #39	@ 0x27
 800ecb4:	e7f1      	b.n	800ec9a <__hexdig_fun+0xa>
 800ecb6:	2000      	movs	r0, #0
 800ecb8:	4770      	bx	lr
	...

0800ecbc <__gethex>:
 800ecbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecc0:	b085      	sub	sp, #20
 800ecc2:	468a      	mov	sl, r1
 800ecc4:	9302      	str	r3, [sp, #8]
 800ecc6:	680b      	ldr	r3, [r1, #0]
 800ecc8:	9001      	str	r0, [sp, #4]
 800ecca:	4690      	mov	r8, r2
 800eccc:	1c9c      	adds	r4, r3, #2
 800ecce:	46a1      	mov	r9, r4
 800ecd0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ecd4:	2830      	cmp	r0, #48	@ 0x30
 800ecd6:	d0fa      	beq.n	800ecce <__gethex+0x12>
 800ecd8:	eba9 0303 	sub.w	r3, r9, r3
 800ecdc:	f1a3 0b02 	sub.w	fp, r3, #2
 800ece0:	f7ff ffd6 	bl	800ec90 <__hexdig_fun>
 800ece4:	4605      	mov	r5, r0
 800ece6:	2800      	cmp	r0, #0
 800ece8:	d168      	bne.n	800edbc <__gethex+0x100>
 800ecea:	49a0      	ldr	r1, [pc, #640]	@ (800ef6c <__gethex+0x2b0>)
 800ecec:	2201      	movs	r2, #1
 800ecee:	4648      	mov	r0, r9
 800ecf0:	f7fe ffca 	bl	800dc88 <strncmp>
 800ecf4:	4607      	mov	r7, r0
 800ecf6:	2800      	cmp	r0, #0
 800ecf8:	d167      	bne.n	800edca <__gethex+0x10e>
 800ecfa:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ecfe:	4626      	mov	r6, r4
 800ed00:	f7ff ffc6 	bl	800ec90 <__hexdig_fun>
 800ed04:	2800      	cmp	r0, #0
 800ed06:	d062      	beq.n	800edce <__gethex+0x112>
 800ed08:	4623      	mov	r3, r4
 800ed0a:	7818      	ldrb	r0, [r3, #0]
 800ed0c:	2830      	cmp	r0, #48	@ 0x30
 800ed0e:	4699      	mov	r9, r3
 800ed10:	f103 0301 	add.w	r3, r3, #1
 800ed14:	d0f9      	beq.n	800ed0a <__gethex+0x4e>
 800ed16:	f7ff ffbb 	bl	800ec90 <__hexdig_fun>
 800ed1a:	fab0 f580 	clz	r5, r0
 800ed1e:	096d      	lsrs	r5, r5, #5
 800ed20:	f04f 0b01 	mov.w	fp, #1
 800ed24:	464a      	mov	r2, r9
 800ed26:	4616      	mov	r6, r2
 800ed28:	3201      	adds	r2, #1
 800ed2a:	7830      	ldrb	r0, [r6, #0]
 800ed2c:	f7ff ffb0 	bl	800ec90 <__hexdig_fun>
 800ed30:	2800      	cmp	r0, #0
 800ed32:	d1f8      	bne.n	800ed26 <__gethex+0x6a>
 800ed34:	498d      	ldr	r1, [pc, #564]	@ (800ef6c <__gethex+0x2b0>)
 800ed36:	2201      	movs	r2, #1
 800ed38:	4630      	mov	r0, r6
 800ed3a:	f7fe ffa5 	bl	800dc88 <strncmp>
 800ed3e:	2800      	cmp	r0, #0
 800ed40:	d13f      	bne.n	800edc2 <__gethex+0x106>
 800ed42:	b944      	cbnz	r4, 800ed56 <__gethex+0x9a>
 800ed44:	1c74      	adds	r4, r6, #1
 800ed46:	4622      	mov	r2, r4
 800ed48:	4616      	mov	r6, r2
 800ed4a:	3201      	adds	r2, #1
 800ed4c:	7830      	ldrb	r0, [r6, #0]
 800ed4e:	f7ff ff9f 	bl	800ec90 <__hexdig_fun>
 800ed52:	2800      	cmp	r0, #0
 800ed54:	d1f8      	bne.n	800ed48 <__gethex+0x8c>
 800ed56:	1ba4      	subs	r4, r4, r6
 800ed58:	00a7      	lsls	r7, r4, #2
 800ed5a:	7833      	ldrb	r3, [r6, #0]
 800ed5c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ed60:	2b50      	cmp	r3, #80	@ 0x50
 800ed62:	d13e      	bne.n	800ede2 <__gethex+0x126>
 800ed64:	7873      	ldrb	r3, [r6, #1]
 800ed66:	2b2b      	cmp	r3, #43	@ 0x2b
 800ed68:	d033      	beq.n	800edd2 <__gethex+0x116>
 800ed6a:	2b2d      	cmp	r3, #45	@ 0x2d
 800ed6c:	d034      	beq.n	800edd8 <__gethex+0x11c>
 800ed6e:	1c71      	adds	r1, r6, #1
 800ed70:	2400      	movs	r4, #0
 800ed72:	7808      	ldrb	r0, [r1, #0]
 800ed74:	f7ff ff8c 	bl	800ec90 <__hexdig_fun>
 800ed78:	1e43      	subs	r3, r0, #1
 800ed7a:	b2db      	uxtb	r3, r3
 800ed7c:	2b18      	cmp	r3, #24
 800ed7e:	d830      	bhi.n	800ede2 <__gethex+0x126>
 800ed80:	f1a0 0210 	sub.w	r2, r0, #16
 800ed84:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ed88:	f7ff ff82 	bl	800ec90 <__hexdig_fun>
 800ed8c:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800ed90:	fa5f fc8c 	uxtb.w	ip, ip
 800ed94:	f1bc 0f18 	cmp.w	ip, #24
 800ed98:	f04f 030a 	mov.w	r3, #10
 800ed9c:	d91e      	bls.n	800eddc <__gethex+0x120>
 800ed9e:	b104      	cbz	r4, 800eda2 <__gethex+0xe6>
 800eda0:	4252      	negs	r2, r2
 800eda2:	4417      	add	r7, r2
 800eda4:	f8ca 1000 	str.w	r1, [sl]
 800eda8:	b1ed      	cbz	r5, 800ede6 <__gethex+0x12a>
 800edaa:	f1bb 0f00 	cmp.w	fp, #0
 800edae:	bf0c      	ite	eq
 800edb0:	2506      	moveq	r5, #6
 800edb2:	2500      	movne	r5, #0
 800edb4:	4628      	mov	r0, r5
 800edb6:	b005      	add	sp, #20
 800edb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edbc:	2500      	movs	r5, #0
 800edbe:	462c      	mov	r4, r5
 800edc0:	e7b0      	b.n	800ed24 <__gethex+0x68>
 800edc2:	2c00      	cmp	r4, #0
 800edc4:	d1c7      	bne.n	800ed56 <__gethex+0x9a>
 800edc6:	4627      	mov	r7, r4
 800edc8:	e7c7      	b.n	800ed5a <__gethex+0x9e>
 800edca:	464e      	mov	r6, r9
 800edcc:	462f      	mov	r7, r5
 800edce:	2501      	movs	r5, #1
 800edd0:	e7c3      	b.n	800ed5a <__gethex+0x9e>
 800edd2:	2400      	movs	r4, #0
 800edd4:	1cb1      	adds	r1, r6, #2
 800edd6:	e7cc      	b.n	800ed72 <__gethex+0xb6>
 800edd8:	2401      	movs	r4, #1
 800edda:	e7fb      	b.n	800edd4 <__gethex+0x118>
 800eddc:	fb03 0002 	mla	r0, r3, r2, r0
 800ede0:	e7ce      	b.n	800ed80 <__gethex+0xc4>
 800ede2:	4631      	mov	r1, r6
 800ede4:	e7de      	b.n	800eda4 <__gethex+0xe8>
 800ede6:	eba6 0309 	sub.w	r3, r6, r9
 800edea:	3b01      	subs	r3, #1
 800edec:	4629      	mov	r1, r5
 800edee:	2b07      	cmp	r3, #7
 800edf0:	dc0a      	bgt.n	800ee08 <__gethex+0x14c>
 800edf2:	9801      	ldr	r0, [sp, #4]
 800edf4:	f000 fa7a 	bl	800f2ec <_Balloc>
 800edf8:	4604      	mov	r4, r0
 800edfa:	b940      	cbnz	r0, 800ee0e <__gethex+0x152>
 800edfc:	4b5c      	ldr	r3, [pc, #368]	@ (800ef70 <__gethex+0x2b4>)
 800edfe:	4602      	mov	r2, r0
 800ee00:	21e4      	movs	r1, #228	@ 0xe4
 800ee02:	485c      	ldr	r0, [pc, #368]	@ (800ef74 <__gethex+0x2b8>)
 800ee04:	f7fc fef4 	bl	800bbf0 <__assert_func>
 800ee08:	3101      	adds	r1, #1
 800ee0a:	105b      	asrs	r3, r3, #1
 800ee0c:	e7ef      	b.n	800edee <__gethex+0x132>
 800ee0e:	f100 0a14 	add.w	sl, r0, #20
 800ee12:	2300      	movs	r3, #0
 800ee14:	4655      	mov	r5, sl
 800ee16:	469b      	mov	fp, r3
 800ee18:	45b1      	cmp	r9, r6
 800ee1a:	d337      	bcc.n	800ee8c <__gethex+0x1d0>
 800ee1c:	f845 bb04 	str.w	fp, [r5], #4
 800ee20:	eba5 050a 	sub.w	r5, r5, sl
 800ee24:	10ad      	asrs	r5, r5, #2
 800ee26:	6125      	str	r5, [r4, #16]
 800ee28:	4658      	mov	r0, fp
 800ee2a:	f000 fb51 	bl	800f4d0 <__hi0bits>
 800ee2e:	016d      	lsls	r5, r5, #5
 800ee30:	f8d8 6000 	ldr.w	r6, [r8]
 800ee34:	1a2d      	subs	r5, r5, r0
 800ee36:	42b5      	cmp	r5, r6
 800ee38:	dd54      	ble.n	800eee4 <__gethex+0x228>
 800ee3a:	1bad      	subs	r5, r5, r6
 800ee3c:	4629      	mov	r1, r5
 800ee3e:	4620      	mov	r0, r4
 800ee40:	f000 fedd 	bl	800fbfe <__any_on>
 800ee44:	4681      	mov	r9, r0
 800ee46:	b178      	cbz	r0, 800ee68 <__gethex+0x1ac>
 800ee48:	1e6b      	subs	r3, r5, #1
 800ee4a:	1159      	asrs	r1, r3, #5
 800ee4c:	f003 021f 	and.w	r2, r3, #31
 800ee50:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ee54:	f04f 0901 	mov.w	r9, #1
 800ee58:	fa09 f202 	lsl.w	r2, r9, r2
 800ee5c:	420a      	tst	r2, r1
 800ee5e:	d003      	beq.n	800ee68 <__gethex+0x1ac>
 800ee60:	454b      	cmp	r3, r9
 800ee62:	dc36      	bgt.n	800eed2 <__gethex+0x216>
 800ee64:	f04f 0902 	mov.w	r9, #2
 800ee68:	4629      	mov	r1, r5
 800ee6a:	4620      	mov	r0, r4
 800ee6c:	f7ff febe 	bl	800ebec <rshift>
 800ee70:	442f      	add	r7, r5
 800ee72:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ee76:	42bb      	cmp	r3, r7
 800ee78:	da42      	bge.n	800ef00 <__gethex+0x244>
 800ee7a:	9801      	ldr	r0, [sp, #4]
 800ee7c:	4621      	mov	r1, r4
 800ee7e:	f000 fa75 	bl	800f36c <_Bfree>
 800ee82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ee84:	2300      	movs	r3, #0
 800ee86:	6013      	str	r3, [r2, #0]
 800ee88:	25a3      	movs	r5, #163	@ 0xa3
 800ee8a:	e793      	b.n	800edb4 <__gethex+0xf8>
 800ee8c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ee90:	2a2e      	cmp	r2, #46	@ 0x2e
 800ee92:	d012      	beq.n	800eeba <__gethex+0x1fe>
 800ee94:	2b20      	cmp	r3, #32
 800ee96:	d104      	bne.n	800eea2 <__gethex+0x1e6>
 800ee98:	f845 bb04 	str.w	fp, [r5], #4
 800ee9c:	f04f 0b00 	mov.w	fp, #0
 800eea0:	465b      	mov	r3, fp
 800eea2:	7830      	ldrb	r0, [r6, #0]
 800eea4:	9303      	str	r3, [sp, #12]
 800eea6:	f7ff fef3 	bl	800ec90 <__hexdig_fun>
 800eeaa:	9b03      	ldr	r3, [sp, #12]
 800eeac:	f000 000f 	and.w	r0, r0, #15
 800eeb0:	4098      	lsls	r0, r3
 800eeb2:	ea4b 0b00 	orr.w	fp, fp, r0
 800eeb6:	3304      	adds	r3, #4
 800eeb8:	e7ae      	b.n	800ee18 <__gethex+0x15c>
 800eeba:	45b1      	cmp	r9, r6
 800eebc:	d8ea      	bhi.n	800ee94 <__gethex+0x1d8>
 800eebe:	492b      	ldr	r1, [pc, #172]	@ (800ef6c <__gethex+0x2b0>)
 800eec0:	9303      	str	r3, [sp, #12]
 800eec2:	2201      	movs	r2, #1
 800eec4:	4630      	mov	r0, r6
 800eec6:	f7fe fedf 	bl	800dc88 <strncmp>
 800eeca:	9b03      	ldr	r3, [sp, #12]
 800eecc:	2800      	cmp	r0, #0
 800eece:	d1e1      	bne.n	800ee94 <__gethex+0x1d8>
 800eed0:	e7a2      	b.n	800ee18 <__gethex+0x15c>
 800eed2:	1ea9      	subs	r1, r5, #2
 800eed4:	4620      	mov	r0, r4
 800eed6:	f000 fe92 	bl	800fbfe <__any_on>
 800eeda:	2800      	cmp	r0, #0
 800eedc:	d0c2      	beq.n	800ee64 <__gethex+0x1a8>
 800eede:	f04f 0903 	mov.w	r9, #3
 800eee2:	e7c1      	b.n	800ee68 <__gethex+0x1ac>
 800eee4:	da09      	bge.n	800eefa <__gethex+0x23e>
 800eee6:	1b75      	subs	r5, r6, r5
 800eee8:	4621      	mov	r1, r4
 800eeea:	9801      	ldr	r0, [sp, #4]
 800eeec:	462a      	mov	r2, r5
 800eeee:	f000 fc4d 	bl	800f78c <__lshift>
 800eef2:	1b7f      	subs	r7, r7, r5
 800eef4:	4604      	mov	r4, r0
 800eef6:	f100 0a14 	add.w	sl, r0, #20
 800eefa:	f04f 0900 	mov.w	r9, #0
 800eefe:	e7b8      	b.n	800ee72 <__gethex+0x1b6>
 800ef00:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ef04:	42bd      	cmp	r5, r7
 800ef06:	dd6f      	ble.n	800efe8 <__gethex+0x32c>
 800ef08:	1bed      	subs	r5, r5, r7
 800ef0a:	42ae      	cmp	r6, r5
 800ef0c:	dc34      	bgt.n	800ef78 <__gethex+0x2bc>
 800ef0e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ef12:	2b02      	cmp	r3, #2
 800ef14:	d022      	beq.n	800ef5c <__gethex+0x2a0>
 800ef16:	2b03      	cmp	r3, #3
 800ef18:	d024      	beq.n	800ef64 <__gethex+0x2a8>
 800ef1a:	2b01      	cmp	r3, #1
 800ef1c:	d115      	bne.n	800ef4a <__gethex+0x28e>
 800ef1e:	42ae      	cmp	r6, r5
 800ef20:	d113      	bne.n	800ef4a <__gethex+0x28e>
 800ef22:	2e01      	cmp	r6, #1
 800ef24:	d10b      	bne.n	800ef3e <__gethex+0x282>
 800ef26:	9a02      	ldr	r2, [sp, #8]
 800ef28:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ef2c:	6013      	str	r3, [r2, #0]
 800ef2e:	2301      	movs	r3, #1
 800ef30:	6123      	str	r3, [r4, #16]
 800ef32:	f8ca 3000 	str.w	r3, [sl]
 800ef36:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ef38:	2562      	movs	r5, #98	@ 0x62
 800ef3a:	601c      	str	r4, [r3, #0]
 800ef3c:	e73a      	b.n	800edb4 <__gethex+0xf8>
 800ef3e:	1e71      	subs	r1, r6, #1
 800ef40:	4620      	mov	r0, r4
 800ef42:	f000 fe5c 	bl	800fbfe <__any_on>
 800ef46:	2800      	cmp	r0, #0
 800ef48:	d1ed      	bne.n	800ef26 <__gethex+0x26a>
 800ef4a:	9801      	ldr	r0, [sp, #4]
 800ef4c:	4621      	mov	r1, r4
 800ef4e:	f000 fa0d 	bl	800f36c <_Bfree>
 800ef52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ef54:	2300      	movs	r3, #0
 800ef56:	6013      	str	r3, [r2, #0]
 800ef58:	2550      	movs	r5, #80	@ 0x50
 800ef5a:	e72b      	b.n	800edb4 <__gethex+0xf8>
 800ef5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d1f3      	bne.n	800ef4a <__gethex+0x28e>
 800ef62:	e7e0      	b.n	800ef26 <__gethex+0x26a>
 800ef64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d1dd      	bne.n	800ef26 <__gethex+0x26a>
 800ef6a:	e7ee      	b.n	800ef4a <__gethex+0x28e>
 800ef6c:	08010f8c 	.word	0x08010f8c
 800ef70:	0801104b 	.word	0x0801104b
 800ef74:	0801105c 	.word	0x0801105c
 800ef78:	1e6f      	subs	r7, r5, #1
 800ef7a:	f1b9 0f00 	cmp.w	r9, #0
 800ef7e:	d130      	bne.n	800efe2 <__gethex+0x326>
 800ef80:	b127      	cbz	r7, 800ef8c <__gethex+0x2d0>
 800ef82:	4639      	mov	r1, r7
 800ef84:	4620      	mov	r0, r4
 800ef86:	f000 fe3a 	bl	800fbfe <__any_on>
 800ef8a:	4681      	mov	r9, r0
 800ef8c:	117a      	asrs	r2, r7, #5
 800ef8e:	2301      	movs	r3, #1
 800ef90:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ef94:	f007 071f 	and.w	r7, r7, #31
 800ef98:	40bb      	lsls	r3, r7
 800ef9a:	4213      	tst	r3, r2
 800ef9c:	4629      	mov	r1, r5
 800ef9e:	4620      	mov	r0, r4
 800efa0:	bf18      	it	ne
 800efa2:	f049 0902 	orrne.w	r9, r9, #2
 800efa6:	f7ff fe21 	bl	800ebec <rshift>
 800efaa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800efae:	1b76      	subs	r6, r6, r5
 800efb0:	2502      	movs	r5, #2
 800efb2:	f1b9 0f00 	cmp.w	r9, #0
 800efb6:	d047      	beq.n	800f048 <__gethex+0x38c>
 800efb8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800efbc:	2b02      	cmp	r3, #2
 800efbe:	d015      	beq.n	800efec <__gethex+0x330>
 800efc0:	2b03      	cmp	r3, #3
 800efc2:	d017      	beq.n	800eff4 <__gethex+0x338>
 800efc4:	2b01      	cmp	r3, #1
 800efc6:	d109      	bne.n	800efdc <__gethex+0x320>
 800efc8:	f019 0f02 	tst.w	r9, #2
 800efcc:	d006      	beq.n	800efdc <__gethex+0x320>
 800efce:	f8da 3000 	ldr.w	r3, [sl]
 800efd2:	ea49 0903 	orr.w	r9, r9, r3
 800efd6:	f019 0f01 	tst.w	r9, #1
 800efda:	d10e      	bne.n	800effa <__gethex+0x33e>
 800efdc:	f045 0510 	orr.w	r5, r5, #16
 800efe0:	e032      	b.n	800f048 <__gethex+0x38c>
 800efe2:	f04f 0901 	mov.w	r9, #1
 800efe6:	e7d1      	b.n	800ef8c <__gethex+0x2d0>
 800efe8:	2501      	movs	r5, #1
 800efea:	e7e2      	b.n	800efb2 <__gethex+0x2f6>
 800efec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800efee:	f1c3 0301 	rsb	r3, r3, #1
 800eff2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800eff4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d0f0      	beq.n	800efdc <__gethex+0x320>
 800effa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800effe:	f104 0314 	add.w	r3, r4, #20
 800f002:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f006:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f00a:	f04f 0c00 	mov.w	ip, #0
 800f00e:	4618      	mov	r0, r3
 800f010:	f853 2b04 	ldr.w	r2, [r3], #4
 800f014:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800f018:	d01b      	beq.n	800f052 <__gethex+0x396>
 800f01a:	3201      	adds	r2, #1
 800f01c:	6002      	str	r2, [r0, #0]
 800f01e:	2d02      	cmp	r5, #2
 800f020:	f104 0314 	add.w	r3, r4, #20
 800f024:	d13c      	bne.n	800f0a0 <__gethex+0x3e4>
 800f026:	f8d8 2000 	ldr.w	r2, [r8]
 800f02a:	3a01      	subs	r2, #1
 800f02c:	42b2      	cmp	r2, r6
 800f02e:	d109      	bne.n	800f044 <__gethex+0x388>
 800f030:	1171      	asrs	r1, r6, #5
 800f032:	2201      	movs	r2, #1
 800f034:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f038:	f006 061f 	and.w	r6, r6, #31
 800f03c:	fa02 f606 	lsl.w	r6, r2, r6
 800f040:	421e      	tst	r6, r3
 800f042:	d13a      	bne.n	800f0ba <__gethex+0x3fe>
 800f044:	f045 0520 	orr.w	r5, r5, #32
 800f048:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f04a:	601c      	str	r4, [r3, #0]
 800f04c:	9b02      	ldr	r3, [sp, #8]
 800f04e:	601f      	str	r7, [r3, #0]
 800f050:	e6b0      	b.n	800edb4 <__gethex+0xf8>
 800f052:	4299      	cmp	r1, r3
 800f054:	f843 cc04 	str.w	ip, [r3, #-4]
 800f058:	d8d9      	bhi.n	800f00e <__gethex+0x352>
 800f05a:	68a3      	ldr	r3, [r4, #8]
 800f05c:	459b      	cmp	fp, r3
 800f05e:	db17      	blt.n	800f090 <__gethex+0x3d4>
 800f060:	6861      	ldr	r1, [r4, #4]
 800f062:	9801      	ldr	r0, [sp, #4]
 800f064:	3101      	adds	r1, #1
 800f066:	f000 f941 	bl	800f2ec <_Balloc>
 800f06a:	4681      	mov	r9, r0
 800f06c:	b918      	cbnz	r0, 800f076 <__gethex+0x3ba>
 800f06e:	4b1a      	ldr	r3, [pc, #104]	@ (800f0d8 <__gethex+0x41c>)
 800f070:	4602      	mov	r2, r0
 800f072:	2184      	movs	r1, #132	@ 0x84
 800f074:	e6c5      	b.n	800ee02 <__gethex+0x146>
 800f076:	6922      	ldr	r2, [r4, #16]
 800f078:	3202      	adds	r2, #2
 800f07a:	f104 010c 	add.w	r1, r4, #12
 800f07e:	0092      	lsls	r2, r2, #2
 800f080:	300c      	adds	r0, #12
 800f082:	f7fe fee8 	bl	800de56 <memcpy>
 800f086:	4621      	mov	r1, r4
 800f088:	9801      	ldr	r0, [sp, #4]
 800f08a:	f000 f96f 	bl	800f36c <_Bfree>
 800f08e:	464c      	mov	r4, r9
 800f090:	6923      	ldr	r3, [r4, #16]
 800f092:	1c5a      	adds	r2, r3, #1
 800f094:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f098:	6122      	str	r2, [r4, #16]
 800f09a:	2201      	movs	r2, #1
 800f09c:	615a      	str	r2, [r3, #20]
 800f09e:	e7be      	b.n	800f01e <__gethex+0x362>
 800f0a0:	6922      	ldr	r2, [r4, #16]
 800f0a2:	455a      	cmp	r2, fp
 800f0a4:	dd0b      	ble.n	800f0be <__gethex+0x402>
 800f0a6:	2101      	movs	r1, #1
 800f0a8:	4620      	mov	r0, r4
 800f0aa:	f7ff fd9f 	bl	800ebec <rshift>
 800f0ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f0b2:	3701      	adds	r7, #1
 800f0b4:	42bb      	cmp	r3, r7
 800f0b6:	f6ff aee0 	blt.w	800ee7a <__gethex+0x1be>
 800f0ba:	2501      	movs	r5, #1
 800f0bc:	e7c2      	b.n	800f044 <__gethex+0x388>
 800f0be:	f016 061f 	ands.w	r6, r6, #31
 800f0c2:	d0fa      	beq.n	800f0ba <__gethex+0x3fe>
 800f0c4:	4453      	add	r3, sl
 800f0c6:	f1c6 0620 	rsb	r6, r6, #32
 800f0ca:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f0ce:	f000 f9ff 	bl	800f4d0 <__hi0bits>
 800f0d2:	42b0      	cmp	r0, r6
 800f0d4:	dbe7      	blt.n	800f0a6 <__gethex+0x3ea>
 800f0d6:	e7f0      	b.n	800f0ba <__gethex+0x3fe>
 800f0d8:	0801104b 	.word	0x0801104b

0800f0dc <L_shift>:
 800f0dc:	f1c2 0208 	rsb	r2, r2, #8
 800f0e0:	0092      	lsls	r2, r2, #2
 800f0e2:	b570      	push	{r4, r5, r6, lr}
 800f0e4:	f1c2 0620 	rsb	r6, r2, #32
 800f0e8:	6843      	ldr	r3, [r0, #4]
 800f0ea:	6804      	ldr	r4, [r0, #0]
 800f0ec:	fa03 f506 	lsl.w	r5, r3, r6
 800f0f0:	432c      	orrs	r4, r5
 800f0f2:	40d3      	lsrs	r3, r2
 800f0f4:	6004      	str	r4, [r0, #0]
 800f0f6:	f840 3f04 	str.w	r3, [r0, #4]!
 800f0fa:	4288      	cmp	r0, r1
 800f0fc:	d3f4      	bcc.n	800f0e8 <L_shift+0xc>
 800f0fe:	bd70      	pop	{r4, r5, r6, pc}

0800f100 <__match>:
 800f100:	b530      	push	{r4, r5, lr}
 800f102:	6803      	ldr	r3, [r0, #0]
 800f104:	3301      	adds	r3, #1
 800f106:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f10a:	b914      	cbnz	r4, 800f112 <__match+0x12>
 800f10c:	6003      	str	r3, [r0, #0]
 800f10e:	2001      	movs	r0, #1
 800f110:	bd30      	pop	{r4, r5, pc}
 800f112:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f116:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800f11a:	2d19      	cmp	r5, #25
 800f11c:	bf98      	it	ls
 800f11e:	3220      	addls	r2, #32
 800f120:	42a2      	cmp	r2, r4
 800f122:	d0f0      	beq.n	800f106 <__match+0x6>
 800f124:	2000      	movs	r0, #0
 800f126:	e7f3      	b.n	800f110 <__match+0x10>

0800f128 <__hexnan>:
 800f128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f12c:	680b      	ldr	r3, [r1, #0]
 800f12e:	6801      	ldr	r1, [r0, #0]
 800f130:	115e      	asrs	r6, r3, #5
 800f132:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f136:	f013 031f 	ands.w	r3, r3, #31
 800f13a:	b087      	sub	sp, #28
 800f13c:	bf18      	it	ne
 800f13e:	3604      	addne	r6, #4
 800f140:	2500      	movs	r5, #0
 800f142:	1f37      	subs	r7, r6, #4
 800f144:	4682      	mov	sl, r0
 800f146:	4690      	mov	r8, r2
 800f148:	9301      	str	r3, [sp, #4]
 800f14a:	f846 5c04 	str.w	r5, [r6, #-4]
 800f14e:	46b9      	mov	r9, r7
 800f150:	463c      	mov	r4, r7
 800f152:	9502      	str	r5, [sp, #8]
 800f154:	46ab      	mov	fp, r5
 800f156:	784a      	ldrb	r2, [r1, #1]
 800f158:	1c4b      	adds	r3, r1, #1
 800f15a:	9303      	str	r3, [sp, #12]
 800f15c:	b342      	cbz	r2, 800f1b0 <__hexnan+0x88>
 800f15e:	4610      	mov	r0, r2
 800f160:	9105      	str	r1, [sp, #20]
 800f162:	9204      	str	r2, [sp, #16]
 800f164:	f7ff fd94 	bl	800ec90 <__hexdig_fun>
 800f168:	2800      	cmp	r0, #0
 800f16a:	d151      	bne.n	800f210 <__hexnan+0xe8>
 800f16c:	9a04      	ldr	r2, [sp, #16]
 800f16e:	9905      	ldr	r1, [sp, #20]
 800f170:	2a20      	cmp	r2, #32
 800f172:	d818      	bhi.n	800f1a6 <__hexnan+0x7e>
 800f174:	9b02      	ldr	r3, [sp, #8]
 800f176:	459b      	cmp	fp, r3
 800f178:	dd13      	ble.n	800f1a2 <__hexnan+0x7a>
 800f17a:	454c      	cmp	r4, r9
 800f17c:	d206      	bcs.n	800f18c <__hexnan+0x64>
 800f17e:	2d07      	cmp	r5, #7
 800f180:	dc04      	bgt.n	800f18c <__hexnan+0x64>
 800f182:	462a      	mov	r2, r5
 800f184:	4649      	mov	r1, r9
 800f186:	4620      	mov	r0, r4
 800f188:	f7ff ffa8 	bl	800f0dc <L_shift>
 800f18c:	4544      	cmp	r4, r8
 800f18e:	d952      	bls.n	800f236 <__hexnan+0x10e>
 800f190:	2300      	movs	r3, #0
 800f192:	f1a4 0904 	sub.w	r9, r4, #4
 800f196:	f844 3c04 	str.w	r3, [r4, #-4]
 800f19a:	f8cd b008 	str.w	fp, [sp, #8]
 800f19e:	464c      	mov	r4, r9
 800f1a0:	461d      	mov	r5, r3
 800f1a2:	9903      	ldr	r1, [sp, #12]
 800f1a4:	e7d7      	b.n	800f156 <__hexnan+0x2e>
 800f1a6:	2a29      	cmp	r2, #41	@ 0x29
 800f1a8:	d157      	bne.n	800f25a <__hexnan+0x132>
 800f1aa:	3102      	adds	r1, #2
 800f1ac:	f8ca 1000 	str.w	r1, [sl]
 800f1b0:	f1bb 0f00 	cmp.w	fp, #0
 800f1b4:	d051      	beq.n	800f25a <__hexnan+0x132>
 800f1b6:	454c      	cmp	r4, r9
 800f1b8:	d206      	bcs.n	800f1c8 <__hexnan+0xa0>
 800f1ba:	2d07      	cmp	r5, #7
 800f1bc:	dc04      	bgt.n	800f1c8 <__hexnan+0xa0>
 800f1be:	462a      	mov	r2, r5
 800f1c0:	4649      	mov	r1, r9
 800f1c2:	4620      	mov	r0, r4
 800f1c4:	f7ff ff8a 	bl	800f0dc <L_shift>
 800f1c8:	4544      	cmp	r4, r8
 800f1ca:	d936      	bls.n	800f23a <__hexnan+0x112>
 800f1cc:	f1a8 0204 	sub.w	r2, r8, #4
 800f1d0:	4623      	mov	r3, r4
 800f1d2:	f853 1b04 	ldr.w	r1, [r3], #4
 800f1d6:	f842 1f04 	str.w	r1, [r2, #4]!
 800f1da:	429f      	cmp	r7, r3
 800f1dc:	d2f9      	bcs.n	800f1d2 <__hexnan+0xaa>
 800f1de:	1b3b      	subs	r3, r7, r4
 800f1e0:	f023 0303 	bic.w	r3, r3, #3
 800f1e4:	3304      	adds	r3, #4
 800f1e6:	3401      	adds	r4, #1
 800f1e8:	3e03      	subs	r6, #3
 800f1ea:	42b4      	cmp	r4, r6
 800f1ec:	bf88      	it	hi
 800f1ee:	2304      	movhi	r3, #4
 800f1f0:	4443      	add	r3, r8
 800f1f2:	2200      	movs	r2, #0
 800f1f4:	f843 2b04 	str.w	r2, [r3], #4
 800f1f8:	429f      	cmp	r7, r3
 800f1fa:	d2fb      	bcs.n	800f1f4 <__hexnan+0xcc>
 800f1fc:	683b      	ldr	r3, [r7, #0]
 800f1fe:	b91b      	cbnz	r3, 800f208 <__hexnan+0xe0>
 800f200:	4547      	cmp	r7, r8
 800f202:	d128      	bne.n	800f256 <__hexnan+0x12e>
 800f204:	2301      	movs	r3, #1
 800f206:	603b      	str	r3, [r7, #0]
 800f208:	2005      	movs	r0, #5
 800f20a:	b007      	add	sp, #28
 800f20c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f210:	3501      	adds	r5, #1
 800f212:	2d08      	cmp	r5, #8
 800f214:	f10b 0b01 	add.w	fp, fp, #1
 800f218:	dd06      	ble.n	800f228 <__hexnan+0x100>
 800f21a:	4544      	cmp	r4, r8
 800f21c:	d9c1      	bls.n	800f1a2 <__hexnan+0x7a>
 800f21e:	2300      	movs	r3, #0
 800f220:	f844 3c04 	str.w	r3, [r4, #-4]
 800f224:	2501      	movs	r5, #1
 800f226:	3c04      	subs	r4, #4
 800f228:	6822      	ldr	r2, [r4, #0]
 800f22a:	f000 000f 	and.w	r0, r0, #15
 800f22e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f232:	6020      	str	r0, [r4, #0]
 800f234:	e7b5      	b.n	800f1a2 <__hexnan+0x7a>
 800f236:	2508      	movs	r5, #8
 800f238:	e7b3      	b.n	800f1a2 <__hexnan+0x7a>
 800f23a:	9b01      	ldr	r3, [sp, #4]
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d0dd      	beq.n	800f1fc <__hexnan+0xd4>
 800f240:	f1c3 0320 	rsb	r3, r3, #32
 800f244:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f248:	40da      	lsrs	r2, r3
 800f24a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f24e:	4013      	ands	r3, r2
 800f250:	f846 3c04 	str.w	r3, [r6, #-4]
 800f254:	e7d2      	b.n	800f1fc <__hexnan+0xd4>
 800f256:	3f04      	subs	r7, #4
 800f258:	e7d0      	b.n	800f1fc <__hexnan+0xd4>
 800f25a:	2004      	movs	r0, #4
 800f25c:	e7d5      	b.n	800f20a <__hexnan+0xe2>
	...

0800f260 <_mallinfo_r>:
 800f260:	b570      	push	{r4, r5, r6, lr}
 800f262:	4c16      	ldr	r4, [pc, #88]	@ (800f2bc <_mallinfo_r+0x5c>)
 800f264:	4605      	mov	r5, r0
 800f266:	4608      	mov	r0, r1
 800f268:	460e      	mov	r6, r1
 800f26a:	f7f3 fb97 	bl	800299c <__malloc_lock>
 800f26e:	6823      	ldr	r3, [r4, #0]
 800f270:	b14b      	cbz	r3, 800f286 <_mallinfo_r+0x26>
 800f272:	2100      	movs	r1, #0
 800f274:	4630      	mov	r0, r6
 800f276:	f7f3 fb0d 	bl	8002894 <_sbrk_r>
 800f27a:	1c42      	adds	r2, r0, #1
 800f27c:	bf18      	it	ne
 800f27e:	6822      	ldrne	r2, [r4, #0]
 800f280:	4603      	mov	r3, r0
 800f282:	bf18      	it	ne
 800f284:	1a83      	subne	r3, r0, r2
 800f286:	4a0e      	ldr	r2, [pc, #56]	@ (800f2c0 <_mallinfo_r+0x60>)
 800f288:	6811      	ldr	r1, [r2, #0]
 800f28a:	2200      	movs	r2, #0
 800f28c:	b991      	cbnz	r1, 800f2b4 <_mallinfo_r+0x54>
 800f28e:	4c0d      	ldr	r4, [pc, #52]	@ (800f2c4 <_mallinfo_r+0x64>)
 800f290:	4630      	mov	r0, r6
 800f292:	6023      	str	r3, [r4, #0]
 800f294:	1a9b      	subs	r3, r3, r2
 800f296:	6222      	str	r2, [r4, #32]
 800f298:	61e3      	str	r3, [r4, #28]
 800f29a:	f7f3 fbb9 	bl	8002a10 <__malloc_unlock>
 800f29e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f2a0:	462e      	mov	r6, r5
 800f2a2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800f2a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f2a6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800f2a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 800f2ac:	e886 0003 	stmia.w	r6, {r0, r1}
 800f2b0:	4628      	mov	r0, r5
 800f2b2:	bd70      	pop	{r4, r5, r6, pc}
 800f2b4:	6808      	ldr	r0, [r1, #0]
 800f2b6:	6849      	ldr	r1, [r1, #4]
 800f2b8:	4402      	add	r2, r0
 800f2ba:	e7e7      	b.n	800f28c <_mallinfo_r+0x2c>
 800f2bc:	200004c8 	.word	0x200004c8
 800f2c0:	200004cc 	.word	0x200004cc
 800f2c4:	20000614 	.word	0x20000614

0800f2c8 <__ascii_mbtowc>:
 800f2c8:	b082      	sub	sp, #8
 800f2ca:	b901      	cbnz	r1, 800f2ce <__ascii_mbtowc+0x6>
 800f2cc:	a901      	add	r1, sp, #4
 800f2ce:	b142      	cbz	r2, 800f2e2 <__ascii_mbtowc+0x1a>
 800f2d0:	b14b      	cbz	r3, 800f2e6 <__ascii_mbtowc+0x1e>
 800f2d2:	7813      	ldrb	r3, [r2, #0]
 800f2d4:	600b      	str	r3, [r1, #0]
 800f2d6:	7812      	ldrb	r2, [r2, #0]
 800f2d8:	1e10      	subs	r0, r2, #0
 800f2da:	bf18      	it	ne
 800f2dc:	2001      	movne	r0, #1
 800f2de:	b002      	add	sp, #8
 800f2e0:	4770      	bx	lr
 800f2e2:	4610      	mov	r0, r2
 800f2e4:	e7fb      	b.n	800f2de <__ascii_mbtowc+0x16>
 800f2e6:	f06f 0001 	mvn.w	r0, #1
 800f2ea:	e7f8      	b.n	800f2de <__ascii_mbtowc+0x16>

0800f2ec <_Balloc>:
 800f2ec:	b570      	push	{r4, r5, r6, lr}
 800f2ee:	69c6      	ldr	r6, [r0, #28]
 800f2f0:	4604      	mov	r4, r0
 800f2f2:	460d      	mov	r5, r1
 800f2f4:	b976      	cbnz	r6, 800f314 <_Balloc+0x28>
 800f2f6:	2010      	movs	r0, #16
 800f2f8:	f7fc fcac 	bl	800bc54 <malloc>
 800f2fc:	4602      	mov	r2, r0
 800f2fe:	61e0      	str	r0, [r4, #28]
 800f300:	b920      	cbnz	r0, 800f30c <_Balloc+0x20>
 800f302:	4b18      	ldr	r3, [pc, #96]	@ (800f364 <_Balloc+0x78>)
 800f304:	4818      	ldr	r0, [pc, #96]	@ (800f368 <_Balloc+0x7c>)
 800f306:	216b      	movs	r1, #107	@ 0x6b
 800f308:	f7fc fc72 	bl	800bbf0 <__assert_func>
 800f30c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f310:	6006      	str	r6, [r0, #0]
 800f312:	60c6      	str	r6, [r0, #12]
 800f314:	69e6      	ldr	r6, [r4, #28]
 800f316:	68f3      	ldr	r3, [r6, #12]
 800f318:	b183      	cbz	r3, 800f33c <_Balloc+0x50>
 800f31a:	69e3      	ldr	r3, [r4, #28]
 800f31c:	68db      	ldr	r3, [r3, #12]
 800f31e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f322:	b9b8      	cbnz	r0, 800f354 <_Balloc+0x68>
 800f324:	2101      	movs	r1, #1
 800f326:	fa01 f605 	lsl.w	r6, r1, r5
 800f32a:	1d72      	adds	r2, r6, #5
 800f32c:	0092      	lsls	r2, r2, #2
 800f32e:	4620      	mov	r0, r4
 800f330:	f7fc fc7c 	bl	800bc2c <_calloc_r>
 800f334:	b160      	cbz	r0, 800f350 <_Balloc+0x64>
 800f336:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f33a:	e00e      	b.n	800f35a <_Balloc+0x6e>
 800f33c:	2221      	movs	r2, #33	@ 0x21
 800f33e:	2104      	movs	r1, #4
 800f340:	4620      	mov	r0, r4
 800f342:	f7fc fc73 	bl	800bc2c <_calloc_r>
 800f346:	69e3      	ldr	r3, [r4, #28]
 800f348:	60f0      	str	r0, [r6, #12]
 800f34a:	68db      	ldr	r3, [r3, #12]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d1e4      	bne.n	800f31a <_Balloc+0x2e>
 800f350:	2000      	movs	r0, #0
 800f352:	bd70      	pop	{r4, r5, r6, pc}
 800f354:	6802      	ldr	r2, [r0, #0]
 800f356:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f35a:	2300      	movs	r3, #0
 800f35c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f360:	e7f7      	b.n	800f352 <_Balloc+0x66>
 800f362:	bf00      	nop
 800f364:	08010fdc 	.word	0x08010fdc
 800f368:	080110bc 	.word	0x080110bc

0800f36c <_Bfree>:
 800f36c:	b570      	push	{r4, r5, r6, lr}
 800f36e:	69c6      	ldr	r6, [r0, #28]
 800f370:	4605      	mov	r5, r0
 800f372:	460c      	mov	r4, r1
 800f374:	b976      	cbnz	r6, 800f394 <_Bfree+0x28>
 800f376:	2010      	movs	r0, #16
 800f378:	f7fc fc6c 	bl	800bc54 <malloc>
 800f37c:	4602      	mov	r2, r0
 800f37e:	61e8      	str	r0, [r5, #28]
 800f380:	b920      	cbnz	r0, 800f38c <_Bfree+0x20>
 800f382:	4b09      	ldr	r3, [pc, #36]	@ (800f3a8 <_Bfree+0x3c>)
 800f384:	4809      	ldr	r0, [pc, #36]	@ (800f3ac <_Bfree+0x40>)
 800f386:	218f      	movs	r1, #143	@ 0x8f
 800f388:	f7fc fc32 	bl	800bbf0 <__assert_func>
 800f38c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f390:	6006      	str	r6, [r0, #0]
 800f392:	60c6      	str	r6, [r0, #12]
 800f394:	b13c      	cbz	r4, 800f3a6 <_Bfree+0x3a>
 800f396:	69eb      	ldr	r3, [r5, #28]
 800f398:	6862      	ldr	r2, [r4, #4]
 800f39a:	68db      	ldr	r3, [r3, #12]
 800f39c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f3a0:	6021      	str	r1, [r4, #0]
 800f3a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f3a6:	bd70      	pop	{r4, r5, r6, pc}
 800f3a8:	08010fdc 	.word	0x08010fdc
 800f3ac:	080110bc 	.word	0x080110bc

0800f3b0 <__multadd>:
 800f3b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3b4:	690d      	ldr	r5, [r1, #16]
 800f3b6:	4607      	mov	r7, r0
 800f3b8:	460c      	mov	r4, r1
 800f3ba:	461e      	mov	r6, r3
 800f3bc:	f101 0c14 	add.w	ip, r1, #20
 800f3c0:	2000      	movs	r0, #0
 800f3c2:	f8dc 3000 	ldr.w	r3, [ip]
 800f3c6:	b299      	uxth	r1, r3
 800f3c8:	fb02 6101 	mla	r1, r2, r1, r6
 800f3cc:	0c1e      	lsrs	r6, r3, #16
 800f3ce:	0c0b      	lsrs	r3, r1, #16
 800f3d0:	fb02 3306 	mla	r3, r2, r6, r3
 800f3d4:	b289      	uxth	r1, r1
 800f3d6:	3001      	adds	r0, #1
 800f3d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f3dc:	4285      	cmp	r5, r0
 800f3de:	f84c 1b04 	str.w	r1, [ip], #4
 800f3e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f3e6:	dcec      	bgt.n	800f3c2 <__multadd+0x12>
 800f3e8:	b30e      	cbz	r6, 800f42e <__multadd+0x7e>
 800f3ea:	68a3      	ldr	r3, [r4, #8]
 800f3ec:	42ab      	cmp	r3, r5
 800f3ee:	dc19      	bgt.n	800f424 <__multadd+0x74>
 800f3f0:	6861      	ldr	r1, [r4, #4]
 800f3f2:	4638      	mov	r0, r7
 800f3f4:	3101      	adds	r1, #1
 800f3f6:	f7ff ff79 	bl	800f2ec <_Balloc>
 800f3fa:	4680      	mov	r8, r0
 800f3fc:	b928      	cbnz	r0, 800f40a <__multadd+0x5a>
 800f3fe:	4602      	mov	r2, r0
 800f400:	4b0c      	ldr	r3, [pc, #48]	@ (800f434 <__multadd+0x84>)
 800f402:	480d      	ldr	r0, [pc, #52]	@ (800f438 <__multadd+0x88>)
 800f404:	21ba      	movs	r1, #186	@ 0xba
 800f406:	f7fc fbf3 	bl	800bbf0 <__assert_func>
 800f40a:	6922      	ldr	r2, [r4, #16]
 800f40c:	3202      	adds	r2, #2
 800f40e:	f104 010c 	add.w	r1, r4, #12
 800f412:	0092      	lsls	r2, r2, #2
 800f414:	300c      	adds	r0, #12
 800f416:	f7fe fd1e 	bl	800de56 <memcpy>
 800f41a:	4621      	mov	r1, r4
 800f41c:	4638      	mov	r0, r7
 800f41e:	f7ff ffa5 	bl	800f36c <_Bfree>
 800f422:	4644      	mov	r4, r8
 800f424:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f428:	3501      	adds	r5, #1
 800f42a:	615e      	str	r6, [r3, #20]
 800f42c:	6125      	str	r5, [r4, #16]
 800f42e:	4620      	mov	r0, r4
 800f430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f434:	0801104b 	.word	0x0801104b
 800f438:	080110bc 	.word	0x080110bc

0800f43c <__s2b>:
 800f43c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f440:	460c      	mov	r4, r1
 800f442:	4615      	mov	r5, r2
 800f444:	461f      	mov	r7, r3
 800f446:	2209      	movs	r2, #9
 800f448:	3308      	adds	r3, #8
 800f44a:	4606      	mov	r6, r0
 800f44c:	fb93 f3f2 	sdiv	r3, r3, r2
 800f450:	2100      	movs	r1, #0
 800f452:	2201      	movs	r2, #1
 800f454:	429a      	cmp	r2, r3
 800f456:	db09      	blt.n	800f46c <__s2b+0x30>
 800f458:	4630      	mov	r0, r6
 800f45a:	f7ff ff47 	bl	800f2ec <_Balloc>
 800f45e:	b940      	cbnz	r0, 800f472 <__s2b+0x36>
 800f460:	4602      	mov	r2, r0
 800f462:	4b19      	ldr	r3, [pc, #100]	@ (800f4c8 <__s2b+0x8c>)
 800f464:	4819      	ldr	r0, [pc, #100]	@ (800f4cc <__s2b+0x90>)
 800f466:	21d3      	movs	r1, #211	@ 0xd3
 800f468:	f7fc fbc2 	bl	800bbf0 <__assert_func>
 800f46c:	0052      	lsls	r2, r2, #1
 800f46e:	3101      	adds	r1, #1
 800f470:	e7f0      	b.n	800f454 <__s2b+0x18>
 800f472:	9b08      	ldr	r3, [sp, #32]
 800f474:	6143      	str	r3, [r0, #20]
 800f476:	2d09      	cmp	r5, #9
 800f478:	f04f 0301 	mov.w	r3, #1
 800f47c:	6103      	str	r3, [r0, #16]
 800f47e:	dd16      	ble.n	800f4ae <__s2b+0x72>
 800f480:	f104 0909 	add.w	r9, r4, #9
 800f484:	46c8      	mov	r8, r9
 800f486:	442c      	add	r4, r5
 800f488:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f48c:	4601      	mov	r1, r0
 800f48e:	3b30      	subs	r3, #48	@ 0x30
 800f490:	220a      	movs	r2, #10
 800f492:	4630      	mov	r0, r6
 800f494:	f7ff ff8c 	bl	800f3b0 <__multadd>
 800f498:	45a0      	cmp	r8, r4
 800f49a:	d1f5      	bne.n	800f488 <__s2b+0x4c>
 800f49c:	f1a5 0408 	sub.w	r4, r5, #8
 800f4a0:	444c      	add	r4, r9
 800f4a2:	1b2d      	subs	r5, r5, r4
 800f4a4:	1963      	adds	r3, r4, r5
 800f4a6:	42bb      	cmp	r3, r7
 800f4a8:	db04      	blt.n	800f4b4 <__s2b+0x78>
 800f4aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f4ae:	340a      	adds	r4, #10
 800f4b0:	2509      	movs	r5, #9
 800f4b2:	e7f6      	b.n	800f4a2 <__s2b+0x66>
 800f4b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f4b8:	4601      	mov	r1, r0
 800f4ba:	3b30      	subs	r3, #48	@ 0x30
 800f4bc:	220a      	movs	r2, #10
 800f4be:	4630      	mov	r0, r6
 800f4c0:	f7ff ff76 	bl	800f3b0 <__multadd>
 800f4c4:	e7ee      	b.n	800f4a4 <__s2b+0x68>
 800f4c6:	bf00      	nop
 800f4c8:	0801104b 	.word	0x0801104b
 800f4cc:	080110bc 	.word	0x080110bc

0800f4d0 <__hi0bits>:
 800f4d0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f4d4:	4603      	mov	r3, r0
 800f4d6:	bf36      	itet	cc
 800f4d8:	0403      	lslcc	r3, r0, #16
 800f4da:	2000      	movcs	r0, #0
 800f4dc:	2010      	movcc	r0, #16
 800f4de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f4e2:	bf3c      	itt	cc
 800f4e4:	021b      	lslcc	r3, r3, #8
 800f4e6:	3008      	addcc	r0, #8
 800f4e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f4ec:	bf3c      	itt	cc
 800f4ee:	011b      	lslcc	r3, r3, #4
 800f4f0:	3004      	addcc	r0, #4
 800f4f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f4f6:	bf3c      	itt	cc
 800f4f8:	009b      	lslcc	r3, r3, #2
 800f4fa:	3002      	addcc	r0, #2
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	db05      	blt.n	800f50c <__hi0bits+0x3c>
 800f500:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f504:	f100 0001 	add.w	r0, r0, #1
 800f508:	bf08      	it	eq
 800f50a:	2020      	moveq	r0, #32
 800f50c:	4770      	bx	lr

0800f50e <__lo0bits>:
 800f50e:	6803      	ldr	r3, [r0, #0]
 800f510:	4602      	mov	r2, r0
 800f512:	f013 0007 	ands.w	r0, r3, #7
 800f516:	d00b      	beq.n	800f530 <__lo0bits+0x22>
 800f518:	07d9      	lsls	r1, r3, #31
 800f51a:	d421      	bmi.n	800f560 <__lo0bits+0x52>
 800f51c:	0798      	lsls	r0, r3, #30
 800f51e:	bf49      	itett	mi
 800f520:	085b      	lsrmi	r3, r3, #1
 800f522:	089b      	lsrpl	r3, r3, #2
 800f524:	2001      	movmi	r0, #1
 800f526:	6013      	strmi	r3, [r2, #0]
 800f528:	bf5c      	itt	pl
 800f52a:	6013      	strpl	r3, [r2, #0]
 800f52c:	2002      	movpl	r0, #2
 800f52e:	4770      	bx	lr
 800f530:	b299      	uxth	r1, r3
 800f532:	b909      	cbnz	r1, 800f538 <__lo0bits+0x2a>
 800f534:	0c1b      	lsrs	r3, r3, #16
 800f536:	2010      	movs	r0, #16
 800f538:	b2d9      	uxtb	r1, r3
 800f53a:	b909      	cbnz	r1, 800f540 <__lo0bits+0x32>
 800f53c:	3008      	adds	r0, #8
 800f53e:	0a1b      	lsrs	r3, r3, #8
 800f540:	0719      	lsls	r1, r3, #28
 800f542:	bf04      	itt	eq
 800f544:	091b      	lsreq	r3, r3, #4
 800f546:	3004      	addeq	r0, #4
 800f548:	0799      	lsls	r1, r3, #30
 800f54a:	bf04      	itt	eq
 800f54c:	089b      	lsreq	r3, r3, #2
 800f54e:	3002      	addeq	r0, #2
 800f550:	07d9      	lsls	r1, r3, #31
 800f552:	d403      	bmi.n	800f55c <__lo0bits+0x4e>
 800f554:	085b      	lsrs	r3, r3, #1
 800f556:	f100 0001 	add.w	r0, r0, #1
 800f55a:	d003      	beq.n	800f564 <__lo0bits+0x56>
 800f55c:	6013      	str	r3, [r2, #0]
 800f55e:	4770      	bx	lr
 800f560:	2000      	movs	r0, #0
 800f562:	4770      	bx	lr
 800f564:	2020      	movs	r0, #32
 800f566:	4770      	bx	lr

0800f568 <__i2b>:
 800f568:	b510      	push	{r4, lr}
 800f56a:	460c      	mov	r4, r1
 800f56c:	2101      	movs	r1, #1
 800f56e:	f7ff febd 	bl	800f2ec <_Balloc>
 800f572:	4602      	mov	r2, r0
 800f574:	b928      	cbnz	r0, 800f582 <__i2b+0x1a>
 800f576:	4b05      	ldr	r3, [pc, #20]	@ (800f58c <__i2b+0x24>)
 800f578:	4805      	ldr	r0, [pc, #20]	@ (800f590 <__i2b+0x28>)
 800f57a:	f240 1145 	movw	r1, #325	@ 0x145
 800f57e:	f7fc fb37 	bl	800bbf0 <__assert_func>
 800f582:	2301      	movs	r3, #1
 800f584:	6144      	str	r4, [r0, #20]
 800f586:	6103      	str	r3, [r0, #16]
 800f588:	bd10      	pop	{r4, pc}
 800f58a:	bf00      	nop
 800f58c:	0801104b 	.word	0x0801104b
 800f590:	080110bc 	.word	0x080110bc

0800f594 <__multiply>:
 800f594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f598:	4617      	mov	r7, r2
 800f59a:	690a      	ldr	r2, [r1, #16]
 800f59c:	693b      	ldr	r3, [r7, #16]
 800f59e:	429a      	cmp	r2, r3
 800f5a0:	bfa8      	it	ge
 800f5a2:	463b      	movge	r3, r7
 800f5a4:	4689      	mov	r9, r1
 800f5a6:	bfa4      	itt	ge
 800f5a8:	460f      	movge	r7, r1
 800f5aa:	4699      	movge	r9, r3
 800f5ac:	693d      	ldr	r5, [r7, #16]
 800f5ae:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f5b2:	68bb      	ldr	r3, [r7, #8]
 800f5b4:	6879      	ldr	r1, [r7, #4]
 800f5b6:	eb05 060a 	add.w	r6, r5, sl
 800f5ba:	42b3      	cmp	r3, r6
 800f5bc:	b085      	sub	sp, #20
 800f5be:	bfb8      	it	lt
 800f5c0:	3101      	addlt	r1, #1
 800f5c2:	f7ff fe93 	bl	800f2ec <_Balloc>
 800f5c6:	b930      	cbnz	r0, 800f5d6 <__multiply+0x42>
 800f5c8:	4602      	mov	r2, r0
 800f5ca:	4b41      	ldr	r3, [pc, #260]	@ (800f6d0 <__multiply+0x13c>)
 800f5cc:	4841      	ldr	r0, [pc, #260]	@ (800f6d4 <__multiply+0x140>)
 800f5ce:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f5d2:	f7fc fb0d 	bl	800bbf0 <__assert_func>
 800f5d6:	f100 0414 	add.w	r4, r0, #20
 800f5da:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800f5de:	4623      	mov	r3, r4
 800f5e0:	2200      	movs	r2, #0
 800f5e2:	4573      	cmp	r3, lr
 800f5e4:	d320      	bcc.n	800f628 <__multiply+0x94>
 800f5e6:	f107 0814 	add.w	r8, r7, #20
 800f5ea:	f109 0114 	add.w	r1, r9, #20
 800f5ee:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800f5f2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800f5f6:	9302      	str	r3, [sp, #8]
 800f5f8:	1beb      	subs	r3, r5, r7
 800f5fa:	3b15      	subs	r3, #21
 800f5fc:	f023 0303 	bic.w	r3, r3, #3
 800f600:	3304      	adds	r3, #4
 800f602:	3715      	adds	r7, #21
 800f604:	42bd      	cmp	r5, r7
 800f606:	bf38      	it	cc
 800f608:	2304      	movcc	r3, #4
 800f60a:	9301      	str	r3, [sp, #4]
 800f60c:	9b02      	ldr	r3, [sp, #8]
 800f60e:	9103      	str	r1, [sp, #12]
 800f610:	428b      	cmp	r3, r1
 800f612:	d80c      	bhi.n	800f62e <__multiply+0x9a>
 800f614:	2e00      	cmp	r6, #0
 800f616:	dd03      	ble.n	800f620 <__multiply+0x8c>
 800f618:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d055      	beq.n	800f6cc <__multiply+0x138>
 800f620:	6106      	str	r6, [r0, #16]
 800f622:	b005      	add	sp, #20
 800f624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f628:	f843 2b04 	str.w	r2, [r3], #4
 800f62c:	e7d9      	b.n	800f5e2 <__multiply+0x4e>
 800f62e:	f8b1 a000 	ldrh.w	sl, [r1]
 800f632:	f1ba 0f00 	cmp.w	sl, #0
 800f636:	d01f      	beq.n	800f678 <__multiply+0xe4>
 800f638:	46c4      	mov	ip, r8
 800f63a:	46a1      	mov	r9, r4
 800f63c:	2700      	movs	r7, #0
 800f63e:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f642:	f8d9 3000 	ldr.w	r3, [r9]
 800f646:	fa1f fb82 	uxth.w	fp, r2
 800f64a:	b29b      	uxth	r3, r3
 800f64c:	fb0a 330b 	mla	r3, sl, fp, r3
 800f650:	443b      	add	r3, r7
 800f652:	f8d9 7000 	ldr.w	r7, [r9]
 800f656:	0c12      	lsrs	r2, r2, #16
 800f658:	0c3f      	lsrs	r7, r7, #16
 800f65a:	fb0a 7202 	mla	r2, sl, r2, r7
 800f65e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800f662:	b29b      	uxth	r3, r3
 800f664:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f668:	4565      	cmp	r5, ip
 800f66a:	f849 3b04 	str.w	r3, [r9], #4
 800f66e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800f672:	d8e4      	bhi.n	800f63e <__multiply+0xaa>
 800f674:	9b01      	ldr	r3, [sp, #4]
 800f676:	50e7      	str	r7, [r4, r3]
 800f678:	9b03      	ldr	r3, [sp, #12]
 800f67a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f67e:	3104      	adds	r1, #4
 800f680:	f1b9 0f00 	cmp.w	r9, #0
 800f684:	d020      	beq.n	800f6c8 <__multiply+0x134>
 800f686:	6823      	ldr	r3, [r4, #0]
 800f688:	4647      	mov	r7, r8
 800f68a:	46a4      	mov	ip, r4
 800f68c:	f04f 0a00 	mov.w	sl, #0
 800f690:	f8b7 b000 	ldrh.w	fp, [r7]
 800f694:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800f698:	fb09 220b 	mla	r2, r9, fp, r2
 800f69c:	4452      	add	r2, sl
 800f69e:	b29b      	uxth	r3, r3
 800f6a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f6a4:	f84c 3b04 	str.w	r3, [ip], #4
 800f6a8:	f857 3b04 	ldr.w	r3, [r7], #4
 800f6ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f6b0:	f8bc 3000 	ldrh.w	r3, [ip]
 800f6b4:	fb09 330a 	mla	r3, r9, sl, r3
 800f6b8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800f6bc:	42bd      	cmp	r5, r7
 800f6be:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f6c2:	d8e5      	bhi.n	800f690 <__multiply+0xfc>
 800f6c4:	9a01      	ldr	r2, [sp, #4]
 800f6c6:	50a3      	str	r3, [r4, r2]
 800f6c8:	3404      	adds	r4, #4
 800f6ca:	e79f      	b.n	800f60c <__multiply+0x78>
 800f6cc:	3e01      	subs	r6, #1
 800f6ce:	e7a1      	b.n	800f614 <__multiply+0x80>
 800f6d0:	0801104b 	.word	0x0801104b
 800f6d4:	080110bc 	.word	0x080110bc

0800f6d8 <__pow5mult>:
 800f6d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f6dc:	4615      	mov	r5, r2
 800f6de:	f012 0203 	ands.w	r2, r2, #3
 800f6e2:	4607      	mov	r7, r0
 800f6e4:	460e      	mov	r6, r1
 800f6e6:	d007      	beq.n	800f6f8 <__pow5mult+0x20>
 800f6e8:	4c25      	ldr	r4, [pc, #148]	@ (800f780 <__pow5mult+0xa8>)
 800f6ea:	3a01      	subs	r2, #1
 800f6ec:	2300      	movs	r3, #0
 800f6ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f6f2:	f7ff fe5d 	bl	800f3b0 <__multadd>
 800f6f6:	4606      	mov	r6, r0
 800f6f8:	10ad      	asrs	r5, r5, #2
 800f6fa:	d03d      	beq.n	800f778 <__pow5mult+0xa0>
 800f6fc:	69fc      	ldr	r4, [r7, #28]
 800f6fe:	b97c      	cbnz	r4, 800f720 <__pow5mult+0x48>
 800f700:	2010      	movs	r0, #16
 800f702:	f7fc faa7 	bl	800bc54 <malloc>
 800f706:	4602      	mov	r2, r0
 800f708:	61f8      	str	r0, [r7, #28]
 800f70a:	b928      	cbnz	r0, 800f718 <__pow5mult+0x40>
 800f70c:	4b1d      	ldr	r3, [pc, #116]	@ (800f784 <__pow5mult+0xac>)
 800f70e:	481e      	ldr	r0, [pc, #120]	@ (800f788 <__pow5mult+0xb0>)
 800f710:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f714:	f7fc fa6c 	bl	800bbf0 <__assert_func>
 800f718:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f71c:	6004      	str	r4, [r0, #0]
 800f71e:	60c4      	str	r4, [r0, #12]
 800f720:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f724:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f728:	b94c      	cbnz	r4, 800f73e <__pow5mult+0x66>
 800f72a:	f240 2171 	movw	r1, #625	@ 0x271
 800f72e:	4638      	mov	r0, r7
 800f730:	f7ff ff1a 	bl	800f568 <__i2b>
 800f734:	2300      	movs	r3, #0
 800f736:	f8c8 0008 	str.w	r0, [r8, #8]
 800f73a:	4604      	mov	r4, r0
 800f73c:	6003      	str	r3, [r0, #0]
 800f73e:	f04f 0900 	mov.w	r9, #0
 800f742:	07eb      	lsls	r3, r5, #31
 800f744:	d50a      	bpl.n	800f75c <__pow5mult+0x84>
 800f746:	4631      	mov	r1, r6
 800f748:	4622      	mov	r2, r4
 800f74a:	4638      	mov	r0, r7
 800f74c:	f7ff ff22 	bl	800f594 <__multiply>
 800f750:	4631      	mov	r1, r6
 800f752:	4680      	mov	r8, r0
 800f754:	4638      	mov	r0, r7
 800f756:	f7ff fe09 	bl	800f36c <_Bfree>
 800f75a:	4646      	mov	r6, r8
 800f75c:	106d      	asrs	r5, r5, #1
 800f75e:	d00b      	beq.n	800f778 <__pow5mult+0xa0>
 800f760:	6820      	ldr	r0, [r4, #0]
 800f762:	b938      	cbnz	r0, 800f774 <__pow5mult+0x9c>
 800f764:	4622      	mov	r2, r4
 800f766:	4621      	mov	r1, r4
 800f768:	4638      	mov	r0, r7
 800f76a:	f7ff ff13 	bl	800f594 <__multiply>
 800f76e:	6020      	str	r0, [r4, #0]
 800f770:	f8c0 9000 	str.w	r9, [r0]
 800f774:	4604      	mov	r4, r0
 800f776:	e7e4      	b.n	800f742 <__pow5mult+0x6a>
 800f778:	4630      	mov	r0, r6
 800f77a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f77e:	bf00      	nop
 800f780:	08011178 	.word	0x08011178
 800f784:	08010fdc 	.word	0x08010fdc
 800f788:	080110bc 	.word	0x080110bc

0800f78c <__lshift>:
 800f78c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f790:	460c      	mov	r4, r1
 800f792:	6849      	ldr	r1, [r1, #4]
 800f794:	6923      	ldr	r3, [r4, #16]
 800f796:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f79a:	68a3      	ldr	r3, [r4, #8]
 800f79c:	4607      	mov	r7, r0
 800f79e:	4691      	mov	r9, r2
 800f7a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f7a4:	f108 0601 	add.w	r6, r8, #1
 800f7a8:	42b3      	cmp	r3, r6
 800f7aa:	db0b      	blt.n	800f7c4 <__lshift+0x38>
 800f7ac:	4638      	mov	r0, r7
 800f7ae:	f7ff fd9d 	bl	800f2ec <_Balloc>
 800f7b2:	4605      	mov	r5, r0
 800f7b4:	b948      	cbnz	r0, 800f7ca <__lshift+0x3e>
 800f7b6:	4602      	mov	r2, r0
 800f7b8:	4b28      	ldr	r3, [pc, #160]	@ (800f85c <__lshift+0xd0>)
 800f7ba:	4829      	ldr	r0, [pc, #164]	@ (800f860 <__lshift+0xd4>)
 800f7bc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f7c0:	f7fc fa16 	bl	800bbf0 <__assert_func>
 800f7c4:	3101      	adds	r1, #1
 800f7c6:	005b      	lsls	r3, r3, #1
 800f7c8:	e7ee      	b.n	800f7a8 <__lshift+0x1c>
 800f7ca:	2300      	movs	r3, #0
 800f7cc:	f100 0114 	add.w	r1, r0, #20
 800f7d0:	f100 0210 	add.w	r2, r0, #16
 800f7d4:	4618      	mov	r0, r3
 800f7d6:	4553      	cmp	r3, sl
 800f7d8:	db33      	blt.n	800f842 <__lshift+0xb6>
 800f7da:	6920      	ldr	r0, [r4, #16]
 800f7dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f7e0:	f104 0314 	add.w	r3, r4, #20
 800f7e4:	f019 091f 	ands.w	r9, r9, #31
 800f7e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f7ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f7f0:	d02b      	beq.n	800f84a <__lshift+0xbe>
 800f7f2:	f1c9 0e20 	rsb	lr, r9, #32
 800f7f6:	468a      	mov	sl, r1
 800f7f8:	2200      	movs	r2, #0
 800f7fa:	6818      	ldr	r0, [r3, #0]
 800f7fc:	fa00 f009 	lsl.w	r0, r0, r9
 800f800:	4310      	orrs	r0, r2
 800f802:	f84a 0b04 	str.w	r0, [sl], #4
 800f806:	f853 2b04 	ldr.w	r2, [r3], #4
 800f80a:	459c      	cmp	ip, r3
 800f80c:	fa22 f20e 	lsr.w	r2, r2, lr
 800f810:	d8f3      	bhi.n	800f7fa <__lshift+0x6e>
 800f812:	ebac 0304 	sub.w	r3, ip, r4
 800f816:	3b15      	subs	r3, #21
 800f818:	f023 0303 	bic.w	r3, r3, #3
 800f81c:	3304      	adds	r3, #4
 800f81e:	f104 0015 	add.w	r0, r4, #21
 800f822:	4560      	cmp	r0, ip
 800f824:	bf88      	it	hi
 800f826:	2304      	movhi	r3, #4
 800f828:	50ca      	str	r2, [r1, r3]
 800f82a:	b10a      	cbz	r2, 800f830 <__lshift+0xa4>
 800f82c:	f108 0602 	add.w	r6, r8, #2
 800f830:	3e01      	subs	r6, #1
 800f832:	4638      	mov	r0, r7
 800f834:	612e      	str	r6, [r5, #16]
 800f836:	4621      	mov	r1, r4
 800f838:	f7ff fd98 	bl	800f36c <_Bfree>
 800f83c:	4628      	mov	r0, r5
 800f83e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f842:	f842 0f04 	str.w	r0, [r2, #4]!
 800f846:	3301      	adds	r3, #1
 800f848:	e7c5      	b.n	800f7d6 <__lshift+0x4a>
 800f84a:	3904      	subs	r1, #4
 800f84c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f850:	f841 2f04 	str.w	r2, [r1, #4]!
 800f854:	459c      	cmp	ip, r3
 800f856:	d8f9      	bhi.n	800f84c <__lshift+0xc0>
 800f858:	e7ea      	b.n	800f830 <__lshift+0xa4>
 800f85a:	bf00      	nop
 800f85c:	0801104b 	.word	0x0801104b
 800f860:	080110bc 	.word	0x080110bc

0800f864 <__mcmp>:
 800f864:	690a      	ldr	r2, [r1, #16]
 800f866:	4603      	mov	r3, r0
 800f868:	6900      	ldr	r0, [r0, #16]
 800f86a:	1a80      	subs	r0, r0, r2
 800f86c:	b530      	push	{r4, r5, lr}
 800f86e:	d10e      	bne.n	800f88e <__mcmp+0x2a>
 800f870:	3314      	adds	r3, #20
 800f872:	3114      	adds	r1, #20
 800f874:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f878:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f87c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f880:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f884:	4295      	cmp	r5, r2
 800f886:	d003      	beq.n	800f890 <__mcmp+0x2c>
 800f888:	d205      	bcs.n	800f896 <__mcmp+0x32>
 800f88a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f88e:	bd30      	pop	{r4, r5, pc}
 800f890:	42a3      	cmp	r3, r4
 800f892:	d3f3      	bcc.n	800f87c <__mcmp+0x18>
 800f894:	e7fb      	b.n	800f88e <__mcmp+0x2a>
 800f896:	2001      	movs	r0, #1
 800f898:	e7f9      	b.n	800f88e <__mcmp+0x2a>
	...

0800f89c <__mdiff>:
 800f89c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8a0:	4689      	mov	r9, r1
 800f8a2:	4606      	mov	r6, r0
 800f8a4:	4611      	mov	r1, r2
 800f8a6:	4648      	mov	r0, r9
 800f8a8:	4614      	mov	r4, r2
 800f8aa:	f7ff ffdb 	bl	800f864 <__mcmp>
 800f8ae:	1e05      	subs	r5, r0, #0
 800f8b0:	d112      	bne.n	800f8d8 <__mdiff+0x3c>
 800f8b2:	4629      	mov	r1, r5
 800f8b4:	4630      	mov	r0, r6
 800f8b6:	f7ff fd19 	bl	800f2ec <_Balloc>
 800f8ba:	4602      	mov	r2, r0
 800f8bc:	b928      	cbnz	r0, 800f8ca <__mdiff+0x2e>
 800f8be:	4b3f      	ldr	r3, [pc, #252]	@ (800f9bc <__mdiff+0x120>)
 800f8c0:	f240 2137 	movw	r1, #567	@ 0x237
 800f8c4:	483e      	ldr	r0, [pc, #248]	@ (800f9c0 <__mdiff+0x124>)
 800f8c6:	f7fc f993 	bl	800bbf0 <__assert_func>
 800f8ca:	2301      	movs	r3, #1
 800f8cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f8d0:	4610      	mov	r0, r2
 800f8d2:	b003      	add	sp, #12
 800f8d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8d8:	bfbc      	itt	lt
 800f8da:	464b      	movlt	r3, r9
 800f8dc:	46a1      	movlt	r9, r4
 800f8de:	4630      	mov	r0, r6
 800f8e0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f8e4:	bfba      	itte	lt
 800f8e6:	461c      	movlt	r4, r3
 800f8e8:	2501      	movlt	r5, #1
 800f8ea:	2500      	movge	r5, #0
 800f8ec:	f7ff fcfe 	bl	800f2ec <_Balloc>
 800f8f0:	4602      	mov	r2, r0
 800f8f2:	b918      	cbnz	r0, 800f8fc <__mdiff+0x60>
 800f8f4:	4b31      	ldr	r3, [pc, #196]	@ (800f9bc <__mdiff+0x120>)
 800f8f6:	f240 2145 	movw	r1, #581	@ 0x245
 800f8fa:	e7e3      	b.n	800f8c4 <__mdiff+0x28>
 800f8fc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f900:	6926      	ldr	r6, [r4, #16]
 800f902:	60c5      	str	r5, [r0, #12]
 800f904:	f109 0310 	add.w	r3, r9, #16
 800f908:	f109 0514 	add.w	r5, r9, #20
 800f90c:	f104 0e14 	add.w	lr, r4, #20
 800f910:	f100 0b14 	add.w	fp, r0, #20
 800f914:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f918:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f91c:	9301      	str	r3, [sp, #4]
 800f91e:	46d9      	mov	r9, fp
 800f920:	f04f 0c00 	mov.w	ip, #0
 800f924:	9b01      	ldr	r3, [sp, #4]
 800f926:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f92a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f92e:	9301      	str	r3, [sp, #4]
 800f930:	fa1f f38a 	uxth.w	r3, sl
 800f934:	4619      	mov	r1, r3
 800f936:	b283      	uxth	r3, r0
 800f938:	1acb      	subs	r3, r1, r3
 800f93a:	0c00      	lsrs	r0, r0, #16
 800f93c:	4463      	add	r3, ip
 800f93e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f942:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f946:	b29b      	uxth	r3, r3
 800f948:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f94c:	4576      	cmp	r6, lr
 800f94e:	f849 3b04 	str.w	r3, [r9], #4
 800f952:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f956:	d8e5      	bhi.n	800f924 <__mdiff+0x88>
 800f958:	1b33      	subs	r3, r6, r4
 800f95a:	3b15      	subs	r3, #21
 800f95c:	f023 0303 	bic.w	r3, r3, #3
 800f960:	3415      	adds	r4, #21
 800f962:	3304      	adds	r3, #4
 800f964:	42a6      	cmp	r6, r4
 800f966:	bf38      	it	cc
 800f968:	2304      	movcc	r3, #4
 800f96a:	441d      	add	r5, r3
 800f96c:	445b      	add	r3, fp
 800f96e:	461e      	mov	r6, r3
 800f970:	462c      	mov	r4, r5
 800f972:	4544      	cmp	r4, r8
 800f974:	d30e      	bcc.n	800f994 <__mdiff+0xf8>
 800f976:	f108 0103 	add.w	r1, r8, #3
 800f97a:	1b49      	subs	r1, r1, r5
 800f97c:	f021 0103 	bic.w	r1, r1, #3
 800f980:	3d03      	subs	r5, #3
 800f982:	45a8      	cmp	r8, r5
 800f984:	bf38      	it	cc
 800f986:	2100      	movcc	r1, #0
 800f988:	440b      	add	r3, r1
 800f98a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f98e:	b191      	cbz	r1, 800f9b6 <__mdiff+0x11a>
 800f990:	6117      	str	r7, [r2, #16]
 800f992:	e79d      	b.n	800f8d0 <__mdiff+0x34>
 800f994:	f854 1b04 	ldr.w	r1, [r4], #4
 800f998:	46e6      	mov	lr, ip
 800f99a:	0c08      	lsrs	r0, r1, #16
 800f99c:	fa1c fc81 	uxtah	ip, ip, r1
 800f9a0:	4471      	add	r1, lr
 800f9a2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f9a6:	b289      	uxth	r1, r1
 800f9a8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f9ac:	f846 1b04 	str.w	r1, [r6], #4
 800f9b0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f9b4:	e7dd      	b.n	800f972 <__mdiff+0xd6>
 800f9b6:	3f01      	subs	r7, #1
 800f9b8:	e7e7      	b.n	800f98a <__mdiff+0xee>
 800f9ba:	bf00      	nop
 800f9bc:	0801104b 	.word	0x0801104b
 800f9c0:	080110bc 	.word	0x080110bc

0800f9c4 <__ulp>:
 800f9c4:	b082      	sub	sp, #8
 800f9c6:	ed8d 0b00 	vstr	d0, [sp]
 800f9ca:	9a01      	ldr	r2, [sp, #4]
 800f9cc:	4b0f      	ldr	r3, [pc, #60]	@ (800fa0c <__ulp+0x48>)
 800f9ce:	4013      	ands	r3, r2
 800f9d0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	dc08      	bgt.n	800f9ea <__ulp+0x26>
 800f9d8:	425b      	negs	r3, r3
 800f9da:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800f9de:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f9e2:	da04      	bge.n	800f9ee <__ulp+0x2a>
 800f9e4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800f9e8:	4113      	asrs	r3, r2
 800f9ea:	2200      	movs	r2, #0
 800f9ec:	e008      	b.n	800fa00 <__ulp+0x3c>
 800f9ee:	f1a2 0314 	sub.w	r3, r2, #20
 800f9f2:	2b1e      	cmp	r3, #30
 800f9f4:	bfda      	itte	le
 800f9f6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800f9fa:	40da      	lsrle	r2, r3
 800f9fc:	2201      	movgt	r2, #1
 800f9fe:	2300      	movs	r3, #0
 800fa00:	4619      	mov	r1, r3
 800fa02:	4610      	mov	r0, r2
 800fa04:	ec41 0b10 	vmov	d0, r0, r1
 800fa08:	b002      	add	sp, #8
 800fa0a:	4770      	bx	lr
 800fa0c:	7ff00000 	.word	0x7ff00000

0800fa10 <__b2d>:
 800fa10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa14:	6906      	ldr	r6, [r0, #16]
 800fa16:	f100 0814 	add.w	r8, r0, #20
 800fa1a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800fa1e:	1f37      	subs	r7, r6, #4
 800fa20:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800fa24:	4610      	mov	r0, r2
 800fa26:	f7ff fd53 	bl	800f4d0 <__hi0bits>
 800fa2a:	f1c0 0320 	rsb	r3, r0, #32
 800fa2e:	280a      	cmp	r0, #10
 800fa30:	600b      	str	r3, [r1, #0]
 800fa32:	491b      	ldr	r1, [pc, #108]	@ (800faa0 <__b2d+0x90>)
 800fa34:	dc15      	bgt.n	800fa62 <__b2d+0x52>
 800fa36:	f1c0 0c0b 	rsb	ip, r0, #11
 800fa3a:	fa22 f30c 	lsr.w	r3, r2, ip
 800fa3e:	45b8      	cmp	r8, r7
 800fa40:	ea43 0501 	orr.w	r5, r3, r1
 800fa44:	bf34      	ite	cc
 800fa46:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800fa4a:	2300      	movcs	r3, #0
 800fa4c:	3015      	adds	r0, #21
 800fa4e:	fa02 f000 	lsl.w	r0, r2, r0
 800fa52:	fa23 f30c 	lsr.w	r3, r3, ip
 800fa56:	4303      	orrs	r3, r0
 800fa58:	461c      	mov	r4, r3
 800fa5a:	ec45 4b10 	vmov	d0, r4, r5
 800fa5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa62:	45b8      	cmp	r8, r7
 800fa64:	bf3a      	itte	cc
 800fa66:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800fa6a:	f1a6 0708 	subcc.w	r7, r6, #8
 800fa6e:	2300      	movcs	r3, #0
 800fa70:	380b      	subs	r0, #11
 800fa72:	d012      	beq.n	800fa9a <__b2d+0x8a>
 800fa74:	f1c0 0120 	rsb	r1, r0, #32
 800fa78:	fa23 f401 	lsr.w	r4, r3, r1
 800fa7c:	4082      	lsls	r2, r0
 800fa7e:	4322      	orrs	r2, r4
 800fa80:	4547      	cmp	r7, r8
 800fa82:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800fa86:	bf8c      	ite	hi
 800fa88:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800fa8c:	2200      	movls	r2, #0
 800fa8e:	4083      	lsls	r3, r0
 800fa90:	40ca      	lsrs	r2, r1
 800fa92:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800fa96:	4313      	orrs	r3, r2
 800fa98:	e7de      	b.n	800fa58 <__b2d+0x48>
 800fa9a:	ea42 0501 	orr.w	r5, r2, r1
 800fa9e:	e7db      	b.n	800fa58 <__b2d+0x48>
 800faa0:	3ff00000 	.word	0x3ff00000

0800faa4 <__d2b>:
 800faa4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800faa8:	460f      	mov	r7, r1
 800faaa:	2101      	movs	r1, #1
 800faac:	ec59 8b10 	vmov	r8, r9, d0
 800fab0:	4616      	mov	r6, r2
 800fab2:	f7ff fc1b 	bl	800f2ec <_Balloc>
 800fab6:	4604      	mov	r4, r0
 800fab8:	b930      	cbnz	r0, 800fac8 <__d2b+0x24>
 800faba:	4602      	mov	r2, r0
 800fabc:	4b23      	ldr	r3, [pc, #140]	@ (800fb4c <__d2b+0xa8>)
 800fabe:	4824      	ldr	r0, [pc, #144]	@ (800fb50 <__d2b+0xac>)
 800fac0:	f240 310f 	movw	r1, #783	@ 0x30f
 800fac4:	f7fc f894 	bl	800bbf0 <__assert_func>
 800fac8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800facc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fad0:	b10d      	cbz	r5, 800fad6 <__d2b+0x32>
 800fad2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fad6:	9301      	str	r3, [sp, #4]
 800fad8:	f1b8 0300 	subs.w	r3, r8, #0
 800fadc:	d023      	beq.n	800fb26 <__d2b+0x82>
 800fade:	4668      	mov	r0, sp
 800fae0:	9300      	str	r3, [sp, #0]
 800fae2:	f7ff fd14 	bl	800f50e <__lo0bits>
 800fae6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800faea:	b1d0      	cbz	r0, 800fb22 <__d2b+0x7e>
 800faec:	f1c0 0320 	rsb	r3, r0, #32
 800faf0:	fa02 f303 	lsl.w	r3, r2, r3
 800faf4:	430b      	orrs	r3, r1
 800faf6:	40c2      	lsrs	r2, r0
 800faf8:	6163      	str	r3, [r4, #20]
 800fafa:	9201      	str	r2, [sp, #4]
 800fafc:	9b01      	ldr	r3, [sp, #4]
 800fafe:	61a3      	str	r3, [r4, #24]
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	bf0c      	ite	eq
 800fb04:	2201      	moveq	r2, #1
 800fb06:	2202      	movne	r2, #2
 800fb08:	6122      	str	r2, [r4, #16]
 800fb0a:	b1a5      	cbz	r5, 800fb36 <__d2b+0x92>
 800fb0c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800fb10:	4405      	add	r5, r0
 800fb12:	603d      	str	r5, [r7, #0]
 800fb14:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800fb18:	6030      	str	r0, [r6, #0]
 800fb1a:	4620      	mov	r0, r4
 800fb1c:	b003      	add	sp, #12
 800fb1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fb22:	6161      	str	r1, [r4, #20]
 800fb24:	e7ea      	b.n	800fafc <__d2b+0x58>
 800fb26:	a801      	add	r0, sp, #4
 800fb28:	f7ff fcf1 	bl	800f50e <__lo0bits>
 800fb2c:	9b01      	ldr	r3, [sp, #4]
 800fb2e:	6163      	str	r3, [r4, #20]
 800fb30:	3020      	adds	r0, #32
 800fb32:	2201      	movs	r2, #1
 800fb34:	e7e8      	b.n	800fb08 <__d2b+0x64>
 800fb36:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fb3a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800fb3e:	6038      	str	r0, [r7, #0]
 800fb40:	6918      	ldr	r0, [r3, #16]
 800fb42:	f7ff fcc5 	bl	800f4d0 <__hi0bits>
 800fb46:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fb4a:	e7e5      	b.n	800fb18 <__d2b+0x74>
 800fb4c:	0801104b 	.word	0x0801104b
 800fb50:	080110bc 	.word	0x080110bc

0800fb54 <__ratio>:
 800fb54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb58:	b085      	sub	sp, #20
 800fb5a:	e9cd 1000 	strd	r1, r0, [sp]
 800fb5e:	a902      	add	r1, sp, #8
 800fb60:	f7ff ff56 	bl	800fa10 <__b2d>
 800fb64:	9800      	ldr	r0, [sp, #0]
 800fb66:	a903      	add	r1, sp, #12
 800fb68:	ec55 4b10 	vmov	r4, r5, d0
 800fb6c:	f7ff ff50 	bl	800fa10 <__b2d>
 800fb70:	9b01      	ldr	r3, [sp, #4]
 800fb72:	6919      	ldr	r1, [r3, #16]
 800fb74:	9b00      	ldr	r3, [sp, #0]
 800fb76:	691b      	ldr	r3, [r3, #16]
 800fb78:	1ac9      	subs	r1, r1, r3
 800fb7a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800fb7e:	1a9b      	subs	r3, r3, r2
 800fb80:	ec5b ab10 	vmov	sl, fp, d0
 800fb84:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	bfce      	itee	gt
 800fb8c:	462a      	movgt	r2, r5
 800fb8e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800fb92:	465a      	movle	r2, fp
 800fb94:	462f      	mov	r7, r5
 800fb96:	46d9      	mov	r9, fp
 800fb98:	bfcc      	ite	gt
 800fb9a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800fb9e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800fba2:	464b      	mov	r3, r9
 800fba4:	4652      	mov	r2, sl
 800fba6:	4620      	mov	r0, r4
 800fba8:	4639      	mov	r1, r7
 800fbaa:	f7f0 fe6f 	bl	800088c <__aeabi_ddiv>
 800fbae:	ec41 0b10 	vmov	d0, r0, r1
 800fbb2:	b005      	add	sp, #20
 800fbb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fbb8 <__copybits>:
 800fbb8:	3901      	subs	r1, #1
 800fbba:	b570      	push	{r4, r5, r6, lr}
 800fbbc:	1149      	asrs	r1, r1, #5
 800fbbe:	6914      	ldr	r4, [r2, #16]
 800fbc0:	3101      	adds	r1, #1
 800fbc2:	f102 0314 	add.w	r3, r2, #20
 800fbc6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fbca:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fbce:	1f05      	subs	r5, r0, #4
 800fbd0:	42a3      	cmp	r3, r4
 800fbd2:	d30c      	bcc.n	800fbee <__copybits+0x36>
 800fbd4:	1aa3      	subs	r3, r4, r2
 800fbd6:	3b11      	subs	r3, #17
 800fbd8:	f023 0303 	bic.w	r3, r3, #3
 800fbdc:	3211      	adds	r2, #17
 800fbde:	42a2      	cmp	r2, r4
 800fbe0:	bf88      	it	hi
 800fbe2:	2300      	movhi	r3, #0
 800fbe4:	4418      	add	r0, r3
 800fbe6:	2300      	movs	r3, #0
 800fbe8:	4288      	cmp	r0, r1
 800fbea:	d305      	bcc.n	800fbf8 <__copybits+0x40>
 800fbec:	bd70      	pop	{r4, r5, r6, pc}
 800fbee:	f853 6b04 	ldr.w	r6, [r3], #4
 800fbf2:	f845 6f04 	str.w	r6, [r5, #4]!
 800fbf6:	e7eb      	b.n	800fbd0 <__copybits+0x18>
 800fbf8:	f840 3b04 	str.w	r3, [r0], #4
 800fbfc:	e7f4      	b.n	800fbe8 <__copybits+0x30>

0800fbfe <__any_on>:
 800fbfe:	f100 0214 	add.w	r2, r0, #20
 800fc02:	6900      	ldr	r0, [r0, #16]
 800fc04:	114b      	asrs	r3, r1, #5
 800fc06:	4298      	cmp	r0, r3
 800fc08:	b510      	push	{r4, lr}
 800fc0a:	db11      	blt.n	800fc30 <__any_on+0x32>
 800fc0c:	dd0a      	ble.n	800fc24 <__any_on+0x26>
 800fc0e:	f011 011f 	ands.w	r1, r1, #31
 800fc12:	d007      	beq.n	800fc24 <__any_on+0x26>
 800fc14:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fc18:	fa24 f001 	lsr.w	r0, r4, r1
 800fc1c:	fa00 f101 	lsl.w	r1, r0, r1
 800fc20:	428c      	cmp	r4, r1
 800fc22:	d10b      	bne.n	800fc3c <__any_on+0x3e>
 800fc24:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fc28:	4293      	cmp	r3, r2
 800fc2a:	d803      	bhi.n	800fc34 <__any_on+0x36>
 800fc2c:	2000      	movs	r0, #0
 800fc2e:	bd10      	pop	{r4, pc}
 800fc30:	4603      	mov	r3, r0
 800fc32:	e7f7      	b.n	800fc24 <__any_on+0x26>
 800fc34:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fc38:	2900      	cmp	r1, #0
 800fc3a:	d0f5      	beq.n	800fc28 <__any_on+0x2a>
 800fc3c:	2001      	movs	r0, #1
 800fc3e:	e7f6      	b.n	800fc2e <__any_on+0x30>

0800fc40 <_realloc_r>:
 800fc40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc44:	4607      	mov	r7, r0
 800fc46:	4614      	mov	r4, r2
 800fc48:	460d      	mov	r5, r1
 800fc4a:	b921      	cbnz	r1, 800fc56 <_realloc_r+0x16>
 800fc4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fc50:	4611      	mov	r1, r2
 800fc52:	f7fc b831 	b.w	800bcb8 <_malloc_r>
 800fc56:	b92a      	cbnz	r2, 800fc64 <_realloc_r+0x24>
 800fc58:	f7fe ff7e 	bl	800eb58 <_free_r>
 800fc5c:	4625      	mov	r5, r4
 800fc5e:	4628      	mov	r0, r5
 800fc60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc64:	f000 fc1e 	bl	80104a4 <_malloc_usable_size_r>
 800fc68:	4284      	cmp	r4, r0
 800fc6a:	4606      	mov	r6, r0
 800fc6c:	d802      	bhi.n	800fc74 <_realloc_r+0x34>
 800fc6e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fc72:	d8f4      	bhi.n	800fc5e <_realloc_r+0x1e>
 800fc74:	4621      	mov	r1, r4
 800fc76:	4638      	mov	r0, r7
 800fc78:	f7fc f81e 	bl	800bcb8 <_malloc_r>
 800fc7c:	4680      	mov	r8, r0
 800fc7e:	b908      	cbnz	r0, 800fc84 <_realloc_r+0x44>
 800fc80:	4645      	mov	r5, r8
 800fc82:	e7ec      	b.n	800fc5e <_realloc_r+0x1e>
 800fc84:	42b4      	cmp	r4, r6
 800fc86:	4622      	mov	r2, r4
 800fc88:	4629      	mov	r1, r5
 800fc8a:	bf28      	it	cs
 800fc8c:	4632      	movcs	r2, r6
 800fc8e:	f7fe f8e2 	bl	800de56 <memcpy>
 800fc92:	4629      	mov	r1, r5
 800fc94:	4638      	mov	r0, r7
 800fc96:	f7fe ff5f 	bl	800eb58 <_free_r>
 800fc9a:	e7f1      	b.n	800fc80 <_realloc_r+0x40>

0800fc9c <_strtol_l.isra.0>:
 800fc9c:	2b24      	cmp	r3, #36	@ 0x24
 800fc9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fca2:	4686      	mov	lr, r0
 800fca4:	4690      	mov	r8, r2
 800fca6:	d801      	bhi.n	800fcac <_strtol_l.isra.0+0x10>
 800fca8:	2b01      	cmp	r3, #1
 800fcaa:	d106      	bne.n	800fcba <_strtol_l.isra.0+0x1e>
 800fcac:	f7fe f8a6 	bl	800ddfc <__errno>
 800fcb0:	2316      	movs	r3, #22
 800fcb2:	6003      	str	r3, [r0, #0]
 800fcb4:	2000      	movs	r0, #0
 800fcb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcba:	4834      	ldr	r0, [pc, #208]	@ (800fd8c <_strtol_l.isra.0+0xf0>)
 800fcbc:	460d      	mov	r5, r1
 800fcbe:	462a      	mov	r2, r5
 800fcc0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fcc4:	5d06      	ldrb	r6, [r0, r4]
 800fcc6:	f016 0608 	ands.w	r6, r6, #8
 800fcca:	d1f8      	bne.n	800fcbe <_strtol_l.isra.0+0x22>
 800fccc:	2c2d      	cmp	r4, #45	@ 0x2d
 800fcce:	d110      	bne.n	800fcf2 <_strtol_l.isra.0+0x56>
 800fcd0:	782c      	ldrb	r4, [r5, #0]
 800fcd2:	2601      	movs	r6, #1
 800fcd4:	1c95      	adds	r5, r2, #2
 800fcd6:	f033 0210 	bics.w	r2, r3, #16
 800fcda:	d115      	bne.n	800fd08 <_strtol_l.isra.0+0x6c>
 800fcdc:	2c30      	cmp	r4, #48	@ 0x30
 800fcde:	d10d      	bne.n	800fcfc <_strtol_l.isra.0+0x60>
 800fce0:	782a      	ldrb	r2, [r5, #0]
 800fce2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800fce6:	2a58      	cmp	r2, #88	@ 0x58
 800fce8:	d108      	bne.n	800fcfc <_strtol_l.isra.0+0x60>
 800fcea:	786c      	ldrb	r4, [r5, #1]
 800fcec:	3502      	adds	r5, #2
 800fcee:	2310      	movs	r3, #16
 800fcf0:	e00a      	b.n	800fd08 <_strtol_l.isra.0+0x6c>
 800fcf2:	2c2b      	cmp	r4, #43	@ 0x2b
 800fcf4:	bf04      	itt	eq
 800fcf6:	782c      	ldrbeq	r4, [r5, #0]
 800fcf8:	1c95      	addeq	r5, r2, #2
 800fcfa:	e7ec      	b.n	800fcd6 <_strtol_l.isra.0+0x3a>
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d1f6      	bne.n	800fcee <_strtol_l.isra.0+0x52>
 800fd00:	2c30      	cmp	r4, #48	@ 0x30
 800fd02:	bf14      	ite	ne
 800fd04:	230a      	movne	r3, #10
 800fd06:	2308      	moveq	r3, #8
 800fd08:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800fd0c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800fd10:	2200      	movs	r2, #0
 800fd12:	fbbc f9f3 	udiv	r9, ip, r3
 800fd16:	4610      	mov	r0, r2
 800fd18:	fb03 ca19 	mls	sl, r3, r9, ip
 800fd1c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800fd20:	2f09      	cmp	r7, #9
 800fd22:	d80f      	bhi.n	800fd44 <_strtol_l.isra.0+0xa8>
 800fd24:	463c      	mov	r4, r7
 800fd26:	42a3      	cmp	r3, r4
 800fd28:	dd1b      	ble.n	800fd62 <_strtol_l.isra.0+0xc6>
 800fd2a:	1c57      	adds	r7, r2, #1
 800fd2c:	d007      	beq.n	800fd3e <_strtol_l.isra.0+0xa2>
 800fd2e:	4581      	cmp	r9, r0
 800fd30:	d314      	bcc.n	800fd5c <_strtol_l.isra.0+0xc0>
 800fd32:	d101      	bne.n	800fd38 <_strtol_l.isra.0+0x9c>
 800fd34:	45a2      	cmp	sl, r4
 800fd36:	db11      	blt.n	800fd5c <_strtol_l.isra.0+0xc0>
 800fd38:	fb00 4003 	mla	r0, r0, r3, r4
 800fd3c:	2201      	movs	r2, #1
 800fd3e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fd42:	e7eb      	b.n	800fd1c <_strtol_l.isra.0+0x80>
 800fd44:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800fd48:	2f19      	cmp	r7, #25
 800fd4a:	d801      	bhi.n	800fd50 <_strtol_l.isra.0+0xb4>
 800fd4c:	3c37      	subs	r4, #55	@ 0x37
 800fd4e:	e7ea      	b.n	800fd26 <_strtol_l.isra.0+0x8a>
 800fd50:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800fd54:	2f19      	cmp	r7, #25
 800fd56:	d804      	bhi.n	800fd62 <_strtol_l.isra.0+0xc6>
 800fd58:	3c57      	subs	r4, #87	@ 0x57
 800fd5a:	e7e4      	b.n	800fd26 <_strtol_l.isra.0+0x8a>
 800fd5c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fd60:	e7ed      	b.n	800fd3e <_strtol_l.isra.0+0xa2>
 800fd62:	1c53      	adds	r3, r2, #1
 800fd64:	d108      	bne.n	800fd78 <_strtol_l.isra.0+0xdc>
 800fd66:	2322      	movs	r3, #34	@ 0x22
 800fd68:	f8ce 3000 	str.w	r3, [lr]
 800fd6c:	4660      	mov	r0, ip
 800fd6e:	f1b8 0f00 	cmp.w	r8, #0
 800fd72:	d0a0      	beq.n	800fcb6 <_strtol_l.isra.0+0x1a>
 800fd74:	1e69      	subs	r1, r5, #1
 800fd76:	e006      	b.n	800fd86 <_strtol_l.isra.0+0xea>
 800fd78:	b106      	cbz	r6, 800fd7c <_strtol_l.isra.0+0xe0>
 800fd7a:	4240      	negs	r0, r0
 800fd7c:	f1b8 0f00 	cmp.w	r8, #0
 800fd80:	d099      	beq.n	800fcb6 <_strtol_l.isra.0+0x1a>
 800fd82:	2a00      	cmp	r2, #0
 800fd84:	d1f6      	bne.n	800fd74 <_strtol_l.isra.0+0xd8>
 800fd86:	f8c8 1000 	str.w	r1, [r8]
 800fd8a:	e794      	b.n	800fcb6 <_strtol_l.isra.0+0x1a>
 800fd8c:	08011279 	.word	0x08011279

0800fd90 <_strtol_r>:
 800fd90:	f7ff bf84 	b.w	800fc9c <_strtol_l.isra.0>

0800fd94 <__ascii_wctomb>:
 800fd94:	4603      	mov	r3, r0
 800fd96:	4608      	mov	r0, r1
 800fd98:	b141      	cbz	r1, 800fdac <__ascii_wctomb+0x18>
 800fd9a:	2aff      	cmp	r2, #255	@ 0xff
 800fd9c:	d904      	bls.n	800fda8 <__ascii_wctomb+0x14>
 800fd9e:	228a      	movs	r2, #138	@ 0x8a
 800fda0:	601a      	str	r2, [r3, #0]
 800fda2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fda6:	4770      	bx	lr
 800fda8:	700a      	strb	r2, [r1, #0]
 800fdaa:	2001      	movs	r0, #1
 800fdac:	4770      	bx	lr

0800fdae <__ssputs_r>:
 800fdae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fdb2:	688e      	ldr	r6, [r1, #8]
 800fdb4:	461f      	mov	r7, r3
 800fdb6:	42be      	cmp	r6, r7
 800fdb8:	680b      	ldr	r3, [r1, #0]
 800fdba:	4682      	mov	sl, r0
 800fdbc:	460c      	mov	r4, r1
 800fdbe:	4690      	mov	r8, r2
 800fdc0:	d82d      	bhi.n	800fe1e <__ssputs_r+0x70>
 800fdc2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fdc6:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800fdca:	d026      	beq.n	800fe1a <__ssputs_r+0x6c>
 800fdcc:	6965      	ldr	r5, [r4, #20]
 800fdce:	6909      	ldr	r1, [r1, #16]
 800fdd0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fdd4:	eba3 0901 	sub.w	r9, r3, r1
 800fdd8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fddc:	1c7b      	adds	r3, r7, #1
 800fdde:	444b      	add	r3, r9
 800fde0:	106d      	asrs	r5, r5, #1
 800fde2:	429d      	cmp	r5, r3
 800fde4:	bf38      	it	cc
 800fde6:	461d      	movcc	r5, r3
 800fde8:	0553      	lsls	r3, r2, #21
 800fdea:	d527      	bpl.n	800fe3c <__ssputs_r+0x8e>
 800fdec:	4629      	mov	r1, r5
 800fdee:	f7fb ff63 	bl	800bcb8 <_malloc_r>
 800fdf2:	4606      	mov	r6, r0
 800fdf4:	b360      	cbz	r0, 800fe50 <__ssputs_r+0xa2>
 800fdf6:	6921      	ldr	r1, [r4, #16]
 800fdf8:	464a      	mov	r2, r9
 800fdfa:	f7fe f82c 	bl	800de56 <memcpy>
 800fdfe:	89a3      	ldrh	r3, [r4, #12]
 800fe00:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800fe04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fe08:	81a3      	strh	r3, [r4, #12]
 800fe0a:	6126      	str	r6, [r4, #16]
 800fe0c:	6165      	str	r5, [r4, #20]
 800fe0e:	444e      	add	r6, r9
 800fe10:	eba5 0509 	sub.w	r5, r5, r9
 800fe14:	6026      	str	r6, [r4, #0]
 800fe16:	60a5      	str	r5, [r4, #8]
 800fe18:	463e      	mov	r6, r7
 800fe1a:	42be      	cmp	r6, r7
 800fe1c:	d900      	bls.n	800fe20 <__ssputs_r+0x72>
 800fe1e:	463e      	mov	r6, r7
 800fe20:	6820      	ldr	r0, [r4, #0]
 800fe22:	4632      	mov	r2, r6
 800fe24:	4641      	mov	r1, r8
 800fe26:	f000 fabd 	bl	80103a4 <memmove>
 800fe2a:	68a3      	ldr	r3, [r4, #8]
 800fe2c:	1b9b      	subs	r3, r3, r6
 800fe2e:	60a3      	str	r3, [r4, #8]
 800fe30:	6823      	ldr	r3, [r4, #0]
 800fe32:	4433      	add	r3, r6
 800fe34:	6023      	str	r3, [r4, #0]
 800fe36:	2000      	movs	r0, #0
 800fe38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe3c:	462a      	mov	r2, r5
 800fe3e:	f7ff feff 	bl	800fc40 <_realloc_r>
 800fe42:	4606      	mov	r6, r0
 800fe44:	2800      	cmp	r0, #0
 800fe46:	d1e0      	bne.n	800fe0a <__ssputs_r+0x5c>
 800fe48:	6921      	ldr	r1, [r4, #16]
 800fe4a:	4650      	mov	r0, sl
 800fe4c:	f7fe fe84 	bl	800eb58 <_free_r>
 800fe50:	230c      	movs	r3, #12
 800fe52:	f8ca 3000 	str.w	r3, [sl]
 800fe56:	89a3      	ldrh	r3, [r4, #12]
 800fe58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fe5c:	81a3      	strh	r3, [r4, #12]
 800fe5e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fe62:	e7e9      	b.n	800fe38 <__ssputs_r+0x8a>

0800fe64 <_svfiprintf_r>:
 800fe64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe68:	4698      	mov	r8, r3
 800fe6a:	898b      	ldrh	r3, [r1, #12]
 800fe6c:	061b      	lsls	r3, r3, #24
 800fe6e:	b09d      	sub	sp, #116	@ 0x74
 800fe70:	4607      	mov	r7, r0
 800fe72:	460d      	mov	r5, r1
 800fe74:	4614      	mov	r4, r2
 800fe76:	d510      	bpl.n	800fe9a <_svfiprintf_r+0x36>
 800fe78:	690b      	ldr	r3, [r1, #16]
 800fe7a:	b973      	cbnz	r3, 800fe9a <_svfiprintf_r+0x36>
 800fe7c:	2140      	movs	r1, #64	@ 0x40
 800fe7e:	f7fb ff1b 	bl	800bcb8 <_malloc_r>
 800fe82:	6028      	str	r0, [r5, #0]
 800fe84:	6128      	str	r0, [r5, #16]
 800fe86:	b930      	cbnz	r0, 800fe96 <_svfiprintf_r+0x32>
 800fe88:	230c      	movs	r3, #12
 800fe8a:	603b      	str	r3, [r7, #0]
 800fe8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fe90:	b01d      	add	sp, #116	@ 0x74
 800fe92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe96:	2340      	movs	r3, #64	@ 0x40
 800fe98:	616b      	str	r3, [r5, #20]
 800fe9a:	2300      	movs	r3, #0
 800fe9c:	9309      	str	r3, [sp, #36]	@ 0x24
 800fe9e:	2320      	movs	r3, #32
 800fea0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fea4:	f8cd 800c 	str.w	r8, [sp, #12]
 800fea8:	2330      	movs	r3, #48	@ 0x30
 800feaa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010048 <_svfiprintf_r+0x1e4>
 800feae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800feb2:	f04f 0901 	mov.w	r9, #1
 800feb6:	4623      	mov	r3, r4
 800feb8:	469a      	mov	sl, r3
 800feba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800febe:	b10a      	cbz	r2, 800fec4 <_svfiprintf_r+0x60>
 800fec0:	2a25      	cmp	r2, #37	@ 0x25
 800fec2:	d1f9      	bne.n	800feb8 <_svfiprintf_r+0x54>
 800fec4:	ebba 0b04 	subs.w	fp, sl, r4
 800fec8:	d00b      	beq.n	800fee2 <_svfiprintf_r+0x7e>
 800feca:	465b      	mov	r3, fp
 800fecc:	4622      	mov	r2, r4
 800fece:	4629      	mov	r1, r5
 800fed0:	4638      	mov	r0, r7
 800fed2:	f7ff ff6c 	bl	800fdae <__ssputs_r>
 800fed6:	3001      	adds	r0, #1
 800fed8:	f000 80a7 	beq.w	801002a <_svfiprintf_r+0x1c6>
 800fedc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fede:	445a      	add	r2, fp
 800fee0:	9209      	str	r2, [sp, #36]	@ 0x24
 800fee2:	f89a 3000 	ldrb.w	r3, [sl]
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	f000 809f 	beq.w	801002a <_svfiprintf_r+0x1c6>
 800feec:	2300      	movs	r3, #0
 800feee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fef2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fef6:	f10a 0a01 	add.w	sl, sl, #1
 800fefa:	9304      	str	r3, [sp, #16]
 800fefc:	9307      	str	r3, [sp, #28]
 800fefe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ff02:	931a      	str	r3, [sp, #104]	@ 0x68
 800ff04:	4654      	mov	r4, sl
 800ff06:	2205      	movs	r2, #5
 800ff08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff0c:	484e      	ldr	r0, [pc, #312]	@ (8010048 <_svfiprintf_r+0x1e4>)
 800ff0e:	f7f0 f97f 	bl	8000210 <memchr>
 800ff12:	9a04      	ldr	r2, [sp, #16]
 800ff14:	b9d8      	cbnz	r0, 800ff4e <_svfiprintf_r+0xea>
 800ff16:	06d0      	lsls	r0, r2, #27
 800ff18:	bf44      	itt	mi
 800ff1a:	2320      	movmi	r3, #32
 800ff1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ff20:	0711      	lsls	r1, r2, #28
 800ff22:	bf44      	itt	mi
 800ff24:	232b      	movmi	r3, #43	@ 0x2b
 800ff26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ff2a:	f89a 3000 	ldrb.w	r3, [sl]
 800ff2e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ff30:	d015      	beq.n	800ff5e <_svfiprintf_r+0xfa>
 800ff32:	9a07      	ldr	r2, [sp, #28]
 800ff34:	4654      	mov	r4, sl
 800ff36:	2000      	movs	r0, #0
 800ff38:	f04f 0c0a 	mov.w	ip, #10
 800ff3c:	4621      	mov	r1, r4
 800ff3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ff42:	3b30      	subs	r3, #48	@ 0x30
 800ff44:	2b09      	cmp	r3, #9
 800ff46:	d94b      	bls.n	800ffe0 <_svfiprintf_r+0x17c>
 800ff48:	b1b0      	cbz	r0, 800ff78 <_svfiprintf_r+0x114>
 800ff4a:	9207      	str	r2, [sp, #28]
 800ff4c:	e014      	b.n	800ff78 <_svfiprintf_r+0x114>
 800ff4e:	eba0 0308 	sub.w	r3, r0, r8
 800ff52:	fa09 f303 	lsl.w	r3, r9, r3
 800ff56:	4313      	orrs	r3, r2
 800ff58:	9304      	str	r3, [sp, #16]
 800ff5a:	46a2      	mov	sl, r4
 800ff5c:	e7d2      	b.n	800ff04 <_svfiprintf_r+0xa0>
 800ff5e:	9b03      	ldr	r3, [sp, #12]
 800ff60:	1d19      	adds	r1, r3, #4
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	9103      	str	r1, [sp, #12]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	bfbb      	ittet	lt
 800ff6a:	425b      	neglt	r3, r3
 800ff6c:	f042 0202 	orrlt.w	r2, r2, #2
 800ff70:	9307      	strge	r3, [sp, #28]
 800ff72:	9307      	strlt	r3, [sp, #28]
 800ff74:	bfb8      	it	lt
 800ff76:	9204      	strlt	r2, [sp, #16]
 800ff78:	7823      	ldrb	r3, [r4, #0]
 800ff7a:	2b2e      	cmp	r3, #46	@ 0x2e
 800ff7c:	d10a      	bne.n	800ff94 <_svfiprintf_r+0x130>
 800ff7e:	7863      	ldrb	r3, [r4, #1]
 800ff80:	2b2a      	cmp	r3, #42	@ 0x2a
 800ff82:	d132      	bne.n	800ffea <_svfiprintf_r+0x186>
 800ff84:	9b03      	ldr	r3, [sp, #12]
 800ff86:	1d1a      	adds	r2, r3, #4
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	9203      	str	r2, [sp, #12]
 800ff8c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ff90:	3402      	adds	r4, #2
 800ff92:	9305      	str	r3, [sp, #20]
 800ff94:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010058 <_svfiprintf_r+0x1f4>
 800ff98:	7821      	ldrb	r1, [r4, #0]
 800ff9a:	2203      	movs	r2, #3
 800ff9c:	4650      	mov	r0, sl
 800ff9e:	f7f0 f937 	bl	8000210 <memchr>
 800ffa2:	b138      	cbz	r0, 800ffb4 <_svfiprintf_r+0x150>
 800ffa4:	9b04      	ldr	r3, [sp, #16]
 800ffa6:	eba0 000a 	sub.w	r0, r0, sl
 800ffaa:	2240      	movs	r2, #64	@ 0x40
 800ffac:	4082      	lsls	r2, r0
 800ffae:	4313      	orrs	r3, r2
 800ffb0:	3401      	adds	r4, #1
 800ffb2:	9304      	str	r3, [sp, #16]
 800ffb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ffb8:	4824      	ldr	r0, [pc, #144]	@ (801004c <_svfiprintf_r+0x1e8>)
 800ffba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ffbe:	2206      	movs	r2, #6
 800ffc0:	f7f0 f926 	bl	8000210 <memchr>
 800ffc4:	2800      	cmp	r0, #0
 800ffc6:	d036      	beq.n	8010036 <_svfiprintf_r+0x1d2>
 800ffc8:	4b21      	ldr	r3, [pc, #132]	@ (8010050 <_svfiprintf_r+0x1ec>)
 800ffca:	bb1b      	cbnz	r3, 8010014 <_svfiprintf_r+0x1b0>
 800ffcc:	9b03      	ldr	r3, [sp, #12]
 800ffce:	3307      	adds	r3, #7
 800ffd0:	f023 0307 	bic.w	r3, r3, #7
 800ffd4:	3308      	adds	r3, #8
 800ffd6:	9303      	str	r3, [sp, #12]
 800ffd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ffda:	4433      	add	r3, r6
 800ffdc:	9309      	str	r3, [sp, #36]	@ 0x24
 800ffde:	e76a      	b.n	800feb6 <_svfiprintf_r+0x52>
 800ffe0:	fb0c 3202 	mla	r2, ip, r2, r3
 800ffe4:	460c      	mov	r4, r1
 800ffe6:	2001      	movs	r0, #1
 800ffe8:	e7a8      	b.n	800ff3c <_svfiprintf_r+0xd8>
 800ffea:	2300      	movs	r3, #0
 800ffec:	3401      	adds	r4, #1
 800ffee:	9305      	str	r3, [sp, #20]
 800fff0:	4619      	mov	r1, r3
 800fff2:	f04f 0c0a 	mov.w	ip, #10
 800fff6:	4620      	mov	r0, r4
 800fff8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fffc:	3a30      	subs	r2, #48	@ 0x30
 800fffe:	2a09      	cmp	r2, #9
 8010000:	d903      	bls.n	801000a <_svfiprintf_r+0x1a6>
 8010002:	2b00      	cmp	r3, #0
 8010004:	d0c6      	beq.n	800ff94 <_svfiprintf_r+0x130>
 8010006:	9105      	str	r1, [sp, #20]
 8010008:	e7c4      	b.n	800ff94 <_svfiprintf_r+0x130>
 801000a:	fb0c 2101 	mla	r1, ip, r1, r2
 801000e:	4604      	mov	r4, r0
 8010010:	2301      	movs	r3, #1
 8010012:	e7f0      	b.n	800fff6 <_svfiprintf_r+0x192>
 8010014:	ab03      	add	r3, sp, #12
 8010016:	9300      	str	r3, [sp, #0]
 8010018:	462a      	mov	r2, r5
 801001a:	4b0e      	ldr	r3, [pc, #56]	@ (8010054 <_svfiprintf_r+0x1f0>)
 801001c:	a904      	add	r1, sp, #16
 801001e:	4638      	mov	r0, r7
 8010020:	f7fc fd7c 	bl	800cb1c <_printf_float>
 8010024:	1c42      	adds	r2, r0, #1
 8010026:	4606      	mov	r6, r0
 8010028:	d1d6      	bne.n	800ffd8 <_svfiprintf_r+0x174>
 801002a:	89ab      	ldrh	r3, [r5, #12]
 801002c:	065b      	lsls	r3, r3, #25
 801002e:	f53f af2d 	bmi.w	800fe8c <_svfiprintf_r+0x28>
 8010032:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010034:	e72c      	b.n	800fe90 <_svfiprintf_r+0x2c>
 8010036:	ab03      	add	r3, sp, #12
 8010038:	9300      	str	r3, [sp, #0]
 801003a:	462a      	mov	r2, r5
 801003c:	4b05      	ldr	r3, [pc, #20]	@ (8010054 <_svfiprintf_r+0x1f0>)
 801003e:	a904      	add	r1, sp, #16
 8010040:	4638      	mov	r0, r7
 8010042:	f7fd f803 	bl	800d04c <_printf_i>
 8010046:	e7ed      	b.n	8010024 <_svfiprintf_r+0x1c0>
 8010048:	08011115 	.word	0x08011115
 801004c:	0801111f 	.word	0x0801111f
 8010050:	0800cb1d 	.word	0x0800cb1d
 8010054:	0800fdaf 	.word	0x0800fdaf
 8010058:	0801111b 	.word	0x0801111b

0801005c <__sfputc_r>:
 801005c:	6893      	ldr	r3, [r2, #8]
 801005e:	3b01      	subs	r3, #1
 8010060:	2b00      	cmp	r3, #0
 8010062:	b410      	push	{r4}
 8010064:	6093      	str	r3, [r2, #8]
 8010066:	da08      	bge.n	801007a <__sfputc_r+0x1e>
 8010068:	6994      	ldr	r4, [r2, #24]
 801006a:	42a3      	cmp	r3, r4
 801006c:	db01      	blt.n	8010072 <__sfputc_r+0x16>
 801006e:	290a      	cmp	r1, #10
 8010070:	d103      	bne.n	801007a <__sfputc_r+0x1e>
 8010072:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010076:	f7fd bd6a 	b.w	800db4e <__swbuf_r>
 801007a:	6813      	ldr	r3, [r2, #0]
 801007c:	1c58      	adds	r0, r3, #1
 801007e:	6010      	str	r0, [r2, #0]
 8010080:	7019      	strb	r1, [r3, #0]
 8010082:	4608      	mov	r0, r1
 8010084:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010088:	4770      	bx	lr

0801008a <__sfputs_r>:
 801008a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801008c:	4606      	mov	r6, r0
 801008e:	460f      	mov	r7, r1
 8010090:	4614      	mov	r4, r2
 8010092:	18d5      	adds	r5, r2, r3
 8010094:	42ac      	cmp	r4, r5
 8010096:	d101      	bne.n	801009c <__sfputs_r+0x12>
 8010098:	2000      	movs	r0, #0
 801009a:	e007      	b.n	80100ac <__sfputs_r+0x22>
 801009c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80100a0:	463a      	mov	r2, r7
 80100a2:	4630      	mov	r0, r6
 80100a4:	f7ff ffda 	bl	801005c <__sfputc_r>
 80100a8:	1c43      	adds	r3, r0, #1
 80100aa:	d1f3      	bne.n	8010094 <__sfputs_r+0xa>
 80100ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080100b0 <_vfiprintf_r>:
 80100b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100b4:	460d      	mov	r5, r1
 80100b6:	b09d      	sub	sp, #116	@ 0x74
 80100b8:	4614      	mov	r4, r2
 80100ba:	4698      	mov	r8, r3
 80100bc:	4606      	mov	r6, r0
 80100be:	b118      	cbz	r0, 80100c8 <_vfiprintf_r+0x18>
 80100c0:	6a03      	ldr	r3, [r0, #32]
 80100c2:	b90b      	cbnz	r3, 80100c8 <_vfiprintf_r+0x18>
 80100c4:	f7fd fc26 	bl	800d914 <__sinit>
 80100c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80100ca:	07d9      	lsls	r1, r3, #31
 80100cc:	d405      	bmi.n	80100da <_vfiprintf_r+0x2a>
 80100ce:	89ab      	ldrh	r3, [r5, #12]
 80100d0:	059a      	lsls	r2, r3, #22
 80100d2:	d402      	bmi.n	80100da <_vfiprintf_r+0x2a>
 80100d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80100d6:	f7fd febc 	bl	800de52 <__retarget_lock_acquire_recursive>
 80100da:	89ab      	ldrh	r3, [r5, #12]
 80100dc:	071b      	lsls	r3, r3, #28
 80100de:	d501      	bpl.n	80100e4 <_vfiprintf_r+0x34>
 80100e0:	692b      	ldr	r3, [r5, #16]
 80100e2:	b99b      	cbnz	r3, 801010c <_vfiprintf_r+0x5c>
 80100e4:	4629      	mov	r1, r5
 80100e6:	4630      	mov	r0, r6
 80100e8:	f7fd fd70 	bl	800dbcc <__swsetup_r>
 80100ec:	b170      	cbz	r0, 801010c <_vfiprintf_r+0x5c>
 80100ee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80100f0:	07dc      	lsls	r4, r3, #31
 80100f2:	d504      	bpl.n	80100fe <_vfiprintf_r+0x4e>
 80100f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80100f8:	b01d      	add	sp, #116	@ 0x74
 80100fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100fe:	89ab      	ldrh	r3, [r5, #12]
 8010100:	0598      	lsls	r0, r3, #22
 8010102:	d4f7      	bmi.n	80100f4 <_vfiprintf_r+0x44>
 8010104:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010106:	f7fd fea5 	bl	800de54 <__retarget_lock_release_recursive>
 801010a:	e7f3      	b.n	80100f4 <_vfiprintf_r+0x44>
 801010c:	2300      	movs	r3, #0
 801010e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010110:	2320      	movs	r3, #32
 8010112:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010116:	f8cd 800c 	str.w	r8, [sp, #12]
 801011a:	2330      	movs	r3, #48	@ 0x30
 801011c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80102cc <_vfiprintf_r+0x21c>
 8010120:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010124:	f04f 0901 	mov.w	r9, #1
 8010128:	4623      	mov	r3, r4
 801012a:	469a      	mov	sl, r3
 801012c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010130:	b10a      	cbz	r2, 8010136 <_vfiprintf_r+0x86>
 8010132:	2a25      	cmp	r2, #37	@ 0x25
 8010134:	d1f9      	bne.n	801012a <_vfiprintf_r+0x7a>
 8010136:	ebba 0b04 	subs.w	fp, sl, r4
 801013a:	d00b      	beq.n	8010154 <_vfiprintf_r+0xa4>
 801013c:	465b      	mov	r3, fp
 801013e:	4622      	mov	r2, r4
 8010140:	4629      	mov	r1, r5
 8010142:	4630      	mov	r0, r6
 8010144:	f7ff ffa1 	bl	801008a <__sfputs_r>
 8010148:	3001      	adds	r0, #1
 801014a:	f000 80a7 	beq.w	801029c <_vfiprintf_r+0x1ec>
 801014e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010150:	445a      	add	r2, fp
 8010152:	9209      	str	r2, [sp, #36]	@ 0x24
 8010154:	f89a 3000 	ldrb.w	r3, [sl]
 8010158:	2b00      	cmp	r3, #0
 801015a:	f000 809f 	beq.w	801029c <_vfiprintf_r+0x1ec>
 801015e:	2300      	movs	r3, #0
 8010160:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010164:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010168:	f10a 0a01 	add.w	sl, sl, #1
 801016c:	9304      	str	r3, [sp, #16]
 801016e:	9307      	str	r3, [sp, #28]
 8010170:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010174:	931a      	str	r3, [sp, #104]	@ 0x68
 8010176:	4654      	mov	r4, sl
 8010178:	2205      	movs	r2, #5
 801017a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801017e:	4853      	ldr	r0, [pc, #332]	@ (80102cc <_vfiprintf_r+0x21c>)
 8010180:	f7f0 f846 	bl	8000210 <memchr>
 8010184:	9a04      	ldr	r2, [sp, #16]
 8010186:	b9d8      	cbnz	r0, 80101c0 <_vfiprintf_r+0x110>
 8010188:	06d1      	lsls	r1, r2, #27
 801018a:	bf44      	itt	mi
 801018c:	2320      	movmi	r3, #32
 801018e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010192:	0713      	lsls	r3, r2, #28
 8010194:	bf44      	itt	mi
 8010196:	232b      	movmi	r3, #43	@ 0x2b
 8010198:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801019c:	f89a 3000 	ldrb.w	r3, [sl]
 80101a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80101a2:	d015      	beq.n	80101d0 <_vfiprintf_r+0x120>
 80101a4:	9a07      	ldr	r2, [sp, #28]
 80101a6:	4654      	mov	r4, sl
 80101a8:	2000      	movs	r0, #0
 80101aa:	f04f 0c0a 	mov.w	ip, #10
 80101ae:	4621      	mov	r1, r4
 80101b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80101b4:	3b30      	subs	r3, #48	@ 0x30
 80101b6:	2b09      	cmp	r3, #9
 80101b8:	d94b      	bls.n	8010252 <_vfiprintf_r+0x1a2>
 80101ba:	b1b0      	cbz	r0, 80101ea <_vfiprintf_r+0x13a>
 80101bc:	9207      	str	r2, [sp, #28]
 80101be:	e014      	b.n	80101ea <_vfiprintf_r+0x13a>
 80101c0:	eba0 0308 	sub.w	r3, r0, r8
 80101c4:	fa09 f303 	lsl.w	r3, r9, r3
 80101c8:	4313      	orrs	r3, r2
 80101ca:	9304      	str	r3, [sp, #16]
 80101cc:	46a2      	mov	sl, r4
 80101ce:	e7d2      	b.n	8010176 <_vfiprintf_r+0xc6>
 80101d0:	9b03      	ldr	r3, [sp, #12]
 80101d2:	1d19      	adds	r1, r3, #4
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	9103      	str	r1, [sp, #12]
 80101d8:	2b00      	cmp	r3, #0
 80101da:	bfbb      	ittet	lt
 80101dc:	425b      	neglt	r3, r3
 80101de:	f042 0202 	orrlt.w	r2, r2, #2
 80101e2:	9307      	strge	r3, [sp, #28]
 80101e4:	9307      	strlt	r3, [sp, #28]
 80101e6:	bfb8      	it	lt
 80101e8:	9204      	strlt	r2, [sp, #16]
 80101ea:	7823      	ldrb	r3, [r4, #0]
 80101ec:	2b2e      	cmp	r3, #46	@ 0x2e
 80101ee:	d10a      	bne.n	8010206 <_vfiprintf_r+0x156>
 80101f0:	7863      	ldrb	r3, [r4, #1]
 80101f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80101f4:	d132      	bne.n	801025c <_vfiprintf_r+0x1ac>
 80101f6:	9b03      	ldr	r3, [sp, #12]
 80101f8:	1d1a      	adds	r2, r3, #4
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	9203      	str	r2, [sp, #12]
 80101fe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010202:	3402      	adds	r4, #2
 8010204:	9305      	str	r3, [sp, #20]
 8010206:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80102dc <_vfiprintf_r+0x22c>
 801020a:	7821      	ldrb	r1, [r4, #0]
 801020c:	2203      	movs	r2, #3
 801020e:	4650      	mov	r0, sl
 8010210:	f7ef fffe 	bl	8000210 <memchr>
 8010214:	b138      	cbz	r0, 8010226 <_vfiprintf_r+0x176>
 8010216:	9b04      	ldr	r3, [sp, #16]
 8010218:	eba0 000a 	sub.w	r0, r0, sl
 801021c:	2240      	movs	r2, #64	@ 0x40
 801021e:	4082      	lsls	r2, r0
 8010220:	4313      	orrs	r3, r2
 8010222:	3401      	adds	r4, #1
 8010224:	9304      	str	r3, [sp, #16]
 8010226:	f814 1b01 	ldrb.w	r1, [r4], #1
 801022a:	4829      	ldr	r0, [pc, #164]	@ (80102d0 <_vfiprintf_r+0x220>)
 801022c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010230:	2206      	movs	r2, #6
 8010232:	f7ef ffed 	bl	8000210 <memchr>
 8010236:	2800      	cmp	r0, #0
 8010238:	d03f      	beq.n	80102ba <_vfiprintf_r+0x20a>
 801023a:	4b26      	ldr	r3, [pc, #152]	@ (80102d4 <_vfiprintf_r+0x224>)
 801023c:	bb1b      	cbnz	r3, 8010286 <_vfiprintf_r+0x1d6>
 801023e:	9b03      	ldr	r3, [sp, #12]
 8010240:	3307      	adds	r3, #7
 8010242:	f023 0307 	bic.w	r3, r3, #7
 8010246:	3308      	adds	r3, #8
 8010248:	9303      	str	r3, [sp, #12]
 801024a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801024c:	443b      	add	r3, r7
 801024e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010250:	e76a      	b.n	8010128 <_vfiprintf_r+0x78>
 8010252:	fb0c 3202 	mla	r2, ip, r2, r3
 8010256:	460c      	mov	r4, r1
 8010258:	2001      	movs	r0, #1
 801025a:	e7a8      	b.n	80101ae <_vfiprintf_r+0xfe>
 801025c:	2300      	movs	r3, #0
 801025e:	3401      	adds	r4, #1
 8010260:	9305      	str	r3, [sp, #20]
 8010262:	4619      	mov	r1, r3
 8010264:	f04f 0c0a 	mov.w	ip, #10
 8010268:	4620      	mov	r0, r4
 801026a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801026e:	3a30      	subs	r2, #48	@ 0x30
 8010270:	2a09      	cmp	r2, #9
 8010272:	d903      	bls.n	801027c <_vfiprintf_r+0x1cc>
 8010274:	2b00      	cmp	r3, #0
 8010276:	d0c6      	beq.n	8010206 <_vfiprintf_r+0x156>
 8010278:	9105      	str	r1, [sp, #20]
 801027a:	e7c4      	b.n	8010206 <_vfiprintf_r+0x156>
 801027c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010280:	4604      	mov	r4, r0
 8010282:	2301      	movs	r3, #1
 8010284:	e7f0      	b.n	8010268 <_vfiprintf_r+0x1b8>
 8010286:	ab03      	add	r3, sp, #12
 8010288:	9300      	str	r3, [sp, #0]
 801028a:	462a      	mov	r2, r5
 801028c:	4b12      	ldr	r3, [pc, #72]	@ (80102d8 <_vfiprintf_r+0x228>)
 801028e:	a904      	add	r1, sp, #16
 8010290:	4630      	mov	r0, r6
 8010292:	f7fc fc43 	bl	800cb1c <_printf_float>
 8010296:	4607      	mov	r7, r0
 8010298:	1c78      	adds	r0, r7, #1
 801029a:	d1d6      	bne.n	801024a <_vfiprintf_r+0x19a>
 801029c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801029e:	07d9      	lsls	r1, r3, #31
 80102a0:	d405      	bmi.n	80102ae <_vfiprintf_r+0x1fe>
 80102a2:	89ab      	ldrh	r3, [r5, #12]
 80102a4:	059a      	lsls	r2, r3, #22
 80102a6:	d402      	bmi.n	80102ae <_vfiprintf_r+0x1fe>
 80102a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80102aa:	f7fd fdd3 	bl	800de54 <__retarget_lock_release_recursive>
 80102ae:	89ab      	ldrh	r3, [r5, #12]
 80102b0:	065b      	lsls	r3, r3, #25
 80102b2:	f53f af1f 	bmi.w	80100f4 <_vfiprintf_r+0x44>
 80102b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80102b8:	e71e      	b.n	80100f8 <_vfiprintf_r+0x48>
 80102ba:	ab03      	add	r3, sp, #12
 80102bc:	9300      	str	r3, [sp, #0]
 80102be:	462a      	mov	r2, r5
 80102c0:	4b05      	ldr	r3, [pc, #20]	@ (80102d8 <_vfiprintf_r+0x228>)
 80102c2:	a904      	add	r1, sp, #16
 80102c4:	4630      	mov	r0, r6
 80102c6:	f7fc fec1 	bl	800d04c <_printf_i>
 80102ca:	e7e4      	b.n	8010296 <_vfiprintf_r+0x1e6>
 80102cc:	08011115 	.word	0x08011115
 80102d0:	0801111f 	.word	0x0801111f
 80102d4:	0800cb1d 	.word	0x0800cb1d
 80102d8:	0801008b 	.word	0x0801008b
 80102dc:	0801111b 	.word	0x0801111b

080102e0 <__swhatbuf_r>:
 80102e0:	b570      	push	{r4, r5, r6, lr}
 80102e2:	460c      	mov	r4, r1
 80102e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102e8:	2900      	cmp	r1, #0
 80102ea:	b096      	sub	sp, #88	@ 0x58
 80102ec:	4615      	mov	r5, r2
 80102ee:	461e      	mov	r6, r3
 80102f0:	da0d      	bge.n	801030e <__swhatbuf_r+0x2e>
 80102f2:	89a3      	ldrh	r3, [r4, #12]
 80102f4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80102f8:	f04f 0100 	mov.w	r1, #0
 80102fc:	bf14      	ite	ne
 80102fe:	2340      	movne	r3, #64	@ 0x40
 8010300:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010304:	2000      	movs	r0, #0
 8010306:	6031      	str	r1, [r6, #0]
 8010308:	602b      	str	r3, [r5, #0]
 801030a:	b016      	add	sp, #88	@ 0x58
 801030c:	bd70      	pop	{r4, r5, r6, pc}
 801030e:	466a      	mov	r2, sp
 8010310:	f000 f892 	bl	8010438 <_fstat_r>
 8010314:	2800      	cmp	r0, #0
 8010316:	dbec      	blt.n	80102f2 <__swhatbuf_r+0x12>
 8010318:	9901      	ldr	r1, [sp, #4]
 801031a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801031e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010322:	4259      	negs	r1, r3
 8010324:	4159      	adcs	r1, r3
 8010326:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801032a:	e7eb      	b.n	8010304 <__swhatbuf_r+0x24>

0801032c <__smakebuf_r>:
 801032c:	898b      	ldrh	r3, [r1, #12]
 801032e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010330:	079d      	lsls	r5, r3, #30
 8010332:	4606      	mov	r6, r0
 8010334:	460c      	mov	r4, r1
 8010336:	d507      	bpl.n	8010348 <__smakebuf_r+0x1c>
 8010338:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801033c:	6023      	str	r3, [r4, #0]
 801033e:	6123      	str	r3, [r4, #16]
 8010340:	2301      	movs	r3, #1
 8010342:	6163      	str	r3, [r4, #20]
 8010344:	b003      	add	sp, #12
 8010346:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010348:	ab01      	add	r3, sp, #4
 801034a:	466a      	mov	r2, sp
 801034c:	f7ff ffc8 	bl	80102e0 <__swhatbuf_r>
 8010350:	9f00      	ldr	r7, [sp, #0]
 8010352:	4605      	mov	r5, r0
 8010354:	4639      	mov	r1, r7
 8010356:	4630      	mov	r0, r6
 8010358:	f7fb fcae 	bl	800bcb8 <_malloc_r>
 801035c:	b948      	cbnz	r0, 8010372 <__smakebuf_r+0x46>
 801035e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010362:	059a      	lsls	r2, r3, #22
 8010364:	d4ee      	bmi.n	8010344 <__smakebuf_r+0x18>
 8010366:	f023 0303 	bic.w	r3, r3, #3
 801036a:	f043 0302 	orr.w	r3, r3, #2
 801036e:	81a3      	strh	r3, [r4, #12]
 8010370:	e7e2      	b.n	8010338 <__smakebuf_r+0xc>
 8010372:	89a3      	ldrh	r3, [r4, #12]
 8010374:	6020      	str	r0, [r4, #0]
 8010376:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801037a:	81a3      	strh	r3, [r4, #12]
 801037c:	9b01      	ldr	r3, [sp, #4]
 801037e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010382:	b15b      	cbz	r3, 801039c <__smakebuf_r+0x70>
 8010384:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010388:	4630      	mov	r0, r6
 801038a:	f000 f867 	bl	801045c <_isatty_r>
 801038e:	b128      	cbz	r0, 801039c <__smakebuf_r+0x70>
 8010390:	89a3      	ldrh	r3, [r4, #12]
 8010392:	f023 0303 	bic.w	r3, r3, #3
 8010396:	f043 0301 	orr.w	r3, r3, #1
 801039a:	81a3      	strh	r3, [r4, #12]
 801039c:	89a3      	ldrh	r3, [r4, #12]
 801039e:	431d      	orrs	r5, r3
 80103a0:	81a5      	strh	r5, [r4, #12]
 80103a2:	e7cf      	b.n	8010344 <__smakebuf_r+0x18>

080103a4 <memmove>:
 80103a4:	4288      	cmp	r0, r1
 80103a6:	b510      	push	{r4, lr}
 80103a8:	eb01 0402 	add.w	r4, r1, r2
 80103ac:	d902      	bls.n	80103b4 <memmove+0x10>
 80103ae:	4284      	cmp	r4, r0
 80103b0:	4623      	mov	r3, r4
 80103b2:	d807      	bhi.n	80103c4 <memmove+0x20>
 80103b4:	1e43      	subs	r3, r0, #1
 80103b6:	42a1      	cmp	r1, r4
 80103b8:	d008      	beq.n	80103cc <memmove+0x28>
 80103ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80103be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80103c2:	e7f8      	b.n	80103b6 <memmove+0x12>
 80103c4:	4402      	add	r2, r0
 80103c6:	4601      	mov	r1, r0
 80103c8:	428a      	cmp	r2, r1
 80103ca:	d100      	bne.n	80103ce <memmove+0x2a>
 80103cc:	bd10      	pop	{r4, pc}
 80103ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80103d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80103d6:	e7f7      	b.n	80103c8 <memmove+0x24>

080103d8 <_raise_r>:
 80103d8:	291f      	cmp	r1, #31
 80103da:	b538      	push	{r3, r4, r5, lr}
 80103dc:	4605      	mov	r5, r0
 80103de:	460c      	mov	r4, r1
 80103e0:	d904      	bls.n	80103ec <_raise_r+0x14>
 80103e2:	2316      	movs	r3, #22
 80103e4:	6003      	str	r3, [r0, #0]
 80103e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80103ea:	bd38      	pop	{r3, r4, r5, pc}
 80103ec:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80103ee:	b112      	cbz	r2, 80103f6 <_raise_r+0x1e>
 80103f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80103f4:	b94b      	cbnz	r3, 801040a <_raise_r+0x32>
 80103f6:	4628      	mov	r0, r5
 80103f8:	f000 f852 	bl	80104a0 <_getpid_r>
 80103fc:	4622      	mov	r2, r4
 80103fe:	4601      	mov	r1, r0
 8010400:	4628      	mov	r0, r5
 8010402:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010406:	f000 b839 	b.w	801047c <_kill_r>
 801040a:	2b01      	cmp	r3, #1
 801040c:	d00a      	beq.n	8010424 <_raise_r+0x4c>
 801040e:	1c59      	adds	r1, r3, #1
 8010410:	d103      	bne.n	801041a <_raise_r+0x42>
 8010412:	2316      	movs	r3, #22
 8010414:	6003      	str	r3, [r0, #0]
 8010416:	2001      	movs	r0, #1
 8010418:	e7e7      	b.n	80103ea <_raise_r+0x12>
 801041a:	2100      	movs	r1, #0
 801041c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010420:	4620      	mov	r0, r4
 8010422:	4798      	blx	r3
 8010424:	2000      	movs	r0, #0
 8010426:	e7e0      	b.n	80103ea <_raise_r+0x12>

08010428 <raise>:
 8010428:	4b02      	ldr	r3, [pc, #8]	@ (8010434 <raise+0xc>)
 801042a:	4601      	mov	r1, r0
 801042c:	6818      	ldr	r0, [r3, #0]
 801042e:	f7ff bfd3 	b.w	80103d8 <_raise_r>
 8010432:	bf00      	nop
 8010434:	2000018c 	.word	0x2000018c

08010438 <_fstat_r>:
 8010438:	b538      	push	{r3, r4, r5, lr}
 801043a:	4d07      	ldr	r5, [pc, #28]	@ (8010458 <_fstat_r+0x20>)
 801043c:	2300      	movs	r3, #0
 801043e:	4604      	mov	r4, r0
 8010440:	4608      	mov	r0, r1
 8010442:	4611      	mov	r1, r2
 8010444:	602b      	str	r3, [r5, #0]
 8010446:	f7f2 f9dd 	bl	8002804 <_fstat>
 801044a:	1c43      	adds	r3, r0, #1
 801044c:	d102      	bne.n	8010454 <_fstat_r+0x1c>
 801044e:	682b      	ldr	r3, [r5, #0]
 8010450:	b103      	cbz	r3, 8010454 <_fstat_r+0x1c>
 8010452:	6023      	str	r3, [r4, #0]
 8010454:	bd38      	pop	{r3, r4, r5, pc}
 8010456:	bf00      	nop
 8010458:	2000060c 	.word	0x2000060c

0801045c <_isatty_r>:
 801045c:	b538      	push	{r3, r4, r5, lr}
 801045e:	4d06      	ldr	r5, [pc, #24]	@ (8010478 <_isatty_r+0x1c>)
 8010460:	2300      	movs	r3, #0
 8010462:	4604      	mov	r4, r0
 8010464:	4608      	mov	r0, r1
 8010466:	602b      	str	r3, [r5, #0]
 8010468:	f7f2 f9f3 	bl	8002852 <_isatty>
 801046c:	1c43      	adds	r3, r0, #1
 801046e:	d102      	bne.n	8010476 <_isatty_r+0x1a>
 8010470:	682b      	ldr	r3, [r5, #0]
 8010472:	b103      	cbz	r3, 8010476 <_isatty_r+0x1a>
 8010474:	6023      	str	r3, [r4, #0]
 8010476:	bd38      	pop	{r3, r4, r5, pc}
 8010478:	2000060c 	.word	0x2000060c

0801047c <_kill_r>:
 801047c:	b538      	push	{r3, r4, r5, lr}
 801047e:	4d07      	ldr	r5, [pc, #28]	@ (801049c <_kill_r+0x20>)
 8010480:	2300      	movs	r3, #0
 8010482:	4604      	mov	r4, r0
 8010484:	4608      	mov	r0, r1
 8010486:	4611      	mov	r1, r2
 8010488:	602b      	str	r3, [r5, #0]
 801048a:	f7f2 f8d3 	bl	8002634 <_kill>
 801048e:	1c43      	adds	r3, r0, #1
 8010490:	d102      	bne.n	8010498 <_kill_r+0x1c>
 8010492:	682b      	ldr	r3, [r5, #0]
 8010494:	b103      	cbz	r3, 8010498 <_kill_r+0x1c>
 8010496:	6023      	str	r3, [r4, #0]
 8010498:	bd38      	pop	{r3, r4, r5, pc}
 801049a:	bf00      	nop
 801049c:	2000060c 	.word	0x2000060c

080104a0 <_getpid_r>:
 80104a0:	f7f2 b8c0 	b.w	8002624 <_getpid>

080104a4 <_malloc_usable_size_r>:
 80104a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80104a8:	1f18      	subs	r0, r3, #4
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	bfbc      	itt	lt
 80104ae:	580b      	ldrlt	r3, [r1, r0]
 80104b0:	18c0      	addlt	r0, r0, r3
 80104b2:	4770      	bx	lr

080104b4 <_init>:
 80104b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104b6:	bf00      	nop
 80104b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80104ba:	bc08      	pop	{r3}
 80104bc:	469e      	mov	lr, r3
 80104be:	4770      	bx	lr

080104c0 <_fini>:
 80104c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104c2:	bf00      	nop
 80104c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80104c6:	bc08      	pop	{r3}
 80104c8:	469e      	mov	lr, r3
 80104ca:	4770      	bx	lr
