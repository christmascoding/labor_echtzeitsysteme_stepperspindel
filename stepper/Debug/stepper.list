
stepper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001044c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d9c  08010620  08010620  00011620  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080113bc  080113bc  000131dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080113bc  080113bc  000123bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080113c4  080113c4  000131dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080113c4  080113c4  000123c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080113cc  080113cc  000123cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  080113d0  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000460  200001dc  080115ac  000131dc  2**2
                  ALLOC
 10 ._user_heap_stack 00038004  2000063c  080115ac  0001363c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000131dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019225  00000000  00000000  0001320c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036c7  00000000  00000000  0002c431  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001680  00000000  00000000  0002faf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011c6  00000000  00000000  00031178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004113  00000000  00000000  0003233e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dc16  00000000  00000000  00036451  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001066f9  00000000  00000000  00054067  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015a760  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000075c4  00000000  00000000  0015a7a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000099  00000000  00000000  00161d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08010604 	.word	0x08010604

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08010604 	.word	0x08010604

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9be 	b.w	800105c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	468e      	mov	lr, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	4688      	mov	r8, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d962      	bls.n	8000e40 <__udivmoddi4+0xdc>
 8000d7a:	fab2 f682 	clz	r6, r2
 8000d7e:	b14e      	cbz	r6, 8000d94 <__udivmoddi4+0x30>
 8000d80:	f1c6 0320 	rsb	r3, r6, #32
 8000d84:	fa01 f806 	lsl.w	r8, r1, r6
 8000d88:	fa20 f303 	lsr.w	r3, r0, r3
 8000d8c:	40b7      	lsls	r7, r6
 8000d8e:	ea43 0808 	orr.w	r8, r3, r8
 8000d92:	40b4      	lsls	r4, r6
 8000d94:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d98:	fa1f fc87 	uxth.w	ip, r7
 8000d9c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000da0:	0c23      	lsrs	r3, r4, #16
 8000da2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000da6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000daa:	fb01 f20c 	mul.w	r2, r1, ip
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db2:	18fb      	adds	r3, r7, r3
 8000db4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000db8:	f080 80ea 	bcs.w	8000f90 <__udivmoddi4+0x22c>
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	f240 80e7 	bls.w	8000f90 <__udivmoddi4+0x22c>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	443b      	add	r3, r7
 8000dc6:	1a9a      	subs	r2, r3, r2
 8000dc8:	b2a3      	uxth	r3, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dd6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dda:	459c      	cmp	ip, r3
 8000ddc:	d909      	bls.n	8000df2 <__udivmoddi4+0x8e>
 8000dde:	18fb      	adds	r3, r7, r3
 8000de0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de4:	f080 80d6 	bcs.w	8000f94 <__udivmoddi4+0x230>
 8000de8:	459c      	cmp	ip, r3
 8000dea:	f240 80d3 	bls.w	8000f94 <__udivmoddi4+0x230>
 8000dee:	443b      	add	r3, r7
 8000df0:	3802      	subs	r0, #2
 8000df2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df6:	eba3 030c 	sub.w	r3, r3, ip
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11d      	cbz	r5, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40f3      	lsrs	r3, r6
 8000e00:	2200      	movs	r2, #0
 8000e02:	e9c5 3200 	strd	r3, r2, [r5]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d905      	bls.n	8000e1a <__udivmoddi4+0xb6>
 8000e0e:	b10d      	cbz	r5, 8000e14 <__udivmoddi4+0xb0>
 8000e10:	e9c5 0100 	strd	r0, r1, [r5]
 8000e14:	2100      	movs	r1, #0
 8000e16:	4608      	mov	r0, r1
 8000e18:	e7f5      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e1a:	fab3 f183 	clz	r1, r3
 8000e1e:	2900      	cmp	r1, #0
 8000e20:	d146      	bne.n	8000eb0 <__udivmoddi4+0x14c>
 8000e22:	4573      	cmp	r3, lr
 8000e24:	d302      	bcc.n	8000e2c <__udivmoddi4+0xc8>
 8000e26:	4282      	cmp	r2, r0
 8000e28:	f200 8105 	bhi.w	8001036 <__udivmoddi4+0x2d2>
 8000e2c:	1a84      	subs	r4, r0, r2
 8000e2e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e32:	2001      	movs	r0, #1
 8000e34:	4690      	mov	r8, r2
 8000e36:	2d00      	cmp	r5, #0
 8000e38:	d0e5      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e3a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e3e:	e7e2      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	f000 8090 	beq.w	8000f66 <__udivmoddi4+0x202>
 8000e46:	fab2 f682 	clz	r6, r2
 8000e4a:	2e00      	cmp	r6, #0
 8000e4c:	f040 80a4 	bne.w	8000f98 <__udivmoddi4+0x234>
 8000e50:	1a8a      	subs	r2, r1, r2
 8000e52:	0c03      	lsrs	r3, r0, #16
 8000e54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e58:	b280      	uxth	r0, r0
 8000e5a:	b2bc      	uxth	r4, r7
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e62:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e6a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x11e>
 8000e72:	18fb      	adds	r3, r7, r3
 8000e74:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x11c>
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	f200 80e0 	bhi.w	8001040 <__udivmoddi4+0x2dc>
 8000e80:	46c4      	mov	ip, r8
 8000e82:	1a9b      	subs	r3, r3, r2
 8000e84:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e88:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e8c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e90:	fb02 f404 	mul.w	r4, r2, r4
 8000e94:	429c      	cmp	r4, r3
 8000e96:	d907      	bls.n	8000ea8 <__udivmoddi4+0x144>
 8000e98:	18fb      	adds	r3, r7, r3
 8000e9a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e9e:	d202      	bcs.n	8000ea6 <__udivmoddi4+0x142>
 8000ea0:	429c      	cmp	r4, r3
 8000ea2:	f200 80ca 	bhi.w	800103a <__udivmoddi4+0x2d6>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000eae:	e7a5      	b.n	8000dfc <__udivmoddi4+0x98>
 8000eb0:	f1c1 0620 	rsb	r6, r1, #32
 8000eb4:	408b      	lsls	r3, r1
 8000eb6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eba:	431f      	orrs	r7, r3
 8000ebc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ec0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ec4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ec8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ecc:	4323      	orrs	r3, r4
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	fa1f fc87 	uxth.w	ip, r7
 8000ed6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eda:	0c1c      	lsrs	r4, r3, #16
 8000edc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ee0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ee4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	fa02 f201 	lsl.w	r2, r2, r1
 8000eee:	d909      	bls.n	8000f04 <__udivmoddi4+0x1a0>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ef6:	f080 809c 	bcs.w	8001032 <__udivmoddi4+0x2ce>
 8000efa:	45a6      	cmp	lr, r4
 8000efc:	f240 8099 	bls.w	8001032 <__udivmoddi4+0x2ce>
 8000f00:	3802      	subs	r0, #2
 8000f02:	443c      	add	r4, r7
 8000f04:	eba4 040e 	sub.w	r4, r4, lr
 8000f08:	fa1f fe83 	uxth.w	lr, r3
 8000f0c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f10:	fb09 4413 	mls	r4, r9, r3, r4
 8000f14:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f18:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f1c:	45a4      	cmp	ip, r4
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x1ce>
 8000f20:	193c      	adds	r4, r7, r4
 8000f22:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f26:	f080 8082 	bcs.w	800102e <__udivmoddi4+0x2ca>
 8000f2a:	45a4      	cmp	ip, r4
 8000f2c:	d97f      	bls.n	800102e <__udivmoddi4+0x2ca>
 8000f2e:	3b02      	subs	r3, #2
 8000f30:	443c      	add	r4, r7
 8000f32:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f36:	eba4 040c 	sub.w	r4, r4, ip
 8000f3a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f3e:	4564      	cmp	r4, ip
 8000f40:	4673      	mov	r3, lr
 8000f42:	46e1      	mov	r9, ip
 8000f44:	d362      	bcc.n	800100c <__udivmoddi4+0x2a8>
 8000f46:	d05f      	beq.n	8001008 <__udivmoddi4+0x2a4>
 8000f48:	b15d      	cbz	r5, 8000f62 <__udivmoddi4+0x1fe>
 8000f4a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f4e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f52:	fa04 f606 	lsl.w	r6, r4, r6
 8000f56:	fa22 f301 	lsr.w	r3, r2, r1
 8000f5a:	431e      	orrs	r6, r3
 8000f5c:	40cc      	lsrs	r4, r1
 8000f5e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f62:	2100      	movs	r1, #0
 8000f64:	e74f      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000f66:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f6a:	0c01      	lsrs	r1, r0, #16
 8000f6c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f70:	b280      	uxth	r0, r0
 8000f72:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f76:	463b      	mov	r3, r7
 8000f78:	4638      	mov	r0, r7
 8000f7a:	463c      	mov	r4, r7
 8000f7c:	46b8      	mov	r8, r7
 8000f7e:	46be      	mov	lr, r7
 8000f80:	2620      	movs	r6, #32
 8000f82:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f86:	eba2 0208 	sub.w	r2, r2, r8
 8000f8a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f8e:	e766      	b.n	8000e5e <__udivmoddi4+0xfa>
 8000f90:	4601      	mov	r1, r0
 8000f92:	e718      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000f94:	4610      	mov	r0, r2
 8000f96:	e72c      	b.n	8000df2 <__udivmoddi4+0x8e>
 8000f98:	f1c6 0220 	rsb	r2, r6, #32
 8000f9c:	fa2e f302 	lsr.w	r3, lr, r2
 8000fa0:	40b7      	lsls	r7, r6
 8000fa2:	40b1      	lsls	r1, r6
 8000fa4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fa8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fac:	430a      	orrs	r2, r1
 8000fae:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fb2:	b2bc      	uxth	r4, r7
 8000fb4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fb8:	0c11      	lsrs	r1, r2, #16
 8000fba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fbe:	fb08 f904 	mul.w	r9, r8, r4
 8000fc2:	40b0      	lsls	r0, r6
 8000fc4:	4589      	cmp	r9, r1
 8000fc6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fca:	b280      	uxth	r0, r0
 8000fcc:	d93e      	bls.n	800104c <__udivmoddi4+0x2e8>
 8000fce:	1879      	adds	r1, r7, r1
 8000fd0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fd4:	d201      	bcs.n	8000fda <__udivmoddi4+0x276>
 8000fd6:	4589      	cmp	r9, r1
 8000fd8:	d81f      	bhi.n	800101a <__udivmoddi4+0x2b6>
 8000fda:	eba1 0109 	sub.w	r1, r1, r9
 8000fde:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe2:	fb09 f804 	mul.w	r8, r9, r4
 8000fe6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fea:	b292      	uxth	r2, r2
 8000fec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ff0:	4542      	cmp	r2, r8
 8000ff2:	d229      	bcs.n	8001048 <__udivmoddi4+0x2e4>
 8000ff4:	18ba      	adds	r2, r7, r2
 8000ff6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ffa:	d2c4      	bcs.n	8000f86 <__udivmoddi4+0x222>
 8000ffc:	4542      	cmp	r2, r8
 8000ffe:	d2c2      	bcs.n	8000f86 <__udivmoddi4+0x222>
 8001000:	f1a9 0102 	sub.w	r1, r9, #2
 8001004:	443a      	add	r2, r7
 8001006:	e7be      	b.n	8000f86 <__udivmoddi4+0x222>
 8001008:	45f0      	cmp	r8, lr
 800100a:	d29d      	bcs.n	8000f48 <__udivmoddi4+0x1e4>
 800100c:	ebbe 0302 	subs.w	r3, lr, r2
 8001010:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001014:	3801      	subs	r0, #1
 8001016:	46e1      	mov	r9, ip
 8001018:	e796      	b.n	8000f48 <__udivmoddi4+0x1e4>
 800101a:	eba7 0909 	sub.w	r9, r7, r9
 800101e:	4449      	add	r1, r9
 8001020:	f1a8 0c02 	sub.w	ip, r8, #2
 8001024:	fbb1 f9fe 	udiv	r9, r1, lr
 8001028:	fb09 f804 	mul.w	r8, r9, r4
 800102c:	e7db      	b.n	8000fe6 <__udivmoddi4+0x282>
 800102e:	4673      	mov	r3, lr
 8001030:	e77f      	b.n	8000f32 <__udivmoddi4+0x1ce>
 8001032:	4650      	mov	r0, sl
 8001034:	e766      	b.n	8000f04 <__udivmoddi4+0x1a0>
 8001036:	4608      	mov	r0, r1
 8001038:	e6fd      	b.n	8000e36 <__udivmoddi4+0xd2>
 800103a:	443b      	add	r3, r7
 800103c:	3a02      	subs	r2, #2
 800103e:	e733      	b.n	8000ea8 <__udivmoddi4+0x144>
 8001040:	f1ac 0c02 	sub.w	ip, ip, #2
 8001044:	443b      	add	r3, r7
 8001046:	e71c      	b.n	8000e82 <__udivmoddi4+0x11e>
 8001048:	4649      	mov	r1, r9
 800104a:	e79c      	b.n	8000f86 <__udivmoddi4+0x222>
 800104c:	eba1 0109 	sub.w	r1, r1, r9
 8001050:	46c4      	mov	ip, r8
 8001052:	fbb1 f9fe 	udiv	r9, r1, lr
 8001056:	fb09 f804 	mul.w	r8, r9, r4
 800105a:	e7c4      	b.n	8000fe6 <__udivmoddi4+0x282>

0800105c <__aeabi_idiv0>:
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop

08001060 <L6474_HelperLock>:


// --------------------------------------------------------------------------------------------------------------------
static inline int L6474_HelperLock(L6474_Handle_t h)
// --------------------------------------------------------------------------------------------------------------------
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
#if defined(LIBL6474_HAS_LOCKING) && LIBL6474_HAS_LOCKING == 1
	return h->platform->lock();
#else
	(void)h;
	return 0;
 8001068:	2300      	movs	r3, #0
#endif
}
 800106a:	4618      	mov	r0, r3
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <L6474_HelperUnlock>:

// --------------------------------------------------------------------------------------------------------------------
static inline void L6474_HelperUnlock(L6474_Handle_t h)
// --------------------------------------------------------------------------------------------------------------------
{
 8001076:	b480      	push	{r7}
 8001078:	b083      	sub	sp, #12
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
#if defined(LIBL6474_HAS_LOCKING) && LIBL6474_HAS_LOCKING == 1
	h->platform->unlock();
#else
	(void)h;
	return;
 800107e:	bf00      	nop
#endif
}
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <L6474_HelperReleaseStep>:


// --------------------------------------------------------------------------------------------------------------------
static void L6474_HelperReleaseStep(L6474_Handle_t h)
// --------------------------------------------------------------------------------------------------------------------
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b082      	sub	sp, #8
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
	L6474_HelperLock(h);
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f7ff ffe4 	bl	8001060 <L6474_HelperLock>
	h->pending = 0;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2200      	movs	r2, #0
 800109c:	605a      	str	r2, [r3, #4]
	L6474_HelperUnlock(h);
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f7ff ffe9 	bl	8001076 <L6474_HelperUnlock>
}
 80010a4:	bf00      	nop
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <L6474_GetStatusCommand>:

// --------------------------------------------------------------------------------------------------------------------
static int L6474_GetStatusCommand(L6474_Handle_t h)
// --------------------------------------------------------------------------------------------------------------------
{
 80010ac:	b590      	push	{r4, r7, lr}
 80010ae:	b087      	sub	sp, #28
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
	if ( h->state == stRESET )
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d102      	bne.n	80010c2 <L6474_GetStatusCommand+0x16>
		return errcINV_STATE;
 80010bc:	f06f 0302 	mvn.w	r3, #2
 80010c0:	e034      	b.n	800112c <L6474_GetStatusCommand+0x80>

	int length = STEP_CMD_STA_LENGTH;
 80010c2:	2303      	movs	r3, #3
 80010c4:	617b      	str	r3, [r7, #20]

	unsigned char rxBuff[STEP_CMD_STA_LENGTH] = { 0 };
 80010c6:	f107 030c 	add.w	r3, r7, #12
 80010ca:	2100      	movs	r1, #0
 80010cc:	460a      	mov	r2, r1
 80010ce:	801a      	strh	r2, [r3, #0]
 80010d0:	460a      	mov	r2, r1
 80010d2:	709a      	strb	r2, [r3, #2]
	unsigned char txBuff[STEP_CMD_STA_LENGTH] = { 0 };
 80010d4:	f107 0308 	add.w	r3, r7, #8
 80010d8:	2100      	movs	r1, #0
 80010da:	460a      	mov	r2, r1
 80010dc:	801a      	strh	r2, [r3, #0]
 80010de:	460a      	mov	r2, r1
 80010e0:	709a      	strb	r2, [r3, #2]

	txBuff[0] = STEP_CMD_STA_PREFIX | 0;
 80010e2:	23d0      	movs	r3, #208	@ 0xd0
 80010e4:	723b      	strb	r3, [r7, #8]
	int ret = h->platform->transfer(h->pIO, (char*)rxBuff, (const char*)txBuff, length);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	689c      	ldr	r4, [r3, #8]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6898      	ldr	r0, [r3, #8]
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	f107 0208 	add.w	r2, r7, #8
 80010f6:	f107 010c 	add.w	r1, r7, #12
 80010fa:	47a0      	blx	r4
 80010fc:	6138      	str	r0, [r7, #16]

	if ( ret != 0 )
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d002      	beq.n	800110a <L6474_GetStatusCommand+0x5e>
		return errcINTERNAL;
 8001104:	f06f 0303 	mvn.w	r3, #3
 8001108:	e010      	b.n	800112c <L6474_GetStatusCommand+0x80>

	ret = (rxBuff[2] << 0 ) | (rxBuff[1] << 8 );
 800110a:	7bbb      	ldrb	r3, [r7, #14]
 800110c:	461a      	mov	r2, r3
 800110e:	7b7b      	ldrb	r3, [r7, #13]
 8001110:	021b      	lsls	r3, r3, #8
 8001112:	4313      	orrs	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
	h->state = ( ret & STATUS_HIGHZ_MASK ) ? stDISABLED : stENABLED;
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	f003 0301 	and.w	r3, r3, #1
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <L6474_GetStatusCommand+0x78>
 8001120:	2201      	movs	r2, #1
 8001122:	e000      	b.n	8001126 <L6474_GetStatusCommand+0x7a>
 8001124:	2202      	movs	r2, #2
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	701a      	strb	r2, [r3, #0]
	return ret;
 800112a:	693b      	ldr	r3, [r7, #16]
}
 800112c:	4618      	mov	r0, r3
 800112e:	371c      	adds	r7, #28
 8001130:	46bd      	mov	sp, r7
 8001132:	bd90      	pop	{r4, r7, pc}

08001134 <L6474_GetParamCommand>:
}

// --------------------------------------------------------------------------------------------------------------------
static int L6474_GetParamCommand(L6474_Handle_t h, int addr)
// --------------------------------------------------------------------------------------------------------------------
{
 8001134:	b590      	push	{r4, r7, lr}
 8001136:	b08b      	sub	sp, #44	@ 0x2c
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	6039      	str	r1, [r7, #0]
	addr &= STEP_REG_RANGE_MASK;
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	f003 031f 	and.w	r3, r3, #31
 8001144:	603b      	str	r3, [r7, #0]
	if( L6474_Parameters[addr].defined == 0 )
 8001146:	4a52      	ldr	r2, [pc, #328]	@ (8001290 <L6474_GetParamCommand+0x15c>)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	011b      	lsls	r3, r3, #4
 800114c:	4413      	add	r3, r2
 800114e:	3301      	adds	r3, #1
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d102      	bne.n	800115c <L6474_GetParamCommand+0x28>
		return errcINV_ARG;
 8001156:	f04f 33ff 	mov.w	r3, #4294967295
 800115a:	e095      	b.n	8001288 <L6474_GetParamCommand+0x154>

	if( ( L6474_Parameters[addr].flags & afREAD ) == 0 )
 800115c:	4a4c      	ldr	r2, [pc, #304]	@ (8001290 <L6474_GetParamCommand+0x15c>)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	011b      	lsls	r3, r3, #4
 8001162:	4413      	add	r3, r2
 8001164:	330c      	adds	r3, #12
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	f003 0301 	and.w	r3, r3, #1
 800116c:	2b00      	cmp	r3, #0
 800116e:	d102      	bne.n	8001176 <L6474_GetParamCommand+0x42>
		return errcFORBIDDEN;
 8001170:	f06f 0307 	mvn.w	r3, #7
 8001174:	e088      	b.n	8001288 <L6474_GetParamCommand+0x154>

	if ( h->state == stRESET )
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d102      	bne.n	8001184 <L6474_GetParamCommand+0x50>
		return errcINV_STATE;
 800117e:	f06f 0302 	mvn.w	r3, #2
 8001182:	e081      	b.n	8001288 <L6474_GetParamCommand+0x154>

	int length  = L6474_Parameters[addr].length + STEP_CMD_GET_LENGTH;
 8001184:	4a42      	ldr	r2, [pc, #264]	@ (8001290 <L6474_GetParamCommand+0x15c>)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	011b      	lsls	r3, r3, #4
 800118a:	4413      	add	r3, r2
 800118c:	3302      	adds	r3, #2
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	3301      	adds	r3, #1
 8001192:	623b      	str	r3, [r7, #32]
	if ( length > STEP_CMD_GET_MAX_PAYLOAD )
 8001194:	6a3b      	ldr	r3, [r7, #32]
 8001196:	2b04      	cmp	r3, #4
 8001198:	dd02      	ble.n	80011a0 <L6474_GetParamCommand+0x6c>
		return errcINTERNAL;
 800119a:	f06f 0303 	mvn.w	r3, #3
 800119e:	e073      	b.n	8001288 <L6474_GetParamCommand+0x154>

	unsigned char rxBuff[STEP_CMD_GET_MAX_PAYLOAD] = { STEP_CMD_NOP_PREFIX };
 80011a0:	2300      	movs	r3, #0
 80011a2:	613b      	str	r3, [r7, #16]
	unsigned char txBuff[STEP_CMD_GET_MAX_PAYLOAD] = { STEP_CMD_NOP_PREFIX };
 80011a4:	2300      	movs	r3, #0
 80011a6:	60fb      	str	r3, [r7, #12]

	txBuff[0] = STEP_CMD_GET_PREFIX | addr;
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	b25b      	sxtb	r3, r3
 80011ac:	f043 0320 	orr.w	r3, r3, #32
 80011b0:	b25b      	sxtb	r3, r3
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	733b      	strb	r3, [r7, #12]
	int ret = h->platform->transfer(h->pIO, (char*)rxBuff, (const char*)txBuff, length);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	695b      	ldr	r3, [r3, #20]
 80011ba:	689c      	ldr	r4, [r3, #8]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6898      	ldr	r0, [r3, #8]
 80011c0:	6a3b      	ldr	r3, [r7, #32]
 80011c2:	f107 020c 	add.w	r2, r7, #12
 80011c6:	f107 0110 	add.w	r1, r7, #16
 80011ca:	47a0      	blx	r4
 80011cc:	61f8      	str	r0, [r7, #28]

	if ( ret != 0 )
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d002      	beq.n	80011da <L6474_GetParamCommand+0xa6>
		return errcINTERNAL;
 80011d4:	f06f 0303 	mvn.w	r3, #3
 80011d8:	e056      	b.n	8001288 <L6474_GetParamCommand+0x154>

	int res = errcNONE;
 80011da:	2300      	movs	r3, #0
 80011dc:	627b      	str	r3, [r7, #36]	@ 0x24
	unsigned int tmp = 0;
 80011de:	2300      	movs	r3, #0
 80011e0:	61bb      	str	r3, [r7, #24]
	switch (L6474_Parameters[addr].length)
 80011e2:	4a2b      	ldr	r2, [pc, #172]	@ (8001290 <L6474_GetParamCommand+0x15c>)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	011b      	lsls	r3, r3, #4
 80011e8:	4413      	add	r3, r2
 80011ea:	3302      	adds	r3, #2
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	2b03      	cmp	r3, #3
 80011f0:	d021      	beq.n	8001236 <L6474_GetParamCommand+0x102>
 80011f2:	2b03      	cmp	r3, #3
 80011f4:	dc31      	bgt.n	800125a <L6474_GetParamCommand+0x126>
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d002      	beq.n	8001200 <L6474_GetParamCommand+0xcc>
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d00c      	beq.n	8001218 <L6474_GetParamCommand+0xe4>
 80011fe:	e02c      	b.n	800125a <L6474_GetParamCommand+0x126>
	{
	    case 1:
	    	tmp = ( rxBuff[1] << 0 );
 8001200:	7c7b      	ldrb	r3, [r7, #17]
 8001202:	61bb      	str	r3, [r7, #24]
	    	res = tmp & L6474_Parameters[addr].mask;
 8001204:	4a22      	ldr	r2, [pc, #136]	@ (8001290 <L6474_GetParamCommand+0x15c>)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	011b      	lsls	r3, r3, #4
 800120a:	4413      	add	r3, r2
 800120c:	3304      	adds	r3, #4
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	4013      	ands	r3, r2
 8001214:	627b      	str	r3, [r7, #36]	@ 0x24
	    	break;
 8001216:	e023      	b.n	8001260 <L6474_GetParamCommand+0x12c>
	    case 2:
	    	tmp = ( rxBuff[1] << 8 | rxBuff[2] << 0 );
 8001218:	7c7b      	ldrb	r3, [r7, #17]
 800121a:	021b      	lsls	r3, r3, #8
 800121c:	7cba      	ldrb	r2, [r7, #18]
 800121e:	4313      	orrs	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
	    	res = tmp & L6474_Parameters[addr].mask;
 8001222:	4a1b      	ldr	r2, [pc, #108]	@ (8001290 <L6474_GetParamCommand+0x15c>)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	011b      	lsls	r3, r3, #4
 8001228:	4413      	add	r3, r2
 800122a:	3304      	adds	r3, #4
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	4013      	ands	r3, r2
 8001232:	627b      	str	r3, [r7, #36]	@ 0x24
	    	//res = ( ( tmp & 0xFF00 ) >> 8 ) | ( ( tmp & 0x00FF ) << 8 );
	    	break;
 8001234:	e014      	b.n	8001260 <L6474_GetParamCommand+0x12c>
	    case 3:
	    	tmp = ( rxBuff[1] << 16 | rxBuff[2] << 8 | rxBuff[3] << 0 );
 8001236:	7c7b      	ldrb	r3, [r7, #17]
 8001238:	041a      	lsls	r2, r3, #16
 800123a:	7cbb      	ldrb	r3, [r7, #18]
 800123c:	021b      	lsls	r3, r3, #8
 800123e:	4313      	orrs	r3, r2
 8001240:	7cfa      	ldrb	r2, [r7, #19]
 8001242:	4313      	orrs	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
	    	res = tmp & L6474_Parameters[addr].mask;
 8001246:	4a12      	ldr	r2, [pc, #72]	@ (8001290 <L6474_GetParamCommand+0x15c>)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	011b      	lsls	r3, r3, #4
 800124c:	4413      	add	r3, r2
 800124e:	3304      	adds	r3, #4
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	4013      	ands	r3, r2
 8001256:	627b      	str	r3, [r7, #36]	@ 0x24
	    	//res = ( ( tmp & 0xFF0000 ) >> 16 ) | ( ( tmp & 0x00FF00 ) << 0 ) | ( ( tmp & 0x0000FF ) << 16 );
	    	break;
 8001258:	e002      	b.n	8001260 <L6474_GetParamCommand+0x12c>
	    default:
	    	return errcINTERNAL;
 800125a:	f06f 0303 	mvn.w	r3, #3
 800125e:	e013      	b.n	8001288 <L6474_GetParamCommand+0x154>
	}

	int opres = 0;
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]
	if ( ( opres = L6474_GetStatusCommand(h) ) < 0 )
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f7ff ff21 	bl	80010ac <L6474_GetStatusCommand>
 800126a:	6178      	str	r0, [r7, #20]
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	2b00      	cmp	r3, #0
 8001270:	da01      	bge.n	8001276 <L6474_GetParamCommand+0x142>
		return opres;
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	e008      	b.n	8001288 <L6474_GetParamCommand+0x154>

	if ( (opres & ( STATUS_NOTPERF_CMD_MASK | STATUS_WRONG_CMD_MASK ) ) != 0 )
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800127c:	2b00      	cmp	r3, #0
 800127e:	d002      	beq.n	8001286 <L6474_GetParamCommand+0x152>
		return errcDEVICE_STATE;
 8001280:	f06f 0305 	mvn.w	r3, #5
 8001284:	e000      	b.n	8001288 <L6474_GetParamCommand+0x154>

	return res;
 8001286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001288:	4618      	mov	r0, r3
 800128a:	372c      	adds	r7, #44	@ 0x2c
 800128c:	46bd      	mov	sp, r7
 800128e:	bd90      	pop	{r4, r7, pc}
 8001290:	08010d74 	.word	0x08010d74

08001294 <L6474_SetParamCommand>:

// --------------------------------------------------------------------------------------------------------------------
static int L6474_SetParamCommand(L6474_Handle_t h, int addr, int value)
// --------------------------------------------------------------------------------------------------------------------
{
 8001294:	b590      	push	{r4, r7, lr}
 8001296:	b08b      	sub	sp, #44	@ 0x2c
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]
	addr &= STEP_REG_RANGE_MASK;
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	f003 031f 	and.w	r3, r3, #31
 80012a6:	60bb      	str	r3, [r7, #8]
	if( L6474_Parameters[addr].defined == 0 )
 80012a8:	4a59      	ldr	r2, [pc, #356]	@ (8001410 <L6474_SetParamCommand+0x17c>)
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	011b      	lsls	r3, r3, #4
 80012ae:	4413      	add	r3, r2
 80012b0:	3301      	adds	r3, #1
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d102      	bne.n	80012be <L6474_SetParamCommand+0x2a>
		return errcINV_ARG;
 80012b8:	f04f 33ff 	mov.w	r3, #4294967295
 80012bc:	e0a3      	b.n	8001406 <L6474_SetParamCommand+0x172>

	if( ( L6474_Parameters[addr].flags & ( afWRITE | afWRITE_HighZ ) ) == 0 )
 80012be:	4a54      	ldr	r2, [pc, #336]	@ (8001410 <L6474_SetParamCommand+0x17c>)
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	011b      	lsls	r3, r3, #4
 80012c4:	4413      	add	r3, r2
 80012c6:	330c      	adds	r3, #12
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	f003 0306 	and.w	r3, r3, #6
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d102      	bne.n	80012d8 <L6474_SetParamCommand+0x44>
		return errcFORBIDDEN;
 80012d2:	f06f 0307 	mvn.w	r3, #7
 80012d6:	e096      	b.n	8001406 <L6474_SetParamCommand+0x172>

	if ( ( h->state == stRESET ) || ( ( h->state == stENABLED ) && ( ( L6474_Parameters[addr].flags & afWRITE_HighZ ) != 0 ) ) )
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d00d      	beq.n	80012fc <L6474_SetParamCommand+0x68>
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d10c      	bne.n	8001302 <L6474_SetParamCommand+0x6e>
 80012e8:	4a49      	ldr	r2, [pc, #292]	@ (8001410 <L6474_SetParamCommand+0x17c>)
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	011b      	lsls	r3, r3, #4
 80012ee:	4413      	add	r3, r2
 80012f0:	330c      	adds	r3, #12
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	f003 0304 	and.w	r3, r3, #4
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d002      	beq.n	8001302 <L6474_SetParamCommand+0x6e>
		return errcINV_STATE;
 80012fc:	f06f 0302 	mvn.w	r3, #2
 8001300:	e081      	b.n	8001406 <L6474_SetParamCommand+0x172>

	int length  = L6474_Parameters[addr].length + STEP_CMD_SET_LENGTH;
 8001302:	4a43      	ldr	r2, [pc, #268]	@ (8001410 <L6474_SetParamCommand+0x17c>)
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	011b      	lsls	r3, r3, #4
 8001308:	4413      	add	r3, r2
 800130a:	3302      	adds	r3, #2
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	3301      	adds	r3, #1
 8001310:	627b      	str	r3, [r7, #36]	@ 0x24
	if ( length > STEP_CMD_SET_MAX_PAYLOAD )
 8001312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001314:	2b04      	cmp	r3, #4
 8001316:	dd02      	ble.n	800131e <L6474_SetParamCommand+0x8a>
		return errcINTERNAL;
 8001318:	f06f 0303 	mvn.w	r3, #3
 800131c:	e073      	b.n	8001406 <L6474_SetParamCommand+0x172>

	unsigned char rxBuff[STEP_CMD_SET_MAX_PAYLOAD] = { 0 };
 800131e:	2300      	movs	r3, #0
 8001320:	617b      	str	r3, [r7, #20]
	unsigned char txBuff[STEP_CMD_SET_MAX_PAYLOAD] = { 0 };
 8001322:	2300      	movs	r3, #0
 8001324:	613b      	str	r3, [r7, #16]
	unsigned int  tmp = 0;
 8001326:	2300      	movs	r3, #0
 8001328:	623b      	str	r3, [r7, #32]

	txBuff[0] = STEP_CMD_SET_PREFIX | addr;
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	b2db      	uxtb	r3, r3
 800132e:	743b      	strb	r3, [r7, #16]

	switch (L6474_Parameters[addr].length)
 8001330:	4a37      	ldr	r2, [pc, #220]	@ (8001410 <L6474_SetParamCommand+0x17c>)
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	011b      	lsls	r3, r3, #4
 8001336:	4413      	add	r3, r2
 8001338:	3302      	adds	r3, #2
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	2b03      	cmp	r3, #3
 800133e:	d024      	beq.n	800138a <L6474_SetParamCommand+0xf6>
 8001340:	2b03      	cmp	r3, #3
 8001342:	dc37      	bgt.n	80013b4 <L6474_SetParamCommand+0x120>
 8001344:	2b01      	cmp	r3, #1
 8001346:	d002      	beq.n	800134e <L6474_SetParamCommand+0xba>
 8001348:	2b02      	cmp	r3, #2
 800134a:	d00d      	beq.n	8001368 <L6474_SetParamCommand+0xd4>
 800134c:	e032      	b.n	80013b4 <L6474_SetParamCommand+0x120>
	{
	    case 1:
	    	tmp = value & L6474_Parameters[addr].mask;
 800134e:	4a30      	ldr	r2, [pc, #192]	@ (8001410 <L6474_SetParamCommand+0x17c>)
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	011b      	lsls	r3, r3, #4
 8001354:	4413      	add	r3, r2
 8001356:	3304      	adds	r3, #4
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4013      	ands	r3, r2
 800135e:	623b      	str	r3, [r7, #32]
	    	txBuff[1] = tmp >> 0;
 8001360:	6a3b      	ldr	r3, [r7, #32]
 8001362:	b2db      	uxtb	r3, r3
 8001364:	747b      	strb	r3, [r7, #17]
	    	break;
 8001366:	e028      	b.n	80013ba <L6474_SetParamCommand+0x126>
	    case 2:
	    	tmp = value & L6474_Parameters[addr].mask;
 8001368:	4a29      	ldr	r2, [pc, #164]	@ (8001410 <L6474_SetParamCommand+0x17c>)
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	011b      	lsls	r3, r3, #4
 800136e:	4413      	add	r3, r2
 8001370:	3304      	adds	r3, #4
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	4013      	ands	r3, r2
 8001378:	623b      	str	r3, [r7, #32]
	    	txBuff[1] = tmp >> 8;
 800137a:	6a3b      	ldr	r3, [r7, #32]
 800137c:	0a1b      	lsrs	r3, r3, #8
 800137e:	b2db      	uxtb	r3, r3
 8001380:	747b      	strb	r3, [r7, #17]
	    	txBuff[2] = tmp >> 0;
 8001382:	6a3b      	ldr	r3, [r7, #32]
 8001384:	b2db      	uxtb	r3, r3
 8001386:	74bb      	strb	r3, [r7, #18]
	    	break;
 8001388:	e017      	b.n	80013ba <L6474_SetParamCommand+0x126>
	    case 3:
	    	tmp = value & L6474_Parameters[addr].mask;
 800138a:	4a21      	ldr	r2, [pc, #132]	@ (8001410 <L6474_SetParamCommand+0x17c>)
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	011b      	lsls	r3, r3, #4
 8001390:	4413      	add	r3, r2
 8001392:	3304      	adds	r3, #4
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4013      	ands	r3, r2
 800139a:	623b      	str	r3, [r7, #32]
	    	txBuff[1] = tmp >> 16;
 800139c:	6a3b      	ldr	r3, [r7, #32]
 800139e:	0c1b      	lsrs	r3, r3, #16
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	747b      	strb	r3, [r7, #17]
	    	txBuff[2] = tmp >> 8;
 80013a4:	6a3b      	ldr	r3, [r7, #32]
 80013a6:	0a1b      	lsrs	r3, r3, #8
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	74bb      	strb	r3, [r7, #18]
	    	txBuff[3] = tmp >> 0;
 80013ac:	6a3b      	ldr	r3, [r7, #32]
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	74fb      	strb	r3, [r7, #19]
	    	break;
 80013b2:	e002      	b.n	80013ba <L6474_SetParamCommand+0x126>
	    default:
	    	return errcINTERNAL;
 80013b4:	f06f 0303 	mvn.w	r3, #3
 80013b8:	e025      	b.n	8001406 <L6474_SetParamCommand+0x172>
	}

	int ret = h->platform->transfer(h->pIO, (char*)rxBuff, (const char*)txBuff, length);
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	695b      	ldr	r3, [r3, #20]
 80013be:	689c      	ldr	r4, [r3, #8]
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	6898      	ldr	r0, [r3, #8]
 80013c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c6:	f107 0210 	add.w	r2, r7, #16
 80013ca:	f107 0114 	add.w	r1, r7, #20
 80013ce:	47a0      	blx	r4
 80013d0:	61f8      	str	r0, [r7, #28]

	if ( ret != 0 )
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d002      	beq.n	80013de <L6474_SetParamCommand+0x14a>
		return errcINTERNAL;
 80013d8:	f06f 0303 	mvn.w	r3, #3
 80013dc:	e013      	b.n	8001406 <L6474_SetParamCommand+0x172>

	int res = 0;
 80013de:	2300      	movs	r3, #0
 80013e0:	61bb      	str	r3, [r7, #24]
	if ( ( res = L6474_GetStatusCommand(h) ) < 0 )
 80013e2:	68f8      	ldr	r0, [r7, #12]
 80013e4:	f7ff fe62 	bl	80010ac <L6474_GetStatusCommand>
 80013e8:	61b8      	str	r0, [r7, #24]
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	da01      	bge.n	80013f4 <L6474_SetParamCommand+0x160>
		return res;
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	e008      	b.n	8001406 <L6474_SetParamCommand+0x172>

	if ( ( res & ( STATUS_NOTPERF_CMD_MASK | STATUS_WRONG_CMD_MASK ) ) != 0 )
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d002      	beq.n	8001404 <L6474_SetParamCommand+0x170>
		return errcDEVICE_STATE;
 80013fe:	f06f 0305 	mvn.w	r3, #5
 8001402:	e000      	b.n	8001406 <L6474_SetParamCommand+0x172>

	return errcNONE;
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	372c      	adds	r7, #44	@ 0x2c
 800140a:	46bd      	mov	sp, r7
 800140c:	bd90      	pop	{r4, r7, pc}
 800140e:	bf00      	nop
 8001410:	08010d74 	.word	0x08010d74

08001414 <L6474_EnableCommand>:

// --------------------------------------------------------------------------------------------------------------------
static int L6474_EnableCommand(L6474_Handle_t h)
// --------------------------------------------------------------------------------------------------------------------
{
 8001414:	b590      	push	{r4, r7, lr}
 8001416:	b087      	sub	sp, #28
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
	if ( h->state == stRESET )
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d102      	bne.n	800142a <L6474_EnableCommand+0x16>
		return errcINV_STATE;
 8001424:	f06f 0302 	mvn.w	r3, #2
 8001428:	e034      	b.n	8001494 <L6474_EnableCommand+0x80>

	if ( h->state == stENABLED )
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b02      	cmp	r3, #2
 8001430:	d101      	bne.n	8001436 <L6474_EnableCommand+0x22>
		return errcNONE;
 8001432:	2300      	movs	r3, #0
 8001434:	e02e      	b.n	8001494 <L6474_EnableCommand+0x80>

	int length = STEP_CMD_ENA_LENGTH;
 8001436:	2301      	movs	r3, #1
 8001438:	617b      	str	r3, [r7, #20]

	unsigned char rxBuff[STEP_CMD_ENA_LENGTH] = { 0 };
 800143a:	2300      	movs	r3, #0
 800143c:	733b      	strb	r3, [r7, #12]
	unsigned char txBuff[STEP_CMD_ENA_LENGTH] = { 0 };
 800143e:	2300      	movs	r3, #0
 8001440:	723b      	strb	r3, [r7, #8]

	txBuff[0] = STEP_CMD_ENA_PREFIX | 0;
 8001442:	23b8      	movs	r3, #184	@ 0xb8
 8001444:	723b      	strb	r3, [r7, #8]
	int ret = h->platform->transfer(h->pIO, (char*)rxBuff, (const char*)txBuff, length);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	689c      	ldr	r4, [r3, #8]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6898      	ldr	r0, [r3, #8]
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	f107 0208 	add.w	r2, r7, #8
 8001456:	f107 010c 	add.w	r1, r7, #12
 800145a:	47a0      	blx	r4
 800145c:	6138      	str	r0, [r7, #16]

	if ( ret != 0 )
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d002      	beq.n	800146a <L6474_EnableCommand+0x56>
		return errcINTERNAL;
 8001464:	f06f 0303 	mvn.w	r3, #3
 8001468:	e014      	b.n	8001494 <L6474_EnableCommand+0x80>

	if ( ( ret = L6474_GetStatusCommand(h) ) < 0 )
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f7ff fe1e 	bl	80010ac <L6474_GetStatusCommand>
 8001470:	6138      	str	r0, [r7, #16]
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	2b00      	cmp	r3, #0
 8001476:	da01      	bge.n	800147c <L6474_EnableCommand+0x68>
		return ret;
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	e00b      	b.n	8001494 <L6474_EnableCommand+0x80>

	if ( ( ret & ( STATUS_NOTPERF_CMD_MASK | STATUS_WRONG_CMD_MASK ) ) != 0 )
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8001482:	2b00      	cmp	r3, #0
 8001484:	d002      	beq.n	800148c <L6474_EnableCommand+0x78>
		return errcDEVICE_STATE;
 8001486:	f06f 0305 	mvn.w	r3, #5
 800148a:	e003      	b.n	8001494 <L6474_EnableCommand+0x80>

	h->state = stENABLED;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2202      	movs	r2, #2
 8001490:	701a      	strb	r2, [r3, #0]
	return errcNONE;
 8001492:	2300      	movs	r3, #0
}
 8001494:	4618      	mov	r0, r3
 8001496:	371c      	adds	r7, #28
 8001498:	46bd      	mov	sp, r7
 800149a:	bd90      	pop	{r4, r7, pc}

0800149c <L6474_DisableCommand>:

// --------------------------------------------------------------------------------------------------------------------
static int L6474_DisableCommand(L6474_Handle_t h)
// --------------------------------------------------------------------------------------------------------------------
{
 800149c:	b590      	push	{r4, r7, lr}
 800149e:	b087      	sub	sp, #28
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
	if ( h->state == stRESET )
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d102      	bne.n	80014b2 <L6474_DisableCommand+0x16>
		return errcINV_STATE;
 80014ac:	f06f 0302 	mvn.w	r3, #2
 80014b0:	e038      	b.n	8001524 <L6474_DisableCommand+0x88>

	int length = STEP_CMD_DIS_LENGTH;
 80014b2:	2301      	movs	r3, #1
 80014b4:	617b      	str	r3, [r7, #20]

	unsigned char rxBuff[STEP_CMD_DIS_LENGTH] = { 0 };
 80014b6:	2300      	movs	r3, #0
 80014b8:	733b      	strb	r3, [r7, #12]
	unsigned char txBuff[STEP_CMD_DIS_LENGTH] = { 0 };
 80014ba:	2300      	movs	r3, #0
 80014bc:	723b      	strb	r3, [r7, #8]

	txBuff[0] = STEP_CMD_DIS_PREFIX | 0;
 80014be:	23a8      	movs	r3, #168	@ 0xa8
 80014c0:	723b      	strb	r3, [r7, #8]
	int ret = h->platform->transfer(h->pIO, (char*)rxBuff, (const char*)txBuff, length);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	695b      	ldr	r3, [r3, #20]
 80014c6:	689c      	ldr	r4, [r3, #8]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6898      	ldr	r0, [r3, #8]
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	f107 0208 	add.w	r2, r7, #8
 80014d2:	f107 010c 	add.w	r1, r7, #12
 80014d6:	47a0      	blx	r4
 80014d8:	6138      	str	r0, [r7, #16]

	if ( ret != 0 )
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d002      	beq.n	80014e6 <L6474_DisableCommand+0x4a>
		return errcINTERNAL;
 80014e0:	f06f 0303 	mvn.w	r3, #3
 80014e4:	e01e      	b.n	8001524 <L6474_DisableCommand+0x88>

	if ( ( ret = L6474_GetStatusCommand(h) ) < 0 )
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f7ff fde0 	bl	80010ac <L6474_GetStatusCommand>
 80014ec:	6138      	str	r0, [r7, #16]
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	da01      	bge.n	80014f8 <L6474_DisableCommand+0x5c>
		return ret;
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	e015      	b.n	8001524 <L6474_DisableCommand+0x88>

	if ( ( ret & ( STATUS_NOTPERF_CMD_MASK | STATUS_WRONG_CMD_MASK ) ) != 0 )
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d002      	beq.n	8001508 <L6474_DisableCommand+0x6c>
		return errcDEVICE_STATE;
 8001502:	f06f 0305 	mvn.w	r3, #5
 8001506:	e00d      	b.n	8001524 <L6474_DisableCommand+0x88>

	h->state   = stDISABLED;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2201      	movs	r2, #1
 800150c:	701a      	strb	r2, [r3, #0]
#if defined(LIBL6474_STEP_ASYNC) && ( LIBL6474_STEP_ASYNC == 1 )
	h->pending = 0;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	605a      	str	r2, [r3, #4]
	h->platform->cancelStep(h->pPWM);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	695b      	ldr	r3, [r3, #20]
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	6912      	ldr	r2, [r2, #16]
 800151e:	4610      	mov	r0, r2
 8001520:	4798      	blx	r3
#endif
	return errcNONE;
 8001522:	2300      	movs	r3, #0
}
 8001524:	4618      	mov	r0, r3
 8001526:	371c      	adds	r7, #28
 8001528:	46bd      	mov	sp, r7
 800152a:	bd90      	pop	{r4, r7, pc}

0800152c <L6474_CreateInstance>:


// --------------------------------------------------------------------------------------------------------------------
L6474_Handle_t L6474_CreateInstance(L6474x_Platform_t* p, void* pIO, void* pGPO, void* pPWM)
// --------------------------------------------------------------------------------------------------------------------
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
 8001538:	603b      	str	r3, [r7, #0]
	if ( p == 0 )
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d101      	bne.n	8001544 <L6474_CreateInstance+0x18>
		return 0;
 8001540:	2300      	movs	r3, #0
 8001542:	e044      	b.n	80015ce <L6474_CreateInstance+0xa2>

	if ( ( p->reset == 0 ) || ( p->malloc == 0 ) || (p->free == 0) || (p->sleep == 0) || ( p->transfer == 0 ) )
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d00f      	beq.n	800156c <L6474_CreateInstance+0x40>
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d00b      	beq.n	800156c <L6474_CreateInstance+0x40>
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d007      	beq.n	800156c <L6474_CreateInstance+0x40>
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	691b      	ldr	r3, [r3, #16]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d003      	beq.n	800156c <L6474_CreateInstance+0x40>
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d101      	bne.n	8001570 <L6474_CreateInstance+0x44>
		return 0;
 800156c:	2300      	movs	r3, #0
 800156e:	e02e      	b.n	80015ce <L6474_CreateInstance+0xa2>
	if ( p->getFlag == 0 )
		return 0;
#endif

#if defined(LIBL6474_STEP_ASYNC) && ( LIBL6474_STEP_ASYNC == 1 )
	if ( ( p->cancelStep == 0 ) || ( p->stepAsync == 0 ) )
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d003      	beq.n	8001580 <L6474_CreateInstance+0x54>
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	695b      	ldr	r3, [r3, #20]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d101      	bne.n	8001584 <L6474_CreateInstance+0x58>
		return 0;
 8001580:	2300      	movs	r3, #0
 8001582:	e024      	b.n	80015ce <L6474_CreateInstance+0xa2>
#else
	if ( p->step == 0 )
		return 0;
#endif

	L6474_Handle_t h = p->malloc(sizeof(struct L6474_Handle));
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2018      	movs	r0, #24
 800158a:	4798      	blx	r3
 800158c:	6178      	str	r0, [r7, #20]
	if ( h == 0 )
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d101      	bne.n	8001598 <L6474_CreateInstance+0x6c>
		return 0;
 8001594:	2300      	movs	r3, #0
 8001596:	e01a      	b.n	80015ce <L6474_CreateInstance+0xa2>

	h->pGPO     = pGPO;
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	60da      	str	r2, [r3, #12]
	h->pIO      = pIO;
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	68ba      	ldr	r2, [r7, #8]
 80015a2:	609a      	str	r2, [r3, #8]
	h->pPWM     = pPWM;
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	683a      	ldr	r2, [r7, #0]
 80015a8:	611a      	str	r2, [r3, #16]
	h->platform = p;
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	68fa      	ldr	r2, [r7, #12]
 80015ae:	615a      	str	r2, [r3, #20]
	h->pending  = 0;
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	2200      	movs	r2, #0
 80015b4:	605a      	str	r2, [r3, #4]
	h->state    = stRESET;
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	2200      	movs	r2, #0
 80015ba:	701a      	strb	r2, [r3, #0]

	h->platform->reset(h->pGPO, 1);
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	695b      	ldr	r3, [r3, #20]
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	697a      	ldr	r2, [r7, #20]
 80015c4:	68d2      	ldr	r2, [r2, #12]
 80015c6:	2101      	movs	r1, #1
 80015c8:	4610      	mov	r0, r2
 80015ca:	4798      	blx	r3

	(void)L6474_NopCommand;
	return h;
 80015cc:	697b      	ldr	r3, [r7, #20]
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3718      	adds	r7, #24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <L6474_ResetStandBy>:


// --------------------------------------------------------------------------------------------------------------------
int L6474_ResetStandBy(L6474_Handle_t h)
// --------------------------------------------------------------------------------------------------------------------
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b084      	sub	sp, #16
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
	if ( h == 0 )
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d102      	bne.n	80015ea <L6474_ResetStandBy+0x14>
		return errcNULL_ARG;
 80015e4:	f06f 0301 	mvn.w	r3, #1
 80015e8:	e044      	b.n	8001674 <L6474_ResetStandBy+0x9e>

	if ( L6474_HelperLock(h) != 0 )
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f7ff fd38 	bl	8001060 <L6474_HelperLock>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d002      	beq.n	80015fc <L6474_ResetStandBy+0x26>
		return errcLOCKING;
 80015f6:	f06f 0304 	mvn.w	r3, #4
 80015fa:	e03b      	b.n	8001674 <L6474_ResetStandBy+0x9e>

	// forces the device state to update
	L6474_GetStatusCommand(h);
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f7ff fd55 	bl	80010ac <L6474_GetStatusCommand>

	if ( h->state == stENABLED )
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2b02      	cmp	r3, #2
 8001608:	d120      	bne.n	800164c <L6474_ResetStandBy+0x76>
	{
#if defined(LIBL6474_STEP_ASYNC) && ( LIBL6474_STEP_ASYNC == 1 )
		if ( h->pending != 0 )
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d00e      	beq.n	8001630 <L6474_ResetStandBy+0x5a>
		{
			h->platform->cancelStep(h->pPWM);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	6912      	ldr	r2, [r2, #16]
 800161c:	4610      	mov	r0, r2
 800161e:	4798      	blx	r3
			h->platform->sleep(IN_MILLISEC(1));
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	695b      	ldr	r3, [r3, #20]
 8001624:	691b      	ldr	r3, [r3, #16]
 8001626:	2001      	movs	r0, #1
 8001628:	4798      	blx	r3
			h->pending = 0;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2200      	movs	r2, #0
 800162e:	605a      	str	r2, [r3, #4]
		}
#endif

		int ret = 0;
 8001630:	2300      	movs	r3, #0
 8001632:	60fb      	str	r3, [r7, #12]
		if ( ( ret = L6474_DisableCommand(h) ) != 0 )
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f7ff ff31 	bl	800149c <L6474_DisableCommand>
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d004      	beq.n	800164c <L6474_ResetStandBy+0x76>
		{
			L6474_HelperUnlock(h);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f7ff fd17 	bl	8001076 <L6474_HelperUnlock>
			return ret;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	e013      	b.n	8001674 <L6474_ResetStandBy+0x9e>
		}
	}

	h->platform->reset(h->pGPO, 1);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	695b      	ldr	r3, [r3, #20]
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	68d2      	ldr	r2, [r2, #12]
 8001656:	2101      	movs	r1, #1
 8001658:	4610      	mov	r0, r2
 800165a:	4798      	blx	r3
	h->state = stRESET;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2200      	movs	r2, #0
 8001660:	701a      	strb	r2, [r3, #0]

	h->platform->sleep(IN_MILLISEC(1));
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	695b      	ldr	r3, [r3, #20]
 8001666:	691b      	ldr	r3, [r3, #16]
 8001668:	2001      	movs	r0, #1
 800166a:	4798      	blx	r3
	L6474_HelperUnlock(h);
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f7ff fd02 	bl	8001076 <L6474_HelperUnlock>

	return errcNONE;
 8001672:	2300      	movs	r3, #0
}
 8001674:	4618      	mov	r0, r3
 8001676:	3710      	adds	r7, #16
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <L6474_SetBaseParameter>:


// --------------------------------------------------------------------------------------------------------------------
int L6474_SetBaseParameter(L6474_BaseParameter_t* p)
// --------------------------------------------------------------------------------------------------------------------
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
	if ( p == 0 )
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d102      	bne.n	8001690 <L6474_SetBaseParameter+0x14>
		return errcNULL_ARG;
 800168a:	f06f 0301 	mvn.w	r3, #1
 800168e:	e012      	b.n	80016b6 <L6474_SetBaseParameter+0x3a>

	p->OcdTh      = ocdth1500mA;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2203      	movs	r2, #3
 8001694:	705a      	strb	r2, [r3, #1]
	p->TorqueVal  = 0x26; // ~1,2A
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2226      	movs	r2, #38	@ 0x26
 800169a:	711a      	strb	r2, [r3, #4]
	p->stepMode   = smMICRO16;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2204      	movs	r2, #4
 80016a0:	701a      	strb	r2, [r3, #0]
	p->TimeOnMin  = 0x29;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2229      	movs	r2, #41	@ 0x29
 80016a6:	709a      	strb	r2, [r3, #2]
	p->TimeOffMin = 0x29;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2229      	movs	r2, #41	@ 0x29
 80016ac:	70da      	strb	r2, [r3, #3]
	p->TFast      = 0x14; //0x19
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2214      	movs	r2, #20
 80016b2:	715a      	strb	r2, [r3, #5]

	return errcNONE;
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <L6474_Initialize>:

// --------------------------------------------------------------------------------------------------------------------
int L6474_Initialize(L6474_Handle_t h, L6474_BaseParameter_t* p)
// --------------------------------------------------------------------------------------------------------------------
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b084      	sub	sp, #16
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
 80016ca:	6039      	str	r1, [r7, #0]
	int val = 0;
 80016cc:	2300      	movs	r3, #0
 80016ce:	60fb      	str	r3, [r7, #12]

	if ( h == 0 || p == 0 )
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d002      	beq.n	80016dc <L6474_Initialize+0x1a>
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d102      	bne.n	80016e2 <L6474_Initialize+0x20>
		return errcNULL_ARG;
 80016dc:	f06f 0301 	mvn.w	r3, #1
 80016e0:	e13c      	b.n	800195c <L6474_Initialize+0x29a>

	if ( L6474_HelperLock(h) != 0 )
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f7ff fcbc 	bl	8001060 <L6474_HelperLock>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d002      	beq.n	80016f4 <L6474_Initialize+0x32>
		return errcLOCKING;
 80016ee:	f06f 0304 	mvn.w	r3, #4
 80016f2:	e133      	b.n	800195c <L6474_Initialize+0x29a>

	// forces the device state to update
	L6474_GetStatusCommand(h);
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f7ff fcd9 	bl	80010ac <L6474_GetStatusCommand>

	if ( h->state != stRESET )
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d00b      	beq.n	800171a <L6474_Initialize+0x58>
	{
		if ( ( val = L6474_ResetStandBy(h) ) != 0 )
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f7ff ff67 	bl	80015d6 <L6474_ResetStandBy>
 8001708:	60f8      	str	r0, [r7, #12]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d004      	beq.n	800171a <L6474_Initialize+0x58>
		{
			L6474_HelperUnlock(h);
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f7ff fcb0 	bl	8001076 <L6474_HelperUnlock>
			return val;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	e120      	b.n	800195c <L6474_Initialize+0x29a>
		}
	}

	h->platform->reset(h->pGPO, 0);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	695b      	ldr	r3, [r3, #20]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	68d2      	ldr	r2, [r2, #12]
 8001724:	2100      	movs	r1, #0
 8001726:	4610      	mov	r0, r2
 8001728:	4798      	blx	r3
	h->state = stDISABLED;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2201      	movs	r2, #1
 800172e:	701a      	strb	r2, [r3, #0]

	h->platform->sleep(IN_MILLISEC(10));
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	695b      	ldr	r3, [r3, #20]
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	200a      	movs	r0, #10
 8001738:	4798      	blx	r3

	//Now we have to write the configuration register
	unsigned int CONFIG = 0x2E88; // reset default value
 800173a:	f642 6388 	movw	r3, #11912	@ 0x2e88
 800173e:	60bb      	str	r3, [r7, #8]
	CONFIG &= ~0xF; // disables all clock outputs and selects internal oscillator
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	f023 030f 	bic.w	r3, r3, #15
 8001746:	60bb      	str	r3, [r7, #8]

#if defined(LIBL6474_DISABLE_OCD) && ( LIBL6474_DISABLE_OCD == 1 )
	CONFIG &= ~(1 << 7); // disable the OCD
#endif

	if ( ( val = L6474_SetParamCommand(h, STEP_REG_CONFIG, CONFIG) ) != 0 )
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	461a      	mov	r2, r3
 800174c:	2118      	movs	r1, #24
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7ff fda0 	bl	8001294 <L6474_SetParamCommand>
 8001754:	60f8      	str	r0, [r7, #12]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d00f      	beq.n	800177c <L6474_Initialize+0xba>
	{
		h->platform->reset(h->pGPO, 1);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	695b      	ldr	r3, [r3, #20]
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	68d2      	ldr	r2, [r2, #12]
 8001766:	2101      	movs	r1, #1
 8001768:	4610      	mov	r0, r2
 800176a:	4798      	blx	r3
		h->state = stRESET;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	701a      	strb	r2, [r3, #0]
		L6474_HelperUnlock(h);
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f7ff fc7f 	bl	8001076 <L6474_HelperUnlock>
		return val;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	e0ef      	b.n	800195c <L6474_Initialize+0x29a>
	}

	if ( ( val = L6474_SetParamCommand(h, STEP_REG_OCD_TH, p->OcdTh) ) != 0 )
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	785b      	ldrb	r3, [r3, #1]
 8001780:	461a      	mov	r2, r3
 8001782:	2113      	movs	r1, #19
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f7ff fd85 	bl	8001294 <L6474_SetParamCommand>
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d00f      	beq.n	80017b2 <L6474_Initialize+0xf0>
	{
		h->platform->reset(h->pGPO, 1);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	695b      	ldr	r3, [r3, #20]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	68d2      	ldr	r2, [r2, #12]
 800179c:	2101      	movs	r1, #1
 800179e:	4610      	mov	r0, r2
 80017a0:	4798      	blx	r3
		h->state = stRESET;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	701a      	strb	r2, [r3, #0]
		L6474_HelperUnlock(h);
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f7ff fc64 	bl	8001076 <L6474_HelperUnlock>
		return val;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	e0d4      	b.n	800195c <L6474_Initialize+0x29a>
	}

	if ( ( val = L6474_SetParamCommand(h, STEP_REG_TVAL, p->TorqueVal) ) != 0 )
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	791b      	ldrb	r3, [r3, #4]
 80017b6:	461a      	mov	r2, r3
 80017b8:	2109      	movs	r1, #9
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f7ff fd6a 	bl	8001294 <L6474_SetParamCommand>
 80017c0:	60f8      	str	r0, [r7, #12]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d00f      	beq.n	80017e8 <L6474_Initialize+0x126>
	{
		h->platform->reset(h->pGPO, 1);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	695b      	ldr	r3, [r3, #20]
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	68d2      	ldr	r2, [r2, #12]
 80017d2:	2101      	movs	r1, #1
 80017d4:	4610      	mov	r0, r2
 80017d6:	4798      	blx	r3
		h->state = stRESET;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	701a      	strb	r2, [r3, #0]
		L6474_HelperUnlock(h);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f7ff fc49 	bl	8001076 <L6474_HelperUnlock>
		return val;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	e0b9      	b.n	800195c <L6474_Initialize+0x29a>
	}

	if ( ( val = L6474_SetParamCommand(h, STEP_REG_TOFF_MIN, p->TimeOffMin) ) != 0 )
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	78db      	ldrb	r3, [r3, #3]
 80017ec:	461a      	mov	r2, r3
 80017ee:	2110      	movs	r1, #16
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f7ff fd4f 	bl	8001294 <L6474_SetParamCommand>
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d00f      	beq.n	800181e <L6474_Initialize+0x15c>
	{
		h->platform->reset(h->pGPO, 1);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	695b      	ldr	r3, [r3, #20]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	68d2      	ldr	r2, [r2, #12]
 8001808:	2101      	movs	r1, #1
 800180a:	4610      	mov	r0, r2
 800180c:	4798      	blx	r3
		h->state = stRESET;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	701a      	strb	r2, [r3, #0]
		L6474_HelperUnlock(h);
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f7ff fc2e 	bl	8001076 <L6474_HelperUnlock>
		return val;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	e09e      	b.n	800195c <L6474_Initialize+0x29a>
	}

	if ( ( val = L6474_SetParamCommand(h, STEP_REG_TON_MIN, p->TimeOnMin) ) != 0 )
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	789b      	ldrb	r3, [r3, #2]
 8001822:	461a      	mov	r2, r3
 8001824:	210f      	movs	r1, #15
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f7ff fd34 	bl	8001294 <L6474_SetParamCommand>
 800182c:	60f8      	str	r0, [r7, #12]
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d00f      	beq.n	8001854 <L6474_Initialize+0x192>
	{
		h->platform->reset(h->pGPO, 1);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	695b      	ldr	r3, [r3, #20]
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	68d2      	ldr	r2, [r2, #12]
 800183e:	2101      	movs	r1, #1
 8001840:	4610      	mov	r0, r2
 8001842:	4798      	blx	r3
		h->state = stRESET;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2200      	movs	r2, #0
 8001848:	701a      	strb	r2, [r3, #0]
		L6474_HelperUnlock(h);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f7ff fc13 	bl	8001076 <L6474_HelperUnlock>
		return val;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	e083      	b.n	800195c <L6474_Initialize+0x29a>
	}

	if ( ( val = L6474_SetParamCommand(h, STEP_REG_T_FAST, p->TFast) ) != 0 )
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	795b      	ldrb	r3, [r3, #5]
 8001858:	461a      	mov	r2, r3
 800185a:	210e      	movs	r1, #14
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f7ff fd19 	bl	8001294 <L6474_SetParamCommand>
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d00f      	beq.n	800188a <L6474_Initialize+0x1c8>
	{
		h->platform->reset(h->pGPO, 1);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	695b      	ldr	r3, [r3, #20]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	68d2      	ldr	r2, [r2, #12]
 8001874:	2101      	movs	r1, #1
 8001876:	4610      	mov	r0, r2
 8001878:	4798      	blx	r3
		h->state = stRESET;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2200      	movs	r2, #0
 800187e:	701a      	strb	r2, [r3, #0]
		L6474_HelperUnlock(h);
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f7ff fbf8 	bl	8001076 <L6474_HelperUnlock>
		return val;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	e068      	b.n	800195c <L6474_Initialize+0x29a>
	}

	if ( ( val = L6474_SetStepMode(h, p->stepMode) ) != 0 )
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	4619      	mov	r1, r3
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f000 f867 	bl	8001964 <L6474_SetStepMode>
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d00f      	beq.n	80018be <L6474_Initialize+0x1fc>
	{
		h->platform->reset(h->pGPO, 1);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	695b      	ldr	r3, [r3, #20]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	68d2      	ldr	r2, [r2, #12]
 80018a8:	2101      	movs	r1, #1
 80018aa:	4610      	mov	r0, r2
 80018ac:	4798      	blx	r3
		h->state = stRESET;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	701a      	strb	r2, [r3, #0]
		L6474_HelperUnlock(h);
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f7ff fbde 	bl	8001076 <L6474_HelperUnlock>
		return val;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	e04e      	b.n	800195c <L6474_Initialize+0x29a>
	}

	// enable all alarms
	if ( ( val = L6474_SetParamCommand(h, STEP_REG_ALARM_EN, STEP_MASK_ALARM_EN) ) != 0 )
 80018be:	22ff      	movs	r2, #255	@ 0xff
 80018c0:	2117      	movs	r1, #23
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f7ff fce6 	bl	8001294 <L6474_SetParamCommand>
 80018c8:	60f8      	str	r0, [r7, #12]
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d00f      	beq.n	80018f0 <L6474_Initialize+0x22e>
	{
		h->platform->reset(h->pGPO, 1);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	695b      	ldr	r3, [r3, #20]
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	68d2      	ldr	r2, [r2, #12]
 80018da:	2101      	movs	r1, #1
 80018dc:	4610      	mov	r0, r2
 80018de:	4798      	blx	r3
		h->state = stRESET;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2200      	movs	r2, #0
 80018e4:	701a      	strb	r2, [r3, #0]
		L6474_HelperUnlock(h);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f7ff fbc5 	bl	8001076 <L6474_HelperUnlock>
		return val;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	e035      	b.n	800195c <L6474_Initialize+0x29a>
	}

	if ( ( val = L6474_DisableCommand(h) ) != 0 )
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f7ff fdd3 	bl	800149c <L6474_DisableCommand>
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d00f      	beq.n	800191e <L6474_Initialize+0x25c>
	{
		h->platform->reset(h->pGPO, 1);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	695b      	ldr	r3, [r3, #20]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	68d2      	ldr	r2, [r2, #12]
 8001908:	2101      	movs	r1, #1
 800190a:	4610      	mov	r0, r2
 800190c:	4798      	blx	r3
		h->state = stRESET;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	701a      	strb	r2, [r3, #0]
		L6474_HelperUnlock(h);
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f7ff fbae 	bl	8001076 <L6474_HelperUnlock>
		return val;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	e01e      	b.n	800195c <L6474_Initialize+0x29a>
	}

	// now it should not fail when reading status register!
	if ( ( val = L6474_GetStatusCommand(h) ) < 0 )
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f7ff fbc4 	bl	80010ac <L6474_GetStatusCommand>
 8001924:	60f8      	str	r0, [r7, #12]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2b00      	cmp	r3, #0
 800192a:	da0f      	bge.n	800194c <L6474_Initialize+0x28a>
	{
		h->platform->reset(h->pGPO, 1);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	695b      	ldr	r3, [r3, #20]
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	68d2      	ldr	r2, [r2, #12]
 8001936:	2101      	movs	r1, #1
 8001938:	4610      	mov	r0, r2
 800193a:	4798      	blx	r3
		h->state = stRESET;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	701a      	strb	r2, [r3, #0]
		L6474_HelperUnlock(h);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f7ff fb97 	bl	8001076 <L6474_HelperUnlock>
		return val;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	e007      	b.n	800195c <L6474_Initialize+0x29a>
	}

	L6474_GetParamCommand(h, STEP_REG_CONFIG);
 800194c:	2118      	movs	r1, #24
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f7ff fbf0 	bl	8001134 <L6474_GetParamCommand>

	L6474_HelperUnlock(h);
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f7ff fb8e 	bl	8001076 <L6474_HelperUnlock>
	return errcNONE;
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	3710      	adds	r7, #16
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <L6474_SetStepMode>:


// --------------------------------------------------------------------------------------------------------------------
int L6474_SetStepMode(L6474_Handle_t h, L6474x_StepMode_t mode)
// --------------------------------------------------------------------------------------------------------------------
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	460b      	mov	r3, r1
 800196e:	70fb      	strb	r3, [r7, #3]
	int val = 0;
 8001970:	2300      	movs	r3, #0
 8001972:	60fb      	str	r3, [r7, #12]

	if ( h == 0 )
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d102      	bne.n	8001980 <L6474_SetStepMode+0x1c>
		return errcNULL_ARG;
 800197a:	f06f 0301 	mvn.w	r3, #1
 800197e:	e032      	b.n	80019e6 <L6474_SetStepMode+0x82>

	if ( mode > smMICRO16 )
 8001980:	78fb      	ldrb	r3, [r7, #3]
 8001982:	2b04      	cmp	r3, #4
 8001984:	d902      	bls.n	800198c <L6474_SetStepMode+0x28>
		return errcINV_ARG;
 8001986:	f04f 33ff 	mov.w	r3, #4294967295
 800198a:	e02c      	b.n	80019e6 <L6474_SetStepMode+0x82>

	// set this bit. is described in the spec.
	mode |= ( 1 << 3 );
 800198c:	78fb      	ldrb	r3, [r7, #3]
 800198e:	f043 0308 	orr.w	r3, r3, #8
 8001992:	70fb      	strb	r3, [r7, #3]

	if ( L6474_HelperLock(h) != 0 )
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f7ff fb63 	bl	8001060 <L6474_HelperLock>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d002      	beq.n	80019a6 <L6474_SetStepMode+0x42>
		return errcLOCKING;
 80019a0:	f06f 0304 	mvn.w	r3, #4
 80019a4:	e01f      	b.n	80019e6 <L6474_SetStepMode+0x82>

	// forces the device state to update
	L6474_GetStatusCommand(h);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f7ff fb80 	bl	80010ac <L6474_GetStatusCommand>

	if ( h->state == stRESET )
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d105      	bne.n	80019c0 <L6474_SetStepMode+0x5c>
	{
		L6474_HelperUnlock(h);
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f7ff fb5e 	bl	8001076 <L6474_HelperUnlock>
		return errcINV_STATE;
 80019ba:	f06f 0302 	mvn.w	r3, #2
 80019be:	e012      	b.n	80019e6 <L6474_SetStepMode+0x82>
	}

	if ( ( val = L6474_SetParamCommand(h, STEP_REG_STEP_MODE, ( ( mode & STEP_MASK_STEP_MODE ) << STEP_OFFSET_STEP_MODE ) ) ) != 0 )
 80019c0:	78fb      	ldrb	r3, [r7, #3]
 80019c2:	461a      	mov	r2, r3
 80019c4:	2116      	movs	r1, #22
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f7ff fc64 	bl	8001294 <L6474_SetParamCommand>
 80019cc:	60f8      	str	r0, [r7, #12]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d004      	beq.n	80019de <L6474_SetStepMode+0x7a>
	{
		L6474_HelperUnlock(h);
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f7ff fb4e 	bl	8001076 <L6474_HelperUnlock>
		return val;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	e003      	b.n	80019e6 <L6474_SetStepMode+0x82>
	}

	L6474_HelperUnlock(h);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f7ff fb49 	bl	8001076 <L6474_HelperUnlock>
	return errcNONE;
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3710      	adds	r7, #16
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <L6474_SetPowerOutputs>:


// --------------------------------------------------------------------------------------------------------------------
int L6474_SetPowerOutputs(L6474_Handle_t h, int ena)
// --------------------------------------------------------------------------------------------------------------------
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b084      	sub	sp, #16
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
 80019f6:	6039      	str	r1, [r7, #0]
	int val = 0;
 80019f8:	2300      	movs	r3, #0
 80019fa:	60fb      	str	r3, [r7, #12]

	if ( h == 0 )
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d102      	bne.n	8001a08 <L6474_SetPowerOutputs+0x1a>
		return errcNULL_ARG;
 8001a02:	f06f 0301 	mvn.w	r3, #1
 8001a06:	e02e      	b.n	8001a66 <L6474_SetPowerOutputs+0x78>

	if ( L6474_HelperLock(h) != 0 )
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f7ff fb29 	bl	8001060 <L6474_HelperLock>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d002      	beq.n	8001a1a <L6474_SetPowerOutputs+0x2c>
		return errcLOCKING;
 8001a14:	f06f 0304 	mvn.w	r3, #4
 8001a18:	e025      	b.n	8001a66 <L6474_SetPowerOutputs+0x78>

	// forces the device state to update
	L6474_GetStatusCommand(h);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f7ff fb46 	bl	80010ac <L6474_GetStatusCommand>

	if ( h->state == stRESET )
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d105      	bne.n	8001a34 <L6474_SetPowerOutputs+0x46>
	{
		L6474_HelperUnlock(h);
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f7ff fb24 	bl	8001076 <L6474_HelperUnlock>
		return errcINV_STATE;
 8001a2e:	f06f 0302 	mvn.w	r3, #2
 8001a32:	e018      	b.n	8001a66 <L6474_SetPowerOutputs+0x78>
	}

	if ( ( val = ( ( ( !!ena ) == 0 ) ? L6474_DisableCommand(h) : L6474_EnableCommand(h) ) ) != 0 )
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d104      	bne.n	8001a44 <L6474_SetPowerOutputs+0x56>
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f7ff fd2e 	bl	800149c <L6474_DisableCommand>
 8001a40:	4603      	mov	r3, r0
 8001a42:	e003      	b.n	8001a4c <L6474_SetPowerOutputs+0x5e>
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f7ff fce5 	bl	8001414 <L6474_EnableCommand>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d004      	beq.n	8001a5e <L6474_SetPowerOutputs+0x70>
	{
		L6474_HelperUnlock(h);
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f7ff fb0e 	bl	8001076 <L6474_HelperUnlock>
		return val;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	e003      	b.n	8001a66 <L6474_SetPowerOutputs+0x78>
	}

	L6474_HelperUnlock(h);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7ff fb09 	bl	8001076 <L6474_HelperUnlock>
	return errcNONE;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
	...

08001a70 <L6474_StepIncremental>:
}

// --------------------------------------------------------------------------------------------------------------------
int L6474_StepIncremental(L6474_Handle_t h, int steps )
// --------------------------------------------------------------------------------------------------------------------
{
 8001a70:	b590      	push	{r4, r7, lr}
 8001a72:	b087      	sub	sp, #28
 8001a74:	af02      	add	r7, sp, #8
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
	if ( h == 0 )
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d102      	bne.n	8001a86 <L6474_StepIncremental+0x16>
		return errcNULL_ARG;
 8001a80:	f06f 0301 	mvn.w	r3, #1
 8001a84:	e051      	b.n	8001b2a <L6474_StepIncremental+0xba>

	if ( steps == 0 )
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d102      	bne.n	8001a92 <L6474_StepIncremental+0x22>
		return errcNULL_ARG;
 8001a8c:	f06f 0301 	mvn.w	r3, #1
 8001a90:	e04b      	b.n	8001b2a <L6474_StepIncremental+0xba>

	if ( L6474_HelperLock(h) != 0 )
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f7ff fae4 	bl	8001060 <L6474_HelperLock>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d002      	beq.n	8001aa4 <L6474_StepIncremental+0x34>
		return errcLOCKING;
 8001a9e:	f06f 0304 	mvn.w	r3, #4
 8001aa2:	e042      	b.n	8001b2a <L6474_StepIncremental+0xba>

	// forces the device state to update
	L6474_GetStatusCommand(h);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f7ff fb01 	bl	80010ac <L6474_GetStatusCommand>

	if ( h->state != stENABLED )
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d005      	beq.n	8001abe <L6474_StepIncremental+0x4e>
	{
		L6474_HelperUnlock(h);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f7ff fadf 	bl	8001076 <L6474_HelperUnlock>
		return errcINV_STATE;
 8001ab8:	f06f 0302 	mvn.w	r3, #2
 8001abc:	e035      	b.n	8001b2a <L6474_StepIncremental+0xba>
	}

	if ( h->pending != 0 )
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d005      	beq.n	8001ad2 <L6474_StepIncremental+0x62>
	{
		L6474_HelperUnlock(h);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7ff fad5 	bl	8001076 <L6474_HelperUnlock>
		return errcPENDING;
 8001acc:	f06f 0306 	mvn.w	r3, #6
 8001ad0:	e02b      	b.n	8001b2a <L6474_StepIncremental+0xba>
	}

	int ret = 0;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60fb      	str	r3, [r7, #12]
#if defined(LIBL6474_STEP_ASYNC) && ( LIBL6474_STEP_ASYNC == 1 )
	h->pending = 1;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2201      	movs	r2, #1
 8001ada:	605a      	str	r2, [r3, #4]
	if ( ( ret = h->platform->stepAsync(h->pPWM, steps >= 0, ( ( steps < 0 ) ? -steps : steps ), L6474_HelperReleaseStep, h) ) != 0 )
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	695b      	ldr	r3, [r3, #20]
 8001ae0:	695c      	ldr	r4, [r3, #20]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6918      	ldr	r0, [r3, #16]
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	0fdb      	lsrs	r3, r3, #31
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	4619      	mov	r1, r3
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	bfb8      	it	lt
 8001af6:	425b      	neglt	r3, r3
 8001af8:	461a      	mov	r2, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	9300      	str	r3, [sp, #0]
 8001afe:	4b0d      	ldr	r3, [pc, #52]	@ (8001b34 <L6474_StepIncremental+0xc4>)
 8001b00:	47a0      	blx	r4
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d002      	beq.n	8001b10 <L6474_StepIncremental+0xa0>
	{
		h->pending = 0;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	605a      	str	r2, [r3, #4]
	(void)L6474_HelperReleaseStep;
	ret = h->platform->step(h->pPWM, ((steps < 0) ? -steps : steps), steps);
	h->pending = 0;
#endif

	if ( ret != 0 )
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d005      	beq.n	8001b22 <L6474_StepIncremental+0xb2>
	{
		L6474_HelperUnlock(h);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7ff faad 	bl	8001076 <L6474_HelperUnlock>
		return errcINTERNAL;
 8001b1c:	f06f 0303 	mvn.w	r3, #3
 8001b20:	e003      	b.n	8001b2a <L6474_StepIncremental+0xba>
	}

	L6474_HelperUnlock(h);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7ff faa7 	bl	8001076 <L6474_HelperUnlock>
	return errcNONE;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3714      	adds	r7, #20
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd90      	pop	{r4, r7, pc}
 8001b32:	bf00      	nop
 8001b34:	0800108b 	.word	0x0800108b

08001b38 <vApplicationMallocFailedHook>:
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */
extern void initialise_stdlib_abstraction( void );

void vApplicationMallocFailedHook( void )
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8001b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b42:	b672      	cpsid	i
 8001b44:	f383 8811 	msr	BASEPRI, r3
 8001b48:	f3bf 8f6f 	isb	sy
 8001b4c:	f3bf 8f4f 	dsb	sy
 8001b50:	b662      	cpsie	i
 8001b52:	607b      	str	r3, [r7, #4]
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        "   cpsie i                                                 \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8001b54:	bf00      	nop
  taskDISABLE_INTERRUPTS();
  __asm volatile( "bkpt #0" );
 8001b56:	be00      	bkpt	0x0000
  for (;;) {;}
 8001b58:	bf00      	nop
 8001b5a:	e7fd      	b.n	8001b58 <vApplicationMallocFailedHook+0x20>

08001b5c <vApplicationStackOverflowHook>:
}
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
    __asm volatile
 8001b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b6a:	b672      	cpsid	i
 8001b6c:	f383 8811 	msr	BASEPRI, r3
 8001b70:	f3bf 8f6f 	isb	sy
 8001b74:	f3bf 8f4f 	dsb	sy
 8001b78:	b662      	cpsie	i
 8001b7a:	60fb      	str	r3, [r7, #12]
}
 8001b7c:	bf00      	nop
  ( void ) pcTaskName;
  ( void ) pxTask;

  taskDISABLE_INTERRUPTS();
  __asm volatile( "bkpt #0" );
 8001b7e:	be00      	bkpt	0x0000
  for (;;) {;}
 8001b80:	bf00      	nop
 8001b82:	e7fd      	b.n	8001b80 <vApplicationStackOverflowHook+0x24>

08001b84 <StepLibraryMalloc>:
//	return _write(2, pBuffer, num);
//}
/* USER CODE END 0 */
// Custom functions for stepper
static void* StepLibraryMalloc(unsigned int size)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  return pvPortMalloc(size); // Use FreeRTOS memory allocation
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f000 ff3b 	bl	8002a08 <pvPortMalloc>
 8001b92:	4603      	mov	r3, r0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <StepLibraryFree>:

static void StepLibraryFree(const void* const pMem)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  vPortFree((void*)pMem); // Use FreeRTOS memory deallocation
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f000 ff3d 	bl	8002a24 <vPortFree>
}
 8001baa:	bf00      	nop
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
	...

08001bb4 <StepDriverSpiTransfer>:

static int StepDriverSpiTransfer(void* pIO, char* pRX, const char* pTX, unsigned int length)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af02      	add	r7, sp, #8
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	607a      	str	r2, [r7, #4]
 8001bc0:	603b      	str	r3, [r7, #0]
  (void)pIO; // Unused in this implementation
  HAL_GPIO_WritePin(STEP_SPI_CS_GPIO_Port, STEP_SPI_CS_Pin, GPIO_PIN_RESET); // Select the SPI device
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001bc8:	4811      	ldr	r0, [pc, #68]	@ (8001c10 <StepDriverSpiTransfer+0x5c>)
 8001bca:	f001 ffa5 	bl	8003b18 <HAL_GPIO_WritePin>

  if (HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)pTX, (uint8_t*)pRX, length, HAL_MAX_DELAY) != HAL_OK)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8001bd6:	9200      	str	r2, [sp, #0]
 8001bd8:	68ba      	ldr	r2, [r7, #8]
 8001bda:	6879      	ldr	r1, [r7, #4]
 8001bdc:	480d      	ldr	r0, [pc, #52]	@ (8001c14 <StepDriverSpiTransfer+0x60>)
 8001bde:	f003 ffb3 	bl	8005b48 <HAL_SPI_TransmitReceive>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d008      	beq.n	8001bfa <StepDriverSpiTransfer+0x46>
  {
    HAL_GPIO_WritePin(STEP_SPI_CS_GPIO_Port, STEP_SPI_CS_Pin, GPIO_PIN_SET); // Deselect the SPI device
 8001be8:	2201      	movs	r2, #1
 8001bea:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001bee:	4808      	ldr	r0, [pc, #32]	@ (8001c10 <StepDriverSpiTransfer+0x5c>)
 8001bf0:	f001 ff92 	bl	8003b18 <HAL_GPIO_WritePin>
    return -1; // Error during SPI transfer
 8001bf4:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf8:	e006      	b.n	8001c08 <StepDriverSpiTransfer+0x54>
  }

  HAL_GPIO_WritePin(STEP_SPI_CS_GPIO_Port, STEP_SPI_CS_Pin, GPIO_PIN_SET); // Deselect the SPI device
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001c00:	4803      	ldr	r0, [pc, #12]	@ (8001c10 <StepDriverSpiTransfer+0x5c>)
 8001c02:	f001 ff89 	bl	8003b18 <HAL_GPIO_WritePin>
  return 0; // Success
 8001c06:	2300      	movs	r3, #0
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40020c00 	.word	0x40020c00
 8001c14:	200001f8 	.word	0x200001f8

08001c18 <StepDriverReset>:

static void StepDriverReset(void* pGPO, const int ena)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
  (void)pGPO; // Unused in this implementation
  HAL_GPIO_WritePin(STEP_RSTN_GPIO_Port, STEP_RSTN_Pin, ena ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	bf14      	ite	ne
 8001c28:	2301      	movne	r3, #1
 8001c2a:	2300      	moveq	r3, #0
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	461a      	mov	r2, r3
 8001c30:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c34:	4803      	ldr	r0, [pc, #12]	@ (8001c44 <StepDriverReset+0x2c>)
 8001c36:	f001 ff6f 	bl	8003b18 <HAL_GPIO_WritePin>
}
 8001c3a:	bf00      	nop
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	40021400 	.word	0x40021400

08001c48 <StepLibraryDelay>:

static void StepLibraryDelay(unsigned int ms)
{
 8001c48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c4c:	b082      	sub	sp, #8
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
  vTaskDelay(pdMS_TO_TICKS(ms)); // Delay using FreeRTOS
 8001c52:	6879      	ldr	r1, [r7, #4]
 8001c54:	2000      	movs	r0, #0
 8001c56:	460c      	mov	r4, r1
 8001c58:	4605      	mov	r5, r0
 8001c5a:	4620      	mov	r0, r4
 8001c5c:	4629      	mov	r1, r5
 8001c5e:	f04f 0a00 	mov.w	sl, #0
 8001c62:	f04f 0b00 	mov.w	fp, #0
 8001c66:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8001c6a:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8001c6e:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8001c72:	4650      	mov	r0, sl
 8001c74:	4659      	mov	r1, fp
 8001c76:	1b02      	subs	r2, r0, r4
 8001c78:	eb61 0305 	sbc.w	r3, r1, r5
 8001c7c:	f04f 0000 	mov.w	r0, #0
 8001c80:	f04f 0100 	mov.w	r1, #0
 8001c84:	0099      	lsls	r1, r3, #2
 8001c86:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001c8a:	0090      	lsls	r0, r2, #2
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	460b      	mov	r3, r1
 8001c90:	eb12 0804 	adds.w	r8, r2, r4
 8001c94:	eb43 0905 	adc.w	r9, r3, r5
 8001c98:	f04f 0200 	mov.w	r2, #0
 8001c9c:	f04f 0300 	mov.w	r3, #0
 8001ca0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ca4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ca8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cac:	4690      	mov	r8, r2
 8001cae:	4699      	mov	r9, r3
 8001cb0:	4640      	mov	r0, r8
 8001cb2:	4649      	mov	r1, r9
 8001cb4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001cb8:	f04f 0300 	mov.w	r3, #0
 8001cbc:	f7ff f804 	bl	8000cc8 <__aeabi_uldivmod>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f008 f91e 	bl	8009f08 <vTaskDelay>
}
 8001ccc:	bf00      	nop
 8001cce:	3708      	adds	r7, #8
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001cd8 <StepTimerAsync>:

static int StepTimerAsync(void* pPWM, int dir, unsigned int numPulses, void (*doneClb)(L6474_Handle_t), L6474_Handle_t h)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b088      	sub	sp, #32
 8001cdc:	af02      	add	r7, sp, #8
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
 8001ce4:	603b      	str	r3, [r7, #0]
  (void)pPWM; // Unused in this implementation
  (void)dir;  // Direction handling not implemented here
  (void)h;    // Handle unused in this implementation

  // Example implementation for asynchronous stepping
  TimerHandle_t timer = xTimerCreate("StepTimer", pdMS_TO_TICKS(1), pdTRUE, (void*)doneClb, (TimerCallbackFunction_t)doneClb);
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	9300      	str	r3, [sp, #0]
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	2201      	movs	r2, #1
 8001cee:	2101      	movs	r1, #1
 8001cf0:	4813      	ldr	r0, [pc, #76]	@ (8001d40 <StepTimerAsync+0x68>)
 8001cf2:	f009 faa9 	bl	800b248 <xTimerCreate>
 8001cf6:	6178      	str	r0, [r7, #20]
  if (timer == NULL)
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d102      	bne.n	8001d04 <StepTimerAsync+0x2c>
  {
    return -1; // Failed to create timer
 8001cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8001d02:	e018      	b.n	8001d36 <StepTimerAsync+0x5e>
  }

  if (xTimerStart(timer, 0) != pdPASS)
 8001d04:	f008 fafc 	bl	800a300 <xTaskGetTickCount>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	9300      	str	r3, [sp, #0]
 8001d0e:	2300      	movs	r3, #0
 8001d10:	2101      	movs	r1, #1
 8001d12:	6978      	ldr	r0, [r7, #20]
 8001d14:	f009 fafa 	bl	800b30c <xTimerGenericCommandFromTask>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d00a      	beq.n	8001d34 <StepTimerAsync+0x5c>
  {
    xTimerDelete(timer, 0); // Cleanup if start fails
 8001d1e:	2300      	movs	r3, #0
 8001d20:	9300      	str	r3, [sp, #0]
 8001d22:	2300      	movs	r3, #0
 8001d24:	2200      	movs	r2, #0
 8001d26:	2105      	movs	r1, #5
 8001d28:	6978      	ldr	r0, [r7, #20]
 8001d2a:	f009 faef 	bl	800b30c <xTimerGenericCommandFromTask>
    return -1; // Failed to start timer
 8001d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d32:	e000      	b.n	8001d36 <StepTimerAsync+0x5e>
  }

  return 0; // Success
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3718      	adds	r7, #24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	080106ec 	.word	0x080106ec

08001d44 <StepTimerCancelAsync>:

static int StepTimerCancelAsync(void* pPWM)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  (void)pPWM; // Unused in this implementation
  // Placeholder for canceling asynchronous step operation
  return 0; // Success
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
	...

08001d5c <StepperTask>:




void StepperTask(void *pvParameters)
  {
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b090      	sub	sp, #64	@ 0x40
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
      // Pass all function pointers required by the stepper library
      // to a separate platform abstraction structure
      L6474x_Platform_t p;
      p.malloc     = StepLibraryMalloc;
 8001d64:	4b38      	ldr	r3, [pc, #224]	@ (8001e48 <StepperTask+0xec>)
 8001d66:	613b      	str	r3, [r7, #16]
      p.free       = StepLibraryFree;
 8001d68:	4b38      	ldr	r3, [pc, #224]	@ (8001e4c <StepperTask+0xf0>)
 8001d6a:	617b      	str	r3, [r7, #20]
      p.transfer   = StepDriverSpiTransfer;
 8001d6c:	4b38      	ldr	r3, [pc, #224]	@ (8001e50 <StepperTask+0xf4>)
 8001d6e:	61bb      	str	r3, [r7, #24]
      p.reset      = StepDriverReset;
 8001d70:	4b38      	ldr	r3, [pc, #224]	@ (8001e54 <StepperTask+0xf8>)
 8001d72:	61fb      	str	r3, [r7, #28]
      p.sleep      = StepLibraryDelay;
 8001d74:	4b38      	ldr	r3, [pc, #224]	@ (8001e58 <StepperTask+0xfc>)
 8001d76:	623b      	str	r3, [r7, #32]
      p.stepAsync  = StepTimerAsync;
 8001d78:	4b38      	ldr	r3, [pc, #224]	@ (8001e5c <StepperTask+0x100>)
 8001d7a:	627b      	str	r3, [r7, #36]	@ 0x24
      p.cancelStep = StepTimerCancelAsync;
 8001d7c:	4b38      	ldr	r3, [pc, #224]	@ (8001e60 <StepperTask+0x104>)
 8001d7e:	62bb      	str	r3, [r7, #40]	@ 0x28

      // Define additional context pointers for the stepper driver
      void* pIO = NULL;  // Placeholder for SPI IO context, if needed
 8001d80:	2300      	movs	r3, #0
 8001d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
      void* pGPO = NULL; // Placeholder for GPIO context, if needed
 8001d84:	2300      	movs	r3, #0
 8001d86:	63bb      	str	r3, [r7, #56]	@ 0x38
      void* pPWM = NULL; // Placeholder for PWM context, if needed
 8001d88:	2300      	movs	r3, #0
 8001d8a:	637b      	str	r3, [r7, #52]	@ 0x34

      // Now create the handle
      L6474_Handle_t h = L6474_CreateInstance(&p, pIO, pGPO, pPWM);
 8001d8c:	f107 0010 	add.w	r0, r7, #16
 8001d90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d92:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001d94:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001d96:	f7ff fbc9 	bl	800152c <L6474_CreateInstance>
 8001d9a:	6338      	str	r0, [r7, #48]	@ 0x30

      if (h == NULL) {
 8001d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d105      	bne.n	8001dae <StepperTask+0x52>
          printf("Failed to create L6474 instance\r\n");
 8001da2:	4830      	ldr	r0, [pc, #192]	@ (8001e64 <StepperTask+0x108>)
 8001da4:	f00b ff0e 	bl	800dbc4 <puts>
          Error_Handler();
 8001da8:	f000 fbbd 	bl	8002526 <Error_Handler>
 8001dac:	e002      	b.n	8001db4 <StepperTask+0x58>
      } else {
          printf("Stepper motor instance created\r\n");
 8001dae:	482e      	ldr	r0, [pc, #184]	@ (8001e68 <StepperTask+0x10c>)
 8001db0:	f00b ff08 	bl	800dbc4 <puts>
      }
      
      int result = 0;
 8001db4:	2300      	movs	r3, #0
 8001db6:	62fb      	str	r3, [r7, #44]	@ 0x2c


      //create base parameter structure
      L6474_BaseParameter_t baseParam = {
 8001db8:	4a2c      	ldr	r2, [pc, #176]	@ (8001e6c <StepperTask+0x110>)
 8001dba:	f107 0308 	add.w	r3, r7, #8
 8001dbe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001dc2:	6018      	str	r0, [r3, #0]
 8001dc4:	3304      	adds	r3, #4
 8001dc6:	8019      	strh	r1, [r3, #0]
      };

      //L6474_BaseParameter_t baseParam = {0}; // Initialize base parameter structure

      // Set default base parameters
      result |= L6474_SetBaseParameter(&baseParam);
 8001dc8:	f107 0308 	add.w	r3, r7, #8
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff fc55 	bl	800167c <L6474_SetBaseParameter>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c

      // Initialize the driver with the base parameters
      result |= L6474_Initialize(h, &baseParam);
 8001dda:	f107 0308 	add.w	r3, r7, #8
 8001dde:	4619      	mov	r1, r3
 8001de0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001de2:	f7ff fc6e 	bl	80016c2 <L6474_Initialize>
 8001de6:	4602      	mov	r2, r0
 8001de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dea:	4313      	orrs	r3, r2
 8001dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      result |= L6474_SetPowerOutputs(h, 1);
 8001dee:	2101      	movs	r1, #1
 8001df0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001df2:	f7ff fdfc 	bl	80019ee <L6474_SetPowerOutputs>
 8001df6:	4602      	mov	r2, r0
 8001df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c

      // In case we have no error, we can enable the drivers
      // and then we step a bit
      if (result == 0)
 8001dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d113      	bne.n	8001e2c <StepperTask+0xd0>
      {
        result |= L6474_StepIncremental(h, 1000);
 8001e04:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001e08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001e0a:	f7ff fe31 	bl	8001a70 <L6474_StepIncremental>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e12:	4313      	orrs	r3, r2
 8001e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
        if (result == 0)
 8001e16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d103      	bne.n	8001e24 <StepperTask+0xc8>
        {
          printf("Stepper motor moved 1000 steps\r\n");
 8001e1c:	4814      	ldr	r0, [pc, #80]	@ (8001e70 <StepperTask+0x114>)
 8001e1e:	f00b fed1 	bl	800dbc4 <puts>
 8001e22:	e009      	b.n	8001e38 <StepperTask+0xdc>
        }
        else
        {
          printf("Error during step operation\r\n");
 8001e24:	4813      	ldr	r0, [pc, #76]	@ (8001e74 <StepperTask+0x118>)
 8001e26:	f00b fecd 	bl	800dbc4 <puts>
 8001e2a:	e005      	b.n	8001e38 <StepperTask+0xdc>
        }
      }
      else
      {
        // Error handling
        printf("Error during initialization: %d\r\n", result);
 8001e2c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001e2e:	4812      	ldr	r0, [pc, #72]	@ (8001e78 <StepperTask+0x11c>)
 8001e30:	f00b fe60 	bl	800daf4 <iprintf>
        Error_Handler();
 8001e34:	f000 fb77 	bl	8002526 <Error_Handler>
      }

      // Delete the task after initialization
      vTaskDelete(NULL);
 8001e38:	2000      	movs	r0, #0
 8001e3a:	f007 ffbb 	bl	8009db4 <vTaskDelete>

  }
 8001e3e:	bf00      	nop
 8001e40:	3740      	adds	r7, #64	@ 0x40
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	08001b85 	.word	0x08001b85
 8001e4c:	08001b9d 	.word	0x08001b9d
 8001e50:	08001bb5 	.word	0x08001bb5
 8001e54:	08001c19 	.word	0x08001c19
 8001e58:	08001c49 	.word	0x08001c49
 8001e5c:	08001cd9 	.word	0x08001cd9
 8001e60:	08001d45 	.word	0x08001d45
 8001e64:	080106f8 	.word	0x080106f8
 8001e68:	0801071c 	.word	0x0801071c
 8001e6c:	080107a0 	.word	0x080107a0
 8001e70:	0801073c 	.word	0x0801073c
 8001e74:	0801075c 	.word	0x0801075c
 8001e78:	0801077c 	.word	0x0801077c

08001e7c <main>:


int main(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */
  
  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001e82:	f000 fb11 	bl	80024a8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e86:	f000 ff8a 	bl	8002d9e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e8a:	f000 f82b 	bl	8001ee4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e8e:	f000 f97f 	bl	8002190 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001e92:	f000 f88d 	bl	8001fb0 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8001e96:	f000 f94b 	bl	8002130 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8001e9a:	f000 f8c7 	bl	800202c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */


  // Create the task
  if (xTaskCreate(StepperTask, "StepperTask", 256, NULL, tskIDLE_PRIORITY + 1, NULL) != pdPASS) {
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	9301      	str	r3, [sp, #4]
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	9300      	str	r3, [sp, #0]
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001eac:	4909      	ldr	r1, [pc, #36]	@ (8001ed4 <main+0x58>)
 8001eae:	480a      	ldr	r0, [pc, #40]	@ (8001ed8 <main+0x5c>)
 8001eb0:	f007 fe0e 	bl	8009ad0 <xTaskCreate>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d004      	beq.n	8001ec4 <main+0x48>
      printf("Failed to create StepperTask\r\n");
 8001eba:	4808      	ldr	r0, [pc, #32]	@ (8001edc <main+0x60>)
 8001ebc:	f00b fe82 	bl	800dbc4 <puts>
      Error_Handler();
 8001ec0:	f000 fb31 	bl	8002526 <Error_Handler>
  }

  printf("Hallo Welt\r\n");
 8001ec4:	4806      	ldr	r0, [pc, #24]	@ (8001ee0 <main+0x64>)
 8001ec6:	f00b fe7d 	bl	800dbc4 <puts>
  (void)CapabilityFunc;
  vTaskStartScheduler();
 8001eca:	f008 f8a5 	bl	800a018 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001ece:	bf00      	nop
 8001ed0:	e7fd      	b.n	8001ece <main+0x52>
 8001ed2:	bf00      	nop
 8001ed4:	080107a8 	.word	0x080107a8
 8001ed8:	08001d5d 	.word	0x08001d5d
 8001edc:	080107b4 	.word	0x080107b4
 8001ee0:	080107d4 	.word	0x080107d4

08001ee4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b094      	sub	sp, #80	@ 0x50
 8001ee8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001eea:	f107 0320 	add.w	r3, r7, #32
 8001eee:	2230      	movs	r2, #48	@ 0x30
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f00b ff68 	bl	800ddc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ef8:	f107 030c 	add.w	r3, r7, #12
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	609a      	str	r2, [r3, #8]
 8001f04:	60da      	str	r2, [r3, #12]
 8001f06:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f08:	4b27      	ldr	r3, [pc, #156]	@ (8001fa8 <SystemClock_Config+0xc4>)
 8001f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0c:	4a26      	ldr	r2, [pc, #152]	@ (8001fa8 <SystemClock_Config+0xc4>)
 8001f0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f12:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f14:	4b24      	ldr	r3, [pc, #144]	@ (8001fa8 <SystemClock_Config+0xc4>)
 8001f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f1c:	60bb      	str	r3, [r7, #8]
 8001f1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f20:	4b22      	ldr	r3, [pc, #136]	@ (8001fac <SystemClock_Config+0xc8>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a21      	ldr	r2, [pc, #132]	@ (8001fac <SystemClock_Config+0xc8>)
 8001f26:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001f2a:	6013      	str	r3, [r2, #0]
 8001f2c:	4b1f      	ldr	r3, [pc, #124]	@ (8001fac <SystemClock_Config+0xc8>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001f34:	607b      	str	r3, [r7, #4]
 8001f36:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f38:	2302      	movs	r3, #2
 8001f3a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f40:	2310      	movs	r3, #16
 8001f42:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f44:	2302      	movs	r3, #2
 8001f46:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001f4c:	2308      	movs	r3, #8
 8001f4e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001f50:	23b4      	movs	r3, #180	@ 0xb4
 8001f52:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f54:	2302      	movs	r3, #2
 8001f56:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001f58:	2302      	movs	r3, #2
 8001f5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f5c:	f107 0320 	add.w	r3, r7, #32
 8001f60:	4618      	mov	r0, r3
 8001f62:	f001 fe05 	bl	8003b70 <HAL_RCC_OscConfig>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001f6c:	f000 fadb 	bl	8002526 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f70:	230f      	movs	r3, #15
 8001f72:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f74:	2302      	movs	r3, #2
 8001f76:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f7c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001f80:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f82:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f86:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f88:	f107 030c 	add.w	r3, r7, #12
 8001f8c:	2105      	movs	r1, #5
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f002 f948 	bl	8004224 <HAL_RCC_ClockConfig>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001f9a:	f000 fac4 	bl	8002526 <Error_Handler>
  }
}
 8001f9e:	bf00      	nop
 8001fa0:	3750      	adds	r7, #80	@ 0x50
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40023800 	.word	0x40023800
 8001fac:	40007000 	.word	0x40007000

08001fb0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001fb4:	4b1b      	ldr	r3, [pc, #108]	@ (8002024 <MX_SPI1_Init+0x74>)
 8001fb6:	4a1c      	ldr	r2, [pc, #112]	@ (8002028 <MX_SPI1_Init+0x78>)
 8001fb8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001fba:	4b1a      	ldr	r3, [pc, #104]	@ (8002024 <MX_SPI1_Init+0x74>)
 8001fbc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001fc0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001fc2:	4b18      	ldr	r3, [pc, #96]	@ (8002024 <MX_SPI1_Init+0x74>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fc8:	4b16      	ldr	r3, [pc, #88]	@ (8002024 <MX_SPI1_Init+0x74>)
 8001fca:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001fce:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001fd0:	4b14      	ldr	r3, [pc, #80]	@ (8002024 <MX_SPI1_Init+0x74>)
 8001fd2:	2202      	movs	r2, #2
 8001fd4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001fd6:	4b13      	ldr	r3, [pc, #76]	@ (8002024 <MX_SPI1_Init+0x74>)
 8001fd8:	2201      	movs	r2, #1
 8001fda:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001fdc:	4b11      	ldr	r3, [pc, #68]	@ (8002024 <MX_SPI1_Init+0x74>)
 8001fde:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fe2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001fe4:	4b0f      	ldr	r3, [pc, #60]	@ (8002024 <MX_SPI1_Init+0x74>)
 8001fe6:	2220      	movs	r2, #32
 8001fe8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fea:	4b0e      	ldr	r3, [pc, #56]	@ (8002024 <MX_SPI1_Init+0x74>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ff0:	4b0c      	ldr	r3, [pc, #48]	@ (8002024 <MX_SPI1_Init+0x74>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ff6:	4b0b      	ldr	r3, [pc, #44]	@ (8002024 <MX_SPI1_Init+0x74>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001ffc:	4b09      	ldr	r3, [pc, #36]	@ (8002024 <MX_SPI1_Init+0x74>)
 8001ffe:	2207      	movs	r2, #7
 8002000:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002002:	4b08      	ldr	r3, [pc, #32]	@ (8002024 <MX_SPI1_Init+0x74>)
 8002004:	2200      	movs	r2, #0
 8002006:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002008:	4b06      	ldr	r3, [pc, #24]	@ (8002024 <MX_SPI1_Init+0x74>)
 800200a:	2200      	movs	r2, #0
 800200c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800200e:	4805      	ldr	r0, [pc, #20]	@ (8002024 <MX_SPI1_Init+0x74>)
 8002010:	f003 fb8e 	bl	8005730 <HAL_SPI_Init>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800201a:	f000 fa84 	bl	8002526 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800201e:	bf00      	nop
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	200001f8 	.word	0x200001f8
 8002028:	40013000 	.word	0x40013000

0800202c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b08e      	sub	sp, #56	@ 0x38
 8002030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002032:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	605a      	str	r2, [r3, #4]
 800203c:	609a      	str	r2, [r3, #8]
 800203e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002040:	f107 031c 	add.w	r3, r7, #28
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	605a      	str	r2, [r3, #4]
 800204a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800204c:	463b      	mov	r3, r7
 800204e:	2200      	movs	r2, #0
 8002050:	601a      	str	r2, [r3, #0]
 8002052:	605a      	str	r2, [r3, #4]
 8002054:	609a      	str	r2, [r3, #8]
 8002056:	60da      	str	r2, [r3, #12]
 8002058:	611a      	str	r2, [r3, #16]
 800205a:	615a      	str	r2, [r3, #20]
 800205c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800205e:	4b33      	ldr	r3, [pc, #204]	@ (800212c <MX_TIM2_Init+0x100>)
 8002060:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002064:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002066:	4b31      	ldr	r3, [pc, #196]	@ (800212c <MX_TIM2_Init+0x100>)
 8002068:	2200      	movs	r2, #0
 800206a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800206c:	4b2f      	ldr	r3, [pc, #188]	@ (800212c <MX_TIM2_Init+0x100>)
 800206e:	2200      	movs	r2, #0
 8002070:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4499;
 8002072:	4b2e      	ldr	r3, [pc, #184]	@ (800212c <MX_TIM2_Init+0x100>)
 8002074:	f241 1293 	movw	r2, #4499	@ 0x1193
 8002078:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800207a:	4b2c      	ldr	r3, [pc, #176]	@ (800212c <MX_TIM2_Init+0x100>)
 800207c:	2200      	movs	r2, #0
 800207e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002080:	4b2a      	ldr	r3, [pc, #168]	@ (800212c <MX_TIM2_Init+0x100>)
 8002082:	2200      	movs	r2, #0
 8002084:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002086:	4829      	ldr	r0, [pc, #164]	@ (800212c <MX_TIM2_Init+0x100>)
 8002088:	f004 fa34 	bl	80064f4 <HAL_TIM_Base_Init>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002092:	f000 fa48 	bl	8002526 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002096:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800209a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800209c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80020a0:	4619      	mov	r1, r3
 80020a2:	4822      	ldr	r0, [pc, #136]	@ (800212c <MX_TIM2_Init+0x100>)
 80020a4:	f004 fed8 	bl	8006e58 <HAL_TIM_ConfigClockSource>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80020ae:	f000 fa3a 	bl	8002526 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80020b2:	481e      	ldr	r0, [pc, #120]	@ (800212c <MX_TIM2_Init+0x100>)
 80020b4:	f004 fb3e 	bl	8006734 <HAL_TIM_PWM_Init>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80020be:	f000 fa32 	bl	8002526 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020c2:	2300      	movs	r3, #0
 80020c4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020c6:	2300      	movs	r3, #0
 80020c8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020ca:	f107 031c 	add.w	r3, r7, #28
 80020ce:	4619      	mov	r1, r3
 80020d0:	4816      	ldr	r0, [pc, #88]	@ (800212c <MX_TIM2_Init+0x100>)
 80020d2:	f005 fe41 	bl	8007d58 <HAL_TIMEx_MasterConfigSynchronization>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80020dc:	f000 fa23 	bl	8002526 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020e0:	2360      	movs	r3, #96	@ 0x60
 80020e2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80020e4:	2300      	movs	r3, #0
 80020e6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020e8:	2300      	movs	r3, #0
 80020ea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020ec:	2300      	movs	r3, #0
 80020ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80020f0:	463b      	mov	r3, r7
 80020f2:	2208      	movs	r2, #8
 80020f4:	4619      	mov	r1, r3
 80020f6:	480d      	ldr	r0, [pc, #52]	@ (800212c <MX_TIM2_Init+0x100>)
 80020f8:	f004 fc46 	bl	8006988 <HAL_TIM_PWM_ConfigChannel>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002102:	f000 fa10 	bl	8002526 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002106:	463b      	mov	r3, r7
 8002108:	220c      	movs	r2, #12
 800210a:	4619      	mov	r1, r3
 800210c:	4807      	ldr	r0, [pc, #28]	@ (800212c <MX_TIM2_Init+0x100>)
 800210e:	f004 fc3b 	bl	8006988 <HAL_TIM_PWM_ConfigChannel>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8002118:	f000 fa05 	bl	8002526 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800211c:	4803      	ldr	r0, [pc, #12]	@ (800212c <MX_TIM2_Init+0x100>)
 800211e:	f000 fd3f 	bl	8002ba0 <HAL_TIM_MspPostInit>

}
 8002122:	bf00      	nop
 8002124:	3738      	adds	r7, #56	@ 0x38
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	2000025c 	.word	0x2000025c

08002130 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002134:	4b14      	ldr	r3, [pc, #80]	@ (8002188 <MX_USART3_UART_Init+0x58>)
 8002136:	4a15      	ldr	r2, [pc, #84]	@ (800218c <MX_USART3_UART_Init+0x5c>)
 8002138:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800213a:	4b13      	ldr	r3, [pc, #76]	@ (8002188 <MX_USART3_UART_Init+0x58>)
 800213c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002140:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002142:	4b11      	ldr	r3, [pc, #68]	@ (8002188 <MX_USART3_UART_Init+0x58>)
 8002144:	2200      	movs	r2, #0
 8002146:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002148:	4b0f      	ldr	r3, [pc, #60]	@ (8002188 <MX_USART3_UART_Init+0x58>)
 800214a:	2200      	movs	r2, #0
 800214c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800214e:	4b0e      	ldr	r3, [pc, #56]	@ (8002188 <MX_USART3_UART_Init+0x58>)
 8002150:	2200      	movs	r2, #0
 8002152:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002154:	4b0c      	ldr	r3, [pc, #48]	@ (8002188 <MX_USART3_UART_Init+0x58>)
 8002156:	220c      	movs	r2, #12
 8002158:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800215a:	4b0b      	ldr	r3, [pc, #44]	@ (8002188 <MX_USART3_UART_Init+0x58>)
 800215c:	2200      	movs	r2, #0
 800215e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002160:	4b09      	ldr	r3, [pc, #36]	@ (8002188 <MX_USART3_UART_Init+0x58>)
 8002162:	2200      	movs	r2, #0
 8002164:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002166:	4b08      	ldr	r3, [pc, #32]	@ (8002188 <MX_USART3_UART_Init+0x58>)
 8002168:	2200      	movs	r2, #0
 800216a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800216c:	4b06      	ldr	r3, [pc, #24]	@ (8002188 <MX_USART3_UART_Init+0x58>)
 800216e:	2200      	movs	r2, #0
 8002170:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002172:	4805      	ldr	r0, [pc, #20]	@ (8002188 <MX_USART3_UART_Init+0x58>)
 8002174:	f005 ff48 	bl	8008008 <HAL_UART_Init>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800217e:	f000 f9d2 	bl	8002526 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002182:	bf00      	nop
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	200002a8 	.word	0x200002a8
 800218c:	40004800 	.word	0x40004800

08002190 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b08c      	sub	sp, #48	@ 0x30
 8002194:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002196:	f107 031c 	add.w	r3, r7, #28
 800219a:	2200      	movs	r2, #0
 800219c:	601a      	str	r2, [r3, #0]
 800219e:	605a      	str	r2, [r3, #4]
 80021a0:	609a      	str	r2, [r3, #8]
 80021a2:	60da      	str	r2, [r3, #12]
 80021a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021a6:	4b81      	ldr	r3, [pc, #516]	@ (80023ac <MX_GPIO_Init+0x21c>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021aa:	4a80      	ldr	r2, [pc, #512]	@ (80023ac <MX_GPIO_Init+0x21c>)
 80021ac:	f043 0304 	orr.w	r3, r3, #4
 80021b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80021b2:	4b7e      	ldr	r3, [pc, #504]	@ (80023ac <MX_GPIO_Init+0x21c>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b6:	f003 0304 	and.w	r3, r3, #4
 80021ba:	61bb      	str	r3, [r7, #24]
 80021bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021be:	4b7b      	ldr	r3, [pc, #492]	@ (80023ac <MX_GPIO_Init+0x21c>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c2:	4a7a      	ldr	r2, [pc, #488]	@ (80023ac <MX_GPIO_Init+0x21c>)
 80021c4:	f043 0301 	orr.w	r3, r3, #1
 80021c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80021ca:	4b78      	ldr	r3, [pc, #480]	@ (80023ac <MX_GPIO_Init+0x21c>)
 80021cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	617b      	str	r3, [r7, #20]
 80021d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021d6:	4b75      	ldr	r3, [pc, #468]	@ (80023ac <MX_GPIO_Init+0x21c>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021da:	4a74      	ldr	r2, [pc, #464]	@ (80023ac <MX_GPIO_Init+0x21c>)
 80021dc:	f043 0302 	orr.w	r3, r3, #2
 80021e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80021e2:	4b72      	ldr	r3, [pc, #456]	@ (80023ac <MX_GPIO_Init+0x21c>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	613b      	str	r3, [r7, #16]
 80021ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80021ee:	4b6f      	ldr	r3, [pc, #444]	@ (80023ac <MX_GPIO_Init+0x21c>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f2:	4a6e      	ldr	r2, [pc, #440]	@ (80023ac <MX_GPIO_Init+0x21c>)
 80021f4:	f043 0320 	orr.w	r3, r3, #32
 80021f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80021fa:	4b6c      	ldr	r3, [pc, #432]	@ (80023ac <MX_GPIO_Init+0x21c>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fe:	f003 0320 	and.w	r3, r3, #32
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002206:	4b69      	ldr	r3, [pc, #420]	@ (80023ac <MX_GPIO_Init+0x21c>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220a:	4a68      	ldr	r2, [pc, #416]	@ (80023ac <MX_GPIO_Init+0x21c>)
 800220c:	f043 0310 	orr.w	r3, r3, #16
 8002210:	6313      	str	r3, [r2, #48]	@ 0x30
 8002212:	4b66      	ldr	r3, [pc, #408]	@ (80023ac <MX_GPIO_Init+0x21c>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002216:	f003 0310 	and.w	r3, r3, #16
 800221a:	60bb      	str	r3, [r7, #8]
 800221c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800221e:	4b63      	ldr	r3, [pc, #396]	@ (80023ac <MX_GPIO_Init+0x21c>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002222:	4a62      	ldr	r2, [pc, #392]	@ (80023ac <MX_GPIO_Init+0x21c>)
 8002224:	f043 0308 	orr.w	r3, r3, #8
 8002228:	6313      	str	r3, [r2, #48]	@ 0x30
 800222a:	4b60      	ldr	r3, [pc, #384]	@ (80023ac <MX_GPIO_Init+0x21c>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800222e:	f003 0308 	and.w	r3, r3, #8
 8002232:	607b      	str	r3, [r7, #4]
 8002234:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8002236:	2200      	movs	r2, #0
 8002238:	f244 0181 	movw	r1, #16513	@ 0x4081
 800223c:	485c      	ldr	r0, [pc, #368]	@ (80023b0 <MX_GPIO_Init+0x220>)
 800223e:	f001 fc6b 	bl	8003b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, STEP_RSTN_Pin|STEP_DIR_Pin, GPIO_PIN_RESET);
 8002242:	2200      	movs	r2, #0
 8002244:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8002248:	485a      	ldr	r0, [pc, #360]	@ (80023b4 <MX_GPIO_Init+0x224>)
 800224a:	f001 fc65 	bl	8003b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPINDLE_ENA_L_Pin|SPINDLE_ENA_R_Pin, GPIO_PIN_RESET);
 800224e:	2200      	movs	r2, #0
 8002250:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8002254:	4858      	ldr	r0, [pc, #352]	@ (80023b8 <MX_GPIO_Init+0x228>)
 8002256:	f001 fc5f 	bl	8003b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STEP_SPI_CS_GPIO_Port, STEP_SPI_CS_Pin, GPIO_PIN_SET);
 800225a:	2201      	movs	r2, #1
 800225c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002260:	4856      	ldr	r0, [pc, #344]	@ (80023bc <MX_GPIO_Init+0x22c>)
 8002262:	f001 fc59 	bl	8003b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STEP_PULSE_GPIO_Port, STEP_PULSE_Pin, GPIO_PIN_RESET);
 8002266:	2200      	movs	r2, #0
 8002268:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800226c:	4853      	ldr	r0, [pc, #332]	@ (80023bc <MX_GPIO_Init+0x22c>)
 800226e:	f001 fc53 	bl	8003b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USR_BUTTON_Pin */
  GPIO_InitStruct.Pin = USR_BUTTON_Pin;
 8002272:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002276:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002278:	2300      	movs	r3, #0
 800227a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227c:	2300      	movs	r3, #0
 800227e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USR_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002280:	f107 031c 	add.w	r3, r7, #28
 8002284:	4619      	mov	r1, r3
 8002286:	484e      	ldr	r0, [pc, #312]	@ (80023c0 <MX_GPIO_Init+0x230>)
 8002288:	f001 f8d6 	bl	8003438 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPINDLE_SI_R_Pin */
  GPIO_InitStruct.Pin = SPINDLE_SI_R_Pin;
 800228c:	2301      	movs	r3, #1
 800228e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002290:	2300      	movs	r3, #0
 8002292:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002294:	2300      	movs	r3, #0
 8002296:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SPINDLE_SI_R_GPIO_Port, &GPIO_InitStruct);
 8002298:	f107 031c 	add.w	r3, r7, #28
 800229c:	4619      	mov	r1, r3
 800229e:	4849      	ldr	r0, [pc, #292]	@ (80023c4 <MX_GPIO_Init+0x234>)
 80022a0:	f001 f8ca 	bl	8003438 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin;
 80022a4:	f244 0381 	movw	r3, #16513	@ 0x4081
 80022a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022aa:	2301      	movs	r3, #1
 80022ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ae:	2300      	movs	r3, #0
 80022b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b2:	2300      	movs	r3, #0
 80022b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022b6:	f107 031c 	add.w	r3, r7, #28
 80022ba:	4619      	mov	r1, r3
 80022bc:	483c      	ldr	r0, [pc, #240]	@ (80023b0 <MX_GPIO_Init+0x220>)
 80022be:	f001 f8bb 	bl	8003438 <HAL_GPIO_Init>

  /*Configure GPIO pin : STEP_RSTN_Pin */
  GPIO_InitStruct.Pin = STEP_RSTN_Pin;
 80022c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022c8:	2301      	movs	r3, #1
 80022ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022cc:	2300      	movs	r3, #0
 80022ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d0:	2300      	movs	r3, #0
 80022d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(STEP_RSTN_GPIO_Port, &GPIO_InitStruct);
 80022d4:	f107 031c 	add.w	r3, r7, #28
 80022d8:	4619      	mov	r1, r3
 80022da:	4836      	ldr	r0, [pc, #216]	@ (80023b4 <MX_GPIO_Init+0x224>)
 80022dc:	f001 f8ac 	bl	8003438 <HAL_GPIO_Init>

  /*Configure GPIO pin : STEP_DIR_Pin */
  GPIO_InitStruct.Pin = STEP_DIR_Pin;
 80022e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022e6:	2301      	movs	r3, #1
 80022e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ea:	2300      	movs	r3, #0
 80022ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ee:	2303      	movs	r3, #3
 80022f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(STEP_DIR_GPIO_Port, &GPIO_InitStruct);
 80022f2:	f107 031c 	add.w	r3, r7, #28
 80022f6:	4619      	mov	r1, r3
 80022f8:	482e      	ldr	r0, [pc, #184]	@ (80023b4 <MX_GPIO_Init+0x224>)
 80022fa:	f001 f89d 	bl	8003438 <HAL_GPIO_Init>

  /*Configure GPIO pin : STEP_FLAG_Pin */
  GPIO_InitStruct.Pin = STEP_FLAG_Pin;
 80022fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002302:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002304:	2300      	movs	r3, #0
 8002306:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002308:	2301      	movs	r3, #1
 800230a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(STEP_FLAG_GPIO_Port, &GPIO_InitStruct);
 800230c:	f107 031c 	add.w	r3, r7, #28
 8002310:	4619      	mov	r1, r3
 8002312:	4828      	ldr	r0, [pc, #160]	@ (80023b4 <MX_GPIO_Init+0x224>)
 8002314:	f001 f890 	bl	8003438 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPINDLE_ENA_L_Pin SPINDLE_ENA_R_Pin */
  GPIO_InitStruct.Pin = SPINDLE_ENA_L_Pin|SPINDLE_ENA_R_Pin;
 8002318:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800231c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800231e:	2301      	movs	r3, #1
 8002320:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002322:	2300      	movs	r3, #0
 8002324:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002326:	2300      	movs	r3, #0
 8002328:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800232a:	f107 031c 	add.w	r3, r7, #28
 800232e:	4619      	mov	r1, r3
 8002330:	4821      	ldr	r0, [pc, #132]	@ (80023b8 <MX_GPIO_Init+0x228>)
 8002332:	f001 f881 	bl	8003438 <HAL_GPIO_Init>

  /*Configure GPIO pin : STEP_SPI_CS_Pin */
  GPIO_InitStruct.Pin = STEP_SPI_CS_Pin;
 8002336:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800233a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800233c:	2301      	movs	r3, #1
 800233e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002340:	2300      	movs	r3, #0
 8002342:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002344:	2303      	movs	r3, #3
 8002346:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(STEP_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8002348:	f107 031c 	add.w	r3, r7, #28
 800234c:	4619      	mov	r1, r3
 800234e:	481b      	ldr	r0, [pc, #108]	@ (80023bc <MX_GPIO_Init+0x22c>)
 8002350:	f001 f872 	bl	8003438 <HAL_GPIO_Init>

  /*Configure GPIO pin : STEP_PULSE_Pin */
  GPIO_InitStruct.Pin = STEP_PULSE_Pin;
 8002354:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002358:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800235a:	2301      	movs	r3, #1
 800235c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235e:	2300      	movs	r3, #0
 8002360:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002362:	2300      	movs	r3, #0
 8002364:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(STEP_PULSE_GPIO_Port, &GPIO_InitStruct);
 8002366:	f107 031c 	add.w	r3, r7, #28
 800236a:	4619      	mov	r1, r3
 800236c:	4813      	ldr	r0, [pc, #76]	@ (80023bc <MX_GPIO_Init+0x22c>)
 800236e:	f001 f863 	bl	8003438 <HAL_GPIO_Init>

  /*Configure GPIO pins : REFERENCE_MARK_Pin LIMIT_SWITCH_Pin */
  GPIO_InitStruct.Pin = REFERENCE_MARK_Pin|LIMIT_SWITCH_Pin;
 8002372:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002376:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002378:	2300      	movs	r3, #0
 800237a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237c:	2300      	movs	r3, #0
 800237e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002380:	f107 031c 	add.w	r3, r7, #28
 8002384:	4619      	mov	r1, r3
 8002386:	480a      	ldr	r0, [pc, #40]	@ (80023b0 <MX_GPIO_Init+0x220>)
 8002388:	f001 f856 	bl	8003438 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPINDLE_SI_L_Pin */
  GPIO_InitStruct.Pin = SPINDLE_SI_L_Pin;
 800238c:	2301      	movs	r3, #1
 800238e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002390:	2300      	movs	r3, #0
 8002392:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002394:	2300      	movs	r3, #0
 8002396:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SPINDLE_SI_L_GPIO_Port, &GPIO_InitStruct);
 8002398:	f107 031c 	add.w	r3, r7, #28
 800239c:	4619      	mov	r1, r3
 800239e:	4806      	ldr	r0, [pc, #24]	@ (80023b8 <MX_GPIO_Init+0x228>)
 80023a0:	f001 f84a 	bl	8003438 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80023a4:	bf00      	nop
 80023a6:	3730      	adds	r7, #48	@ 0x30
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	40023800 	.word	0x40023800
 80023b0:	40020400 	.word	0x40020400
 80023b4:	40021400 	.word	0x40021400
 80023b8:	40021000 	.word	0x40021000
 80023bc:	40020c00 	.word	0x40020c00
 80023c0:	40020800 	.word	0x40020800
 80023c4:	40020000 	.word	0x40020000

080023c8 <vAssertCalled>:

/* USER CODE BEGIN 4 */
void vAssertCalled( const char * const pcFileName, unsigned long ulLine )
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
volatile uint32_t ulSetToNonZeroInDebuggerToContinue = 0;
 80023d2:	2300      	movs	r3, #0
 80023d4:	60fb      	str	r3, [r7, #12]

    /* Parameters are not used. */
    ( void ) ulLine;
    ( void ) pcFileName;

    taskENTER_CRITICAL();
 80023d6:	f009 fbc3 	bl	800bb60 <vPortEnterCritical>
    {
        /* You can step out of this function to debug the assertion by using
        the debugger to set ulSetToNonZeroInDebuggerToContinue to a non-zero
        value. */
        while( ulSetToNonZeroInDebuggerToContinue == 0 )
 80023da:	bf00      	nop
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d0fc      	beq.n	80023dc <vAssertCalled+0x14>
        {
        }
    }
    taskEXIT_CRITICAL();
 80023e2:	f009 fbf5 	bl	800bbd0 <vPortExitCritical>
}
 80023e6:	bf00      	nop
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
	...

080023f0 <__stdout_put_char>:

int __stdout_put_char(int ch)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
	uint8_t val = ch;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	73fb      	strb	r3, [r7, #15]
	while((huart3.Instance->ISR & UART_FLAG_TXE) == 0);
 80023fc:	bf00      	nop
 80023fe:	4b0d      	ldr	r3, [pc, #52]	@ (8002434 <__stdout_put_char+0x44>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	69db      	ldr	r3, [r3, #28]
 8002404:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002408:	2b00      	cmp	r3, #0
 800240a:	d0f8      	beq.n	80023fe <__stdout_put_char+0xe>
	huart3.Instance->TDR = val;
 800240c:	4b09      	ldr	r3, [pc, #36]	@ (8002434 <__stdout_put_char+0x44>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	7bfa      	ldrb	r2, [r7, #15]
 8002412:	629a      	str	r2, [r3, #40]	@ 0x28
	while((huart3.Instance->ISR & UART_FLAG_TC) == 0);
 8002414:	bf00      	nop
 8002416:	4b07      	ldr	r3, [pc, #28]	@ (8002434 <__stdout_put_char+0x44>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	69db      	ldr	r3, [r3, #28]
 800241c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002420:	2b00      	cmp	r3, #0
 8002422:	d0f8      	beq.n	8002416 <__stdout_put_char+0x26>
	return 0;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3714      	adds	r7, #20
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	200002a8 	.word	0x200002a8

08002438 <__stdin_get_char>:

int __stdin_get_char(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
	if (huart3.Instance->ISR & UART_FLAG_ORE)
 800243c:	4b19      	ldr	r3, [pc, #100]	@ (80024a4 <__stdin_get_char+0x6c>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	f003 0308 	and.w	r3, r3, #8
 8002446:	2b00      	cmp	r3, #0
 8002448:	d003      	beq.n	8002452 <__stdin_get_char+0x1a>
		huart3.Instance->ICR = UART_CLEAR_OREF;
 800244a:	4b16      	ldr	r3, [pc, #88]	@ (80024a4 <__stdin_get_char+0x6c>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2208      	movs	r2, #8
 8002450:	621a      	str	r2, [r3, #32]

	if (huart3.Instance->ISR & UART_FLAG_NE)
 8002452:	4b14      	ldr	r3, [pc, #80]	@ (80024a4 <__stdin_get_char+0x6c>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	69db      	ldr	r3, [r3, #28]
 8002458:	f003 0304 	and.w	r3, r3, #4
 800245c:	2b00      	cmp	r3, #0
 800245e:	d003      	beq.n	8002468 <__stdin_get_char+0x30>
		huart3.Instance->ICR = UART_CLEAR_NEF;
 8002460:	4b10      	ldr	r3, [pc, #64]	@ (80024a4 <__stdin_get_char+0x6c>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2204      	movs	r2, #4
 8002466:	621a      	str	r2, [r3, #32]

	if (huart3.Instance->ISR & UART_FLAG_FE)
 8002468:	4b0e      	ldr	r3, [pc, #56]	@ (80024a4 <__stdin_get_char+0x6c>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <__stdin_get_char+0x46>
		huart3.Instance->ICR = UART_CLEAR_FEF;
 8002476:	4b0b      	ldr	r3, [pc, #44]	@ (80024a4 <__stdin_get_char+0x6c>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2202      	movs	r2, #2
 800247c:	621a      	str	r2, [r3, #32]

	if ((huart3.Instance->ISR & UART_FLAG_RXNE) == 0) return -1;
 800247e:	4b09      	ldr	r3, [pc, #36]	@ (80024a4 <__stdin_get_char+0x6c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	69db      	ldr	r3, [r3, #28]
 8002484:	f003 0320 	and.w	r3, r3, #32
 8002488:	2b00      	cmp	r3, #0
 800248a:	d102      	bne.n	8002492 <__stdin_get_char+0x5a>
 800248c:	f04f 33ff 	mov.w	r3, #4294967295
 8002490:	e002      	b.n	8002498 <__stdin_get_char+0x60>
	return huart3.Instance->RDR;
 8002492:	4b04      	ldr	r3, [pc, #16]	@ (80024a4 <__stdin_get_char+0x6c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8002498:	4618      	mov	r0, r3
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	200002a8 	.word	0x200002a8

080024a8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80024ae:	463b      	mov	r3, r7
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	605a      	str	r2, [r3, #4]
 80024b6:	609a      	str	r2, [r3, #8]
 80024b8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80024ba:	f000 fe0d 	bl	80030d8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80024be:	2301      	movs	r3, #1
 80024c0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80024c2:	2300      	movs	r3, #0
 80024c4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80024c6:	2300      	movs	r3, #0
 80024c8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 80024ca:	230d      	movs	r3, #13
 80024cc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80024ce:	2300      	movs	r3, #0
 80024d0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80024d2:	2300      	movs	r3, #0
 80024d4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RO_URO;
 80024d6:	2306      	movs	r3, #6
 80024d8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80024da:	2300      	movs	r3, #0
 80024dc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80024de:	2300      	movs	r3, #0
 80024e0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80024e2:	2300      	movs	r3, #0
 80024e4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80024e6:	2300      	movs	r3, #0
 80024e8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80024ea:	463b      	mov	r3, r7
 80024ec:	4618      	mov	r0, r3
 80024ee:	f000 fe2b 	bl	8003148 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80024f2:	2301      	movs	r3, #1
 80024f4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x60000000;
 80024f6:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 80024fa:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80024fc:	231f      	movs	r3, #31
 80024fe:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8002500:	2387      	movs	r3, #135	@ 0x87
 8002502:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8002504:	2300      	movs	r3, #0
 8002506:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8002508:	2301      	movs	r3, #1
 800250a:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800250c:	2301      	movs	r3, #1
 800250e:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002510:	463b      	mov	r3, r7
 8002512:	4618      	mov	r0, r3
 8002514:	f000 fe18 	bl	8003148 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002518:	2004      	movs	r0, #4
 800251a:	f000 fdf5 	bl	8003108 <HAL_MPU_Enable>

}
 800251e:	bf00      	nop
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002526:	b480      	push	{r7}
 8002528:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800252a:	b672      	cpsid	i
}
 800252c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800252e:	bf00      	nop
 8002530:	e7fd      	b.n	800252e <Error_Handler+0x8>
	...

08002534 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	portENTER_CRITICAL();
 800253e:	f009 fb0f 	bl	800bb60 <vPortEnterCritical>

	printf("HAL_ASSERT: %s:::%u\r\n", (char*)file, (unsigned int)line);
 8002542:	683a      	ldr	r2, [r7, #0]
 8002544:	6879      	ldr	r1, [r7, #4]
 8002546:	4805      	ldr	r0, [pc, #20]	@ (800255c <assert_failed+0x28>)
 8002548:	f00b fad4 	bl	800daf4 <iprintf>
	assert(0);
 800254c:	4b04      	ldr	r3, [pc, #16]	@ (8002560 <assert_failed+0x2c>)
 800254e:	4a05      	ldr	r2, [pc, #20]	@ (8002564 <assert_failed+0x30>)
 8002550:	f44f 713b 	mov.w	r1, #748	@ 0x2ec
 8002554:	4804      	ldr	r0, [pc, #16]	@ (8002568 <assert_failed+0x34>)
 8002556:	f009 fbf3 	bl	800bd40 <__assert_func>
 800255a:	bf00      	nop
 800255c:	080107e0 	.word	0x080107e0
 8002560:	080107f8 	.word	0x080107f8
 8002564:	08010f64 	.word	0x08010f64
 8002568:	080107fc 	.word	0x080107fc

0800256c <initialise_monitor_handles>:
 * is called. afterwards main would be called.
 */
// ----------------------------------------------------------------------------
void initialise_monitor_handles( void )
// ----------------------------------------------------------------------------
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0

}
 8002570:	bf00      	nop
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
	...

0800257c <initialise_stdlib_abstraction>:
 */
// ----------------------------------------------------------------------------
__attribute__((constructor))
void initialise_stdlib_abstraction( void )
// ----------------------------------------------------------------------------
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
    initialise_monitor_handles();
 8002580:	f7ff fff4 	bl	800256c <initialise_monitor_handles>

#if defined(INC_FREERTOS_H) && defined(MV_SYSCALL_USE_EXCLUSIVE_LOCK_FOR_STDOUT)
    stdioSemaphore = xSemaphoreCreateRecursiveMutex();
 8002584:	2004      	movs	r0, #4
 8002586:	f006 fd5a 	bl	800903e <xQueueCreateMutex>
 800258a:	4603      	mov	r3, r0
 800258c:	4a15      	ldr	r2, [pc, #84]	@ (80025e4 <initialise_stdlib_abstraction+0x68>)
 800258e:	6013      	str	r3, [r2, #0]

    if ( stdioSemaphore == 0 )
 8002590:	4b14      	ldr	r3, [pc, #80]	@ (80025e4 <initialise_stdlib_abstraction+0x68>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d104      	bne.n	80025a2 <initialise_stdlib_abstraction+0x26>
    {
        vAssertCalled( __FILE__, __LINE__ );
 8002598:	f240 110b 	movw	r1, #267	@ 0x10b
 800259c:	4812      	ldr	r0, [pc, #72]	@ (80025e8 <initialise_stdlib_abstraction+0x6c>)
 800259e:	f7ff ff13 	bl	80023c8 <vAssertCalled>
    }
#endif
#if defined(INC_FREERTOS_H) && defined(MV_SYSCALL_USE_EXCLUSIVE_LOCK_FOR_MALLOC)
    mallocSemaphore = xSemaphoreCreateRecursiveMutex();
 80025a2:	2004      	movs	r0, #4
 80025a4:	f006 fd4b 	bl	800903e <xQueueCreateMutex>
 80025a8:	4603      	mov	r3, r0
 80025aa:	4a10      	ldr	r2, [pc, #64]	@ (80025ec <initialise_stdlib_abstraction+0x70>)
 80025ac:	6013      	str	r3, [r2, #0]

    if ( mallocSemaphore == 0 )
 80025ae:	4b0f      	ldr	r3, [pc, #60]	@ (80025ec <initialise_stdlib_abstraction+0x70>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d104      	bne.n	80025c0 <initialise_stdlib_abstraction+0x44>
    {
        vAssertCalled( __FILE__, __LINE__ );
 80025b6:	f240 1113 	movw	r1, #275	@ 0x113
 80025ba:	480b      	ldr	r0, [pc, #44]	@ (80025e8 <initialise_stdlib_abstraction+0x6c>)
 80025bc:	f7ff ff04 	bl	80023c8 <vAssertCalled>
    }
#endif
#if defined(INC_FREERTOS_H) && defined(MV_SYSCALL_USE_EXCLUSIVE_LOCK_FOR_ENV)
    envSemaphore = xSemaphoreCreateRecursiveMutex();
 80025c0:	2004      	movs	r0, #4
 80025c2:	f006 fd3c 	bl	800903e <xQueueCreateMutex>
 80025c6:	4603      	mov	r3, r0
 80025c8:	4a09      	ldr	r2, [pc, #36]	@ (80025f0 <initialise_stdlib_abstraction+0x74>)
 80025ca:	6013      	str	r3, [r2, #0]

    if ( envSemaphore == 0 )
 80025cc:	4b08      	ldr	r3, [pc, #32]	@ (80025f0 <initialise_stdlib_abstraction+0x74>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d104      	bne.n	80025de <initialise_stdlib_abstraction+0x62>
    {
        vAssertCalled( __FILE__, __LINE__ );
 80025d4:	f240 111b 	movw	r1, #283	@ 0x11b
 80025d8:	4803      	ldr	r0, [pc, #12]	@ (80025e8 <initialise_stdlib_abstraction+0x6c>)
 80025da:	f7ff fef5 	bl	80023c8 <vAssertCalled>
    }
#endif
}
 80025de:	bf00      	nop
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	20000330 	.word	0x20000330
 80025e8:	080108d4 	.word	0x080108d4
 80025ec:	20000334 	.word	0x20000334
 80025f0:	20000338 	.word	0x20000338

080025f4 <_getpid>:
 * "machine mode"
 */
// ----------------------------------------------------------------------------
int _getpid( void )
// ----------------------------------------------------------------------------
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
    return 1;
 80025f8:	2301      	movs	r3, #1
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <_kill>:
 * process with PID 1
 */
// ----------------------------------------------------------------------------
int _kill( int pid, int sig )
// ----------------------------------------------------------------------------
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
    ( void )pid;
    ( void )sig;

    if ( _impure_ptr != 0 )
 800260e:	4b09      	ldr	r3, [pc, #36]	@ (8002634 <_kill+0x30>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d003      	beq.n	800261e <_kill+0x1a>
    {
        _impure_ptr->_errno = EINVAL;
 8002616:	4b07      	ldr	r3, [pc, #28]	@ (8002634 <_kill+0x30>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2216      	movs	r2, #22
 800261c:	601a      	str	r2, [r3, #0]
    }
    errno = EINVAL;
 800261e:	f00b fc95 	bl	800df4c <__errno>
 8002622:	4603      	mov	r3, r0
 8002624:	2216      	movs	r2, #22
 8002626:	601a      	str	r2, [r3, #0]
    return -1;
 8002628:	f04f 33ff 	mov.w	r3, #4294967295
}
 800262c:	4618      	mov	r0, r3
 800262e:	3708      	adds	r7, #8
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	2000018c 	.word	0x2000018c

08002638 <_exit>:
 */
// ----------------------------------------------------------------------------
__attribute__( ( noreturn ) )
void _exit ( int status )
// ----------------------------------------------------------------------------
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
    _kill( status, -1 );
 8002640:	f04f 31ff 	mov.w	r1, #4294967295
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f7ff ffdd 	bl	8002604 <_kill>
    while ( 1 ) {}
 800264a:	bf00      	nop
 800264c:	e7fd      	b.n	800264a <_exit+0x12>
	...

08002650 <_read>:
 * An example can be seen in altera board support packages with the "dev" struct
 */
// ----------------------------------------------------------------------------
int _read( int file, char* ptr, int len )
// ----------------------------------------------------------------------------
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b088      	sub	sp, #32
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
    ( void )file;

    int DataIdx;
    int resLen = 0;
 800265c:	2300      	movs	r3, #0
 800265e:	61bb      	str	r3, [r7, #24]

    if ( file == STDIN_FILENO )
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d121      	bne.n	80026aa <_read+0x5a>
    {
        for ( DataIdx = 0; DataIdx < len; )
 8002666:	2300      	movs	r3, #0
 8002668:	61fb      	str	r3, [r7, #28]
 800266a:	e019      	b.n	80026a0 <_read+0x50>
        {
            int result = __stdin_get_char();
 800266c:	f7ff fee4 	bl	8002438 <__stdin_get_char>
 8002670:	6178      	str	r0, [r7, #20]
            if ( result == EOF )
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002678:	d106      	bne.n	8002688 <_read+0x38>
            {
                if ( resLen == 0 )
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d124      	bne.n	80026ca <_read+0x7a>
                {
                    resLen = EOF;
 8002680:	f04f 33ff 	mov.w	r3, #4294967295
 8002684:	61bb      	str	r3, [r7, #24]
                }
                break;
 8002686:	e020      	b.n	80026ca <_read+0x7a>
            }

            *ptr++ = ( char )result;
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	1c5a      	adds	r2, r3, #1
 800268c:	60ba      	str	r2, [r7, #8]
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	b2d2      	uxtb	r2, r2
 8002692:	701a      	strb	r2, [r3, #0]
            resLen++;
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	3301      	adds	r3, #1
 8002698:	61bb      	str	r3, [r7, #24]
            DataIdx++;
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	3301      	adds	r3, #1
 800269e:	61fb      	str	r3, [r7, #28]
        for ( DataIdx = 0; DataIdx < len; )
 80026a0:	69fa      	ldr	r2, [r7, #28]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	dbe1      	blt.n	800266c <_read+0x1c>
 80026a8:	e010      	b.n	80026cc <_read+0x7c>

        }
    }
    else
    {
        if ( _impure_ptr != 0 )
 80026aa:	4b0b      	ldr	r3, [pc, #44]	@ (80026d8 <_read+0x88>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d003      	beq.n	80026ba <_read+0x6a>
        {
            _impure_ptr->_errno = EBADF;
 80026b2:	4b09      	ldr	r3, [pc, #36]	@ (80026d8 <_read+0x88>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2209      	movs	r2, #9
 80026b8:	601a      	str	r2, [r3, #0]
        }
        errno = EBADF;
 80026ba:	f00b fc47 	bl	800df4c <__errno>
 80026be:	4603      	mov	r3, r0
 80026c0:	2209      	movs	r2, #9
 80026c2:	601a      	str	r2, [r3, #0]
        return -1;
 80026c4:	f04f 33ff 	mov.w	r3, #4294967295
 80026c8:	e001      	b.n	80026ce <_read+0x7e>
                break;
 80026ca:	bf00      	nop
    }

    return resLen;
 80026cc:	69bb      	ldr	r3, [r7, #24]
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3720      	adds	r7, #32
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	2000018c 	.word	0x2000018c

080026dc <_write>:
 * An example can be seen in altera board support packages with the "dev" struct
 */
// ----------------------------------------------------------------------------
int _write( int file, char* ptr, int len )
// ----------------------------------------------------------------------------
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b086      	sub	sp, #24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	607a      	str	r2, [r7, #4]
    ( void )file;

    int DataIdx, locked = 0;
 80026e8:	2300      	movs	r3, #0
 80026ea:	613b      	str	r3, [r7, #16]

    if ( file == STDOUT_FILENO || file == STDERR_FILENO )
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d002      	beq.n	80026f8 <_write+0x1c>
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d149      	bne.n	800278c <_write+0xb0>
    {

#if  defined(INC_FREERTOS_H) && defined(MV_SYSCALL_USE_EXCLUSIVE_LOCK_FOR_STDOUT)
        if ( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80026f8:	f008 fa96 	bl	800ac28 <xTaskGetSchedulerState>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d108      	bne.n	8002714 <_write+0x38>
        {
            xSemaphoreTakeRecursive( stdioSemaphore, -1 );
 8002702:	4b2c      	ldr	r3, [pc, #176]	@ (80027b4 <_write+0xd8>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f04f 31ff 	mov.w	r1, #4294967295
 800270a:	4618      	mov	r0, r3
 800270c:	f006 fcec 	bl	80090e8 <xQueueTakeMutexRecursive>
            locked = 1;
 8002710:	2301      	movs	r3, #1
 8002712:	613b      	str	r3, [r7, #16]
        }
#endif

        if (file == STDERR_FILENO)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2b02      	cmp	r3, #2
 8002718:	d10e      	bne.n	8002738 <_write+0x5c>
        {
        	__stdout_put_char('\033');
 800271a:	201b      	movs	r0, #27
 800271c:	f7ff fe68 	bl	80023f0 <__stdout_put_char>
        	__stdout_put_char('[');
 8002720:	205b      	movs	r0, #91	@ 0x5b
 8002722:	f7ff fe65 	bl	80023f0 <__stdout_put_char>
        	__stdout_put_char('3');
 8002726:	2033      	movs	r0, #51	@ 0x33
 8002728:	f7ff fe62 	bl	80023f0 <__stdout_put_char>
        	__stdout_put_char('1');
 800272c:	2031      	movs	r0, #49	@ 0x31
 800272e:	f7ff fe5f 	bl	80023f0 <__stdout_put_char>
        	__stdout_put_char('m');
 8002732:	206d      	movs	r0, #109	@ 0x6d
 8002734:	f7ff fe5c 	bl	80023f0 <__stdout_put_char>
        }
        for ( DataIdx = 0; DataIdx < len; DataIdx++ )
 8002738:	2300      	movs	r3, #0
 800273a:	617b      	str	r3, [r7, #20]
 800273c:	e009      	b.n	8002752 <_write+0x76>
        {
            __stdout_put_char( ptr[DataIdx] );
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	68ba      	ldr	r2, [r7, #8]
 8002742:	4413      	add	r3, r2
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	4618      	mov	r0, r3
 8002748:	f7ff fe52 	bl	80023f0 <__stdout_put_char>
        for ( DataIdx = 0; DataIdx < len; DataIdx++ )
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	3301      	adds	r3, #1
 8002750:	617b      	str	r3, [r7, #20]
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	429a      	cmp	r2, r3
 8002758:	dbf1      	blt.n	800273e <_write+0x62>
        }
        if (file == STDERR_FILENO)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2b02      	cmp	r3, #2
 800275e:	d10b      	bne.n	8002778 <_write+0x9c>
        {
        	__stdout_put_char('\033');
 8002760:	201b      	movs	r0, #27
 8002762:	f7ff fe45 	bl	80023f0 <__stdout_put_char>
        	__stdout_put_char('[');
 8002766:	205b      	movs	r0, #91	@ 0x5b
 8002768:	f7ff fe42 	bl	80023f0 <__stdout_put_char>
        	__stdout_put_char('0');
 800276c:	2030      	movs	r0, #48	@ 0x30
 800276e:	f7ff fe3f 	bl	80023f0 <__stdout_put_char>
        	__stdout_put_char('m');
 8002772:	206d      	movs	r0, #109	@ 0x6d
 8002774:	f7ff fe3c 	bl	80023f0 <__stdout_put_char>
        }

#if defined(INC_FREERTOS_H) && defined(MV_SYSCALL_USE_EXCLUSIVE_LOCK_FOR_STDOUT)
        if ( locked )
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d004      	beq.n	8002788 <_write+0xac>
        {
            xSemaphoreGiveRecursive( stdioSemaphore );
 800277e:	4b0d      	ldr	r3, [pc, #52]	@ (80027b4 <_write+0xd8>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4618      	mov	r0, r3
 8002784:	f006 fc74 	bl	8009070 <xQueueGiveMutexRecursive>
        }
#endif

        return len;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	e00e      	b.n	80027aa <_write+0xce>
    }
    else
    {
        if ( _impure_ptr != 0 )
 800278c:	4b0a      	ldr	r3, [pc, #40]	@ (80027b8 <_write+0xdc>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d003      	beq.n	800279c <_write+0xc0>
        {
            _impure_ptr->_errno = EBADF;
 8002794:	4b08      	ldr	r3, [pc, #32]	@ (80027b8 <_write+0xdc>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2209      	movs	r2, #9
 800279a:	601a      	str	r2, [r3, #0]
        }
        errno = EBADF;
 800279c:	f00b fbd6 	bl	800df4c <__errno>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2209      	movs	r2, #9
 80027a4:	601a      	str	r2, [r3, #0]
        return -1;
 80027a6:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3718      	adds	r7, #24
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	20000330 	.word	0x20000330
 80027b8:	2000018c 	.word	0x2000018c

080027bc <_close>:
 * An example can be seen in altera board support packages with the "dev" struct
 */
// ----------------------------------------------------------------------------
int _close( int file )
// ----------------------------------------------------------------------------
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
    ( void )file;

    return -1;
 80027c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <_fstat>:
 * An example can be seen in altera board support packages with the "dev" struct
 */
// ----------------------------------------------------------------------------
int _fstat( int file, struct stat* st )
// ----------------------------------------------------------------------------
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
    st->st_dev    = file;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	b21a      	sxth	r2, r3
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	801a      	strh	r2, [r3, #0]
    st->st_size   = 0;
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	2200      	movs	r2, #0
 80027ea:	611a      	str	r2, [r3, #16]
    st->st_blocks = 0;
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	2200      	movs	r2, #0
 80027f0:	64da      	str	r2, [r3, #76]	@ 0x4c

    if ( file >= 1 && file <= 3 )
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	dd08      	ble.n	800280a <_fstat+0x36>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2b03      	cmp	r3, #3
 80027fc:	dc05      	bgt.n	800280a <_fstat+0x36>
    {
        st->st_mode = S_IFCHR;
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002804:	605a      	str	r2, [r3, #4]
        return 0;
 8002806:	2300      	movs	r3, #0
 8002808:	e005      	b.n	8002816 <_fstat+0x42>
    }
    else
    {
        st->st_mode = S_IFREG;
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002810:	605a      	str	r2, [r3, #4]
        return -1;
 8002812:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8002816:	4618      	mov	r0, r3
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr

08002822 <_isatty>:
 * An example can be seen in altera board support packages with the "dev" struct
 */
// ----------------------------------------------------------------------------
int _isatty( int file )
// ----------------------------------------------------------------------------
{
 8002822:	b480      	push	{r7}
 8002824:	b083      	sub	sp, #12
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
    // is stdin, stdout or stderror
    if ( file >= 0 && file <= 2 )
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2b00      	cmp	r3, #0
 800282e:	db04      	blt.n	800283a <_isatty+0x18>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b02      	cmp	r3, #2
 8002834:	dc01      	bgt.n	800283a <_isatty+0x18>
    {
        return file;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	e000      	b.n	800283c <_isatty+0x1a>
    }
    return 0;
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <_lseek>:

// ----------------------------------------------------------------------------
int _lseek( int file, int ptr, int dir )
// ----------------------------------------------------------------------------
{
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
    ( void )file;
    ( void )ptr;
    ( void )dir;

    return 0;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3714      	adds	r7, #20
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
	...

08002864 <_sbrk_r>:
static UBaseType_t malLock_uxSavedInterruptStatus;

// ----------------------------------------------------------------------------
void* _sbrk_r( struct _reent* pReent, int incr )
// ----------------------------------------------------------------------------
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b088      	sub	sp, #32
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
    ( void )pReent;
    ( void )incr;
    register char* stack_ptr asm( "sp" );

    // make sure to calculate the correct heap size and bytes remaining at the first call!
    if( TotalHeapSize == 0 )
 800286e:	4b37      	ldr	r3, [pc, #220]	@ (800294c <_sbrk_r+0xe8>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d113      	bne.n	800289e <_sbrk_r+0x3a>
    {
        TotalHeapSize = heapBytesRemaining = stickyHeapBytesRemaining
                                             = ( int )( ( &__HeapLimit ) - ( &__HeapBase ) )
 8002876:	4a36      	ldr	r2, [pc, #216]	@ (8002950 <_sbrk_r+0xec>)
 8002878:	4b36      	ldr	r3, [pc, #216]	@ (8002954 <_sbrk_r+0xf0>)
 800287a:	1ad3      	subs	r3, r2, r3
#ifdef configISR_STACK_SIZE_WORDS
                                               - ( configISR_STACK_SIZE_WORDS * 4 )
 800287c:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8002880:	461a      	mov	r2, r3
                                             = ( int )( ( &__HeapLimit ) - ( &__HeapBase ) )
 8002882:	4b35      	ldr	r3, [pc, #212]	@ (8002958 <_sbrk_r+0xf4>)
 8002884:	601a      	str	r2, [r3, #0]
 8002886:	4a32      	ldr	r2, [pc, #200]	@ (8002950 <_sbrk_r+0xec>)
 8002888:	4b32      	ldr	r3, [pc, #200]	@ (8002954 <_sbrk_r+0xf0>)
 800288a:	1ad3      	subs	r3, r2, r3
                                               - ( configISR_STACK_SIZE_WORDS * 4 )
 800288c:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
        TotalHeapSize = heapBytesRemaining = stickyHeapBytesRemaining
 8002890:	4a32      	ldr	r2, [pc, #200]	@ (800295c <_sbrk_r+0xf8>)
 8002892:	6013      	str	r3, [r2, #0]
 8002894:	4b31      	ldr	r3, [pc, #196]	@ (800295c <_sbrk_r+0xf8>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	461a      	mov	r2, r3
 800289a:	4b2c      	ldr	r3, [pc, #176]	@ (800294c <_sbrk_r+0xe8>)
 800289c:	601a      	str	r2, [r3, #0]
#endif
                                               ;
    };
    static char* currentHeapEnd = &__HeapBase;
    char* limit = ( xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED ) ?
 800289e:	f008 f9c3 	bl	800ac28 <xTaskGetSchedulerState>
 80028a2:	4603      	mov	r3, r0
                  stack_ptr   :  // Before scheduler is started, limit is stack pointer (risky!)
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d101      	bne.n	80028ac <_sbrk_r+0x48>
 80028a8:	466b      	mov	r3, sp
 80028aa:	e000      	b.n	80028ae <_sbrk_r+0x4a>
 80028ac:	4b2c      	ldr	r3, [pc, #176]	@ (8002960 <_sbrk_r+0xfc>)
    char* limit = ( xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED ) ?
 80028ae:	61fb      	str	r3, [r7, #28]
    __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80028b0:	f3ef 8305 	mrs	r3, IPSR
 80028b4:	613b      	str	r3, [r7, #16]
    if( ulCurrentInterrupt == 0 )
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d102      	bne.n	80028c2 <_sbrk_r+0x5e>
        xReturn = pdFALSE;
 80028bc:	2300      	movs	r3, #0
 80028be:	60fb      	str	r3, [r7, #12]
 80028c0:	e001      	b.n	80028c6 <_sbrk_r+0x62>
        xReturn = pdTRUE;
 80028c2:	2301      	movs	r3, #1
 80028c4:	60fb      	str	r3, [r7, #12]
    return xReturn;
 80028c6:	68fb      	ldr	r3, [r7, #12]
                  &__HeapLimit
#ifdef configISR_STACK_SIZE_WORDS
                  - ( configISR_STACK_SIZE_WORDS * 4 )
#endif
                  ; // Once running, OK to reuse all remaining RAM except ISR stack (MSP) stack
    DRN_ENTER_CRITICAL_SECTION( malLock_uxSavedInterruptStatus );
 80028c8:	61bb      	str	r3, [r7, #24]
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d010      	beq.n	80028f2 <_sbrk_r+0x8e>
    __asm volatile
 80028d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028d4:	b672      	cpsid	i
 80028d6:	f383 8811 	msr	BASEPRI, r3
 80028da:	f3bf 8f6f 	isb	sy
 80028de:	f3bf 8f4f 	dsb	sy
 80028e2:	b662      	cpsie	i
 80028e4:	60bb      	str	r3, [r7, #8]
}
 80028e6:	bf00      	nop
 80028e8:	f240 21c1 	movw	r1, #705	@ 0x2c1
 80028ec:	481d      	ldr	r0, [pc, #116]	@ (8002964 <_sbrk_r+0x100>)
 80028ee:	f7ff fd6b 	bl	80023c8 <vAssertCalled>
    if ( currentHeapEnd + incr > limit )
 80028f2:	4b1d      	ldr	r3, [pc, #116]	@ (8002968 <_sbrk_r+0x104>)
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	4413      	add	r3, r2
 80028fa:	69fa      	ldr	r2, [r7, #28]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d204      	bcs.n	800290a <_sbrk_r+0xa6>
        // Ooops, no more memory available...
#if( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            extern void vApplicationMallocFailedHook( void );
            DRN_EXIT_CRITICAL_SECTION( malLock_uxSavedInterruptStatus );
            vApplicationMallocFailedHook();
 8002900:	f7ff f91a 	bl	8001b38 <vApplicationMallocFailedHook>
#else
        // Default, if you prefer to believe your application will gracefully trap out-of-memory...
        pReent->_errno = ENOMEM; // newlib's thread-specific errno
        DRN_EXIT_CRITICAL_SECTION( malLock_uxSavedInterruptStatus );
#endif
        return ( char* ) -1; // the malloc-family routine that called sbrk will return 0
 8002904:	f04f 33ff 	mov.w	r3, #4294967295
 8002908:	e01b      	b.n	8002942 <_sbrk_r+0xde>
    }

    char* previousHeapEnd = currentHeapEnd;
 800290a:	4b17      	ldr	r3, [pc, #92]	@ (8002968 <_sbrk_r+0x104>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	617b      	str	r3, [r7, #20]
    currentHeapEnd += incr;
 8002910:	4b15      	ldr	r3, [pc, #84]	@ (8002968 <_sbrk_r+0x104>)
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	4413      	add	r3, r2
 8002918:	4a13      	ldr	r2, [pc, #76]	@ (8002968 <_sbrk_r+0x104>)
 800291a:	6013      	str	r3, [r2, #0]
    heapBytesRemaining -= incr;
 800291c:	4b0f      	ldr	r3, [pc, #60]	@ (800295c <_sbrk_r+0xf8>)
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	4a0d      	ldr	r2, [pc, #52]	@ (800295c <_sbrk_r+0xf8>)
 8002926:	6013      	str	r3, [r2, #0]

    // implement the statistical feature to provide the minimum free heap size feature
    // of FreeRTOS statistics
    if ( stickyHeapBytesRemaining > xPortGetFreeHeapSize() )
 8002928:	f000 f888 	bl	8002a3c <xPortGetFreeHeapSize>
 800292c:	4602      	mov	r2, r0
 800292e:	4b0a      	ldr	r3, [pc, #40]	@ (8002958 <_sbrk_r+0xf4>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	429a      	cmp	r2, r3
 8002934:	d204      	bcs.n	8002940 <_sbrk_r+0xdc>
    {
        stickyHeapBytesRemaining = xPortGetFreeHeapSize();
 8002936:	f000 f881 	bl	8002a3c <xPortGetFreeHeapSize>
 800293a:	4603      	mov	r3, r0
 800293c:	4a06      	ldr	r2, [pc, #24]	@ (8002958 <_sbrk_r+0xf4>)
 800293e:	6013      	str	r3, [r2, #0]
    }

    DRN_EXIT_CRITICAL_SECTION( malLock_uxSavedInterruptStatus );
    return ( char* ) previousHeapEnd;
 8002940:	697b      	ldr	r3, [r7, #20]
}
 8002942:	4618      	mov	r0, r3
 8002944:	3720      	adds	r7, #32
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	20000344 	.word	0x20000344
 8002950:	20050000 	.word	0x20050000
 8002954:	20000640 	.word	0x20000640
 8002958:	20000340 	.word	0x20000340
 800295c:	2000033c 	.word	0x2000033c
 8002960:	2004c000 	.word	0x2004c000
 8002964:	080108d4 	.word	0x080108d4
 8002968:	20000000 	.word	0x20000000

0800296c <__malloc_lock>:
}

// ----------------------------------------------------------------------------
__attribute__( ( weak ) ) void __malloc_lock( struct _reent* r )
// ----------------------------------------------------------------------------
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b086      	sub	sp, #24
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
    ( void )r;

#if  defined(INC_FREERTOS_H) && defined(MV_SYSCALL_USE_EXCLUSIVE_LOCK_FOR_MALLOC)
    if ( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING  )
 8002974:	f008 f958 	bl	800ac28 <xTaskGetSchedulerState>
 8002978:	4603      	mov	r3, r0
 800297a:	2b02      	cmp	r3, #2
 800297c:	d106      	bne.n	800298c <__malloc_lock+0x20>
    {
        xSemaphoreTakeRecursive( mallocSemaphore, -1 );
 800297e:	4b16      	ldr	r3, [pc, #88]	@ (80029d8 <__malloc_lock+0x6c>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f04f 31ff 	mov.w	r1, #4294967295
 8002986:	4618      	mov	r0, r3
 8002988:	f006 fbae 	bl	80090e8 <xQueueTakeMutexRecursive>
    __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800298c:	f3ef 8305 	mrs	r3, IPSR
 8002990:	613b      	str	r3, [r7, #16]
    if( ulCurrentInterrupt == 0 )
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d102      	bne.n	800299e <__malloc_lock+0x32>
        xReturn = pdFALSE;
 8002998:	2300      	movs	r3, #0
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	e001      	b.n	80029a2 <__malloc_lock+0x36>
        xReturn = pdTRUE;
 800299e:	2301      	movs	r3, #1
 80029a0:	60fb      	str	r3, [r7, #12]
    return xReturn;
 80029a2:	68fb      	ldr	r3, [r7, #12]
    }
#endif

    DRN_ENTER_CRITICAL_SECTION( malLock_uxSavedInterruptStatus );
 80029a4:	617b      	str	r3, [r7, #20]
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d010      	beq.n	80029ce <__malloc_lock+0x62>
    __asm volatile
 80029ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029b0:	b672      	cpsid	i
 80029b2:	f383 8811 	msr	BASEPRI, r3
 80029b6:	f3bf 8f6f 	isb	sy
 80029ba:	f3bf 8f4f 	dsb	sy
 80029be:	b662      	cpsie	i
 80029c0:	60bb      	str	r3, [r7, #8]
}
 80029c2:	bf00      	nop
 80029c4:	f44f 7142 	mov.w	r1, #776	@ 0x308
 80029c8:	4804      	ldr	r0, [pc, #16]	@ (80029dc <__malloc_lock+0x70>)
 80029ca:	f7ff fcfd 	bl	80023c8 <vAssertCalled>
}
 80029ce:	bf00      	nop
 80029d0:	3718      	adds	r7, #24
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	20000334 	.word	0x20000334
 80029dc:	080108d4 	.word	0x080108d4

080029e0 <__malloc_unlock>:

// ----------------------------------------------------------------------------
__attribute__( ( weak ) ) void __malloc_unlock( struct _reent* r )
// ----------------------------------------------------------------------------
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
    ( void )r;

#if  defined(INC_FREERTOS_H) && defined(MV_SYSCALL_USE_EXCLUSIVE_LOCK_FOR_MALLOC)
    if ( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80029e8:	f008 f91e 	bl	800ac28 <xTaskGetSchedulerState>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d104      	bne.n	80029fc <__malloc_unlock+0x1c>
    {
        xSemaphoreGiveRecursive( mallocSemaphore );
 80029f2:	4b04      	ldr	r3, [pc, #16]	@ (8002a04 <__malloc_unlock+0x24>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f006 fb3a 	bl	8009070 <xQueueGiveMutexRecursive>
    }
#endif

    DRN_EXIT_CRITICAL_SECTION( malLock_uxSavedInterruptStatus );
}
 80029fc:	bf00      	nop
 80029fe:	3708      	adds	r7, #8
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	20000334 	.word	0x20000334

08002a08 <pvPortMalloc>:
}

// ----------------------------------------------------------------------------
void* pvPortMalloc( size_t xSize )
// ----------------------------------------------------------------------------
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
    void* p = malloc( xSize );
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f009 f9c7 	bl	800bda4 <malloc>
 8002a16:	4603      	mov	r3, r0
 8002a18:	60fb      	str	r3, [r7, #12]
    return p;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <vPortFree>:

// ----------------------------------------------------------------------------
void vPortFree( void* pv )
// ----------------------------------------------------------------------------
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
    free( pv );
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f009 f9c1 	bl	800bdb4 <free>
}
 8002a32:	bf00      	nop
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
	...

08002a3c <xPortGetFreeHeapSize>:

// ----------------------------------------------------------------------------
size_t xPortGetFreeHeapSize( void )
// ----------------------------------------------------------------------------
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b08c      	sub	sp, #48	@ 0x30
 8002a40:	af00      	add	r7, sp, #0
	static int lockGuard = 0;
	if ( lockGuard != 0 ) return stickyHeapBytesRemaining;
 8002a42:	4b0d      	ldr	r3, [pc, #52]	@ (8002a78 <xPortGetFreeHeapSize+0x3c>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d002      	beq.n	8002a50 <xPortGetFreeHeapSize+0x14>
 8002a4a:	4b0c      	ldr	r3, [pc, #48]	@ (8002a7c <xPortGetFreeHeapSize+0x40>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	e00f      	b.n	8002a70 <xPortGetFreeHeapSize+0x34>
	lockGuard = 1;
 8002a50:	4b09      	ldr	r3, [pc, #36]	@ (8002a78 <xPortGetFreeHeapSize+0x3c>)
 8002a52:	2201      	movs	r2, #1
 8002a54:	601a      	str	r2, [r3, #0]
    struct mallinfo mi = mallinfo();
 8002a56:	1d3b      	adds	r3, r7, #4
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f009 fa55 	bl	800bf08 <mallinfo>
    size_t result = mi.fordblks + heapBytesRemaining;
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a60:	4a07      	ldr	r2, [pc, #28]	@ (8002a80 <xPortGetFreeHeapSize+0x44>)
 8002a62:	6812      	ldr	r2, [r2, #0]
 8002a64:	4413      	add	r3, r2
 8002a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    lockGuard = 0;
 8002a68:	4b03      	ldr	r3, [pc, #12]	@ (8002a78 <xPortGetFreeHeapSize+0x3c>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	601a      	str	r2, [r3, #0]
    return result;
 8002a6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3730      	adds	r7, #48	@ 0x30
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	20000348 	.word	0x20000348
 8002a7c:	20000340 	.word	0x20000340
 8002a80:	2000033c 	.word	0x2000033c

08002a84 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002a8a:	4b0f      	ldr	r3, [pc, #60]	@ (8002ac8 <HAL_MspInit+0x44>)
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8e:	4a0e      	ldr	r2, [pc, #56]	@ (8002ac8 <HAL_MspInit+0x44>)
 8002a90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a94:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a96:	4b0c      	ldr	r3, [pc, #48]	@ (8002ac8 <HAL_MspInit+0x44>)
 8002a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a9e:	607b      	str	r3, [r7, #4]
 8002aa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aa2:	4b09      	ldr	r3, [pc, #36]	@ (8002ac8 <HAL_MspInit+0x44>)
 8002aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aa6:	4a08      	ldr	r2, [pc, #32]	@ (8002ac8 <HAL_MspInit+0x44>)
 8002aa8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002aac:	6453      	str	r3, [r2, #68]	@ 0x44
 8002aae:	4b06      	ldr	r3, [pc, #24]	@ (8002ac8 <HAL_MspInit+0x44>)
 8002ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ab2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ab6:	603b      	str	r3, [r7, #0]
 8002ab8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002aba:	bf00      	nop
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	40023800 	.word	0x40023800

08002acc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b08a      	sub	sp, #40	@ 0x28
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ad4:	f107 0314 	add.w	r3, r7, #20
 8002ad8:	2200      	movs	r2, #0
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	605a      	str	r2, [r3, #4]
 8002ade:	609a      	str	r2, [r3, #8]
 8002ae0:	60da      	str	r2, [r3, #12]
 8002ae2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a1b      	ldr	r2, [pc, #108]	@ (8002b58 <HAL_SPI_MspInit+0x8c>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d12f      	bne.n	8002b4e <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002aee:	4b1b      	ldr	r3, [pc, #108]	@ (8002b5c <HAL_SPI_MspInit+0x90>)
 8002af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002af2:	4a1a      	ldr	r2, [pc, #104]	@ (8002b5c <HAL_SPI_MspInit+0x90>)
 8002af4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002af8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002afa:	4b18      	ldr	r3, [pc, #96]	@ (8002b5c <HAL_SPI_MspInit+0x90>)
 8002afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002afe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b02:	613b      	str	r3, [r7, #16]
 8002b04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b06:	4b15      	ldr	r3, [pc, #84]	@ (8002b5c <HAL_SPI_MspInit+0x90>)
 8002b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b0a:	4a14      	ldr	r2, [pc, #80]	@ (8002b5c <HAL_SPI_MspInit+0x90>)
 8002b0c:	f043 0301 	orr.w	r3, r3, #1
 8002b10:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b12:	4b12      	ldr	r3, [pc, #72]	@ (8002b5c <HAL_SPI_MspInit+0x90>)
 8002b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = STEP_SPI_SCK_Pin|STEP_SPI_MISO_Pin|STEP_SPI_MOSI_Pin;
 8002b1e:	23e0      	movs	r3, #224	@ 0xe0
 8002b20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b22:	2302      	movs	r3, #2
 8002b24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b26:	2300      	movs	r3, #0
 8002b28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b2e:	2305      	movs	r3, #5
 8002b30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b32:	f107 0314 	add.w	r3, r7, #20
 8002b36:	4619      	mov	r1, r3
 8002b38:	4809      	ldr	r0, [pc, #36]	@ (8002b60 <HAL_SPI_MspInit+0x94>)
 8002b3a:	f000 fc7d 	bl	8003438 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8002b3e:	2200      	movs	r2, #0
 8002b40:	2105      	movs	r1, #5
 8002b42:	2023      	movs	r0, #35	@ 0x23
 8002b44:	f000 fa78 	bl	8003038 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002b48:	2023      	movs	r0, #35	@ 0x23
 8002b4a:	f000 faa1 	bl	8003090 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002b4e:	bf00      	nop
 8002b50:	3728      	adds	r7, #40	@ 0x28
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	40013000 	.word	0x40013000
 8002b5c:	40023800 	.word	0x40023800
 8002b60:	40020000 	.word	0x40020000

08002b64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b085      	sub	sp, #20
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b74:	d10b      	bne.n	8002b8e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b76:	4b09      	ldr	r3, [pc, #36]	@ (8002b9c <HAL_TIM_Base_MspInit+0x38>)
 8002b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7a:	4a08      	ldr	r2, [pc, #32]	@ (8002b9c <HAL_TIM_Base_MspInit+0x38>)
 8002b7c:	f043 0301 	orr.w	r3, r3, #1
 8002b80:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b82:	4b06      	ldr	r3, [pc, #24]	@ (8002b9c <HAL_TIM_Base_MspInit+0x38>)
 8002b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	60fb      	str	r3, [r7, #12]
 8002b8c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002b8e:	bf00      	nop
 8002b90:	3714      	adds	r7, #20
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	40023800 	.word	0x40023800

08002ba0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b088      	sub	sp, #32
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ba8:	f107 030c 	add.w	r3, r7, #12
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]
 8002bb0:	605a      	str	r2, [r3, #4]
 8002bb2:	609a      	str	r2, [r3, #8]
 8002bb4:	60da      	str	r2, [r3, #12]
 8002bb6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bc0:	d11c      	bne.n	8002bfc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bc2:	4b10      	ldr	r3, [pc, #64]	@ (8002c04 <HAL_TIM_MspPostInit+0x64>)
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc6:	4a0f      	ldr	r2, [pc, #60]	@ (8002c04 <HAL_TIM_MspPostInit+0x64>)
 8002bc8:	f043 0302 	orr.w	r3, r3, #2
 8002bcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bce:	4b0d      	ldr	r3, [pc, #52]	@ (8002c04 <HAL_TIM_MspPostInit+0x64>)
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	60bb      	str	r3, [r7, #8]
 8002bd8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = SPINDLE_PWM_L_Pin|SPINDLE_PWM_R_Pin;
 8002bda:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002bde:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be0:	2302      	movs	r3, #2
 8002be2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be4:	2300      	movs	r3, #0
 8002be6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be8:	2300      	movs	r3, #0
 8002bea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002bec:	2301      	movs	r3, #1
 8002bee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bf0:	f107 030c 	add.w	r3, r7, #12
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	4804      	ldr	r0, [pc, #16]	@ (8002c08 <HAL_TIM_MspPostInit+0x68>)
 8002bf8:	f000 fc1e 	bl	8003438 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002bfc:	bf00      	nop
 8002bfe:	3720      	adds	r7, #32
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	40023800 	.word	0x40023800
 8002c08:	40020400 	.word	0x40020400

08002c0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b0aa      	sub	sp, #168	@ 0xa8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c14:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	605a      	str	r2, [r3, #4]
 8002c1e:	609a      	str	r2, [r3, #8]
 8002c20:	60da      	str	r2, [r3, #12]
 8002c22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c24:	f107 0310 	add.w	r3, r7, #16
 8002c28:	2284      	movs	r2, #132	@ 0x84
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f00b f8cb 	bl	800ddc8 <memset>
  if(huart->Instance==USART3)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a22      	ldr	r2, [pc, #136]	@ (8002cc0 <HAL_UART_MspInit+0xb4>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d13c      	bne.n	8002cb6 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002c3c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c40:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002c42:	2300      	movs	r3, #0
 8002c44:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c46:	f107 0310 	add.w	r3, r7, #16
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f001 fd8c 	bl	8004768 <HAL_RCCEx_PeriphCLKConfig>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002c56:	f7ff fc66 	bl	8002526 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002c5a:	4b1a      	ldr	r3, [pc, #104]	@ (8002cc4 <HAL_UART_MspInit+0xb8>)
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c5e:	4a19      	ldr	r2, [pc, #100]	@ (8002cc4 <HAL_UART_MspInit+0xb8>)
 8002c60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c64:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c66:	4b17      	ldr	r3, [pc, #92]	@ (8002cc4 <HAL_UART_MspInit+0xb8>)
 8002c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c6e:	60fb      	str	r3, [r7, #12]
 8002c70:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c72:	4b14      	ldr	r3, [pc, #80]	@ (8002cc4 <HAL_UART_MspInit+0xb8>)
 8002c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c76:	4a13      	ldr	r2, [pc, #76]	@ (8002cc4 <HAL_UART_MspInit+0xb8>)
 8002c78:	f043 0308 	orr.w	r3, r3, #8
 8002c7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c7e:	4b11      	ldr	r3, [pc, #68]	@ (8002cc4 <HAL_UART_MspInit+0xb8>)
 8002c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c82:	f003 0308 	and.w	r3, r3, #8
 8002c86:	60bb      	str	r3, [r7, #8]
 8002c88:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = DEBUG_UART_TX_Pin|DEBUG_UART_RX_Pin;
 8002c8a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002c8e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c92:	2302      	movs	r3, #2
 8002c94:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002ca4:	2307      	movs	r3, #7
 8002ca6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002caa:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002cae:	4619      	mov	r1, r3
 8002cb0:	4805      	ldr	r0, [pc, #20]	@ (8002cc8 <HAL_UART_MspInit+0xbc>)
 8002cb2:	f000 fbc1 	bl	8003438 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8002cb6:	bf00      	nop
 8002cb8:	37a8      	adds	r7, #168	@ 0xa8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	40004800 	.word	0x40004800
 8002cc4:	40023800 	.word	0x40023800
 8002cc8:	40020c00 	.word	0x40020c00

08002ccc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002cd0:	bf00      	nop
 8002cd2:	e7fd      	b.n	8002cd0 <NMI_Handler+0x4>

08002cd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cd8:	bf00      	nop
 8002cda:	e7fd      	b.n	8002cd8 <HardFault_Handler+0x4>

08002cdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ce0:	bf00      	nop
 8002ce2:	e7fd      	b.n	8002ce0 <MemManage_Handler+0x4>

08002ce4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ce8:	bf00      	nop
 8002cea:	e7fd      	b.n	8002ce8 <BusFault_Handler+0x4>

08002cec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cf0:	bf00      	nop
 8002cf2:	e7fd      	b.n	8002cf0 <UsageFault_Handler+0x4>

08002cf4 <DebugMon_Handler>:
void DebugMon_Handler(void)
{
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
#endif
void DebugMon_Handler(void)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */
}
 8002cf8:	bf00      	nop
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */
#endif
void SysTick_Handler(void)
{
 8002d02:	b580      	push	{r7, lr}
 8002d04:	af00      	add	r7, sp, #0
  extern void xPortSysTickHandler( void );
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d06:	f000 f887 	bl	8002e18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  xPortSysTickHandler();
 8002d0a:	f008 ffc5 	bl	800bc98 <xPortSysTickHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8002d0e:	bf00      	nop
 8002d10:	bd80      	pop	{r7, pc}
	...

08002d14 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002d18:	4802      	ldr	r0, [pc, #8]	@ (8002d24 <SPI1_IRQHandler+0x10>)
 8002d1a:	f003 f943 	bl	8005fa4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002d1e:	bf00      	nop
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	200001f8 	.word	0x200001f8

08002d28 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d2c:	4b06      	ldr	r3, [pc, #24]	@ (8002d48 <SystemInit+0x20>)
 8002d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d32:	4a05      	ldr	r2, [pc, #20]	@ (8002d48 <SystemInit+0x20>)
 8002d34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d3c:	bf00      	nop
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	e000ed00 	.word	0xe000ed00

08002d4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
	  ldr   sp, =_estack      /* set stack pointer */
 8002d4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002d84 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002d50:	f7ff ffea 	bl	8002d28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d54:	480c      	ldr	r0, [pc, #48]	@ (8002d88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d56:	490d      	ldr	r1, [pc, #52]	@ (8002d8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d58:	4a0d      	ldr	r2, [pc, #52]	@ (8002d90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d5c:	e002      	b.n	8002d64 <LoopCopyDataInit>

08002d5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d62:	3304      	adds	r3, #4

08002d64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d68:	d3f9      	bcc.n	8002d5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d6a:	4a0a      	ldr	r2, [pc, #40]	@ (8002d94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d6c:	4c0a      	ldr	r4, [pc, #40]	@ (8002d98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d70:	e001      	b.n	8002d76 <LoopFillZerobss>

08002d72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d74:	3204      	adds	r2, #4

08002d76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d78:	d3fb      	bcc.n	8002d72 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002d7a:	f00b f8ed 	bl	800df58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d7e:	f7ff f87d 	bl	8001e7c <main>
  bx  lr    
 8002d82:	4770      	bx	lr
	  ldr   sp, =_estack      /* set stack pointer */
 8002d84:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002d88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d8c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002d90:	080113d0 	.word	0x080113d0
  ldr r2, =_sbss
 8002d94:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002d98:	2000063c 	.word	0x2000063c

08002d9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d9c:	e7fe      	b.n	8002d9c <ADC_IRQHandler>

08002d9e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002da2:	2003      	movs	r0, #3
 8002da4:	f000 f928 	bl	8002ff8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002da8:	200f      	movs	r0, #15
 8002daa:	f000 f805 	bl	8002db8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002dae:	f7ff fe69 	bl	8002a84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002dc0:	4b12      	ldr	r3, [pc, #72]	@ (8002e0c <HAL_InitTick+0x54>)
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	4b12      	ldr	r3, [pc, #72]	@ (8002e10 <HAL_InitTick+0x58>)
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	4619      	mov	r1, r3
 8002dca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002dce:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f000 f972 	bl	80030c0 <HAL_SYSTICK_Config>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e00e      	b.n	8002e04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2b0f      	cmp	r3, #15
 8002dea:	d80a      	bhi.n	8002e02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002dec:	2200      	movs	r2, #0
 8002dee:	6879      	ldr	r1, [r7, #4]
 8002df0:	f04f 30ff 	mov.w	r0, #4294967295
 8002df4:	f000 f920 	bl	8003038 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002df8:	4a06      	ldr	r2, [pc, #24]	@ (8002e14 <HAL_InitTick+0x5c>)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	e000      	b.n	8002e04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3708      	adds	r7, #8
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	20000004 	.word	0x20000004
 8002e10:	2000000c 	.word	0x2000000c
 8002e14:	20000008 	.word	0x20000008

08002e18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e1c:	4b06      	ldr	r3, [pc, #24]	@ (8002e38 <HAL_IncTick+0x20>)
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	461a      	mov	r2, r3
 8002e22:	4b06      	ldr	r3, [pc, #24]	@ (8002e3c <HAL_IncTick+0x24>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4413      	add	r3, r2
 8002e28:	4a04      	ldr	r2, [pc, #16]	@ (8002e3c <HAL_IncTick+0x24>)
 8002e2a:	6013      	str	r3, [r2, #0]
}
 8002e2c:	bf00      	nop
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	2000000c 	.word	0x2000000c
 8002e3c:	2000034c 	.word	0x2000034c

08002e40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
  return uwTick;
 8002e44:	4b03      	ldr	r3, [pc, #12]	@ (8002e54 <HAL_GetTick+0x14>)
 8002e46:	681b      	ldr	r3, [r3, #0]
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	2000034c 	.word	0x2000034c

08002e58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f003 0307 	and.w	r3, r3, #7
 8002e66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e68:	4b0b      	ldr	r3, [pc, #44]	@ (8002e98 <__NVIC_SetPriorityGrouping+0x40>)
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e6e:	68ba      	ldr	r2, [r7, #8]
 8002e70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e74:	4013      	ands	r3, r2
 8002e76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002e80:	4b06      	ldr	r3, [pc, #24]	@ (8002e9c <__NVIC_SetPriorityGrouping+0x44>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e86:	4a04      	ldr	r2, [pc, #16]	@ (8002e98 <__NVIC_SetPriorityGrouping+0x40>)
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	60d3      	str	r3, [r2, #12]
}
 8002e8c:	bf00      	nop
 8002e8e:	3714      	adds	r7, #20
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr
 8002e98:	e000ed00 	.word	0xe000ed00
 8002e9c:	05fa0000 	.word	0x05fa0000

08002ea0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ea4:	4b04      	ldr	r3, [pc, #16]	@ (8002eb8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	0a1b      	lsrs	r3, r3, #8
 8002eaa:	f003 0307 	and.w	r3, r3, #7
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr
 8002eb8:	e000ed00 	.word	0xe000ed00

08002ebc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	db0b      	blt.n	8002ee6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ece:	79fb      	ldrb	r3, [r7, #7]
 8002ed0:	f003 021f 	and.w	r2, r3, #31
 8002ed4:	4907      	ldr	r1, [pc, #28]	@ (8002ef4 <__NVIC_EnableIRQ+0x38>)
 8002ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eda:	095b      	lsrs	r3, r3, #5
 8002edc:	2001      	movs	r0, #1
 8002ede:	fa00 f202 	lsl.w	r2, r0, r2
 8002ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ee6:	bf00      	nop
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	e000e100 	.word	0xe000e100

08002ef8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	4603      	mov	r3, r0
 8002f00:	6039      	str	r1, [r7, #0]
 8002f02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	db0a      	blt.n	8002f22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	b2da      	uxtb	r2, r3
 8002f10:	490c      	ldr	r1, [pc, #48]	@ (8002f44 <__NVIC_SetPriority+0x4c>)
 8002f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f16:	0112      	lsls	r2, r2, #4
 8002f18:	b2d2      	uxtb	r2, r2
 8002f1a:	440b      	add	r3, r1
 8002f1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f20:	e00a      	b.n	8002f38 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	b2da      	uxtb	r2, r3
 8002f26:	4908      	ldr	r1, [pc, #32]	@ (8002f48 <__NVIC_SetPriority+0x50>)
 8002f28:	79fb      	ldrb	r3, [r7, #7]
 8002f2a:	f003 030f 	and.w	r3, r3, #15
 8002f2e:	3b04      	subs	r3, #4
 8002f30:	0112      	lsls	r2, r2, #4
 8002f32:	b2d2      	uxtb	r2, r2
 8002f34:	440b      	add	r3, r1
 8002f36:	761a      	strb	r2, [r3, #24]
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr
 8002f44:	e000e100 	.word	0xe000e100
 8002f48:	e000ed00 	.word	0xe000ed00

08002f4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b089      	sub	sp, #36	@ 0x24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f003 0307 	and.w	r3, r3, #7
 8002f5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	f1c3 0307 	rsb	r3, r3, #7
 8002f66:	2b04      	cmp	r3, #4
 8002f68:	bf28      	it	cs
 8002f6a:	2304      	movcs	r3, #4
 8002f6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	3304      	adds	r3, #4
 8002f72:	2b06      	cmp	r3, #6
 8002f74:	d902      	bls.n	8002f7c <NVIC_EncodePriority+0x30>
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	3b03      	subs	r3, #3
 8002f7a:	e000      	b.n	8002f7e <NVIC_EncodePriority+0x32>
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f80:	f04f 32ff 	mov.w	r2, #4294967295
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8a:	43da      	mvns	r2, r3
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	401a      	ands	r2, r3
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f94:	f04f 31ff 	mov.w	r1, #4294967295
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f9e:	43d9      	mvns	r1, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fa4:	4313      	orrs	r3, r2
         );
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3724      	adds	r7, #36	@ 0x24
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
	...

08002fb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fc4:	d301      	bcc.n	8002fca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e00f      	b.n	8002fea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fca:	4a0a      	ldr	r2, [pc, #40]	@ (8002ff4 <SysTick_Config+0x40>)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fd2:	210f      	movs	r1, #15
 8002fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8002fd8:	f7ff ff8e 	bl	8002ef8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fdc:	4b05      	ldr	r3, [pc, #20]	@ (8002ff4 <SysTick_Config+0x40>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fe2:	4b04      	ldr	r3, [pc, #16]	@ (8002ff4 <SysTick_Config+0x40>)
 8002fe4:	2207      	movs	r2, #7
 8002fe6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3708      	adds	r7, #8
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	e000e010 	.word	0xe000e010

08002ff8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b07      	cmp	r3, #7
 8003004:	d00f      	beq.n	8003026 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2b06      	cmp	r3, #6
 800300a:	d00c      	beq.n	8003026 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2b05      	cmp	r3, #5
 8003010:	d009      	beq.n	8003026 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2b04      	cmp	r3, #4
 8003016:	d006      	beq.n	8003026 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2b03      	cmp	r3, #3
 800301c:	d003      	beq.n	8003026 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800301e:	2191      	movs	r1, #145	@ 0x91
 8003020:	4804      	ldr	r0, [pc, #16]	@ (8003034 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8003022:	f7ff fa87 	bl	8002534 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7ff ff16 	bl	8002e58 <__NVIC_SetPriorityGrouping>
}
 800302c:	bf00      	nop
 800302e:	3708      	adds	r7, #8
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	080108f0 	.word	0x080108f0

08003038 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af00      	add	r7, sp, #0
 800303e:	4603      	mov	r3, r0
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
 8003044:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003046:	2300      	movs	r3, #0
 8003048:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2b0f      	cmp	r3, #15
 800304e:	d903      	bls.n	8003058 <HAL_NVIC_SetPriority+0x20>
 8003050:	21a9      	movs	r1, #169	@ 0xa9
 8003052:	480e      	ldr	r0, [pc, #56]	@ (800308c <HAL_NVIC_SetPriority+0x54>)
 8003054:	f7ff fa6e 	bl	8002534 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	2b0f      	cmp	r3, #15
 800305c:	d903      	bls.n	8003066 <HAL_NVIC_SetPriority+0x2e>
 800305e:	21aa      	movs	r1, #170	@ 0xaa
 8003060:	480a      	ldr	r0, [pc, #40]	@ (800308c <HAL_NVIC_SetPriority+0x54>)
 8003062:	f7ff fa67 	bl	8002534 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003066:	f7ff ff1b 	bl	8002ea0 <__NVIC_GetPriorityGrouping>
 800306a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	68b9      	ldr	r1, [r7, #8]
 8003070:	6978      	ldr	r0, [r7, #20]
 8003072:	f7ff ff6b 	bl	8002f4c <NVIC_EncodePriority>
 8003076:	4602      	mov	r2, r0
 8003078:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800307c:	4611      	mov	r1, r2
 800307e:	4618      	mov	r0, r3
 8003080:	f7ff ff3a 	bl	8002ef8 <__NVIC_SetPriority>
}
 8003084:	bf00      	nop
 8003086:	3718      	adds	r7, #24
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	080108f0 	.word	0x080108f0

08003090 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	4603      	mov	r3, r0
 8003098:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800309a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	da03      	bge.n	80030aa <HAL_NVIC_EnableIRQ+0x1a>
 80030a2:	21bd      	movs	r1, #189	@ 0xbd
 80030a4:	4805      	ldr	r0, [pc, #20]	@ (80030bc <HAL_NVIC_EnableIRQ+0x2c>)
 80030a6:	f7ff fa45 	bl	8002534 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7ff ff04 	bl	8002ebc <__NVIC_EnableIRQ>
}
 80030b4:	bf00      	nop
 80030b6:	3708      	adds	r7, #8
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	080108f0 	.word	0x080108f0

080030c0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f7ff ff73 	bl	8002fb4 <SysTick_Config>
 80030ce:	4603      	mov	r3, r0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3708      	adds	r7, #8
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80030dc:	f3bf 8f5f 	dmb	sy
}
 80030e0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80030e2:	4b07      	ldr	r3, [pc, #28]	@ (8003100 <HAL_MPU_Disable+0x28>)
 80030e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e6:	4a06      	ldr	r2, [pc, #24]	@ (8003100 <HAL_MPU_Disable+0x28>)
 80030e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030ec:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80030ee:	4b05      	ldr	r3, [pc, #20]	@ (8003104 <HAL_MPU_Disable+0x2c>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	605a      	str	r2, [r3, #4]
}
 80030f4:	bf00      	nop
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	e000ed00 	.word	0xe000ed00
 8003104:	e000ed90 	.word	0xe000ed90

08003108 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003110:	4a0b      	ldr	r2, [pc, #44]	@ (8003140 <HAL_MPU_Enable+0x38>)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f043 0301 	orr.w	r3, r3, #1
 8003118:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800311a:	4b0a      	ldr	r3, [pc, #40]	@ (8003144 <HAL_MPU_Enable+0x3c>)
 800311c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800311e:	4a09      	ldr	r2, [pc, #36]	@ (8003144 <HAL_MPU_Enable+0x3c>)
 8003120:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003124:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003126:	f3bf 8f4f 	dsb	sy
}
 800312a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800312c:	f3bf 8f6f 	isb	sy
}
 8003130:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003132:	bf00      	nop
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	e000ed90 	.word	0xe000ed90
 8003144:	e000ed00 	.word	0xe000ed00

08003148 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	785b      	ldrb	r3, [r3, #1]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d020      	beq.n	800319a <HAL_MPU_ConfigRegion+0x52>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	785b      	ldrb	r3, [r3, #1]
 800315c:	2b01      	cmp	r3, #1
 800315e:	d01c      	beq.n	800319a <HAL_MPU_ConfigRegion+0x52>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	785b      	ldrb	r3, [r3, #1]
 8003164:	2b02      	cmp	r3, #2
 8003166:	d018      	beq.n	800319a <HAL_MPU_ConfigRegion+0x52>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	785b      	ldrb	r3, [r3, #1]
 800316c:	2b03      	cmp	r3, #3
 800316e:	d014      	beq.n	800319a <HAL_MPU_ConfigRegion+0x52>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	785b      	ldrb	r3, [r3, #1]
 8003174:	2b04      	cmp	r3, #4
 8003176:	d010      	beq.n	800319a <HAL_MPU_ConfigRegion+0x52>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	785b      	ldrb	r3, [r3, #1]
 800317c:	2b05      	cmp	r3, #5
 800317e:	d00c      	beq.n	800319a <HAL_MPU_ConfigRegion+0x52>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	785b      	ldrb	r3, [r3, #1]
 8003184:	2b06      	cmp	r3, #6
 8003186:	d008      	beq.n	800319a <HAL_MPU_ConfigRegion+0x52>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	785b      	ldrb	r3, [r3, #1]
 800318c:	2b07      	cmp	r3, #7
 800318e:	d004      	beq.n	800319a <HAL_MPU_ConfigRegion+0x52>
 8003190:	f44f 71a7 	mov.w	r1, #334	@ 0x14e
 8003194:	488c      	ldr	r0, [pc, #560]	@ (80033c8 <HAL_MPU_ConfigRegion+0x280>)
 8003196:	f7ff f9cd 	bl	8002534 <assert_failed>
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d008      	beq.n	80031b4 <HAL_MPU_ConfigRegion+0x6c>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d004      	beq.n	80031b4 <HAL_MPU_ConfigRegion+0x6c>
 80031aa:	f240 114f 	movw	r1, #335	@ 0x14f
 80031ae:	4886      	ldr	r0, [pc, #536]	@ (80033c8 <HAL_MPU_ConfigRegion+0x280>)
 80031b0:	f7ff f9c0 	bl	8002534 <assert_failed>
  assert_param(IS_MPU_INSTRUCTION_ACCESS(MPU_Init->DisableExec));
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	7b1b      	ldrb	r3, [r3, #12]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d008      	beq.n	80031ce <HAL_MPU_ConfigRegion+0x86>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	7b1b      	ldrb	r3, [r3, #12]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d004      	beq.n	80031ce <HAL_MPU_ConfigRegion+0x86>
 80031c4:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 80031c8:	487f      	ldr	r0, [pc, #508]	@ (80033c8 <HAL_MPU_ConfigRegion+0x280>)
 80031ca:	f7ff f9b3 	bl	8002534 <assert_failed>
  assert_param(IS_MPU_REGION_PERMISSION_ATTRIBUTE(MPU_Init->AccessPermission));
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	7adb      	ldrb	r3, [r3, #11]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d018      	beq.n	8003208 <HAL_MPU_ConfigRegion+0xc0>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	7adb      	ldrb	r3, [r3, #11]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d014      	beq.n	8003208 <HAL_MPU_ConfigRegion+0xc0>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	7adb      	ldrb	r3, [r3, #11]
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d010      	beq.n	8003208 <HAL_MPU_ConfigRegion+0xc0>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	7adb      	ldrb	r3, [r3, #11]
 80031ea:	2b03      	cmp	r3, #3
 80031ec:	d00c      	beq.n	8003208 <HAL_MPU_ConfigRegion+0xc0>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	7adb      	ldrb	r3, [r3, #11]
 80031f2:	2b05      	cmp	r3, #5
 80031f4:	d008      	beq.n	8003208 <HAL_MPU_ConfigRegion+0xc0>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	7adb      	ldrb	r3, [r3, #11]
 80031fa:	2b06      	cmp	r3, #6
 80031fc:	d004      	beq.n	8003208 <HAL_MPU_ConfigRegion+0xc0>
 80031fe:	f240 1151 	movw	r1, #337	@ 0x151
 8003202:	4871      	ldr	r0, [pc, #452]	@ (80033c8 <HAL_MPU_ConfigRegion+0x280>)
 8003204:	f7ff f996 	bl	8002534 <assert_failed>
  assert_param(IS_MPU_TEX_LEVEL(MPU_Init->TypeExtField));
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	7a9b      	ldrb	r3, [r3, #10]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00c      	beq.n	800322a <HAL_MPU_ConfigRegion+0xe2>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	7a9b      	ldrb	r3, [r3, #10]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d008      	beq.n	800322a <HAL_MPU_ConfigRegion+0xe2>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	7a9b      	ldrb	r3, [r3, #10]
 800321c:	2b02      	cmp	r3, #2
 800321e:	d004      	beq.n	800322a <HAL_MPU_ConfigRegion+0xe2>
 8003220:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 8003224:	4868      	ldr	r0, [pc, #416]	@ (80033c8 <HAL_MPU_ConfigRegion+0x280>)
 8003226:	f7ff f985 	bl	8002534 <assert_failed>
  assert_param(IS_MPU_ACCESS_SHAREABLE(MPU_Init->IsShareable));
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	7b5b      	ldrb	r3, [r3, #13]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d008      	beq.n	8003244 <HAL_MPU_ConfigRegion+0xfc>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	7b5b      	ldrb	r3, [r3, #13]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d004      	beq.n	8003244 <HAL_MPU_ConfigRegion+0xfc>
 800323a:	f240 1153 	movw	r1, #339	@ 0x153
 800323e:	4862      	ldr	r0, [pc, #392]	@ (80033c8 <HAL_MPU_ConfigRegion+0x280>)
 8003240:	f7ff f978 	bl	8002534 <assert_failed>
  assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	7b9b      	ldrb	r3, [r3, #14]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d008      	beq.n	800325e <HAL_MPU_ConfigRegion+0x116>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	7b9b      	ldrb	r3, [r3, #14]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d004      	beq.n	800325e <HAL_MPU_ConfigRegion+0x116>
 8003254:	f44f 71aa 	mov.w	r1, #340	@ 0x154
 8003258:	485b      	ldr	r0, [pc, #364]	@ (80033c8 <HAL_MPU_ConfigRegion+0x280>)
 800325a:	f7ff f96b 	bl	8002534 <assert_failed>
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	7bdb      	ldrb	r3, [r3, #15]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d008      	beq.n	8003278 <HAL_MPU_ConfigRegion+0x130>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	7bdb      	ldrb	r3, [r3, #15]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d004      	beq.n	8003278 <HAL_MPU_ConfigRegion+0x130>
 800326e:	f240 1155 	movw	r1, #341	@ 0x155
 8003272:	4855      	ldr	r0, [pc, #340]	@ (80033c8 <HAL_MPU_ConfigRegion+0x280>)
 8003274:	f7ff f95e 	bl	8002534 <assert_failed>
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	7a5b      	ldrb	r3, [r3, #9]
 800327c:	2bff      	cmp	r3, #255	@ 0xff
 800327e:	d104      	bne.n	800328a <HAL_MPU_ConfigRegion+0x142>
 8003280:	f44f 71ab 	mov.w	r1, #342	@ 0x156
 8003284:	4850      	ldr	r0, [pc, #320]	@ (80033c8 <HAL_MPU_ConfigRegion+0x280>)
 8003286:	f7ff f955 	bl	8002534 <assert_failed>
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	7a1b      	ldrb	r3, [r3, #8]
 800328e:	2b04      	cmp	r3, #4
 8003290:	d070      	beq.n	8003374 <HAL_MPU_ConfigRegion+0x22c>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	7a1b      	ldrb	r3, [r3, #8]
 8003296:	2b05      	cmp	r3, #5
 8003298:	d06c      	beq.n	8003374 <HAL_MPU_ConfigRegion+0x22c>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	7a1b      	ldrb	r3, [r3, #8]
 800329e:	2b06      	cmp	r3, #6
 80032a0:	d068      	beq.n	8003374 <HAL_MPU_ConfigRegion+0x22c>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	7a1b      	ldrb	r3, [r3, #8]
 80032a6:	2b07      	cmp	r3, #7
 80032a8:	d064      	beq.n	8003374 <HAL_MPU_ConfigRegion+0x22c>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	7a1b      	ldrb	r3, [r3, #8]
 80032ae:	2b08      	cmp	r3, #8
 80032b0:	d060      	beq.n	8003374 <HAL_MPU_ConfigRegion+0x22c>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	7a1b      	ldrb	r3, [r3, #8]
 80032b6:	2b09      	cmp	r3, #9
 80032b8:	d05c      	beq.n	8003374 <HAL_MPU_ConfigRegion+0x22c>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	7a1b      	ldrb	r3, [r3, #8]
 80032be:	2b0a      	cmp	r3, #10
 80032c0:	d058      	beq.n	8003374 <HAL_MPU_ConfigRegion+0x22c>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	7a1b      	ldrb	r3, [r3, #8]
 80032c6:	2b0b      	cmp	r3, #11
 80032c8:	d054      	beq.n	8003374 <HAL_MPU_ConfigRegion+0x22c>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	7a1b      	ldrb	r3, [r3, #8]
 80032ce:	2b0c      	cmp	r3, #12
 80032d0:	d050      	beq.n	8003374 <HAL_MPU_ConfigRegion+0x22c>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	7a1b      	ldrb	r3, [r3, #8]
 80032d6:	2b0d      	cmp	r3, #13
 80032d8:	d04c      	beq.n	8003374 <HAL_MPU_ConfigRegion+0x22c>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	7a1b      	ldrb	r3, [r3, #8]
 80032de:	2b0e      	cmp	r3, #14
 80032e0:	d048      	beq.n	8003374 <HAL_MPU_ConfigRegion+0x22c>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	7a1b      	ldrb	r3, [r3, #8]
 80032e6:	2b0f      	cmp	r3, #15
 80032e8:	d044      	beq.n	8003374 <HAL_MPU_ConfigRegion+0x22c>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	7a1b      	ldrb	r3, [r3, #8]
 80032ee:	2b10      	cmp	r3, #16
 80032f0:	d040      	beq.n	8003374 <HAL_MPU_ConfigRegion+0x22c>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	7a1b      	ldrb	r3, [r3, #8]
 80032f6:	2b11      	cmp	r3, #17
 80032f8:	d03c      	beq.n	8003374 <HAL_MPU_ConfigRegion+0x22c>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	7a1b      	ldrb	r3, [r3, #8]
 80032fe:	2b12      	cmp	r3, #18
 8003300:	d038      	beq.n	8003374 <HAL_MPU_ConfigRegion+0x22c>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	7a1b      	ldrb	r3, [r3, #8]
 8003306:	2b13      	cmp	r3, #19
 8003308:	d034      	beq.n	8003374 <HAL_MPU_ConfigRegion+0x22c>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	7a1b      	ldrb	r3, [r3, #8]
 800330e:	2b14      	cmp	r3, #20
 8003310:	d030      	beq.n	8003374 <HAL_MPU_ConfigRegion+0x22c>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	7a1b      	ldrb	r3, [r3, #8]
 8003316:	2b15      	cmp	r3, #21
 8003318:	d02c      	beq.n	8003374 <HAL_MPU_ConfigRegion+0x22c>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	7a1b      	ldrb	r3, [r3, #8]
 800331e:	2b16      	cmp	r3, #22
 8003320:	d028      	beq.n	8003374 <HAL_MPU_ConfigRegion+0x22c>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	7a1b      	ldrb	r3, [r3, #8]
 8003326:	2b17      	cmp	r3, #23
 8003328:	d024      	beq.n	8003374 <HAL_MPU_ConfigRegion+0x22c>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	7a1b      	ldrb	r3, [r3, #8]
 800332e:	2b18      	cmp	r3, #24
 8003330:	d020      	beq.n	8003374 <HAL_MPU_ConfigRegion+0x22c>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	7a1b      	ldrb	r3, [r3, #8]
 8003336:	2b19      	cmp	r3, #25
 8003338:	d01c      	beq.n	8003374 <HAL_MPU_ConfigRegion+0x22c>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	7a1b      	ldrb	r3, [r3, #8]
 800333e:	2b1a      	cmp	r3, #26
 8003340:	d018      	beq.n	8003374 <HAL_MPU_ConfigRegion+0x22c>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	7a1b      	ldrb	r3, [r3, #8]
 8003346:	2b1b      	cmp	r3, #27
 8003348:	d014      	beq.n	8003374 <HAL_MPU_ConfigRegion+0x22c>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	7a1b      	ldrb	r3, [r3, #8]
 800334e:	2b1c      	cmp	r3, #28
 8003350:	d010      	beq.n	8003374 <HAL_MPU_ConfigRegion+0x22c>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	7a1b      	ldrb	r3, [r3, #8]
 8003356:	2b1d      	cmp	r3, #29
 8003358:	d00c      	beq.n	8003374 <HAL_MPU_ConfigRegion+0x22c>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	7a1b      	ldrb	r3, [r3, #8]
 800335e:	2b1e      	cmp	r3, #30
 8003360:	d008      	beq.n	8003374 <HAL_MPU_ConfigRegion+0x22c>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	7a1b      	ldrb	r3, [r3, #8]
 8003366:	2b1f      	cmp	r3, #31
 8003368:	d004      	beq.n	8003374 <HAL_MPU_ConfigRegion+0x22c>
 800336a:	f240 1157 	movw	r1, #343	@ 0x157
 800336e:	4816      	ldr	r0, [pc, #88]	@ (80033c8 <HAL_MPU_ConfigRegion+0x280>)
 8003370:	f7ff f8e0 	bl	8002534 <assert_failed>

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	785a      	ldrb	r2, [r3, #1]
 8003378:	4b14      	ldr	r3, [pc, #80]	@ (80033cc <HAL_MPU_ConfigRegion+0x284>)
 800337a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800337c:	4b13      	ldr	r3, [pc, #76]	@ (80033cc <HAL_MPU_ConfigRegion+0x284>)
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	4a12      	ldr	r2, [pc, #72]	@ (80033cc <HAL_MPU_ConfigRegion+0x284>)
 8003382:	f023 0301 	bic.w	r3, r3, #1
 8003386:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003388:	4a10      	ldr	r2, [pc, #64]	@ (80033cc <HAL_MPU_ConfigRegion+0x284>)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	7b1b      	ldrb	r3, [r3, #12]
 8003394:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	7adb      	ldrb	r3, [r3, #11]
 800339a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800339c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	7a9b      	ldrb	r3, [r3, #10]
 80033a2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80033a4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	7b5b      	ldrb	r3, [r3, #13]
 80033aa:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80033ac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	7b9b      	ldrb	r3, [r3, #14]
 80033b2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80033b4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	7bdb      	ldrb	r3, [r3, #15]
 80033ba:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80033bc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	7a5b      	ldrb	r3, [r3, #9]
 80033c2:	021b      	lsls	r3, r3, #8
 80033c4:	e004      	b.n	80033d0 <HAL_MPU_ConfigRegion+0x288>
 80033c6:	bf00      	nop
 80033c8:	080108f0 	.word	0x080108f0
 80033cc:	e000ed90 	.word	0xe000ed90
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80033d0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	7a1b      	ldrb	r3, [r3, #8]
 80033d6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80033d8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	7812      	ldrb	r2, [r2, #0]
 80033de:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80033e0:	4a03      	ldr	r2, [pc, #12]	@ (80033f0 <HAL_MPU_ConfigRegion+0x2a8>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80033e2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80033e4:	6113      	str	r3, [r2, #16]
}
 80033e6:	bf00      	nop
 80033e8:	3708      	adds	r7, #8
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	e000ed90 	.word	0xe000ed90

080033f4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003402:	b2db      	uxtb	r3, r3
 8003404:	2b02      	cmp	r3, #2
 8003406:	d004      	beq.n	8003412 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2280      	movs	r2, #128	@ 0x80
 800340c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e00c      	b.n	800342c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2205      	movs	r2, #5
 8003416:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 0201 	bic.w	r2, r2, #1
 8003428:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800342a:	2300      	movs	r3, #0
}
 800342c:	4618      	mov	r0, r3
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b088      	sub	sp, #32
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003442:	2300      	movs	r3, #0
 8003444:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003446:	2300      	movs	r3, #0
 8003448:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800344a:	2300      	movs	r3, #0
 800344c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800344e:	2300      	movs	r3, #0
 8003450:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a3a      	ldr	r2, [pc, #232]	@ (8003540 <HAL_GPIO_Init+0x108>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d02b      	beq.n	80034b2 <HAL_GPIO_Init+0x7a>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a39      	ldr	r2, [pc, #228]	@ (8003544 <HAL_GPIO_Init+0x10c>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d027      	beq.n	80034b2 <HAL_GPIO_Init+0x7a>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a38      	ldr	r2, [pc, #224]	@ (8003548 <HAL_GPIO_Init+0x110>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d023      	beq.n	80034b2 <HAL_GPIO_Init+0x7a>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a37      	ldr	r2, [pc, #220]	@ (800354c <HAL_GPIO_Init+0x114>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d01f      	beq.n	80034b2 <HAL_GPIO_Init+0x7a>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a36      	ldr	r2, [pc, #216]	@ (8003550 <HAL_GPIO_Init+0x118>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d01b      	beq.n	80034b2 <HAL_GPIO_Init+0x7a>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a35      	ldr	r2, [pc, #212]	@ (8003554 <HAL_GPIO_Init+0x11c>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d017      	beq.n	80034b2 <HAL_GPIO_Init+0x7a>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a34      	ldr	r2, [pc, #208]	@ (8003558 <HAL_GPIO_Init+0x120>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d013      	beq.n	80034b2 <HAL_GPIO_Init+0x7a>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a33      	ldr	r2, [pc, #204]	@ (800355c <HAL_GPIO_Init+0x124>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d00f      	beq.n	80034b2 <HAL_GPIO_Init+0x7a>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a32      	ldr	r2, [pc, #200]	@ (8003560 <HAL_GPIO_Init+0x128>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d00b      	beq.n	80034b2 <HAL_GPIO_Init+0x7a>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a31      	ldr	r2, [pc, #196]	@ (8003564 <HAL_GPIO_Init+0x12c>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d007      	beq.n	80034b2 <HAL_GPIO_Init+0x7a>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a30      	ldr	r2, [pc, #192]	@ (8003568 <HAL_GPIO_Init+0x130>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d003      	beq.n	80034b2 <HAL_GPIO_Init+0x7a>
 80034aa:	21aa      	movs	r1, #170	@ 0xaa
 80034ac:	482f      	ldr	r0, [pc, #188]	@ (800356c <HAL_GPIO_Init+0x134>)
 80034ae:	f7ff f841 	bl	8002534 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d103      	bne.n	80034c4 <HAL_GPIO_Init+0x8c>
 80034bc:	21ab      	movs	r1, #171	@ 0xab
 80034be:	482b      	ldr	r0, [pc, #172]	@ (800356c <HAL_GPIO_Init+0x134>)
 80034c0:	f7ff f838 	bl	8002534 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d035      	beq.n	8003538 <HAL_GPIO_Init+0x100>
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d031      	beq.n	8003538 <HAL_GPIO_Init+0x100>
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	2b11      	cmp	r3, #17
 80034da:	d02d      	beq.n	8003538 <HAL_GPIO_Init+0x100>
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d029      	beq.n	8003538 <HAL_GPIO_Init+0x100>
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	2b12      	cmp	r3, #18
 80034ea:	d025      	beq.n	8003538 <HAL_GPIO_Init+0x100>
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 80034f4:	d020      	beq.n	8003538 <HAL_GPIO_Init+0x100>
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 80034fe:	d01b      	beq.n	8003538 <HAL_GPIO_Init+0x100>
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 8003508:	d016      	beq.n	8003538 <HAL_GPIO_Init+0x100>
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 8003512:	d011      	beq.n	8003538 <HAL_GPIO_Init+0x100>
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 800351c:	d00c      	beq.n	8003538 <HAL_GPIO_Init+0x100>
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 8003526:	d007      	beq.n	8003538 <HAL_GPIO_Init+0x100>
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	2b03      	cmp	r3, #3
 800352e:	d003      	beq.n	8003538 <HAL_GPIO_Init+0x100>
 8003530:	21ac      	movs	r1, #172	@ 0xac
 8003532:	480e      	ldr	r0, [pc, #56]	@ (800356c <HAL_GPIO_Init+0x134>)
 8003534:	f7fe fffe 	bl	8002534 <assert_failed>

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003538:	2300      	movs	r3, #0
 800353a:	61fb      	str	r3, [r7, #28]
 800353c:	e2c7      	b.n	8003ace <HAL_GPIO_Init+0x696>
 800353e:	bf00      	nop
 8003540:	40020000 	.word	0x40020000
 8003544:	40020400 	.word	0x40020400
 8003548:	40020800 	.word	0x40020800
 800354c:	40020c00 	.word	0x40020c00
 8003550:	40021000 	.word	0x40021000
 8003554:	40021400 	.word	0x40021400
 8003558:	40021800 	.word	0x40021800
 800355c:	40021c00 	.word	0x40021c00
 8003560:	40022000 	.word	0x40022000
 8003564:	40022400 	.word	0x40022400
 8003568:	40022800 	.word	0x40022800
 800356c:	0801092c 	.word	0x0801092c
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003570:	2201      	movs	r2, #1
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	fa02 f303 	lsl.w	r3, r2, r3
 8003578:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	697a      	ldr	r2, [r7, #20]
 8003580:	4013      	ands	r3, r2
 8003582:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	429a      	cmp	r2, r3
 800358a:	f040 829d 	bne.w	8003ac8 <HAL_GPIO_Init+0x690>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f003 0303 	and.w	r3, r3, #3
 8003596:	2b01      	cmp	r3, #1
 8003598:	d005      	beq.n	80035a6 <HAL_GPIO_Init+0x16e>
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f003 0303 	and.w	r3, r3, #3
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d144      	bne.n	8003630 <HAL_GPIO_Init+0x1f8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00f      	beq.n	80035ce <HAL_GPIO_Init+0x196>
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d00b      	beq.n	80035ce <HAL_GPIO_Init+0x196>
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d007      	beq.n	80035ce <HAL_GPIO_Init+0x196>
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	2b03      	cmp	r3, #3
 80035c4:	d003      	beq.n	80035ce <HAL_GPIO_Init+0x196>
 80035c6:	21bd      	movs	r1, #189	@ 0xbd
 80035c8:	4831      	ldr	r0, [pc, #196]	@ (8003690 <HAL_GPIO_Init+0x258>)
 80035ca:	f7fe ffb3 	bl	8002534 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	2203      	movs	r2, #3
 80035da:	fa02 f303 	lsl.w	r3, r2, r3
 80035de:	43db      	mvns	r3, r3
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	4013      	ands	r3, r2
 80035e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	68da      	ldr	r2, [r3, #12]
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	fa02 f303 	lsl.w	r3, r2, r3
 80035f2:	69ba      	ldr	r2, [r7, #24]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	69ba      	ldr	r2, [r7, #24]
 80035fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003604:	2201      	movs	r2, #1
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	fa02 f303 	lsl.w	r3, r2, r3
 800360c:	43db      	mvns	r3, r3
 800360e:	69ba      	ldr	r2, [r7, #24]
 8003610:	4013      	ands	r3, r2
 8003612:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	091b      	lsrs	r3, r3, #4
 800361a:	f003 0201 	and.w	r2, r3, #1
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	fa02 f303 	lsl.w	r3, r2, r3
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	4313      	orrs	r3, r2
 8003628:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f003 0303 	and.w	r3, r3, #3
 8003638:	2b03      	cmp	r3, #3
 800363a:	d02b      	beq.n	8003694 <HAL_GPIO_Init+0x25c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d00b      	beq.n	800365c <HAL_GPIO_Init+0x224>
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d007      	beq.n	800365c <HAL_GPIO_Init+0x224>
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	2b02      	cmp	r3, #2
 8003652:	d003      	beq.n	800365c <HAL_GPIO_Init+0x224>
 8003654:	21ce      	movs	r1, #206	@ 0xce
 8003656:	480e      	ldr	r0, [pc, #56]	@ (8003690 <HAL_GPIO_Init+0x258>)
 8003658:	f7fe ff6c 	bl	8002534 <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	2203      	movs	r2, #3
 8003668:	fa02 f303 	lsl.w	r3, r2, r3
 800366c:	43db      	mvns	r3, r3
 800366e:	69ba      	ldr	r2, [r7, #24]
 8003670:	4013      	ands	r3, r2
 8003672:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	689a      	ldr	r2, [r3, #8]
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	fa02 f303 	lsl.w	r3, r2, r3
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	4313      	orrs	r3, r2
 8003684:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	60da      	str	r2, [r3, #12]
 800368c:	e002      	b.n	8003694 <HAL_GPIO_Init+0x25c>
 800368e:	bf00      	nop
 8003690:	0801092c 	.word	0x0801092c
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f003 0303 	and.w	r3, r3, #3
 800369c:	2b02      	cmp	r3, #2
 800369e:	f040 8134 	bne.w	800390a <HAL_GPIO_Init+0x4d2>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f000 810b 	beq.w	80038c2 <HAL_GPIO_Init+0x48a>
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	f000 8106 	beq.w	80038c2 <HAL_GPIO_Init+0x48a>
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	f000 8101 	beq.w	80038c2 <HAL_GPIO_Init+0x48a>
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	f000 80fc 	beq.w	80038c2 <HAL_GPIO_Init+0x48a>
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	f000 80f7 	beq.w	80038c2 <HAL_GPIO_Init+0x48a>
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	f000 80f2 	beq.w	80038c2 <HAL_GPIO_Init+0x48a>
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	f000 80ed 	beq.w	80038c2 <HAL_GPIO_Init+0x48a>
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	f000 80e8 	beq.w	80038c2 <HAL_GPIO_Init+0x48a>
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	f000 80e3 	beq.w	80038c2 <HAL_GPIO_Init+0x48a>
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	2b03      	cmp	r3, #3
 8003702:	f000 80de 	beq.w	80038c2 <HAL_GPIO_Init+0x48a>
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	2b03      	cmp	r3, #3
 800370c:	f000 80d9 	beq.w	80038c2 <HAL_GPIO_Init+0x48a>
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	691b      	ldr	r3, [r3, #16]
 8003714:	2b03      	cmp	r3, #3
 8003716:	f000 80d4 	beq.w	80038c2 <HAL_GPIO_Init+0x48a>
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	2b03      	cmp	r3, #3
 8003720:	f000 80cf 	beq.w	80038c2 <HAL_GPIO_Init+0x48a>
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	2b03      	cmp	r3, #3
 800372a:	f000 80ca 	beq.w	80038c2 <HAL_GPIO_Init+0x48a>
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	2b03      	cmp	r3, #3
 8003734:	f000 80c5 	beq.w	80038c2 <HAL_GPIO_Init+0x48a>
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	691b      	ldr	r3, [r3, #16]
 800373c:	2b04      	cmp	r3, #4
 800373e:	f000 80c0 	beq.w	80038c2 <HAL_GPIO_Init+0x48a>
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	2b04      	cmp	r3, #4
 8003748:	f000 80bb 	beq.w	80038c2 <HAL_GPIO_Init+0x48a>
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	2b04      	cmp	r3, #4
 8003752:	f000 80b6 	beq.w	80038c2 <HAL_GPIO_Init+0x48a>
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	2b04      	cmp	r3, #4
 800375c:	f000 80b1 	beq.w	80038c2 <HAL_GPIO_Init+0x48a>
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	2b04      	cmp	r3, #4
 8003766:	f000 80ac 	beq.w	80038c2 <HAL_GPIO_Init+0x48a>
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	2b05      	cmp	r3, #5
 8003770:	f000 80a7 	beq.w	80038c2 <HAL_GPIO_Init+0x48a>
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	2b05      	cmp	r3, #5
 800377a:	f000 80a2 	beq.w	80038c2 <HAL_GPIO_Init+0x48a>
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	2b05      	cmp	r3, #5
 8003784:	f000 809d 	beq.w	80038c2 <HAL_GPIO_Init+0x48a>
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	691b      	ldr	r3, [r3, #16]
 800378c:	2b05      	cmp	r3, #5
 800378e:	f000 8098 	beq.w	80038c2 <HAL_GPIO_Init+0x48a>
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	2b05      	cmp	r3, #5
 8003798:	f000 8093 	beq.w	80038c2 <HAL_GPIO_Init+0x48a>
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	2b05      	cmp	r3, #5
 80037a2:	f000 808e 	beq.w	80038c2 <HAL_GPIO_Init+0x48a>
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	2b06      	cmp	r3, #6
 80037ac:	f000 8089 	beq.w	80038c2 <HAL_GPIO_Init+0x48a>
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	691b      	ldr	r3, [r3, #16]
 80037b4:	2b06      	cmp	r3, #6
 80037b6:	f000 8084 	beq.w	80038c2 <HAL_GPIO_Init+0x48a>
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	2b07      	cmp	r3, #7
 80037c0:	d07f      	beq.n	80038c2 <HAL_GPIO_Init+0x48a>
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	2b07      	cmp	r3, #7
 80037c8:	d07b      	beq.n	80038c2 <HAL_GPIO_Init+0x48a>
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	2b07      	cmp	r3, #7
 80037d0:	d077      	beq.n	80038c2 <HAL_GPIO_Init+0x48a>
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	2b07      	cmp	r3, #7
 80037d8:	d073      	beq.n	80038c2 <HAL_GPIO_Init+0x48a>
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	2b07      	cmp	r3, #7
 80037e0:	d06f      	beq.n	80038c2 <HAL_GPIO_Init+0x48a>
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	2b07      	cmp	r3, #7
 80037e8:	d06b      	beq.n	80038c2 <HAL_GPIO_Init+0x48a>
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	2b07      	cmp	r3, #7
 80037f0:	d067      	beq.n	80038c2 <HAL_GPIO_Init+0x48a>
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	2b08      	cmp	r3, #8
 80037f8:	d063      	beq.n	80038c2 <HAL_GPIO_Init+0x48a>
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	2b08      	cmp	r3, #8
 8003800:	d05f      	beq.n	80038c2 <HAL_GPIO_Init+0x48a>
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	2b08      	cmp	r3, #8
 8003808:	d05b      	beq.n	80038c2 <HAL_GPIO_Init+0x48a>
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	2b08      	cmp	r3, #8
 8003810:	d057      	beq.n	80038c2 <HAL_GPIO_Init+0x48a>
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	2b08      	cmp	r3, #8
 8003818:	d053      	beq.n	80038c2 <HAL_GPIO_Init+0x48a>
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	2b08      	cmp	r3, #8
 8003820:	d04f      	beq.n	80038c2 <HAL_GPIO_Init+0x48a>
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	2b08      	cmp	r3, #8
 8003828:	d04b      	beq.n	80038c2 <HAL_GPIO_Init+0x48a>
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	2b09      	cmp	r3, #9
 8003830:	d047      	beq.n	80038c2 <HAL_GPIO_Init+0x48a>
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	2b09      	cmp	r3, #9
 8003838:	d043      	beq.n	80038c2 <HAL_GPIO_Init+0x48a>
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	2b09      	cmp	r3, #9
 8003840:	d03f      	beq.n	80038c2 <HAL_GPIO_Init+0x48a>
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	2b09      	cmp	r3, #9
 8003848:	d03b      	beq.n	80038c2 <HAL_GPIO_Init+0x48a>
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	2b09      	cmp	r3, #9
 8003850:	d037      	beq.n	80038c2 <HAL_GPIO_Init+0x48a>
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	2b09      	cmp	r3, #9
 8003858:	d033      	beq.n	80038c2 <HAL_GPIO_Init+0x48a>
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	2b09      	cmp	r3, #9
 8003860:	d02f      	beq.n	80038c2 <HAL_GPIO_Init+0x48a>
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	2b0a      	cmp	r3, #10
 8003868:	d02b      	beq.n	80038c2 <HAL_GPIO_Init+0x48a>
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	2b0a      	cmp	r3, #10
 8003870:	d027      	beq.n	80038c2 <HAL_GPIO_Init+0x48a>
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	2b0a      	cmp	r3, #10
 8003878:	d023      	beq.n	80038c2 <HAL_GPIO_Init+0x48a>
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	2b0a      	cmp	r3, #10
 8003880:	d01f      	beq.n	80038c2 <HAL_GPIO_Init+0x48a>
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	2b0b      	cmp	r3, #11
 8003888:	d01b      	beq.n	80038c2 <HAL_GPIO_Init+0x48a>
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	2b0c      	cmp	r3, #12
 8003890:	d017      	beq.n	80038c2 <HAL_GPIO_Init+0x48a>
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	2b0c      	cmp	r3, #12
 8003898:	d013      	beq.n	80038c2 <HAL_GPIO_Init+0x48a>
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	2b0c      	cmp	r3, #12
 80038a0:	d00f      	beq.n	80038c2 <HAL_GPIO_Init+0x48a>
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	2b0f      	cmp	r3, #15
 80038a8:	d00b      	beq.n	80038c2 <HAL_GPIO_Init+0x48a>
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	2b0d      	cmp	r3, #13
 80038b0:	d007      	beq.n	80038c2 <HAL_GPIO_Init+0x48a>
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	2b0e      	cmp	r3, #14
 80038b8:	d003      	beq.n	80038c2 <HAL_GPIO_Init+0x48a>
 80038ba:	21db      	movs	r1, #219	@ 0xdb
 80038bc:	4888      	ldr	r0, [pc, #544]	@ (8003ae0 <HAL_GPIO_Init+0x6a8>)
 80038be:	f7fe fe39 	bl	8002534 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	08da      	lsrs	r2, r3, #3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	3208      	adds	r2, #8
 80038ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	f003 0307 	and.w	r3, r3, #7
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	220f      	movs	r2, #15
 80038da:	fa02 f303 	lsl.w	r3, r2, r3
 80038de:	43db      	mvns	r3, r3
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	4013      	ands	r3, r2
 80038e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	691a      	ldr	r2, [r3, #16]
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	f003 0307 	and.w	r3, r3, #7
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	fa02 f303 	lsl.w	r3, r2, r3
 80038f6:	69ba      	ldr	r2, [r7, #24]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	08da      	lsrs	r2, r3, #3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	3208      	adds	r2, #8
 8003904:	69b9      	ldr	r1, [r7, #24]
 8003906:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	005b      	lsls	r3, r3, #1
 8003914:	2203      	movs	r2, #3
 8003916:	fa02 f303 	lsl.w	r3, r2, r3
 800391a:	43db      	mvns	r3, r3
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	4013      	ands	r3, r2
 8003920:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f003 0203 	and.w	r2, r3, #3
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	005b      	lsls	r3, r3, #1
 800392e:	fa02 f303 	lsl.w	r3, r2, r3
 8003932:	69ba      	ldr	r2, [r7, #24]
 8003934:	4313      	orrs	r3, r2
 8003936:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	69ba      	ldr	r2, [r7, #24]
 800393c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003946:	2b00      	cmp	r3, #0
 8003948:	f000 80be 	beq.w	8003ac8 <HAL_GPIO_Init+0x690>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800394c:	4b65      	ldr	r3, [pc, #404]	@ (8003ae4 <HAL_GPIO_Init+0x6ac>)
 800394e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003950:	4a64      	ldr	r2, [pc, #400]	@ (8003ae4 <HAL_GPIO_Init+0x6ac>)
 8003952:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003956:	6453      	str	r3, [r2, #68]	@ 0x44
 8003958:	4b62      	ldr	r3, [pc, #392]	@ (8003ae4 <HAL_GPIO_Init+0x6ac>)
 800395a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800395c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003960:	60fb      	str	r3, [r7, #12]
 8003962:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003964:	4a60      	ldr	r2, [pc, #384]	@ (8003ae8 <HAL_GPIO_Init+0x6b0>)
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	089b      	lsrs	r3, r3, #2
 800396a:	3302      	adds	r3, #2
 800396c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003970:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	f003 0303 	and.w	r3, r3, #3
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	220f      	movs	r2, #15
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	43db      	mvns	r3, r3
 8003982:	69ba      	ldr	r2, [r7, #24]
 8003984:	4013      	ands	r3, r2
 8003986:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a58      	ldr	r2, [pc, #352]	@ (8003aec <HAL_GPIO_Init+0x6b4>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d037      	beq.n	8003a00 <HAL_GPIO_Init+0x5c8>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a57      	ldr	r2, [pc, #348]	@ (8003af0 <HAL_GPIO_Init+0x6b8>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d031      	beq.n	80039fc <HAL_GPIO_Init+0x5c4>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a56      	ldr	r2, [pc, #344]	@ (8003af4 <HAL_GPIO_Init+0x6bc>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d02b      	beq.n	80039f8 <HAL_GPIO_Init+0x5c0>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a55      	ldr	r2, [pc, #340]	@ (8003af8 <HAL_GPIO_Init+0x6c0>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d025      	beq.n	80039f4 <HAL_GPIO_Init+0x5bc>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a54      	ldr	r2, [pc, #336]	@ (8003afc <HAL_GPIO_Init+0x6c4>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d01f      	beq.n	80039f0 <HAL_GPIO_Init+0x5b8>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a53      	ldr	r2, [pc, #332]	@ (8003b00 <HAL_GPIO_Init+0x6c8>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d019      	beq.n	80039ec <HAL_GPIO_Init+0x5b4>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a52      	ldr	r2, [pc, #328]	@ (8003b04 <HAL_GPIO_Init+0x6cc>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d013      	beq.n	80039e8 <HAL_GPIO_Init+0x5b0>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4a51      	ldr	r2, [pc, #324]	@ (8003b08 <HAL_GPIO_Init+0x6d0>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d00d      	beq.n	80039e4 <HAL_GPIO_Init+0x5ac>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a50      	ldr	r2, [pc, #320]	@ (8003b0c <HAL_GPIO_Init+0x6d4>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d007      	beq.n	80039e0 <HAL_GPIO_Init+0x5a8>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4a4f      	ldr	r2, [pc, #316]	@ (8003b10 <HAL_GPIO_Init+0x6d8>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d101      	bne.n	80039dc <HAL_GPIO_Init+0x5a4>
 80039d8:	2309      	movs	r3, #9
 80039da:	e012      	b.n	8003a02 <HAL_GPIO_Init+0x5ca>
 80039dc:	230a      	movs	r3, #10
 80039de:	e010      	b.n	8003a02 <HAL_GPIO_Init+0x5ca>
 80039e0:	2308      	movs	r3, #8
 80039e2:	e00e      	b.n	8003a02 <HAL_GPIO_Init+0x5ca>
 80039e4:	2307      	movs	r3, #7
 80039e6:	e00c      	b.n	8003a02 <HAL_GPIO_Init+0x5ca>
 80039e8:	2306      	movs	r3, #6
 80039ea:	e00a      	b.n	8003a02 <HAL_GPIO_Init+0x5ca>
 80039ec:	2305      	movs	r3, #5
 80039ee:	e008      	b.n	8003a02 <HAL_GPIO_Init+0x5ca>
 80039f0:	2304      	movs	r3, #4
 80039f2:	e006      	b.n	8003a02 <HAL_GPIO_Init+0x5ca>
 80039f4:	2303      	movs	r3, #3
 80039f6:	e004      	b.n	8003a02 <HAL_GPIO_Init+0x5ca>
 80039f8:	2302      	movs	r3, #2
 80039fa:	e002      	b.n	8003a02 <HAL_GPIO_Init+0x5ca>
 80039fc:	2301      	movs	r3, #1
 80039fe:	e000      	b.n	8003a02 <HAL_GPIO_Init+0x5ca>
 8003a00:	2300      	movs	r3, #0
 8003a02:	69fa      	ldr	r2, [r7, #28]
 8003a04:	f002 0203 	and.w	r2, r2, #3
 8003a08:	0092      	lsls	r2, r2, #2
 8003a0a:	4093      	lsls	r3, r2
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003a12:	4935      	ldr	r1, [pc, #212]	@ (8003ae8 <HAL_GPIO_Init+0x6b0>)
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	089b      	lsrs	r3, r3, #2
 8003a18:	3302      	adds	r3, #2
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a20:	4b3c      	ldr	r3, [pc, #240]	@ (8003b14 <HAL_GPIO_Init+0x6dc>)
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	43db      	mvns	r3, r3
 8003a2a:	69ba      	ldr	r2, [r7, #24]
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d003      	beq.n	8003a44 <HAL_GPIO_Init+0x60c>
        {
          temp |= iocurrent;
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a44:	4a33      	ldr	r2, [pc, #204]	@ (8003b14 <HAL_GPIO_Init+0x6dc>)
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a4a:	4b32      	ldr	r3, [pc, #200]	@ (8003b14 <HAL_GPIO_Init+0x6dc>)
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	43db      	mvns	r3, r3
 8003a54:	69ba      	ldr	r2, [r7, #24]
 8003a56:	4013      	ands	r3, r2
 8003a58:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d003      	beq.n	8003a6e <HAL_GPIO_Init+0x636>
        {
          temp |= iocurrent;
 8003a66:	69ba      	ldr	r2, [r7, #24]
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a6e:	4a29      	ldr	r2, [pc, #164]	@ (8003b14 <HAL_GPIO_Init+0x6dc>)
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a74:	4b27      	ldr	r3, [pc, #156]	@ (8003b14 <HAL_GPIO_Init+0x6dc>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	43db      	mvns	r3, r3
 8003a7e:	69ba      	ldr	r2, [r7, #24]
 8003a80:	4013      	ands	r3, r2
 8003a82:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d003      	beq.n	8003a98 <HAL_GPIO_Init+0x660>
        {
          temp |= iocurrent;
 8003a90:	69ba      	ldr	r2, [r7, #24]
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a98:	4a1e      	ldr	r2, [pc, #120]	@ (8003b14 <HAL_GPIO_Init+0x6dc>)
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a9e:	4b1d      	ldr	r3, [pc, #116]	@ (8003b14 <HAL_GPIO_Init+0x6dc>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	43db      	mvns	r3, r3
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	4013      	ands	r3, r2
 8003aac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d003      	beq.n	8003ac2 <HAL_GPIO_Init+0x68a>
        {
          temp |= iocurrent;
 8003aba:	69ba      	ldr	r2, [r7, #24]
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ac2:	4a14      	ldr	r2, [pc, #80]	@ (8003b14 <HAL_GPIO_Init+0x6dc>)
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	3301      	adds	r3, #1
 8003acc:	61fb      	str	r3, [r7, #28]
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	2b0f      	cmp	r3, #15
 8003ad2:	f67f ad4d 	bls.w	8003570 <HAL_GPIO_Init+0x138>
      }
    }
  }
}
 8003ad6:	bf00      	nop
 8003ad8:	bf00      	nop
 8003ada:	3720      	adds	r7, #32
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	0801092c 	.word	0x0801092c
 8003ae4:	40023800 	.word	0x40023800
 8003ae8:	40013800 	.word	0x40013800
 8003aec:	40020000 	.word	0x40020000
 8003af0:	40020400 	.word	0x40020400
 8003af4:	40020800 	.word	0x40020800
 8003af8:	40020c00 	.word	0x40020c00
 8003afc:	40021000 	.word	0x40021000
 8003b00:	40021400 	.word	0x40021400
 8003b04:	40021800 	.word	0x40021800
 8003b08:	40021c00 	.word	0x40021c00
 8003b0c:	40022000 	.word	0x40022000
 8003b10:	40022400 	.word	0x40022400
 8003b14:	40013c00 	.word	0x40013c00

08003b18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	460b      	mov	r3, r1
 8003b22:	807b      	strh	r3, [r7, #2]
 8003b24:	4613      	mov	r3, r2
 8003b26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003b28:	887b      	ldrh	r3, [r7, #2]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d104      	bne.n	8003b38 <HAL_GPIO_WritePin+0x20>
 8003b2e:	f240 1197 	movw	r1, #407	@ 0x197
 8003b32:	480e      	ldr	r0, [pc, #56]	@ (8003b6c <HAL_GPIO_WritePin+0x54>)
 8003b34:	f7fe fcfe 	bl	8002534 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003b38:	787b      	ldrb	r3, [r7, #1]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d007      	beq.n	8003b4e <HAL_GPIO_WritePin+0x36>
 8003b3e:	787b      	ldrb	r3, [r7, #1]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d004      	beq.n	8003b4e <HAL_GPIO_WritePin+0x36>
 8003b44:	f44f 71cc 	mov.w	r1, #408	@ 0x198
 8003b48:	4808      	ldr	r0, [pc, #32]	@ (8003b6c <HAL_GPIO_WritePin+0x54>)
 8003b4a:	f7fe fcf3 	bl	8002534 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8003b4e:	787b      	ldrb	r3, [r7, #1]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d003      	beq.n	8003b5c <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b54:	887a      	ldrh	r2, [r7, #2]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003b5a:	e003      	b.n	8003b64 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003b5c:	887b      	ldrh	r3, [r7, #2]
 8003b5e:	041a      	lsls	r2, r3, #16
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	619a      	str	r2, [r3, #24]
}
 8003b64:	bf00      	nop
 8003b66:	3708      	adds	r7, #8
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	0801092c 	.word	0x0801092c

08003b70 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b086      	sub	sp, #24
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e345      	b.n	8004212 <HAL_RCC_OscConfig+0x6a2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2b0f      	cmp	r3, #15
 8003b8c:	d904      	bls.n	8003b98 <HAL_RCC_OscConfig+0x28>
 8003b8e:	f240 1163 	movw	r1, #355	@ 0x163
 8003b92:	4892      	ldr	r0, [pc, #584]	@ (8003ddc <HAL_RCC_OscConfig+0x26c>)
 8003b94:	f7fe fcce 	bl	8002534 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0301 	and.w	r3, r3, #1
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f000 809a 	beq.w	8003cda <HAL_RCC_OscConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00e      	beq.n	8003bcc <HAL_RCC_OscConfig+0x5c>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bb6:	d009      	beq.n	8003bcc <HAL_RCC_OscConfig+0x5c>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003bc0:	d004      	beq.n	8003bcc <HAL_RCC_OscConfig+0x5c>
 8003bc2:	f240 1169 	movw	r1, #361	@ 0x169
 8003bc6:	4885      	ldr	r0, [pc, #532]	@ (8003ddc <HAL_RCC_OscConfig+0x26c>)
 8003bc8:	f7fe fcb4 	bl	8002534 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003bcc:	4b84      	ldr	r3, [pc, #528]	@ (8003de0 <HAL_RCC_OscConfig+0x270>)
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f003 030c 	and.w	r3, r3, #12
 8003bd4:	2b04      	cmp	r3, #4
 8003bd6:	d00c      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x82>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bd8:	4b81      	ldr	r3, [pc, #516]	@ (8003de0 <HAL_RCC_OscConfig+0x270>)
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f003 030c 	and.w	r3, r3, #12
 8003be0:	2b08      	cmp	r3, #8
 8003be2:	d112      	bne.n	8003c0a <HAL_RCC_OscConfig+0x9a>
 8003be4:	4b7e      	ldr	r3, [pc, #504]	@ (8003de0 <HAL_RCC_OscConfig+0x270>)
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bf0:	d10b      	bne.n	8003c0a <HAL_RCC_OscConfig+0x9a>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bf2:	4b7b      	ldr	r3, [pc, #492]	@ (8003de0 <HAL_RCC_OscConfig+0x270>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d06c      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x168>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d168      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e303      	b.n	8004212 <HAL_RCC_OscConfig+0x6a2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c12:	d106      	bne.n	8003c22 <HAL_RCC_OscConfig+0xb2>
 8003c14:	4b72      	ldr	r3, [pc, #456]	@ (8003de0 <HAL_RCC_OscConfig+0x270>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a71      	ldr	r2, [pc, #452]	@ (8003de0 <HAL_RCC_OscConfig+0x270>)
 8003c1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c1e:	6013      	str	r3, [r2, #0]
 8003c20:	e02e      	b.n	8003c80 <HAL_RCC_OscConfig+0x110>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d10c      	bne.n	8003c44 <HAL_RCC_OscConfig+0xd4>
 8003c2a:	4b6d      	ldr	r3, [pc, #436]	@ (8003de0 <HAL_RCC_OscConfig+0x270>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a6c      	ldr	r2, [pc, #432]	@ (8003de0 <HAL_RCC_OscConfig+0x270>)
 8003c30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c34:	6013      	str	r3, [r2, #0]
 8003c36:	4b6a      	ldr	r3, [pc, #424]	@ (8003de0 <HAL_RCC_OscConfig+0x270>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a69      	ldr	r2, [pc, #420]	@ (8003de0 <HAL_RCC_OscConfig+0x270>)
 8003c3c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c40:	6013      	str	r3, [r2, #0]
 8003c42:	e01d      	b.n	8003c80 <HAL_RCC_OscConfig+0x110>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c4c:	d10c      	bne.n	8003c68 <HAL_RCC_OscConfig+0xf8>
 8003c4e:	4b64      	ldr	r3, [pc, #400]	@ (8003de0 <HAL_RCC_OscConfig+0x270>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a63      	ldr	r2, [pc, #396]	@ (8003de0 <HAL_RCC_OscConfig+0x270>)
 8003c54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c58:	6013      	str	r3, [r2, #0]
 8003c5a:	4b61      	ldr	r3, [pc, #388]	@ (8003de0 <HAL_RCC_OscConfig+0x270>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a60      	ldr	r2, [pc, #384]	@ (8003de0 <HAL_RCC_OscConfig+0x270>)
 8003c60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c64:	6013      	str	r3, [r2, #0]
 8003c66:	e00b      	b.n	8003c80 <HAL_RCC_OscConfig+0x110>
 8003c68:	4b5d      	ldr	r3, [pc, #372]	@ (8003de0 <HAL_RCC_OscConfig+0x270>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a5c      	ldr	r2, [pc, #368]	@ (8003de0 <HAL_RCC_OscConfig+0x270>)
 8003c6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c72:	6013      	str	r3, [r2, #0]
 8003c74:	4b5a      	ldr	r3, [pc, #360]	@ (8003de0 <HAL_RCC_OscConfig+0x270>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a59      	ldr	r2, [pc, #356]	@ (8003de0 <HAL_RCC_OscConfig+0x270>)
 8003c7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d013      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x140>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c88:	f7ff f8da 	bl	8002e40 <HAL_GetTick>
 8003c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c8e:	e008      	b.n	8003ca2 <HAL_RCC_OscConfig+0x132>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c90:	f7ff f8d6 	bl	8002e40 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	2b64      	cmp	r3, #100	@ 0x64
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_OscConfig+0x132>
          {
            return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e2b7      	b.n	8004212 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ca2:	4b4f      	ldr	r3, [pc, #316]	@ (8003de0 <HAL_RCC_OscConfig+0x270>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d0f0      	beq.n	8003c90 <HAL_RCC_OscConfig+0x120>
 8003cae:	e014      	b.n	8003cda <HAL_RCC_OscConfig+0x16a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb0:	f7ff f8c6 	bl	8002e40 <HAL_GetTick>
 8003cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cb6:	e008      	b.n	8003cca <HAL_RCC_OscConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cb8:	f7ff f8c2 	bl	8002e40 <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b64      	cmp	r3, #100	@ 0x64
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e2a3      	b.n	8004212 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cca:	4b45      	ldr	r3, [pc, #276]	@ (8003de0 <HAL_RCC_OscConfig+0x270>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1f0      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x148>
 8003cd6:	e000      	b.n	8003cda <HAL_RCC_OscConfig+0x16a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f000 8084 	beq.w	8003df0 <HAL_RCC_OscConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d008      	beq.n	8003d02 <HAL_RCC_OscConfig+0x192>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d004      	beq.n	8003d02 <HAL_RCC_OscConfig+0x192>
 8003cf8:	f240 119b 	movw	r1, #411	@ 0x19b
 8003cfc:	4837      	ldr	r0, [pc, #220]	@ (8003ddc <HAL_RCC_OscConfig+0x26c>)
 8003cfe:	f7fe fc19 	bl	8002534 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	2b1f      	cmp	r3, #31
 8003d08:	d904      	bls.n	8003d14 <HAL_RCC_OscConfig+0x1a4>
 8003d0a:	f44f 71ce 	mov.w	r1, #412	@ 0x19c
 8003d0e:	4833      	ldr	r0, [pc, #204]	@ (8003ddc <HAL_RCC_OscConfig+0x26c>)
 8003d10:	f7fe fc10 	bl	8002534 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d14:	4b32      	ldr	r3, [pc, #200]	@ (8003de0 <HAL_RCC_OscConfig+0x270>)
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f003 030c 	and.w	r3, r3, #12
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00b      	beq.n	8003d38 <HAL_RCC_OscConfig+0x1c8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d20:	4b2f      	ldr	r3, [pc, #188]	@ (8003de0 <HAL_RCC_OscConfig+0x270>)
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f003 030c 	and.w	r3, r3, #12
 8003d28:	2b08      	cmp	r3, #8
 8003d2a:	d11c      	bne.n	8003d66 <HAL_RCC_OscConfig+0x1f6>
 8003d2c:	4b2c      	ldr	r3, [pc, #176]	@ (8003de0 <HAL_RCC_OscConfig+0x270>)
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d116      	bne.n	8003d66 <HAL_RCC_OscConfig+0x1f6>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d38:	4b29      	ldr	r3, [pc, #164]	@ (8003de0 <HAL_RCC_OscConfig+0x270>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0302 	and.w	r3, r3, #2
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d005      	beq.n	8003d50 <HAL_RCC_OscConfig+0x1e0>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d001      	beq.n	8003d50 <HAL_RCC_OscConfig+0x1e0>
      {
        return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e260      	b.n	8004212 <HAL_RCC_OscConfig+0x6a2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d50:	4b23      	ldr	r3, [pc, #140]	@ (8003de0 <HAL_RCC_OscConfig+0x270>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	00db      	lsls	r3, r3, #3
 8003d5e:	4920      	ldr	r1, [pc, #128]	@ (8003de0 <HAL_RCC_OscConfig+0x270>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d64:	e044      	b.n	8003df0 <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d023      	beq.n	8003db6 <HAL_RCC_OscConfig+0x246>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d6e:	4b1c      	ldr	r3, [pc, #112]	@ (8003de0 <HAL_RCC_OscConfig+0x270>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a1b      	ldr	r2, [pc, #108]	@ (8003de0 <HAL_RCC_OscConfig+0x270>)
 8003d74:	f043 0301 	orr.w	r3, r3, #1
 8003d78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d7a:	f7ff f861 	bl	8002e40 <HAL_GetTick>
 8003d7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d80:	e008      	b.n	8003d94 <HAL_RCC_OscConfig+0x224>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d82:	f7ff f85d 	bl	8002e40 <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d901      	bls.n	8003d94 <HAL_RCC_OscConfig+0x224>
          {
            return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e23e      	b.n	8004212 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d94:	4b12      	ldr	r3, [pc, #72]	@ (8003de0 <HAL_RCC_OscConfig+0x270>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0302 	and.w	r3, r3, #2
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d0f0      	beq.n	8003d82 <HAL_RCC_OscConfig+0x212>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003da0:	4b0f      	ldr	r3, [pc, #60]	@ (8003de0 <HAL_RCC_OscConfig+0x270>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	00db      	lsls	r3, r3, #3
 8003dae:	490c      	ldr	r1, [pc, #48]	@ (8003de0 <HAL_RCC_OscConfig+0x270>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	600b      	str	r3, [r1, #0]
 8003db4:	e01c      	b.n	8003df0 <HAL_RCC_OscConfig+0x280>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003db6:	4b0a      	ldr	r3, [pc, #40]	@ (8003de0 <HAL_RCC_OscConfig+0x270>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a09      	ldr	r2, [pc, #36]	@ (8003de0 <HAL_RCC_OscConfig+0x270>)
 8003dbc:	f023 0301 	bic.w	r3, r3, #1
 8003dc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc2:	f7ff f83d 	bl	8002e40 <HAL_GetTick>
 8003dc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dc8:	e00c      	b.n	8003de4 <HAL_RCC_OscConfig+0x274>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dca:	f7ff f839 	bl	8002e40 <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d905      	bls.n	8003de4 <HAL_RCC_OscConfig+0x274>
          {
            return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e21a      	b.n	8004212 <HAL_RCC_OscConfig+0x6a2>
 8003ddc:	08010968 	.word	0x08010968
 8003de0:	40023800 	.word	0x40023800
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003de4:	4b7e      	ldr	r3, [pc, #504]	@ (8003fe0 <HAL_RCC_OscConfig+0x470>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0302 	and.w	r3, r3, #2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1ec      	bne.n	8003dca <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0308 	and.w	r3, r3, #8
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d043      	beq.n	8003e84 <HAL_RCC_OscConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	695b      	ldr	r3, [r3, #20]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d008      	beq.n	8003e16 <HAL_RCC_OscConfig+0x2a6>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	695b      	ldr	r3, [r3, #20]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d004      	beq.n	8003e16 <HAL_RCC_OscConfig+0x2a6>
 8003e0c:	f44f 71ee 	mov.w	r1, #476	@ 0x1dc
 8003e10:	4874      	ldr	r0, [pc, #464]	@ (8003fe4 <HAL_RCC_OscConfig+0x474>)
 8003e12:	f7fe fb8f 	bl	8002534 <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d019      	beq.n	8003e52 <HAL_RCC_OscConfig+0x2e2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e1e:	4b70      	ldr	r3, [pc, #448]	@ (8003fe0 <HAL_RCC_OscConfig+0x470>)
 8003e20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e22:	4a6f      	ldr	r2, [pc, #444]	@ (8003fe0 <HAL_RCC_OscConfig+0x470>)
 8003e24:	f043 0301 	orr.w	r3, r3, #1
 8003e28:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e2a:	f7ff f809 	bl	8002e40 <HAL_GetTick>
 8003e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e30:	e008      	b.n	8003e44 <HAL_RCC_OscConfig+0x2d4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e32:	f7ff f805 	bl	8002e40 <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d901      	bls.n	8003e44 <HAL_RCC_OscConfig+0x2d4>
        {
          return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e1e6      	b.n	8004212 <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e44:	4b66      	ldr	r3, [pc, #408]	@ (8003fe0 <HAL_RCC_OscConfig+0x470>)
 8003e46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e48:	f003 0302 	and.w	r3, r3, #2
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d0f0      	beq.n	8003e32 <HAL_RCC_OscConfig+0x2c2>
 8003e50:	e018      	b.n	8003e84 <HAL_RCC_OscConfig+0x314>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e52:	4b63      	ldr	r3, [pc, #396]	@ (8003fe0 <HAL_RCC_OscConfig+0x470>)
 8003e54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e56:	4a62      	ldr	r2, [pc, #392]	@ (8003fe0 <HAL_RCC_OscConfig+0x470>)
 8003e58:	f023 0301 	bic.w	r3, r3, #1
 8003e5c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e5e:	f7fe ffef 	bl	8002e40 <HAL_GetTick>
 8003e62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e64:	e008      	b.n	8003e78 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e66:	f7fe ffeb 	bl	8002e40 <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d901      	bls.n	8003e78 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e1cc      	b.n	8004212 <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e78:	4b59      	ldr	r3, [pc, #356]	@ (8003fe0 <HAL_RCC_OscConfig+0x470>)
 8003e7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d1f0      	bne.n	8003e66 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0304 	and.w	r3, r3, #4
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f000 80bc 	beq.w	800400a <HAL_RCC_OscConfig+0x49a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00c      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x344>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d008      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x344>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	2b05      	cmp	r3, #5
 8003ea8:	d004      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x344>
 8003eaa:	f240 2106 	movw	r1, #518	@ 0x206
 8003eae:	484d      	ldr	r0, [pc, #308]	@ (8003fe4 <HAL_RCC_OscConfig+0x474>)
 8003eb0:	f7fe fb40 	bl	8002534 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eb4:	4b4a      	ldr	r3, [pc, #296]	@ (8003fe0 <HAL_RCC_OscConfig+0x470>)
 8003eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d10d      	bne.n	8003edc <HAL_RCC_OscConfig+0x36c>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ec0:	4b47      	ldr	r3, [pc, #284]	@ (8003fe0 <HAL_RCC_OscConfig+0x470>)
 8003ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec4:	4a46      	ldr	r2, [pc, #280]	@ (8003fe0 <HAL_RCC_OscConfig+0x470>)
 8003ec6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003eca:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ecc:	4b44      	ldr	r3, [pc, #272]	@ (8003fe0 <HAL_RCC_OscConfig+0x470>)
 8003ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ed4:	60bb      	str	r3, [r7, #8]
 8003ed6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003edc:	4b42      	ldr	r3, [pc, #264]	@ (8003fe8 <HAL_RCC_OscConfig+0x478>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d118      	bne.n	8003f1a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003ee8:	4b3f      	ldr	r3, [pc, #252]	@ (8003fe8 <HAL_RCC_OscConfig+0x478>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a3e      	ldr	r2, [pc, #248]	@ (8003fe8 <HAL_RCC_OscConfig+0x478>)
 8003eee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ef2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ef4:	f7fe ffa4 	bl	8002e40 <HAL_GetTick>
 8003ef8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003efa:	e008      	b.n	8003f0e <HAL_RCC_OscConfig+0x39e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003efc:	f7fe ffa0 	bl	8002e40 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	2b64      	cmp	r3, #100	@ 0x64
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e181      	b.n	8004212 <HAL_RCC_OscConfig+0x6a2>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f0e:	4b36      	ldr	r3, [pc, #216]	@ (8003fe8 <HAL_RCC_OscConfig+0x478>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d0f0      	beq.n	8003efc <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d106      	bne.n	8003f30 <HAL_RCC_OscConfig+0x3c0>
 8003f22:	4b2f      	ldr	r3, [pc, #188]	@ (8003fe0 <HAL_RCC_OscConfig+0x470>)
 8003f24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f26:	4a2e      	ldr	r2, [pc, #184]	@ (8003fe0 <HAL_RCC_OscConfig+0x470>)
 8003f28:	f043 0301 	orr.w	r3, r3, #1
 8003f2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f2e:	e02d      	b.n	8003f8c <HAL_RCC_OscConfig+0x41c>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d10c      	bne.n	8003f52 <HAL_RCC_OscConfig+0x3e2>
 8003f38:	4b29      	ldr	r3, [pc, #164]	@ (8003fe0 <HAL_RCC_OscConfig+0x470>)
 8003f3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f3c:	4a28      	ldr	r2, [pc, #160]	@ (8003fe0 <HAL_RCC_OscConfig+0x470>)
 8003f3e:	f023 0301 	bic.w	r3, r3, #1
 8003f42:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f44:	4b26      	ldr	r3, [pc, #152]	@ (8003fe0 <HAL_RCC_OscConfig+0x470>)
 8003f46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f48:	4a25      	ldr	r2, [pc, #148]	@ (8003fe0 <HAL_RCC_OscConfig+0x470>)
 8003f4a:	f023 0304 	bic.w	r3, r3, #4
 8003f4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f50:	e01c      	b.n	8003f8c <HAL_RCC_OscConfig+0x41c>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	2b05      	cmp	r3, #5
 8003f58:	d10c      	bne.n	8003f74 <HAL_RCC_OscConfig+0x404>
 8003f5a:	4b21      	ldr	r3, [pc, #132]	@ (8003fe0 <HAL_RCC_OscConfig+0x470>)
 8003f5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f5e:	4a20      	ldr	r2, [pc, #128]	@ (8003fe0 <HAL_RCC_OscConfig+0x470>)
 8003f60:	f043 0304 	orr.w	r3, r3, #4
 8003f64:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f66:	4b1e      	ldr	r3, [pc, #120]	@ (8003fe0 <HAL_RCC_OscConfig+0x470>)
 8003f68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f6a:	4a1d      	ldr	r2, [pc, #116]	@ (8003fe0 <HAL_RCC_OscConfig+0x470>)
 8003f6c:	f043 0301 	orr.w	r3, r3, #1
 8003f70:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f72:	e00b      	b.n	8003f8c <HAL_RCC_OscConfig+0x41c>
 8003f74:	4b1a      	ldr	r3, [pc, #104]	@ (8003fe0 <HAL_RCC_OscConfig+0x470>)
 8003f76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f78:	4a19      	ldr	r2, [pc, #100]	@ (8003fe0 <HAL_RCC_OscConfig+0x470>)
 8003f7a:	f023 0301 	bic.w	r3, r3, #1
 8003f7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f80:	4b17      	ldr	r3, [pc, #92]	@ (8003fe0 <HAL_RCC_OscConfig+0x470>)
 8003f82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f84:	4a16      	ldr	r2, [pc, #88]	@ (8003fe0 <HAL_RCC_OscConfig+0x470>)
 8003f86:	f023 0304 	bic.w	r3, r3, #4
 8003f8a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d015      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x450>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f94:	f7fe ff54 	bl	8002e40 <HAL_GetTick>
 8003f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f9a:	e00a      	b.n	8003fb2 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f9c:	f7fe ff50 	bl	8002e40 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e12f      	b.n	8004212 <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fb2:	4b0b      	ldr	r3, [pc, #44]	@ (8003fe0 <HAL_RCC_OscConfig+0x470>)
 8003fb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fb6:	f003 0302 	and.w	r3, r3, #2
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d0ee      	beq.n	8003f9c <HAL_RCC_OscConfig+0x42c>
 8003fbe:	e01b      	b.n	8003ff8 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fc0:	f7fe ff3e 	bl	8002e40 <HAL_GetTick>
 8003fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fc6:	e011      	b.n	8003fec <HAL_RCC_OscConfig+0x47c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fc8:	f7fe ff3a 	bl	8002e40 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d908      	bls.n	8003fec <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e119      	b.n	8004212 <HAL_RCC_OscConfig+0x6a2>
 8003fde:	bf00      	nop
 8003fe0:	40023800 	.word	0x40023800
 8003fe4:	08010968 	.word	0x08010968
 8003fe8:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fec:	4b8b      	ldr	r3, [pc, #556]	@ (800421c <HAL_RCC_OscConfig+0x6ac>)
 8003fee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ff0:	f003 0302 	and.w	r3, r3, #2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1e7      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x458>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ff8:	7dfb      	ldrb	r3, [r7, #23]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d105      	bne.n	800400a <HAL_RCC_OscConfig+0x49a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ffe:	4b87      	ldr	r3, [pc, #540]	@ (800421c <HAL_RCC_OscConfig+0x6ac>)
 8004000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004002:	4a86      	ldr	r2, [pc, #536]	@ (800421c <HAL_RCC_OscConfig+0x6ac>)
 8004004:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004008:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00c      	beq.n	800402c <HAL_RCC_OscConfig+0x4bc>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	2b01      	cmp	r3, #1
 8004018:	d008      	beq.n	800402c <HAL_RCC_OscConfig+0x4bc>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	2b02      	cmp	r3, #2
 8004020:	d004      	beq.n	800402c <HAL_RCC_OscConfig+0x4bc>
 8004022:	f240 214a 	movw	r1, #586	@ 0x24a
 8004026:	487e      	ldr	r0, [pc, #504]	@ (8004220 <HAL_RCC_OscConfig+0x6b0>)
 8004028:	f7fe fa84 	bl	8002534 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	699b      	ldr	r3, [r3, #24]
 8004030:	2b00      	cmp	r3, #0
 8004032:	f000 80ed 	beq.w	8004210 <HAL_RCC_OscConfig+0x6a0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004036:	4b79      	ldr	r3, [pc, #484]	@ (800421c <HAL_RCC_OscConfig+0x6ac>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f003 030c 	and.w	r3, r3, #12
 800403e:	2b08      	cmp	r3, #8
 8004040:	f000 80b4 	beq.w	80041ac <HAL_RCC_OscConfig+0x63c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	2b02      	cmp	r3, #2
 800404a:	f040 8095 	bne.w	8004178 <HAL_RCC_OscConfig+0x608>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	69db      	ldr	r3, [r3, #28]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d009      	beq.n	800406a <HAL_RCC_OscConfig+0x4fa>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	69db      	ldr	r3, [r3, #28]
 800405a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800405e:	d004      	beq.n	800406a <HAL_RCC_OscConfig+0x4fa>
 8004060:	f240 2153 	movw	r1, #595	@ 0x253
 8004064:	486e      	ldr	r0, [pc, #440]	@ (8004220 <HAL_RCC_OscConfig+0x6b0>)
 8004066:	f7fe fa65 	bl	8002534 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a1b      	ldr	r3, [r3, #32]
 800406e:	2b01      	cmp	r3, #1
 8004070:	d903      	bls.n	800407a <HAL_RCC_OscConfig+0x50a>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a1b      	ldr	r3, [r3, #32]
 8004076:	2b3f      	cmp	r3, #63	@ 0x3f
 8004078:	d904      	bls.n	8004084 <HAL_RCC_OscConfig+0x514>
 800407a:	f44f 7115 	mov.w	r1, #596	@ 0x254
 800407e:	4868      	ldr	r0, [pc, #416]	@ (8004220 <HAL_RCC_OscConfig+0x6b0>)
 8004080:	f7fe fa58 	bl	8002534 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004088:	2b31      	cmp	r3, #49	@ 0x31
 800408a:	d904      	bls.n	8004096 <HAL_RCC_OscConfig+0x526>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004090:	f5b3 7fd8 	cmp.w	r3, #432	@ 0x1b0
 8004094:	d904      	bls.n	80040a0 <HAL_RCC_OscConfig+0x530>
 8004096:	f240 2155 	movw	r1, #597	@ 0x255
 800409a:	4861      	ldr	r0, [pc, #388]	@ (8004220 <HAL_RCC_OscConfig+0x6b0>)
 800409c:	f7fe fa4a 	bl	8002534 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d010      	beq.n	80040ca <HAL_RCC_OscConfig+0x55a>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ac:	2b04      	cmp	r3, #4
 80040ae:	d00c      	beq.n	80040ca <HAL_RCC_OscConfig+0x55a>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040b4:	2b06      	cmp	r3, #6
 80040b6:	d008      	beq.n	80040ca <HAL_RCC_OscConfig+0x55a>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040bc:	2b08      	cmp	r3, #8
 80040be:	d004      	beq.n	80040ca <HAL_RCC_OscConfig+0x55a>
 80040c0:	f240 2156 	movw	r1, #598	@ 0x256
 80040c4:	4856      	ldr	r0, [pc, #344]	@ (8004220 <HAL_RCC_OscConfig+0x6b0>)
 80040c6:	f7fe fa35 	bl	8002534 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d903      	bls.n	80040da <HAL_RCC_OscConfig+0x56a>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040d6:	2b0f      	cmp	r3, #15
 80040d8:	d904      	bls.n	80040e4 <HAL_RCC_OscConfig+0x574>
 80040da:	f240 2157 	movw	r1, #599	@ 0x257
 80040de:	4850      	ldr	r0, [pc, #320]	@ (8004220 <HAL_RCC_OscConfig+0x6b0>)
 80040e0:	f7fe fa28 	bl	8002534 <assert_failed>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040e4:	4b4d      	ldr	r3, [pc, #308]	@ (800421c <HAL_RCC_OscConfig+0x6ac>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a4c      	ldr	r2, [pc, #304]	@ (800421c <HAL_RCC_OscConfig+0x6ac>)
 80040ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f0:	f7fe fea6 	bl	8002e40 <HAL_GetTick>
 80040f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040f6:	e008      	b.n	800410a <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040f8:	f7fe fea2 	bl	8002e40 <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	2b02      	cmp	r3, #2
 8004104:	d901      	bls.n	800410a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e083      	b.n	8004212 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800410a:	4b44      	ldr	r3, [pc, #272]	@ (800421c <HAL_RCC_OscConfig+0x6ac>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1f0      	bne.n	80040f8 <HAL_RCC_OscConfig+0x588>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	69da      	ldr	r2, [r3, #28]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a1b      	ldr	r3, [r3, #32]
 800411e:	431a      	orrs	r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004124:	019b      	lsls	r3, r3, #6
 8004126:	431a      	orrs	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800412c:	085b      	lsrs	r3, r3, #1
 800412e:	3b01      	subs	r3, #1
 8004130:	041b      	lsls	r3, r3, #16
 8004132:	431a      	orrs	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004138:	061b      	lsls	r3, r3, #24
 800413a:	4313      	orrs	r3, r2
 800413c:	4a37      	ldr	r2, [pc, #220]	@ (800421c <HAL_RCC_OscConfig+0x6ac>)
 800413e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004142:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004144:	4b35      	ldr	r3, [pc, #212]	@ (800421c <HAL_RCC_OscConfig+0x6ac>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a34      	ldr	r2, [pc, #208]	@ (800421c <HAL_RCC_OscConfig+0x6ac>)
 800414a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800414e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004150:	f7fe fe76 	bl	8002e40 <HAL_GetTick>
 8004154:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004156:	e008      	b.n	800416a <HAL_RCC_OscConfig+0x5fa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004158:	f7fe fe72 	bl	8002e40 <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	2b02      	cmp	r3, #2
 8004164:	d901      	bls.n	800416a <HAL_RCC_OscConfig+0x5fa>
          {
            return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e053      	b.n	8004212 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800416a:	4b2c      	ldr	r3, [pc, #176]	@ (800421c <HAL_RCC_OscConfig+0x6ac>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d0f0      	beq.n	8004158 <HAL_RCC_OscConfig+0x5e8>
 8004176:	e04b      	b.n	8004210 <HAL_RCC_OscConfig+0x6a0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004178:	4b28      	ldr	r3, [pc, #160]	@ (800421c <HAL_RCC_OscConfig+0x6ac>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a27      	ldr	r2, [pc, #156]	@ (800421c <HAL_RCC_OscConfig+0x6ac>)
 800417e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004182:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004184:	f7fe fe5c 	bl	8002e40 <HAL_GetTick>
 8004188:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800418a:	e008      	b.n	800419e <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800418c:	f7fe fe58 	bl	8002e40 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	2b02      	cmp	r3, #2
 8004198:	d901      	bls.n	800419e <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e039      	b.n	8004212 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800419e:	4b1f      	ldr	r3, [pc, #124]	@ (800421c <HAL_RCC_OscConfig+0x6ac>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d1f0      	bne.n	800418c <HAL_RCC_OscConfig+0x61c>
 80041aa:	e031      	b.n	8004210 <HAL_RCC_OscConfig+0x6a0>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80041ac:	4b1b      	ldr	r3, [pc, #108]	@ (800421c <HAL_RCC_OscConfig+0x6ac>)
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d028      	beq.n	800420c <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d121      	bne.n	800420c <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d11a      	bne.n	800420c <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80041dc:	4013      	ands	r3, r2
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80041e2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d111      	bne.n	800420c <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041f2:	085b      	lsrs	r3, r3, #1
 80041f4:	3b01      	subs	r3, #1
 80041f6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d107      	bne.n	800420c <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004206:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004208:	429a      	cmp	r2, r3
 800420a:	d001      	beq.n	8004210 <HAL_RCC_OscConfig+0x6a0>
#endif
      {
        return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e000      	b.n	8004212 <HAL_RCC_OscConfig+0x6a2>
      }
    }
  }
  return HAL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3718      	adds	r7, #24
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	40023800 	.word	0x40023800
 8004220:	08010968 	.word	0x08010968

08004224 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800422e:	2300      	movs	r3, #0
 8004230:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d101      	bne.n	800423c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e18c      	b.n	8004556 <HAL_RCC_ClockConfig+0x332>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d003      	beq.n	800424c <HAL_RCC_ClockConfig+0x28>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2b0f      	cmp	r3, #15
 800424a:	d904      	bls.n	8004256 <HAL_RCC_ClockConfig+0x32>
 800424c:	f240 21dd 	movw	r1, #733	@ 0x2dd
 8004250:	4887      	ldr	r0, [pc, #540]	@ (8004470 <HAL_RCC_ClockConfig+0x24c>)
 8004252:	f7fe f96f 	bl	8002534 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d031      	beq.n	80042c0 <HAL_RCC_ClockConfig+0x9c>
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	2b01      	cmp	r3, #1
 8004260:	d02e      	beq.n	80042c0 <HAL_RCC_ClockConfig+0x9c>
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	2b02      	cmp	r3, #2
 8004266:	d02b      	beq.n	80042c0 <HAL_RCC_ClockConfig+0x9c>
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	2b03      	cmp	r3, #3
 800426c:	d028      	beq.n	80042c0 <HAL_RCC_ClockConfig+0x9c>
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	2b04      	cmp	r3, #4
 8004272:	d025      	beq.n	80042c0 <HAL_RCC_ClockConfig+0x9c>
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	2b05      	cmp	r3, #5
 8004278:	d022      	beq.n	80042c0 <HAL_RCC_ClockConfig+0x9c>
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	2b06      	cmp	r3, #6
 800427e:	d01f      	beq.n	80042c0 <HAL_RCC_ClockConfig+0x9c>
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	2b07      	cmp	r3, #7
 8004284:	d01c      	beq.n	80042c0 <HAL_RCC_ClockConfig+0x9c>
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	2b08      	cmp	r3, #8
 800428a:	d019      	beq.n	80042c0 <HAL_RCC_ClockConfig+0x9c>
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	2b09      	cmp	r3, #9
 8004290:	d016      	beq.n	80042c0 <HAL_RCC_ClockConfig+0x9c>
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	2b0a      	cmp	r3, #10
 8004296:	d013      	beq.n	80042c0 <HAL_RCC_ClockConfig+0x9c>
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	2b0b      	cmp	r3, #11
 800429c:	d010      	beq.n	80042c0 <HAL_RCC_ClockConfig+0x9c>
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	2b0c      	cmp	r3, #12
 80042a2:	d00d      	beq.n	80042c0 <HAL_RCC_ClockConfig+0x9c>
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	2b0d      	cmp	r3, #13
 80042a8:	d00a      	beq.n	80042c0 <HAL_RCC_ClockConfig+0x9c>
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	2b0e      	cmp	r3, #14
 80042ae:	d007      	beq.n	80042c0 <HAL_RCC_ClockConfig+0x9c>
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	2b0f      	cmp	r3, #15
 80042b4:	d004      	beq.n	80042c0 <HAL_RCC_ClockConfig+0x9c>
 80042b6:	f240 21de 	movw	r1, #734	@ 0x2de
 80042ba:	486d      	ldr	r0, [pc, #436]	@ (8004470 <HAL_RCC_ClockConfig+0x24c>)
 80042bc:	f7fe f93a 	bl	8002534 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042c0:	4b6c      	ldr	r3, [pc, #432]	@ (8004474 <HAL_RCC_ClockConfig+0x250>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 030f 	and.w	r3, r3, #15
 80042c8:	683a      	ldr	r2, [r7, #0]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d910      	bls.n	80042f0 <HAL_RCC_ClockConfig+0xcc>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ce:	4b69      	ldr	r3, [pc, #420]	@ (8004474 <HAL_RCC_ClockConfig+0x250>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f023 020f 	bic.w	r2, r3, #15
 80042d6:	4967      	ldr	r1, [pc, #412]	@ (8004474 <HAL_RCC_ClockConfig+0x250>)
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	4313      	orrs	r3, r2
 80042dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042de:	4b65      	ldr	r3, [pc, #404]	@ (8004474 <HAL_RCC_ClockConfig+0x250>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 030f 	and.w	r3, r3, #15
 80042e6:	683a      	ldr	r2, [r7, #0]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d001      	beq.n	80042f0 <HAL_RCC_ClockConfig+0xcc>
    {
      return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e132      	b.n	8004556 <HAL_RCC_ClockConfig+0x332>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0302 	and.w	r3, r3, #2
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d049      	beq.n	8004390 <HAL_RCC_ClockConfig+0x16c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0304 	and.w	r3, r3, #4
 8004304:	2b00      	cmp	r3, #0
 8004306:	d005      	beq.n	8004314 <HAL_RCC_ClockConfig+0xf0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004308:	4b5b      	ldr	r3, [pc, #364]	@ (8004478 <HAL_RCC_ClockConfig+0x254>)
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	4a5a      	ldr	r2, [pc, #360]	@ (8004478 <HAL_RCC_ClockConfig+0x254>)
 800430e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004312:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0308 	and.w	r3, r3, #8
 800431c:	2b00      	cmp	r3, #0
 800431e:	d005      	beq.n	800432c <HAL_RCC_ClockConfig+0x108>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004320:	4b55      	ldr	r3, [pc, #340]	@ (8004478 <HAL_RCC_ClockConfig+0x254>)
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	4a54      	ldr	r2, [pc, #336]	@ (8004478 <HAL_RCC_ClockConfig+0x254>)
 8004326:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800432a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d024      	beq.n	800437e <HAL_RCC_ClockConfig+0x15a>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	2b80      	cmp	r3, #128	@ 0x80
 800433a:	d020      	beq.n	800437e <HAL_RCC_ClockConfig+0x15a>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	2b90      	cmp	r3, #144	@ 0x90
 8004342:	d01c      	beq.n	800437e <HAL_RCC_ClockConfig+0x15a>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	2ba0      	cmp	r3, #160	@ 0xa0
 800434a:	d018      	beq.n	800437e <HAL_RCC_ClockConfig+0x15a>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	2bb0      	cmp	r3, #176	@ 0xb0
 8004352:	d014      	beq.n	800437e <HAL_RCC_ClockConfig+0x15a>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	2bc0      	cmp	r3, #192	@ 0xc0
 800435a:	d010      	beq.n	800437e <HAL_RCC_ClockConfig+0x15a>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	2bd0      	cmp	r3, #208	@ 0xd0
 8004362:	d00c      	beq.n	800437e <HAL_RCC_ClockConfig+0x15a>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	2be0      	cmp	r3, #224	@ 0xe0
 800436a:	d008      	beq.n	800437e <HAL_RCC_ClockConfig+0x15a>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	2bf0      	cmp	r3, #240	@ 0xf0
 8004372:	d004      	beq.n	800437e <HAL_RCC_ClockConfig+0x15a>
 8004374:	f240 3102 	movw	r1, #770	@ 0x302
 8004378:	483d      	ldr	r0, [pc, #244]	@ (8004470 <HAL_RCC_ClockConfig+0x24c>)
 800437a:	f7fe f8db 	bl	8002534 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800437e:	4b3e      	ldr	r3, [pc, #248]	@ (8004478 <HAL_RCC_ClockConfig+0x254>)
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	493b      	ldr	r1, [pc, #236]	@ (8004478 <HAL_RCC_ClockConfig+0x254>)
 800438c:	4313      	orrs	r3, r2
 800438e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0301 	and.w	r3, r3, #1
 8004398:	2b00      	cmp	r3, #0
 800439a:	d051      	beq.n	8004440 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d00c      	beq.n	80043be <HAL_RCC_ClockConfig+0x19a>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d008      	beq.n	80043be <HAL_RCC_ClockConfig+0x19a>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d004      	beq.n	80043be <HAL_RCC_ClockConfig+0x19a>
 80043b4:	f240 3109 	movw	r1, #777	@ 0x309
 80043b8:	482d      	ldr	r0, [pc, #180]	@ (8004470 <HAL_RCC_ClockConfig+0x24c>)
 80043ba:	f7fe f8bb 	bl	8002534 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d107      	bne.n	80043d6 <HAL_RCC_ClockConfig+0x1b2>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043c6:	4b2c      	ldr	r3, [pc, #176]	@ (8004478 <HAL_RCC_ClockConfig+0x254>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d115      	bne.n	80043fe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e0bf      	b.n	8004556 <HAL_RCC_ClockConfig+0x332>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d107      	bne.n	80043ee <HAL_RCC_ClockConfig+0x1ca>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043de:	4b26      	ldr	r3, [pc, #152]	@ (8004478 <HAL_RCC_ClockConfig+0x254>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d109      	bne.n	80043fe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e0b3      	b.n	8004556 <HAL_RCC_ClockConfig+0x332>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043ee:	4b22      	ldr	r3, [pc, #136]	@ (8004478 <HAL_RCC_ClockConfig+0x254>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e0ab      	b.n	8004556 <HAL_RCC_ClockConfig+0x332>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043fe:	4b1e      	ldr	r3, [pc, #120]	@ (8004478 <HAL_RCC_ClockConfig+0x254>)
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f023 0203 	bic.w	r2, r3, #3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	491b      	ldr	r1, [pc, #108]	@ (8004478 <HAL_RCC_ClockConfig+0x254>)
 800440c:	4313      	orrs	r3, r2
 800440e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004410:	f7fe fd16 	bl	8002e40 <HAL_GetTick>
 8004414:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004416:	e00a      	b.n	800442e <HAL_RCC_ClockConfig+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004418:	f7fe fd12 	bl	8002e40 <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004426:	4293      	cmp	r3, r2
 8004428:	d901      	bls.n	800442e <HAL_RCC_ClockConfig+0x20a>
      {
        return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e093      	b.n	8004556 <HAL_RCC_ClockConfig+0x332>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800442e:	4b12      	ldr	r3, [pc, #72]	@ (8004478 <HAL_RCC_ClockConfig+0x254>)
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f003 020c 	and.w	r2, r3, #12
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	429a      	cmp	r2, r3
 800443e:	d1eb      	bne.n	8004418 <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004440:	4b0c      	ldr	r3, [pc, #48]	@ (8004474 <HAL_RCC_ClockConfig+0x250>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 030f 	and.w	r3, r3, #15
 8004448:	683a      	ldr	r2, [r7, #0]
 800444a:	429a      	cmp	r2, r3
 800444c:	d216      	bcs.n	800447c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800444e:	4b09      	ldr	r3, [pc, #36]	@ (8004474 <HAL_RCC_ClockConfig+0x250>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f023 020f 	bic.w	r2, r3, #15
 8004456:	4907      	ldr	r1, [pc, #28]	@ (8004474 <HAL_RCC_ClockConfig+0x250>)
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	4313      	orrs	r3, r2
 800445c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800445e:	4b05      	ldr	r3, [pc, #20]	@ (8004474 <HAL_RCC_ClockConfig+0x250>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 030f 	and.w	r3, r3, #15
 8004466:	683a      	ldr	r2, [r7, #0]
 8004468:	429a      	cmp	r2, r3
 800446a:	d007      	beq.n	800447c <HAL_RCC_ClockConfig+0x258>
    {
      return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e072      	b.n	8004556 <HAL_RCC_ClockConfig+0x332>
 8004470:	08010968 	.word	0x08010968
 8004474:	40023c00 	.word	0x40023c00
 8004478:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0304 	and.w	r3, r3, #4
 8004484:	2b00      	cmp	r3, #0
 8004486:	d025      	beq.n	80044d4 <HAL_RCC_ClockConfig+0x2b0>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d018      	beq.n	80044c2 <HAL_RCC_ClockConfig+0x29e>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004498:	d013      	beq.n	80044c2 <HAL_RCC_ClockConfig+0x29e>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80044a2:	d00e      	beq.n	80044c2 <HAL_RCC_ClockConfig+0x29e>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 80044ac:	d009      	beq.n	80044c2 <HAL_RCC_ClockConfig+0x29e>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 80044b6:	d004      	beq.n	80044c2 <HAL_RCC_ClockConfig+0x29e>
 80044b8:	f240 3146 	movw	r1, #838	@ 0x346
 80044bc:	4828      	ldr	r0, [pc, #160]	@ (8004560 <HAL_RCC_ClockConfig+0x33c>)
 80044be:	f7fe f839 	bl	8002534 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044c2:	4b28      	ldr	r3, [pc, #160]	@ (8004564 <HAL_RCC_ClockConfig+0x340>)
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	4925      	ldr	r1, [pc, #148]	@ (8004564 <HAL_RCC_ClockConfig+0x340>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0308 	and.w	r3, r3, #8
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d026      	beq.n	800452e <HAL_RCC_ClockConfig+0x30a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d018      	beq.n	800451a <HAL_RCC_ClockConfig+0x2f6>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044f0:	d013      	beq.n	800451a <HAL_RCC_ClockConfig+0x2f6>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80044fa:	d00e      	beq.n	800451a <HAL_RCC_ClockConfig+0x2f6>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8004504:	d009      	beq.n	800451a <HAL_RCC_ClockConfig+0x2f6>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 800450e:	d004      	beq.n	800451a <HAL_RCC_ClockConfig+0x2f6>
 8004510:	f240 314d 	movw	r1, #845	@ 0x34d
 8004514:	4812      	ldr	r0, [pc, #72]	@ (8004560 <HAL_RCC_ClockConfig+0x33c>)
 8004516:	f7fe f80d 	bl	8002534 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800451a:	4b12      	ldr	r3, [pc, #72]	@ (8004564 <HAL_RCC_ClockConfig+0x340>)
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	00db      	lsls	r3, r3, #3
 8004528:	490e      	ldr	r1, [pc, #56]	@ (8004564 <HAL_RCC_ClockConfig+0x340>)
 800452a:	4313      	orrs	r3, r2
 800452c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800452e:	f000 f821 	bl	8004574 <HAL_RCC_GetSysClockFreq>
 8004532:	4602      	mov	r2, r0
 8004534:	4b0b      	ldr	r3, [pc, #44]	@ (8004564 <HAL_RCC_ClockConfig+0x340>)
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	091b      	lsrs	r3, r3, #4
 800453a:	f003 030f 	and.w	r3, r3, #15
 800453e:	490a      	ldr	r1, [pc, #40]	@ (8004568 <HAL_RCC_ClockConfig+0x344>)
 8004540:	5ccb      	ldrb	r3, [r1, r3]
 8004542:	fa22 f303 	lsr.w	r3, r2, r3
 8004546:	4a09      	ldr	r2, [pc, #36]	@ (800456c <HAL_RCC_ClockConfig+0x348>)
 8004548:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800454a:	4b09      	ldr	r3, [pc, #36]	@ (8004570 <HAL_RCC_ClockConfig+0x34c>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4618      	mov	r0, r3
 8004550:	f7fe fc32 	bl	8002db8 <HAL_InitTick>

  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3710      	adds	r7, #16
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	08010968 	.word	0x08010968
 8004564:	40023800 	.word	0x40023800
 8004568:	08010f74 	.word	0x08010f74
 800456c:	20000004 	.word	0x20000004
 8004570:	20000008 	.word	0x20000008

08004574 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004574:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004578:	b090      	sub	sp, #64	@ 0x40
 800457a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800457c:	2300      	movs	r3, #0
 800457e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004580:	2300      	movs	r3, #0
 8004582:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004584:	2300      	movs	r3, #0
 8004586:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8004588:	2300      	movs	r3, #0
 800458a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800458c:	4b59      	ldr	r3, [pc, #356]	@ (80046f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	f003 030c 	and.w	r3, r3, #12
 8004594:	2b08      	cmp	r3, #8
 8004596:	d00d      	beq.n	80045b4 <HAL_RCC_GetSysClockFreq+0x40>
 8004598:	2b08      	cmp	r3, #8
 800459a:	f200 80a1 	bhi.w	80046e0 <HAL_RCC_GetSysClockFreq+0x16c>
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d002      	beq.n	80045a8 <HAL_RCC_GetSysClockFreq+0x34>
 80045a2:	2b04      	cmp	r3, #4
 80045a4:	d003      	beq.n	80045ae <HAL_RCC_GetSysClockFreq+0x3a>
 80045a6:	e09b      	b.n	80046e0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045a8:	4b53      	ldr	r3, [pc, #332]	@ (80046f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80045aa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80045ac:	e09b      	b.n	80046e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045ae:	4b53      	ldr	r3, [pc, #332]	@ (80046fc <HAL_RCC_GetSysClockFreq+0x188>)
 80045b0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80045b2:	e098      	b.n	80046e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045b4:	4b4f      	ldr	r3, [pc, #316]	@ (80046f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80045bc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80045be:	4b4d      	ldr	r3, [pc, #308]	@ (80046f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d028      	beq.n	800461c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045ca:	4b4a      	ldr	r3, [pc, #296]	@ (80046f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	099b      	lsrs	r3, r3, #6
 80045d0:	2200      	movs	r2, #0
 80045d2:	623b      	str	r3, [r7, #32]
 80045d4:	627a      	str	r2, [r7, #36]	@ 0x24
 80045d6:	6a3b      	ldr	r3, [r7, #32]
 80045d8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80045dc:	2100      	movs	r1, #0
 80045de:	4b47      	ldr	r3, [pc, #284]	@ (80046fc <HAL_RCC_GetSysClockFreq+0x188>)
 80045e0:	fb03 f201 	mul.w	r2, r3, r1
 80045e4:	2300      	movs	r3, #0
 80045e6:	fb00 f303 	mul.w	r3, r0, r3
 80045ea:	4413      	add	r3, r2
 80045ec:	4a43      	ldr	r2, [pc, #268]	@ (80046fc <HAL_RCC_GetSysClockFreq+0x188>)
 80045ee:	fba0 1202 	umull	r1, r2, r0, r2
 80045f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045f4:	460a      	mov	r2, r1
 80045f6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80045f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045fa:	4413      	add	r3, r2
 80045fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004600:	2200      	movs	r2, #0
 8004602:	61bb      	str	r3, [r7, #24]
 8004604:	61fa      	str	r2, [r7, #28]
 8004606:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800460a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800460e:	f7fc fb5b 	bl	8000cc8 <__aeabi_uldivmod>
 8004612:	4602      	mov	r2, r0
 8004614:	460b      	mov	r3, r1
 8004616:	4613      	mov	r3, r2
 8004618:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800461a:	e053      	b.n	80046c4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800461c:	4b35      	ldr	r3, [pc, #212]	@ (80046f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	099b      	lsrs	r3, r3, #6
 8004622:	2200      	movs	r2, #0
 8004624:	613b      	str	r3, [r7, #16]
 8004626:	617a      	str	r2, [r7, #20]
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800462e:	f04f 0b00 	mov.w	fp, #0
 8004632:	4652      	mov	r2, sl
 8004634:	465b      	mov	r3, fp
 8004636:	f04f 0000 	mov.w	r0, #0
 800463a:	f04f 0100 	mov.w	r1, #0
 800463e:	0159      	lsls	r1, r3, #5
 8004640:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004644:	0150      	lsls	r0, r2, #5
 8004646:	4602      	mov	r2, r0
 8004648:	460b      	mov	r3, r1
 800464a:	ebb2 080a 	subs.w	r8, r2, sl
 800464e:	eb63 090b 	sbc.w	r9, r3, fp
 8004652:	f04f 0200 	mov.w	r2, #0
 8004656:	f04f 0300 	mov.w	r3, #0
 800465a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800465e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004662:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004666:	ebb2 0408 	subs.w	r4, r2, r8
 800466a:	eb63 0509 	sbc.w	r5, r3, r9
 800466e:	f04f 0200 	mov.w	r2, #0
 8004672:	f04f 0300 	mov.w	r3, #0
 8004676:	00eb      	lsls	r3, r5, #3
 8004678:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800467c:	00e2      	lsls	r2, r4, #3
 800467e:	4614      	mov	r4, r2
 8004680:	461d      	mov	r5, r3
 8004682:	eb14 030a 	adds.w	r3, r4, sl
 8004686:	603b      	str	r3, [r7, #0]
 8004688:	eb45 030b 	adc.w	r3, r5, fp
 800468c:	607b      	str	r3, [r7, #4]
 800468e:	f04f 0200 	mov.w	r2, #0
 8004692:	f04f 0300 	mov.w	r3, #0
 8004696:	e9d7 4500 	ldrd	r4, r5, [r7]
 800469a:	4629      	mov	r1, r5
 800469c:	028b      	lsls	r3, r1, #10
 800469e:	4621      	mov	r1, r4
 80046a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80046a4:	4621      	mov	r1, r4
 80046a6:	028a      	lsls	r2, r1, #10
 80046a8:	4610      	mov	r0, r2
 80046aa:	4619      	mov	r1, r3
 80046ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046ae:	2200      	movs	r2, #0
 80046b0:	60bb      	str	r3, [r7, #8]
 80046b2:	60fa      	str	r2, [r7, #12]
 80046b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046b8:	f7fc fb06 	bl	8000cc8 <__aeabi_uldivmod>
 80046bc:	4602      	mov	r2, r0
 80046be:	460b      	mov	r3, r1
 80046c0:	4613      	mov	r3, r2
 80046c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80046c4:	4b0b      	ldr	r3, [pc, #44]	@ (80046f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	0c1b      	lsrs	r3, r3, #16
 80046ca:	f003 0303 	and.w	r3, r3, #3
 80046ce:	3301      	adds	r3, #1
 80046d0:	005b      	lsls	r3, r3, #1
 80046d2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80046d4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80046d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046dc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80046de:	e002      	b.n	80046e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046e0:	4b05      	ldr	r3, [pc, #20]	@ (80046f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80046e2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80046e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3740      	adds	r7, #64	@ 0x40
 80046ec:	46bd      	mov	sp, r7
 80046ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046f2:	bf00      	nop
 80046f4:	40023800 	.word	0x40023800
 80046f8:	00f42400 	.word	0x00f42400
 80046fc:	017d7840 	.word	0x017d7840

08004700 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004700:	b480      	push	{r7}
 8004702:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004704:	4b03      	ldr	r3, [pc, #12]	@ (8004714 <HAL_RCC_GetHCLKFreq+0x14>)
 8004706:	681b      	ldr	r3, [r3, #0]
}
 8004708:	4618      	mov	r0, r3
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	20000004 	.word	0x20000004

08004718 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800471c:	f7ff fff0 	bl	8004700 <HAL_RCC_GetHCLKFreq>
 8004720:	4602      	mov	r2, r0
 8004722:	4b05      	ldr	r3, [pc, #20]	@ (8004738 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	0a9b      	lsrs	r3, r3, #10
 8004728:	f003 0307 	and.w	r3, r3, #7
 800472c:	4903      	ldr	r1, [pc, #12]	@ (800473c <HAL_RCC_GetPCLK1Freq+0x24>)
 800472e:	5ccb      	ldrb	r3, [r1, r3]
 8004730:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004734:	4618      	mov	r0, r3
 8004736:	bd80      	pop	{r7, pc}
 8004738:	40023800 	.word	0x40023800
 800473c:	08010f84 	.word	0x08010f84

08004740 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004744:	f7ff ffdc 	bl	8004700 <HAL_RCC_GetHCLKFreq>
 8004748:	4602      	mov	r2, r0
 800474a:	4b05      	ldr	r3, [pc, #20]	@ (8004760 <HAL_RCC_GetPCLK2Freq+0x20>)
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	0b5b      	lsrs	r3, r3, #13
 8004750:	f003 0307 	and.w	r3, r3, #7
 8004754:	4903      	ldr	r1, [pc, #12]	@ (8004764 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004756:	5ccb      	ldrb	r3, [r1, r3]
 8004758:	fa22 f303 	lsr.w	r3, r2, r3
}
 800475c:	4618      	mov	r0, r3
 800475e:	bd80      	pop	{r7, pc}
 8004760:	40023800 	.word	0x40023800
 8004764:	08010f84 	.word	0x08010f84

08004768 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b088      	sub	sp, #32
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004770:	2300      	movs	r3, #0
 8004772:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004774:	2300      	movs	r3, #0
 8004776:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004778:	2300      	movs	r3, #0
 800477a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800477c:	2300      	movs	r3, #0
 800477e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004780:	2300      	movs	r3, #0
 8004782:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0301 	and.w	r3, r3, #1
 800478c:	2b00      	cmp	r3, #0
 800478e:	f040 8089 	bne.w	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0308 	and.w	r3, r3, #8
 800479a:	2b00      	cmp	r3, #0
 800479c:	f040 8082 	bne.w	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0310 	and.w	r3, r3, #16
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d17b      	bne.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d175      	bne.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d16f      	bne.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d169      	bne.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d163      	bne.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d15d      	bne.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d157      	bne.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d151      	bne.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d14b      	bne.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004814:	2b00      	cmp	r3, #0
 8004816:	d145      	bne.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d13f      	bne.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d139      	bne.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004838:	2b00      	cmp	r3, #0
 800483a:	d133      	bne.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d12d      	bne.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d127      	bne.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d121      	bne.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d11b      	bne.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004874:	2b00      	cmp	r3, #0
 8004876:	d115      	bne.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004880:	2b00      	cmp	r3, #0
 8004882:	d10f      	bne.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d109      	bne.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0320 	and.w	r3, r3, #32
 8004898:	2b00      	cmp	r3, #0
 800489a:	d103      	bne.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800489c:	2172      	movs	r1, #114	@ 0x72
 800489e:	4895      	ldr	r0, [pc, #596]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80048a0:	f7fd fe48 	bl	8002534 <assert_failed>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0301 	and.w	r3, r3, #1
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d01f      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d008      	beq.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x162>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048bc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80048c0:	d003      	beq.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x162>
 80048c2:	2178      	movs	r1, #120	@ 0x78
 80048c4:	488b      	ldr	r0, [pc, #556]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80048c6:	f7fd fe35 	bl	8002534 <assert_failed>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80048ca:	4b8b      	ldr	r3, [pc, #556]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	4a8a      	ldr	r2, [pc, #552]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80048d0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80048d4:	6093      	str	r3, [r2, #8]
 80048d6:	4b88      	ldr	r3, [pc, #544]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80048d8:	689a      	ldr	r2, [r3, #8]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048de:	4986      	ldr	r1, [pc, #536]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d101      	bne.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x188>
    {
      plli2sused = 1;
 80048ec:	2301      	movs	r3, #1
 80048ee:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d029      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004900:	2b00      	cmp	r3, #0
 8004902:	d00d      	beq.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004908:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800490c:	d008      	beq.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004912:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004916:	d003      	beq.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004918:	2188      	movs	r1, #136	@ 0x88
 800491a:	4876      	ldr	r0, [pc, #472]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 800491c:	f7fd fe0a 	bl	8002534 <assert_failed>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004920:	4b75      	ldr	r3, [pc, #468]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004922:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004926:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800492e:	4972      	ldr	r1, [pc, #456]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004930:	4313      	orrs	r3, r2
 8004932:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800493a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800493e:	d101      	bne.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      plli2sused = 1;
 8004940:	2301      	movs	r3, #1
 8004942:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004948:	2b00      	cmp	r3, #0
 800494a:	d101      	bne.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    {
      pllsaiused = 1;
 800494c:	2301      	movs	r3, #1
 800494e:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d029      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004960:	2b00      	cmp	r3, #0
 8004962:	d00d      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004968:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800496c:	d008      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004972:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004976:	d003      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004978:	219c      	movs	r1, #156	@ 0x9c
 800497a:	485e      	ldr	r0, [pc, #376]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 800497c:	f7fd fdda 	bl	8002534 <assert_failed>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004980:	4b5d      	ldr	r3, [pc, #372]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004982:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004986:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800498e:	495a      	ldr	r1, [pc, #360]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004990:	4313      	orrs	r3, r2
 8004992:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800499a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800499e:	d101      	bne.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      plli2sused = 1;
 80049a0:	2301      	movs	r3, #1
 80049a2:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d101      	bne.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      pllsaiused = 1;
 80049ac:	2301      	movs	r3, #1
 80049ae:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d001      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
      plli2sused = 1;
 80049bc:	2301      	movs	r3, #1
 80049be:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0320 	and.w	r3, r3, #32
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	f000 8186 	beq.w	8004cda <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049d6:	f000 80e4 	beq.w	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049e2:	f000 80de 	beq.w	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ea:	4a44      	ldr	r2, [pc, #272]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x394>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	f000 80d8 	beq.w	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049f6:	4a42      	ldr	r2, [pc, #264]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	f000 80d2 	beq.w	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a02:	4a40      	ldr	r2, [pc, #256]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	f000 80cc 	beq.w	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a0e:	4a3e      	ldr	r2, [pc, #248]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	f000 80c6 	beq.w	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a1a:	4a3c      	ldr	r2, [pc, #240]	@ (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	f000 80c0 	beq.w	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a26:	4a3a      	ldr	r2, [pc, #232]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	f000 80ba 	beq.w	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a32:	4a38      	ldr	r2, [pc, #224]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	f000 80b4 	beq.w	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a3e:	4a36      	ldr	r2, [pc, #216]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x3b0>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	f000 80ae 	beq.w	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a4a:	4a34      	ldr	r2, [pc, #208]	@ (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	f000 80a8 	beq.w	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a56:	4a32      	ldr	r2, [pc, #200]	@ (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x3b8>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	f000 80a2 	beq.w	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a62:	4a30      	ldr	r2, [pc, #192]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	f000 809c 	beq.w	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a6e:	4a2e      	ldr	r2, [pc, #184]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x3c0>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	f000 8096 	beq.w	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a7a:	4a2c      	ldr	r2, [pc, #176]	@ (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	f000 8090 	beq.w	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a86:	4a2a      	ldr	r2, [pc, #168]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	f000 808a 	beq.w	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a92:	4a28      	ldr	r2, [pc, #160]	@ (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	f000 8084 	beq.w	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a9e:	4a26      	ldr	r2, [pc, #152]	@ (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d07e      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aa8:	4a24      	ldr	r2, [pc, #144]	@ (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d079      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ab2:	4a23      	ldr	r2, [pc, #140]	@ (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d074      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004abc:	4a21      	ldr	r2, [pc, #132]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d06f      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ac6:	4a20      	ldr	r2, [pc, #128]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d06a      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ad0:	4a1e      	ldr	r2, [pc, #120]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d065      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ada:	4a1d      	ldr	r2, [pc, #116]	@ (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d060      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ae4:	4a1b      	ldr	r2, [pc, #108]	@ (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d05b      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aee:	4a1a      	ldr	r2, [pc, #104]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	e033      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8004af4:	080109a0 	.word	0x080109a0
 8004af8:	40023800 	.word	0x40023800
 8004afc:	00020300 	.word	0x00020300
 8004b00:	00030300 	.word	0x00030300
 8004b04:	00040300 	.word	0x00040300
 8004b08:	00050300 	.word	0x00050300
 8004b0c:	00060300 	.word	0x00060300
 8004b10:	00070300 	.word	0x00070300
 8004b14:	00080300 	.word	0x00080300
 8004b18:	00090300 	.word	0x00090300
 8004b1c:	000a0300 	.word	0x000a0300
 8004b20:	000b0300 	.word	0x000b0300
 8004b24:	000c0300 	.word	0x000c0300
 8004b28:	000d0300 	.word	0x000d0300
 8004b2c:	000e0300 	.word	0x000e0300
 8004b30:	000f0300 	.word	0x000f0300
 8004b34:	00100300 	.word	0x00100300
 8004b38:	00110300 	.word	0x00110300
 8004b3c:	00120300 	.word	0x00120300
 8004b40:	00130300 	.word	0x00130300
 8004b44:	00140300 	.word	0x00140300
 8004b48:	00150300 	.word	0x00150300
 8004b4c:	00160300 	.word	0x00160300
 8004b50:	00170300 	.word	0x00170300
 8004b54:	00180300 	.word	0x00180300
 8004b58:	00190300 	.word	0x00190300
 8004b5c:	d021      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b62:	4a4c      	ldr	r2, [pc, #304]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d01c      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b6c:	4a4a      	ldr	r2, [pc, #296]	@ (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d017      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b76:	4a49      	ldr	r2, [pc, #292]	@ (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x534>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d012      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b80:	4a47      	ldr	r2, [pc, #284]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d00d      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b8a:	4a46      	ldr	r2, [pc, #280]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d008      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b94:	4a44      	ldr	r2, [pc, #272]	@ (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d003      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004b9a:	21b7      	movs	r1, #183	@ 0xb7
 8004b9c:	4843      	ldr	r0, [pc, #268]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8004b9e:	f7fd fcc9 	bl	8002534 <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ba2:	4b43      	ldr	r3, [pc, #268]	@ (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba6:	4a42      	ldr	r2, [pc, #264]	@ (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004ba8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bac:	6413      	str	r3, [r2, #64]	@ 0x40
 8004bae:	4b40      	ldr	r3, [pc, #256]	@ (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bb6:	60bb      	str	r3, [r7, #8]
 8004bb8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004bba:	4b3e      	ldr	r3, [pc, #248]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a3d      	ldr	r2, [pc, #244]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8004bc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bc6:	f7fe f93b 	bl	8002e40 <HAL_GetTick>
 8004bca:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004bcc:	e009      	b.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bce:	f7fe f937 	bl	8002e40 <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	2b64      	cmp	r3, #100	@ 0x64
 8004bda:	d902      	bls.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
      {
        return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	f000 bd9f 	b.w	8005720 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004be2:	4b34      	ldr	r3, [pc, #208]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d0ef      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x466>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004bee:	4b30      	ldr	r3, [pc, #192]	@ (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004bf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bf2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bf6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d036      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c06:	693a      	ldr	r2, [r7, #16]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d02f      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c0c:	4b28      	ldr	r3, [pc, #160]	@ (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004c0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c14:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c16:	4b26      	ldr	r3, [pc, #152]	@ (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004c18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c1a:	4a25      	ldr	r2, [pc, #148]	@ (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004c1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c20:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c22:	4b23      	ldr	r3, [pc, #140]	@ (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004c24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c26:	4a22      	ldr	r2, [pc, #136]	@ (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004c28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c2c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004c2e:	4a20      	ldr	r2, [pc, #128]	@ (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004c34:	4b1e      	ldr	r3, [pc, #120]	@ (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004c36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c38:	f003 0301 	and.w	r3, r3, #1
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d115      	bne.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x504>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c40:	f7fe f8fe 	bl	8002e40 <HAL_GetTick>
 8004c44:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c46:	e00b      	b.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c48:	f7fe f8fa 	bl	8002e40 <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d902      	bls.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	f000 bd60 	b.w	8005720 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c60:	4b13      	ldr	r3, [pc, #76]	@ (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004c62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c64:	f003 0302 	and.w	r3, r3, #2
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d0ed      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c70:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c74:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c78:	d120      	bne.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x554>
 8004c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004c86:	4b0c      	ldr	r3, [pc, #48]	@ (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8004c88:	400b      	ands	r3, r1
 8004c8a:	4909      	ldr	r1, [pc, #36]	@ (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	608b      	str	r3, [r1, #8]
 8004c90:	e01a      	b.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x560>
 8004c92:	bf00      	nop
 8004c94:	001a0300 	.word	0x001a0300
 8004c98:	001b0300 	.word	0x001b0300
 8004c9c:	001c0300 	.word	0x001c0300
 8004ca0:	001d0300 	.word	0x001d0300
 8004ca4:	001e0300 	.word	0x001e0300
 8004ca8:	001f0300 	.word	0x001f0300
 8004cac:	080109a0 	.word	0x080109a0
 8004cb0:	40023800 	.word	0x40023800
 8004cb4:	40007000 	.word	0x40007000
 8004cb8:	0ffffcff 	.word	0x0ffffcff
 8004cbc:	4b9a      	ldr	r3, [pc, #616]	@ (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	4a99      	ldr	r2, [pc, #612]	@ (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004cc2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004cc6:	6093      	str	r3, [r2, #8]
 8004cc8:	4b97      	ldr	r3, [pc, #604]	@ (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004cca:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cd4:	4994      	ldr	r1, [pc, #592]	@ (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0310 	and.w	r3, r3, #16
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d01d      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d008      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cf2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004cf6:	d003      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8004cf8:	21f1      	movs	r1, #241	@ 0xf1
 8004cfa:	488c      	ldr	r0, [pc, #560]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8004cfc:	f7fd fc1a 	bl	8002534 <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004d00:	4b89      	ldr	r3, [pc, #548]	@ (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004d02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d06:	4a88      	ldr	r2, [pc, #544]	@ (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004d08:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d0c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004d10:	4b85      	ldr	r3, [pc, #532]	@ (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004d12:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d1a:	4983      	ldr	r1, [pc, #524]	@ (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d01c      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x600>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00d      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d3e:	d008      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d44:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d48:	d003      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8004d4a:	21fb      	movs	r1, #251	@ 0xfb
 8004d4c:	4877      	ldr	r0, [pc, #476]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8004d4e:	f7fd fbf1 	bl	8002534 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d52:	4b75      	ldr	r3, [pc, #468]	@ (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d58:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d60:	4971      	ldr	r1, [pc, #452]	@ (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004d62:	4313      	orrs	r3, r2
 8004d64:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d01d      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x648>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d00e      	beq.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x632>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d80:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004d84:	d009      	beq.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x632>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d8a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004d8e:	d004      	beq.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x632>
 8004d90:	f240 1105 	movw	r1, #261	@ 0x105
 8004d94:	4865      	ldr	r0, [pc, #404]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8004d96:	f7fd fbcd 	bl	8002534 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d9a:	4b63      	ldr	r3, [pc, #396]	@ (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004da0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004da8:	495f      	ldr	r1, [pc, #380]	@ (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004daa:	4313      	orrs	r3, r2
 8004dac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d01d      	beq.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x690>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d00e      	beq.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004dc8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004dcc:	d009      	beq.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004dd2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004dd6:	d004      	beq.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8004dd8:	f240 110f 	movw	r1, #271	@ 0x10f
 8004ddc:	4853      	ldr	r0, [pc, #332]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8004dde:	f7fd fba9 	bl	8002534 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004de2:	4b51      	ldr	r3, [pc, #324]	@ (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004de8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004df0:	494d      	ldr	r1, [pc, #308]	@ (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d01d      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d00e      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e10:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e14:	d009      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e1a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004e1e:	d004      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8004e20:	f240 1119 	movw	r1, #281	@ 0x119
 8004e24:	4841      	ldr	r0, [pc, #260]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8004e26:	f7fd fb85 	bl	8002534 <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004e2a:	4b3f      	ldr	r3, [pc, #252]	@ (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e30:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e38:	493b      	ldr	r1, [pc, #236]	@ (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d01f      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x724>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d010      	beq.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d00c      	beq.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e60:	2b03      	cmp	r3, #3
 8004e62:	d008      	beq.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	d004      	beq.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8004e6c:	f240 1123 	movw	r1, #291	@ 0x123
 8004e70:	482e      	ldr	r0, [pc, #184]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8004e72:	f7fd fb5f 	bl	8002534 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e76:	4b2c      	ldr	r3, [pc, #176]	@ (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e7c:	f023 0203 	bic.w	r2, r3, #3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e84:	4928      	ldr	r1, [pc, #160]	@ (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004e86:	4313      	orrs	r3, r2
 8004e88:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d01f      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x770>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d010      	beq.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ea4:	2b04      	cmp	r3, #4
 8004ea6:	d00c      	beq.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004eac:	2b0c      	cmp	r3, #12
 8004eae:	d008      	beq.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004eb4:	2b08      	cmp	r3, #8
 8004eb6:	d004      	beq.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8004eb8:	f240 112d 	movw	r1, #301	@ 0x12d
 8004ebc:	481b      	ldr	r0, [pc, #108]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8004ebe:	f7fd fb39 	bl	8002534 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ec2:	4b19      	ldr	r3, [pc, #100]	@ (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ec8:	f023 020c 	bic.w	r2, r3, #12
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ed0:	4915      	ldr	r1, [pc, #84]	@ (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d025      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d010      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ef0:	2b10      	cmp	r3, #16
 8004ef2:	d00c      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ef8:	2b30      	cmp	r3, #48	@ 0x30
 8004efa:	d008      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f00:	2b20      	cmp	r3, #32
 8004f02:	d004      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8004f04:	f240 1137 	movw	r1, #311	@ 0x137
 8004f08:	4808      	ldr	r0, [pc, #32]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8004f0a:	f7fd fb13 	bl	8002534 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f0e:	4b06      	ldr	r3, [pc, #24]	@ (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f14:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f1c:	4902      	ldr	r1, [pc, #8]	@ (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004f24:	e004      	b.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
 8004f26:	bf00      	nop
 8004f28:	40023800 	.word	0x40023800
 8004f2c:	080109a0 	.word	0x080109a0
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d01f      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x814>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d010      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f48:	2b40      	cmp	r3, #64	@ 0x40
 8004f4a:	d00c      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f50:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f52:	d008      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f58:	2b80      	cmp	r3, #128	@ 0x80
 8004f5a:	d004      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8004f5c:	f240 1141 	movw	r1, #321	@ 0x141
 8004f60:	48a0      	ldr	r0, [pc, #640]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8004f62:	f7fd fae7 	bl	8002534 <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004f66:	4ba0      	ldr	r3, [pc, #640]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f6c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f74:	499c      	ldr	r1, [pc, #624]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004f76:	4313      	orrs	r3, r2
 8004f78:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d022      	beq.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x866>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d013      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f98:	d00e      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004fa2:	d009      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fa8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fac:	d004      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8004fae:	f240 114b 	movw	r1, #331	@ 0x14b
 8004fb2:	488c      	ldr	r0, [pc, #560]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8004fb4:	f7fd fabe 	bl	8002534 <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004fb8:	4b8b      	ldr	r3, [pc, #556]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fbe:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fc6:	4988      	ldr	r1, [pc, #544]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d022      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d013      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fe6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fea:	d00e      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ff0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004ff4:	d009      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ffa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ffe:	d004      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8005000:	f240 1155 	movw	r1, #341	@ 0x155
 8005004:	4877      	ldr	r0, [pc, #476]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8005006:	f7fd fa95 	bl	8002534 <assert_failed>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800500a:	4b77      	ldr	r3, [pc, #476]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800500c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005010:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005018:	4973      	ldr	r1, [pc, #460]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800501a:	4313      	orrs	r3, r2
 800501c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d022      	beq.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x90a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005030:	2b00      	cmp	r3, #0
 8005032:	d013      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005038:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800503c:	d00e      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005042:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005046:	d009      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800504c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005050:	d004      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8005052:	f240 115f 	movw	r1, #351	@ 0x15f
 8005056:	4863      	ldr	r0, [pc, #396]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8005058:	f7fd fa6c 	bl	8002534 <assert_failed>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800505c:	4b62      	ldr	r3, [pc, #392]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800505e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005062:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800506a:	495f      	ldr	r1, [pc, #380]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800506c:	4313      	orrs	r3, r2
 800506e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d022      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005082:	2b00      	cmp	r3, #0
 8005084:	d013      	beq.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x946>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800508a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800508e:	d00e      	beq.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x946>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005094:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005098:	d009      	beq.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x946>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800509e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050a2:	d004      	beq.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x946>
 80050a4:	f240 1169 	movw	r1, #361	@ 0x169
 80050a8:	484e      	ldr	r0, [pc, #312]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 80050aa:	f7fd fa43 	bl	8002534 <assert_failed>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80050ae:	4b4e      	ldr	r3, [pc, #312]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80050b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050b4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050bc:	494a      	ldr	r1, [pc, #296]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80050be:	4313      	orrs	r3, r2
 80050c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d018      	beq.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x99a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80050d4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80050d8:	d008      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x984>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d004      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x984>
 80050e2:	f240 1173 	movw	r1, #371	@ 0x173
 80050e6:	483f      	ldr	r0, [pc, #252]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 80050e8:	f7fd fa24 	bl	8002534 <assert_failed>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80050ec:	4b3e      	ldr	r3, [pc, #248]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80050ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050f2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80050fa:	493b      	ldr	r1, [pc, #236]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80050fc:	4313      	orrs	r3, r2
 80050fe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d01f      	beq.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005112:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005116:	d008      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800511c:	2b00      	cmp	r3, #0
 800511e:	d004      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8005120:	f240 117d 	movw	r1, #381	@ 0x17d
 8005124:	482f      	ldr	r0, [pc, #188]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8005126:	f7fd fa05 	bl	8002534 <assert_failed>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800512a:	4b2f      	ldr	r3, [pc, #188]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800512c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005130:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005138:	492b      	ldr	r1, [pc, #172]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800513a:	4313      	orrs	r3, r2
 800513c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005144:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005148:	d101      	bne.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    {
      pllsaiused = 1;
 800514a:	2301      	movs	r3, #1
 800514c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 0308 	and.w	r3, r3, #8
 8005156:	2b00      	cmp	r3, #0
 8005158:	d001      	beq.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x9f6>
  {
    pllsaiused = 1;
 800515a:	2301      	movs	r3, #1
 800515c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005166:	2b00      	cmp	r3, #0
 8005168:	d022      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0xa48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800516e:	2b00      	cmp	r3, #0
 8005170:	d013      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005176:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800517a:	d00e      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0xa32>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005180:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005184:	d009      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800518a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800518e:	d004      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8005190:	f240 1195 	movw	r1, #405	@ 0x195
 8005194:	4813      	ldr	r0, [pc, #76]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8005196:	f7fd f9cd 	bl	8002534 <assert_failed>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800519a:	4b13      	ldr	r3, [pc, #76]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800519c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051a0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051a8:	490f      	ldr	r1, [pc, #60]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80051aa:	4313      	orrs	r3, r2
 80051ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d020      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0xa96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80051c6:	d009      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d004      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80051d2:	f240 119f 	movw	r1, #415	@ 0x19f
 80051d6:	4803      	ldr	r0, [pc, #12]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 80051d8:	f7fd f9ac 	bl	8002534 <assert_failed>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80051dc:	4b02      	ldr	r3, [pc, #8]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80051de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051e2:	e003      	b.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0xa84>
 80051e4:	080109a0 	.word	0x080109a0
 80051e8:	40023800 	.word	0x40023800
 80051ec:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051f6:	4910      	ldr	r1, [pc, #64]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d006      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800520c:	2b00      	cmp	r3, #0
 800520e:	f000 8155 	beq.w	80054bc <HAL_RCCEx_PeriphCLKConfig+0xd54>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005212:	4b09      	ldr	r3, [pc, #36]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a08      	ldr	r2, [pc, #32]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 8005218:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800521c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800521e:	f7fd fe0f 	bl	8002e40 <HAL_GetTick>
 8005222:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005224:	e00a      	b.n	800523c <HAL_RCCEx_PeriphCLKConfig+0xad4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005226:	f7fd fe0b 	bl	8002e40 <HAL_GetTick>
 800522a:	4602      	mov	r2, r0
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	2b64      	cmp	r3, #100	@ 0x64
 8005232:	d903      	bls.n	800523c <HAL_RCCEx_PeriphCLKConfig+0xad4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005234:	2303      	movs	r3, #3
 8005236:	e273      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 8005238:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800523c:	4b9a      	ldr	r3, [pc, #616]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005244:	2b00      	cmp	r3, #0
 8005246:	d1ee      	bne.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0xabe>
      }
    }

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	2b31      	cmp	r3, #49	@ 0x31
 800524e:	d904      	bls.n	800525a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	f5b3 7fd8 	cmp.w	r3, #432	@ 0x1b0
 8005258:	d904      	bls.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0xafc>
 800525a:	f44f 71ed 	mov.w	r1, #474	@ 0x1da
 800525e:	4893      	ldr	r0, [pc, #588]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8005260:	f7fd f968 	bl	8002534 <assert_failed>

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0301 	and.w	r3, r3, #1
 800526c:	2b00      	cmp	r3, #0
 800526e:	d02e      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0xb66>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005274:	2b00      	cmp	r3, #0
 8005276:	d12a      	bne.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0xb66>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	2b01      	cmp	r3, #1
 800527e:	d903      	bls.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0xb20>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	2b07      	cmp	r3, #7
 8005286:	d904      	bls.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8005288:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 800528c:	4887      	ldr	r0, [pc, #540]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 800528e:	f7fd f951 	bl	8002534 <assert_failed>

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005292:	4b85      	ldr	r3, [pc, #532]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8005294:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005298:	0c1b      	lsrs	r3, r3, #16
 800529a:	f003 0303 	and.w	r3, r3, #3
 800529e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80052a0:	4b81      	ldr	r3, [pc, #516]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80052a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052a6:	0e1b      	lsrs	r3, r3, #24
 80052a8:	f003 030f 	and.w	r3, r3, #15
 80052ac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	019a      	lsls	r2, r3, #6
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	041b      	lsls	r3, r3, #16
 80052b8:	431a      	orrs	r2, r3
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	061b      	lsls	r3, r3, #24
 80052be:	431a      	orrs	r2, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	071b      	lsls	r3, r3, #28
 80052c6:	4978      	ldr	r1, [pc, #480]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80052c8:	4313      	orrs	r3, r2
 80052ca:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d004      	beq.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052e2:	d00a      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0xb92>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d048      	beq.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80052f8:	d143      	bne.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {
      /* Check for PLLI2S Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d903      	bls.n	800530a <HAL_RCCEx_PeriphCLKConfig+0xba2>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	2b0f      	cmp	r3, #15
 8005308:	d904      	bls.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800530a:	f44f 71f8 	mov.w	r1, #496	@ 0x1f0
 800530e:	4867      	ldr	r0, [pc, #412]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8005310:	f7fd f910 	bl	8002534 <assert_failed>
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005318:	2b00      	cmp	r3, #0
 800531a:	d003      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0xbbc>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005320:	2b20      	cmp	r3, #32
 8005322:	d904      	bls.n	800532e <HAL_RCCEx_PeriphCLKConfig+0xbc6>
 8005324:	f44f 71f9 	mov.w	r1, #498	@ 0x1f2
 8005328:	4860      	ldr	r0, [pc, #384]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 800532a:	f7fd f903 	bl	8002534 <assert_failed>

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800532e:	4b5e      	ldr	r3, [pc, #376]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8005330:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005334:	0c1b      	lsrs	r3, r3, #16
 8005336:	f003 0303 	and.w	r3, r3, #3
 800533a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800533c:	4b5a      	ldr	r3, [pc, #360]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800533e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005342:	0f1b      	lsrs	r3, r3, #28
 8005344:	f003 0307 	and.w	r3, r3, #7
 8005348:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	019a      	lsls	r2, r3, #6
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	041b      	lsls	r3, r3, #16
 8005354:	431a      	orrs	r2, r3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	061b      	lsls	r3, r3, #24
 800535c:	431a      	orrs	r2, r3
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	071b      	lsls	r3, r3, #28
 8005362:	4951      	ldr	r1, [pc, #324]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8005364:	4313      	orrs	r3, r2
 8005366:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800536a:	4b4f      	ldr	r3, [pc, #316]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800536c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005370:	f023 021f 	bic.w	r2, r3, #31
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005378:	3b01      	subs	r3, #1
 800537a:	494b      	ldr	r1, [pc, #300]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800537c:	4313      	orrs	r3, r2
 800537e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d032      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d010      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	2b01      	cmp	r3, #1
 800539c:	d00c      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d008      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	2b03      	cmp	r3, #3
 80053ac:	d004      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 80053ae:	f240 2105 	movw	r1, #517	@ 0x205
 80053b2:	483e      	ldr	r0, [pc, #248]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80053b4:	f7fd f8be 	bl	8002534 <assert_failed>

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80053b8:	4b3b      	ldr	r3, [pc, #236]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80053ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053be:	0e1b      	lsrs	r3, r3, #24
 80053c0:	f003 030f 	and.w	r3, r3, #15
 80053c4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80053c6:	4b38      	ldr	r3, [pc, #224]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80053c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053cc:	0f1b      	lsrs	r3, r3, #28
 80053ce:	f003 0307 	and.w	r3, r3, #7
 80053d2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	019a      	lsls	r2, r3, #6
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	041b      	lsls	r3, r3, #16
 80053e0:	431a      	orrs	r2, r3
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	061b      	lsls	r3, r3, #24
 80053e6:	431a      	orrs	r2, r3
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	071b      	lsls	r3, r3, #28
 80053ec:	492e      	ldr	r1, [pc, #184]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80053ee:	4313      	orrs	r3, r2
 80053f0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d040      	beq.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d010      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	691b      	ldr	r3, [r3, #16]
 800540c:	2b01      	cmp	r3, #1
 800540e:	d00c      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	691b      	ldr	r3, [r3, #16]
 8005414:	2b02      	cmp	r3, #2
 8005416:	d008      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	2b03      	cmp	r3, #3
 800541e:	d004      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8005420:	f44f 7105 	mov.w	r1, #532	@ 0x214
 8005424:	4821      	ldr	r0, [pc, #132]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8005426:	f7fd f885 	bl	8002534 <assert_failed>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	2b01      	cmp	r3, #1
 8005430:	d903      	bls.n	800543a <HAL_RCCEx_PeriphCLKConfig+0xcd2>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	2b07      	cmp	r3, #7
 8005438:	d904      	bls.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 800543a:	f240 2115 	movw	r1, #533	@ 0x215
 800543e:	481b      	ldr	r0, [pc, #108]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8005440:	f7fd f878 	bl	8002534 <assert_failed>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	2b01      	cmp	r3, #1
 800544a:	d903      	bls.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0xcec>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	2b0f      	cmp	r3, #15
 8005452:	d904      	bls.n	800545e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
 8005454:	f240 2116 	movw	r1, #534	@ 0x216
 8005458:	4814      	ldr	r0, [pc, #80]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 800545a:	f7fd f86b 	bl	8002534 <assert_failed>

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	019a      	lsls	r2, r3, #6
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	041b      	lsls	r3, r3, #16
 800546a:	431a      	orrs	r2, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	061b      	lsls	r3, r3, #24
 8005472:	431a      	orrs	r2, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	071b      	lsls	r3, r3, #28
 800547a:	490b      	ldr	r1, [pc, #44]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800547c:	4313      	orrs	r3, r2
 800547e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005482:	4b09      	ldr	r3, [pc, #36]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a08      	ldr	r2, [pc, #32]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8005488:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800548c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800548e:	f7fd fcd7 	bl	8002e40 <HAL_GetTick>
 8005492:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005494:	e00c      	b.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0xd48>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005496:	f7fd fcd3 	bl	8002e40 <HAL_GetTick>
 800549a:	4602      	mov	r2, r0
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	1ad3      	subs	r3, r2, r3
 80054a0:	2b64      	cmp	r3, #100	@ 0x64
 80054a2:	d905      	bls.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0xd48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054a4:	2303      	movs	r3, #3
 80054a6:	e13b      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 80054a8:	40023800 	.word	0x40023800
 80054ac:	080109a0 	.word	0x080109a0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80054b0:	4b9d      	ldr	r3, [pc, #628]	@ (8005728 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d0ec      	beq.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	2b01      	cmp	r3, #1
 80054c0:	f040 812d 	bne.w	800571e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80054c4:	4b98      	ldr	r3, [pc, #608]	@ (8005728 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a97      	ldr	r2, [pc, #604]	@ (8005728 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80054ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80054ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054d0:	f7fd fcb6 	bl	8002e40 <HAL_GetTick>
 80054d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80054d6:	e008      	b.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0xd82>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80054d8:	f7fd fcb2 	bl	8002e40 <HAL_GetTick>
 80054dc:	4602      	mov	r2, r0
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	2b64      	cmp	r3, #100	@ 0x64
 80054e4:	d901      	bls.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0xd82>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	e11a      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80054ea:	4b8f      	ldr	r3, [pc, #572]	@ (8005728 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80054f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80054f6:	d0ef      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0xd70>
      }
    }

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	695b      	ldr	r3, [r3, #20]
 80054fc:	2b31      	cmp	r3, #49	@ 0x31
 80054fe:	d904      	bls.n	800550a <HAL_RCCEx_PeriphCLKConfig+0xda2>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	695b      	ldr	r3, [r3, #20]
 8005504:	f5b3 7fd8 	cmp.w	r3, #432	@ 0x1b0
 8005508:	d904      	bls.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0xdac>
 800550a:	f44f 7111 	mov.w	r1, #580	@ 0x244
 800550e:	4887      	ldr	r0, [pc, #540]	@ (800572c <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8005510:	f7fd f810 	bl	8002534 <assert_failed>

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800551c:	2b00      	cmp	r3, #0
 800551e:	d003      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005524:	2b00      	cmp	r3, #0
 8005526:	d009      	beq.n	800553c <HAL_RCCEx_PeriphCLKConfig+0xdd4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005530:	2b00      	cmp	r3, #0
 8005532:	d048      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0xe5e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005538:	2b00      	cmp	r3, #0
 800553a:	d144      	bne.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0xe5e>
    {
      /* check for PLLSAIQ Parameter */
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	699b      	ldr	r3, [r3, #24]
 8005540:	2b01      	cmp	r3, #1
 8005542:	d903      	bls.n	800554c <HAL_RCCEx_PeriphCLKConfig+0xde4>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	699b      	ldr	r3, [r3, #24]
 8005548:	2b0f      	cmp	r3, #15
 800554a:	d904      	bls.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0xdee>
 800554c:	f240 214b 	movw	r1, #587	@ 0x24b
 8005550:	4876      	ldr	r0, [pc, #472]	@ (800572c <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8005552:	f7fc ffef 	bl	8002534 <assert_failed>
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800555a:	2b00      	cmp	r3, #0
 800555c:	d003      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0xdfe>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005562:	2b20      	cmp	r3, #32
 8005564:	d904      	bls.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0xe08>
 8005566:	f240 214d 	movw	r1, #589	@ 0x24d
 800556a:	4870      	ldr	r0, [pc, #448]	@ (800572c <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 800556c:	f7fc ffe2 	bl	8002534 <assert_failed>

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005570:	4b6d      	ldr	r3, [pc, #436]	@ (8005728 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005572:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005576:	0c1b      	lsrs	r3, r3, #16
 8005578:	f003 0303 	and.w	r3, r3, #3
 800557c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800557e:	4b6a      	ldr	r3, [pc, #424]	@ (8005728 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005580:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005584:	0f1b      	lsrs	r3, r3, #28
 8005586:	f003 0307 	and.w	r3, r3, #7
 800558a:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	695b      	ldr	r3, [r3, #20]
 8005590:	019a      	lsls	r2, r3, #6
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	041b      	lsls	r3, r3, #16
 8005596:	431a      	orrs	r2, r3
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	699b      	ldr	r3, [r3, #24]
 800559c:	061b      	lsls	r3, r3, #24
 800559e:	431a      	orrs	r2, r3
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	071b      	lsls	r3, r3, #28
 80055a4:	4960      	ldr	r1, [pc, #384]	@ (8005728 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80055a6:	4313      	orrs	r3, r2
 80055a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80055ac:	4b5e      	ldr	r3, [pc, #376]	@ (8005728 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80055ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80055b2:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ba:	3b01      	subs	r3, #1
 80055bc:	021b      	lsls	r3, r3, #8
 80055be:	495a      	ldr	r1, [pc, #360]	@ (8005728 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80055c0:	4313      	orrs	r3, r2
 80055c2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d037      	beq.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0xeda>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80055d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80055da:	d132      	bne.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0xeda>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6a1b      	ldr	r3, [r3, #32]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d010      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a1b      	ldr	r3, [r3, #32]
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d00c      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6a1b      	ldr	r3, [r3, #32]
 80055f0:	2b02      	cmp	r3, #2
 80055f2:	d008      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6a1b      	ldr	r3, [r3, #32]
 80055f8:	2b03      	cmp	r3, #3
 80055fa:	d004      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 80055fc:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8005600:	484a      	ldr	r0, [pc, #296]	@ (800572c <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8005602:	f7fc ff97 	bl	8002534 <assert_failed>
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005606:	4b48      	ldr	r3, [pc, #288]	@ (8005728 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005608:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800560c:	0e1b      	lsrs	r3, r3, #24
 800560e:	f003 030f 	and.w	r3, r3, #15
 8005612:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005614:	4b44      	ldr	r3, [pc, #272]	@ (8005728 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005616:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800561a:	0f1b      	lsrs	r3, r3, #28
 800561c:	f003 0307 	and.w	r3, r3, #7
 8005620:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	695b      	ldr	r3, [r3, #20]
 8005626:	019a      	lsls	r2, r3, #6
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6a1b      	ldr	r3, [r3, #32]
 800562c:	041b      	lsls	r3, r3, #16
 800562e:	431a      	orrs	r2, r3
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	061b      	lsls	r3, r3, #24
 8005634:	431a      	orrs	r2, r3
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	071b      	lsls	r3, r3, #28
 800563a:	493b      	ldr	r1, [pc, #236]	@ (8005728 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800563c:	4313      	orrs	r3, r2
 800563e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0308 	and.w	r3, r3, #8
 800564a:	2b00      	cmp	r3, #0
 800564c:	d04d      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0xf82>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	69db      	ldr	r3, [r3, #28]
 8005652:	2b01      	cmp	r3, #1
 8005654:	d903      	bls.n	800565e <HAL_RCCEx_PeriphCLKConfig+0xef6>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	69db      	ldr	r3, [r3, #28]
 800565a:	2b07      	cmp	r3, #7
 800565c:	d904      	bls.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0xf00>
 800565e:	f240 216f 	movw	r1, #623	@ 0x26f
 8005662:	4832      	ldr	r0, [pc, #200]	@ (800572c <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8005664:	f7fc ff66 	bl	8002534 <assert_failed>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800566c:	2b00      	cmp	r3, #0
 800566e:	d013      	beq.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005674:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005678:	d00e      	beq.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800567e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005682:	d009      	beq.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005688:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800568c:	d004      	beq.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 800568e:	f44f 711c 	mov.w	r1, #624	@ 0x270
 8005692:	4826      	ldr	r0, [pc, #152]	@ (800572c <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8005694:	f7fc ff4e 	bl	8002534 <assert_failed>

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005698:	4b23      	ldr	r3, [pc, #140]	@ (8005728 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800569a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800569e:	0e1b      	lsrs	r3, r3, #24
 80056a0:	f003 030f 	and.w	r3, r3, #15
 80056a4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80056a6:	4b20      	ldr	r3, [pc, #128]	@ (8005728 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80056a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056ac:	0c1b      	lsrs	r3, r3, #16
 80056ae:	f003 0303 	and.w	r3, r3, #3
 80056b2:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	695b      	ldr	r3, [r3, #20]
 80056b8:	019a      	lsls	r2, r3, #6
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	041b      	lsls	r3, r3, #16
 80056be:	431a      	orrs	r2, r3
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	061b      	lsls	r3, r3, #24
 80056c4:	431a      	orrs	r2, r3
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	69db      	ldr	r3, [r3, #28]
 80056ca:	071b      	lsls	r3, r3, #28
 80056cc:	4916      	ldr	r1, [pc, #88]	@ (8005728 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80056ce:	4313      	orrs	r3, r2
 80056d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80056d4:	4b14      	ldr	r3, [pc, #80]	@ (8005728 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80056d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80056da:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056e2:	4911      	ldr	r1, [pc, #68]	@ (8005728 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80056e4:	4313      	orrs	r3, r2
 80056e6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80056ea:	4b0f      	ldr	r3, [pc, #60]	@ (8005728 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a0e      	ldr	r2, [pc, #56]	@ (8005728 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80056f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056f6:	f7fd fba3 	bl	8002e40 <HAL_GetTick>
 80056fa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80056fc:	e008      	b.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80056fe:	f7fd fb9f 	bl	8002e40 <HAL_GetTick>
 8005702:	4602      	mov	r2, r0
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	1ad3      	subs	r3, r2, r3
 8005708:	2b64      	cmp	r3, #100	@ 0x64
 800570a:	d901      	bls.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800570c:	2303      	movs	r3, #3
 800570e:	e007      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005710:	4b05      	ldr	r3, [pc, #20]	@ (8005728 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005718:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800571c:	d1ef      	bne.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0xf96>
      }
    }
  }
  return HAL_OK;
 800571e:	2300      	movs	r3, #0
}
 8005720:	4618      	mov	r0, r3
 8005722:	3720      	adds	r7, #32
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}
 8005728:	40023800 	.word	0x40023800
 800572c:	080109a0 	.word	0x080109a0

08005730 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d101      	bne.n	8005742 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e1fb      	b.n	8005b3a <HAL_SPI_Init+0x40a>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a83      	ldr	r2, [pc, #524]	@ (8005954 <HAL_SPI_Init+0x224>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d01d      	beq.n	8005788 <HAL_SPI_Init+0x58>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a81      	ldr	r2, [pc, #516]	@ (8005958 <HAL_SPI_Init+0x228>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d018      	beq.n	8005788 <HAL_SPI_Init+0x58>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a80      	ldr	r2, [pc, #512]	@ (800595c <HAL_SPI_Init+0x22c>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d013      	beq.n	8005788 <HAL_SPI_Init+0x58>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a7e      	ldr	r2, [pc, #504]	@ (8005960 <HAL_SPI_Init+0x230>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d00e      	beq.n	8005788 <HAL_SPI_Init+0x58>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a7d      	ldr	r2, [pc, #500]	@ (8005964 <HAL_SPI_Init+0x234>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d009      	beq.n	8005788 <HAL_SPI_Init+0x58>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a7b      	ldr	r2, [pc, #492]	@ (8005968 <HAL_SPI_Init+0x238>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d004      	beq.n	8005788 <HAL_SPI_Init+0x58>
 800577e:	f44f 71a3 	mov.w	r1, #326	@ 0x146
 8005782:	487a      	ldr	r0, [pc, #488]	@ (800596c <HAL_SPI_Init+0x23c>)
 8005784:	f7fc fed6 	bl	8002534 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d009      	beq.n	80057a4 <HAL_SPI_Init+0x74>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005798:	d004      	beq.n	80057a4 <HAL_SPI_Init+0x74>
 800579a:	f240 1147 	movw	r1, #327	@ 0x147
 800579e:	4873      	ldr	r0, [pc, #460]	@ (800596c <HAL_SPI_Init+0x23c>)
 80057a0:	f7fc fec8 	bl	8002534 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d00e      	beq.n	80057ca <HAL_SPI_Init+0x9a>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057b4:	d009      	beq.n	80057ca <HAL_SPI_Init+0x9a>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057be:	d004      	beq.n	80057ca <HAL_SPI_Init+0x9a>
 80057c0:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 80057c4:	4869      	ldr	r0, [pc, #420]	@ (800596c <HAL_SPI_Init+0x23c>)
 80057c6:	f7fc feb5 	bl	8002534 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80057d2:	d040      	beq.n	8005856 <HAL_SPI_Init+0x126>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 80057dc:	d03b      	beq.n	8005856 <HAL_SPI_Init+0x126>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	f5b3 6f50 	cmp.w	r3, #3328	@ 0xd00
 80057e6:	d036      	beq.n	8005856 <HAL_SPI_Init+0x126>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80057f0:	d031      	beq.n	8005856 <HAL_SPI_Init+0x126>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	f5b3 6f30 	cmp.w	r3, #2816	@ 0xb00
 80057fa:	d02c      	beq.n	8005856 <HAL_SPI_Init+0x126>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005804:	d027      	beq.n	8005856 <HAL_SPI_Init+0x126>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	f5b3 6f10 	cmp.w	r3, #2304	@ 0x900
 800580e:	d022      	beq.n	8005856 <HAL_SPI_Init+0x126>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005818:	d01d      	beq.n	8005856 <HAL_SPI_Init+0x126>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005822:	d018      	beq.n	8005856 <HAL_SPI_Init+0x126>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800582c:	d013      	beq.n	8005856 <HAL_SPI_Init+0x126>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005836:	d00e      	beq.n	8005856 <HAL_SPI_Init+0x126>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005840:	d009      	beq.n	8005856 <HAL_SPI_Init+0x126>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800584a:	d004      	beq.n	8005856 <HAL_SPI_Init+0x126>
 800584c:	f240 1149 	movw	r1, #329	@ 0x149
 8005850:	4846      	ldr	r0, [pc, #280]	@ (800596c <HAL_SPI_Init+0x23c>)
 8005852:	f7fc fe6f 	bl	8002534 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	699b      	ldr	r3, [r3, #24]
 800585a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800585e:	d00d      	beq.n	800587c <HAL_SPI_Init+0x14c>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	699b      	ldr	r3, [r3, #24]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d009      	beq.n	800587c <HAL_SPI_Init+0x14c>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	699b      	ldr	r3, [r3, #24]
 800586c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005870:	d004      	beq.n	800587c <HAL_SPI_Init+0x14c>
 8005872:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 8005876:	483d      	ldr	r0, [pc, #244]	@ (800596c <HAL_SPI_Init+0x23c>)
 8005878:	f7fc fe5c 	bl	8002534 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005880:	2b08      	cmp	r3, #8
 8005882:	d008      	beq.n	8005896 <HAL_SPI_Init+0x166>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005888:	2b00      	cmp	r3, #0
 800588a:	d004      	beq.n	8005896 <HAL_SPI_Init+0x166>
 800588c:	f240 114b 	movw	r1, #331	@ 0x14b
 8005890:	4836      	ldr	r0, [pc, #216]	@ (800596c <HAL_SPI_Init+0x23c>)
 8005892:	f7fc fe4f 	bl	8002534 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	69db      	ldr	r3, [r3, #28]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d020      	beq.n	80058e0 <HAL_SPI_Init+0x1b0>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	69db      	ldr	r3, [r3, #28]
 80058a2:	2b08      	cmp	r3, #8
 80058a4:	d01c      	beq.n	80058e0 <HAL_SPI_Init+0x1b0>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	69db      	ldr	r3, [r3, #28]
 80058aa:	2b10      	cmp	r3, #16
 80058ac:	d018      	beq.n	80058e0 <HAL_SPI_Init+0x1b0>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	69db      	ldr	r3, [r3, #28]
 80058b2:	2b18      	cmp	r3, #24
 80058b4:	d014      	beq.n	80058e0 <HAL_SPI_Init+0x1b0>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	69db      	ldr	r3, [r3, #28]
 80058ba:	2b20      	cmp	r3, #32
 80058bc:	d010      	beq.n	80058e0 <HAL_SPI_Init+0x1b0>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	69db      	ldr	r3, [r3, #28]
 80058c2:	2b28      	cmp	r3, #40	@ 0x28
 80058c4:	d00c      	beq.n	80058e0 <HAL_SPI_Init+0x1b0>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	69db      	ldr	r3, [r3, #28]
 80058ca:	2b30      	cmp	r3, #48	@ 0x30
 80058cc:	d008      	beq.n	80058e0 <HAL_SPI_Init+0x1b0>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	69db      	ldr	r3, [r3, #28]
 80058d2:	2b38      	cmp	r3, #56	@ 0x38
 80058d4:	d004      	beq.n	80058e0 <HAL_SPI_Init+0x1b0>
 80058d6:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 80058da:	4824      	ldr	r0, [pc, #144]	@ (800596c <HAL_SPI_Init+0x23c>)
 80058dc:	f7fc fe2a 	bl	8002534 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6a1b      	ldr	r3, [r3, #32]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d008      	beq.n	80058fa <HAL_SPI_Init+0x1ca>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6a1b      	ldr	r3, [r3, #32]
 80058ec:	2b80      	cmp	r3, #128	@ 0x80
 80058ee:	d004      	beq.n	80058fa <HAL_SPI_Init+0x1ca>
 80058f0:	f240 114d 	movw	r1, #333	@ 0x14d
 80058f4:	481d      	ldr	r0, [pc, #116]	@ (800596c <HAL_SPI_Init+0x23c>)
 80058f6:	f7fc fe1d 	bl	8002534 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d008      	beq.n	8005914 <HAL_SPI_Init+0x1e4>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005906:	2b10      	cmp	r3, #16
 8005908:	d004      	beq.n	8005914 <HAL_SPI_Init+0x1e4>
 800590a:	f44f 71a7 	mov.w	r1, #334	@ 0x14e
 800590e:	4817      	ldr	r0, [pc, #92]	@ (800596c <HAL_SPI_Init+0x23c>)
 8005910:	f7fc fe10 	bl	8002534 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005918:	2b00      	cmp	r3, #0
 800591a:	d158      	bne.n	80059ce <HAL_SPI_Init+0x29e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	691b      	ldr	r3, [r3, #16]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d008      	beq.n	8005936 <HAL_SPI_Init+0x206>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	691b      	ldr	r3, [r3, #16]
 8005928:	2b02      	cmp	r3, #2
 800592a:	d004      	beq.n	8005936 <HAL_SPI_Init+0x206>
 800592c:	f240 1151 	movw	r1, #337	@ 0x151
 8005930:	480e      	ldr	r0, [pc, #56]	@ (800596c <HAL_SPI_Init+0x23c>)
 8005932:	f7fc fdff 	bl	8002534 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	695b      	ldr	r3, [r3, #20]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d018      	beq.n	8005970 <HAL_SPI_Init+0x240>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	2b01      	cmp	r3, #1
 8005944:	d014      	beq.n	8005970 <HAL_SPI_Init+0x240>
 8005946:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 800594a:	4808      	ldr	r0, [pc, #32]	@ (800596c <HAL_SPI_Init+0x23c>)
 800594c:	f7fc fdf2 	bl	8002534 <assert_failed>
 8005950:	e00e      	b.n	8005970 <HAL_SPI_Init+0x240>
 8005952:	bf00      	nop
 8005954:	40013000 	.word	0x40013000
 8005958:	40003800 	.word	0x40003800
 800595c:	40003c00 	.word	0x40003c00
 8005960:	40013400 	.word	0x40013400
 8005964:	40015000 	.word	0x40015000
 8005968:	40015400 	.word	0x40015400
 800596c:	080109dc 	.word	0x080109dc

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005978:	d125      	bne.n	80059c6 <HAL_SPI_Init+0x296>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	69db      	ldr	r3, [r3, #28]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d050      	beq.n	8005a24 <HAL_SPI_Init+0x2f4>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	69db      	ldr	r3, [r3, #28]
 8005986:	2b08      	cmp	r3, #8
 8005988:	d04c      	beq.n	8005a24 <HAL_SPI_Init+0x2f4>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	69db      	ldr	r3, [r3, #28]
 800598e:	2b10      	cmp	r3, #16
 8005990:	d048      	beq.n	8005a24 <HAL_SPI_Init+0x2f4>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	69db      	ldr	r3, [r3, #28]
 8005996:	2b18      	cmp	r3, #24
 8005998:	d044      	beq.n	8005a24 <HAL_SPI_Init+0x2f4>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	69db      	ldr	r3, [r3, #28]
 800599e:	2b20      	cmp	r3, #32
 80059a0:	d040      	beq.n	8005a24 <HAL_SPI_Init+0x2f4>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	69db      	ldr	r3, [r3, #28]
 80059a6:	2b28      	cmp	r3, #40	@ 0x28
 80059a8:	d03c      	beq.n	8005a24 <HAL_SPI_Init+0x2f4>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	69db      	ldr	r3, [r3, #28]
 80059ae:	2b30      	cmp	r3, #48	@ 0x30
 80059b0:	d038      	beq.n	8005a24 <HAL_SPI_Init+0x2f4>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	69db      	ldr	r3, [r3, #28]
 80059b6:	2b38      	cmp	r3, #56	@ 0x38
 80059b8:	d034      	beq.n	8005a24 <HAL_SPI_Init+0x2f4>
 80059ba:	f44f 71ab 	mov.w	r1, #342	@ 0x156
 80059be:	4861      	ldr	r0, [pc, #388]	@ (8005b44 <HAL_SPI_Init+0x414>)
 80059c0:	f7fc fdb8 	bl	8002534 <assert_failed>
 80059c4:	e02e      	b.n	8005a24 <HAL_SPI_Init+0x2f4>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	61da      	str	r2, [r3, #28]
 80059cc:	e02a      	b.n	8005a24 <HAL_SPI_Init+0x2f4>
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	69db      	ldr	r3, [r3, #28]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d020      	beq.n	8005a18 <HAL_SPI_Init+0x2e8>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	69db      	ldr	r3, [r3, #28]
 80059da:	2b08      	cmp	r3, #8
 80059dc:	d01c      	beq.n	8005a18 <HAL_SPI_Init+0x2e8>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	69db      	ldr	r3, [r3, #28]
 80059e2:	2b10      	cmp	r3, #16
 80059e4:	d018      	beq.n	8005a18 <HAL_SPI_Init+0x2e8>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	69db      	ldr	r3, [r3, #28]
 80059ea:	2b18      	cmp	r3, #24
 80059ec:	d014      	beq.n	8005a18 <HAL_SPI_Init+0x2e8>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	69db      	ldr	r3, [r3, #28]
 80059f2:	2b20      	cmp	r3, #32
 80059f4:	d010      	beq.n	8005a18 <HAL_SPI_Init+0x2e8>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	69db      	ldr	r3, [r3, #28]
 80059fa:	2b28      	cmp	r3, #40	@ 0x28
 80059fc:	d00c      	beq.n	8005a18 <HAL_SPI_Init+0x2e8>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	69db      	ldr	r3, [r3, #28]
 8005a02:	2b30      	cmp	r3, #48	@ 0x30
 8005a04:	d008      	beq.n	8005a18 <HAL_SPI_Init+0x2e8>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	69db      	ldr	r3, [r3, #28]
 8005a0a:	2b38      	cmp	r3, #56	@ 0x38
 8005a0c:	d004      	beq.n	8005a18 <HAL_SPI_Init+0x2e8>
 8005a0e:	f44f 71b0 	mov.w	r1, #352	@ 0x160
 8005a12:	484c      	ldr	r0, [pc, #304]	@ (8005b44 <HAL_SPI_Init+0x414>)
 8005a14:	f7fc fd8e 	bl	8002534 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d106      	bne.n	8005a44 <HAL_SPI_Init+0x314>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f7fd f844 	bl	8002acc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2202      	movs	r2, #2
 8005a48:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a5a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005a64:	d902      	bls.n	8005a6c <HAL_SPI_Init+0x33c>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005a66:	2300      	movs	r3, #0
 8005a68:	60fb      	str	r3, [r7, #12]
 8005a6a:	e002      	b.n	8005a72 <HAL_SPI_Init+0x342>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005a6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005a70:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005a7a:	d007      	beq.n	8005a8c <HAL_SPI_Init+0x35c>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005a84:	d002      	beq.n	8005a8c <HAL_SPI_Init+0x35c>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005a9c:	431a      	orrs	r2, r3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	f003 0302 	and.w	r3, r3, #2
 8005aa6:	431a      	orrs	r2, r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	695b      	ldr	r3, [r3, #20]
 8005aac:	f003 0301 	and.w	r3, r3, #1
 8005ab0:	431a      	orrs	r2, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	699b      	ldr	r3, [r3, #24]
 8005ab6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005aba:	431a      	orrs	r2, r3
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	69db      	ldr	r3, [r3, #28]
 8005ac0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005ac4:	431a      	orrs	r2, r3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a1b      	ldr	r3, [r3, #32]
 8005aca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ace:	ea42 0103 	orr.w	r1, r2, r3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ad6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	430a      	orrs	r2, r1
 8005ae0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	699b      	ldr	r3, [r3, #24]
 8005ae6:	0c1b      	lsrs	r3, r3, #16
 8005ae8:	f003 0204 	and.w	r2, r3, #4
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005af0:	f003 0310 	and.w	r3, r3, #16
 8005af4:	431a      	orrs	r2, r3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005afa:	f003 0308 	and.w	r3, r3, #8
 8005afe:	431a      	orrs	r2, r3
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005b08:	ea42 0103 	orr.w	r1, r2, r3
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	430a      	orrs	r2, r1
 8005b18:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	69da      	ldr	r2, [r3, #28]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b28:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005b38:	2300      	movs	r3, #0
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3710      	adds	r7, #16
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	080109dc 	.word	0x080109dc

08005b48 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b08a      	sub	sp, #40	@ 0x28
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	607a      	str	r2, [r7, #4]
 8005b54:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005b56:	2301      	movs	r3, #1
 8005b58:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d004      	beq.n	8005b72 <HAL_SPI_TransmitReceive+0x2a>
 8005b68:	f240 41fe 	movw	r1, #1278	@ 0x4fe
 8005b6c:	4888      	ldr	r0, [pc, #544]	@ (8005d90 <HAL_SPI_TransmitReceive+0x248>)
 8005b6e:	f7fc fce1 	bl	8002534 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d101      	bne.n	8005b80 <HAL_SPI_TransmitReceive+0x38>
 8005b7c:	2302      	movs	r3, #2
 8005b7e:	e20d      	b.n	8005f9c <HAL_SPI_TransmitReceive+0x454>
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2201      	movs	r2, #1
 8005b84:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b88:	f7fd f95a 	bl	8002e40 <HAL_GetTick>
 8005b8c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005b94:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005b9c:	887b      	ldrh	r3, [r7, #2]
 8005b9e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005ba0:	887b      	ldrh	r3, [r7, #2]
 8005ba2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005ba4:	7efb      	ldrb	r3, [r7, #27]
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d00e      	beq.n	8005bc8 <HAL_SPI_TransmitReceive+0x80>
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005bb0:	d106      	bne.n	8005bc0 <HAL_SPI_TransmitReceive+0x78>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d102      	bne.n	8005bc0 <HAL_SPI_TransmitReceive+0x78>
 8005bba:	7efb      	ldrb	r3, [r7, #27]
 8005bbc:	2b04      	cmp	r3, #4
 8005bbe:	d003      	beq.n	8005bc8 <HAL_SPI_TransmitReceive+0x80>
  {
    errorcode = HAL_BUSY;
 8005bc0:	2302      	movs	r3, #2
 8005bc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8005bc6:	e1e3      	b.n	8005f90 <HAL_SPI_TransmitReceive+0x448>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d005      	beq.n	8005bda <HAL_SPI_TransmitReceive+0x92>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d002      	beq.n	8005bda <HAL_SPI_TransmitReceive+0x92>
 8005bd4:	887b      	ldrh	r3, [r7, #2]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d103      	bne.n	8005be2 <HAL_SPI_TransmitReceive+0x9a>
  {
    errorcode = HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8005be0:	e1d6      	b.n	8005f90 <HAL_SPI_TransmitReceive+0x448>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	2b04      	cmp	r3, #4
 8005bec:	d003      	beq.n	8005bf6 <HAL_SPI_TransmitReceive+0xae>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2205      	movs	r2, #5
 8005bf2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	887a      	ldrh	r2, [r7, #2]
 8005c06:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	887a      	ldrh	r2, [r7, #2]
 8005c0e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	68ba      	ldr	r2, [r7, #8]
 8005c16:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	887a      	ldrh	r2, [r7, #2]
 8005c1c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	887a      	ldrh	r2, [r7, #2]
 8005c22:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2200      	movs	r2, #0
 8005c28:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005c38:	d802      	bhi.n	8005c40 <HAL_SPI_TransmitReceive+0xf8>
 8005c3a:	8a3b      	ldrh	r3, [r7, #16]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d908      	bls.n	8005c52 <HAL_SPI_TransmitReceive+0x10a>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	685a      	ldr	r2, [r3, #4]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005c4e:	605a      	str	r2, [r3, #4]
 8005c50:	e007      	b.n	8005c62 <HAL_SPI_TransmitReceive+0x11a>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	685a      	ldr	r2, [r3, #4]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005c60:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c6c:	2b40      	cmp	r3, #64	@ 0x40
 8005c6e:	d007      	beq.n	8005c80 <HAL_SPI_TransmitReceive+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c7e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005c88:	f240 8084 	bls.w	8005d94 <HAL_SPI_TransmitReceive+0x24c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d002      	beq.n	8005c9a <HAL_SPI_TransmitReceive+0x152>
 8005c94:	8a7b      	ldrh	r3, [r7, #18]
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d16d      	bne.n	8005d76 <HAL_SPI_TransmitReceive+0x22e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c9e:	881a      	ldrh	r2, [r3, #0]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005caa:	1c9a      	adds	r2, r3, #2
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	3b01      	subs	r3, #1
 8005cb8:	b29a      	uxth	r2, r3
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005cbe:	e05a      	b.n	8005d76 <HAL_SPI_TransmitReceive+0x22e>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	f003 0302 	and.w	r3, r3, #2
 8005cca:	2b02      	cmp	r3, #2
 8005ccc:	d11b      	bne.n	8005d06 <HAL_SPI_TransmitReceive+0x1be>
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d016      	beq.n	8005d06 <HAL_SPI_TransmitReceive+0x1be>
 8005cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d113      	bne.n	8005d06 <HAL_SPI_TransmitReceive+0x1be>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ce2:	881a      	ldrh	r2, [r3, #0]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cee:	1c9a      	adds	r2, r3, #2
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	b29a      	uxth	r2, r3
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d02:	2300      	movs	r3, #0
 8005d04:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	f003 0301 	and.w	r3, r3, #1
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d11c      	bne.n	8005d4e <HAL_SPI_TransmitReceive+0x206>
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d016      	beq.n	8005d4e <HAL_SPI_TransmitReceive+0x206>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68da      	ldr	r2, [r3, #12]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d2a:	b292      	uxth	r2, r2
 8005d2c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d32:	1c9a      	adds	r2, r3, #2
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	3b01      	subs	r3, #1
 8005d42:	b29a      	uxth	r2, r3
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005d4e:	f7fd f877 	bl	8002e40 <HAL_GetTick>
 8005d52:	4602      	mov	r2, r0
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	1ad3      	subs	r3, r2, r3
 8005d58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d80b      	bhi.n	8005d76 <HAL_SPI_TransmitReceive+0x22e>
 8005d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d64:	d007      	beq.n	8005d76 <HAL_SPI_TransmitReceive+0x22e>
      {
        errorcode = HAL_TIMEOUT;
 8005d66:	2303      	movs	r3, #3
 8005d68:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8005d74:	e10c      	b.n	8005f90 <HAL_SPI_TransmitReceive+0x448>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d19f      	bne.n	8005cc0 <HAL_SPI_TransmitReceive+0x178>
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d199      	bne.n	8005cc0 <HAL_SPI_TransmitReceive+0x178>
 8005d8c:	e0e6      	b.n	8005f5c <HAL_SPI_TransmitReceive+0x414>
 8005d8e:	bf00      	nop
 8005d90:	080109dc 	.word	0x080109dc
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d003      	beq.n	8005da4 <HAL_SPI_TransmitReceive+0x25c>
 8005d9c:	8a7b      	ldrh	r3, [r7, #18]
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	f040 80cf 	bne.w	8005f42 <HAL_SPI_TransmitReceive+0x3fa>
    {
      if (hspi->TxXferCount > 1U)
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d912      	bls.n	8005dd4 <HAL_SPI_TransmitReceive+0x28c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005db2:	881a      	ldrh	r2, [r3, #0]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dbe:	1c9a      	adds	r2, r3, #2
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	3b02      	subs	r3, #2
 8005dcc:	b29a      	uxth	r2, r3
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005dd2:	e0b6      	b.n	8005f42 <HAL_SPI_TransmitReceive+0x3fa>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	330c      	adds	r3, #12
 8005dde:	7812      	ldrb	r2, [r2, #0]
 8005de0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005de6:	1c5a      	adds	r2, r3, #1
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	3b01      	subs	r3, #1
 8005df4:	b29a      	uxth	r2, r3
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005dfa:	e0a2      	b.n	8005f42 <HAL_SPI_TransmitReceive+0x3fa>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	f003 0302 	and.w	r3, r3, #2
 8005e06:	2b02      	cmp	r3, #2
 8005e08:	d134      	bne.n	8005e74 <HAL_SPI_TransmitReceive+0x32c>
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d02f      	beq.n	8005e74 <HAL_SPI_TransmitReceive+0x32c>
 8005e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d12c      	bne.n	8005e74 <HAL_SPI_TransmitReceive+0x32c>
      {
        if (hspi->TxXferCount > 1U)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d912      	bls.n	8005e4a <HAL_SPI_TransmitReceive+0x302>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e28:	881a      	ldrh	r2, [r3, #0]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e34:	1c9a      	adds	r2, r3, #2
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	3b02      	subs	r3, #2
 8005e42:	b29a      	uxth	r2, r3
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005e48:	e012      	b.n	8005e70 <HAL_SPI_TransmitReceive+0x328>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	330c      	adds	r3, #12
 8005e54:	7812      	ldrb	r2, [r2, #0]
 8005e56:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e5c:	1c5a      	adds	r2, r3, #1
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	3b01      	subs	r3, #1
 8005e6a:	b29a      	uxth	r2, r3
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005e70:	2300      	movs	r3, #0
 8005e72:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	f003 0301 	and.w	r3, r3, #1
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d148      	bne.n	8005f14 <HAL_SPI_TransmitReceive+0x3cc>
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d042      	beq.n	8005f14 <HAL_SPI_TransmitReceive+0x3cc>
      {
        if (hspi->RxXferCount > 1U)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d923      	bls.n	8005ee2 <HAL_SPI_TransmitReceive+0x39a>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68da      	ldr	r2, [r3, #12]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ea4:	b292      	uxth	r2, r2
 8005ea6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eac:	1c9a      	adds	r2, r3, #2
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	3b02      	subs	r3, #2
 8005ebc:	b29a      	uxth	r2, r3
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d81f      	bhi.n	8005f10 <HAL_SPI_TransmitReceive+0x3c8>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	685a      	ldr	r2, [r3, #4]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005ede:	605a      	str	r2, [r3, #4]
 8005ee0:	e016      	b.n	8005f10 <HAL_SPI_TransmitReceive+0x3c8>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f103 020c 	add.w	r2, r3, #12
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eee:	7812      	ldrb	r2, [r2, #0]
 8005ef0:	b2d2      	uxtb	r2, r2
 8005ef2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ef8:	1c5a      	adds	r2, r3, #1
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	3b01      	subs	r3, #1
 8005f08:	b29a      	uxth	r2, r3
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f10:	2301      	movs	r3, #1
 8005f12:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005f14:	f7fc ff94 	bl	8002e40 <HAL_GetTick>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	69fb      	ldr	r3, [r7, #28]
 8005f1c:	1ad3      	subs	r3, r2, r3
 8005f1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d803      	bhi.n	8005f2c <HAL_SPI_TransmitReceive+0x3e4>
 8005f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f2a:	d102      	bne.n	8005f32 <HAL_SPI_TransmitReceive+0x3ea>
 8005f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d107      	bne.n	8005f42 <HAL_SPI_TransmitReceive+0x3fa>
      {
        errorcode = HAL_TIMEOUT;
 8005f32:	2303      	movs	r3, #3
 8005f34:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8005f40:	e026      	b.n	8005f90 <HAL_SPI_TransmitReceive+0x448>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	f47f af57 	bne.w	8005dfc <HAL_SPI_TransmitReceive+0x2b4>
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	f47f af50 	bne.w	8005dfc <HAL_SPI_TransmitReceive+0x2b4>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f5c:	69fa      	ldr	r2, [r7, #28]
 8005f5e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005f60:	68f8      	ldr	r0, [r7, #12]
 8005f62:	f000 fa5d 	bl	8006420 <SPI_EndRxTxTransaction>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d005      	beq.n	8005f78 <HAL_SPI_TransmitReceive+0x430>
  {
    errorcode = HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2220      	movs	r2, #32
 8005f76:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d003      	beq.n	8005f88 <HAL_SPI_TransmitReceive+0x440>
  {
    errorcode = HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f86:	e003      	b.n	8005f90 <HAL_SPI_TransmitReceive+0x448>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2200      	movs	r2, #0
 8005f94:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8005f98:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3728      	adds	r7, #40	@ 0x28
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b088      	sub	sp, #32
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	099b      	lsrs	r3, r3, #6
 8005fc0:	f003 0301 	and.w	r3, r3, #1
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d10f      	bne.n	8005fe8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00a      	beq.n	8005fe8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	099b      	lsrs	r3, r3, #6
 8005fd6:	f003 0301 	and.w	r3, r3, #1
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d004      	beq.n	8005fe8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	4798      	blx	r3
    return;
 8005fe6:	e0d7      	b.n	8006198 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	085b      	lsrs	r3, r3, #1
 8005fec:	f003 0301 	and.w	r3, r3, #1
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d00a      	beq.n	800600a <HAL_SPI_IRQHandler+0x66>
 8005ff4:	69fb      	ldr	r3, [r7, #28]
 8005ff6:	09db      	lsrs	r3, r3, #7
 8005ff8:	f003 0301 	and.w	r3, r3, #1
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d004      	beq.n	800600a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	4798      	blx	r3
    return;
 8006008:	e0c6      	b.n	8006198 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	095b      	lsrs	r3, r3, #5
 800600e:	f003 0301 	and.w	r3, r3, #1
 8006012:	2b00      	cmp	r3, #0
 8006014:	d10c      	bne.n	8006030 <HAL_SPI_IRQHandler+0x8c>
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	099b      	lsrs	r3, r3, #6
 800601a:	f003 0301 	and.w	r3, r3, #1
 800601e:	2b00      	cmp	r3, #0
 8006020:	d106      	bne.n	8006030 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	0a1b      	lsrs	r3, r3, #8
 8006026:	f003 0301 	and.w	r3, r3, #1
 800602a:	2b00      	cmp	r3, #0
 800602c:	f000 80b4 	beq.w	8006198 <HAL_SPI_IRQHandler+0x1f4>
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	095b      	lsrs	r3, r3, #5
 8006034:	f003 0301 	and.w	r3, r3, #1
 8006038:	2b00      	cmp	r3, #0
 800603a:	f000 80ad 	beq.w	8006198 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	099b      	lsrs	r3, r3, #6
 8006042:	f003 0301 	and.w	r3, r3, #1
 8006046:	2b00      	cmp	r3, #0
 8006048:	d023      	beq.n	8006092 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006050:	b2db      	uxtb	r3, r3
 8006052:	2b03      	cmp	r3, #3
 8006054:	d011      	beq.n	800607a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800605a:	f043 0204 	orr.w	r2, r3, #4
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006062:	2300      	movs	r3, #0
 8006064:	617b      	str	r3, [r7, #20]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	617b      	str	r3, [r7, #20]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	617b      	str	r3, [r7, #20]
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	e00b      	b.n	8006092 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800607a:	2300      	movs	r3, #0
 800607c:	613b      	str	r3, [r7, #16]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	613b      	str	r3, [r7, #16]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	613b      	str	r3, [r7, #16]
 800608e:	693b      	ldr	r3, [r7, #16]
        return;
 8006090:	e082      	b.n	8006198 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	095b      	lsrs	r3, r3, #5
 8006096:	f003 0301 	and.w	r3, r3, #1
 800609a:	2b00      	cmp	r3, #0
 800609c:	d014      	beq.n	80060c8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060a2:	f043 0201 	orr.w	r2, r3, #1
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80060aa:	2300      	movs	r3, #0
 80060ac:	60fb      	str	r3, [r7, #12]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	60fb      	str	r3, [r7, #12]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060c4:	601a      	str	r2, [r3, #0]
 80060c6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80060c8:	69bb      	ldr	r3, [r7, #24]
 80060ca:	0a1b      	lsrs	r3, r3, #8
 80060cc:	f003 0301 	and.w	r3, r3, #1
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d00c      	beq.n	80060ee <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060d8:	f043 0208 	orr.w	r2, r3, #8
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80060e0:	2300      	movs	r3, #0
 80060e2:	60bb      	str	r3, [r7, #8]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	60bb      	str	r3, [r7, #8]
 80060ec:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d04f      	beq.n	8006196 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	685a      	ldr	r2, [r3, #4]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006104:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2201      	movs	r2, #1
 800610a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800610e:	69fb      	ldr	r3, [r7, #28]
 8006110:	f003 0302 	and.w	r3, r3, #2
 8006114:	2b00      	cmp	r3, #0
 8006116:	d104      	bne.n	8006122 <HAL_SPI_IRQHandler+0x17e>
 8006118:	69fb      	ldr	r3, [r7, #28]
 800611a:	f003 0301 	and.w	r3, r3, #1
 800611e:	2b00      	cmp	r3, #0
 8006120:	d034      	beq.n	800618c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	685a      	ldr	r2, [r3, #4]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f022 0203 	bic.w	r2, r2, #3
 8006130:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006136:	2b00      	cmp	r3, #0
 8006138:	d011      	beq.n	800615e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800613e:	4a18      	ldr	r2, [pc, #96]	@ (80061a0 <HAL_SPI_IRQHandler+0x1fc>)
 8006140:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006146:	4618      	mov	r0, r3
 8006148:	f7fd f954 	bl	80033f4 <HAL_DMA_Abort_IT>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d005      	beq.n	800615e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006156:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006162:	2b00      	cmp	r3, #0
 8006164:	d016      	beq.n	8006194 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800616a:	4a0d      	ldr	r2, [pc, #52]	@ (80061a0 <HAL_SPI_IRQHandler+0x1fc>)
 800616c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006172:	4618      	mov	r0, r3
 8006174:	f7fd f93e 	bl	80033f4 <HAL_DMA_Abort_IT>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d00a      	beq.n	8006194 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006182:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800618a:	e003      	b.n	8006194 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f000 f809 	bl	80061a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006192:	e000      	b.n	8006196 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006194:	bf00      	nop
    return;
 8006196:	bf00      	nop
  }
}
 8006198:	3720      	adds	r7, #32
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	080061b9 	.word	0x080061b9

080061a4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b083      	sub	sp, #12
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80061ac:	bf00      	nop
 80061ae:	370c      	adds	r7, #12
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b084      	sub	sp, #16
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061c4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2200      	movs	r2, #0
 80061d2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80061d4:	68f8      	ldr	r0, [r7, #12]
 80061d6:	f7ff ffe5 	bl	80061a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80061da:	bf00      	nop
 80061dc:	3710      	adds	r7, #16
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
	...

080061e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b088      	sub	sp, #32
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	603b      	str	r3, [r7, #0]
 80061f0:	4613      	mov	r3, r2
 80061f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80061f4:	f7fc fe24 	bl	8002e40 <HAL_GetTick>
 80061f8:	4602      	mov	r2, r0
 80061fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061fc:	1a9b      	subs	r3, r3, r2
 80061fe:	683a      	ldr	r2, [r7, #0]
 8006200:	4413      	add	r3, r2
 8006202:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006204:	f7fc fe1c 	bl	8002e40 <HAL_GetTick>
 8006208:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800620a:	4b39      	ldr	r3, [pc, #228]	@ (80062f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	015b      	lsls	r3, r3, #5
 8006210:	0d1b      	lsrs	r3, r3, #20
 8006212:	69fa      	ldr	r2, [r7, #28]
 8006214:	fb02 f303 	mul.w	r3, r2, r3
 8006218:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800621a:	e054      	b.n	80062c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006222:	d050      	beq.n	80062c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006224:	f7fc fe0c 	bl	8002e40 <HAL_GetTick>
 8006228:	4602      	mov	r2, r0
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	1ad3      	subs	r3, r2, r3
 800622e:	69fa      	ldr	r2, [r7, #28]
 8006230:	429a      	cmp	r2, r3
 8006232:	d902      	bls.n	800623a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d13d      	bne.n	80062b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	685a      	ldr	r2, [r3, #4]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006248:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006252:	d111      	bne.n	8006278 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800625c:	d004      	beq.n	8006268 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006266:	d107      	bne.n	8006278 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006276:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800627c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006280:	d10f      	bne.n	80062a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006290:	601a      	str	r2, [r3, #0]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80062a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2201      	movs	r2, #1
 80062a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2200      	movs	r2, #0
 80062ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80062b2:	2303      	movs	r3, #3
 80062b4:	e017      	b.n	80062e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d101      	bne.n	80062c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80062bc:	2300      	movs	r3, #0
 80062be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	3b01      	subs	r3, #1
 80062c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	689a      	ldr	r2, [r3, #8]
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	4013      	ands	r3, r2
 80062d0:	68ba      	ldr	r2, [r7, #8]
 80062d2:	429a      	cmp	r2, r3
 80062d4:	bf0c      	ite	eq
 80062d6:	2301      	moveq	r3, #1
 80062d8:	2300      	movne	r3, #0
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	461a      	mov	r2, r3
 80062de:	79fb      	ldrb	r3, [r7, #7]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d19b      	bne.n	800621c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3720      	adds	r7, #32
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
 80062ee:	bf00      	nop
 80062f0:	20000004 	.word	0x20000004

080062f4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b08a      	sub	sp, #40	@ 0x28
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	60f8      	str	r0, [r7, #12]
 80062fc:	60b9      	str	r1, [r7, #8]
 80062fe:	607a      	str	r2, [r7, #4]
 8006300:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006302:	2300      	movs	r3, #0
 8006304:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006306:	f7fc fd9b 	bl	8002e40 <HAL_GetTick>
 800630a:	4602      	mov	r2, r0
 800630c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800630e:	1a9b      	subs	r3, r3, r2
 8006310:	683a      	ldr	r2, [r7, #0]
 8006312:	4413      	add	r3, r2
 8006314:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006316:	f7fc fd93 	bl	8002e40 <HAL_GetTick>
 800631a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	330c      	adds	r3, #12
 8006322:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006324:	4b3d      	ldr	r3, [pc, #244]	@ (800641c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	4613      	mov	r3, r2
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	4413      	add	r3, r2
 800632e:	00da      	lsls	r2, r3, #3
 8006330:	1ad3      	subs	r3, r2, r3
 8006332:	0d1b      	lsrs	r3, r3, #20
 8006334:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006336:	fb02 f303 	mul.w	r3, r2, r3
 800633a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800633c:	e060      	b.n	8006400 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006344:	d107      	bne.n	8006356 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d104      	bne.n	8006356 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800634c:	69fb      	ldr	r3, [r7, #28]
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	b2db      	uxtb	r3, r3
 8006352:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006354:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800635c:	d050      	beq.n	8006400 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800635e:	f7fc fd6f 	bl	8002e40 <HAL_GetTick>
 8006362:	4602      	mov	r2, r0
 8006364:	6a3b      	ldr	r3, [r7, #32]
 8006366:	1ad3      	subs	r3, r2, r3
 8006368:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800636a:	429a      	cmp	r2, r3
 800636c:	d902      	bls.n	8006374 <SPI_WaitFifoStateUntilTimeout+0x80>
 800636e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006370:	2b00      	cmp	r3, #0
 8006372:	d13d      	bne.n	80063f0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	685a      	ldr	r2, [r3, #4]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006382:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800638c:	d111      	bne.n	80063b2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006396:	d004      	beq.n	80063a2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063a0:	d107      	bne.n	80063b2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80063b0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063ba:	d10f      	bne.n	80063dc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80063ca:	601a      	str	r2, [r3, #0]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80063da:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2200      	movs	r2, #0
 80063e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80063ec:	2303      	movs	r3, #3
 80063ee:	e010      	b.n	8006412 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80063f0:	69bb      	ldr	r3, [r7, #24]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d101      	bne.n	80063fa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80063f6:	2300      	movs	r3, #0
 80063f8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80063fa:	69bb      	ldr	r3, [r7, #24]
 80063fc:	3b01      	subs	r3, #1
 80063fe:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	689a      	ldr	r2, [r3, #8]
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	4013      	ands	r3, r2
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	429a      	cmp	r2, r3
 800640e:	d196      	bne.n	800633e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	3728      	adds	r7, #40	@ 0x28
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop
 800641c:	20000004 	.word	0x20000004

08006420 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b088      	sub	sp, #32
 8006424:	af02      	add	r7, sp, #8
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	9300      	str	r3, [sp, #0]
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	2200      	movs	r2, #0
 8006434:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006438:	68f8      	ldr	r0, [r7, #12]
 800643a:	f7ff ff5b 	bl	80062f4 <SPI_WaitFifoStateUntilTimeout>
 800643e:	4603      	mov	r3, r0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d007      	beq.n	8006454 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006448:	f043 0220 	orr.w	r2, r3, #32
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006450:	2303      	movs	r3, #3
 8006452:	e046      	b.n	80064e2 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006454:	4b25      	ldr	r3, [pc, #148]	@ (80064ec <SPI_EndRxTxTransaction+0xcc>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a25      	ldr	r2, [pc, #148]	@ (80064f0 <SPI_EndRxTxTransaction+0xd0>)
 800645a:	fba2 2303 	umull	r2, r3, r2, r3
 800645e:	0d5b      	lsrs	r3, r3, #21
 8006460:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006464:	fb02 f303 	mul.w	r3, r2, r3
 8006468:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006472:	d112      	bne.n	800649a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	9300      	str	r3, [sp, #0]
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	2200      	movs	r2, #0
 800647c:	2180      	movs	r1, #128	@ 0x80
 800647e:	68f8      	ldr	r0, [r7, #12]
 8006480:	f7ff feb0 	bl	80061e4 <SPI_WaitFlagStateUntilTimeout>
 8006484:	4603      	mov	r3, r0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d016      	beq.n	80064b8 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800648e:	f043 0220 	orr.w	r2, r3, #32
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8006496:	2303      	movs	r3, #3
 8006498:	e023      	b.n	80064e2 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d00a      	beq.n	80064b6 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	3b01      	subs	r3, #1
 80064a4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064b0:	2b80      	cmp	r3, #128	@ 0x80
 80064b2:	d0f2      	beq.n	800649a <SPI_EndRxTxTransaction+0x7a>
 80064b4:	e000      	b.n	80064b8 <SPI_EndRxTxTransaction+0x98>
        break;
 80064b6:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	9300      	str	r3, [sp, #0]
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	2200      	movs	r2, #0
 80064c0:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80064c4:	68f8      	ldr	r0, [r7, #12]
 80064c6:	f7ff ff15 	bl	80062f4 <SPI_WaitFifoStateUntilTimeout>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d007      	beq.n	80064e0 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064d4:	f043 0220 	orr.w	r2, r3, #32
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80064dc:	2303      	movs	r3, #3
 80064de:	e000      	b.n	80064e2 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3718      	adds	r7, #24
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop
 80064ec:	20000004 	.word	0x20000004
 80064f0:	165e9f81 	.word	0x165e9f81

080064f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b082      	sub	sp, #8
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d101      	bne.n	8006506 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e0f5      	b.n	80066f2 <HAL_TIM_Base_Init+0x1fe>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a7c      	ldr	r2, [pc, #496]	@ (80066fc <HAL_TIM_Base_Init+0x208>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d045      	beq.n	800659c <HAL_TIM_Base_Init+0xa8>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006518:	d040      	beq.n	800659c <HAL_TIM_Base_Init+0xa8>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a78      	ldr	r2, [pc, #480]	@ (8006700 <HAL_TIM_Base_Init+0x20c>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d03b      	beq.n	800659c <HAL_TIM_Base_Init+0xa8>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a76      	ldr	r2, [pc, #472]	@ (8006704 <HAL_TIM_Base_Init+0x210>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d036      	beq.n	800659c <HAL_TIM_Base_Init+0xa8>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a75      	ldr	r2, [pc, #468]	@ (8006708 <HAL_TIM_Base_Init+0x214>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d031      	beq.n	800659c <HAL_TIM_Base_Init+0xa8>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a73      	ldr	r2, [pc, #460]	@ (800670c <HAL_TIM_Base_Init+0x218>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d02c      	beq.n	800659c <HAL_TIM_Base_Init+0xa8>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a72      	ldr	r2, [pc, #456]	@ (8006710 <HAL_TIM_Base_Init+0x21c>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d027      	beq.n	800659c <HAL_TIM_Base_Init+0xa8>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a70      	ldr	r2, [pc, #448]	@ (8006714 <HAL_TIM_Base_Init+0x220>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d022      	beq.n	800659c <HAL_TIM_Base_Init+0xa8>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a6f      	ldr	r2, [pc, #444]	@ (8006718 <HAL_TIM_Base_Init+0x224>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d01d      	beq.n	800659c <HAL_TIM_Base_Init+0xa8>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a6d      	ldr	r2, [pc, #436]	@ (800671c <HAL_TIM_Base_Init+0x228>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d018      	beq.n	800659c <HAL_TIM_Base_Init+0xa8>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a6c      	ldr	r2, [pc, #432]	@ (8006720 <HAL_TIM_Base_Init+0x22c>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d013      	beq.n	800659c <HAL_TIM_Base_Init+0xa8>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a6a      	ldr	r2, [pc, #424]	@ (8006724 <HAL_TIM_Base_Init+0x230>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d00e      	beq.n	800659c <HAL_TIM_Base_Init+0xa8>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a69      	ldr	r2, [pc, #420]	@ (8006728 <HAL_TIM_Base_Init+0x234>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d009      	beq.n	800659c <HAL_TIM_Base_Init+0xa8>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a67      	ldr	r2, [pc, #412]	@ (800672c <HAL_TIM_Base_Init+0x238>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d004      	beq.n	800659c <HAL_TIM_Base_Init+0xa8>
 8006592:	f44f 718b 	mov.w	r1, #278	@ 0x116
 8006596:	4866      	ldr	r0, [pc, #408]	@ (8006730 <HAL_TIM_Base_Init+0x23c>)
 8006598:	f7fb ffcc 	bl	8002534 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d014      	beq.n	80065ce <HAL_TIM_Base_Init+0xda>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	2b10      	cmp	r3, #16
 80065aa:	d010      	beq.n	80065ce <HAL_TIM_Base_Init+0xda>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	2b20      	cmp	r3, #32
 80065b2:	d00c      	beq.n	80065ce <HAL_TIM_Base_Init+0xda>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	2b40      	cmp	r3, #64	@ 0x40
 80065ba:	d008      	beq.n	80065ce <HAL_TIM_Base_Init+0xda>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	2b60      	cmp	r3, #96	@ 0x60
 80065c2:	d004      	beq.n	80065ce <HAL_TIM_Base_Init+0xda>
 80065c4:	f240 1117 	movw	r1, #279	@ 0x117
 80065c8:	4859      	ldr	r0, [pc, #356]	@ (8006730 <HAL_TIM_Base_Init+0x23c>)
 80065ca:	f7fb ffb3 	bl	8002534 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d00e      	beq.n	80065f4 <HAL_TIM_Base_Init+0x100>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065de:	d009      	beq.n	80065f4 <HAL_TIM_Base_Init+0x100>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	691b      	ldr	r3, [r3, #16]
 80065e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065e8:	d004      	beq.n	80065f4 <HAL_TIM_Base_Init+0x100>
 80065ea:	f44f 718c 	mov.w	r1, #280	@ 0x118
 80065ee:	4850      	ldr	r0, [pc, #320]	@ (8006730 <HAL_TIM_Base_Init+0x23c>)
 80065f0:	f7fb ffa0 	bl	8002534 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065fc:	d004      	beq.n	8006608 <HAL_TIM_Base_Init+0x114>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a41      	ldr	r2, [pc, #260]	@ (8006708 <HAL_TIM_Base_Init+0x214>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d107      	bne.n	8006618 <HAL_TIM_Base_Init+0x124>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	2b00      	cmp	r3, #0
 800660e:	bf14      	ite	ne
 8006610:	2301      	movne	r3, #1
 8006612:	2300      	moveq	r3, #0
 8006614:	b2db      	uxtb	r3, r3
 8006616:	e00e      	b.n	8006636 <HAL_TIM_Base_Init+0x142>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d006      	beq.n	800662e <HAL_TIM_Base_Init+0x13a>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006628:	d201      	bcs.n	800662e <HAL_TIM_Base_Init+0x13a>
 800662a:	2301      	movs	r3, #1
 800662c:	e000      	b.n	8006630 <HAL_TIM_Base_Init+0x13c>
 800662e:	2300      	movs	r3, #0
 8006630:	f003 0301 	and.w	r3, r3, #1
 8006634:	b2db      	uxtb	r3, r3
 8006636:	2b00      	cmp	r3, #0
 8006638:	d104      	bne.n	8006644 <HAL_TIM_Base_Init+0x150>
 800663a:	f240 1119 	movw	r1, #281	@ 0x119
 800663e:	483c      	ldr	r0, [pc, #240]	@ (8006730 <HAL_TIM_Base_Init+0x23c>)
 8006640:	f7fb ff78 	bl	8002534 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	699b      	ldr	r3, [r3, #24]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d008      	beq.n	800665e <HAL_TIM_Base_Init+0x16a>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	699b      	ldr	r3, [r3, #24]
 8006650:	2b80      	cmp	r3, #128	@ 0x80
 8006652:	d004      	beq.n	800665e <HAL_TIM_Base_Init+0x16a>
 8006654:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 8006658:	4835      	ldr	r0, [pc, #212]	@ (8006730 <HAL_TIM_Base_Init+0x23c>)
 800665a:	f7fb ff6b 	bl	8002534 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006664:	b2db      	uxtb	r3, r3
 8006666:	2b00      	cmp	r3, #0
 8006668:	d106      	bne.n	8006678 <HAL_TIM_Base_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f7fc fa76 	bl	8002b64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2202      	movs	r2, #2
 800667c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	3304      	adds	r3, #4
 8006688:	4619      	mov	r1, r3
 800668a:	4610      	mov	r0, r2
 800668c:	f000 ff36 	bl	80074fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2201      	movs	r2, #1
 8006694:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2201      	movs	r2, #1
 80066d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2201      	movs	r2, #1
 80066dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2201      	movs	r2, #1
 80066e4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2201      	movs	r2, #1
 80066ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3708      	adds	r7, #8
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	bf00      	nop
 80066fc:	40010000 	.word	0x40010000
 8006700:	40000400 	.word	0x40000400
 8006704:	40000800 	.word	0x40000800
 8006708:	40000c00 	.word	0x40000c00
 800670c:	40001000 	.word	0x40001000
 8006710:	40001400 	.word	0x40001400
 8006714:	40010400 	.word	0x40010400
 8006718:	40014000 	.word	0x40014000
 800671c:	40014400 	.word	0x40014400
 8006720:	40014800 	.word	0x40014800
 8006724:	40001800 	.word	0x40001800
 8006728:	40001c00 	.word	0x40001c00
 800672c:	40002000 	.word	0x40002000
 8006730:	08010a14 	.word	0x08010a14

08006734 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b082      	sub	sp, #8
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d101      	bne.n	8006746 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	e0f5      	b.n	8006932 <HAL_TIM_PWM_Init+0x1fe>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a7c      	ldr	r2, [pc, #496]	@ (800693c <HAL_TIM_PWM_Init+0x208>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d045      	beq.n	80067dc <HAL_TIM_PWM_Init+0xa8>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006758:	d040      	beq.n	80067dc <HAL_TIM_PWM_Init+0xa8>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a78      	ldr	r2, [pc, #480]	@ (8006940 <HAL_TIM_PWM_Init+0x20c>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d03b      	beq.n	80067dc <HAL_TIM_PWM_Init+0xa8>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a76      	ldr	r2, [pc, #472]	@ (8006944 <HAL_TIM_PWM_Init+0x210>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d036      	beq.n	80067dc <HAL_TIM_PWM_Init+0xa8>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a75      	ldr	r2, [pc, #468]	@ (8006948 <HAL_TIM_PWM_Init+0x214>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d031      	beq.n	80067dc <HAL_TIM_PWM_Init+0xa8>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a73      	ldr	r2, [pc, #460]	@ (800694c <HAL_TIM_PWM_Init+0x218>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d02c      	beq.n	80067dc <HAL_TIM_PWM_Init+0xa8>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a72      	ldr	r2, [pc, #456]	@ (8006950 <HAL_TIM_PWM_Init+0x21c>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d027      	beq.n	80067dc <HAL_TIM_PWM_Init+0xa8>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a70      	ldr	r2, [pc, #448]	@ (8006954 <HAL_TIM_PWM_Init+0x220>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d022      	beq.n	80067dc <HAL_TIM_PWM_Init+0xa8>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a6f      	ldr	r2, [pc, #444]	@ (8006958 <HAL_TIM_PWM_Init+0x224>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d01d      	beq.n	80067dc <HAL_TIM_PWM_Init+0xa8>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a6d      	ldr	r2, [pc, #436]	@ (800695c <HAL_TIM_PWM_Init+0x228>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d018      	beq.n	80067dc <HAL_TIM_PWM_Init+0xa8>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a6c      	ldr	r2, [pc, #432]	@ (8006960 <HAL_TIM_PWM_Init+0x22c>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d013      	beq.n	80067dc <HAL_TIM_PWM_Init+0xa8>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a6a      	ldr	r2, [pc, #424]	@ (8006964 <HAL_TIM_PWM_Init+0x230>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d00e      	beq.n	80067dc <HAL_TIM_PWM_Init+0xa8>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a69      	ldr	r2, [pc, #420]	@ (8006968 <HAL_TIM_PWM_Init+0x234>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d009      	beq.n	80067dc <HAL_TIM_PWM_Init+0xa8>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a67      	ldr	r2, [pc, #412]	@ (800696c <HAL_TIM_PWM_Init+0x238>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d004      	beq.n	80067dc <HAL_TIM_PWM_Init+0xa8>
 80067d2:	f240 5133 	movw	r1, #1331	@ 0x533
 80067d6:	4866      	ldr	r0, [pc, #408]	@ (8006970 <HAL_TIM_PWM_Init+0x23c>)
 80067d8:	f7fb feac 	bl	8002534 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d014      	beq.n	800680e <HAL_TIM_PWM_Init+0xda>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	2b10      	cmp	r3, #16
 80067ea:	d010      	beq.n	800680e <HAL_TIM_PWM_Init+0xda>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	2b20      	cmp	r3, #32
 80067f2:	d00c      	beq.n	800680e <HAL_TIM_PWM_Init+0xda>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	2b40      	cmp	r3, #64	@ 0x40
 80067fa:	d008      	beq.n	800680e <HAL_TIM_PWM_Init+0xda>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	2b60      	cmp	r3, #96	@ 0x60
 8006802:	d004      	beq.n	800680e <HAL_TIM_PWM_Init+0xda>
 8006804:	f240 5134 	movw	r1, #1332	@ 0x534
 8006808:	4859      	ldr	r0, [pc, #356]	@ (8006970 <HAL_TIM_PWM_Init+0x23c>)
 800680a:	f7fb fe93 	bl	8002534 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	691b      	ldr	r3, [r3, #16]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d00e      	beq.n	8006834 <HAL_TIM_PWM_Init+0x100>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	691b      	ldr	r3, [r3, #16]
 800681a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800681e:	d009      	beq.n	8006834 <HAL_TIM_PWM_Init+0x100>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	691b      	ldr	r3, [r3, #16]
 8006824:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006828:	d004      	beq.n	8006834 <HAL_TIM_PWM_Init+0x100>
 800682a:	f240 5135 	movw	r1, #1333	@ 0x535
 800682e:	4850      	ldr	r0, [pc, #320]	@ (8006970 <HAL_TIM_PWM_Init+0x23c>)
 8006830:	f7fb fe80 	bl	8002534 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800683c:	d004      	beq.n	8006848 <HAL_TIM_PWM_Init+0x114>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a41      	ldr	r2, [pc, #260]	@ (8006948 <HAL_TIM_PWM_Init+0x214>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d107      	bne.n	8006858 <HAL_TIM_PWM_Init+0x124>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	2b00      	cmp	r3, #0
 800684e:	bf14      	ite	ne
 8006850:	2301      	movne	r3, #1
 8006852:	2300      	moveq	r3, #0
 8006854:	b2db      	uxtb	r3, r3
 8006856:	e00e      	b.n	8006876 <HAL_TIM_PWM_Init+0x142>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d006      	beq.n	800686e <HAL_TIM_PWM_Init+0x13a>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006868:	d201      	bcs.n	800686e <HAL_TIM_PWM_Init+0x13a>
 800686a:	2301      	movs	r3, #1
 800686c:	e000      	b.n	8006870 <HAL_TIM_PWM_Init+0x13c>
 800686e:	2300      	movs	r3, #0
 8006870:	f003 0301 	and.w	r3, r3, #1
 8006874:	b2db      	uxtb	r3, r3
 8006876:	2b00      	cmp	r3, #0
 8006878:	d104      	bne.n	8006884 <HAL_TIM_PWM_Init+0x150>
 800687a:	f240 5136 	movw	r1, #1334	@ 0x536
 800687e:	483c      	ldr	r0, [pc, #240]	@ (8006970 <HAL_TIM_PWM_Init+0x23c>)
 8006880:	f7fb fe58 	bl	8002534 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	699b      	ldr	r3, [r3, #24]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d008      	beq.n	800689e <HAL_TIM_PWM_Init+0x16a>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	699b      	ldr	r3, [r3, #24]
 8006890:	2b80      	cmp	r3, #128	@ 0x80
 8006892:	d004      	beq.n	800689e <HAL_TIM_PWM_Init+0x16a>
 8006894:	f240 5137 	movw	r1, #1335	@ 0x537
 8006898:	4835      	ldr	r0, [pc, #212]	@ (8006970 <HAL_TIM_PWM_Init+0x23c>)
 800689a:	f7fb fe4b 	bl	8002534 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d106      	bne.n	80068b8 <HAL_TIM_PWM_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2200      	movs	r2, #0
 80068ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 f85e 	bl	8006974 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2202      	movs	r2, #2
 80068bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	3304      	adds	r3, #4
 80068c8:	4619      	mov	r1, r3
 80068ca:	4610      	mov	r0, r2
 80068cc:	f000 fe16 	bl	80074fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2201      	movs	r2, #1
 80068d4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2201      	movs	r2, #1
 80068dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2201      	movs	r2, #1
 800690c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2201      	movs	r2, #1
 8006914:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2201      	movs	r2, #1
 800691c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2201      	movs	r2, #1
 8006924:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2201      	movs	r2, #1
 800692c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006930:	2300      	movs	r3, #0
}
 8006932:	4618      	mov	r0, r3
 8006934:	3708      	adds	r7, #8
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
 800693a:	bf00      	nop
 800693c:	40010000 	.word	0x40010000
 8006940:	40000400 	.word	0x40000400
 8006944:	40000800 	.word	0x40000800
 8006948:	40000c00 	.word	0x40000c00
 800694c:	40001000 	.word	0x40001000
 8006950:	40001400 	.word	0x40001400
 8006954:	40010400 	.word	0x40010400
 8006958:	40014000 	.word	0x40014000
 800695c:	40014400 	.word	0x40014400
 8006960:	40014800 	.word	0x40014800
 8006964:	40001800 	.word	0x40001800
 8006968:	40001c00 	.word	0x40001c00
 800696c:	40002000 	.word	0x40002000
 8006970:	08010a14 	.word	0x08010a14

08006974 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800697c:	bf00      	nop
 800697e:	370c      	adds	r7, #12
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b086      	sub	sp, #24
 800698c:	af00      	add	r7, sp, #0
 800698e:	60f8      	str	r0, [r7, #12]
 8006990:	60b9      	str	r1, [r7, #8]
 8006992:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006994:	2300      	movs	r3, #0
 8006996:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d016      	beq.n	80069cc <HAL_TIM_PWM_ConfigChannel+0x44>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2b04      	cmp	r3, #4
 80069a2:	d013      	beq.n	80069cc <HAL_TIM_PWM_ConfigChannel+0x44>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2b08      	cmp	r3, #8
 80069a8:	d010      	beq.n	80069cc <HAL_TIM_PWM_ConfigChannel+0x44>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2b0c      	cmp	r3, #12
 80069ae:	d00d      	beq.n	80069cc <HAL_TIM_PWM_ConfigChannel+0x44>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2b10      	cmp	r3, #16
 80069b4:	d00a      	beq.n	80069cc <HAL_TIM_PWM_ConfigChannel+0x44>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2b14      	cmp	r3, #20
 80069ba:	d007      	beq.n	80069cc <HAL_TIM_PWM_ConfigChannel+0x44>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2b3c      	cmp	r3, #60	@ 0x3c
 80069c0:	d004      	beq.n	80069cc <HAL_TIM_PWM_ConfigChannel+0x44>
 80069c2:	f241 01b3 	movw	r1, #4275	@ 0x10b3
 80069c6:	4895      	ldr	r0, [pc, #596]	@ (8006c1c <HAL_TIM_PWM_ConfigChannel+0x294>)
 80069c8:	f7fb fdb4 	bl	8002534 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	2b60      	cmp	r3, #96	@ 0x60
 80069d2:	d01c      	beq.n	8006a0e <HAL_TIM_PWM_ConfigChannel+0x86>
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2b70      	cmp	r3, #112	@ 0x70
 80069da:	d018      	beq.n	8006a0e <HAL_TIM_PWM_ConfigChannel+0x86>
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a8f      	ldr	r2, [pc, #572]	@ (8006c20 <HAL_TIM_PWM_ConfigChannel+0x298>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d013      	beq.n	8006a0e <HAL_TIM_PWM_ConfigChannel+0x86>
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a8e      	ldr	r2, [pc, #568]	@ (8006c24 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d00e      	beq.n	8006a0e <HAL_TIM_PWM_ConfigChannel+0x86>
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a8c      	ldr	r2, [pc, #560]	@ (8006c28 <HAL_TIM_PWM_ConfigChannel+0x2a0>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d009      	beq.n	8006a0e <HAL_TIM_PWM_ConfigChannel+0x86>
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a8b      	ldr	r2, [pc, #556]	@ (8006c2c <HAL_TIM_PWM_ConfigChannel+0x2a4>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d004      	beq.n	8006a0e <HAL_TIM_PWM_ConfigChannel+0x86>
 8006a04:	f241 01b4 	movw	r1, #4276	@ 0x10b4
 8006a08:	4884      	ldr	r0, [pc, #528]	@ (8006c1c <HAL_TIM_PWM_ConfigChannel+0x294>)
 8006a0a:	f7fb fd93 	bl	8002534 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d008      	beq.n	8006a28 <HAL_TIM_PWM_ConfigChannel+0xa0>
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	2b02      	cmp	r3, #2
 8006a1c:	d004      	beq.n	8006a28 <HAL_TIM_PWM_ConfigChannel+0xa0>
 8006a1e:	f241 01b5 	movw	r1, #4277	@ 0x10b5
 8006a22:	487e      	ldr	r0, [pc, #504]	@ (8006c1c <HAL_TIM_PWM_ConfigChannel+0x294>)
 8006a24:	f7fb fd86 	bl	8002534 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	691b      	ldr	r3, [r3, #16]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d008      	beq.n	8006a42 <HAL_TIM_PWM_ConfigChannel+0xba>
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	691b      	ldr	r3, [r3, #16]
 8006a34:	2b04      	cmp	r3, #4
 8006a36:	d004      	beq.n	8006a42 <HAL_TIM_PWM_ConfigChannel+0xba>
 8006a38:	f241 01b6 	movw	r1, #4278	@ 0x10b6
 8006a3c:	4877      	ldr	r0, [pc, #476]	@ (8006c1c <HAL_TIM_PWM_ConfigChannel+0x294>)
 8006a3e:	f7fb fd79 	bl	8002534 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d101      	bne.n	8006a50 <HAL_TIM_PWM_ConfigChannel+0xc8>
 8006a4c:	2302      	movs	r3, #2
 8006a4e:	e1f3      	b.n	8006e38 <HAL_TIM_PWM_ConfigChannel+0x4b0>
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2b14      	cmp	r3, #20
 8006a5c:	f200 81e4 	bhi.w	8006e28 <HAL_TIM_PWM_ConfigChannel+0x4a0>
 8006a60:	a201      	add	r2, pc, #4	@ (adr r2, 8006a68 <HAL_TIM_PWM_ConfigChannel+0xe0>)
 8006a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a66:	bf00      	nop
 8006a68:	08006abd 	.word	0x08006abd
 8006a6c:	08006e29 	.word	0x08006e29
 8006a70:	08006e29 	.word	0x08006e29
 8006a74:	08006e29 	.word	0x08006e29
 8006a78:	08006b7f 	.word	0x08006b7f
 8006a7c:	08006e29 	.word	0x08006e29
 8006a80:	08006e29 	.word	0x08006e29
 8006a84:	08006e29 	.word	0x08006e29
 8006a88:	08006c5d 	.word	0x08006c5d
 8006a8c:	08006e29 	.word	0x08006e29
 8006a90:	08006e29 	.word	0x08006e29
 8006a94:	08006e29 	.word	0x08006e29
 8006a98:	08006ce3 	.word	0x08006ce3
 8006a9c:	08006e29 	.word	0x08006e29
 8006aa0:	08006e29 	.word	0x08006e29
 8006aa4:	08006e29 	.word	0x08006e29
 8006aa8:	08006d6b 	.word	0x08006d6b
 8006aac:	08006e29 	.word	0x08006e29
 8006ab0:	08006e29 	.word	0x08006e29
 8006ab4:	08006e29 	.word	0x08006e29
 8006ab8:	08006dc9 	.word	0x08006dc9
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a5b      	ldr	r2, [pc, #364]	@ (8006c30 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d03b      	beq.n	8006b3e <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ace:	d036      	beq.n	8006b3e <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a57      	ldr	r2, [pc, #348]	@ (8006c34 <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d031      	beq.n	8006b3e <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a56      	ldr	r2, [pc, #344]	@ (8006c38 <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d02c      	beq.n	8006b3e <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a54      	ldr	r2, [pc, #336]	@ (8006c3c <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d027      	beq.n	8006b3e <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a53      	ldr	r2, [pc, #332]	@ (8006c40 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d022      	beq.n	8006b3e <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a51      	ldr	r2, [pc, #324]	@ (8006c44 <HAL_TIM_PWM_ConfigChannel+0x2bc>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d01d      	beq.n	8006b3e <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a50      	ldr	r2, [pc, #320]	@ (8006c48 <HAL_TIM_PWM_ConfigChannel+0x2c0>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d018      	beq.n	8006b3e <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a4e      	ldr	r2, [pc, #312]	@ (8006c4c <HAL_TIM_PWM_ConfigChannel+0x2c4>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d013      	beq.n	8006b3e <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a4d      	ldr	r2, [pc, #308]	@ (8006c50 <HAL_TIM_PWM_ConfigChannel+0x2c8>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d00e      	beq.n	8006b3e <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a4b      	ldr	r2, [pc, #300]	@ (8006c54 <HAL_TIM_PWM_ConfigChannel+0x2cc>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d009      	beq.n	8006b3e <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a4a      	ldr	r2, [pc, #296]	@ (8006c58 <HAL_TIM_PWM_ConfigChannel+0x2d0>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d004      	beq.n	8006b3e <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8006b34:	f44f 5186 	mov.w	r1, #4288	@ 0x10c0
 8006b38:	4838      	ldr	r0, [pc, #224]	@ (8006c1c <HAL_TIM_PWM_ConfigChannel+0x294>)
 8006b3a:	f7fb fcfb 	bl	8002534 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	68b9      	ldr	r1, [r7, #8]
 8006b44:	4618      	mov	r0, r3
 8006b46:	f000 fd85 	bl	8007654 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	699a      	ldr	r2, [r3, #24]
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f042 0208 	orr.w	r2, r2, #8
 8006b58:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	699a      	ldr	r2, [r3, #24]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f022 0204 	bic.w	r2, r2, #4
 8006b68:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	6999      	ldr	r1, [r3, #24]
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	691a      	ldr	r2, [r3, #16]
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	430a      	orrs	r2, r1
 8006b7a:	619a      	str	r2, [r3, #24]
      break;
 8006b7c:	e157      	b.n	8006e2e <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a2b      	ldr	r2, [pc, #172]	@ (8006c30 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d027      	beq.n	8006bd8 <HAL_TIM_PWM_ConfigChannel+0x250>
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b90:	d022      	beq.n	8006bd8 <HAL_TIM_PWM_ConfigChannel+0x250>
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a27      	ldr	r2, [pc, #156]	@ (8006c34 <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d01d      	beq.n	8006bd8 <HAL_TIM_PWM_ConfigChannel+0x250>
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a25      	ldr	r2, [pc, #148]	@ (8006c38 <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d018      	beq.n	8006bd8 <HAL_TIM_PWM_ConfigChannel+0x250>
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a24      	ldr	r2, [pc, #144]	@ (8006c3c <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d013      	beq.n	8006bd8 <HAL_TIM_PWM_ConfigChannel+0x250>
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a22      	ldr	r2, [pc, #136]	@ (8006c40 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d00e      	beq.n	8006bd8 <HAL_TIM_PWM_ConfigChannel+0x250>
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a21      	ldr	r2, [pc, #132]	@ (8006c44 <HAL_TIM_PWM_ConfigChannel+0x2bc>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d009      	beq.n	8006bd8 <HAL_TIM_PWM_ConfigChannel+0x250>
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a21      	ldr	r2, [pc, #132]	@ (8006c50 <HAL_TIM_PWM_ConfigChannel+0x2c8>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d004      	beq.n	8006bd8 <HAL_TIM_PWM_ConfigChannel+0x250>
 8006bce:	f241 01d1 	movw	r1, #4305	@ 0x10d1
 8006bd2:	4812      	ldr	r0, [pc, #72]	@ (8006c1c <HAL_TIM_PWM_ConfigChannel+0x294>)
 8006bd4:	f7fb fcae 	bl	8002534 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	68b9      	ldr	r1, [r7, #8]
 8006bde:	4618      	mov	r0, r3
 8006be0:	f000 fdd4 	bl	800778c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	699a      	ldr	r2, [r3, #24]
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006bf2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	699a      	ldr	r2, [r3, #24]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	6999      	ldr	r1, [r3, #24]
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	691b      	ldr	r3, [r3, #16]
 8006c0e:	021a      	lsls	r2, r3, #8
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	430a      	orrs	r2, r1
 8006c16:	619a      	str	r2, [r3, #24]
      break;
 8006c18:	e109      	b.n	8006e2e <HAL_TIM_PWM_ConfigChannel+0x4a6>
 8006c1a:	bf00      	nop
 8006c1c:	08010a14 	.word	0x08010a14
 8006c20:	00010040 	.word	0x00010040
 8006c24:	00010050 	.word	0x00010050
 8006c28:	00010060 	.word	0x00010060
 8006c2c:	00010070 	.word	0x00010070
 8006c30:	40010000 	.word	0x40010000
 8006c34:	40000400 	.word	0x40000400
 8006c38:	40000800 	.word	0x40000800
 8006c3c:	40000c00 	.word	0x40000c00
 8006c40:	40010400 	.word	0x40010400
 8006c44:	40014000 	.word	0x40014000
 8006c48:	40014400 	.word	0x40014400
 8006c4c:	40014800 	.word	0x40014800
 8006c50:	40001800 	.word	0x40001800
 8006c54:	40001c00 	.word	0x40001c00
 8006c58:	40002000 	.word	0x40002000
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a77      	ldr	r2, [pc, #476]	@ (8006e40 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d01d      	beq.n	8006ca2 <HAL_TIM_PWM_ConfigChannel+0x31a>
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c6e:	d018      	beq.n	8006ca2 <HAL_TIM_PWM_ConfigChannel+0x31a>
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a73      	ldr	r2, [pc, #460]	@ (8006e44 <HAL_TIM_PWM_ConfigChannel+0x4bc>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d013      	beq.n	8006ca2 <HAL_TIM_PWM_ConfigChannel+0x31a>
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a72      	ldr	r2, [pc, #456]	@ (8006e48 <HAL_TIM_PWM_ConfigChannel+0x4c0>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d00e      	beq.n	8006ca2 <HAL_TIM_PWM_ConfigChannel+0x31a>
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a70      	ldr	r2, [pc, #448]	@ (8006e4c <HAL_TIM_PWM_ConfigChannel+0x4c4>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d009      	beq.n	8006ca2 <HAL_TIM_PWM_ConfigChannel+0x31a>
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a6f      	ldr	r2, [pc, #444]	@ (8006e50 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d004      	beq.n	8006ca2 <HAL_TIM_PWM_ConfigChannel+0x31a>
 8006c98:	f241 01e2 	movw	r1, #4322	@ 0x10e2
 8006c9c:	486d      	ldr	r0, [pc, #436]	@ (8006e54 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 8006c9e:	f7fb fc49 	bl	8002534 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	68b9      	ldr	r1, [r7, #8]
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f000 fe0f 	bl	80078cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	69da      	ldr	r2, [r3, #28]
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f042 0208 	orr.w	r2, r2, #8
 8006cbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	69da      	ldr	r2, [r3, #28]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f022 0204 	bic.w	r2, r2, #4
 8006ccc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	69d9      	ldr	r1, [r3, #28]
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	691a      	ldr	r2, [r3, #16]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	430a      	orrs	r2, r1
 8006cde:	61da      	str	r2, [r3, #28]
      break;
 8006ce0:	e0a5      	b.n	8006e2e <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a56      	ldr	r2, [pc, #344]	@ (8006e40 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d01d      	beq.n	8006d28 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cf4:	d018      	beq.n	8006d28 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a52      	ldr	r2, [pc, #328]	@ (8006e44 <HAL_TIM_PWM_ConfigChannel+0x4bc>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d013      	beq.n	8006d28 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a50      	ldr	r2, [pc, #320]	@ (8006e48 <HAL_TIM_PWM_ConfigChannel+0x4c0>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d00e      	beq.n	8006d28 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a4f      	ldr	r2, [pc, #316]	@ (8006e4c <HAL_TIM_PWM_ConfigChannel+0x4c4>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d009      	beq.n	8006d28 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a4d      	ldr	r2, [pc, #308]	@ (8006e50 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d004      	beq.n	8006d28 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8006d1e:	f241 01f3 	movw	r1, #4339	@ 0x10f3
 8006d22:	484c      	ldr	r0, [pc, #304]	@ (8006e54 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 8006d24:	f7fb fc06 	bl	8002534 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	68b9      	ldr	r1, [r7, #8]
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f000 fe6c 	bl	8007a0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	69da      	ldr	r2, [r3, #28]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006d42:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	69da      	ldr	r2, [r3, #28]
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d52:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	69d9      	ldr	r1, [r3, #28]
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	691b      	ldr	r3, [r3, #16]
 8006d5e:	021a      	lsls	r2, r3, #8
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	430a      	orrs	r2, r1
 8006d66:	61da      	str	r2, [r3, #28]
      break;
 8006d68:	e061      	b.n	8006e2e <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a34      	ldr	r2, [pc, #208]	@ (8006e40 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d009      	beq.n	8006d88 <HAL_TIM_PWM_ConfigChannel+0x400>
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a35      	ldr	r2, [pc, #212]	@ (8006e50 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d004      	beq.n	8006d88 <HAL_TIM_PWM_ConfigChannel+0x400>
 8006d7e:	f241 1104 	movw	r1, #4356	@ 0x1104
 8006d82:	4834      	ldr	r0, [pc, #208]	@ (8006e54 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 8006d84:	f7fb fbd6 	bl	8002534 <assert_failed>

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	68b9      	ldr	r1, [r7, #8]
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f000 fea2 	bl	8007ad8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f042 0208 	orr.w	r2, r2, #8
 8006da2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f022 0204 	bic.w	r2, r2, #4
 8006db2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	691a      	ldr	r2, [r3, #16]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	430a      	orrs	r2, r1
 8006dc4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006dc6:	e032      	b.n	8006e2e <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a1c      	ldr	r2, [pc, #112]	@ (8006e40 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d009      	beq.n	8006de6 <HAL_TIM_PWM_ConfigChannel+0x45e>
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a1e      	ldr	r2, [pc, #120]	@ (8006e50 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d004      	beq.n	8006de6 <HAL_TIM_PWM_ConfigChannel+0x45e>
 8006ddc:	f241 1115 	movw	r1, #4373	@ 0x1115
 8006de0:	481c      	ldr	r0, [pc, #112]	@ (8006e54 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 8006de2:	f7fb fba7 	bl	8002534 <assert_failed>

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	68b9      	ldr	r1, [r7, #8]
 8006dec:	4618      	mov	r0, r3
 8006dee:	f000 fec5 	bl	8007b7c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006e00:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e10:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	691b      	ldr	r3, [r3, #16]
 8006e1c:	021a      	lsls	r2, r3, #8
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	430a      	orrs	r2, r1
 8006e24:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006e26:	e002      	b.n	8006e2e <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    default:
      status = HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	75fb      	strb	r3, [r7, #23]
      break;
 8006e2c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2200      	movs	r2, #0
 8006e32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006e36:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3718      	adds	r7, #24
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}
 8006e40:	40010000 	.word	0x40010000
 8006e44:	40000400 	.word	0x40000400
 8006e48:	40000800 	.word	0x40000800
 8006e4c:	40000c00 	.word	0x40000c00
 8006e50:	40010400 	.word	0x40010400
 8006e54:	08010a14 	.word	0x08010a14

08006e58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b084      	sub	sp, #16
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e62:	2300      	movs	r3, #0
 8006e64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	d101      	bne.n	8006e74 <HAL_TIM_ConfigClockSource+0x1c>
 8006e70:	2302      	movs	r3, #2
 8006e72:	e332      	b.n	80074da <HAL_TIM_ConfigClockSource+0x682>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2202      	movs	r2, #2
 8006e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e8c:	d029      	beq.n	8006ee2 <HAL_TIM_ConfigClockSource+0x8a>
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	2b70      	cmp	r3, #112	@ 0x70
 8006e94:	d025      	beq.n	8006ee2 <HAL_TIM_ConfigClockSource+0x8a>
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e9e:	d020      	beq.n	8006ee2 <HAL_TIM_ConfigClockSource+0x8a>
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	2b40      	cmp	r3, #64	@ 0x40
 8006ea6:	d01c      	beq.n	8006ee2 <HAL_TIM_ConfigClockSource+0x8a>
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	2b50      	cmp	r3, #80	@ 0x50
 8006eae:	d018      	beq.n	8006ee2 <HAL_TIM_ConfigClockSource+0x8a>
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	2b60      	cmp	r3, #96	@ 0x60
 8006eb6:	d014      	beq.n	8006ee2 <HAL_TIM_ConfigClockSource+0x8a>
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d010      	beq.n	8006ee2 <HAL_TIM_ConfigClockSource+0x8a>
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	2b10      	cmp	r3, #16
 8006ec6:	d00c      	beq.n	8006ee2 <HAL_TIM_ConfigClockSource+0x8a>
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	2b20      	cmp	r3, #32
 8006ece:	d008      	beq.n	8006ee2 <HAL_TIM_ConfigClockSource+0x8a>
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	2b30      	cmp	r3, #48	@ 0x30
 8006ed6:	d004      	beq.n	8006ee2 <HAL_TIM_ConfigClockSource+0x8a>
 8006ed8:	f241 5151 	movw	r1, #5457	@ 0x1551
 8006edc:	4893      	ldr	r0, [pc, #588]	@ (800712c <HAL_TIM_ConfigClockSource+0x2d4>)
 8006ede:	f7fb fb29 	bl	8002534 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006eea:	68ba      	ldr	r2, [r7, #8]
 8006eec:	4b90      	ldr	r3, [pc, #576]	@ (8007130 <HAL_TIM_ConfigClockSource+0x2d8>)
 8006eee:	4013      	ands	r3, r2
 8006ef0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006ef8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	68ba      	ldr	r2, [r7, #8]
 8006f00:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f0a:	f000 812d 	beq.w	8007168 <HAL_TIM_ConfigClockSource+0x310>
 8006f0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f12:	f200 82d5 	bhi.w	80074c0 <HAL_TIM_ConfigClockSource+0x668>
 8006f16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f1a:	d02e      	beq.n	8006f7a <HAL_TIM_ConfigClockSource+0x122>
 8006f1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f20:	f200 82ce 	bhi.w	80074c0 <HAL_TIM_ConfigClockSource+0x668>
 8006f24:	2b70      	cmp	r3, #112	@ 0x70
 8006f26:	f000 8082 	beq.w	800702e <HAL_TIM_ConfigClockSource+0x1d6>
 8006f2a:	2b70      	cmp	r3, #112	@ 0x70
 8006f2c:	f200 82c8 	bhi.w	80074c0 <HAL_TIM_ConfigClockSource+0x668>
 8006f30:	2b60      	cmp	r3, #96	@ 0x60
 8006f32:	f000 81e0 	beq.w	80072f6 <HAL_TIM_ConfigClockSource+0x49e>
 8006f36:	2b60      	cmp	r3, #96	@ 0x60
 8006f38:	f200 82c2 	bhi.w	80074c0 <HAL_TIM_ConfigClockSource+0x668>
 8006f3c:	2b50      	cmp	r3, #80	@ 0x50
 8006f3e:	f000 8184 	beq.w	800724a <HAL_TIM_ConfigClockSource+0x3f2>
 8006f42:	2b50      	cmp	r3, #80	@ 0x50
 8006f44:	f200 82bc 	bhi.w	80074c0 <HAL_TIM_ConfigClockSource+0x668>
 8006f48:	2b40      	cmp	r3, #64	@ 0x40
 8006f4a:	f000 8237 	beq.w	80073bc <HAL_TIM_ConfigClockSource+0x564>
 8006f4e:	2b40      	cmp	r3, #64	@ 0x40
 8006f50:	f200 82b6 	bhi.w	80074c0 <HAL_TIM_ConfigClockSource+0x668>
 8006f54:	2b30      	cmp	r3, #48	@ 0x30
 8006f56:	f000 8287 	beq.w	8007468 <HAL_TIM_ConfigClockSource+0x610>
 8006f5a:	2b30      	cmp	r3, #48	@ 0x30
 8006f5c:	f200 82b0 	bhi.w	80074c0 <HAL_TIM_ConfigClockSource+0x668>
 8006f60:	2b20      	cmp	r3, #32
 8006f62:	f000 8281 	beq.w	8007468 <HAL_TIM_ConfigClockSource+0x610>
 8006f66:	2b20      	cmp	r3, #32
 8006f68:	f200 82aa 	bhi.w	80074c0 <HAL_TIM_ConfigClockSource+0x668>
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	f000 827b 	beq.w	8007468 <HAL_TIM_ConfigClockSource+0x610>
 8006f72:	2b10      	cmp	r3, #16
 8006f74:	f000 8278 	beq.w	8007468 <HAL_TIM_ConfigClockSource+0x610>
 8006f78:	e2a2      	b.n	80074c0 <HAL_TIM_ConfigClockSource+0x668>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a6d      	ldr	r2, [pc, #436]	@ (8007134 <HAL_TIM_ConfigClockSource+0x2dc>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	f000 82a0 	beq.w	80074c6 <HAL_TIM_ConfigClockSource+0x66e>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f8e:	f000 829a 	beq.w	80074c6 <HAL_TIM_ConfigClockSource+0x66e>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a68      	ldr	r2, [pc, #416]	@ (8007138 <HAL_TIM_ConfigClockSource+0x2e0>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	f000 8294 	beq.w	80074c6 <HAL_TIM_ConfigClockSource+0x66e>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a66      	ldr	r2, [pc, #408]	@ (800713c <HAL_TIM_ConfigClockSource+0x2e4>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	f000 828e 	beq.w	80074c6 <HAL_TIM_ConfigClockSource+0x66e>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a64      	ldr	r2, [pc, #400]	@ (8007140 <HAL_TIM_ConfigClockSource+0x2e8>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	f000 8288 	beq.w	80074c6 <HAL_TIM_ConfigClockSource+0x66e>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a62      	ldr	r2, [pc, #392]	@ (8007144 <HAL_TIM_ConfigClockSource+0x2ec>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	f000 8282 	beq.w	80074c6 <HAL_TIM_ConfigClockSource+0x66e>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a60      	ldr	r2, [pc, #384]	@ (8007148 <HAL_TIM_ConfigClockSource+0x2f0>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	f000 827c 	beq.w	80074c6 <HAL_TIM_ConfigClockSource+0x66e>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a5e      	ldr	r2, [pc, #376]	@ (800714c <HAL_TIM_ConfigClockSource+0x2f4>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	f000 8276 	beq.w	80074c6 <HAL_TIM_ConfigClockSource+0x66e>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a5c      	ldr	r2, [pc, #368]	@ (8007150 <HAL_TIM_ConfigClockSource+0x2f8>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	f000 8270 	beq.w	80074c6 <HAL_TIM_ConfigClockSource+0x66e>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a5a      	ldr	r2, [pc, #360]	@ (8007154 <HAL_TIM_ConfigClockSource+0x2fc>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	f000 826a 	beq.w	80074c6 <HAL_TIM_ConfigClockSource+0x66e>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a58      	ldr	r2, [pc, #352]	@ (8007158 <HAL_TIM_ConfigClockSource+0x300>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	f000 8264 	beq.w	80074c6 <HAL_TIM_ConfigClockSource+0x66e>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a56      	ldr	r2, [pc, #344]	@ (800715c <HAL_TIM_ConfigClockSource+0x304>)
 8007004:	4293      	cmp	r3, r2
 8007006:	f000 825e 	beq.w	80074c6 <HAL_TIM_ConfigClockSource+0x66e>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a54      	ldr	r2, [pc, #336]	@ (8007160 <HAL_TIM_ConfigClockSource+0x308>)
 8007010:	4293      	cmp	r3, r2
 8007012:	f000 8258 	beq.w	80074c6 <HAL_TIM_ConfigClockSource+0x66e>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a52      	ldr	r2, [pc, #328]	@ (8007164 <HAL_TIM_ConfigClockSource+0x30c>)
 800701c:	4293      	cmp	r3, r2
 800701e:	f000 8252 	beq.w	80074c6 <HAL_TIM_ConfigClockSource+0x66e>
 8007022:	f241 515d 	movw	r1, #5469	@ 0x155d
 8007026:	4841      	ldr	r0, [pc, #260]	@ (800712c <HAL_TIM_ConfigClockSource+0x2d4>)
 8007028:	f7fb fa84 	bl	8002534 <assert_failed>
      break;
 800702c:	e24b      	b.n	80074c6 <HAL_TIM_ConfigClockSource+0x66e>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a40      	ldr	r2, [pc, #256]	@ (8007134 <HAL_TIM_ConfigClockSource+0x2dc>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d027      	beq.n	8007088 <HAL_TIM_ConfigClockSource+0x230>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007040:	d022      	beq.n	8007088 <HAL_TIM_ConfigClockSource+0x230>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a3c      	ldr	r2, [pc, #240]	@ (8007138 <HAL_TIM_ConfigClockSource+0x2e0>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d01d      	beq.n	8007088 <HAL_TIM_ConfigClockSource+0x230>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a3a      	ldr	r2, [pc, #232]	@ (800713c <HAL_TIM_ConfigClockSource+0x2e4>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d018      	beq.n	8007088 <HAL_TIM_ConfigClockSource+0x230>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a39      	ldr	r2, [pc, #228]	@ (8007140 <HAL_TIM_ConfigClockSource+0x2e8>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d013      	beq.n	8007088 <HAL_TIM_ConfigClockSource+0x230>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a39      	ldr	r2, [pc, #228]	@ (800714c <HAL_TIM_ConfigClockSource+0x2f4>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d00e      	beq.n	8007088 <HAL_TIM_ConfigClockSource+0x230>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a38      	ldr	r2, [pc, #224]	@ (8007150 <HAL_TIM_ConfigClockSource+0x2f8>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d009      	beq.n	8007088 <HAL_TIM_ConfigClockSource+0x230>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a38      	ldr	r2, [pc, #224]	@ (800715c <HAL_TIM_ConfigClockSource+0x304>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d004      	beq.n	8007088 <HAL_TIM_ConfigClockSource+0x230>
 800707e:	f241 5164 	movw	r1, #5476	@ 0x1564
 8007082:	482a      	ldr	r0, [pc, #168]	@ (800712c <HAL_TIM_ConfigClockSource+0x2d4>)
 8007084:	f7fb fa56 	bl	8002534 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d013      	beq.n	80070b8 <HAL_TIM_ConfigClockSource+0x260>
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007098:	d00e      	beq.n	80070b8 <HAL_TIM_ConfigClockSource+0x260>
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070a2:	d009      	beq.n	80070b8 <HAL_TIM_ConfigClockSource+0x260>
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80070ac:	d004      	beq.n	80070b8 <HAL_TIM_ConfigClockSource+0x260>
 80070ae:	f241 5167 	movw	r1, #5479	@ 0x1567
 80070b2:	481e      	ldr	r0, [pc, #120]	@ (800712c <HAL_TIM_ConfigClockSource+0x2d4>)
 80070b4:	f7fb fa3e 	bl	8002534 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80070c0:	d014      	beq.n	80070ec <HAL_TIM_ConfigClockSource+0x294>
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d010      	beq.n	80070ec <HAL_TIM_ConfigClockSource+0x294>
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d00c      	beq.n	80070ec <HAL_TIM_ConfigClockSource+0x294>
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	2b02      	cmp	r3, #2
 80070d8:	d008      	beq.n	80070ec <HAL_TIM_ConfigClockSource+0x294>
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	2b0a      	cmp	r3, #10
 80070e0:	d004      	beq.n	80070ec <HAL_TIM_ConfigClockSource+0x294>
 80070e2:	f241 5168 	movw	r1, #5480	@ 0x1568
 80070e6:	4811      	ldr	r0, [pc, #68]	@ (800712c <HAL_TIM_ConfigClockSource+0x2d4>)
 80070e8:	f7fb fa24 	bl	8002534 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	68db      	ldr	r3, [r3, #12]
 80070f0:	2b0f      	cmp	r3, #15
 80070f2:	d904      	bls.n	80070fe <HAL_TIM_ConfigClockSource+0x2a6>
 80070f4:	f241 5169 	movw	r1, #5481	@ 0x1569
 80070f8:	480c      	ldr	r0, [pc, #48]	@ (800712c <HAL_TIM_ConfigClockSource+0x2d4>)
 80070fa:	f7fb fa1b 	bl	8002534 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800710e:	f000 fe03 	bl	8007d18 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007120:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	68ba      	ldr	r2, [r7, #8]
 8007128:	609a      	str	r2, [r3, #8]
      break;
 800712a:	e1cd      	b.n	80074c8 <HAL_TIM_ConfigClockSource+0x670>
 800712c:	08010a14 	.word	0x08010a14
 8007130:	fffeff88 	.word	0xfffeff88
 8007134:	40010000 	.word	0x40010000
 8007138:	40000400 	.word	0x40000400
 800713c:	40000800 	.word	0x40000800
 8007140:	40000c00 	.word	0x40000c00
 8007144:	40001000 	.word	0x40001000
 8007148:	40001400 	.word	0x40001400
 800714c:	40010400 	.word	0x40010400
 8007150:	40014000 	.word	0x40014000
 8007154:	40014400 	.word	0x40014400
 8007158:	40014800 	.word	0x40014800
 800715c:	40001800 	.word	0x40001800
 8007160:	40001c00 	.word	0x40001c00
 8007164:	40002000 	.word	0x40002000
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a8d      	ldr	r2, [pc, #564]	@ (80073a4 <HAL_TIM_ConfigClockSource+0x54c>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d01d      	beq.n	80071ae <HAL_TIM_ConfigClockSource+0x356>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800717a:	d018      	beq.n	80071ae <HAL_TIM_ConfigClockSource+0x356>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a89      	ldr	r2, [pc, #548]	@ (80073a8 <HAL_TIM_ConfigClockSource+0x550>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d013      	beq.n	80071ae <HAL_TIM_ConfigClockSource+0x356>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a88      	ldr	r2, [pc, #544]	@ (80073ac <HAL_TIM_ConfigClockSource+0x554>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d00e      	beq.n	80071ae <HAL_TIM_ConfigClockSource+0x356>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a86      	ldr	r2, [pc, #536]	@ (80073b0 <HAL_TIM_ConfigClockSource+0x558>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d009      	beq.n	80071ae <HAL_TIM_ConfigClockSource+0x356>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a85      	ldr	r2, [pc, #532]	@ (80073b4 <HAL_TIM_ConfigClockSource+0x55c>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d004      	beq.n	80071ae <HAL_TIM_ConfigClockSource+0x356>
 80071a4:	f241 517c 	movw	r1, #5500	@ 0x157c
 80071a8:	4883      	ldr	r0, [pc, #524]	@ (80073b8 <HAL_TIM_ConfigClockSource+0x560>)
 80071aa:	f7fb f9c3 	bl	8002534 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d013      	beq.n	80071de <HAL_TIM_ConfigClockSource+0x386>
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	689b      	ldr	r3, [r3, #8]
 80071ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071be:	d00e      	beq.n	80071de <HAL_TIM_ConfigClockSource+0x386>
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071c8:	d009      	beq.n	80071de <HAL_TIM_ConfigClockSource+0x386>
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80071d2:	d004      	beq.n	80071de <HAL_TIM_ConfigClockSource+0x386>
 80071d4:	f241 517f 	movw	r1, #5503	@ 0x157f
 80071d8:	4877      	ldr	r0, [pc, #476]	@ (80073b8 <HAL_TIM_ConfigClockSource+0x560>)
 80071da:	f7fb f9ab 	bl	8002534 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80071e6:	d014      	beq.n	8007212 <HAL_TIM_ConfigClockSource+0x3ba>
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d010      	beq.n	8007212 <HAL_TIM_ConfigClockSource+0x3ba>
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d00c      	beq.n	8007212 <HAL_TIM_ConfigClockSource+0x3ba>
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	2b02      	cmp	r3, #2
 80071fe:	d008      	beq.n	8007212 <HAL_TIM_ConfigClockSource+0x3ba>
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	2b0a      	cmp	r3, #10
 8007206:	d004      	beq.n	8007212 <HAL_TIM_ConfigClockSource+0x3ba>
 8007208:	f44f 51ac 	mov.w	r1, #5504	@ 0x1580
 800720c:	486a      	ldr	r0, [pc, #424]	@ (80073b8 <HAL_TIM_ConfigClockSource+0x560>)
 800720e:	f7fb f991 	bl	8002534 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	68db      	ldr	r3, [r3, #12]
 8007216:	2b0f      	cmp	r3, #15
 8007218:	d904      	bls.n	8007224 <HAL_TIM_ConfigClockSource+0x3cc>
 800721a:	f241 5181 	movw	r1, #5505	@ 0x1581
 800721e:	4866      	ldr	r0, [pc, #408]	@ (80073b8 <HAL_TIM_ConfigClockSource+0x560>)
 8007220:	f7fb f988 	bl	8002534 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007234:	f000 fd70 	bl	8007d18 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	689a      	ldr	r2, [r3, #8]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007246:	609a      	str	r2, [r3, #8]
      break;
 8007248:	e13e      	b.n	80074c8 <HAL_TIM_ConfigClockSource+0x670>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a55      	ldr	r2, [pc, #340]	@ (80073a4 <HAL_TIM_ConfigClockSource+0x54c>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d01d      	beq.n	8007290 <HAL_TIM_ConfigClockSource+0x438>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800725c:	d018      	beq.n	8007290 <HAL_TIM_ConfigClockSource+0x438>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a51      	ldr	r2, [pc, #324]	@ (80073a8 <HAL_TIM_ConfigClockSource+0x550>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d013      	beq.n	8007290 <HAL_TIM_ConfigClockSource+0x438>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a4f      	ldr	r2, [pc, #316]	@ (80073ac <HAL_TIM_ConfigClockSource+0x554>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d00e      	beq.n	8007290 <HAL_TIM_ConfigClockSource+0x438>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a4e      	ldr	r2, [pc, #312]	@ (80073b0 <HAL_TIM_ConfigClockSource+0x558>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d009      	beq.n	8007290 <HAL_TIM_ConfigClockSource+0x438>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a4c      	ldr	r2, [pc, #304]	@ (80073b4 <HAL_TIM_ConfigClockSource+0x55c>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d004      	beq.n	8007290 <HAL_TIM_ConfigClockSource+0x438>
 8007286:	f241 5190 	movw	r1, #5520	@ 0x1590
 800728a:	484b      	ldr	r0, [pc, #300]	@ (80073b8 <HAL_TIM_ConfigClockSource+0x560>)
 800728c:	f7fb f952 	bl	8002534 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007298:	d014      	beq.n	80072c4 <HAL_TIM_ConfigClockSource+0x46c>
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d010      	beq.n	80072c4 <HAL_TIM_ConfigClockSource+0x46c>
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d00c      	beq.n	80072c4 <HAL_TIM_ConfigClockSource+0x46c>
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	2b02      	cmp	r3, #2
 80072b0:	d008      	beq.n	80072c4 <HAL_TIM_ConfigClockSource+0x46c>
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	2b0a      	cmp	r3, #10
 80072b8:	d004      	beq.n	80072c4 <HAL_TIM_ConfigClockSource+0x46c>
 80072ba:	f241 5193 	movw	r1, #5523	@ 0x1593
 80072be:	483e      	ldr	r0, [pc, #248]	@ (80073b8 <HAL_TIM_ConfigClockSource+0x560>)
 80072c0:	f7fb f938 	bl	8002534 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	68db      	ldr	r3, [r3, #12]
 80072c8:	2b0f      	cmp	r3, #15
 80072ca:	d904      	bls.n	80072d6 <HAL_TIM_ConfigClockSource+0x47e>
 80072cc:	f241 5194 	movw	r1, #5524	@ 0x1594
 80072d0:	4839      	ldr	r0, [pc, #228]	@ (80073b8 <HAL_TIM_ConfigClockSource+0x560>)
 80072d2:	f7fb f92f 	bl	8002534 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80072e2:	461a      	mov	r2, r3
 80072e4:	f000 fc9e 	bl	8007c24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	2150      	movs	r1, #80	@ 0x50
 80072ee:	4618      	mov	r0, r3
 80072f0:	f000 fcf7 	bl	8007ce2 <TIM_ITRx_SetConfig>
      break;
 80072f4:	e0e8      	b.n	80074c8 <HAL_TIM_ConfigClockSource+0x670>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a2a      	ldr	r2, [pc, #168]	@ (80073a4 <HAL_TIM_ConfigClockSource+0x54c>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d01d      	beq.n	800733c <HAL_TIM_ConfigClockSource+0x4e4>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007308:	d018      	beq.n	800733c <HAL_TIM_ConfigClockSource+0x4e4>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a26      	ldr	r2, [pc, #152]	@ (80073a8 <HAL_TIM_ConfigClockSource+0x550>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d013      	beq.n	800733c <HAL_TIM_ConfigClockSource+0x4e4>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a24      	ldr	r2, [pc, #144]	@ (80073ac <HAL_TIM_ConfigClockSource+0x554>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d00e      	beq.n	800733c <HAL_TIM_ConfigClockSource+0x4e4>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a23      	ldr	r2, [pc, #140]	@ (80073b0 <HAL_TIM_ConfigClockSource+0x558>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d009      	beq.n	800733c <HAL_TIM_ConfigClockSource+0x4e4>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a21      	ldr	r2, [pc, #132]	@ (80073b4 <HAL_TIM_ConfigClockSource+0x55c>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d004      	beq.n	800733c <HAL_TIM_ConfigClockSource+0x4e4>
 8007332:	f44f 51ad 	mov.w	r1, #5536	@ 0x15a0
 8007336:	4820      	ldr	r0, [pc, #128]	@ (80073b8 <HAL_TIM_ConfigClockSource+0x560>)
 8007338:	f7fb f8fc 	bl	8002534 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007344:	d014      	beq.n	8007370 <HAL_TIM_ConfigClockSource+0x518>
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d010      	beq.n	8007370 <HAL_TIM_ConfigClockSource+0x518>
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d00c      	beq.n	8007370 <HAL_TIM_ConfigClockSource+0x518>
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	2b02      	cmp	r3, #2
 800735c:	d008      	beq.n	8007370 <HAL_TIM_ConfigClockSource+0x518>
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	2b0a      	cmp	r3, #10
 8007364:	d004      	beq.n	8007370 <HAL_TIM_ConfigClockSource+0x518>
 8007366:	f241 51a3 	movw	r1, #5539	@ 0x15a3
 800736a:	4813      	ldr	r0, [pc, #76]	@ (80073b8 <HAL_TIM_ConfigClockSource+0x560>)
 800736c:	f7fb f8e2 	bl	8002534 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	68db      	ldr	r3, [r3, #12]
 8007374:	2b0f      	cmp	r3, #15
 8007376:	d904      	bls.n	8007382 <HAL_TIM_ConfigClockSource+0x52a>
 8007378:	f241 51a4 	movw	r1, #5540	@ 0x15a4
 800737c:	480e      	ldr	r0, [pc, #56]	@ (80073b8 <HAL_TIM_ConfigClockSource+0x560>)
 800737e:	f7fb f8d9 	bl	8002534 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800738e:	461a      	mov	r2, r3
 8007390:	f000 fc77 	bl	8007c82 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	2160      	movs	r1, #96	@ 0x60
 800739a:	4618      	mov	r0, r3
 800739c:	f000 fca1 	bl	8007ce2 <TIM_ITRx_SetConfig>
      break;
 80073a0:	e092      	b.n	80074c8 <HAL_TIM_ConfigClockSource+0x670>
 80073a2:	bf00      	nop
 80073a4:	40010000 	.word	0x40010000
 80073a8:	40000400 	.word	0x40000400
 80073ac:	40000800 	.word	0x40000800
 80073b0:	40000c00 	.word	0x40000c00
 80073b4:	40010400 	.word	0x40010400
 80073b8:	08010a14 	.word	0x08010a14
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a48      	ldr	r2, [pc, #288]	@ (80074e4 <HAL_TIM_ConfigClockSource+0x68c>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d01d      	beq.n	8007402 <HAL_TIM_ConfigClockSource+0x5aa>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073ce:	d018      	beq.n	8007402 <HAL_TIM_ConfigClockSource+0x5aa>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a44      	ldr	r2, [pc, #272]	@ (80074e8 <HAL_TIM_ConfigClockSource+0x690>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d013      	beq.n	8007402 <HAL_TIM_ConfigClockSource+0x5aa>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a43      	ldr	r2, [pc, #268]	@ (80074ec <HAL_TIM_ConfigClockSource+0x694>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d00e      	beq.n	8007402 <HAL_TIM_ConfigClockSource+0x5aa>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a41      	ldr	r2, [pc, #260]	@ (80074f0 <HAL_TIM_ConfigClockSource+0x698>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d009      	beq.n	8007402 <HAL_TIM_ConfigClockSource+0x5aa>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a40      	ldr	r2, [pc, #256]	@ (80074f4 <HAL_TIM_ConfigClockSource+0x69c>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d004      	beq.n	8007402 <HAL_TIM_ConfigClockSource+0x5aa>
 80073f8:	f241 51b0 	movw	r1, #5552	@ 0x15b0
 80073fc:	483e      	ldr	r0, [pc, #248]	@ (80074f8 <HAL_TIM_ConfigClockSource+0x6a0>)
 80073fe:	f7fb f899 	bl	8002534 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800740a:	d014      	beq.n	8007436 <HAL_TIM_ConfigClockSource+0x5de>
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d010      	beq.n	8007436 <HAL_TIM_ConfigClockSource+0x5de>
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d00c      	beq.n	8007436 <HAL_TIM_ConfigClockSource+0x5de>
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	2b02      	cmp	r3, #2
 8007422:	d008      	beq.n	8007436 <HAL_TIM_ConfigClockSource+0x5de>
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	2b0a      	cmp	r3, #10
 800742a:	d004      	beq.n	8007436 <HAL_TIM_ConfigClockSource+0x5de>
 800742c:	f241 51b3 	movw	r1, #5555	@ 0x15b3
 8007430:	4831      	ldr	r0, [pc, #196]	@ (80074f8 <HAL_TIM_ConfigClockSource+0x6a0>)
 8007432:	f7fb f87f 	bl	8002534 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	2b0f      	cmp	r3, #15
 800743c:	d904      	bls.n	8007448 <HAL_TIM_ConfigClockSource+0x5f0>
 800743e:	f241 51b4 	movw	r1, #5556	@ 0x15b4
 8007442:	482d      	ldr	r0, [pc, #180]	@ (80074f8 <HAL_TIM_ConfigClockSource+0x6a0>)
 8007444:	f7fb f876 	bl	8002534 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007454:	461a      	mov	r2, r3
 8007456:	f000 fbe5 	bl	8007c24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	2140      	movs	r1, #64	@ 0x40
 8007460:	4618      	mov	r0, r3
 8007462:	f000 fc3e 	bl	8007ce2 <TIM_ITRx_SetConfig>
      break;
 8007466:	e02f      	b.n	80074c8 <HAL_TIM_ConfigClockSource+0x670>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a1d      	ldr	r2, [pc, #116]	@ (80074e4 <HAL_TIM_ConfigClockSource+0x68c>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d01d      	beq.n	80074ae <HAL_TIM_ConfigClockSource+0x656>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800747a:	d018      	beq.n	80074ae <HAL_TIM_ConfigClockSource+0x656>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a19      	ldr	r2, [pc, #100]	@ (80074e8 <HAL_TIM_ConfigClockSource+0x690>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d013      	beq.n	80074ae <HAL_TIM_ConfigClockSource+0x656>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a18      	ldr	r2, [pc, #96]	@ (80074ec <HAL_TIM_ConfigClockSource+0x694>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d00e      	beq.n	80074ae <HAL_TIM_ConfigClockSource+0x656>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a16      	ldr	r2, [pc, #88]	@ (80074f0 <HAL_TIM_ConfigClockSource+0x698>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d009      	beq.n	80074ae <HAL_TIM_ConfigClockSource+0x656>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a15      	ldr	r2, [pc, #84]	@ (80074f4 <HAL_TIM_ConfigClockSource+0x69c>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d004      	beq.n	80074ae <HAL_TIM_ConfigClockSource+0x656>
 80074a4:	f241 51c3 	movw	r1, #5571	@ 0x15c3
 80074a8:	4813      	ldr	r0, [pc, #76]	@ (80074f8 <HAL_TIM_ConfigClockSource+0x6a0>)
 80074aa:	f7fb f843 	bl	8002534 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681a      	ldr	r2, [r3, #0]
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4619      	mov	r1, r3
 80074b8:	4610      	mov	r0, r2
 80074ba:	f000 fc12 	bl	8007ce2 <TIM_ITRx_SetConfig>
      break;
 80074be:	e003      	b.n	80074c8 <HAL_TIM_ConfigClockSource+0x670>
    }

    default:
      status = HAL_ERROR;
 80074c0:	2301      	movs	r3, #1
 80074c2:	73fb      	strb	r3, [r7, #15]
      break;
 80074c4:	e000      	b.n	80074c8 <HAL_TIM_ConfigClockSource+0x670>
      break;
 80074c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80074d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3710      	adds	r7, #16
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}
 80074e2:	bf00      	nop
 80074e4:	40010000 	.word	0x40010000
 80074e8:	40000400 	.word	0x40000400
 80074ec:	40000800 	.word	0x40000800
 80074f0:	40000c00 	.word	0x40000c00
 80074f4:	40010400 	.word	0x40010400
 80074f8:	08010a14 	.word	0x08010a14

080074fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b085      	sub	sp, #20
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	4a46      	ldr	r2, [pc, #280]	@ (8007628 <TIM_Base_SetConfig+0x12c>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d013      	beq.n	800753c <TIM_Base_SetConfig+0x40>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800751a:	d00f      	beq.n	800753c <TIM_Base_SetConfig+0x40>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	4a43      	ldr	r2, [pc, #268]	@ (800762c <TIM_Base_SetConfig+0x130>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d00b      	beq.n	800753c <TIM_Base_SetConfig+0x40>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	4a42      	ldr	r2, [pc, #264]	@ (8007630 <TIM_Base_SetConfig+0x134>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d007      	beq.n	800753c <TIM_Base_SetConfig+0x40>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	4a41      	ldr	r2, [pc, #260]	@ (8007634 <TIM_Base_SetConfig+0x138>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d003      	beq.n	800753c <TIM_Base_SetConfig+0x40>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	4a40      	ldr	r2, [pc, #256]	@ (8007638 <TIM_Base_SetConfig+0x13c>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d108      	bne.n	800754e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007542:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	68fa      	ldr	r2, [r7, #12]
 800754a:	4313      	orrs	r3, r2
 800754c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	4a35      	ldr	r2, [pc, #212]	@ (8007628 <TIM_Base_SetConfig+0x12c>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d02b      	beq.n	80075ae <TIM_Base_SetConfig+0xb2>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800755c:	d027      	beq.n	80075ae <TIM_Base_SetConfig+0xb2>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	4a32      	ldr	r2, [pc, #200]	@ (800762c <TIM_Base_SetConfig+0x130>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d023      	beq.n	80075ae <TIM_Base_SetConfig+0xb2>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	4a31      	ldr	r2, [pc, #196]	@ (8007630 <TIM_Base_SetConfig+0x134>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d01f      	beq.n	80075ae <TIM_Base_SetConfig+0xb2>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	4a30      	ldr	r2, [pc, #192]	@ (8007634 <TIM_Base_SetConfig+0x138>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d01b      	beq.n	80075ae <TIM_Base_SetConfig+0xb2>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	4a2f      	ldr	r2, [pc, #188]	@ (8007638 <TIM_Base_SetConfig+0x13c>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d017      	beq.n	80075ae <TIM_Base_SetConfig+0xb2>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4a2e      	ldr	r2, [pc, #184]	@ (800763c <TIM_Base_SetConfig+0x140>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d013      	beq.n	80075ae <TIM_Base_SetConfig+0xb2>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	4a2d      	ldr	r2, [pc, #180]	@ (8007640 <TIM_Base_SetConfig+0x144>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d00f      	beq.n	80075ae <TIM_Base_SetConfig+0xb2>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	4a2c      	ldr	r2, [pc, #176]	@ (8007644 <TIM_Base_SetConfig+0x148>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d00b      	beq.n	80075ae <TIM_Base_SetConfig+0xb2>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	4a2b      	ldr	r2, [pc, #172]	@ (8007648 <TIM_Base_SetConfig+0x14c>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d007      	beq.n	80075ae <TIM_Base_SetConfig+0xb2>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	4a2a      	ldr	r2, [pc, #168]	@ (800764c <TIM_Base_SetConfig+0x150>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d003      	beq.n	80075ae <TIM_Base_SetConfig+0xb2>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	4a29      	ldr	r2, [pc, #164]	@ (8007650 <TIM_Base_SetConfig+0x154>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d108      	bne.n	80075c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80075b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	68db      	ldr	r3, [r3, #12]
 80075ba:	68fa      	ldr	r2, [r7, #12]
 80075bc:	4313      	orrs	r3, r2
 80075be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	695b      	ldr	r3, [r3, #20]
 80075ca:	4313      	orrs	r3, r2
 80075cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	68fa      	ldr	r2, [r7, #12]
 80075d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	689a      	ldr	r2, [r3, #8]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	4a10      	ldr	r2, [pc, #64]	@ (8007628 <TIM_Base_SetConfig+0x12c>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d003      	beq.n	80075f4 <TIM_Base_SetConfig+0xf8>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	4a12      	ldr	r2, [pc, #72]	@ (8007638 <TIM_Base_SetConfig+0x13c>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d103      	bne.n	80075fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	691a      	ldr	r2, [r3, #16]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2201      	movs	r2, #1
 8007600:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	691b      	ldr	r3, [r3, #16]
 8007606:	f003 0301 	and.w	r3, r3, #1
 800760a:	2b01      	cmp	r3, #1
 800760c:	d105      	bne.n	800761a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	691b      	ldr	r3, [r3, #16]
 8007612:	f023 0201 	bic.w	r2, r3, #1
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	611a      	str	r2, [r3, #16]
  }
}
 800761a:	bf00      	nop
 800761c:	3714      	adds	r7, #20
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr
 8007626:	bf00      	nop
 8007628:	40010000 	.word	0x40010000
 800762c:	40000400 	.word	0x40000400
 8007630:	40000800 	.word	0x40000800
 8007634:	40000c00 	.word	0x40000c00
 8007638:	40010400 	.word	0x40010400
 800763c:	40014000 	.word	0x40014000
 8007640:	40014400 	.word	0x40014400
 8007644:	40014800 	.word	0x40014800
 8007648:	40001800 	.word	0x40001800
 800764c:	40001c00 	.word	0x40001c00
 8007650:	40002000 	.word	0x40002000

08007654 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b086      	sub	sp, #24
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6a1b      	ldr	r3, [r3, #32]
 8007662:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6a1b      	ldr	r3, [r3, #32]
 8007668:	f023 0201 	bic.w	r2, r3, #1
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	699b      	ldr	r3, [r3, #24]
 800767a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800767c:	68fa      	ldr	r2, [r7, #12]
 800767e:	4b3f      	ldr	r3, [pc, #252]	@ (800777c <TIM_OC1_SetConfig+0x128>)
 8007680:	4013      	ands	r3, r2
 8007682:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f023 0303 	bic.w	r3, r3, #3
 800768a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	68fa      	ldr	r2, [r7, #12]
 8007692:	4313      	orrs	r3, r2
 8007694:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	f023 0302 	bic.w	r3, r3, #2
 800769c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	697a      	ldr	r2, [r7, #20]
 80076a4:	4313      	orrs	r3, r2
 80076a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	4a35      	ldr	r2, [pc, #212]	@ (8007780 <TIM_OC1_SetConfig+0x12c>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d003      	beq.n	80076b8 <TIM_OC1_SetConfig+0x64>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	4a34      	ldr	r2, [pc, #208]	@ (8007784 <TIM_OC1_SetConfig+0x130>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d119      	bne.n	80076ec <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	68db      	ldr	r3, [r3, #12]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d008      	beq.n	80076d2 <TIM_OC1_SetConfig+0x7e>
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	68db      	ldr	r3, [r3, #12]
 80076c4:	2b08      	cmp	r3, #8
 80076c6:	d004      	beq.n	80076d2 <TIM_OC1_SetConfig+0x7e>
 80076c8:	f641 3169 	movw	r1, #7017	@ 0x1b69
 80076cc:	482e      	ldr	r0, [pc, #184]	@ (8007788 <TIM_OC1_SetConfig+0x134>)
 80076ce:	f7fa ff31 	bl	8002534 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	f023 0308 	bic.w	r3, r3, #8
 80076d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	68db      	ldr	r3, [r3, #12]
 80076de:	697a      	ldr	r2, [r7, #20]
 80076e0:	4313      	orrs	r3, r2
 80076e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	f023 0304 	bic.w	r3, r3, #4
 80076ea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	4a24      	ldr	r2, [pc, #144]	@ (8007780 <TIM_OC1_SetConfig+0x12c>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d003      	beq.n	80076fc <TIM_OC1_SetConfig+0xa8>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	4a23      	ldr	r2, [pc, #140]	@ (8007784 <TIM_OC1_SetConfig+0x130>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d12d      	bne.n	8007758 <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	699b      	ldr	r3, [r3, #24]
 8007700:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007704:	d008      	beq.n	8007718 <TIM_OC1_SetConfig+0xc4>
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	699b      	ldr	r3, [r3, #24]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d004      	beq.n	8007718 <TIM_OC1_SetConfig+0xc4>
 800770e:	f641 3176 	movw	r1, #7030	@ 0x1b76
 8007712:	481d      	ldr	r0, [pc, #116]	@ (8007788 <TIM_OC1_SetConfig+0x134>)
 8007714:	f7fa ff0e 	bl	8002534 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	695b      	ldr	r3, [r3, #20]
 800771c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007720:	d008      	beq.n	8007734 <TIM_OC1_SetConfig+0xe0>
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	695b      	ldr	r3, [r3, #20]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d004      	beq.n	8007734 <TIM_OC1_SetConfig+0xe0>
 800772a:	f641 3177 	movw	r1, #7031	@ 0x1b77
 800772e:	4816      	ldr	r0, [pc, #88]	@ (8007788 <TIM_OC1_SetConfig+0x134>)
 8007730:	f7fa ff00 	bl	8002534 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800773a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007742:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	695b      	ldr	r3, [r3, #20]
 8007748:	693a      	ldr	r2, [r7, #16]
 800774a:	4313      	orrs	r3, r2
 800774c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	699b      	ldr	r3, [r3, #24]
 8007752:	693a      	ldr	r2, [r7, #16]
 8007754:	4313      	orrs	r3, r2
 8007756:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	693a      	ldr	r2, [r7, #16]
 800775c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	68fa      	ldr	r2, [r7, #12]
 8007762:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	685a      	ldr	r2, [r3, #4]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	697a      	ldr	r2, [r7, #20]
 8007770:	621a      	str	r2, [r3, #32]
}
 8007772:	bf00      	nop
 8007774:	3718      	adds	r7, #24
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
 800777a:	bf00      	nop
 800777c:	fffeff8f 	.word	0xfffeff8f
 8007780:	40010000 	.word	0x40010000
 8007784:	40010400 	.word	0x40010400
 8007788:	08010a14 	.word	0x08010a14

0800778c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b086      	sub	sp, #24
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6a1b      	ldr	r3, [r3, #32]
 800779a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6a1b      	ldr	r3, [r3, #32]
 80077a0:	f023 0210 	bic.w	r2, r3, #16
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	699b      	ldr	r3, [r3, #24]
 80077b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80077b4:	68fa      	ldr	r2, [r7, #12]
 80077b6:	4b41      	ldr	r3, [pc, #260]	@ (80078bc <TIM_OC2_SetConfig+0x130>)
 80077b8:	4013      	ands	r3, r2
 80077ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80077c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	021b      	lsls	r3, r3, #8
 80077ca:	68fa      	ldr	r2, [r7, #12]
 80077cc:	4313      	orrs	r3, r2
 80077ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	f023 0320 	bic.w	r3, r3, #32
 80077d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	011b      	lsls	r3, r3, #4
 80077de:	697a      	ldr	r2, [r7, #20]
 80077e0:	4313      	orrs	r3, r2
 80077e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	4a36      	ldr	r2, [pc, #216]	@ (80078c0 <TIM_OC2_SetConfig+0x134>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d003      	beq.n	80077f4 <TIM_OC2_SetConfig+0x68>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	4a35      	ldr	r2, [pc, #212]	@ (80078c4 <TIM_OC2_SetConfig+0x138>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d11a      	bne.n	800782a <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	68db      	ldr	r3, [r3, #12]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d008      	beq.n	800780e <TIM_OC2_SetConfig+0x82>
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	2b08      	cmp	r3, #8
 8007802:	d004      	beq.n	800780e <TIM_OC2_SetConfig+0x82>
 8007804:	f641 31b5 	movw	r1, #7093	@ 0x1bb5
 8007808:	482f      	ldr	r0, [pc, #188]	@ (80078c8 <TIM_OC2_SetConfig+0x13c>)
 800780a:	f7fa fe93 	bl	8002534 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007814:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	68db      	ldr	r3, [r3, #12]
 800781a:	011b      	lsls	r3, r3, #4
 800781c:	697a      	ldr	r2, [r7, #20]
 800781e:	4313      	orrs	r3, r2
 8007820:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007828:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	4a24      	ldr	r2, [pc, #144]	@ (80078c0 <TIM_OC2_SetConfig+0x134>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d003      	beq.n	800783a <TIM_OC2_SetConfig+0xae>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	4a23      	ldr	r2, [pc, #140]	@ (80078c4 <TIM_OC2_SetConfig+0x138>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d12f      	bne.n	800789a <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	699b      	ldr	r3, [r3, #24]
 800783e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007842:	d008      	beq.n	8007856 <TIM_OC2_SetConfig+0xca>
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	699b      	ldr	r3, [r3, #24]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d004      	beq.n	8007856 <TIM_OC2_SetConfig+0xca>
 800784c:	f641 31c2 	movw	r1, #7106	@ 0x1bc2
 8007850:	481d      	ldr	r0, [pc, #116]	@ (80078c8 <TIM_OC2_SetConfig+0x13c>)
 8007852:	f7fa fe6f 	bl	8002534 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	695b      	ldr	r3, [r3, #20]
 800785a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800785e:	d008      	beq.n	8007872 <TIM_OC2_SetConfig+0xe6>
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	695b      	ldr	r3, [r3, #20]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d004      	beq.n	8007872 <TIM_OC2_SetConfig+0xe6>
 8007868:	f641 31c3 	movw	r1, #7107	@ 0x1bc3
 800786c:	4816      	ldr	r0, [pc, #88]	@ (80078c8 <TIM_OC2_SetConfig+0x13c>)
 800786e:	f7fa fe61 	bl	8002534 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007878:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007880:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	695b      	ldr	r3, [r3, #20]
 8007886:	009b      	lsls	r3, r3, #2
 8007888:	693a      	ldr	r2, [r7, #16]
 800788a:	4313      	orrs	r3, r2
 800788c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	699b      	ldr	r3, [r3, #24]
 8007892:	009b      	lsls	r3, r3, #2
 8007894:	693a      	ldr	r2, [r7, #16]
 8007896:	4313      	orrs	r3, r2
 8007898:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	693a      	ldr	r2, [r7, #16]
 800789e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	68fa      	ldr	r2, [r7, #12]
 80078a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	685a      	ldr	r2, [r3, #4]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	697a      	ldr	r2, [r7, #20]
 80078b2:	621a      	str	r2, [r3, #32]
}
 80078b4:	bf00      	nop
 80078b6:	3718      	adds	r7, #24
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}
 80078bc:	feff8fff 	.word	0xfeff8fff
 80078c0:	40010000 	.word	0x40010000
 80078c4:	40010400 	.word	0x40010400
 80078c8:	08010a14 	.word	0x08010a14

080078cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b086      	sub	sp, #24
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6a1b      	ldr	r3, [r3, #32]
 80078da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6a1b      	ldr	r3, [r3, #32]
 80078e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	69db      	ldr	r3, [r3, #28]
 80078f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80078f4:	68fa      	ldr	r2, [r7, #12]
 80078f6:	4b41      	ldr	r3, [pc, #260]	@ (80079fc <TIM_OC3_SetConfig+0x130>)
 80078f8:	4013      	ands	r3, r2
 80078fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f023 0303 	bic.w	r3, r3, #3
 8007902:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	68fa      	ldr	r2, [r7, #12]
 800790a:	4313      	orrs	r3, r2
 800790c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007914:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	689b      	ldr	r3, [r3, #8]
 800791a:	021b      	lsls	r3, r3, #8
 800791c:	697a      	ldr	r2, [r7, #20]
 800791e:	4313      	orrs	r3, r2
 8007920:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	4a36      	ldr	r2, [pc, #216]	@ (8007a00 <TIM_OC3_SetConfig+0x134>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d003      	beq.n	8007932 <TIM_OC3_SetConfig+0x66>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	4a35      	ldr	r2, [pc, #212]	@ (8007a04 <TIM_OC3_SetConfig+0x138>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d11a      	bne.n	8007968 <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	68db      	ldr	r3, [r3, #12]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d008      	beq.n	800794c <TIM_OC3_SetConfig+0x80>
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	68db      	ldr	r3, [r3, #12]
 800793e:	2b08      	cmp	r3, #8
 8007940:	d004      	beq.n	800794c <TIM_OC3_SetConfig+0x80>
 8007942:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 8007946:	4830      	ldr	r0, [pc, #192]	@ (8007a08 <TIM_OC3_SetConfig+0x13c>)
 8007948:	f7fa fdf4 	bl	8002534 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007952:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	68db      	ldr	r3, [r3, #12]
 8007958:	021b      	lsls	r3, r3, #8
 800795a:	697a      	ldr	r2, [r7, #20]
 800795c:	4313      	orrs	r3, r2
 800795e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007966:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	4a25      	ldr	r2, [pc, #148]	@ (8007a00 <TIM_OC3_SetConfig+0x134>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d003      	beq.n	8007978 <TIM_OC3_SetConfig+0xac>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	4a24      	ldr	r2, [pc, #144]	@ (8007a04 <TIM_OC3_SetConfig+0x138>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d12f      	bne.n	80079d8 <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	699b      	ldr	r3, [r3, #24]
 800797c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007980:	d008      	beq.n	8007994 <TIM_OC3_SetConfig+0xc8>
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	699b      	ldr	r3, [r3, #24]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d004      	beq.n	8007994 <TIM_OC3_SetConfig+0xc8>
 800798a:	f641 410d 	movw	r1, #7181	@ 0x1c0d
 800798e:	481e      	ldr	r0, [pc, #120]	@ (8007a08 <TIM_OC3_SetConfig+0x13c>)
 8007990:	f7fa fdd0 	bl	8002534 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	695b      	ldr	r3, [r3, #20]
 8007998:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800799c:	d008      	beq.n	80079b0 <TIM_OC3_SetConfig+0xe4>
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	695b      	ldr	r3, [r3, #20]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d004      	beq.n	80079b0 <TIM_OC3_SetConfig+0xe4>
 80079a6:	f641 410e 	movw	r1, #7182	@ 0x1c0e
 80079aa:	4817      	ldr	r0, [pc, #92]	@ (8007a08 <TIM_OC3_SetConfig+0x13c>)
 80079ac:	f7fa fdc2 	bl	8002534 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80079b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80079be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	695b      	ldr	r3, [r3, #20]
 80079c4:	011b      	lsls	r3, r3, #4
 80079c6:	693a      	ldr	r2, [r7, #16]
 80079c8:	4313      	orrs	r3, r2
 80079ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	699b      	ldr	r3, [r3, #24]
 80079d0:	011b      	lsls	r3, r3, #4
 80079d2:	693a      	ldr	r2, [r7, #16]
 80079d4:	4313      	orrs	r3, r2
 80079d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	693a      	ldr	r2, [r7, #16]
 80079dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	68fa      	ldr	r2, [r7, #12]
 80079e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	685a      	ldr	r2, [r3, #4]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	697a      	ldr	r2, [r7, #20]
 80079f0:	621a      	str	r2, [r3, #32]
}
 80079f2:	bf00      	nop
 80079f4:	3718      	adds	r7, #24
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}
 80079fa:	bf00      	nop
 80079fc:	fffeff8f 	.word	0xfffeff8f
 8007a00:	40010000 	.word	0x40010000
 8007a04:	40010400 	.word	0x40010400
 8007a08:	08010a14 	.word	0x08010a14

08007a0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b086      	sub	sp, #24
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6a1b      	ldr	r3, [r3, #32]
 8007a1a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6a1b      	ldr	r3, [r3, #32]
 8007a20:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	69db      	ldr	r3, [r3, #28]
 8007a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007a34:	68fa      	ldr	r2, [r7, #12]
 8007a36:	4b24      	ldr	r3, [pc, #144]	@ (8007ac8 <TIM_OC4_SetConfig+0xbc>)
 8007a38:	4013      	ands	r3, r2
 8007a3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	021b      	lsls	r3, r3, #8
 8007a4a:	68fa      	ldr	r2, [r7, #12]
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007a56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	689b      	ldr	r3, [r3, #8]
 8007a5c:	031b      	lsls	r3, r3, #12
 8007a5e:	693a      	ldr	r2, [r7, #16]
 8007a60:	4313      	orrs	r3, r2
 8007a62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	4a19      	ldr	r2, [pc, #100]	@ (8007acc <TIM_OC4_SetConfig+0xc0>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d003      	beq.n	8007a74 <TIM_OC4_SetConfig+0x68>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	4a18      	ldr	r2, [pc, #96]	@ (8007ad0 <TIM_OC4_SetConfig+0xc4>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d117      	bne.n	8007aa4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	695b      	ldr	r3, [r3, #20]
 8007a78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a7c:	d008      	beq.n	8007a90 <TIM_OC4_SetConfig+0x84>
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	695b      	ldr	r3, [r3, #20]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d004      	beq.n	8007a90 <TIM_OC4_SetConfig+0x84>
 8007a86:	f641 414d 	movw	r1, #7245	@ 0x1c4d
 8007a8a:	4812      	ldr	r0, [pc, #72]	@ (8007ad4 <TIM_OC4_SetConfig+0xc8>)
 8007a8c:	f7fa fd52 	bl	8002534 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007a96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	695b      	ldr	r3, [r3, #20]
 8007a9c:	019b      	lsls	r3, r3, #6
 8007a9e:	697a      	ldr	r2, [r7, #20]
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	697a      	ldr	r2, [r7, #20]
 8007aa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	68fa      	ldr	r2, [r7, #12]
 8007aae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	685a      	ldr	r2, [r3, #4]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	693a      	ldr	r2, [r7, #16]
 8007abc:	621a      	str	r2, [r3, #32]
}
 8007abe:	bf00      	nop
 8007ac0:	3718      	adds	r7, #24
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
 8007ac6:	bf00      	nop
 8007ac8:	feff8fff 	.word	0xfeff8fff
 8007acc:	40010000 	.word	0x40010000
 8007ad0:	40010400 	.word	0x40010400
 8007ad4:	08010a14 	.word	0x08010a14

08007ad8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b087      	sub	sp, #28
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6a1b      	ldr	r3, [r3, #32]
 8007ae6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6a1b      	ldr	r3, [r3, #32]
 8007aec:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007b00:	68fa      	ldr	r2, [r7, #12]
 8007b02:	4b1b      	ldr	r3, [pc, #108]	@ (8007b70 <TIM_OC5_SetConfig+0x98>)
 8007b04:	4013      	ands	r3, r2
 8007b06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	68fa      	ldr	r2, [r7, #12]
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007b18:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	041b      	lsls	r3, r3, #16
 8007b20:	693a      	ldr	r2, [r7, #16]
 8007b22:	4313      	orrs	r3, r2
 8007b24:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	4a12      	ldr	r2, [pc, #72]	@ (8007b74 <TIM_OC5_SetConfig+0x9c>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d003      	beq.n	8007b36 <TIM_OC5_SetConfig+0x5e>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	4a11      	ldr	r2, [pc, #68]	@ (8007b78 <TIM_OC5_SetConfig+0xa0>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d109      	bne.n	8007b4a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b3c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	695b      	ldr	r3, [r3, #20]
 8007b42:	021b      	lsls	r3, r3, #8
 8007b44:	697a      	ldr	r2, [r7, #20]
 8007b46:	4313      	orrs	r3, r2
 8007b48:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	697a      	ldr	r2, [r7, #20]
 8007b4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	68fa      	ldr	r2, [r7, #12]
 8007b54:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	685a      	ldr	r2, [r3, #4]
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	693a      	ldr	r2, [r7, #16]
 8007b62:	621a      	str	r2, [r3, #32]
}
 8007b64:	bf00      	nop
 8007b66:	371c      	adds	r7, #28
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr
 8007b70:	fffeff8f 	.word	0xfffeff8f
 8007b74:	40010000 	.word	0x40010000
 8007b78:	40010400 	.word	0x40010400

08007b7c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b087      	sub	sp, #28
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6a1b      	ldr	r3, [r3, #32]
 8007b8a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6a1b      	ldr	r3, [r3, #32]
 8007b90:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007ba4:	68fa      	ldr	r2, [r7, #12]
 8007ba6:	4b1c      	ldr	r3, [pc, #112]	@ (8007c18 <TIM_OC6_SetConfig+0x9c>)
 8007ba8:	4013      	ands	r3, r2
 8007baa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	021b      	lsls	r3, r3, #8
 8007bb2:	68fa      	ldr	r2, [r7, #12]
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007bbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	689b      	ldr	r3, [r3, #8]
 8007bc4:	051b      	lsls	r3, r3, #20
 8007bc6:	693a      	ldr	r2, [r7, #16]
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	4a13      	ldr	r2, [pc, #76]	@ (8007c1c <TIM_OC6_SetConfig+0xa0>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d003      	beq.n	8007bdc <TIM_OC6_SetConfig+0x60>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	4a12      	ldr	r2, [pc, #72]	@ (8007c20 <TIM_OC6_SetConfig+0xa4>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d109      	bne.n	8007bf0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007be2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	695b      	ldr	r3, [r3, #20]
 8007be8:	029b      	lsls	r3, r3, #10
 8007bea:	697a      	ldr	r2, [r7, #20]
 8007bec:	4313      	orrs	r3, r2
 8007bee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	697a      	ldr	r2, [r7, #20]
 8007bf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	68fa      	ldr	r2, [r7, #12]
 8007bfa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	685a      	ldr	r2, [r3, #4]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	693a      	ldr	r2, [r7, #16]
 8007c08:	621a      	str	r2, [r3, #32]
}
 8007c0a:	bf00      	nop
 8007c0c:	371c      	adds	r7, #28
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c14:	4770      	bx	lr
 8007c16:	bf00      	nop
 8007c18:	feff8fff 	.word	0xfeff8fff
 8007c1c:	40010000 	.word	0x40010000
 8007c20:	40010400 	.word	0x40010400

08007c24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b087      	sub	sp, #28
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	60f8      	str	r0, [r7, #12]
 8007c2c:	60b9      	str	r1, [r7, #8]
 8007c2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	6a1b      	ldr	r3, [r3, #32]
 8007c34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	6a1b      	ldr	r3, [r3, #32]
 8007c3a:	f023 0201 	bic.w	r2, r3, #1
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	699b      	ldr	r3, [r3, #24]
 8007c46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007c4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	011b      	lsls	r3, r3, #4
 8007c54:	693a      	ldr	r2, [r7, #16]
 8007c56:	4313      	orrs	r3, r2
 8007c58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	f023 030a 	bic.w	r3, r3, #10
 8007c60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007c62:	697a      	ldr	r2, [r7, #20]
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	4313      	orrs	r3, r2
 8007c68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	693a      	ldr	r2, [r7, #16]
 8007c6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	697a      	ldr	r2, [r7, #20]
 8007c74:	621a      	str	r2, [r3, #32]
}
 8007c76:	bf00      	nop
 8007c78:	371c      	adds	r7, #28
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr

08007c82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c82:	b480      	push	{r7}
 8007c84:	b087      	sub	sp, #28
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	60f8      	str	r0, [r7, #12]
 8007c8a:	60b9      	str	r1, [r7, #8]
 8007c8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	6a1b      	ldr	r3, [r3, #32]
 8007c92:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	6a1b      	ldr	r3, [r3, #32]
 8007c98:	f023 0210 	bic.w	r2, r3, #16
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	699b      	ldr	r3, [r3, #24]
 8007ca4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007cac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	031b      	lsls	r3, r3, #12
 8007cb2:	693a      	ldr	r2, [r7, #16]
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007cbe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	011b      	lsls	r3, r3, #4
 8007cc4:	697a      	ldr	r2, [r7, #20]
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	693a      	ldr	r2, [r7, #16]
 8007cce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	697a      	ldr	r2, [r7, #20]
 8007cd4:	621a      	str	r2, [r3, #32]
}
 8007cd6:	bf00      	nop
 8007cd8:	371c      	adds	r7, #28
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr

08007ce2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007ce2:	b480      	push	{r7}
 8007ce4:	b085      	sub	sp, #20
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	6078      	str	r0, [r7, #4]
 8007cea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	689b      	ldr	r3, [r3, #8]
 8007cf0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cf8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007cfa:	683a      	ldr	r2, [r7, #0]
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	f043 0307 	orr.w	r3, r3, #7
 8007d04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	68fa      	ldr	r2, [r7, #12]
 8007d0a:	609a      	str	r2, [r3, #8]
}
 8007d0c:	bf00      	nop
 8007d0e:	3714      	adds	r7, #20
 8007d10:	46bd      	mov	sp, r7
 8007d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d16:	4770      	bx	lr

08007d18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b087      	sub	sp, #28
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	60f8      	str	r0, [r7, #12]
 8007d20:	60b9      	str	r1, [r7, #8]
 8007d22:	607a      	str	r2, [r7, #4]
 8007d24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007d32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	021a      	lsls	r2, r3, #8
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	431a      	orrs	r2, r3
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	697a      	ldr	r2, [r7, #20]
 8007d42:	4313      	orrs	r3, r2
 8007d44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	697a      	ldr	r2, [r7, #20]
 8007d4a:	609a      	str	r2, [r3, #8]
}
 8007d4c:	bf00      	nop
 8007d4e:	371c      	adds	r7, #28
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr

08007d58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b084      	sub	sp, #16
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a32      	ldr	r2, [pc, #200]	@ (8007e30 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d027      	beq.n	8007dbc <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d74:	d022      	beq.n	8007dbc <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a2e      	ldr	r2, [pc, #184]	@ (8007e34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d01d      	beq.n	8007dbc <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a2c      	ldr	r2, [pc, #176]	@ (8007e38 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d018      	beq.n	8007dbc <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a2b      	ldr	r2, [pc, #172]	@ (8007e3c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d013      	beq.n	8007dbc <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a29      	ldr	r2, [pc, #164]	@ (8007e40 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d00e      	beq.n	8007dbc <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a28      	ldr	r2, [pc, #160]	@ (8007e44 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d009      	beq.n	8007dbc <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a26      	ldr	r2, [pc, #152]	@ (8007e48 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d004      	beq.n	8007dbc <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007db2:	f240 71ab 	movw	r1, #1963	@ 0x7ab
 8007db6:	4825      	ldr	r0, [pc, #148]	@ (8007e4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007db8:	f7fa fbbc 	bl	8002534 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d020      	beq.n	8007e06 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	2b10      	cmp	r3, #16
 8007dca:	d01c      	beq.n	8007e06 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	2b20      	cmp	r3, #32
 8007dd2:	d018      	beq.n	8007e06 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	2b30      	cmp	r3, #48	@ 0x30
 8007dda:	d014      	beq.n	8007e06 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	2b40      	cmp	r3, #64	@ 0x40
 8007de2:	d010      	beq.n	8007e06 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	2b50      	cmp	r3, #80	@ 0x50
 8007dea:	d00c      	beq.n	8007e06 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	2b60      	cmp	r3, #96	@ 0x60
 8007df2:	d008      	beq.n	8007e06 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	2b70      	cmp	r3, #112	@ 0x70
 8007dfa:	d004      	beq.n	8007e06 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007dfc:	f240 71ac 	movw	r1, #1964	@ 0x7ac
 8007e00:	4812      	ldr	r0, [pc, #72]	@ (8007e4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007e02:	f7fa fb97 	bl	8002534 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	689b      	ldr	r3, [r3, #8]
 8007e0a:	2b80      	cmp	r3, #128	@ 0x80
 8007e0c:	d008      	beq.n	8007e20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	689b      	ldr	r3, [r3, #8]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d004      	beq.n	8007e20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007e16:	f240 71ad 	movw	r1, #1965	@ 0x7ad
 8007e1a:	480c      	ldr	r0, [pc, #48]	@ (8007e4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007e1c:	f7fa fb8a 	bl	8002534 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d112      	bne.n	8007e50 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8007e2a:	2302      	movs	r3, #2
 8007e2c:	e0d7      	b.n	8007fde <HAL_TIMEx_MasterConfigSynchronization+0x286>
 8007e2e:	bf00      	nop
 8007e30:	40010000 	.word	0x40010000
 8007e34:	40000400 	.word	0x40000400
 8007e38:	40000800 	.word	0x40000800
 8007e3c:	40000c00 	.word	0x40000c00
 8007e40:	40001000 	.word	0x40001000
 8007e44:	40001400 	.word	0x40001400
 8007e48:	40010400 	.word	0x40010400
 8007e4c:	08010a4c 	.word	0x08010a4c
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2201      	movs	r2, #1
 8007e54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2202      	movs	r2, #2
 8007e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	689b      	ldr	r3, [r3, #8]
 8007e6e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a5c      	ldr	r2, [pc, #368]	@ (8007fe8 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d004      	beq.n	8007e84 <HAL_TIMEx_MasterConfigSynchronization+0x12c>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4a5b      	ldr	r2, [pc, #364]	@ (8007fec <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d161      	bne.n	8007f48 <HAL_TIMEx_MasterConfigSynchronization+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d054      	beq.n	8007f36 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e94:	d04f      	beq.n	8007f36 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007e9e:	d04a      	beq.n	8007f36 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007ea8:	d045      	beq.n	8007f36 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	685b      	ldr	r3, [r3, #4]
 8007eae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007eb2:	d040      	beq.n	8007f36 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8007ebc:	d03b      	beq.n	8007f36 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007ec6:	d036      	beq.n	8007f36 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007ed0:	d031      	beq.n	8007f36 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	f5b3 0fe0 	cmp.w	r3, #7340032	@ 0x700000
 8007eda:	d02c      	beq.n	8007f36 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007ee4:	d027      	beq.n	8007f36 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	f5b3 0f10 	cmp.w	r3, #9437184	@ 0x900000
 8007eee:	d022      	beq.n	8007f36 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8007ef8:	d01d      	beq.n	8007f36 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	f5b3 0f30 	cmp.w	r3, #11534336	@ 0xb00000
 8007f02:	d018      	beq.n	8007f36 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007f0c:	d013      	beq.n	8007f36 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	f5b3 0f50 	cmp.w	r3, #13631488	@ 0xd00000
 8007f16:	d00e      	beq.n	8007f36 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	f5b3 0f60 	cmp.w	r3, #14680064	@ 0xe00000
 8007f20:	d009      	beq.n	8007f36 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	f5b3 0f70 	cmp.w	r3, #15728640	@ 0xf00000
 8007f2a:	d004      	beq.n	8007f36 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8007f2c:	f240 71bf 	movw	r1, #1983	@ 0x7bf
 8007f30:	482f      	ldr	r0, [pc, #188]	@ (8007ff0 <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 8007f32:	f7fa faff 	bl	8002534 <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007f3c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	68fa      	ldr	r2, [r7, #12]
 8007f44:	4313      	orrs	r3, r2
 8007f46:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	68fa      	ldr	r2, [r7, #12]
 8007f56:	4313      	orrs	r3, r2
 8007f58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	68fa      	ldr	r2, [r7, #12]
 8007f60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a20      	ldr	r2, [pc, #128]	@ (8007fe8 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d022      	beq.n	8007fb2 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f74:	d01d      	beq.n	8007fb2 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a1e      	ldr	r2, [pc, #120]	@ (8007ff4 <HAL_TIMEx_MasterConfigSynchronization+0x29c>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d018      	beq.n	8007fb2 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a1c      	ldr	r2, [pc, #112]	@ (8007ff8 <HAL_TIMEx_MasterConfigSynchronization+0x2a0>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d013      	beq.n	8007fb2 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a1b      	ldr	r2, [pc, #108]	@ (8007ffc <HAL_TIMEx_MasterConfigSynchronization+0x2a4>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d00e      	beq.n	8007fb2 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a14      	ldr	r2, [pc, #80]	@ (8007fec <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d009      	beq.n	8007fb2 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a17      	ldr	r2, [pc, #92]	@ (8008000 <HAL_TIMEx_MasterConfigSynchronization+0x2a8>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d004      	beq.n	8007fb2 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a15      	ldr	r2, [pc, #84]	@ (8008004 <HAL_TIMEx_MasterConfigSynchronization+0x2ac>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d10c      	bne.n	8007fcc <HAL_TIMEx_MasterConfigSynchronization+0x274>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007fb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	689b      	ldr	r3, [r3, #8]
 8007fbe:	68ba      	ldr	r2, [r7, #8]
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	68ba      	ldr	r2, [r7, #8]
 8007fca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2201      	movs	r2, #1
 8007fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007fdc:	2300      	movs	r3, #0
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3710      	adds	r7, #16
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
 8007fe6:	bf00      	nop
 8007fe8:	40010000 	.word	0x40010000
 8007fec:	40010400 	.word	0x40010400
 8007ff0:	08010a4c 	.word	0x08010a4c
 8007ff4:	40000400 	.word	0x40000400
 8007ff8:	40000800 	.word	0x40000800
 8007ffc:	40000c00 	.word	0x40000c00
 8008000:	40014000 	.word	0x40014000
 8008004:	40001800 	.word	0x40001800

08008008 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b082      	sub	sp, #8
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d101      	bne.n	800801a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008016:	2301      	movs	r3, #1
 8008018:	e09f      	b.n	800815a <HAL_UART_Init+0x152>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	699b      	ldr	r3, [r3, #24]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d02d      	beq.n	800807e <HAL_UART_Init+0x76>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a4f      	ldr	r2, [pc, #316]	@ (8008164 <HAL_UART_Init+0x15c>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d055      	beq.n	80080d8 <HAL_UART_Init+0xd0>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4a4d      	ldr	r2, [pc, #308]	@ (8008168 <HAL_UART_Init+0x160>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d050      	beq.n	80080d8 <HAL_UART_Init+0xd0>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a4c      	ldr	r2, [pc, #304]	@ (800816c <HAL_UART_Init+0x164>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d04b      	beq.n	80080d8 <HAL_UART_Init+0xd0>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a4a      	ldr	r2, [pc, #296]	@ (8008170 <HAL_UART_Init+0x168>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d046      	beq.n	80080d8 <HAL_UART_Init+0xd0>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a49      	ldr	r2, [pc, #292]	@ (8008174 <HAL_UART_Init+0x16c>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d041      	beq.n	80080d8 <HAL_UART_Init+0xd0>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a47      	ldr	r2, [pc, #284]	@ (8008178 <HAL_UART_Init+0x170>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d03c      	beq.n	80080d8 <HAL_UART_Init+0xd0>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a46      	ldr	r2, [pc, #280]	@ (800817c <HAL_UART_Init+0x174>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d037      	beq.n	80080d8 <HAL_UART_Init+0xd0>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a44      	ldr	r2, [pc, #272]	@ (8008180 <HAL_UART_Init+0x178>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d032      	beq.n	80080d8 <HAL_UART_Init+0xd0>
 8008072:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8008076:	4843      	ldr	r0, [pc, #268]	@ (8008184 <HAL_UART_Init+0x17c>)
 8008078:	f7fa fa5c 	bl	8002534 <assert_failed>
 800807c:	e02c      	b.n	80080d8 <HAL_UART_Init+0xd0>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a38      	ldr	r2, [pc, #224]	@ (8008164 <HAL_UART_Init+0x15c>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d027      	beq.n	80080d8 <HAL_UART_Init+0xd0>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a36      	ldr	r2, [pc, #216]	@ (8008168 <HAL_UART_Init+0x160>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d022      	beq.n	80080d8 <HAL_UART_Init+0xd0>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a35      	ldr	r2, [pc, #212]	@ (800816c <HAL_UART_Init+0x164>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d01d      	beq.n	80080d8 <HAL_UART_Init+0xd0>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a33      	ldr	r2, [pc, #204]	@ (8008170 <HAL_UART_Init+0x168>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d018      	beq.n	80080d8 <HAL_UART_Init+0xd0>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a32      	ldr	r2, [pc, #200]	@ (8008174 <HAL_UART_Init+0x16c>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d013      	beq.n	80080d8 <HAL_UART_Init+0xd0>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a30      	ldr	r2, [pc, #192]	@ (8008178 <HAL_UART_Init+0x170>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d00e      	beq.n	80080d8 <HAL_UART_Init+0xd0>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4a2f      	ldr	r2, [pc, #188]	@ (800817c <HAL_UART_Init+0x174>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d009      	beq.n	80080d8 <HAL_UART_Init+0xd0>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4a2d      	ldr	r2, [pc, #180]	@ (8008180 <HAL_UART_Init+0x178>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d004      	beq.n	80080d8 <HAL_UART_Init+0xd0>
 80080ce:	f240 1131 	movw	r1, #305	@ 0x131
 80080d2:	482c      	ldr	r0, [pc, #176]	@ (8008184 <HAL_UART_Init+0x17c>)
 80080d4:	f7fa fa2e 	bl	8002534 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d106      	bne.n	80080ee <HAL_UART_Init+0xe6>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2200      	movs	r2, #0
 80080e4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f7fa fd8f 	bl	8002c0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2224      	movs	r2, #36	@ 0x24
 80080f2:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	681a      	ldr	r2, [r3, #0]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f022 0201 	bic.w	r2, r2, #1
 8008102:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008108:	2b00      	cmp	r3, #0
 800810a:	d002      	beq.n	8008112 <HAL_UART_Init+0x10a>
  {
    UART_AdvFeatureConfig(huart);
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f000 fb31 	bl	8008774 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 f838 	bl	8008188 <UART_SetConfig>
 8008118:	4603      	mov	r3, r0
 800811a:	2b01      	cmp	r3, #1
 800811c:	d101      	bne.n	8008122 <HAL_UART_Init+0x11a>
  {
    return HAL_ERROR;
 800811e:	2301      	movs	r3, #1
 8008120:	e01b      	b.n	800815a <HAL_UART_Init+0x152>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	685a      	ldr	r2, [r3, #4]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008130:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	689a      	ldr	r2, [r3, #8]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008140:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	681a      	ldr	r2, [r3, #0]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f042 0201 	orr.w	r2, r2, #1
 8008150:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 fc66 	bl	8008a24 <UART_CheckIdleState>
 8008158:	4603      	mov	r3, r0
}
 800815a:	4618      	mov	r0, r3
 800815c:	3708      	adds	r7, #8
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
 8008162:	bf00      	nop
 8008164:	40011000 	.word	0x40011000
 8008168:	40004400 	.word	0x40004400
 800816c:	40004800 	.word	0x40004800
 8008170:	40004c00 	.word	0x40004c00
 8008174:	40005000 	.word	0x40005000
 8008178:	40011400 	.word	0x40011400
 800817c:	40007800 	.word	0x40007800
 8008180:	40007c00 	.word	0x40007c00
 8008184:	08010a88 	.word	0x08010a88

08008188 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b088      	sub	sp, #32
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008190:	2300      	movs	r3, #0
 8008192:	77bb      	strb	r3, [r7, #30]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	4aa0      	ldr	r2, [pc, #640]	@ (800841c <UART_SetConfig+0x294>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d904      	bls.n	80081a8 <UART_SetConfig+0x20>
 800819e:	f640 315f 	movw	r1, #2911	@ 0xb5f
 80081a2:	489f      	ldr	r0, [pc, #636]	@ (8008420 <UART_SetConfig+0x298>)
 80081a4:	f7fa f9c6 	bl	8002534 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	689b      	ldr	r3, [r3, #8]
 80081ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80081b0:	d00d      	beq.n	80081ce <UART_SetConfig+0x46>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	689b      	ldr	r3, [r3, #8]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d009      	beq.n	80081ce <UART_SetConfig+0x46>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	689b      	ldr	r3, [r3, #8]
 80081be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081c2:	d004      	beq.n	80081ce <UART_SetConfig+0x46>
 80081c4:	f44f 6136 	mov.w	r1, #2912	@ 0xb60
 80081c8:	4895      	ldr	r0, [pc, #596]	@ (8008420 <UART_SetConfig+0x298>)
 80081ca:	f7fa f9b3 	bl	8002534 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	68db      	ldr	r3, [r3, #12]
 80081d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081d6:	d012      	beq.n	80081fe <UART_SetConfig+0x76>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	68db      	ldr	r3, [r3, #12]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d00e      	beq.n	80081fe <UART_SetConfig+0x76>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	68db      	ldr	r3, [r3, #12]
 80081e4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80081e8:	d009      	beq.n	80081fe <UART_SetConfig+0x76>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	68db      	ldr	r3, [r3, #12]
 80081ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081f2:	d004      	beq.n	80081fe <UART_SetConfig+0x76>
 80081f4:	f640 3161 	movw	r1, #2913	@ 0xb61
 80081f8:	4889      	ldr	r0, [pc, #548]	@ (8008420 <UART_SetConfig+0x298>)
 80081fa:	f7fa f99b 	bl	8002534 <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6a1b      	ldr	r3, [r3, #32]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d009      	beq.n	800821a <UART_SetConfig+0x92>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6a1b      	ldr	r3, [r3, #32]
 800820a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800820e:	d004      	beq.n	800821a <UART_SetConfig+0x92>
 8008210:	f640 3162 	movw	r1, #2914	@ 0xb62
 8008214:	4882      	ldr	r0, [pc, #520]	@ (8008420 <UART_SetConfig+0x298>)
 8008216:	f7fa f98d 	bl	8002534 <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	691b      	ldr	r3, [r3, #16]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d00e      	beq.n	8008240 <UART_SetConfig+0xb8>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	691b      	ldr	r3, [r3, #16]
 8008226:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800822a:	d009      	beq.n	8008240 <UART_SetConfig+0xb8>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	691b      	ldr	r3, [r3, #16]
 8008230:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008234:	d004      	beq.n	8008240 <UART_SetConfig+0xb8>
 8008236:	f640 3164 	movw	r1, #2916	@ 0xb64
 800823a:	4879      	ldr	r0, [pc, #484]	@ (8008420 <UART_SetConfig+0x298>)
 800823c:	f7fa f97a 	bl	8002534 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	695b      	ldr	r3, [r3, #20]
 8008244:	f023 030c 	bic.w	r3, r3, #12
 8008248:	2b00      	cmp	r3, #0
 800824a:	d103      	bne.n	8008254 <UART_SetConfig+0xcc>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	695b      	ldr	r3, [r3, #20]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d104      	bne.n	800825e <UART_SetConfig+0xd6>
 8008254:	f640 3165 	movw	r1, #2917	@ 0xb65
 8008258:	4871      	ldr	r0, [pc, #452]	@ (8008420 <UART_SetConfig+0x298>)
 800825a:	f7fa f96b 	bl	8002534 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	699b      	ldr	r3, [r3, #24]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d013      	beq.n	800828e <UART_SetConfig+0x106>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	699b      	ldr	r3, [r3, #24]
 800826a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800826e:	d00e      	beq.n	800828e <UART_SetConfig+0x106>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	699b      	ldr	r3, [r3, #24]
 8008274:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008278:	d009      	beq.n	800828e <UART_SetConfig+0x106>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	699b      	ldr	r3, [r3, #24]
 800827e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008282:	d004      	beq.n	800828e <UART_SetConfig+0x106>
 8008284:	f640 3166 	movw	r1, #2918	@ 0xb66
 8008288:	4865      	ldr	r0, [pc, #404]	@ (8008420 <UART_SetConfig+0x298>)
 800828a:	f7fa f953 	bl	8002534 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	69db      	ldr	r3, [r3, #28]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d009      	beq.n	80082aa <UART_SetConfig+0x122>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	69db      	ldr	r3, [r3, #28]
 800829a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800829e:	d004      	beq.n	80082aa <UART_SetConfig+0x122>
 80082a0:	f640 3167 	movw	r1, #2919	@ 0xb67
 80082a4:	485e      	ldr	r0, [pc, #376]	@ (8008420 <UART_SetConfig+0x298>)
 80082a6:	f7fa f945 	bl	8002534 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	689a      	ldr	r2, [r3, #8]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	691b      	ldr	r3, [r3, #16]
 80082b2:	431a      	orrs	r2, r3
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	695b      	ldr	r3, [r3, #20]
 80082b8:	431a      	orrs	r2, r3
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	69db      	ldr	r3, [r3, #28]
 80082be:	4313      	orrs	r3, r2
 80082c0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	681a      	ldr	r2, [r3, #0]
 80082c8:	4b56      	ldr	r3, [pc, #344]	@ (8008424 <UART_SetConfig+0x29c>)
 80082ca:	4013      	ands	r3, r2
 80082cc:	687a      	ldr	r2, [r7, #4]
 80082ce:	6812      	ldr	r2, [r2, #0]
 80082d0:	6979      	ldr	r1, [r7, #20]
 80082d2:	430b      	orrs	r3, r1
 80082d4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	68da      	ldr	r2, [r3, #12]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	430a      	orrs	r2, r1
 80082ea:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	699b      	ldr	r3, [r3, #24]
 80082f0:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6a1b      	ldr	r3, [r3, #32]
 80082f6:	697a      	ldr	r2, [r7, #20]
 80082f8:	4313      	orrs	r3, r2
 80082fa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	689b      	ldr	r3, [r3, #8]
 8008302:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	697a      	ldr	r2, [r7, #20]
 800830c:	430a      	orrs	r2, r1
 800830e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4a44      	ldr	r2, [pc, #272]	@ (8008428 <UART_SetConfig+0x2a0>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d121      	bne.n	800835e <UART_SetConfig+0x1d6>
 800831a:	4b44      	ldr	r3, [pc, #272]	@ (800842c <UART_SetConfig+0x2a4>)
 800831c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008320:	f003 0303 	and.w	r3, r3, #3
 8008324:	2b03      	cmp	r3, #3
 8008326:	d817      	bhi.n	8008358 <UART_SetConfig+0x1d0>
 8008328:	a201      	add	r2, pc, #4	@ (adr r2, 8008330 <UART_SetConfig+0x1a8>)
 800832a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800832e:	bf00      	nop
 8008330:	08008341 	.word	0x08008341
 8008334:	0800834d 	.word	0x0800834d
 8008338:	08008347 	.word	0x08008347
 800833c:	08008353 	.word	0x08008353
 8008340:	2301      	movs	r3, #1
 8008342:	77fb      	strb	r3, [r7, #31]
 8008344:	e14c      	b.n	80085e0 <UART_SetConfig+0x458>
 8008346:	2302      	movs	r3, #2
 8008348:	77fb      	strb	r3, [r7, #31]
 800834a:	e149      	b.n	80085e0 <UART_SetConfig+0x458>
 800834c:	2304      	movs	r3, #4
 800834e:	77fb      	strb	r3, [r7, #31]
 8008350:	e146      	b.n	80085e0 <UART_SetConfig+0x458>
 8008352:	2308      	movs	r3, #8
 8008354:	77fb      	strb	r3, [r7, #31]
 8008356:	e143      	b.n	80085e0 <UART_SetConfig+0x458>
 8008358:	2310      	movs	r3, #16
 800835a:	77fb      	strb	r3, [r7, #31]
 800835c:	e140      	b.n	80085e0 <UART_SetConfig+0x458>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4a33      	ldr	r2, [pc, #204]	@ (8008430 <UART_SetConfig+0x2a8>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d132      	bne.n	80083ce <UART_SetConfig+0x246>
 8008368:	4b30      	ldr	r3, [pc, #192]	@ (800842c <UART_SetConfig+0x2a4>)
 800836a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800836e:	f003 030c 	and.w	r3, r3, #12
 8008372:	2b0c      	cmp	r3, #12
 8008374:	d828      	bhi.n	80083c8 <UART_SetConfig+0x240>
 8008376:	a201      	add	r2, pc, #4	@ (adr r2, 800837c <UART_SetConfig+0x1f4>)
 8008378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800837c:	080083b1 	.word	0x080083b1
 8008380:	080083c9 	.word	0x080083c9
 8008384:	080083c9 	.word	0x080083c9
 8008388:	080083c9 	.word	0x080083c9
 800838c:	080083bd 	.word	0x080083bd
 8008390:	080083c9 	.word	0x080083c9
 8008394:	080083c9 	.word	0x080083c9
 8008398:	080083c9 	.word	0x080083c9
 800839c:	080083b7 	.word	0x080083b7
 80083a0:	080083c9 	.word	0x080083c9
 80083a4:	080083c9 	.word	0x080083c9
 80083a8:	080083c9 	.word	0x080083c9
 80083ac:	080083c3 	.word	0x080083c3
 80083b0:	2300      	movs	r3, #0
 80083b2:	77fb      	strb	r3, [r7, #31]
 80083b4:	e114      	b.n	80085e0 <UART_SetConfig+0x458>
 80083b6:	2302      	movs	r3, #2
 80083b8:	77fb      	strb	r3, [r7, #31]
 80083ba:	e111      	b.n	80085e0 <UART_SetConfig+0x458>
 80083bc:	2304      	movs	r3, #4
 80083be:	77fb      	strb	r3, [r7, #31]
 80083c0:	e10e      	b.n	80085e0 <UART_SetConfig+0x458>
 80083c2:	2308      	movs	r3, #8
 80083c4:	77fb      	strb	r3, [r7, #31]
 80083c6:	e10b      	b.n	80085e0 <UART_SetConfig+0x458>
 80083c8:	2310      	movs	r3, #16
 80083ca:	77fb      	strb	r3, [r7, #31]
 80083cc:	e108      	b.n	80085e0 <UART_SetConfig+0x458>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a18      	ldr	r2, [pc, #96]	@ (8008434 <UART_SetConfig+0x2ac>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d12f      	bne.n	8008438 <UART_SetConfig+0x2b0>
 80083d8:	4b14      	ldr	r3, [pc, #80]	@ (800842c <UART_SetConfig+0x2a4>)
 80083da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083de:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80083e2:	2b30      	cmp	r3, #48	@ 0x30
 80083e4:	d013      	beq.n	800840e <UART_SetConfig+0x286>
 80083e6:	2b30      	cmp	r3, #48	@ 0x30
 80083e8:	d814      	bhi.n	8008414 <UART_SetConfig+0x28c>
 80083ea:	2b20      	cmp	r3, #32
 80083ec:	d009      	beq.n	8008402 <UART_SetConfig+0x27a>
 80083ee:	2b20      	cmp	r3, #32
 80083f0:	d810      	bhi.n	8008414 <UART_SetConfig+0x28c>
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d002      	beq.n	80083fc <UART_SetConfig+0x274>
 80083f6:	2b10      	cmp	r3, #16
 80083f8:	d006      	beq.n	8008408 <UART_SetConfig+0x280>
 80083fa:	e00b      	b.n	8008414 <UART_SetConfig+0x28c>
 80083fc:	2300      	movs	r3, #0
 80083fe:	77fb      	strb	r3, [r7, #31]
 8008400:	e0ee      	b.n	80085e0 <UART_SetConfig+0x458>
 8008402:	2302      	movs	r3, #2
 8008404:	77fb      	strb	r3, [r7, #31]
 8008406:	e0eb      	b.n	80085e0 <UART_SetConfig+0x458>
 8008408:	2304      	movs	r3, #4
 800840a:	77fb      	strb	r3, [r7, #31]
 800840c:	e0e8      	b.n	80085e0 <UART_SetConfig+0x458>
 800840e:	2308      	movs	r3, #8
 8008410:	77fb      	strb	r3, [r7, #31]
 8008412:	e0e5      	b.n	80085e0 <UART_SetConfig+0x458>
 8008414:	2310      	movs	r3, #16
 8008416:	77fb      	strb	r3, [r7, #31]
 8008418:	e0e2      	b.n	80085e0 <UART_SetConfig+0x458>
 800841a:	bf00      	nop
 800841c:	019bfcc0 	.word	0x019bfcc0
 8008420:	08010a88 	.word	0x08010a88
 8008424:	efff69f3 	.word	0xefff69f3
 8008428:	40011000 	.word	0x40011000
 800842c:	40023800 	.word	0x40023800
 8008430:	40004400 	.word	0x40004400
 8008434:	40004800 	.word	0x40004800
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4aa5      	ldr	r2, [pc, #660]	@ (80086d4 <UART_SetConfig+0x54c>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d120      	bne.n	8008484 <UART_SetConfig+0x2fc>
 8008442:	4ba5      	ldr	r3, [pc, #660]	@ (80086d8 <UART_SetConfig+0x550>)
 8008444:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008448:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800844c:	2bc0      	cmp	r3, #192	@ 0xc0
 800844e:	d013      	beq.n	8008478 <UART_SetConfig+0x2f0>
 8008450:	2bc0      	cmp	r3, #192	@ 0xc0
 8008452:	d814      	bhi.n	800847e <UART_SetConfig+0x2f6>
 8008454:	2b80      	cmp	r3, #128	@ 0x80
 8008456:	d009      	beq.n	800846c <UART_SetConfig+0x2e4>
 8008458:	2b80      	cmp	r3, #128	@ 0x80
 800845a:	d810      	bhi.n	800847e <UART_SetConfig+0x2f6>
 800845c:	2b00      	cmp	r3, #0
 800845e:	d002      	beq.n	8008466 <UART_SetConfig+0x2de>
 8008460:	2b40      	cmp	r3, #64	@ 0x40
 8008462:	d006      	beq.n	8008472 <UART_SetConfig+0x2ea>
 8008464:	e00b      	b.n	800847e <UART_SetConfig+0x2f6>
 8008466:	2300      	movs	r3, #0
 8008468:	77fb      	strb	r3, [r7, #31]
 800846a:	e0b9      	b.n	80085e0 <UART_SetConfig+0x458>
 800846c:	2302      	movs	r3, #2
 800846e:	77fb      	strb	r3, [r7, #31]
 8008470:	e0b6      	b.n	80085e0 <UART_SetConfig+0x458>
 8008472:	2304      	movs	r3, #4
 8008474:	77fb      	strb	r3, [r7, #31]
 8008476:	e0b3      	b.n	80085e0 <UART_SetConfig+0x458>
 8008478:	2308      	movs	r3, #8
 800847a:	77fb      	strb	r3, [r7, #31]
 800847c:	e0b0      	b.n	80085e0 <UART_SetConfig+0x458>
 800847e:	2310      	movs	r3, #16
 8008480:	77fb      	strb	r3, [r7, #31]
 8008482:	e0ad      	b.n	80085e0 <UART_SetConfig+0x458>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4a94      	ldr	r2, [pc, #592]	@ (80086dc <UART_SetConfig+0x554>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d125      	bne.n	80084da <UART_SetConfig+0x352>
 800848e:	4b92      	ldr	r3, [pc, #584]	@ (80086d8 <UART_SetConfig+0x550>)
 8008490:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008494:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008498:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800849c:	d017      	beq.n	80084ce <UART_SetConfig+0x346>
 800849e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80084a2:	d817      	bhi.n	80084d4 <UART_SetConfig+0x34c>
 80084a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084a8:	d00b      	beq.n	80084c2 <UART_SetConfig+0x33a>
 80084aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084ae:	d811      	bhi.n	80084d4 <UART_SetConfig+0x34c>
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d003      	beq.n	80084bc <UART_SetConfig+0x334>
 80084b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084b8:	d006      	beq.n	80084c8 <UART_SetConfig+0x340>
 80084ba:	e00b      	b.n	80084d4 <UART_SetConfig+0x34c>
 80084bc:	2300      	movs	r3, #0
 80084be:	77fb      	strb	r3, [r7, #31]
 80084c0:	e08e      	b.n	80085e0 <UART_SetConfig+0x458>
 80084c2:	2302      	movs	r3, #2
 80084c4:	77fb      	strb	r3, [r7, #31]
 80084c6:	e08b      	b.n	80085e0 <UART_SetConfig+0x458>
 80084c8:	2304      	movs	r3, #4
 80084ca:	77fb      	strb	r3, [r7, #31]
 80084cc:	e088      	b.n	80085e0 <UART_SetConfig+0x458>
 80084ce:	2308      	movs	r3, #8
 80084d0:	77fb      	strb	r3, [r7, #31]
 80084d2:	e085      	b.n	80085e0 <UART_SetConfig+0x458>
 80084d4:	2310      	movs	r3, #16
 80084d6:	77fb      	strb	r3, [r7, #31]
 80084d8:	e082      	b.n	80085e0 <UART_SetConfig+0x458>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4a80      	ldr	r2, [pc, #512]	@ (80086e0 <UART_SetConfig+0x558>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d125      	bne.n	8008530 <UART_SetConfig+0x3a8>
 80084e4:	4b7c      	ldr	r3, [pc, #496]	@ (80086d8 <UART_SetConfig+0x550>)
 80084e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084ea:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80084ee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80084f2:	d017      	beq.n	8008524 <UART_SetConfig+0x39c>
 80084f4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80084f8:	d817      	bhi.n	800852a <UART_SetConfig+0x3a2>
 80084fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80084fe:	d00b      	beq.n	8008518 <UART_SetConfig+0x390>
 8008500:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008504:	d811      	bhi.n	800852a <UART_SetConfig+0x3a2>
 8008506:	2b00      	cmp	r3, #0
 8008508:	d003      	beq.n	8008512 <UART_SetConfig+0x38a>
 800850a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800850e:	d006      	beq.n	800851e <UART_SetConfig+0x396>
 8008510:	e00b      	b.n	800852a <UART_SetConfig+0x3a2>
 8008512:	2301      	movs	r3, #1
 8008514:	77fb      	strb	r3, [r7, #31]
 8008516:	e063      	b.n	80085e0 <UART_SetConfig+0x458>
 8008518:	2302      	movs	r3, #2
 800851a:	77fb      	strb	r3, [r7, #31]
 800851c:	e060      	b.n	80085e0 <UART_SetConfig+0x458>
 800851e:	2304      	movs	r3, #4
 8008520:	77fb      	strb	r3, [r7, #31]
 8008522:	e05d      	b.n	80085e0 <UART_SetConfig+0x458>
 8008524:	2308      	movs	r3, #8
 8008526:	77fb      	strb	r3, [r7, #31]
 8008528:	e05a      	b.n	80085e0 <UART_SetConfig+0x458>
 800852a:	2310      	movs	r3, #16
 800852c:	77fb      	strb	r3, [r7, #31]
 800852e:	e057      	b.n	80085e0 <UART_SetConfig+0x458>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a6b      	ldr	r2, [pc, #428]	@ (80086e4 <UART_SetConfig+0x55c>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d125      	bne.n	8008586 <UART_SetConfig+0x3fe>
 800853a:	4b67      	ldr	r3, [pc, #412]	@ (80086d8 <UART_SetConfig+0x550>)
 800853c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008540:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8008544:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008548:	d017      	beq.n	800857a <UART_SetConfig+0x3f2>
 800854a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800854e:	d817      	bhi.n	8008580 <UART_SetConfig+0x3f8>
 8008550:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008554:	d00b      	beq.n	800856e <UART_SetConfig+0x3e6>
 8008556:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800855a:	d811      	bhi.n	8008580 <UART_SetConfig+0x3f8>
 800855c:	2b00      	cmp	r3, #0
 800855e:	d003      	beq.n	8008568 <UART_SetConfig+0x3e0>
 8008560:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008564:	d006      	beq.n	8008574 <UART_SetConfig+0x3ec>
 8008566:	e00b      	b.n	8008580 <UART_SetConfig+0x3f8>
 8008568:	2300      	movs	r3, #0
 800856a:	77fb      	strb	r3, [r7, #31]
 800856c:	e038      	b.n	80085e0 <UART_SetConfig+0x458>
 800856e:	2302      	movs	r3, #2
 8008570:	77fb      	strb	r3, [r7, #31]
 8008572:	e035      	b.n	80085e0 <UART_SetConfig+0x458>
 8008574:	2304      	movs	r3, #4
 8008576:	77fb      	strb	r3, [r7, #31]
 8008578:	e032      	b.n	80085e0 <UART_SetConfig+0x458>
 800857a:	2308      	movs	r3, #8
 800857c:	77fb      	strb	r3, [r7, #31]
 800857e:	e02f      	b.n	80085e0 <UART_SetConfig+0x458>
 8008580:	2310      	movs	r3, #16
 8008582:	77fb      	strb	r3, [r7, #31]
 8008584:	e02c      	b.n	80085e0 <UART_SetConfig+0x458>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4a57      	ldr	r2, [pc, #348]	@ (80086e8 <UART_SetConfig+0x560>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d125      	bne.n	80085dc <UART_SetConfig+0x454>
 8008590:	4b51      	ldr	r3, [pc, #324]	@ (80086d8 <UART_SetConfig+0x550>)
 8008592:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008596:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800859a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800859e:	d017      	beq.n	80085d0 <UART_SetConfig+0x448>
 80085a0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80085a4:	d817      	bhi.n	80085d6 <UART_SetConfig+0x44e>
 80085a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80085aa:	d00b      	beq.n	80085c4 <UART_SetConfig+0x43c>
 80085ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80085b0:	d811      	bhi.n	80085d6 <UART_SetConfig+0x44e>
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d003      	beq.n	80085be <UART_SetConfig+0x436>
 80085b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80085ba:	d006      	beq.n	80085ca <UART_SetConfig+0x442>
 80085bc:	e00b      	b.n	80085d6 <UART_SetConfig+0x44e>
 80085be:	2300      	movs	r3, #0
 80085c0:	77fb      	strb	r3, [r7, #31]
 80085c2:	e00d      	b.n	80085e0 <UART_SetConfig+0x458>
 80085c4:	2302      	movs	r3, #2
 80085c6:	77fb      	strb	r3, [r7, #31]
 80085c8:	e00a      	b.n	80085e0 <UART_SetConfig+0x458>
 80085ca:	2304      	movs	r3, #4
 80085cc:	77fb      	strb	r3, [r7, #31]
 80085ce:	e007      	b.n	80085e0 <UART_SetConfig+0x458>
 80085d0:	2308      	movs	r3, #8
 80085d2:	77fb      	strb	r3, [r7, #31]
 80085d4:	e004      	b.n	80085e0 <UART_SetConfig+0x458>
 80085d6:	2310      	movs	r3, #16
 80085d8:	77fb      	strb	r3, [r7, #31]
 80085da:	e001      	b.n	80085e0 <UART_SetConfig+0x458>
 80085dc:	2310      	movs	r3, #16
 80085de:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	69db      	ldr	r3, [r3, #28]
 80085e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80085e8:	d15c      	bne.n	80086a4 <UART_SetConfig+0x51c>
  {
    switch (clocksource)
 80085ea:	7ffb      	ldrb	r3, [r7, #31]
 80085ec:	2b08      	cmp	r3, #8
 80085ee:	d828      	bhi.n	8008642 <UART_SetConfig+0x4ba>
 80085f0:	a201      	add	r2, pc, #4	@ (adr r2, 80085f8 <UART_SetConfig+0x470>)
 80085f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085f6:	bf00      	nop
 80085f8:	0800861d 	.word	0x0800861d
 80085fc:	08008625 	.word	0x08008625
 8008600:	0800862d 	.word	0x0800862d
 8008604:	08008643 	.word	0x08008643
 8008608:	08008633 	.word	0x08008633
 800860c:	08008643 	.word	0x08008643
 8008610:	08008643 	.word	0x08008643
 8008614:	08008643 	.word	0x08008643
 8008618:	0800863b 	.word	0x0800863b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800861c:	f7fc f87c 	bl	8004718 <HAL_RCC_GetPCLK1Freq>
 8008620:	61b8      	str	r0, [r7, #24]
        break;
 8008622:	e013      	b.n	800864c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008624:	f7fc f88c 	bl	8004740 <HAL_RCC_GetPCLK2Freq>
 8008628:	61b8      	str	r0, [r7, #24]
        break;
 800862a:	e00f      	b.n	800864c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800862c:	4b2f      	ldr	r3, [pc, #188]	@ (80086ec <UART_SetConfig+0x564>)
 800862e:	61bb      	str	r3, [r7, #24]
        break;
 8008630:	e00c      	b.n	800864c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008632:	f7fb ff9f 	bl	8004574 <HAL_RCC_GetSysClockFreq>
 8008636:	61b8      	str	r0, [r7, #24]
        break;
 8008638:	e008      	b.n	800864c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800863a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800863e:	61bb      	str	r3, [r7, #24]
        break;
 8008640:	e004      	b.n	800864c <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 8008642:	2300      	movs	r3, #0
 8008644:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008646:	2301      	movs	r3, #1
 8008648:	77bb      	strb	r3, [r7, #30]
        break;
 800864a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800864c:	69bb      	ldr	r3, [r7, #24]
 800864e:	2b00      	cmp	r3, #0
 8008650:	f000 8082 	beq.w	8008758 <UART_SetConfig+0x5d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008654:	69bb      	ldr	r3, [r7, #24]
 8008656:	005a      	lsls	r2, r3, #1
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	085b      	lsrs	r3, r3, #1
 800865e:	441a      	add	r2, r3
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	fbb2 f3f3 	udiv	r3, r2, r3
 8008668:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	2b0f      	cmp	r3, #15
 800866e:	d916      	bls.n	800869e <UART_SetConfig+0x516>
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008676:	d212      	bcs.n	800869e <UART_SetConfig+0x516>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	b29b      	uxth	r3, r3
 800867c:	f023 030f 	bic.w	r3, r3, #15
 8008680:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	085b      	lsrs	r3, r3, #1
 8008686:	b29b      	uxth	r3, r3
 8008688:	f003 0307 	and.w	r3, r3, #7
 800868c:	b29a      	uxth	r2, r3
 800868e:	89fb      	ldrh	r3, [r7, #14]
 8008690:	4313      	orrs	r3, r2
 8008692:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	89fa      	ldrh	r2, [r7, #14]
 800869a:	60da      	str	r2, [r3, #12]
 800869c:	e05c      	b.n	8008758 <UART_SetConfig+0x5d0>
      }
      else
      {
        ret = HAL_ERROR;
 800869e:	2301      	movs	r3, #1
 80086a0:	77bb      	strb	r3, [r7, #30]
 80086a2:	e059      	b.n	8008758 <UART_SetConfig+0x5d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80086a4:	7ffb      	ldrb	r3, [r7, #31]
 80086a6:	2b08      	cmp	r3, #8
 80086a8:	d835      	bhi.n	8008716 <UART_SetConfig+0x58e>
 80086aa:	a201      	add	r2, pc, #4	@ (adr r2, 80086b0 <UART_SetConfig+0x528>)
 80086ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086b0:	080086f1 	.word	0x080086f1
 80086b4:	080086f9 	.word	0x080086f9
 80086b8:	08008701 	.word	0x08008701
 80086bc:	08008717 	.word	0x08008717
 80086c0:	08008707 	.word	0x08008707
 80086c4:	08008717 	.word	0x08008717
 80086c8:	08008717 	.word	0x08008717
 80086cc:	08008717 	.word	0x08008717
 80086d0:	0800870f 	.word	0x0800870f
 80086d4:	40004c00 	.word	0x40004c00
 80086d8:	40023800 	.word	0x40023800
 80086dc:	40005000 	.word	0x40005000
 80086e0:	40011400 	.word	0x40011400
 80086e4:	40007800 	.word	0x40007800
 80086e8:	40007c00 	.word	0x40007c00
 80086ec:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086f0:	f7fc f812 	bl	8004718 <HAL_RCC_GetPCLK1Freq>
 80086f4:	61b8      	str	r0, [r7, #24]
        break;
 80086f6:	e013      	b.n	8008720 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80086f8:	f7fc f822 	bl	8004740 <HAL_RCC_GetPCLK2Freq>
 80086fc:	61b8      	str	r0, [r7, #24]
        break;
 80086fe:	e00f      	b.n	8008720 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008700:	4b1b      	ldr	r3, [pc, #108]	@ (8008770 <UART_SetConfig+0x5e8>)
 8008702:	61bb      	str	r3, [r7, #24]
        break;
 8008704:	e00c      	b.n	8008720 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008706:	f7fb ff35 	bl	8004574 <HAL_RCC_GetSysClockFreq>
 800870a:	61b8      	str	r0, [r7, #24]
        break;
 800870c:	e008      	b.n	8008720 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800870e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008712:	61bb      	str	r3, [r7, #24]
        break;
 8008714:	e004      	b.n	8008720 <UART_SetConfig+0x598>
      default:
        pclk = 0U;
 8008716:	2300      	movs	r3, #0
 8008718:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800871a:	2301      	movs	r3, #1
 800871c:	77bb      	strb	r3, [r7, #30]
        break;
 800871e:	bf00      	nop
    }

    if (pclk != 0U)
 8008720:	69bb      	ldr	r3, [r7, #24]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d018      	beq.n	8008758 <UART_SetConfig+0x5d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	085a      	lsrs	r2, r3, #1
 800872c:	69bb      	ldr	r3, [r7, #24]
 800872e:	441a      	add	r2, r3
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	fbb2 f3f3 	udiv	r3, r2, r3
 8008738:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	2b0f      	cmp	r3, #15
 800873e:	d909      	bls.n	8008754 <UART_SetConfig+0x5cc>
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008746:	d205      	bcs.n	8008754 <UART_SetConfig+0x5cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	b29a      	uxth	r2, r3
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	60da      	str	r2, [r3, #12]
 8008752:	e001      	b.n	8008758 <UART_SetConfig+0x5d0>
      }
      else
      {
        ret = HAL_ERROR;
 8008754:	2301      	movs	r3, #1
 8008756:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2200      	movs	r2, #0
 800875c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2200      	movs	r2, #0
 8008762:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008764:	7fbb      	ldrb	r3, [r7, #30]
}
 8008766:	4618      	mov	r0, r3
 8008768:	3720      	adds	r7, #32
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
 800876e:	bf00      	nop
 8008770:	00f42400 	.word	0x00f42400

08008774 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b082      	sub	sp, #8
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008780:	2bff      	cmp	r3, #255	@ 0xff
 8008782:	d904      	bls.n	800878e <UART_AdvFeatureConfig+0x1a>
 8008784:	f640 31e8 	movw	r1, #3048	@ 0xbe8
 8008788:	488e      	ldr	r0, [pc, #568]	@ (80089c4 <UART_AdvFeatureConfig+0x250>)
 800878a:	f7f9 fed3 	bl	8002534 <assert_failed>

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008792:	f003 0308 	and.w	r3, r3, #8
 8008796:	2b00      	cmp	r3, #0
 8008798:	d018      	beq.n	80087cc <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d009      	beq.n	80087b6 <UART_AdvFeatureConfig+0x42>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80087aa:	d004      	beq.n	80087b6 <UART_AdvFeatureConfig+0x42>
 80087ac:	f640 31ed 	movw	r1, #3053	@ 0xbed
 80087b0:	4884      	ldr	r0, [pc, #528]	@ (80089c4 <UART_AdvFeatureConfig+0x250>)
 80087b2:	f7f9 febf 	bl	8002534 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	685b      	ldr	r3, [r3, #4]
 80087bc:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	430a      	orrs	r2, r1
 80087ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087d0:	f003 0301 	and.w	r3, r3, #1
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d018      	beq.n	800880a <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d009      	beq.n	80087f4 <UART_AdvFeatureConfig+0x80>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80087e8:	d004      	beq.n	80087f4 <UART_AdvFeatureConfig+0x80>
 80087ea:	f640 31f4 	movw	r1, #3060	@ 0xbf4
 80087ee:	4875      	ldr	r0, [pc, #468]	@ (80089c4 <UART_AdvFeatureConfig+0x250>)
 80087f0:	f7f9 fea0 	bl	8002534 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	430a      	orrs	r2, r1
 8008808:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800880e:	f003 0302 	and.w	r3, r3, #2
 8008812:	2b00      	cmp	r3, #0
 8008814:	d018      	beq.n	8008848 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800881a:	2b00      	cmp	r3, #0
 800881c:	d009      	beq.n	8008832 <UART_AdvFeatureConfig+0xbe>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008822:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008826:	d004      	beq.n	8008832 <UART_AdvFeatureConfig+0xbe>
 8008828:	f640 31fb 	movw	r1, #3067	@ 0xbfb
 800882c:	4865      	ldr	r0, [pc, #404]	@ (80089c4 <UART_AdvFeatureConfig+0x250>)
 800882e:	f7f9 fe81 	bl	8002534 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	430a      	orrs	r2, r1
 8008846:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800884c:	f003 0304 	and.w	r3, r3, #4
 8008850:	2b00      	cmp	r3, #0
 8008852:	d018      	beq.n	8008886 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008858:	2b00      	cmp	r3, #0
 800885a:	d009      	beq.n	8008870 <UART_AdvFeatureConfig+0xfc>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008860:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008864:	d004      	beq.n	8008870 <UART_AdvFeatureConfig+0xfc>
 8008866:	f640 4102 	movw	r1, #3074	@ 0xc02
 800886a:	4856      	ldr	r0, [pc, #344]	@ (80089c4 <UART_AdvFeatureConfig+0x250>)
 800886c:	f7f9 fe62 	bl	8002534 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	685b      	ldr	r3, [r3, #4]
 8008876:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	430a      	orrs	r2, r1
 8008884:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800888a:	f003 0310 	and.w	r3, r3, #16
 800888e:	2b00      	cmp	r3, #0
 8008890:	d018      	beq.n	80088c4 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008896:	2b00      	cmp	r3, #0
 8008898:	d009      	beq.n	80088ae <UART_AdvFeatureConfig+0x13a>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800889e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088a2:	d004      	beq.n	80088ae <UART_AdvFeatureConfig+0x13a>
 80088a4:	f640 4109 	movw	r1, #3081	@ 0xc09
 80088a8:	4846      	ldr	r0, [pc, #280]	@ (80089c4 <UART_AdvFeatureConfig+0x250>)
 80088aa:	f7f9 fe43 	bl	8002534 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	689b      	ldr	r3, [r3, #8]
 80088b4:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	430a      	orrs	r2, r1
 80088c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088c8:	f003 0320 	and.w	r3, r3, #32
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d018      	beq.n	8008902 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d009      	beq.n	80088ec <UART_AdvFeatureConfig+0x178>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80088e0:	d004      	beq.n	80088ec <UART_AdvFeatureConfig+0x178>
 80088e2:	f44f 6141 	mov.w	r1, #3088	@ 0xc10
 80088e6:	4837      	ldr	r0, [pc, #220]	@ (80089c4 <UART_AdvFeatureConfig+0x250>)
 80088e8:	f7f9 fe24 	bl	8002534 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	689b      	ldr	r3, [r3, #8]
 80088f2:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	430a      	orrs	r2, r1
 8008900:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008906:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800890a:	2b00      	cmp	r3, #0
 800890c:	d064      	beq.n	80089d8 <UART_AdvFeatureConfig+0x264>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4a2d      	ldr	r2, [pc, #180]	@ (80089c8 <UART_AdvFeatureConfig+0x254>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d013      	beq.n	8008940 <UART_AdvFeatureConfig+0x1cc>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4a2b      	ldr	r2, [pc, #172]	@ (80089cc <UART_AdvFeatureConfig+0x258>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d00e      	beq.n	8008940 <UART_AdvFeatureConfig+0x1cc>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	4a2a      	ldr	r2, [pc, #168]	@ (80089d0 <UART_AdvFeatureConfig+0x25c>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d009      	beq.n	8008940 <UART_AdvFeatureConfig+0x1cc>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a28      	ldr	r2, [pc, #160]	@ (80089d4 <UART_AdvFeatureConfig+0x260>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d004      	beq.n	8008940 <UART_AdvFeatureConfig+0x1cc>
 8008936:	f640 4117 	movw	r1, #3095	@ 0xc17
 800893a:	4822      	ldr	r0, [pc, #136]	@ (80089c4 <UART_AdvFeatureConfig+0x250>)
 800893c:	f7f9 fdfa 	bl	8002534 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008944:	2b00      	cmp	r3, #0
 8008946:	d009      	beq.n	800895c <UART_AdvFeatureConfig+0x1e8>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800894c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008950:	d004      	beq.n	800895c <UART_AdvFeatureConfig+0x1e8>
 8008952:	f640 4118 	movw	r1, #3096	@ 0xc18
 8008956:	481b      	ldr	r0, [pc, #108]	@ (80089c4 <UART_AdvFeatureConfig+0x250>)
 8008958:	f7f9 fdec 	bl	8002534 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	430a      	orrs	r2, r1
 8008970:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008976:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800897a:	d12d      	bne.n	80089d8 <UART_AdvFeatureConfig+0x264>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008980:	2b00      	cmp	r3, #0
 8008982:	d013      	beq.n	80089ac <UART_AdvFeatureConfig+0x238>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008988:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800898c:	d00e      	beq.n	80089ac <UART_AdvFeatureConfig+0x238>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008992:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008996:	d009      	beq.n	80089ac <UART_AdvFeatureConfig+0x238>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800899c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80089a0:	d004      	beq.n	80089ac <UART_AdvFeatureConfig+0x238>
 80089a2:	f640 411d 	movw	r1, #3101	@ 0xc1d
 80089a6:	4807      	ldr	r0, [pc, #28]	@ (80089c4 <UART_AdvFeatureConfig+0x250>)
 80089a8:	f7f9 fdc4 	bl	8002534 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	430a      	orrs	r2, r1
 80089c0:	605a      	str	r2, [r3, #4]
 80089c2:	e009      	b.n	80089d8 <UART_AdvFeatureConfig+0x264>
 80089c4:	08010a88 	.word	0x08010a88
 80089c8:	40011000 	.word	0x40011000
 80089cc:	40004400 	.word	0x40004400
 80089d0:	40004800 	.word	0x40004800
 80089d4:	40011400 	.word	0x40011400
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d018      	beq.n	8008a16 <UART_AdvFeatureConfig+0x2a2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d009      	beq.n	8008a00 <UART_AdvFeatureConfig+0x28c>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80089f0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80089f4:	d004      	beq.n	8008a00 <UART_AdvFeatureConfig+0x28c>
 80089f6:	f640 4125 	movw	r1, #3109	@ 0xc25
 80089fa:	4809      	ldr	r0, [pc, #36]	@ (8008a20 <UART_AdvFeatureConfig+0x2ac>)
 80089fc:	f7f9 fd9a 	bl	8002534 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	430a      	orrs	r2, r1
 8008a14:	605a      	str	r2, [r3, #4]
  }
}
 8008a16:	bf00      	nop
 8008a18:	3708      	adds	r7, #8
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}
 8008a1e:	bf00      	nop
 8008a20:	08010a88 	.word	0x08010a88

08008a24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b08c      	sub	sp, #48	@ 0x30
 8008a28:	af02      	add	r7, sp, #8
 8008a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008a34:	f7fa fa04 	bl	8002e40 <HAL_GetTick>
 8008a38:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f003 0308 	and.w	r3, r3, #8
 8008a44:	2b08      	cmp	r3, #8
 8008a46:	d12e      	bne.n	8008aa6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a48:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008a4c:	9300      	str	r3, [sp, #0]
 8008a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a50:	2200      	movs	r2, #0
 8008a52:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 f83b 	bl	8008ad2 <UART_WaitOnFlagUntilTimeout>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d021      	beq.n	8008aa6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	e853 3f00 	ldrex	r3, [r3]
 8008a6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a76:	623b      	str	r3, [r7, #32]
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	461a      	mov	r2, r3
 8008a7e:	6a3b      	ldr	r3, [r7, #32]
 8008a80:	61fb      	str	r3, [r7, #28]
 8008a82:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a84:	69b9      	ldr	r1, [r7, #24]
 8008a86:	69fa      	ldr	r2, [r7, #28]
 8008a88:	e841 2300 	strex	r3, r2, [r1]
 8008a8c:	617b      	str	r3, [r7, #20]
   return(result);
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d1e6      	bne.n	8008a62 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2220      	movs	r2, #32
 8008a98:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008aa2:	2303      	movs	r3, #3
 8008aa4:	e011      	b.n	8008aca <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2220      	movs	r2, #32
 8008aaa:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2220      	movs	r2, #32
 8008ab0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2200      	movs	r2, #0
 8008abe:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8008ac8:	2300      	movs	r3, #0
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	3728      	adds	r7, #40	@ 0x28
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}

08008ad2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008ad2:	b580      	push	{r7, lr}
 8008ad4:	b084      	sub	sp, #16
 8008ad6:	af00      	add	r7, sp, #0
 8008ad8:	60f8      	str	r0, [r7, #12]
 8008ada:	60b9      	str	r1, [r7, #8]
 8008adc:	603b      	str	r3, [r7, #0]
 8008ade:	4613      	mov	r3, r2
 8008ae0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ae2:	e04f      	b.n	8008b84 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ae4:	69bb      	ldr	r3, [r7, #24]
 8008ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aea:	d04b      	beq.n	8008b84 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008aec:	f7fa f9a8 	bl	8002e40 <HAL_GetTick>
 8008af0:	4602      	mov	r2, r0
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	1ad3      	subs	r3, r2, r3
 8008af6:	69ba      	ldr	r2, [r7, #24]
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d302      	bcc.n	8008b02 <UART_WaitOnFlagUntilTimeout+0x30>
 8008afc:	69bb      	ldr	r3, [r7, #24]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d101      	bne.n	8008b06 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008b02:	2303      	movs	r3, #3
 8008b04:	e04e      	b.n	8008ba4 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f003 0304 	and.w	r3, r3, #4
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d037      	beq.n	8008b84 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	2b80      	cmp	r3, #128	@ 0x80
 8008b18:	d034      	beq.n	8008b84 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	2b40      	cmp	r3, #64	@ 0x40
 8008b1e:	d031      	beq.n	8008b84 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	69db      	ldr	r3, [r3, #28]
 8008b26:	f003 0308 	and.w	r3, r3, #8
 8008b2a:	2b08      	cmp	r3, #8
 8008b2c:	d110      	bne.n	8008b50 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	2208      	movs	r2, #8
 8008b34:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008b36:	68f8      	ldr	r0, [r7, #12]
 8008b38:	f000 f838 	bl	8008bac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2208      	movs	r2, #8
 8008b40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	2200      	movs	r2, #0
 8008b48:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	e029      	b.n	8008ba4 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	69db      	ldr	r3, [r3, #28]
 8008b56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008b5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008b5e:	d111      	bne.n	8008b84 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008b68:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008b6a:	68f8      	ldr	r0, [r7, #12]
 8008b6c:	f000 f81e 	bl	8008bac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2220      	movs	r2, #32
 8008b74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8008b80:	2303      	movs	r3, #3
 8008b82:	e00f      	b.n	8008ba4 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	69da      	ldr	r2, [r3, #28]
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	4013      	ands	r3, r2
 8008b8e:	68ba      	ldr	r2, [r7, #8]
 8008b90:	429a      	cmp	r2, r3
 8008b92:	bf0c      	ite	eq
 8008b94:	2301      	moveq	r3, #1
 8008b96:	2300      	movne	r3, #0
 8008b98:	b2db      	uxtb	r3, r3
 8008b9a:	461a      	mov	r2, r3
 8008b9c:	79fb      	ldrb	r3, [r7, #7]
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	d0a0      	beq.n	8008ae4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008ba2:	2300      	movs	r3, #0
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3710      	adds	r7, #16
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}

08008bac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b095      	sub	sp, #84	@ 0x54
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bbc:	e853 3f00 	ldrex	r3, [r3]
 8008bc0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bc4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008bc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	461a      	mov	r2, r3
 8008bd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008bd2:	643b      	str	r3, [r7, #64]	@ 0x40
 8008bd4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bd6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008bd8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008bda:	e841 2300 	strex	r3, r2, [r1]
 8008bde:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d1e6      	bne.n	8008bb4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	3308      	adds	r3, #8
 8008bec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bee:	6a3b      	ldr	r3, [r7, #32]
 8008bf0:	e853 3f00 	ldrex	r3, [r3]
 8008bf4:	61fb      	str	r3, [r7, #28]
   return(result);
 8008bf6:	69fb      	ldr	r3, [r7, #28]
 8008bf8:	f023 0301 	bic.w	r3, r3, #1
 8008bfc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	3308      	adds	r3, #8
 8008c04:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008c06:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008c08:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c0a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008c0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c0e:	e841 2300 	strex	r3, r2, [r1]
 8008c12:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d1e5      	bne.n	8008be6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c1e:	2b01      	cmp	r3, #1
 8008c20:	d118      	bne.n	8008c54 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	e853 3f00 	ldrex	r3, [r3]
 8008c2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	f023 0310 	bic.w	r3, r3, #16
 8008c36:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	461a      	mov	r2, r3
 8008c3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c40:	61bb      	str	r3, [r7, #24]
 8008c42:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c44:	6979      	ldr	r1, [r7, #20]
 8008c46:	69ba      	ldr	r2, [r7, #24]
 8008c48:	e841 2300 	strex	r3, r2, [r1]
 8008c4c:	613b      	str	r3, [r7, #16]
   return(result);
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d1e6      	bne.n	8008c22 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2220      	movs	r2, #32
 8008c58:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2200      	movs	r2, #0
 8008c66:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008c68:	bf00      	nop
 8008c6a:	3754      	adds	r7, #84	@ 0x54
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr

08008c74 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008c74:	b480      	push	{r7}
 8008c76:	b083      	sub	sp, #12
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f103 0208 	add.w	r2, r3, #8
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f04f 32ff 	mov.w	r2, #4294967295
 8008c8c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f103 0208 	add.w	r2, r3, #8
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f103 0208 	add.w	r2, r3, #8
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 8008ca8:	bf00      	nop
 8008caa:	370c      	adds	r7, #12
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr

08008cb4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b083      	sub	sp, #12
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 8008cc2:	bf00      	nop
 8008cc4:	370c      	adds	r7, #12
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ccc:	4770      	bx	lr

08008cce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8008cce:	b480      	push	{r7}
 8008cd0:	b085      	sub	sp, #20
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	6078      	str	r0, [r7, #4]
 8008cd6:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	68fa      	ldr	r2, [r7, #12]
 8008ce2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	689a      	ldr	r2, [r3, #8]
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	689b      	ldr	r3, [r3, #8]
 8008cf0:	683a      	ldr	r2, [r7, #0]
 8008cf2:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	683a      	ldr	r2, [r7, #0]
 8008cf8:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	687a      	ldr	r2, [r7, #4]
 8008cfe:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	1c5a      	adds	r2, r3, #1
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsertEnd();
}
 8008d0a:	bf00      	nop
 8008d0c:	3714      	adds	r7, #20
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d14:	4770      	bx	lr

08008d16 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8008d16:	b480      	push	{r7}
 8008d18:	b085      	sub	sp, #20
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	6078      	str	r0, [r7, #4]
 8008d1e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d2c:	d103      	bne.n	8008d36 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	691b      	ldr	r3, [r3, #16]
 8008d32:	60fb      	str	r3, [r7, #12]
 8008d34:	e00c      	b.n	8008d50 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	3308      	adds	r3, #8
 8008d3a:	60fb      	str	r3, [r7, #12]
 8008d3c:	e002      	b.n	8008d44 <vListInsert+0x2e>
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	685b      	ldr	r3, [r3, #4]
 8008d42:	60fb      	str	r3, [r7, #12]
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	68ba      	ldr	r2, [r7, #8]
 8008d4c:	429a      	cmp	r2, r3
 8008d4e:	d2f6      	bcs.n	8008d3e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	685a      	ldr	r2, [r3, #4]
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	683a      	ldr	r2, [r7, #0]
 8008d5e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	68fa      	ldr	r2, [r7, #12]
 8008d64:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	683a      	ldr	r2, [r7, #0]
 8008d6a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	687a      	ldr	r2, [r7, #4]
 8008d70:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	1c5a      	adds	r2, r3, #1
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 8008d7c:	bf00      	nop
 8008d7e:	3714      	adds	r7, #20
 8008d80:	46bd      	mov	sp, r7
 8008d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d86:	4770      	bx	lr

08008d88 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b085      	sub	sp, #20
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	691b      	ldr	r3, [r3, #16]
 8008d94:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	685b      	ldr	r3, [r3, #4]
 8008d9a:	687a      	ldr	r2, [r7, #4]
 8008d9c:	6892      	ldr	r2, [r2, #8]
 8008d9e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	689b      	ldr	r3, [r3, #8]
 8008da4:	687a      	ldr	r2, [r7, #4]
 8008da6:	6852      	ldr	r2, [r2, #4]
 8008da8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	687a      	ldr	r2, [r7, #4]
 8008db0:	429a      	cmp	r2, r3
 8008db2:	d103      	bne.n	8008dbc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	689a      	ldr	r2, [r3, #8]
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	1e5a      	subs	r2, r3, #1
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3714      	adds	r7, #20
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dda:	4770      	bx	lr

08008ddc <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b086      	sub	sp, #24
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8008de6:	2301      	movs	r3, #1
 8008de8:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d110      	bne.n	8008e16 <xQueueGenericReset+0x3a>
    __asm volatile
 8008df4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008df8:	b672      	cpsid	i
 8008dfa:	f383 8811 	msr	BASEPRI, r3
 8008dfe:	f3bf 8f6f 	isb	sy
 8008e02:	f3bf 8f4f 	dsb	sy
 8008e06:	b662      	cpsie	i
 8008e08:	60fb      	str	r3, [r7, #12]
}
 8008e0a:	bf00      	nop
 8008e0c:	f240 1137 	movw	r1, #311	@ 0x137
 8008e10:	483f      	ldr	r0, [pc, #252]	@ (8008f10 <xQueueGenericReset+0x134>)
 8008e12:	f7f9 fad9 	bl	80023c8 <vAssertCalled>

    if( ( pxQueue != NULL ) &&
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d05d      	beq.n	8008ed8 <xQueueGenericReset+0xfc>
        ( pxQueue->uxLength >= 1U ) &&
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d059      	beq.n	8008ed8 <xQueueGenericReset+0xfc>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e2c:	2100      	movs	r1, #0
 8008e2e:	fba3 2302 	umull	r2, r3, r3, r2
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d000      	beq.n	8008e38 <xQueueGenericReset+0x5c>
 8008e36:	2101      	movs	r1, #1
 8008e38:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d14c      	bne.n	8008ed8 <xQueueGenericReset+0xfc>
    {
        taskENTER_CRITICAL();
 8008e3e:	f002 fe8f 	bl	800bb60 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	681a      	ldr	r2, [r3, #0]
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e4a:	6939      	ldr	r1, [r7, #16]
 8008e4c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008e4e:	fb01 f303 	mul.w	r3, r1, r3
 8008e52:	441a      	add	r2, r3
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	681a      	ldr	r2, [r3, #0]
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8008e66:	693b      	ldr	r3, [r7, #16]
 8008e68:	681a      	ldr	r2, [r3, #0]
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e6e:	3b01      	subs	r3, #1
 8008e70:	6939      	ldr	r1, [r7, #16]
 8008e72:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008e74:	fb01 f303 	mul.w	r3, r1, r3
 8008e78:	441a      	add	r2, r3
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	22ff      	movs	r2, #255	@ 0xff
 8008e82:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8008e86:	693b      	ldr	r3, [r7, #16]
 8008e88:	22ff      	movs	r2, #255	@ 0xff
 8008e8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d114      	bne.n	8008ebe <xQueueGenericReset+0xe2>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	691b      	ldr	r3, [r3, #16]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d01a      	beq.n	8008ed2 <xQueueGenericReset+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e9c:	693b      	ldr	r3, [r7, #16]
 8008e9e:	3310      	adds	r3, #16
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f001 fc85 	bl	800a7b0 <xTaskRemoveFromEventList>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d012      	beq.n	8008ed2 <xQueueGenericReset+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8008eac:	4b19      	ldr	r3, [pc, #100]	@ (8008f14 <xQueueGenericReset+0x138>)
 8008eae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008eb2:	601a      	str	r2, [r3, #0]
 8008eb4:	f3bf 8f4f 	dsb	sy
 8008eb8:	f3bf 8f6f 	isb	sy
 8008ebc:	e009      	b.n	8008ed2 <xQueueGenericReset+0xf6>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	3310      	adds	r3, #16
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f7ff fed6 	bl	8008c74 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	3324      	adds	r3, #36	@ 0x24
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f7ff fed1 	bl	8008c74 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8008ed2:	f002 fe7d 	bl	800bbd0 <vPortExitCritical>
 8008ed6:	e001      	b.n	8008edc <xQueueGenericReset+0x100>
    }
    else
    {
        xReturn = pdFAIL;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d110      	bne.n	8008f04 <xQueueGenericReset+0x128>
    __asm volatile
 8008ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ee6:	b672      	cpsid	i
 8008ee8:	f383 8811 	msr	BASEPRI, r3
 8008eec:	f3bf 8f6f 	isb	sy
 8008ef0:	f3bf 8f4f 	dsb	sy
 8008ef4:	b662      	cpsie	i
 8008ef6:	60bb      	str	r3, [r7, #8]
}
 8008ef8:	bf00      	nop
 8008efa:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 8008efe:	4804      	ldr	r0, [pc, #16]	@ (8008f10 <xQueueGenericReset+0x134>)
 8008f00:	f7f9 fa62 	bl	80023c8 <vAssertCalled>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 8008f04:	697b      	ldr	r3, [r7, #20]
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3718      	adds	r7, #24
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}
 8008f0e:	bf00      	nop
 8008f10:	08010ac4 	.word	0x08010ac4
 8008f14:	e000ed04 	.word	0xe000ed04

08008f18 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b08a      	sub	sp, #40	@ 0x28
 8008f1c:	af02      	add	r7, sp, #8
 8008f1e:	60f8      	str	r0, [r7, #12]
 8008f20:	60b9      	str	r1, [r7, #8]
 8008f22:	4613      	mov	r3, r2
 8008f24:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8008f26:	2300      	movs	r3, #0
 8008f28:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d02e      	beq.n	8008f8e <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8008f30:	2100      	movs	r1, #0
 8008f32:	68ba      	ldr	r2, [r7, #8]
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	fba3 2302 	umull	r2, r3, r3, r2
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d000      	beq.n	8008f40 <xQueueGenericCreate+0x28>
 8008f3e:	2101      	movs	r1, #1
 8008f40:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d123      	bne.n	8008f8e <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	68ba      	ldr	r2, [r7, #8]
 8008f4a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8008f4e:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8008f52:	d81c      	bhi.n	8008f8e <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	68ba      	ldr	r2, [r7, #8]
 8008f58:	fb02 f303 	mul.w	r3, r2, r3
 8008f5c:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8008f5e:	69bb      	ldr	r3, [r7, #24]
 8008f60:	3350      	adds	r3, #80	@ 0x50
 8008f62:	4618      	mov	r0, r3
 8008f64:	f7f9 fd50 	bl	8002a08 <pvPortMalloc>
 8008f68:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8008f6a:	69fb      	ldr	r3, [r7, #28]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d022      	beq.n	8008fb6 <xQueueGenericCreate+0x9e>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008f70:	69fb      	ldr	r3, [r7, #28]
 8008f72:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	3350      	adds	r3, #80	@ 0x50
 8008f78:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008f7a:	79fa      	ldrb	r2, [r7, #7]
 8008f7c:	69fb      	ldr	r3, [r7, #28]
 8008f7e:	9300      	str	r3, [sp, #0]
 8008f80:	4613      	mov	r3, r2
 8008f82:	697a      	ldr	r2, [r7, #20]
 8008f84:	68b9      	ldr	r1, [r7, #8]
 8008f86:	68f8      	ldr	r0, [r7, #12]
 8008f88:	f000 f81c 	bl	8008fc4 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8008f8c:	e013      	b.n	8008fb6 <xQueueGenericCreate+0x9e>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8008f8e:	69fb      	ldr	r3, [r7, #28]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d110      	bne.n	8008fb6 <xQueueGenericCreate+0x9e>
    __asm volatile
 8008f94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f98:	b672      	cpsid	i
 8008f9a:	f383 8811 	msr	BASEPRI, r3
 8008f9e:	f3bf 8f6f 	isb	sy
 8008fa2:	f3bf 8f4f 	dsb	sy
 8008fa6:	b662      	cpsie	i
 8008fa8:	613b      	str	r3, [r7, #16]
}
 8008faa:	bf00      	nop
 8008fac:	f240 212a 	movw	r1, #554	@ 0x22a
 8008fb0:	4803      	ldr	r0, [pc, #12]	@ (8008fc0 <xQueueGenericCreate+0xa8>)
 8008fb2:	f7f9 fa09 	bl	80023c8 <vAssertCalled>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
 8008fb6:	69fb      	ldr	r3, [r7, #28]
    }
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3720      	adds	r7, #32
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}
 8008fc0:	08010ac4 	.word	0x08010ac4

08008fc4 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b084      	sub	sp, #16
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	60f8      	str	r0, [r7, #12]
 8008fcc:	60b9      	str	r1, [r7, #8]
 8008fce:	607a      	str	r2, [r7, #4]
 8008fd0:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d103      	bne.n	8008fe0 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008fd8:	69bb      	ldr	r3, [r7, #24]
 8008fda:	69ba      	ldr	r2, [r7, #24]
 8008fdc:	601a      	str	r2, [r3, #0]
 8008fde:	e002      	b.n	8008fe6 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008fe0:	69bb      	ldr	r3, [r7, #24]
 8008fe2:	687a      	ldr	r2, [r7, #4]
 8008fe4:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8008fe6:	69bb      	ldr	r3, [r7, #24]
 8008fe8:	68fa      	ldr	r2, [r7, #12]
 8008fea:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8008fec:	69bb      	ldr	r3, [r7, #24]
 8008fee:	68ba      	ldr	r2, [r7, #8]
 8008ff0:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008ff2:	2101      	movs	r1, #1
 8008ff4:	69b8      	ldr	r0, [r7, #24]
 8008ff6:	f7ff fef1 	bl	8008ddc <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8008ffa:	69bb      	ldr	r3, [r7, #24]
 8008ffc:	78fa      	ldrb	r2, [r7, #3]
 8008ffe:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8009002:	bf00      	nop
 8009004:	3710      	adds	r7, #16
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}

0800900a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 800900a:	b580      	push	{r7, lr}
 800900c:	b082      	sub	sp, #8
 800900e:	af00      	add	r7, sp, #0
 8009010:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d00e      	beq.n	8009036 <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2200      	movs	r2, #0
 800901c:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2200      	movs	r2, #0
 8009022:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2200      	movs	r2, #0
 8009028:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800902a:	2300      	movs	r3, #0
 800902c:	2200      	movs	r2, #0
 800902e:	2100      	movs	r1, #0
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f000 f897 	bl	8009164 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 8009036:	bf00      	nop
 8009038:	3708      	adds	r7, #8
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}

0800903e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 800903e:	b580      	push	{r7, lr}
 8009040:	b086      	sub	sp, #24
 8009042:	af00      	add	r7, sp, #0
 8009044:	4603      	mov	r3, r0
 8009046:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009048:	2301      	movs	r3, #1
 800904a:	617b      	str	r3, [r7, #20]
 800904c:	2300      	movs	r3, #0
 800904e:	613b      	str	r3, [r7, #16]

        traceENTER_xQueueCreateMutex( ucQueueType );

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009050:	79fb      	ldrb	r3, [r7, #7]
 8009052:	461a      	mov	r2, r3
 8009054:	6939      	ldr	r1, [r7, #16]
 8009056:	6978      	ldr	r0, [r7, #20]
 8009058:	f7ff ff5e 	bl	8008f18 <xQueueGenericCreate>
 800905c:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800905e:	68f8      	ldr	r0, [r7, #12]
 8009060:	f7ff ffd3 	bl	800900a <prvInitialiseMutex>

        traceRETURN_xQueueCreateMutex( xNewQueue );

        return xNewQueue;
 8009064:	68fb      	ldr	r3, [r7, #12]
    }
 8009066:	4618      	mov	r0, r3
 8009068:	3718      	adds	r7, #24
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}
	...

08009070 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

    BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
    {
 8009070:	b590      	push	{r4, r7, lr}
 8009072:	b087      	sub	sp, #28
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	613b      	str	r3, [r7, #16]

        traceENTER_xQueueGiveMutexRecursive( xMutex );

        configASSERT( pxMutex );
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d110      	bne.n	80090a4 <xQueueGiveMutexRecursive+0x34>
    __asm volatile
 8009082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009086:	b672      	cpsid	i
 8009088:	f383 8811 	msr	BASEPRI, r3
 800908c:	f3bf 8f6f 	isb	sy
 8009090:	f3bf 8f4f 	dsb	sy
 8009094:	b662      	cpsie	i
 8009096:	60fb      	str	r3, [r7, #12]
}
 8009098:	bf00      	nop
 800909a:	f240 21fb 	movw	r1, #763	@ 0x2fb
 800909e:	4811      	ldr	r0, [pc, #68]	@ (80090e4 <xQueueGiveMutexRecursive+0x74>)
 80090a0:	f7f9 f992 	bl	80023c8 <vAssertCalled>
         * change outside of this task.  If this task does not hold the mutex then
         * pxMutexHolder can never coincidentally equal the tasks handle, and as
         * this is the only condition we are interested in it does not matter if
         * pxMutexHolder is accessed simultaneously by another task.  Therefore no
         * mutual exclusion is required to test the pxMutexHolder variable. */
        if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80090a4:	693b      	ldr	r3, [r7, #16]
 80090a6:	689c      	ldr	r4, [r3, #8]
 80090a8:	f001 fdae 	bl	800ac08 <xTaskGetCurrentTaskHandle>
 80090ac:	4603      	mov	r3, r0
 80090ae:	429c      	cmp	r4, r3
 80090b0:	d111      	bne.n	80090d6 <xQueueGiveMutexRecursive+0x66>
            /* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
             * the task handle, therefore no underflow check is required.  Also,
             * uxRecursiveCallCount is only modified by the mutex holder, and as
             * there can only be one, no mutual exclusion is required to modify the
             * uxRecursiveCallCount member. */
            ( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	68db      	ldr	r3, [r3, #12]
 80090b6:	1e5a      	subs	r2, r3, #1
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	60da      	str	r2, [r3, #12]

            /* Has the recursive call count unwound to 0? */
            if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	68db      	ldr	r3, [r3, #12]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d105      	bne.n	80090d0 <xQueueGiveMutexRecursive+0x60>
            {
                /* Return the mutex.  This will automatically unblock any other
                 * task that might be waiting to access the mutex. */
                ( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80090c4:	2300      	movs	r3, #0
 80090c6:	2200      	movs	r2, #0
 80090c8:	2100      	movs	r1, #0
 80090ca:	6938      	ldr	r0, [r7, #16]
 80090cc:	f000 f84a 	bl	8009164 <xQueueGenericSend>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            xReturn = pdPASS;
 80090d0:	2301      	movs	r3, #1
 80090d2:	617b      	str	r3, [r7, #20]
 80090d4:	e001      	b.n	80090da <xQueueGiveMutexRecursive+0x6a>
        }
        else
        {
            /* The mutex cannot be given because the calling task is not the
             * holder. */
            xReturn = pdFAIL;
 80090d6:	2300      	movs	r3, #0
 80090d8:	617b      	str	r3, [r7, #20]
            traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
        }

        traceRETURN_xQueueGiveMutexRecursive( xReturn );

        return xReturn;
 80090da:	697b      	ldr	r3, [r7, #20]
    }
 80090dc:	4618      	mov	r0, r3
 80090de:	371c      	adds	r7, #28
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd90      	pop	{r4, r7, pc}
 80090e4:	08010ac4 	.word	0x08010ac4

080090e8 <xQueueTakeMutexRecursive>:

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

    BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex,
                                         TickType_t xTicksToWait )
    {
 80090e8:	b590      	push	{r4, r7, lr}
 80090ea:	b087      	sub	sp, #28
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn;
        Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	613b      	str	r3, [r7, #16]

        traceENTER_xQueueTakeMutexRecursive( xMutex, xTicksToWait );

        configASSERT( pxMutex );
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d110      	bne.n	800911e <xQueueTakeMutexRecursive+0x36>
    __asm volatile
 80090fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009100:	b672      	cpsid	i
 8009102:	f383 8811 	msr	BASEPRI, r3
 8009106:	f3bf 8f6f 	isb	sy
 800910a:	f3bf 8f4f 	dsb	sy
 800910e:	b662      	cpsie	i
 8009110:	60fb      	str	r3, [r7, #12]
}
 8009112:	bf00      	nop
 8009114:	f240 3137 	movw	r1, #823	@ 0x337
 8009118:	4811      	ldr	r0, [pc, #68]	@ (8009160 <xQueueTakeMutexRecursive+0x78>)
 800911a:	f7f9 f955 	bl	80023c8 <vAssertCalled>
        /* Comments regarding mutual exclusion as per those within
         * xQueueGiveMutexRecursive(). */

        traceTAKE_MUTEX_RECURSIVE( pxMutex );

        if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800911e:	693b      	ldr	r3, [r7, #16]
 8009120:	689c      	ldr	r4, [r3, #8]
 8009122:	f001 fd71 	bl	800ac08 <xTaskGetCurrentTaskHandle>
 8009126:	4603      	mov	r3, r0
 8009128:	429c      	cmp	r4, r3
 800912a:	d107      	bne.n	800913c <xQueueTakeMutexRecursive+0x54>
        {
            ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	68db      	ldr	r3, [r3, #12]
 8009130:	1c5a      	adds	r2, r3, #1
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	60da      	str	r2, [r3, #12]
            xReturn = pdPASS;
 8009136:	2301      	movs	r3, #1
 8009138:	617b      	str	r3, [r7, #20]
 800913a:	e00c      	b.n	8009156 <xQueueTakeMutexRecursive+0x6e>
        }
        else
        {
            xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800913c:	6839      	ldr	r1, [r7, #0]
 800913e:	6938      	ldr	r0, [r7, #16]
 8009140:	f000 fa1c 	bl	800957c <xQueueSemaphoreTake>
 8009144:	6178      	str	r0, [r7, #20]

            /* pdPASS will only be returned if the mutex was successfully
             * obtained.  The calling task may have entered the Blocked state
             * before reaching here. */
            if( xReturn != pdFAIL )
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d004      	beq.n	8009156 <xQueueTakeMutexRecursive+0x6e>
            {
                ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	68db      	ldr	r3, [r3, #12]
 8009150:	1c5a      	adds	r2, r3, #1
 8009152:	693b      	ldr	r3, [r7, #16]
 8009154:	60da      	str	r2, [r3, #12]
            }
        }

        traceRETURN_xQueueTakeMutexRecursive( xReturn );

        return xReturn;
 8009156:	697b      	ldr	r3, [r7, #20]
    }
 8009158:	4618      	mov	r0, r3
 800915a:	371c      	adds	r7, #28
 800915c:	46bd      	mov	sp, r7
 800915e:	bd90      	pop	{r4, r7, pc}
 8009160:	08010ac4 	.word	0x08010ac4

08009164 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b08e      	sub	sp, #56	@ 0x38
 8009168:	af00      	add	r7, sp, #0
 800916a:	60f8      	str	r0, [r7, #12]
 800916c:	60b9      	str	r1, [r7, #8]
 800916e:	607a      	str	r2, [r7, #4]
 8009170:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009172:	2300      	movs	r3, #0
 8009174:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	633b      	str	r3, [r7, #48]	@ 0x30

    traceENTER_xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );

    configASSERT( pxQueue );
 800917a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800917c:	2b00      	cmp	r3, #0
 800917e:	d110      	bne.n	80091a2 <xQueueGenericSend+0x3e>
    __asm volatile
 8009180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009184:	b672      	cpsid	i
 8009186:	f383 8811 	msr	BASEPRI, r3
 800918a:	f3bf 8f6f 	isb	sy
 800918e:	f3bf 8f4f 	dsb	sy
 8009192:	b662      	cpsie	i
 8009194:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009196:	bf00      	nop
 8009198:	f240 31b6 	movw	r1, #950	@ 0x3b6
 800919c:	487b      	ldr	r0, [pc, #492]	@ (800938c <xQueueGenericSend+0x228>)
 800919e:	f7f9 f913 	bl	80023c8 <vAssertCalled>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d103      	bne.n	80091b0 <xQueueGenericSend+0x4c>
 80091a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d101      	bne.n	80091b4 <xQueueGenericSend+0x50>
 80091b0:	2301      	movs	r3, #1
 80091b2:	e000      	b.n	80091b6 <xQueueGenericSend+0x52>
 80091b4:	2300      	movs	r3, #0
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d110      	bne.n	80091dc <xQueueGenericSend+0x78>
    __asm volatile
 80091ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091be:	b672      	cpsid	i
 80091c0:	f383 8811 	msr	BASEPRI, r3
 80091c4:	f3bf 8f6f 	isb	sy
 80091c8:	f3bf 8f4f 	dsb	sy
 80091cc:	b662      	cpsie	i
 80091ce:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80091d0:	bf00      	nop
 80091d2:	f240 31b7 	movw	r1, #951	@ 0x3b7
 80091d6:	486d      	ldr	r0, [pc, #436]	@ (800938c <xQueueGenericSend+0x228>)
 80091d8:	f7f9 f8f6 	bl	80023c8 <vAssertCalled>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	2b02      	cmp	r3, #2
 80091e0:	d103      	bne.n	80091ea <xQueueGenericSend+0x86>
 80091e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091e6:	2b01      	cmp	r3, #1
 80091e8:	d101      	bne.n	80091ee <xQueueGenericSend+0x8a>
 80091ea:	2301      	movs	r3, #1
 80091ec:	e000      	b.n	80091f0 <xQueueGenericSend+0x8c>
 80091ee:	2300      	movs	r3, #0
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d110      	bne.n	8009216 <xQueueGenericSend+0xb2>
    __asm volatile
 80091f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091f8:	b672      	cpsid	i
 80091fa:	f383 8811 	msr	BASEPRI, r3
 80091fe:	f3bf 8f6f 	isb	sy
 8009202:	f3bf 8f4f 	dsb	sy
 8009206:	b662      	cpsie	i
 8009208:	623b      	str	r3, [r7, #32]
}
 800920a:	bf00      	nop
 800920c:	f44f 716e 	mov.w	r1, #952	@ 0x3b8
 8009210:	485e      	ldr	r0, [pc, #376]	@ (800938c <xQueueGenericSend+0x228>)
 8009212:	f7f9 f8d9 	bl	80023c8 <vAssertCalled>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009216:	f001 fd07 	bl	800ac28 <xTaskGetSchedulerState>
 800921a:	4603      	mov	r3, r0
 800921c:	2b00      	cmp	r3, #0
 800921e:	d102      	bne.n	8009226 <xQueueGenericSend+0xc2>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d101      	bne.n	800922a <xQueueGenericSend+0xc6>
 8009226:	2301      	movs	r3, #1
 8009228:	e000      	b.n	800922c <xQueueGenericSend+0xc8>
 800922a:	2300      	movs	r3, #0
 800922c:	2b00      	cmp	r3, #0
 800922e:	d110      	bne.n	8009252 <xQueueGenericSend+0xee>
    __asm volatile
 8009230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009234:	b672      	cpsid	i
 8009236:	f383 8811 	msr	BASEPRI, r3
 800923a:	f3bf 8f6f 	isb	sy
 800923e:	f3bf 8f4f 	dsb	sy
 8009242:	b662      	cpsie	i
 8009244:	61fb      	str	r3, [r7, #28]
}
 8009246:	bf00      	nop
 8009248:	f240 31bb 	movw	r1, #955	@ 0x3bb
 800924c:	484f      	ldr	r0, [pc, #316]	@ (800938c <xQueueGenericSend+0x228>)
 800924e:	f7f9 f8bb 	bl	80023c8 <vAssertCalled>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8009252:	f002 fc85 	bl	800bb60 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009258:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800925a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800925c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800925e:	429a      	cmp	r2, r3
 8009260:	d302      	bcc.n	8009268 <xQueueGenericSend+0x104>
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	2b02      	cmp	r3, #2
 8009266:	d129      	bne.n	80092bc <xQueueGenericSend+0x158>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009268:	683a      	ldr	r2, [r7, #0]
 800926a:	68b9      	ldr	r1, [r7, #8]
 800926c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800926e:	f000 faaf 	bl	80097d0 <prvCopyDataToQueue>
 8009272:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009278:	2b00      	cmp	r3, #0
 800927a:	d010      	beq.n	800929e <xQueueGenericSend+0x13a>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800927c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800927e:	3324      	adds	r3, #36	@ 0x24
 8009280:	4618      	mov	r0, r3
 8009282:	f001 fa95 	bl	800a7b0 <xTaskRemoveFromEventList>
 8009286:	4603      	mov	r3, r0
 8009288:	2b00      	cmp	r3, #0
 800928a:	d013      	beq.n	80092b4 <xQueueGenericSend+0x150>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 800928c:	4b40      	ldr	r3, [pc, #256]	@ (8009390 <xQueueGenericSend+0x22c>)
 800928e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009292:	601a      	str	r2, [r3, #0]
 8009294:	f3bf 8f4f 	dsb	sy
 8009298:	f3bf 8f6f 	isb	sy
 800929c:	e00a      	b.n	80092b4 <xQueueGenericSend+0x150>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 800929e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d007      	beq.n	80092b4 <xQueueGenericSend+0x150>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 80092a4:	4b3a      	ldr	r3, [pc, #232]	@ (8009390 <xQueueGenericSend+0x22c>)
 80092a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80092aa:	601a      	str	r2, [r3, #0]
 80092ac:	f3bf 8f4f 	dsb	sy
 80092b0:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80092b4:	f002 fc8c 	bl	800bbd0 <vPortExitCritical>

                traceRETURN_xQueueGenericSend( pdPASS );

                return pdPASS;
 80092b8:	2301      	movs	r3, #1
 80092ba:	e063      	b.n	8009384 <xQueueGenericSend+0x220>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d103      	bne.n	80092ca <xQueueGenericSend+0x166>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80092c2:	f002 fc85 	bl	800bbd0 <vPortExitCritical>
                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );

                    return errQUEUE_FULL;
 80092c6:	2300      	movs	r3, #0
 80092c8:	e05c      	b.n	8009384 <xQueueGenericSend+0x220>
                }
                else if( xEntryTimeSet == pdFALSE )
 80092ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d106      	bne.n	80092de <xQueueGenericSend+0x17a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80092d0:	f107 0314 	add.w	r3, r7, #20
 80092d4:	4618      	mov	r0, r3
 80092d6:	f001 fb49 	bl	800a96c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80092da:	2301      	movs	r3, #1
 80092dc:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80092de:	f002 fc77 	bl	800bbd0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80092e2:	f000 feef 	bl	800a0c4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80092e6:	f002 fc3b 	bl	800bb60 <vPortEnterCritical>
 80092ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80092f0:	b25b      	sxtb	r3, r3
 80092f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092f6:	d103      	bne.n	8009300 <xQueueGenericSend+0x19c>
 80092f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092fa:	2200      	movs	r2, #0
 80092fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009302:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009306:	b25b      	sxtb	r3, r3
 8009308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800930c:	d103      	bne.n	8009316 <xQueueGenericSend+0x1b2>
 800930e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009310:	2200      	movs	r2, #0
 8009312:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009316:	f002 fc5b 	bl	800bbd0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800931a:	1d3a      	adds	r2, r7, #4
 800931c:	f107 0314 	add.w	r3, r7, #20
 8009320:	4611      	mov	r1, r2
 8009322:	4618      	mov	r0, r3
 8009324:	f001 fb38 	bl	800a998 <xTaskCheckForTimeOut>
 8009328:	4603      	mov	r3, r0
 800932a:	2b00      	cmp	r3, #0
 800932c:	d124      	bne.n	8009378 <xQueueGenericSend+0x214>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800932e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009330:	f000 fb46 	bl	80099c0 <prvIsQueueFull>
 8009334:	4603      	mov	r3, r0
 8009336:	2b00      	cmp	r3, #0
 8009338:	d018      	beq.n	800936c <xQueueGenericSend+0x208>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800933a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800933c:	3310      	adds	r3, #16
 800933e:	687a      	ldr	r2, [r7, #4]
 8009340:	4611      	mov	r1, r2
 8009342:	4618      	mov	r0, r3
 8009344:	f001 f9ba 	bl	800a6bc <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8009348:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800934a:	f000 fad1 	bl	80098f0 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800934e:	f000 fec7 	bl	800a0e0 <xTaskResumeAll>
 8009352:	4603      	mov	r3, r0
 8009354:	2b00      	cmp	r3, #0
 8009356:	f47f af7c 	bne.w	8009252 <xQueueGenericSend+0xee>
                {
                    taskYIELD_WITHIN_API();
 800935a:	4b0d      	ldr	r3, [pc, #52]	@ (8009390 <xQueueGenericSend+0x22c>)
 800935c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009360:	601a      	str	r2, [r3, #0]
 8009362:	f3bf 8f4f 	dsb	sy
 8009366:	f3bf 8f6f 	isb	sy
 800936a:	e772      	b.n	8009252 <xQueueGenericSend+0xee>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800936c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800936e:	f000 fabf 	bl	80098f0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8009372:	f000 feb5 	bl	800a0e0 <xTaskResumeAll>
 8009376:	e76c      	b.n	8009252 <xQueueGenericSend+0xee>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8009378:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800937a:	f000 fab9 	bl	80098f0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800937e:	f000 feaf 	bl	800a0e0 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );

            return errQUEUE_FULL;
 8009382:	2300      	movs	r3, #0
        }
    }
}
 8009384:	4618      	mov	r0, r3
 8009386:	3738      	adds	r7, #56	@ 0x38
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}
 800938c:	08010ac4 	.word	0x08010ac4
 8009390:	e000ed04 	.word	0xe000ed04

08009394 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b08c      	sub	sp, #48	@ 0x30
 8009398:	af00      	add	r7, sp, #0
 800939a:	60f8      	str	r0, [r7, #12]
 800939c:	60b9      	str	r1, [r7, #8]
 800939e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80093a0:	2300      	movs	r3, #0
 80093a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80093a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d110      	bne.n	80093d0 <xQueueReceive+0x3c>
    __asm volatile
 80093ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093b2:	b672      	cpsid	i
 80093b4:	f383 8811 	msr	BASEPRI, r3
 80093b8:	f3bf 8f6f 	isb	sy
 80093bc:	f3bf 8f4f 	dsb	sy
 80093c0:	b662      	cpsie	i
 80093c2:	623b      	str	r3, [r7, #32]
}
 80093c4:	bf00      	nop
 80093c6:	f240 51e9 	movw	r1, #1513	@ 0x5e9
 80093ca:	486a      	ldr	r0, [pc, #424]	@ (8009574 <xQueueReceive+0x1e0>)
 80093cc:	f7f8 fffc 	bl	80023c8 <vAssertCalled>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d103      	bne.n	80093de <xQueueReceive+0x4a>
 80093d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d101      	bne.n	80093e2 <xQueueReceive+0x4e>
 80093de:	2301      	movs	r3, #1
 80093e0:	e000      	b.n	80093e4 <xQueueReceive+0x50>
 80093e2:	2300      	movs	r3, #0
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d110      	bne.n	800940a <xQueueReceive+0x76>
    __asm volatile
 80093e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093ec:	b672      	cpsid	i
 80093ee:	f383 8811 	msr	BASEPRI, r3
 80093f2:	f3bf 8f6f 	isb	sy
 80093f6:	f3bf 8f4f 	dsb	sy
 80093fa:	b662      	cpsie	i
 80093fc:	61fb      	str	r3, [r7, #28]
}
 80093fe:	bf00      	nop
 8009400:	f240 51ed 	movw	r1, #1517	@ 0x5ed
 8009404:	485b      	ldr	r0, [pc, #364]	@ (8009574 <xQueueReceive+0x1e0>)
 8009406:	f7f8 ffdf 	bl	80023c8 <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800940a:	f001 fc0d 	bl	800ac28 <xTaskGetSchedulerState>
 800940e:	4603      	mov	r3, r0
 8009410:	2b00      	cmp	r3, #0
 8009412:	d102      	bne.n	800941a <xQueueReceive+0x86>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d101      	bne.n	800941e <xQueueReceive+0x8a>
 800941a:	2301      	movs	r3, #1
 800941c:	e000      	b.n	8009420 <xQueueReceive+0x8c>
 800941e:	2300      	movs	r3, #0
 8009420:	2b00      	cmp	r3, #0
 8009422:	d110      	bne.n	8009446 <xQueueReceive+0xb2>
    __asm volatile
 8009424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009428:	b672      	cpsid	i
 800942a:	f383 8811 	msr	BASEPRI, r3
 800942e:	f3bf 8f6f 	isb	sy
 8009432:	f3bf 8f4f 	dsb	sy
 8009436:	b662      	cpsie	i
 8009438:	61bb      	str	r3, [r7, #24]
}
 800943a:	bf00      	nop
 800943c:	f240 51f2 	movw	r1, #1522	@ 0x5f2
 8009440:	484c      	ldr	r0, [pc, #304]	@ (8009574 <xQueueReceive+0x1e0>)
 8009442:	f7f8 ffc1 	bl	80023c8 <vAssertCalled>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8009446:	f002 fb8b 	bl	800bb60 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800944a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800944c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800944e:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009452:	2b00      	cmp	r3, #0
 8009454:	d01f      	beq.n	8009496 <xQueueReceive+0x102>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009456:	68b9      	ldr	r1, [r7, #8]
 8009458:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800945a:	f000 fa23 	bl	80098a4 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 800945e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009460:	1e5a      	subs	r2, r3, #1
 8009462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009464:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009468:	691b      	ldr	r3, [r3, #16]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d00f      	beq.n	800948e <xQueueReceive+0xfa>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800946e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009470:	3310      	adds	r3, #16
 8009472:	4618      	mov	r0, r3
 8009474:	f001 f99c 	bl	800a7b0 <xTaskRemoveFromEventList>
 8009478:	4603      	mov	r3, r0
 800947a:	2b00      	cmp	r3, #0
 800947c:	d007      	beq.n	800948e <xQueueReceive+0xfa>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800947e:	4b3e      	ldr	r3, [pc, #248]	@ (8009578 <xQueueReceive+0x1e4>)
 8009480:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009484:	601a      	str	r2, [r3, #0]
 8009486:	f3bf 8f4f 	dsb	sy
 800948a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800948e:	f002 fb9f 	bl	800bbd0 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
 8009492:	2301      	movs	r3, #1
 8009494:	e069      	b.n	800956a <xQueueReceive+0x1d6>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d103      	bne.n	80094a4 <xQueueReceive+0x110>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800949c:	f002 fb98 	bl	800bbd0 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 80094a0:	2300      	movs	r3, #0
 80094a2:	e062      	b.n	800956a <xQueueReceive+0x1d6>
                }
                else if( xEntryTimeSet == pdFALSE )
 80094a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d106      	bne.n	80094b8 <xQueueReceive+0x124>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80094aa:	f107 0310 	add.w	r3, r7, #16
 80094ae:	4618      	mov	r0, r3
 80094b0:	f001 fa5c 	bl	800a96c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80094b4:	2301      	movs	r3, #1
 80094b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80094b8:	f002 fb8a 	bl	800bbd0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80094bc:	f000 fe02 	bl	800a0c4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80094c0:	f002 fb4e 	bl	800bb60 <vPortEnterCritical>
 80094c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094c6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80094ca:	b25b      	sxtb	r3, r3
 80094cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094d0:	d103      	bne.n	80094da <xQueueReceive+0x146>
 80094d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094d4:	2200      	movs	r2, #0
 80094d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80094da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094dc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80094e0:	b25b      	sxtb	r3, r3
 80094e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094e6:	d103      	bne.n	80094f0 <xQueueReceive+0x15c>
 80094e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094ea:	2200      	movs	r2, #0
 80094ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80094f0:	f002 fb6e 	bl	800bbd0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80094f4:	1d3a      	adds	r2, r7, #4
 80094f6:	f107 0310 	add.w	r3, r7, #16
 80094fa:	4611      	mov	r1, r2
 80094fc:	4618      	mov	r0, r3
 80094fe:	f001 fa4b 	bl	800a998 <xTaskCheckForTimeOut>
 8009502:	4603      	mov	r3, r0
 8009504:	2b00      	cmp	r3, #0
 8009506:	d123      	bne.n	8009550 <xQueueReceive+0x1bc>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009508:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800950a:	f000 fa43 	bl	8009994 <prvIsQueueEmpty>
 800950e:	4603      	mov	r3, r0
 8009510:	2b00      	cmp	r3, #0
 8009512:	d017      	beq.n	8009544 <xQueueReceive+0x1b0>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009516:	3324      	adds	r3, #36	@ 0x24
 8009518:	687a      	ldr	r2, [r7, #4]
 800951a:	4611      	mov	r1, r2
 800951c:	4618      	mov	r0, r3
 800951e:	f001 f8cd 	bl	800a6bc <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8009522:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009524:	f000 f9e4 	bl	80098f0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8009528:	f000 fdda 	bl	800a0e0 <xTaskResumeAll>
 800952c:	4603      	mov	r3, r0
 800952e:	2b00      	cmp	r3, #0
 8009530:	d189      	bne.n	8009446 <xQueueReceive+0xb2>
                {
                    taskYIELD_WITHIN_API();
 8009532:	4b11      	ldr	r3, [pc, #68]	@ (8009578 <xQueueReceive+0x1e4>)
 8009534:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009538:	601a      	str	r2, [r3, #0]
 800953a:	f3bf 8f4f 	dsb	sy
 800953e:	f3bf 8f6f 	isb	sy
 8009542:	e780      	b.n	8009446 <xQueueReceive+0xb2>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8009544:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009546:	f000 f9d3 	bl	80098f0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800954a:	f000 fdc9 	bl	800a0e0 <xTaskResumeAll>
 800954e:	e77a      	b.n	8009446 <xQueueReceive+0xb2>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8009550:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009552:	f000 f9cd 	bl	80098f0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8009556:	f000 fdc3 	bl	800a0e0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800955a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800955c:	f000 fa1a 	bl	8009994 <prvIsQueueEmpty>
 8009560:	4603      	mov	r3, r0
 8009562:	2b00      	cmp	r3, #0
 8009564:	f43f af6f 	beq.w	8009446 <xQueueReceive+0xb2>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 8009568:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 800956a:	4618      	mov	r0, r3
 800956c:	3730      	adds	r7, #48	@ 0x30
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}
 8009572:	bf00      	nop
 8009574:	08010ac4 	.word	0x08010ac4
 8009578:	e000ed04 	.word	0xe000ed04

0800957c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b08c      	sub	sp, #48	@ 0x30
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
 8009584:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8009586:	2300      	movs	r3, #0
 8009588:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	627b      	str	r3, [r7, #36]	@ 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 800958e:	2300      	movs	r3, #0
 8009590:	62bb      	str	r3, [r7, #40]	@ 0x28
    #endif

    traceENTER_xQueueSemaphoreTake( xQueue, xTicksToWait );

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8009592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009594:	2b00      	cmp	r3, #0
 8009596:	d110      	bne.n	80095ba <xQueueSemaphoreTake+0x3e>
    __asm volatile
 8009598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800959c:	b672      	cpsid	i
 800959e:	f383 8811 	msr	BASEPRI, r3
 80095a2:	f3bf 8f6f 	isb	sy
 80095a6:	f3bf 8f4f 	dsb	sy
 80095aa:	b662      	cpsie	i
 80095ac:	61bb      	str	r3, [r7, #24]
}
 80095ae:	bf00      	nop
 80095b0:	f240 6182 	movw	r1, #1666	@ 0x682
 80095b4:	4878      	ldr	r0, [pc, #480]	@ (8009798 <xQueueSemaphoreTake+0x21c>)
 80095b6:	f7f8 ff07 	bl	80023c8 <vAssertCalled>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 80095ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d010      	beq.n	80095e4 <xQueueSemaphoreTake+0x68>
    __asm volatile
 80095c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095c6:	b672      	cpsid	i
 80095c8:	f383 8811 	msr	BASEPRI, r3
 80095cc:	f3bf 8f6f 	isb	sy
 80095d0:	f3bf 8f4f 	dsb	sy
 80095d4:	b662      	cpsie	i
 80095d6:	617b      	str	r3, [r7, #20]
}
 80095d8:	bf00      	nop
 80095da:	f240 6186 	movw	r1, #1670	@ 0x686
 80095de:	486e      	ldr	r0, [pc, #440]	@ (8009798 <xQueueSemaphoreTake+0x21c>)
 80095e0:	f7f8 fef2 	bl	80023c8 <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80095e4:	f001 fb20 	bl	800ac28 <xTaskGetSchedulerState>
 80095e8:	4603      	mov	r3, r0
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d102      	bne.n	80095f4 <xQueueSemaphoreTake+0x78>
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d101      	bne.n	80095f8 <xQueueSemaphoreTake+0x7c>
 80095f4:	2301      	movs	r3, #1
 80095f6:	e000      	b.n	80095fa <xQueueSemaphoreTake+0x7e>
 80095f8:	2300      	movs	r3, #0
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d110      	bne.n	8009620 <xQueueSemaphoreTake+0xa4>
    __asm volatile
 80095fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009602:	b672      	cpsid	i
 8009604:	f383 8811 	msr	BASEPRI, r3
 8009608:	f3bf 8f6f 	isb	sy
 800960c:	f3bf 8f4f 	dsb	sy
 8009610:	b662      	cpsie	i
 8009612:	613b      	str	r3, [r7, #16]
}
 8009614:	bf00      	nop
 8009616:	f240 618b 	movw	r1, #1675	@ 0x68b
 800961a:	485f      	ldr	r0, [pc, #380]	@ (8009798 <xQueueSemaphoreTake+0x21c>)
 800961c:	f7f8 fed4 	bl	80023c8 <vAssertCalled>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8009620:	f002 fa9e 	bl	800bb60 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009628:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800962a:	6a3b      	ldr	r3, [r7, #32]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d024      	beq.n	800967a <xQueueSemaphoreTake+0xfe>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxSemaphoreCount - ( UBaseType_t ) 1 );
 8009630:	6a3b      	ldr	r3, [r7, #32]
 8009632:	1e5a      	subs	r2, r3, #1
 8009634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009636:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d104      	bne.n	800964a <xQueueSemaphoreTake+0xce>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009640:	f001 fd2e 	bl	800b0a0 <pvTaskIncrementMutexHeldCount>
 8009644:	4602      	mov	r2, r0
 8009646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009648:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800964a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800964c:	691b      	ldr	r3, [r3, #16]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d00f      	beq.n	8009672 <xQueueSemaphoreTake+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009654:	3310      	adds	r3, #16
 8009656:	4618      	mov	r0, r3
 8009658:	f001 f8aa 	bl	800a7b0 <xTaskRemoveFromEventList>
 800965c:	4603      	mov	r3, r0
 800965e:	2b00      	cmp	r3, #0
 8009660:	d007      	beq.n	8009672 <xQueueSemaphoreTake+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8009662:	4b4e      	ldr	r3, [pc, #312]	@ (800979c <xQueueSemaphoreTake+0x220>)
 8009664:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009668:	601a      	str	r2, [r3, #0]
 800966a:	f3bf 8f4f 	dsb	sy
 800966e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8009672:	f002 faad 	bl	800bbd0 <vPortExitCritical>

                traceRETURN_xQueueSemaphoreTake( pdPASS );

                return pdPASS;
 8009676:	2301      	movs	r3, #1
 8009678:	e089      	b.n	800978e <xQueueSemaphoreTake+0x212>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d103      	bne.n	8009688 <xQueueSemaphoreTake+0x10c>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8009680:	f002 faa6 	bl	800bbd0 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 8009684:	2300      	movs	r3, #0
 8009686:	e082      	b.n	800978e <xQueueSemaphoreTake+0x212>
                }
                else if( xEntryTimeSet == pdFALSE )
 8009688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800968a:	2b00      	cmp	r3, #0
 800968c:	d106      	bne.n	800969c <xQueueSemaphoreTake+0x120>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800968e:	f107 0308 	add.w	r3, r7, #8
 8009692:	4618      	mov	r0, r3
 8009694:	f001 f96a 	bl	800a96c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8009698:	2301      	movs	r3, #1
 800969a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800969c:	f002 fa98 	bl	800bbd0 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80096a0:	f000 fd10 	bl	800a0c4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80096a4:	f002 fa5c 	bl	800bb60 <vPortEnterCritical>
 80096a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096aa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80096ae:	b25b      	sxtb	r3, r3
 80096b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096b4:	d103      	bne.n	80096be <xQueueSemaphoreTake+0x142>
 80096b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096b8:	2200      	movs	r2, #0
 80096ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80096be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80096c4:	b25b      	sxtb	r3, r3
 80096c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096ca:	d103      	bne.n	80096d4 <xQueueSemaphoreTake+0x158>
 80096cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096ce:	2200      	movs	r2, #0
 80096d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80096d4:	f002 fa7c 	bl	800bbd0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80096d8:	463a      	mov	r2, r7
 80096da:	f107 0308 	add.w	r3, r7, #8
 80096de:	4611      	mov	r1, r2
 80096e0:	4618      	mov	r0, r3
 80096e2:	f001 f959 	bl	800a998 <xTaskCheckForTimeOut>
 80096e6:	4603      	mov	r3, r0
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d132      	bne.n	8009752 <xQueueSemaphoreTake+0x1d6>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80096ec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80096ee:	f000 f951 	bl	8009994 <prvIsQueueEmpty>
 80096f2:	4603      	mov	r3, r0
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d026      	beq.n	8009746 <xQueueSemaphoreTake+0x1ca>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80096f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d109      	bne.n	8009714 <xQueueSemaphoreTake+0x198>
                    {
                        taskENTER_CRITICAL();
 8009700:	f002 fa2e 	bl	800bb60 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009706:	689b      	ldr	r3, [r3, #8]
 8009708:	4618      	mov	r0, r3
 800970a:	f001 faab 	bl	800ac64 <xTaskPriorityInherit>
 800970e:	62b8      	str	r0, [r7, #40]	@ 0x28
                        }
                        taskEXIT_CRITICAL();
 8009710:	f002 fa5e 	bl	800bbd0 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009716:	3324      	adds	r3, #36	@ 0x24
 8009718:	683a      	ldr	r2, [r7, #0]
 800971a:	4611      	mov	r1, r2
 800971c:	4618      	mov	r0, r3
 800971e:	f000 ffcd 	bl	800a6bc <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8009722:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009724:	f000 f8e4 	bl	80098f0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8009728:	f000 fcda 	bl	800a0e0 <xTaskResumeAll>
 800972c:	4603      	mov	r3, r0
 800972e:	2b00      	cmp	r3, #0
 8009730:	f47f af76 	bne.w	8009620 <xQueueSemaphoreTake+0xa4>
                {
                    taskYIELD_WITHIN_API();
 8009734:	4b19      	ldr	r3, [pc, #100]	@ (800979c <xQueueSemaphoreTake+0x220>)
 8009736:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800973a:	601a      	str	r2, [r3, #0]
 800973c:	f3bf 8f4f 	dsb	sy
 8009740:	f3bf 8f6f 	isb	sy
 8009744:	e76c      	b.n	8009620 <xQueueSemaphoreTake+0xa4>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8009746:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009748:	f000 f8d2 	bl	80098f0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800974c:	f000 fcc8 	bl	800a0e0 <xTaskResumeAll>
 8009750:	e766      	b.n	8009620 <xQueueSemaphoreTake+0xa4>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8009752:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009754:	f000 f8cc 	bl	80098f0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8009758:	f000 fcc2 	bl	800a0e0 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800975c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800975e:	f000 f919 	bl	8009994 <prvIsQueueEmpty>
 8009762:	4603      	mov	r3, r0
 8009764:	2b00      	cmp	r3, #0
 8009766:	f43f af5b 	beq.w	8009620 <xQueueSemaphoreTake+0xa4>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 800976a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800976c:	2b00      	cmp	r3, #0
 800976e:	d00d      	beq.n	800978c <xQueueSemaphoreTake+0x210>
                    {
                        taskENTER_CRITICAL();
 8009770:	f002 f9f6 	bl	800bb60 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009774:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009776:	f000 f813 	bl	80097a0 <prvGetDisinheritPriorityAfterTimeout>
 800977a:	61f8      	str	r0, [r7, #28]
                             * mutex to the ready list for its new priority. Coverity thinks that
                             * it can result in out-of-bounds access which is not true because
                             * uxHighestWaitingPriority, as returned by prvGetDisinheritPriorityAfterTimeout,
                             * is capped at ( configMAX_PRIORITIES - 1 ). */
                            /* coverity[overrun] */
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800977c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800977e:	689b      	ldr	r3, [r3, #8]
 8009780:	69f9      	ldr	r1, [r7, #28]
 8009782:	4618      	mov	r0, r3
 8009784:	f001 fbc2 	bl	800af0c <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 8009788:	f002 fa22 	bl	800bbd0 <vPortExitCritical>
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 800978c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 800978e:	4618      	mov	r0, r3
 8009790:	3730      	adds	r7, #48	@ 0x30
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}
 8009796:	bf00      	nop
 8009798:	08010ac4 	.word	0x08010ac4
 800979c:	e000ed04 	.word	0xe000ed04

080097a0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 80097a0:	b480      	push	{r7}
 80097a2:	b085      	sub	sp, #20
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d006      	beq.n	80097be <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) ( ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) ) );
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f1c3 0307 	rsb	r3, r3, #7
 80097ba:	60fb      	str	r3, [r7, #12]
 80097bc:	e001      	b.n	80097c2 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80097be:	2300      	movs	r3, #0
 80097c0:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 80097c2:	68fb      	ldr	r3, [r7, #12]
    }
 80097c4:	4618      	mov	r0, r3
 80097c6:	3714      	adds	r7, #20
 80097c8:	46bd      	mov	sp, r7
 80097ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ce:	4770      	bx	lr

080097d0 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b086      	sub	sp, #24
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	60f8      	str	r0, [r7, #12]
 80097d8:	60b9      	str	r1, [r7, #8]
 80097da:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80097dc:	2300      	movs	r3, #0
 80097de:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097e4:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d10d      	bne.n	800980a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d14d      	bne.n	8009892 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	689b      	ldr	r3, [r3, #8]
 80097fa:	4618      	mov	r0, r3
 80097fc:	f001 fad2 	bl	800ada4 <xTaskPriorityDisinherit>
 8009800:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	2200      	movs	r2, #0
 8009806:	609a      	str	r2, [r3, #8]
 8009808:	e043      	b.n	8009892 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d119      	bne.n	8009844 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	6858      	ldr	r0, [r3, #4]
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009818:	461a      	mov	r2, r3
 800981a:	68b9      	ldr	r1, [r7, #8]
 800981c:	f004 fbc3 	bl	800dfa6 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	685a      	ldr	r2, [r3, #4]
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009828:	441a      	add	r2, r3
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	685a      	ldr	r2, [r3, #4]
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	689b      	ldr	r3, [r3, #8]
 8009836:	429a      	cmp	r2, r3
 8009838:	d32b      	bcc.n	8009892 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	681a      	ldr	r2, [r3, #0]
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	605a      	str	r2, [r3, #4]
 8009842:	e026      	b.n	8009892 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	68d8      	ldr	r0, [r3, #12]
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800984c:	461a      	mov	r2, r3
 800984e:	68b9      	ldr	r1, [r7, #8]
 8009850:	f004 fba9 	bl	800dfa6 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	68da      	ldr	r2, [r3, #12]
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800985c:	425b      	negs	r3, r3
 800985e:	441a      	add	r2, r3
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	68da      	ldr	r2, [r3, #12]
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	429a      	cmp	r2, r3
 800986e:	d207      	bcs.n	8009880 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	689a      	ldr	r2, [r3, #8]
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009878:	425b      	negs	r3, r3
 800987a:	441a      	add	r2, r3
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2b02      	cmp	r3, #2
 8009884:	d105      	bne.n	8009892 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009886:	693b      	ldr	r3, [r7, #16]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d002      	beq.n	8009892 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	3b01      	subs	r3, #1
 8009890:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 8009892:	693b      	ldr	r3, [r7, #16]
 8009894:	1c5a      	adds	r2, r3, #1
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 800989a:	697b      	ldr	r3, [r7, #20]
}
 800989c:	4618      	mov	r0, r3
 800989e:	3718      	adds	r7, #24
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}

080098a4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b082      	sub	sp, #8
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
 80098ac:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d018      	beq.n	80098e8 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	68da      	ldr	r2, [r3, #12]
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098be:	441a      	add	r2, r3
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	68da      	ldr	r2, [r3, #12]
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	689b      	ldr	r3, [r3, #8]
 80098cc:	429a      	cmp	r2, r3
 80098ce:	d303      	bcc.n	80098d8 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681a      	ldr	r2, [r3, #0]
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	68d9      	ldr	r1, [r3, #12]
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098e0:	461a      	mov	r2, r3
 80098e2:	6838      	ldr	r0, [r7, #0]
 80098e4:	f004 fb5f 	bl	800dfa6 <memcpy>
    }
}
 80098e8:	bf00      	nop
 80098ea:	3708      	adds	r7, #8
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}

080098f0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b084      	sub	sp, #16
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80098f8:	f002 f932 	bl	800bb60 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009902:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8009904:	e011      	b.n	800992a <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800990a:	2b00      	cmp	r3, #0
 800990c:	d012      	beq.n	8009934 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	3324      	adds	r3, #36	@ 0x24
 8009912:	4618      	mov	r0, r3
 8009914:	f000 ff4c 	bl	800a7b0 <xTaskRemoveFromEventList>
 8009918:	4603      	mov	r3, r0
 800991a:	2b00      	cmp	r3, #0
 800991c:	d001      	beq.n	8009922 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800991e:	f001 f8af 	bl	800aa80 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8009922:	7bfb      	ldrb	r3, [r7, #15]
 8009924:	3b01      	subs	r3, #1
 8009926:	b2db      	uxtb	r3, r3
 8009928:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800992a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800992e:	2b00      	cmp	r3, #0
 8009930:	dce9      	bgt.n	8009906 <prvUnlockQueue+0x16>
 8009932:	e000      	b.n	8009936 <prvUnlockQueue+0x46>
                    break;
 8009934:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	22ff      	movs	r2, #255	@ 0xff
 800993a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 800993e:	f002 f947 	bl	800bbd0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8009942:	f002 f90d 	bl	800bb60 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800994c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800994e:	e011      	b.n	8009974 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	691b      	ldr	r3, [r3, #16]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d012      	beq.n	800997e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	3310      	adds	r3, #16
 800995c:	4618      	mov	r0, r3
 800995e:	f000 ff27 	bl	800a7b0 <xTaskRemoveFromEventList>
 8009962:	4603      	mov	r3, r0
 8009964:	2b00      	cmp	r3, #0
 8009966:	d001      	beq.n	800996c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8009968:	f001 f88a 	bl	800aa80 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800996c:	7bbb      	ldrb	r3, [r7, #14]
 800996e:	3b01      	subs	r3, #1
 8009970:	b2db      	uxtb	r3, r3
 8009972:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8009974:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009978:	2b00      	cmp	r3, #0
 800997a:	dce9      	bgt.n	8009950 <prvUnlockQueue+0x60>
 800997c:	e000      	b.n	8009980 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800997e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	22ff      	movs	r2, #255	@ 0xff
 8009984:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8009988:	f002 f922 	bl	800bbd0 <vPortExitCritical>
}
 800998c:	bf00      	nop
 800998e:	3710      	adds	r7, #16
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}

08009994 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b084      	sub	sp, #16
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800999c:	f002 f8e0 	bl	800bb60 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d102      	bne.n	80099ae <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80099a8:	2301      	movs	r3, #1
 80099aa:	60fb      	str	r3, [r7, #12]
 80099ac:	e001      	b.n	80099b2 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80099ae:	2300      	movs	r3, #0
 80099b0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80099b2:	f002 f90d 	bl	800bbd0 <vPortExitCritical>

    return xReturn;
 80099b6:	68fb      	ldr	r3, [r7, #12]
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	3710      	adds	r7, #16
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}

080099c0 <prvIsQueueFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b084      	sub	sp, #16
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80099c8:	f002 f8ca 	bl	800bb60 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099d4:	429a      	cmp	r2, r3
 80099d6:	d102      	bne.n	80099de <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80099d8:	2301      	movs	r3, #1
 80099da:	60fb      	str	r3, [r7, #12]
 80099dc:	e001      	b.n	80099e2 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80099de:	2300      	movs	r3, #0
 80099e0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80099e2:	f002 f8f5 	bl	800bbd0 <vPortExitCritical>

    return xReturn;
 80099e6:	68fb      	ldr	r3, [r7, #12]
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	3710      	adds	r7, #16
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}

080099f0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b086      	sub	sp, #24
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	60f8      	str	r0, [r7, #12]
 80099f8:	60b9      	str	r1, [r7, #8]
 80099fa:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8009a00:	f002 f8ae 	bl	800bb60 <vPortEnterCritical>
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009a0a:	b25b      	sxtb	r3, r3
 8009a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a10:	d103      	bne.n	8009a1a <vQueueWaitForMessageRestricted+0x2a>
 8009a12:	697b      	ldr	r3, [r7, #20]
 8009a14:	2200      	movs	r2, #0
 8009a16:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009a20:	b25b      	sxtb	r3, r3
 8009a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a26:	d103      	bne.n	8009a30 <vQueueWaitForMessageRestricted+0x40>
 8009a28:	697b      	ldr	r3, [r7, #20]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009a30:	f002 f8ce 	bl	800bbd0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d106      	bne.n	8009a4a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	3324      	adds	r3, #36	@ 0x24
 8009a40:	687a      	ldr	r2, [r7, #4]
 8009a42:	68b9      	ldr	r1, [r7, #8]
 8009a44:	4618      	mov	r0, r3
 8009a46:	f000 fe65 	bl	800a714 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8009a4a:	6978      	ldr	r0, [r7, #20]
 8009a4c:	f7ff ff50 	bl	80098f0 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
    }
 8009a50:	bf00      	nop
 8009a52:	3718      	adds	r7, #24
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}

08009a58 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b08a      	sub	sp, #40	@ 0x28
 8009a5c:	af04      	add	r7, sp, #16
 8009a5e:	60f8      	str	r0, [r7, #12]
 8009a60:	60b9      	str	r1, [r7, #8]
 8009a62:	607a      	str	r2, [r7, #4]
 8009a64:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	009b      	lsls	r3, r3, #2
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f7f8 ffcc 	bl	8002a08 <pvPortMalloc>
 8009a70:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8009a72:	693b      	ldr	r3, [r7, #16]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d013      	beq.n	8009aa0 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8009a78:	20b0      	movs	r0, #176	@ 0xb0
 8009a7a:	f7f8 ffc5 	bl	8002a08 <pvPortMalloc>
 8009a7e:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8009a80:	697b      	ldr	r3, [r7, #20]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d008      	beq.n	8009a98 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8009a86:	22b0      	movs	r2, #176	@ 0xb0
 8009a88:	2100      	movs	r1, #0
 8009a8a:	6978      	ldr	r0, [r7, #20]
 8009a8c:	f004 f99c 	bl	800ddc8 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8009a90:	697b      	ldr	r3, [r7, #20]
 8009a92:	693a      	ldr	r2, [r7, #16]
 8009a94:	631a      	str	r2, [r3, #48]	@ 0x30
 8009a96:	e005      	b.n	8009aa4 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8009a98:	6938      	ldr	r0, [r7, #16]
 8009a9a:	f7f8 ffc3 	bl	8002a24 <vPortFree>
 8009a9e:	e001      	b.n	8009aa4 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8009aa4:	697b      	ldr	r3, [r7, #20]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d00d      	beq.n	8009ac6 <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009aaa:	2300      	movs	r3, #0
 8009aac:	9303      	str	r3, [sp, #12]
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	9302      	str	r3, [sp, #8]
 8009ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ab4:	9301      	str	r3, [sp, #4]
 8009ab6:	6a3b      	ldr	r3, [r7, #32]
 8009ab8:	9300      	str	r3, [sp, #0]
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	687a      	ldr	r2, [r7, #4]
 8009abe:	68b9      	ldr	r1, [r7, #8]
 8009ac0:	68f8      	ldr	r0, [r7, #12]
 8009ac2:	f000 f829 	bl	8009b18 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8009ac6:	697b      	ldr	r3, [r7, #20]
    }
 8009ac8:	4618      	mov	r0, r3
 8009aca:	3718      	adds	r7, #24
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}

08009ad0 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b088      	sub	sp, #32
 8009ad4:	af02      	add	r7, sp, #8
 8009ad6:	60f8      	str	r0, [r7, #12]
 8009ad8:	60b9      	str	r1, [r7, #8]
 8009ada:	607a      	str	r2, [r7, #4]
 8009adc:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8009ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ae0:	9301      	str	r3, [sp, #4]
 8009ae2:	6a3b      	ldr	r3, [r7, #32]
 8009ae4:	9300      	str	r3, [sp, #0]
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	687a      	ldr	r2, [r7, #4]
 8009aea:	68b9      	ldr	r1, [r7, #8]
 8009aec:	68f8      	ldr	r0, [r7, #12]
 8009aee:	f7ff ffb3 	bl	8009a58 <prvCreateTask>
 8009af2:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8009af4:	693b      	ldr	r3, [r7, #16]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d005      	beq.n	8009b06 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8009afa:	6938      	ldr	r0, [r7, #16]
 8009afc:	f000 f8c2 	bl	8009c84 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8009b00:	2301      	movs	r3, #1
 8009b02:	617b      	str	r3, [r7, #20]
 8009b04:	e002      	b.n	8009b0c <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009b06:	f04f 33ff 	mov.w	r3, #4294967295
 8009b0a:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 8009b0c:	697b      	ldr	r3, [r7, #20]
    }
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3718      	adds	r7, #24
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}
	...

08009b18 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b088      	sub	sp, #32
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	60f8      	str	r0, [r7, #12]
 8009b20:	60b9      	str	r1, [r7, #8]
 8009b22:	607a      	str	r2, [r7, #4]
 8009b24:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8009b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b28:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	009b      	lsls	r3, r3, #2
 8009b2e:	461a      	mov	r2, r3
 8009b30:	21a5      	movs	r1, #165	@ 0xa5
 8009b32:	f004 f949 	bl	800ddc8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8009b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009b3a:	6879      	ldr	r1, [r7, #4]
 8009b3c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8009b40:	440b      	add	r3, r1
 8009b42:	009b      	lsls	r3, r3, #2
 8009b44:	4413      	add	r3, r2
 8009b46:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8009b48:	69bb      	ldr	r3, [r7, #24]
 8009b4a:	f023 0307 	bic.w	r3, r3, #7
 8009b4e:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8009b50:	69bb      	ldr	r3, [r7, #24]
 8009b52:	f003 0307 	and.w	r3, r3, #7
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d010      	beq.n	8009b7c <prvInitialiseNewTask+0x64>
    __asm volatile
 8009b5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b5e:	b672      	cpsid	i
 8009b60:	f383 8811 	msr	BASEPRI, r3
 8009b64:	f3bf 8f6f 	isb	sy
 8009b68:	f3bf 8f4f 	dsb	sy
 8009b6c:	b662      	cpsie	i
 8009b6e:	617b      	str	r3, [r7, #20]
}
 8009b70:	bf00      	nop
 8009b72:	f240 712e 	movw	r1, #1838	@ 0x72e
 8009b76:	483f      	ldr	r0, [pc, #252]	@ (8009c74 <prvInitialiseNewTask+0x15c>)
 8009b78:	f7f8 fc26 	bl	80023c8 <vAssertCalled>

        #if ( configRECORD_STACK_HIGH_ADDRESS == 1 )
        {
            /* Also record the stack's high address, which may assist
             * debugging. */
            pxNewTCB->pxEndOfStack = pxTopOfStack;
 8009b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b7e:	69ba      	ldr	r2, [r7, #24]
 8009b80:	645a      	str	r2, [r3, #68]	@ 0x44
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d01e      	beq.n	8009bc6 <prvInitialiseNewTask+0xae>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009b88:	2300      	movs	r3, #0
 8009b8a:	61fb      	str	r3, [r7, #28]
 8009b8c:	e012      	b.n	8009bb4 <prvInitialiseNewTask+0x9c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009b8e:	68ba      	ldr	r2, [r7, #8]
 8009b90:	69fb      	ldr	r3, [r7, #28]
 8009b92:	4413      	add	r3, r2
 8009b94:	7819      	ldrb	r1, [r3, #0]
 8009b96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b98:	69fb      	ldr	r3, [r7, #28]
 8009b9a:	4413      	add	r3, r2
 8009b9c:	3334      	adds	r3, #52	@ 0x34
 8009b9e:	460a      	mov	r2, r1
 8009ba0:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8009ba2:	68ba      	ldr	r2, [r7, #8]
 8009ba4:	69fb      	ldr	r3, [r7, #28]
 8009ba6:	4413      	add	r3, r2
 8009ba8:	781b      	ldrb	r3, [r3, #0]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d006      	beq.n	8009bbc <prvInitialiseNewTask+0xa4>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009bae:	69fb      	ldr	r3, [r7, #28]
 8009bb0:	3301      	adds	r3, #1
 8009bb2:	61fb      	str	r3, [r7, #28]
 8009bb4:	69fb      	ldr	r3, [r7, #28]
 8009bb6:	2b0f      	cmp	r3, #15
 8009bb8:	d9e9      	bls.n	8009b8e <prvInitialiseNewTask+0x76>
 8009bba:	e000      	b.n	8009bbe <prvInitialiseNewTask+0xa6>
            {
                break;
 8009bbc:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8009bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8009bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bc8:	2b06      	cmp	r3, #6
 8009bca:	d910      	bls.n	8009bee <prvInitialiseNewTask+0xd6>
    __asm volatile
 8009bcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bd0:	b672      	cpsid	i
 8009bd2:	f383 8811 	msr	BASEPRI, r3
 8009bd6:	f3bf 8f6f 	isb	sy
 8009bda:	f3bf 8f4f 	dsb	sy
 8009bde:	b662      	cpsie	i
 8009be0:	613b      	str	r3, [r7, #16]
}
 8009be2:	bf00      	nop
 8009be4:	f240 7164 	movw	r1, #1892	@ 0x764
 8009be8:	4822      	ldr	r0, [pc, #136]	@ (8009c74 <prvInitialiseNewTask+0x15c>)
 8009bea:	f7f8 fbed 	bl	80023c8 <vAssertCalled>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bf0:	2b06      	cmp	r3, #6
 8009bf2:	d901      	bls.n	8009bf8 <prvInitialiseNewTask+0xe0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009bf4:	2306      	movs	r3, #6
 8009bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8009bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bfa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009bfc:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8009bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c00:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009c02:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c06:	3304      	adds	r3, #4
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f7ff f853 	bl	8008cb4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c10:	3318      	adds	r3, #24
 8009c12:	4618      	mov	r0, r3
 8009c14:	f7ff f84e 	bl	8008cb4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c1c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8009c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c20:	f1c3 0207 	rsb	r2, r3, #7
 8009c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c26:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c2c:	625a      	str	r2, [r3, #36]	@ 0x24
    #endif

    #if ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 )
    {
        /* Allocate and initialize memory for the task's TLS Block. */
        configINIT_TLS_BLOCK( pxNewTCB->xTLSBlock, pxTopOfStack );
 8009c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c30:	335c      	adds	r3, #92	@ 0x5c
 8009c32:	224c      	movs	r2, #76	@ 0x4c
 8009c34:	2100      	movs	r1, #0
 8009c36:	4618      	mov	r0, r3
 8009c38:	f004 f8c6 	bl	800ddc8 <memset>
 8009c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c3e:	4a0e      	ldr	r2, [pc, #56]	@ (8009c78 <prvInitialiseNewTask+0x160>)
 8009c40:	661a      	str	r2, [r3, #96]	@ 0x60
 8009c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c44:	4a0d      	ldr	r2, [pc, #52]	@ (8009c7c <prvInitialiseNewTask+0x164>)
 8009c46:	665a      	str	r2, [r3, #100]	@ 0x64
 8009c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c4a:	4a0d      	ldr	r2, [pc, #52]	@ (8009c80 <prvInitialiseNewTask+0x168>)
 8009c4c:	669a      	str	r2, [r3, #104]	@ 0x68
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009c4e:	683a      	ldr	r2, [r7, #0]
 8009c50:	68f9      	ldr	r1, [r7, #12]
 8009c52:	69b8      	ldr	r0, [r7, #24]
 8009c54:	f001 fe12 	bl	800b87c <pxPortInitialiseStack>
 8009c58:	4602      	mov	r2, r0
 8009c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c5c:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8009c5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d002      	beq.n	8009c6a <prvInitialiseNewTask+0x152>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c68:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8009c6a:	bf00      	nop
 8009c6c:	3720      	adds	r7, #32
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}
 8009c72:	bf00      	nop
 8009c74:	08010b5c 	.word	0x08010b5c
 8009c78:	200004d0 	.word	0x200004d0
 8009c7c:	20000538 	.word	0x20000538
 8009c80:	200005a0 	.word	0x200005a0

08009c84 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b084      	sub	sp, #16
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8009c8c:	f001 ff68 	bl	800bb60 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8009c90:	4b41      	ldr	r3, [pc, #260]	@ (8009d98 <prvAddNewTaskToReadyList+0x114>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	3301      	adds	r3, #1
 8009c96:	4a40      	ldr	r2, [pc, #256]	@ (8009d98 <prvAddNewTaskToReadyList+0x114>)
 8009c98:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 8009c9a:	4b40      	ldr	r3, [pc, #256]	@ (8009d9c <prvAddNewTaskToReadyList+0x118>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d109      	bne.n	8009cb6 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8009ca2:	4a3e      	ldr	r2, [pc, #248]	@ (8009d9c <prvAddNewTaskToReadyList+0x118>)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009ca8:	4b3b      	ldr	r3, [pc, #236]	@ (8009d98 <prvAddNewTaskToReadyList+0x114>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	2b01      	cmp	r3, #1
 8009cae:	d110      	bne.n	8009cd2 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8009cb0:	f000 ff0a 	bl	800aac8 <prvInitialiseTaskLists>
 8009cb4:	e00d      	b.n	8009cd2 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8009cb6:	4b3a      	ldr	r3, [pc, #232]	@ (8009da0 <prvAddNewTaskToReadyList+0x11c>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d109      	bne.n	8009cd2 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009cbe:	4b37      	ldr	r3, [pc, #220]	@ (8009d9c <prvAddNewTaskToReadyList+0x118>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	d802      	bhi.n	8009cd2 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8009ccc:	4a33      	ldr	r2, [pc, #204]	@ (8009d9c <prvAddNewTaskToReadyList+0x118>)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8009cd2:	4b34      	ldr	r3, [pc, #208]	@ (8009da4 <prvAddNewTaskToReadyList+0x120>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	3301      	adds	r3, #1
 8009cd8:	4a32      	ldr	r2, [pc, #200]	@ (8009da4 <prvAddNewTaskToReadyList+0x120>)
 8009cda:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009cdc:	4b31      	ldr	r3, [pc, #196]	@ (8009da4 <prvAddNewTaskToReadyList+0x120>)
 8009cde:	681a      	ldr	r2, [r3, #0]
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	649a      	str	r2, [r3, #72]	@ 0x48
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ce8:	2201      	movs	r2, #1
 8009cea:	409a      	lsls	r2, r3
 8009cec:	4b2e      	ldr	r3, [pc, #184]	@ (8009da8 <prvAddNewTaskToReadyList+0x124>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	4313      	orrs	r3, r2
 8009cf2:	4a2d      	ldr	r2, [pc, #180]	@ (8009da8 <prvAddNewTaskToReadyList+0x124>)
 8009cf4:	6013      	str	r3, [r2, #0]
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cfa:	492c      	ldr	r1, [pc, #176]	@ (8009dac <prvAddNewTaskToReadyList+0x128>)
 8009cfc:	4613      	mov	r3, r2
 8009cfe:	009b      	lsls	r3, r3, #2
 8009d00:	4413      	add	r3, r2
 8009d02:	009b      	lsls	r3, r3, #2
 8009d04:	440b      	add	r3, r1
 8009d06:	3304      	adds	r3, #4
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	60fb      	str	r3, [r7, #12]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	68fa      	ldr	r2, [r7, #12]
 8009d10:	609a      	str	r2, [r3, #8]
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	689a      	ldr	r2, [r3, #8]
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	60da      	str	r2, [r3, #12]
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	689b      	ldr	r3, [r3, #8]
 8009d1e:	687a      	ldr	r2, [r7, #4]
 8009d20:	3204      	adds	r2, #4
 8009d22:	605a      	str	r2, [r3, #4]
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	1d1a      	adds	r2, r3, #4
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	609a      	str	r2, [r3, #8]
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d30:	4613      	mov	r3, r2
 8009d32:	009b      	lsls	r3, r3, #2
 8009d34:	4413      	add	r3, r2
 8009d36:	009b      	lsls	r3, r3, #2
 8009d38:	4a1c      	ldr	r2, [pc, #112]	@ (8009dac <prvAddNewTaskToReadyList+0x128>)
 8009d3a:	441a      	add	r2, r3
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	615a      	str	r2, [r3, #20]
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d44:	4919      	ldr	r1, [pc, #100]	@ (8009dac <prvAddNewTaskToReadyList+0x128>)
 8009d46:	4613      	mov	r3, r2
 8009d48:	009b      	lsls	r3, r3, #2
 8009d4a:	4413      	add	r3, r2
 8009d4c:	009b      	lsls	r3, r3, #2
 8009d4e:	440b      	add	r3, r1
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	687a      	ldr	r2, [r7, #4]
 8009d54:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009d56:	1c59      	adds	r1, r3, #1
 8009d58:	4814      	ldr	r0, [pc, #80]	@ (8009dac <prvAddNewTaskToReadyList+0x128>)
 8009d5a:	4613      	mov	r3, r2
 8009d5c:	009b      	lsls	r3, r3, #2
 8009d5e:	4413      	add	r3, r2
 8009d60:	009b      	lsls	r3, r3, #2
 8009d62:	4403      	add	r3, r0
 8009d64:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8009d66:	f001 ff33 	bl	800bbd0 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8009d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8009da0 <prvAddNewTaskToReadyList+0x11c>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d00e      	beq.n	8009d90 <prvAddNewTaskToReadyList+0x10c>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8009d72:	4b0a      	ldr	r3, [pc, #40]	@ (8009d9c <prvAddNewTaskToReadyList+0x118>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d7c:	429a      	cmp	r2, r3
 8009d7e:	d207      	bcs.n	8009d90 <prvAddNewTaskToReadyList+0x10c>
 8009d80:	4b0b      	ldr	r3, [pc, #44]	@ (8009db0 <prvAddNewTaskToReadyList+0x12c>)
 8009d82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d86:	601a      	str	r2, [r3, #0]
 8009d88:	f3bf 8f4f 	dsb	sy
 8009d8c:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8009d90:	bf00      	nop
 8009d92:	3710      	adds	r7, #16
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}
 8009d98:	20000450 	.word	0x20000450
 8009d9c:	20000350 	.word	0x20000350
 8009da0:	2000045c 	.word	0x2000045c
 8009da4:	2000046c 	.word	0x2000046c
 8009da8:	20000458 	.word	0x20000458
 8009dac:	20000354 	.word	0x20000354
 8009db0:	e000ed04 	.word	0xe000ed04

08009db4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b086      	sub	sp, #24
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        BaseType_t xDeleteTCBInIdleTask = pdFALSE;
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	617b      	str	r3, [r7, #20]
        BaseType_t xTaskIsRunningOrYielding;

        traceENTER_vTaskDelete( xTaskToDelete );

        taskENTER_CRITICAL();
 8009dc0:	f001 fece 	bl	800bb60 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d102      	bne.n	8009dd0 <vTaskDelete+0x1c>
 8009dca:	4b44      	ldr	r3, [pc, #272]	@ (8009edc <vTaskDelete+0x128>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	e000      	b.n	8009dd2 <vTaskDelete+0x1e>
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	613b      	str	r3, [r7, #16]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009dd4:	693b      	ldr	r3, [r7, #16]
 8009dd6:	3304      	adds	r3, #4
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f7fe ffd5 	bl	8008d88 <uxListRemove>
 8009dde:	4603      	mov	r3, r0
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d115      	bne.n	8009e10 <vTaskDelete+0x5c>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009de4:	693b      	ldr	r3, [r7, #16]
 8009de6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009de8:	493d      	ldr	r1, [pc, #244]	@ (8009ee0 <vTaskDelete+0x12c>)
 8009dea:	4613      	mov	r3, r2
 8009dec:	009b      	lsls	r3, r3, #2
 8009dee:	4413      	add	r3, r2
 8009df0:	009b      	lsls	r3, r3, #2
 8009df2:	440b      	add	r3, r1
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d10a      	bne.n	8009e10 <vTaskDelete+0x5c>
 8009dfa:	693b      	ldr	r3, [r7, #16]
 8009dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dfe:	2201      	movs	r2, #1
 8009e00:	fa02 f303 	lsl.w	r3, r2, r3
 8009e04:	43da      	mvns	r2, r3
 8009e06:	4b37      	ldr	r3, [pc, #220]	@ (8009ee4 <vTaskDelete+0x130>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	4013      	ands	r3, r2
 8009e0c:	4a35      	ldr	r2, [pc, #212]	@ (8009ee4 <vTaskDelete+0x130>)
 8009e0e:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009e10:	693b      	ldr	r3, [r7, #16]
 8009e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d004      	beq.n	8009e22 <vTaskDelete+0x6e>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009e18:	693b      	ldr	r3, [r7, #16]
 8009e1a:	3318      	adds	r3, #24
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f7fe ffb3 	bl	8008d88 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8009e22:	4b31      	ldr	r3, [pc, #196]	@ (8009ee8 <vTaskDelete+0x134>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	3301      	adds	r3, #1
 8009e28:	4a2f      	ldr	r2, [pc, #188]	@ (8009ee8 <vTaskDelete+0x134>)
 8009e2a:	6013      	str	r3, [r2, #0]

            /* Use temp variable as distinct sequence points for reading volatile
             * variables prior to a logical operator to ensure compliance with
             * MISRA C 2012 Rule 13.5. */
            xTaskIsRunningOrYielding = taskTASK_IS_RUNNING_OR_SCHEDULED_TO_YIELD( pxTCB );
 8009e2c:	4b2b      	ldr	r3, [pc, #172]	@ (8009edc <vTaskDelete+0x128>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	693a      	ldr	r2, [r7, #16]
 8009e32:	429a      	cmp	r2, r3
 8009e34:	d101      	bne.n	8009e3a <vTaskDelete+0x86>
 8009e36:	2301      	movs	r3, #1
 8009e38:	e000      	b.n	8009e3c <vTaskDelete+0x88>
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	60fb      	str	r3, [r7, #12]

            /* If the task is running (or yielding), we must add it to the
             * termination list so that an idle task can delete it when it is
             * no longer running. */
            if( ( xSchedulerRunning != pdFALSE ) && ( xTaskIsRunningOrYielding != pdFALSE ) )
 8009e3e:	4b2b      	ldr	r3, [pc, #172]	@ (8009eec <vTaskDelete+0x138>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d010      	beq.n	8009e68 <vTaskDelete+0xb4>
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d00d      	beq.n	8009e68 <vTaskDelete+0xb4>
                 * deleted. This cannot complete when the task is still running
                 * on a core, as a context switch to another task is required.
                 * Place the task in the termination list. The idle task will check
                 * the termination list and free up any memory allocated by the
                 * scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8009e4c:	693b      	ldr	r3, [r7, #16]
 8009e4e:	3304      	adds	r3, #4
 8009e50:	4619      	mov	r1, r3
 8009e52:	4827      	ldr	r0, [pc, #156]	@ (8009ef0 <vTaskDelete+0x13c>)
 8009e54:	f7fe ff3b 	bl	8008cce <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8009e58:	4b26      	ldr	r3, [pc, #152]	@ (8009ef4 <vTaskDelete+0x140>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	3301      	adds	r3, #1
 8009e5e:	4a25      	ldr	r2, [pc, #148]	@ (8009ef4 <vTaskDelete+0x140>)
 8009e60:	6013      	str	r3, [r2, #0]
                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );

                /* Delete the task TCB in idle task. */
                xDeleteTCBInIdleTask = pdTRUE;
 8009e62:	2301      	movs	r3, #1
 8009e64:	617b      	str	r3, [r7, #20]
 8009e66:	e006      	b.n	8009e76 <vTaskDelete+0xc2>
                }
                #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8009e68:	4b23      	ldr	r3, [pc, #140]	@ (8009ef8 <vTaskDelete+0x144>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	3b01      	subs	r3, #1
 8009e6e:	4a22      	ldr	r2, [pc, #136]	@ (8009ef8 <vTaskDelete+0x144>)
 8009e70:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8009e72:	f000 fead 	bl	800abd0 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8009e76:	f001 feab 	bl	800bbd0 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( xDeleteTCBInIdleTask != pdTRUE )
 8009e7a:	697b      	ldr	r3, [r7, #20]
 8009e7c:	2b01      	cmp	r3, #1
 8009e7e:	d002      	beq.n	8009e86 <vTaskDelete+0xd2>
        {
            prvDeleteTCB( pxTCB );
 8009e80:	6938      	ldr	r0, [r7, #16]
 8009e82:	f000 fe8f 	bl	800aba4 <prvDeleteTCB>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        #if ( configNUMBER_OF_CORES == 1 )
        {
            if( xSchedulerRunning != pdFALSE )
 8009e86:	4b19      	ldr	r3, [pc, #100]	@ (8009eec <vTaskDelete+0x138>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d021      	beq.n	8009ed2 <vTaskDelete+0x11e>
            {
                if( pxTCB == pxCurrentTCB )
 8009e8e:	4b13      	ldr	r3, [pc, #76]	@ (8009edc <vTaskDelete+0x128>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	693a      	ldr	r2, [r7, #16]
 8009e94:	429a      	cmp	r2, r3
 8009e96:	d11c      	bne.n	8009ed2 <vTaskDelete+0x11e>
                {
                    configASSERT( uxSchedulerSuspended == 0 );
 8009e98:	4b18      	ldr	r3, [pc, #96]	@ (8009efc <vTaskDelete+0x148>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d010      	beq.n	8009ec2 <vTaskDelete+0x10e>
    __asm volatile
 8009ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ea4:	b672      	cpsid	i
 8009ea6:	f383 8811 	msr	BASEPRI, r3
 8009eaa:	f3bf 8f6f 	isb	sy
 8009eae:	f3bf 8f4f 	dsb	sy
 8009eb2:	b662      	cpsie	i
 8009eb4:	60bb      	str	r3, [r7, #8]
}
 8009eb6:	bf00      	nop
 8009eb8:	f640 1114 	movw	r1, #2324	@ 0x914
 8009ebc:	4810      	ldr	r0, [pc, #64]	@ (8009f00 <vTaskDelete+0x14c>)
 8009ebe:	f7f8 fa83 	bl	80023c8 <vAssertCalled>
                    taskYIELD_WITHIN_API();
 8009ec2:	4b10      	ldr	r3, [pc, #64]	@ (8009f04 <vTaskDelete+0x150>)
 8009ec4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ec8:	601a      	str	r2, [r3, #0]
 8009eca:	f3bf 8f4f 	dsb	sy
 8009ece:	f3bf 8f6f 	isb	sy
            }
        }
        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

        traceRETURN_vTaskDelete();
    }
 8009ed2:	bf00      	nop
 8009ed4:	3718      	adds	r7, #24
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}
 8009eda:	bf00      	nop
 8009edc:	20000350 	.word	0x20000350
 8009ee0:	20000354 	.word	0x20000354
 8009ee4:	20000458 	.word	0x20000458
 8009ee8:	2000046c 	.word	0x2000046c
 8009eec:	2000045c 	.word	0x2000045c
 8009ef0:	20000424 	.word	0x20000424
 8009ef4:	20000438 	.word	0x20000438
 8009ef8:	20000450 	.word	0x20000450
 8009efc:	20000478 	.word	0x20000478
 8009f00:	08010b5c 	.word	0x08010b5c
 8009f04:	e000ed04 	.word	0xe000ed04

08009f08 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b084      	sub	sp, #16
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8009f10:	2300      	movs	r3, #0
 8009f12:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d01d      	beq.n	8009f56 <vTaskDelay+0x4e>
        {
            vTaskSuspendAll();
 8009f1a:	f000 f8d3 	bl	800a0c4 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 8009f1e:	4b15      	ldr	r3, [pc, #84]	@ (8009f74 <vTaskDelay+0x6c>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	2b01      	cmp	r3, #1
 8009f24:	d010      	beq.n	8009f48 <vTaskDelay+0x40>
    __asm volatile
 8009f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f2a:	b672      	cpsid	i
 8009f2c:	f383 8811 	msr	BASEPRI, r3
 8009f30:	f3bf 8f6f 	isb	sy
 8009f34:	f3bf 8f4f 	dsb	sy
 8009f38:	b662      	cpsie	i
 8009f3a:	60bb      	str	r3, [r7, #8]
}
 8009f3c:	bf00      	nop
 8009f3e:	f640 118e 	movw	r1, #2446	@ 0x98e
 8009f42:	480d      	ldr	r0, [pc, #52]	@ (8009f78 <vTaskDelay+0x70>)
 8009f44:	f7f8 fa40 	bl	80023c8 <vAssertCalled>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009f48:	2100      	movs	r1, #0
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f001 f8c0 	bl	800b0d0 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8009f50:	f000 f8c6 	bl	800a0e0 <xTaskResumeAll>
 8009f54:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d107      	bne.n	8009f6c <vTaskDelay+0x64>
        {
            taskYIELD_WITHIN_API();
 8009f5c:	4b07      	ldr	r3, [pc, #28]	@ (8009f7c <vTaskDelay+0x74>)
 8009f5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f62:	601a      	str	r2, [r3, #0]
 8009f64:	f3bf 8f4f 	dsb	sy
 8009f68:	f3bf 8f6f 	isb	sy
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
    }
 8009f6c:	bf00      	nop
 8009f6e:	3710      	adds	r7, #16
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}
 8009f74:	20000478 	.word	0x20000478
 8009f78:	08010b5c 	.word	0x08010b5c
 8009f7c:	e000ed04 	.word	0xe000ed04

08009f80 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b08a      	sub	sp, #40	@ 0x28
 8009f84:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 8009f86:	2301      	movs	r3, #1
 8009f88:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8009f8e:	2300      	movs	r3, #0
 8009f90:	617b      	str	r3, [r7, #20]
 8009f92:	e011      	b.n	8009fb8 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8009f94:	4a1d      	ldr	r2, [pc, #116]	@ (800a00c <prvCreateIdleTasks+0x8c>)
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	4413      	add	r3, r2
 8009f9a:	7819      	ldrb	r1, [r3, #0]
 8009f9c:	463a      	mov	r2, r7
 8009f9e:	697b      	ldr	r3, [r7, #20]
 8009fa0:	4413      	add	r3, r2
 8009fa2:	460a      	mov	r2, r1
 8009fa4:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8009fa6:	463a      	mov	r2, r7
 8009fa8:	697b      	ldr	r3, [r7, #20]
 8009faa:	4413      	add	r3, r2
 8009fac:	781b      	ldrb	r3, [r3, #0]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d006      	beq.n	8009fc0 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	3301      	adds	r3, #1
 8009fb6:	617b      	str	r3, [r7, #20]
 8009fb8:	697b      	ldr	r3, [r7, #20]
 8009fba:	2b0f      	cmp	r3, #15
 8009fbc:	ddea      	ble.n	8009f94 <prvCreateIdleTasks+0x14>
 8009fbe:	e000      	b.n	8009fc2 <prvCreateIdleTasks+0x42>
        {
            break;
 8009fc0:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	61bb      	str	r3, [r7, #24]
 8009fc6:	e016      	b.n	8009ff6 <prvCreateIdleTasks+0x76>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8009fc8:	4b11      	ldr	r3, [pc, #68]	@ (800a010 <prvCreateIdleTasks+0x90>)
 8009fca:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 8009fcc:	69bb      	ldr	r3, [r7, #24]
 8009fce:	009b      	lsls	r3, r3, #2
 8009fd0:	4a10      	ldr	r2, [pc, #64]	@ (800a014 <prvCreateIdleTasks+0x94>)
 8009fd2:	4413      	add	r3, r2
 8009fd4:	4639      	mov	r1, r7
 8009fd6:	9301      	str	r3, [sp, #4]
 8009fd8:	2300      	movs	r3, #0
 8009fda:	9300      	str	r3, [sp, #0]
 8009fdc:	2300      	movs	r3, #0
 8009fde:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009fe2:	6938      	ldr	r0, [r7, #16]
 8009fe4:	f7ff fd74 	bl	8009ad0 <xTaskCreate>
 8009fe8:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8009fea:	69fb      	ldr	r3, [r7, #28]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d006      	beq.n	8009ffe <prvCreateIdleTasks+0x7e>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8009ff0:	69bb      	ldr	r3, [r7, #24]
 8009ff2:	3301      	adds	r3, #1
 8009ff4:	61bb      	str	r3, [r7, #24]
 8009ff6:	69bb      	ldr	r3, [r7, #24]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	dde5      	ble.n	8009fc8 <prvCreateIdleTasks+0x48>
 8009ffc:	e000      	b.n	800a000 <prvCreateIdleTasks+0x80>
        {
            break;
 8009ffe:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 800a000:	69fb      	ldr	r3, [r7, #28]
}
 800a002:	4618      	mov	r0, r3
 800a004:	3720      	adds	r7, #32
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}
 800a00a:	bf00      	nop
 800a00c:	08010bf4 	.word	0x08010bf4
 800a010:	0800aa99 	.word	0x0800aa99
 800a014:	20000474 	.word	0x20000474

0800a018 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b084      	sub	sp, #16
 800a01c:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 800a01e:	f7ff ffaf 	bl	8009f80 <prvCreateIdleTasks>
 800a022:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	2b01      	cmp	r3, #1
 800a028:	d102      	bne.n	800a030 <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 800a02a:	f001 f8d3 	bl	800b1d4 <xTimerCreateTimerTask>
 800a02e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	2b01      	cmp	r3, #1
 800a034:	d11d      	bne.n	800a072 <vTaskStartScheduler+0x5a>
    __asm volatile
 800a036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a03a:	b672      	cpsid	i
 800a03c:	f383 8811 	msr	BASEPRI, r3
 800a040:	f3bf 8f6f 	isb	sy
 800a044:	f3bf 8f4f 	dsb	sy
 800a048:	b662      	cpsie	i
 800a04a:	60bb      	str	r3, [r7, #8]
}
 800a04c:	bf00      	nop

        #if ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 )
        {
            /* Switch C-Runtime's TLS Block to point to the TLS
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 800a04e:	4b16      	ldr	r3, [pc, #88]	@ (800a0a8 <vTaskStartScheduler+0x90>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	335c      	adds	r3, #92	@ 0x5c
 800a054:	4a15      	ldr	r2, [pc, #84]	@ (800a0ac <vTaskStartScheduler+0x94>)
 800a056:	6013      	str	r3, [r2, #0]
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800a058:	4b15      	ldr	r3, [pc, #84]	@ (800a0b0 <vTaskStartScheduler+0x98>)
 800a05a:	f04f 32ff 	mov.w	r2, #4294967295
 800a05e:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800a060:	4b14      	ldr	r3, [pc, #80]	@ (800a0b4 <vTaskStartScheduler+0x9c>)
 800a062:	2201      	movs	r2, #1
 800a064:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a066:	4b14      	ldr	r3, [pc, #80]	@ (800a0b8 <vTaskStartScheduler+0xa0>)
 800a068:	2200      	movs	r2, #0
 800a06a:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 800a06c:	f001 fc9a 	bl	800b9a4 <xPortStartScheduler>
 800a070:	e014      	b.n	800a09c <vTaskStartScheduler+0x84>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a078:	d110      	bne.n	800a09c <vTaskStartScheduler+0x84>
    __asm volatile
 800a07a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a07e:	b672      	cpsid	i
 800a080:	f383 8811 	msr	BASEPRI, r3
 800a084:	f3bf 8f6f 	isb	sy
 800a088:	f3bf 8f4f 	dsb	sy
 800a08c:	b662      	cpsie	i
 800a08e:	607b      	str	r3, [r7, #4]
}
 800a090:	bf00      	nop
 800a092:	f640 61a9 	movw	r1, #3753	@ 0xea9
 800a096:	4809      	ldr	r0, [pc, #36]	@ (800a0bc <vTaskStartScheduler+0xa4>)
 800a098:	f7f8 f996 	bl	80023c8 <vAssertCalled>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800a09c:	4b08      	ldr	r3, [pc, #32]	@ (800a0c0 <vTaskStartScheduler+0xa8>)
 800a09e:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 800a0a0:	bf00      	nop
 800a0a2:	3710      	adds	r7, #16
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}
 800a0a8:	20000350 	.word	0x20000350
 800a0ac:	2000018c 	.word	0x2000018c
 800a0b0:	20000470 	.word	0x20000470
 800a0b4:	2000045c 	.word	0x2000045c
 800a0b8:	20000454 	.word	0x20000454
 800a0bc:	08010b5c 	.word	0x08010b5c
 800a0c0:	08010f8c 	.word	0x08010f8c

0800a0c4 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 800a0c8:	4b04      	ldr	r3, [pc, #16]	@ (800a0dc <vTaskSuspendAll+0x18>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	3301      	adds	r3, #1
 800a0ce:	4a03      	ldr	r2, [pc, #12]	@ (800a0dc <vTaskSuspendAll+0x18>)
 800a0d0:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 800a0d2:	bf00      	nop
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0da:	4770      	bx	lr
 800a0dc:	20000478 	.word	0x20000478

0800a0e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b088      	sub	sp, #32
 800a0e4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 800a0ee:	f001 fd37 	bl	800bb60 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 800a0f6:	4b78      	ldr	r3, [pc, #480]	@ (800a2d8 <xTaskResumeAll+0x1f8>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d110      	bne.n	800a120 <xTaskResumeAll+0x40>
    __asm volatile
 800a0fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a102:	b672      	cpsid	i
 800a104:	f383 8811 	msr	BASEPRI, r3
 800a108:	f3bf 8f6f 	isb	sy
 800a10c:	f3bf 8f4f 	dsb	sy
 800a110:	b662      	cpsie	i
 800a112:	603b      	str	r3, [r7, #0]
}
 800a114:	bf00      	nop
 800a116:	f640 718b 	movw	r1, #3979	@ 0xf8b
 800a11a:	4870      	ldr	r0, [pc, #448]	@ (800a2dc <xTaskResumeAll+0x1fc>)
 800a11c:	f7f8 f954 	bl	80023c8 <vAssertCalled>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 800a120:	4b6d      	ldr	r3, [pc, #436]	@ (800a2d8 <xTaskResumeAll+0x1f8>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	3b01      	subs	r3, #1
 800a126:	4a6c      	ldr	r2, [pc, #432]	@ (800a2d8 <xTaskResumeAll+0x1f8>)
 800a128:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800a12a:	4b6b      	ldr	r3, [pc, #428]	@ (800a2d8 <xTaskResumeAll+0x1f8>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	f040 80ca 	bne.w	800a2c8 <xTaskResumeAll+0x1e8>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a134:	4b6a      	ldr	r3, [pc, #424]	@ (800a2e0 <xTaskResumeAll+0x200>)
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	f000 80c5 	beq.w	800a2c8 <xTaskResumeAll+0x1e8>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a13e:	e08e      	b.n	800a25e <xTaskResumeAll+0x17e>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800a140:	4b68      	ldr	r3, [pc, #416]	@ (800a2e4 <xTaskResumeAll+0x204>)
 800a142:	68db      	ldr	r3, [r3, #12]
 800a144:	68db      	ldr	r3, [r3, #12]
 800a146:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800a148:	69fb      	ldr	r3, [r7, #28]
 800a14a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a14c:	60fb      	str	r3, [r7, #12]
 800a14e:	69fb      	ldr	r3, [r7, #28]
 800a150:	69db      	ldr	r3, [r3, #28]
 800a152:	69fa      	ldr	r2, [r7, #28]
 800a154:	6a12      	ldr	r2, [r2, #32]
 800a156:	609a      	str	r2, [r3, #8]
 800a158:	69fb      	ldr	r3, [r7, #28]
 800a15a:	6a1b      	ldr	r3, [r3, #32]
 800a15c:	69fa      	ldr	r2, [r7, #28]
 800a15e:	69d2      	ldr	r2, [r2, #28]
 800a160:	605a      	str	r2, [r3, #4]
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	685a      	ldr	r2, [r3, #4]
 800a166:	69fb      	ldr	r3, [r7, #28]
 800a168:	3318      	adds	r3, #24
 800a16a:	429a      	cmp	r2, r3
 800a16c:	d103      	bne.n	800a176 <xTaskResumeAll+0x96>
 800a16e:	69fb      	ldr	r3, [r7, #28]
 800a170:	6a1a      	ldr	r2, [r3, #32]
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	605a      	str	r2, [r3, #4]
 800a176:	69fb      	ldr	r3, [r7, #28]
 800a178:	2200      	movs	r2, #0
 800a17a:	629a      	str	r2, [r3, #40]	@ 0x28
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	1e5a      	subs	r2, r3, #1
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800a186:	69fb      	ldr	r3, [r7, #28]
 800a188:	695b      	ldr	r3, [r3, #20]
 800a18a:	60bb      	str	r3, [r7, #8]
 800a18c:	69fb      	ldr	r3, [r7, #28]
 800a18e:	689b      	ldr	r3, [r3, #8]
 800a190:	69fa      	ldr	r2, [r7, #28]
 800a192:	68d2      	ldr	r2, [r2, #12]
 800a194:	609a      	str	r2, [r3, #8]
 800a196:	69fb      	ldr	r3, [r7, #28]
 800a198:	68db      	ldr	r3, [r3, #12]
 800a19a:	69fa      	ldr	r2, [r7, #28]
 800a19c:	6892      	ldr	r2, [r2, #8]
 800a19e:	605a      	str	r2, [r3, #4]
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	685a      	ldr	r2, [r3, #4]
 800a1a4:	69fb      	ldr	r3, [r7, #28]
 800a1a6:	3304      	adds	r3, #4
 800a1a8:	429a      	cmp	r2, r3
 800a1aa:	d103      	bne.n	800a1b4 <xTaskResumeAll+0xd4>
 800a1ac:	69fb      	ldr	r3, [r7, #28]
 800a1ae:	68da      	ldr	r2, [r3, #12]
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	605a      	str	r2, [r3, #4]
 800a1b4:	69fb      	ldr	r3, [r7, #28]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	615a      	str	r2, [r3, #20]
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	1e5a      	subs	r2, r3, #1
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 800a1c4:	69fb      	ldr	r3, [r7, #28]
 800a1c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1c8:	2201      	movs	r2, #1
 800a1ca:	409a      	lsls	r2, r3
 800a1cc:	4b46      	ldr	r3, [pc, #280]	@ (800a2e8 <xTaskResumeAll+0x208>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	4313      	orrs	r3, r2
 800a1d2:	4a45      	ldr	r2, [pc, #276]	@ (800a2e8 <xTaskResumeAll+0x208>)
 800a1d4:	6013      	str	r3, [r2, #0]
 800a1d6:	69fb      	ldr	r3, [r7, #28]
 800a1d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1da:	4944      	ldr	r1, [pc, #272]	@ (800a2ec <xTaskResumeAll+0x20c>)
 800a1dc:	4613      	mov	r3, r2
 800a1de:	009b      	lsls	r3, r3, #2
 800a1e0:	4413      	add	r3, r2
 800a1e2:	009b      	lsls	r3, r3, #2
 800a1e4:	440b      	add	r3, r1
 800a1e6:	3304      	adds	r3, #4
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	607b      	str	r3, [r7, #4]
 800a1ec:	69fb      	ldr	r3, [r7, #28]
 800a1ee:	687a      	ldr	r2, [r7, #4]
 800a1f0:	609a      	str	r2, [r3, #8]
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	689a      	ldr	r2, [r3, #8]
 800a1f6:	69fb      	ldr	r3, [r7, #28]
 800a1f8:	60da      	str	r2, [r3, #12]
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	689b      	ldr	r3, [r3, #8]
 800a1fe:	69fa      	ldr	r2, [r7, #28]
 800a200:	3204      	adds	r2, #4
 800a202:	605a      	str	r2, [r3, #4]
 800a204:	69fb      	ldr	r3, [r7, #28]
 800a206:	1d1a      	adds	r2, r3, #4
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	609a      	str	r2, [r3, #8]
 800a20c:	69fb      	ldr	r3, [r7, #28]
 800a20e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a210:	4613      	mov	r3, r2
 800a212:	009b      	lsls	r3, r3, #2
 800a214:	4413      	add	r3, r2
 800a216:	009b      	lsls	r3, r3, #2
 800a218:	4a34      	ldr	r2, [pc, #208]	@ (800a2ec <xTaskResumeAll+0x20c>)
 800a21a:	441a      	add	r2, r3
 800a21c:	69fb      	ldr	r3, [r7, #28]
 800a21e:	615a      	str	r2, [r3, #20]
 800a220:	69fb      	ldr	r3, [r7, #28]
 800a222:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a224:	4931      	ldr	r1, [pc, #196]	@ (800a2ec <xTaskResumeAll+0x20c>)
 800a226:	4613      	mov	r3, r2
 800a228:	009b      	lsls	r3, r3, #2
 800a22a:	4413      	add	r3, r2
 800a22c:	009b      	lsls	r3, r3, #2
 800a22e:	440b      	add	r3, r1
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	69fa      	ldr	r2, [r7, #28]
 800a234:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800a236:	1c59      	adds	r1, r3, #1
 800a238:	482c      	ldr	r0, [pc, #176]	@ (800a2ec <xTaskResumeAll+0x20c>)
 800a23a:	4613      	mov	r3, r2
 800a23c:	009b      	lsls	r3, r3, #2
 800a23e:	4413      	add	r3, r2
 800a240:	009b      	lsls	r3, r3, #2
 800a242:	4403      	add	r3, r0
 800a244:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a246:	69fb      	ldr	r3, [r7, #28]
 800a248:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a24a:	4b29      	ldr	r3, [pc, #164]	@ (800a2f0 <xTaskResumeAll+0x210>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a250:	429a      	cmp	r2, r3
 800a252:	d904      	bls.n	800a25e <xTaskResumeAll+0x17e>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 800a254:	4a27      	ldr	r2, [pc, #156]	@ (800a2f4 <xTaskResumeAll+0x214>)
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	2101      	movs	r1, #1
 800a25a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a25e:	4b21      	ldr	r3, [pc, #132]	@ (800a2e4 <xTaskResumeAll+0x204>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	2b00      	cmp	r3, #0
 800a264:	f47f af6c 	bne.w	800a140 <xTaskResumeAll+0x60>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 800a268:	69fb      	ldr	r3, [r7, #28]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d001      	beq.n	800a272 <xTaskResumeAll+0x192>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 800a26e:	f000 fcaf 	bl	800abd0 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a272:	4b21      	ldr	r3, [pc, #132]	@ (800a2f8 <xTaskResumeAll+0x218>)
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d012      	beq.n	800a2a4 <xTaskResumeAll+0x1c4>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 800a27e:	f000 f84f 	bl	800a320 <xTaskIncrementTick>
 800a282:	4603      	mov	r3, r0
 800a284:	2b00      	cmp	r3, #0
 800a286:	d004      	beq.n	800a292 <xTaskResumeAll+0x1b2>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 800a288:	4a1a      	ldr	r2, [pc, #104]	@ (800a2f4 <xTaskResumeAll+0x214>)
 800a28a:	693b      	ldr	r3, [r7, #16]
 800a28c:	2101      	movs	r1, #1
 800a28e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	3b01      	subs	r3, #1
 800a296:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 800a298:	697b      	ldr	r3, [r7, #20]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d1ef      	bne.n	800a27e <xTaskResumeAll+0x19e>

                            xPendedTicks = 0;
 800a29e:	4b16      	ldr	r3, [pc, #88]	@ (800a2f8 <xTaskResumeAll+0x218>)
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 800a2a4:	4a13      	ldr	r2, [pc, #76]	@ (800a2f4 <xTaskResumeAll+0x214>)
 800a2a6:	693b      	ldr	r3, [r7, #16]
 800a2a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d00b      	beq.n	800a2c8 <xTaskResumeAll+0x1e8>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 800a2b4:	4b0e      	ldr	r3, [pc, #56]	@ (800a2f0 <xTaskResumeAll+0x210>)
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	4b10      	ldr	r3, [pc, #64]	@ (800a2fc <xTaskResumeAll+0x21c>)
 800a2ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a2be:	601a      	str	r2, [r3, #0]
 800a2c0:	f3bf 8f4f 	dsb	sy
 800a2c4:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800a2c8:	f001 fc82 	bl	800bbd0 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 800a2cc:	69bb      	ldr	r3, [r7, #24]
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3720      	adds	r7, #32
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}
 800a2d6:	bf00      	nop
 800a2d8:	20000478 	.word	0x20000478
 800a2dc:	08010b5c 	.word	0x08010b5c
 800a2e0:	20000450 	.word	0x20000450
 800a2e4:	20000410 	.word	0x20000410
 800a2e8:	20000458 	.word	0x20000458
 800a2ec:	20000354 	.word	0x20000354
 800a2f0:	20000350 	.word	0x20000350
 800a2f4:	20000464 	.word	0x20000464
 800a2f8:	20000460 	.word	0x20000460
 800a2fc:	e000ed04 	.word	0xe000ed04

0800a300 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a300:	b480      	push	{r7}
 800a302:	b083      	sub	sp, #12
 800a304:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800a306:	4b05      	ldr	r3, [pc, #20]	@ (800a31c <xTaskGetTickCount+0x1c>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );

    return xTicks;
 800a30c:	687b      	ldr	r3, [r7, #4]
}
 800a30e:	4618      	mov	r0, r3
 800a310:	370c      	adds	r7, #12
 800a312:	46bd      	mov	sp, r7
 800a314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a318:	4770      	bx	lr
 800a31a:	bf00      	nop
 800a31c:	20000454 	.word	0x20000454

0800a320 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b08a      	sub	sp, #40	@ 0x28
 800a324:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800a326:	2300      	movs	r3, #0
 800a328:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800a32a:	4b81      	ldr	r3, [pc, #516]	@ (800a530 <xTaskIncrementTick+0x210>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	f040 80f4 	bne.w	800a51c <xTaskIncrementTick+0x1fc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a334:	4b7f      	ldr	r3, [pc, #508]	@ (800a534 <xTaskIncrementTick+0x214>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	3301      	adds	r3, #1
 800a33a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800a33c:	4a7d      	ldr	r2, [pc, #500]	@ (800a534 <xTaskIncrementTick+0x214>)
 800a33e:	6a3b      	ldr	r3, [r7, #32]
 800a340:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 800a342:	6a3b      	ldr	r3, [r7, #32]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d126      	bne.n	800a396 <xTaskIncrementTick+0x76>
        {
            taskSWITCH_DELAYED_LISTS();
 800a348:	4b7b      	ldr	r3, [pc, #492]	@ (800a538 <xTaskIncrementTick+0x218>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d010      	beq.n	800a374 <xTaskIncrementTick+0x54>
    __asm volatile
 800a352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a356:	b672      	cpsid	i
 800a358:	f383 8811 	msr	BASEPRI, r3
 800a35c:	f3bf 8f6f 	isb	sy
 800a360:	f3bf 8f4f 	dsb	sy
 800a364:	b662      	cpsie	i
 800a366:	607b      	str	r3, [r7, #4]
}
 800a368:	bf00      	nop
 800a36a:	f241 215f 	movw	r1, #4703	@ 0x125f
 800a36e:	4873      	ldr	r0, [pc, #460]	@ (800a53c <xTaskIncrementTick+0x21c>)
 800a370:	f7f8 f82a 	bl	80023c8 <vAssertCalled>
 800a374:	4b70      	ldr	r3, [pc, #448]	@ (800a538 <xTaskIncrementTick+0x218>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	61fb      	str	r3, [r7, #28]
 800a37a:	4b71      	ldr	r3, [pc, #452]	@ (800a540 <xTaskIncrementTick+0x220>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	4a6e      	ldr	r2, [pc, #440]	@ (800a538 <xTaskIncrementTick+0x218>)
 800a380:	6013      	str	r3, [r2, #0]
 800a382:	4a6f      	ldr	r2, [pc, #444]	@ (800a540 <xTaskIncrementTick+0x220>)
 800a384:	69fb      	ldr	r3, [r7, #28]
 800a386:	6013      	str	r3, [r2, #0]
 800a388:	4b6e      	ldr	r3, [pc, #440]	@ (800a544 <xTaskIncrementTick+0x224>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	3301      	adds	r3, #1
 800a38e:	4a6d      	ldr	r2, [pc, #436]	@ (800a544 <xTaskIncrementTick+0x224>)
 800a390:	6013      	str	r3, [r2, #0]
 800a392:	f000 fc1d 	bl	800abd0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800a396:	4b6c      	ldr	r3, [pc, #432]	@ (800a548 <xTaskIncrementTick+0x228>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	6a3a      	ldr	r2, [r7, #32]
 800a39c:	429a      	cmp	r2, r3
 800a39e:	f0c0 80a8 	bcc.w	800a4f2 <xTaskIncrementTick+0x1d2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a3a2:	4b65      	ldr	r3, [pc, #404]	@ (800a538 <xTaskIncrementTick+0x218>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d104      	bne.n	800a3b6 <xTaskIncrementTick+0x96>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 800a3ac:	4b66      	ldr	r3, [pc, #408]	@ (800a548 <xTaskIncrementTick+0x228>)
 800a3ae:	f04f 32ff 	mov.w	r2, #4294967295
 800a3b2:	601a      	str	r2, [r3, #0]
                    break;
 800a3b4:	e09d      	b.n	800a4f2 <xTaskIncrementTick+0x1d2>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a3b6:	4b60      	ldr	r3, [pc, #384]	@ (800a538 <xTaskIncrementTick+0x218>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	68db      	ldr	r3, [r3, #12]
 800a3bc:	68db      	ldr	r3, [r3, #12]
 800a3be:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a3c0:	69bb      	ldr	r3, [r7, #24]
 800a3c2:	685b      	ldr	r3, [r3, #4]
 800a3c4:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800a3c6:	6a3a      	ldr	r2, [r7, #32]
 800a3c8:	697b      	ldr	r3, [r7, #20]
 800a3ca:	429a      	cmp	r2, r3
 800a3cc:	d203      	bcs.n	800a3d6 <xTaskIncrementTick+0xb6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800a3ce:	4a5e      	ldr	r2, [pc, #376]	@ (800a548 <xTaskIncrementTick+0x228>)
 800a3d0:	697b      	ldr	r3, [r7, #20]
 800a3d2:	6013      	str	r3, [r2, #0]
                        break;
 800a3d4:	e08d      	b.n	800a4f2 <xTaskIncrementTick+0x1d2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800a3d6:	69bb      	ldr	r3, [r7, #24]
 800a3d8:	695b      	ldr	r3, [r3, #20]
 800a3da:	613b      	str	r3, [r7, #16]
 800a3dc:	69bb      	ldr	r3, [r7, #24]
 800a3de:	689b      	ldr	r3, [r3, #8]
 800a3e0:	69ba      	ldr	r2, [r7, #24]
 800a3e2:	68d2      	ldr	r2, [r2, #12]
 800a3e4:	609a      	str	r2, [r3, #8]
 800a3e6:	69bb      	ldr	r3, [r7, #24]
 800a3e8:	68db      	ldr	r3, [r3, #12]
 800a3ea:	69ba      	ldr	r2, [r7, #24]
 800a3ec:	6892      	ldr	r2, [r2, #8]
 800a3ee:	605a      	str	r2, [r3, #4]
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	685a      	ldr	r2, [r3, #4]
 800a3f4:	69bb      	ldr	r3, [r7, #24]
 800a3f6:	3304      	adds	r3, #4
 800a3f8:	429a      	cmp	r2, r3
 800a3fa:	d103      	bne.n	800a404 <xTaskIncrementTick+0xe4>
 800a3fc:	69bb      	ldr	r3, [r7, #24]
 800a3fe:	68da      	ldr	r2, [r3, #12]
 800a400:	693b      	ldr	r3, [r7, #16]
 800a402:	605a      	str	r2, [r3, #4]
 800a404:	69bb      	ldr	r3, [r7, #24]
 800a406:	2200      	movs	r2, #0
 800a408:	615a      	str	r2, [r3, #20]
 800a40a:	693b      	ldr	r3, [r7, #16]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	1e5a      	subs	r2, r3, #1
 800a410:	693b      	ldr	r3, [r7, #16]
 800a412:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a414:	69bb      	ldr	r3, [r7, #24]
 800a416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d01e      	beq.n	800a45a <xTaskIncrementTick+0x13a>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800a41c:	69bb      	ldr	r3, [r7, #24]
 800a41e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a420:	60fb      	str	r3, [r7, #12]
 800a422:	69bb      	ldr	r3, [r7, #24]
 800a424:	69db      	ldr	r3, [r3, #28]
 800a426:	69ba      	ldr	r2, [r7, #24]
 800a428:	6a12      	ldr	r2, [r2, #32]
 800a42a:	609a      	str	r2, [r3, #8]
 800a42c:	69bb      	ldr	r3, [r7, #24]
 800a42e:	6a1b      	ldr	r3, [r3, #32]
 800a430:	69ba      	ldr	r2, [r7, #24]
 800a432:	69d2      	ldr	r2, [r2, #28]
 800a434:	605a      	str	r2, [r3, #4]
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	685a      	ldr	r2, [r3, #4]
 800a43a:	69bb      	ldr	r3, [r7, #24]
 800a43c:	3318      	adds	r3, #24
 800a43e:	429a      	cmp	r2, r3
 800a440:	d103      	bne.n	800a44a <xTaskIncrementTick+0x12a>
 800a442:	69bb      	ldr	r3, [r7, #24]
 800a444:	6a1a      	ldr	r2, [r3, #32]
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	605a      	str	r2, [r3, #4]
 800a44a:	69bb      	ldr	r3, [r7, #24]
 800a44c:	2200      	movs	r2, #0
 800a44e:	629a      	str	r2, [r3, #40]	@ 0x28
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	1e5a      	subs	r2, r3, #1
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800a45a:	69bb      	ldr	r3, [r7, #24]
 800a45c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a45e:	2201      	movs	r2, #1
 800a460:	409a      	lsls	r2, r3
 800a462:	4b3a      	ldr	r3, [pc, #232]	@ (800a54c <xTaskIncrementTick+0x22c>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	4313      	orrs	r3, r2
 800a468:	4a38      	ldr	r2, [pc, #224]	@ (800a54c <xTaskIncrementTick+0x22c>)
 800a46a:	6013      	str	r3, [r2, #0]
 800a46c:	69bb      	ldr	r3, [r7, #24]
 800a46e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a470:	4937      	ldr	r1, [pc, #220]	@ (800a550 <xTaskIncrementTick+0x230>)
 800a472:	4613      	mov	r3, r2
 800a474:	009b      	lsls	r3, r3, #2
 800a476:	4413      	add	r3, r2
 800a478:	009b      	lsls	r3, r3, #2
 800a47a:	440b      	add	r3, r1
 800a47c:	3304      	adds	r3, #4
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	60bb      	str	r3, [r7, #8]
 800a482:	69bb      	ldr	r3, [r7, #24]
 800a484:	68ba      	ldr	r2, [r7, #8]
 800a486:	609a      	str	r2, [r3, #8]
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	689a      	ldr	r2, [r3, #8]
 800a48c:	69bb      	ldr	r3, [r7, #24]
 800a48e:	60da      	str	r2, [r3, #12]
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	689b      	ldr	r3, [r3, #8]
 800a494:	69ba      	ldr	r2, [r7, #24]
 800a496:	3204      	adds	r2, #4
 800a498:	605a      	str	r2, [r3, #4]
 800a49a:	69bb      	ldr	r3, [r7, #24]
 800a49c:	1d1a      	adds	r2, r3, #4
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	609a      	str	r2, [r3, #8]
 800a4a2:	69bb      	ldr	r3, [r7, #24]
 800a4a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4a6:	4613      	mov	r3, r2
 800a4a8:	009b      	lsls	r3, r3, #2
 800a4aa:	4413      	add	r3, r2
 800a4ac:	009b      	lsls	r3, r3, #2
 800a4ae:	4a28      	ldr	r2, [pc, #160]	@ (800a550 <xTaskIncrementTick+0x230>)
 800a4b0:	441a      	add	r2, r3
 800a4b2:	69bb      	ldr	r3, [r7, #24]
 800a4b4:	615a      	str	r2, [r3, #20]
 800a4b6:	69bb      	ldr	r3, [r7, #24]
 800a4b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4ba:	4925      	ldr	r1, [pc, #148]	@ (800a550 <xTaskIncrementTick+0x230>)
 800a4bc:	4613      	mov	r3, r2
 800a4be:	009b      	lsls	r3, r3, #2
 800a4c0:	4413      	add	r3, r2
 800a4c2:	009b      	lsls	r3, r3, #2
 800a4c4:	440b      	add	r3, r1
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	69ba      	ldr	r2, [r7, #24]
 800a4ca:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800a4cc:	1c59      	adds	r1, r3, #1
 800a4ce:	4820      	ldr	r0, [pc, #128]	@ (800a550 <xTaskIncrementTick+0x230>)
 800a4d0:	4613      	mov	r3, r2
 800a4d2:	009b      	lsls	r3, r3, #2
 800a4d4:	4413      	add	r3, r2
 800a4d6:	009b      	lsls	r3, r3, #2
 800a4d8:	4403      	add	r3, r0
 800a4da:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a4dc:	69bb      	ldr	r3, [r7, #24]
 800a4de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4e0:	4b1c      	ldr	r3, [pc, #112]	@ (800a554 <xTaskIncrementTick+0x234>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4e6:	429a      	cmp	r2, r3
 800a4e8:	f67f af5b 	bls.w	800a3a2 <xTaskIncrementTick+0x82>
                            {
                                xSwitchRequired = pdTRUE;
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a4f0:	e757      	b.n	800a3a2 <xTaskIncrementTick+0x82>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 800a4f2:	4b18      	ldr	r3, [pc, #96]	@ (800a554 <xTaskIncrementTick+0x234>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4f8:	4915      	ldr	r1, [pc, #84]	@ (800a550 <xTaskIncrementTick+0x230>)
 800a4fa:	4613      	mov	r3, r2
 800a4fc:	009b      	lsls	r3, r3, #2
 800a4fe:	4413      	add	r3, r2
 800a500:	009b      	lsls	r3, r3, #2
 800a502:	440b      	add	r3, r1
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	2b01      	cmp	r3, #1
 800a508:	d901      	bls.n	800a50e <xTaskIncrementTick+0x1ee>
                {
                    xSwitchRequired = pdTRUE;
 800a50a:	2301      	movs	r3, #1
 800a50c:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 800a50e:	4b12      	ldr	r3, [pc, #72]	@ (800a558 <xTaskIncrementTick+0x238>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d007      	beq.n	800a526 <xTaskIncrementTick+0x206>
                {
                    xSwitchRequired = pdTRUE;
 800a516:	2301      	movs	r3, #1
 800a518:	627b      	str	r3, [r7, #36]	@ 0x24
 800a51a:	e004      	b.n	800a526 <xTaskIncrementTick+0x206>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 800a51c:	4b0f      	ldr	r3, [pc, #60]	@ (800a55c <xTaskIncrementTick+0x23c>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	3301      	adds	r3, #1
 800a522:	4a0e      	ldr	r2, [pc, #56]	@ (800a55c <xTaskIncrementTick+0x23c>)
 800a524:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 800a526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a528:	4618      	mov	r0, r3
 800a52a:	3728      	adds	r7, #40	@ 0x28
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bd80      	pop	{r7, pc}
 800a530:	20000478 	.word	0x20000478
 800a534:	20000454 	.word	0x20000454
 800a538:	20000408 	.word	0x20000408
 800a53c:	08010b5c 	.word	0x08010b5c
 800a540:	2000040c 	.word	0x2000040c
 800a544:	20000468 	.word	0x20000468
 800a548:	20000470 	.word	0x20000470
 800a54c:	20000458 	.word	0x20000458
 800a550:	20000354 	.word	0x20000354
 800a554:	20000350 	.word	0x20000350
 800a558:	20000464 	.word	0x20000464
 800a55c:	20000460 	.word	0x20000460

0800a560 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 800a560:	b580      	push	{r7, lr}
 800a562:	b088      	sub	sp, #32
 800a564:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 800a566:	4b4c      	ldr	r3, [pc, #304]	@ (800a698 <vTaskSwitchContext+0x138>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d003      	beq.n	800a576 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 800a56e:	4b4b      	ldr	r3, [pc, #300]	@ (800a69c <vTaskSwitchContext+0x13c>)
 800a570:	2201      	movs	r2, #1
 800a572:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 800a574:	e08c      	b.n	800a690 <vTaskSwitchContext+0x130>
            xYieldPendings[ 0 ] = pdFALSE;
 800a576:	4b49      	ldr	r3, [pc, #292]	@ (800a69c <vTaskSwitchContext+0x13c>)
 800a578:	2200      	movs	r2, #0
 800a57a:	601a      	str	r2, [r3, #0]
                    ulTotalRunTime[ 0 ] = portGET_RUN_TIME_COUNTER_VALUE();
 800a57c:	f7ff fec0 	bl	800a300 <xTaskGetTickCount>
 800a580:	4603      	mov	r3, r0
 800a582:	4a47      	ldr	r2, [pc, #284]	@ (800a6a0 <vTaskSwitchContext+0x140>)
 800a584:	6013      	str	r3, [r2, #0]
                if( ulTotalRunTime[ 0 ] > ulTaskSwitchedInTime[ 0 ] )
 800a586:	4b46      	ldr	r3, [pc, #280]	@ (800a6a0 <vTaskSwitchContext+0x140>)
 800a588:	681a      	ldr	r2, [r3, #0]
 800a58a:	4b46      	ldr	r3, [pc, #280]	@ (800a6a4 <vTaskSwitchContext+0x144>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	429a      	cmp	r2, r3
 800a590:	d909      	bls.n	800a5a6 <vTaskSwitchContext+0x46>
                    pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime[ 0 ] - ulTaskSwitchedInTime[ 0 ] );
 800a592:	4b43      	ldr	r3, [pc, #268]	@ (800a6a0 <vTaskSwitchContext+0x140>)
 800a594:	681a      	ldr	r2, [r3, #0]
 800a596:	4b43      	ldr	r3, [pc, #268]	@ (800a6a4 <vTaskSwitchContext+0x144>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	1ad1      	subs	r1, r2, r3
 800a59c:	4b42      	ldr	r3, [pc, #264]	@ (800a6a8 <vTaskSwitchContext+0x148>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a5a2:	440a      	add	r2, r1
 800a5a4:	659a      	str	r2, [r3, #88]	@ 0x58
                ulTaskSwitchedInTime[ 0 ] = ulTotalRunTime[ 0 ];
 800a5a6:	4b3e      	ldr	r3, [pc, #248]	@ (800a6a0 <vTaskSwitchContext+0x140>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	4a3e      	ldr	r2, [pc, #248]	@ (800a6a4 <vTaskSwitchContext+0x144>)
 800a5ac:	6013      	str	r3, [r2, #0]
            taskCHECK_FOR_STACK_OVERFLOW();
 800a5ae:	4b3e      	ldr	r3, [pc, #248]	@ (800a6a8 <vTaskSwitchContext+0x148>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5b4:	61fb      	str	r3, [r7, #28]
 800a5b6:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 800a5ba:	61bb      	str	r3, [r7, #24]
 800a5bc:	69fb      	ldr	r3, [r7, #28]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	69ba      	ldr	r2, [r7, #24]
 800a5c2:	429a      	cmp	r2, r3
 800a5c4:	d111      	bne.n	800a5ea <vTaskSwitchContext+0x8a>
 800a5c6:	69fb      	ldr	r3, [r7, #28]
 800a5c8:	3304      	adds	r3, #4
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	69ba      	ldr	r2, [r7, #24]
 800a5ce:	429a      	cmp	r2, r3
 800a5d0:	d10b      	bne.n	800a5ea <vTaskSwitchContext+0x8a>
 800a5d2:	69fb      	ldr	r3, [r7, #28]
 800a5d4:	3308      	adds	r3, #8
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	69ba      	ldr	r2, [r7, #24]
 800a5da:	429a      	cmp	r2, r3
 800a5dc:	d105      	bne.n	800a5ea <vTaskSwitchContext+0x8a>
 800a5de:	69fb      	ldr	r3, [r7, #28]
 800a5e0:	330c      	adds	r3, #12
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	69ba      	ldr	r2, [r7, #24]
 800a5e6:	429a      	cmp	r2, r3
 800a5e8:	d009      	beq.n	800a5fe <vTaskSwitchContext+0x9e>
 800a5ea:	4b2f      	ldr	r3, [pc, #188]	@ (800a6a8 <vTaskSwitchContext+0x148>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	3334      	adds	r3, #52	@ 0x34
 800a5f0:	617b      	str	r3, [r7, #20]
 800a5f2:	4b2d      	ldr	r3, [pc, #180]	@ (800a6a8 <vTaskSwitchContext+0x148>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	6979      	ldr	r1, [r7, #20]
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f7f7 faaf 	bl	8001b5c <vApplicationStackOverflowHook>
            taskSELECT_HIGHEST_PRIORITY_TASK();
 800a5fe:	4b2b      	ldr	r3, [pc, #172]	@ (800a6ac <vTaskSwitchContext+0x14c>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	60bb      	str	r3, [r7, #8]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	fab3 f383 	clz	r3, r3
 800a60a:	71fb      	strb	r3, [r7, #7]
        return ucReturn;
 800a60c:	79fb      	ldrb	r3, [r7, #7]
 800a60e:	f1c3 031f 	rsb	r3, r3, #31
 800a612:	613b      	str	r3, [r7, #16]
 800a614:	4926      	ldr	r1, [pc, #152]	@ (800a6b0 <vTaskSwitchContext+0x150>)
 800a616:	693a      	ldr	r2, [r7, #16]
 800a618:	4613      	mov	r3, r2
 800a61a:	009b      	lsls	r3, r3, #2
 800a61c:	4413      	add	r3, r2
 800a61e:	009b      	lsls	r3, r3, #2
 800a620:	440b      	add	r3, r1
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d110      	bne.n	800a64a <vTaskSwitchContext+0xea>
    __asm volatile
 800a628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a62c:	b672      	cpsid	i
 800a62e:	f383 8811 	msr	BASEPRI, r3
 800a632:	f3bf 8f6f 	isb	sy
 800a636:	f3bf 8f4f 	dsb	sy
 800a63a:	b662      	cpsie	i
 800a63c:	603b      	str	r3, [r7, #0]
}
 800a63e:	bf00      	nop
 800a640:	f241 31fa 	movw	r1, #5114	@ 0x13fa
 800a644:	481b      	ldr	r0, [pc, #108]	@ (800a6b4 <vTaskSwitchContext+0x154>)
 800a646:	f7f7 febf 	bl	80023c8 <vAssertCalled>
 800a64a:	693a      	ldr	r2, [r7, #16]
 800a64c:	4613      	mov	r3, r2
 800a64e:	009b      	lsls	r3, r3, #2
 800a650:	4413      	add	r3, r2
 800a652:	009b      	lsls	r3, r3, #2
 800a654:	4a16      	ldr	r2, [pc, #88]	@ (800a6b0 <vTaskSwitchContext+0x150>)
 800a656:	4413      	add	r3, r2
 800a658:	60fb      	str	r3, [r7, #12]
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	685b      	ldr	r3, [r3, #4]
 800a65e:	685a      	ldr	r2, [r3, #4]
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	605a      	str	r2, [r3, #4]
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	685a      	ldr	r2, [r3, #4]
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	3308      	adds	r3, #8
 800a66c:	429a      	cmp	r2, r3
 800a66e:	d103      	bne.n	800a678 <vTaskSwitchContext+0x118>
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	68da      	ldr	r2, [r3, #12]
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	605a      	str	r2, [r3, #4]
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	685b      	ldr	r3, [r3, #4]
 800a67c:	68db      	ldr	r3, [r3, #12]
 800a67e:	4a0a      	ldr	r2, [pc, #40]	@ (800a6a8 <vTaskSwitchContext+0x148>)
 800a680:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 800a682:	4b09      	ldr	r3, [pc, #36]	@ (800a6a8 <vTaskSwitchContext+0x148>)
 800a684:	681b      	ldr	r3, [r3, #0]
                configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 800a686:	4b08      	ldr	r3, [pc, #32]	@ (800a6a8 <vTaskSwitchContext+0x148>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	335c      	adds	r3, #92	@ 0x5c
 800a68c:	4a0a      	ldr	r2, [pc, #40]	@ (800a6b8 <vTaskSwitchContext+0x158>)
 800a68e:	6013      	str	r3, [r2, #0]
    }
 800a690:	bf00      	nop
 800a692:	3720      	adds	r7, #32
 800a694:	46bd      	mov	sp, r7
 800a696:	bd80      	pop	{r7, pc}
 800a698:	20000478 	.word	0x20000478
 800a69c:	20000464 	.word	0x20000464
 800a6a0:	20000480 	.word	0x20000480
 800a6a4:	2000047c 	.word	0x2000047c
 800a6a8:	20000350 	.word	0x20000350
 800a6ac:	20000458 	.word	0x20000458
 800a6b0:	20000354 	.word	0x20000354
 800a6b4:	08010b5c 	.word	0x08010b5c
 800a6b8:	2000018c 	.word	0x2000018c

0800a6bc <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b084      	sub	sp, #16
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
 800a6c4:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d110      	bne.n	800a6ee <vTaskPlaceOnEventList+0x32>
    __asm volatile
 800a6cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6d0:	b672      	cpsid	i
 800a6d2:	f383 8811 	msr	BASEPRI, r3
 800a6d6:	f3bf 8f6f 	isb	sy
 800a6da:	f3bf 8f4f 	dsb	sy
 800a6de:	b662      	cpsie	i
 800a6e0:	60fb      	str	r3, [r7, #12]
}
 800a6e2:	bf00      	nop
 800a6e4:	f44f 51a4 	mov.w	r1, #5248	@ 0x1480
 800a6e8:	4808      	ldr	r0, [pc, #32]	@ (800a70c <vTaskPlaceOnEventList+0x50>)
 800a6ea:	f7f7 fe6d 	bl	80023c8 <vAssertCalled>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a6ee:	4b08      	ldr	r3, [pc, #32]	@ (800a710 <vTaskPlaceOnEventList+0x54>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	3318      	adds	r3, #24
 800a6f4:	4619      	mov	r1, r3
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f7fe fb0d 	bl	8008d16 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a6fc:	2101      	movs	r1, #1
 800a6fe:	6838      	ldr	r0, [r7, #0]
 800a700:	f000 fce6 	bl	800b0d0 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 800a704:	bf00      	nop
 800a706:	3710      	adds	r7, #16
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}
 800a70c:	08010b5c 	.word	0x08010b5c
 800a710:	20000350 	.word	0x20000350

0800a714 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800a714:	b580      	push	{r7, lr}
 800a716:	b086      	sub	sp, #24
 800a718:	af00      	add	r7, sp, #0
 800a71a:	60f8      	str	r0, [r7, #12]
 800a71c:	60b9      	str	r1, [r7, #8]
 800a71e:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d110      	bne.n	800a748 <vTaskPlaceOnEventListRestricted+0x34>
    __asm volatile
 800a726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a72a:	b672      	cpsid	i
 800a72c:	f383 8811 	msr	BASEPRI, r3
 800a730:	f3bf 8f6f 	isb	sy
 800a734:	f3bf 8f4f 	dsb	sy
 800a738:	b662      	cpsie	i
 800a73a:	613b      	str	r3, [r7, #16]
}
 800a73c:	bf00      	nop
 800a73e:	f241 41be 	movw	r1, #5310	@ 0x14be
 800a742:	4819      	ldr	r0, [pc, #100]	@ (800a7a8 <vTaskPlaceOnEventListRestricted+0x94>)
 800a744:	f7f7 fe40 	bl	80023c8 <vAssertCalled>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	685b      	ldr	r3, [r3, #4]
 800a74c:	617b      	str	r3, [r7, #20]
 800a74e:	4b17      	ldr	r3, [pc, #92]	@ (800a7ac <vTaskPlaceOnEventListRestricted+0x98>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	697a      	ldr	r2, [r7, #20]
 800a754:	61da      	str	r2, [r3, #28]
 800a756:	4b15      	ldr	r3, [pc, #84]	@ (800a7ac <vTaskPlaceOnEventListRestricted+0x98>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	697a      	ldr	r2, [r7, #20]
 800a75c:	6892      	ldr	r2, [r2, #8]
 800a75e:	621a      	str	r2, [r3, #32]
 800a760:	4b12      	ldr	r3, [pc, #72]	@ (800a7ac <vTaskPlaceOnEventListRestricted+0x98>)
 800a762:	681a      	ldr	r2, [r3, #0]
 800a764:	697b      	ldr	r3, [r7, #20]
 800a766:	689b      	ldr	r3, [r3, #8]
 800a768:	3218      	adds	r2, #24
 800a76a:	605a      	str	r2, [r3, #4]
 800a76c:	4b0f      	ldr	r3, [pc, #60]	@ (800a7ac <vTaskPlaceOnEventListRestricted+0x98>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f103 0218 	add.w	r2, r3, #24
 800a774:	697b      	ldr	r3, [r7, #20]
 800a776:	609a      	str	r2, [r3, #8]
 800a778:	4b0c      	ldr	r3, [pc, #48]	@ (800a7ac <vTaskPlaceOnEventListRestricted+0x98>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	68fa      	ldr	r2, [r7, #12]
 800a77e:	629a      	str	r2, [r3, #40]	@ 0x28
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	1c5a      	adds	r2, r3, #1
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d002      	beq.n	800a796 <vTaskPlaceOnEventListRestricted+0x82>
        {
            xTicksToWait = portMAX_DELAY;
 800a790:	f04f 33ff 	mov.w	r3, #4294967295
 800a794:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a796:	6879      	ldr	r1, [r7, #4]
 800a798:	68b8      	ldr	r0, [r7, #8]
 800a79a:	f000 fc99 	bl	800b0d0 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
    }
 800a79e:	bf00      	nop
 800a7a0:	3718      	adds	r7, #24
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}
 800a7a6:	bf00      	nop
 800a7a8:	08010b5c 	.word	0x08010b5c
 800a7ac:	20000350 	.word	0x20000350

0800a7b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b08a      	sub	sp, #40	@ 0x28
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	68db      	ldr	r3, [r3, #12]
 800a7bc:	68db      	ldr	r3, [r3, #12]
 800a7be:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 800a7c0:	6a3b      	ldr	r3, [r7, #32]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d110      	bne.n	800a7e8 <xTaskRemoveFromEventList+0x38>
    __asm volatile
 800a7c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7ca:	b672      	cpsid	i
 800a7cc:	f383 8811 	msr	BASEPRI, r3
 800a7d0:	f3bf 8f6f 	isb	sy
 800a7d4:	f3bf 8f4f 	dsb	sy
 800a7d8:	b662      	cpsie	i
 800a7da:	60fb      	str	r3, [r7, #12]
}
 800a7dc:	bf00      	nop
 800a7de:	f241 41f5 	movw	r1, #5365	@ 0x14f5
 800a7e2:	485b      	ldr	r0, [pc, #364]	@ (800a950 <xTaskRemoveFromEventList+0x1a0>)
 800a7e4:	f7f7 fdf0 	bl	80023c8 <vAssertCalled>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800a7e8:	6a3b      	ldr	r3, [r7, #32]
 800a7ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7ec:	61fb      	str	r3, [r7, #28]
 800a7ee:	6a3b      	ldr	r3, [r7, #32]
 800a7f0:	69db      	ldr	r3, [r3, #28]
 800a7f2:	6a3a      	ldr	r2, [r7, #32]
 800a7f4:	6a12      	ldr	r2, [r2, #32]
 800a7f6:	609a      	str	r2, [r3, #8]
 800a7f8:	6a3b      	ldr	r3, [r7, #32]
 800a7fa:	6a1b      	ldr	r3, [r3, #32]
 800a7fc:	6a3a      	ldr	r2, [r7, #32]
 800a7fe:	69d2      	ldr	r2, [r2, #28]
 800a800:	605a      	str	r2, [r3, #4]
 800a802:	69fb      	ldr	r3, [r7, #28]
 800a804:	685a      	ldr	r2, [r3, #4]
 800a806:	6a3b      	ldr	r3, [r7, #32]
 800a808:	3318      	adds	r3, #24
 800a80a:	429a      	cmp	r2, r3
 800a80c:	d103      	bne.n	800a816 <xTaskRemoveFromEventList+0x66>
 800a80e:	6a3b      	ldr	r3, [r7, #32]
 800a810:	6a1a      	ldr	r2, [r3, #32]
 800a812:	69fb      	ldr	r3, [r7, #28]
 800a814:	605a      	str	r2, [r3, #4]
 800a816:	6a3b      	ldr	r3, [r7, #32]
 800a818:	2200      	movs	r2, #0
 800a81a:	629a      	str	r2, [r3, #40]	@ 0x28
 800a81c:	69fb      	ldr	r3, [r7, #28]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	1e5a      	subs	r2, r3, #1
 800a822:	69fb      	ldr	r3, [r7, #28]
 800a824:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800a826:	4b4b      	ldr	r3, [pc, #300]	@ (800a954 <xTaskRemoveFromEventList+0x1a4>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d160      	bne.n	800a8f0 <xTaskRemoveFromEventList+0x140>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800a82e:	6a3b      	ldr	r3, [r7, #32]
 800a830:	695b      	ldr	r3, [r3, #20]
 800a832:	617b      	str	r3, [r7, #20]
 800a834:	6a3b      	ldr	r3, [r7, #32]
 800a836:	689b      	ldr	r3, [r3, #8]
 800a838:	6a3a      	ldr	r2, [r7, #32]
 800a83a:	68d2      	ldr	r2, [r2, #12]
 800a83c:	609a      	str	r2, [r3, #8]
 800a83e:	6a3b      	ldr	r3, [r7, #32]
 800a840:	68db      	ldr	r3, [r3, #12]
 800a842:	6a3a      	ldr	r2, [r7, #32]
 800a844:	6892      	ldr	r2, [r2, #8]
 800a846:	605a      	str	r2, [r3, #4]
 800a848:	697b      	ldr	r3, [r7, #20]
 800a84a:	685a      	ldr	r2, [r3, #4]
 800a84c:	6a3b      	ldr	r3, [r7, #32]
 800a84e:	3304      	adds	r3, #4
 800a850:	429a      	cmp	r2, r3
 800a852:	d103      	bne.n	800a85c <xTaskRemoveFromEventList+0xac>
 800a854:	6a3b      	ldr	r3, [r7, #32]
 800a856:	68da      	ldr	r2, [r3, #12]
 800a858:	697b      	ldr	r3, [r7, #20]
 800a85a:	605a      	str	r2, [r3, #4]
 800a85c:	6a3b      	ldr	r3, [r7, #32]
 800a85e:	2200      	movs	r2, #0
 800a860:	615a      	str	r2, [r3, #20]
 800a862:	697b      	ldr	r3, [r7, #20]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	1e5a      	subs	r2, r3, #1
 800a868:	697b      	ldr	r3, [r7, #20]
 800a86a:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800a86c:	6a3b      	ldr	r3, [r7, #32]
 800a86e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a870:	2201      	movs	r2, #1
 800a872:	409a      	lsls	r2, r3
 800a874:	4b38      	ldr	r3, [pc, #224]	@ (800a958 <xTaskRemoveFromEventList+0x1a8>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	4313      	orrs	r3, r2
 800a87a:	4a37      	ldr	r2, [pc, #220]	@ (800a958 <xTaskRemoveFromEventList+0x1a8>)
 800a87c:	6013      	str	r3, [r2, #0]
 800a87e:	6a3b      	ldr	r3, [r7, #32]
 800a880:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a882:	4936      	ldr	r1, [pc, #216]	@ (800a95c <xTaskRemoveFromEventList+0x1ac>)
 800a884:	4613      	mov	r3, r2
 800a886:	009b      	lsls	r3, r3, #2
 800a888:	4413      	add	r3, r2
 800a88a:	009b      	lsls	r3, r3, #2
 800a88c:	440b      	add	r3, r1
 800a88e:	3304      	adds	r3, #4
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	613b      	str	r3, [r7, #16]
 800a894:	6a3b      	ldr	r3, [r7, #32]
 800a896:	693a      	ldr	r2, [r7, #16]
 800a898:	609a      	str	r2, [r3, #8]
 800a89a:	693b      	ldr	r3, [r7, #16]
 800a89c:	689a      	ldr	r2, [r3, #8]
 800a89e:	6a3b      	ldr	r3, [r7, #32]
 800a8a0:	60da      	str	r2, [r3, #12]
 800a8a2:	693b      	ldr	r3, [r7, #16]
 800a8a4:	689b      	ldr	r3, [r3, #8]
 800a8a6:	6a3a      	ldr	r2, [r7, #32]
 800a8a8:	3204      	adds	r2, #4
 800a8aa:	605a      	str	r2, [r3, #4]
 800a8ac:	6a3b      	ldr	r3, [r7, #32]
 800a8ae:	1d1a      	adds	r2, r3, #4
 800a8b0:	693b      	ldr	r3, [r7, #16]
 800a8b2:	609a      	str	r2, [r3, #8]
 800a8b4:	6a3b      	ldr	r3, [r7, #32]
 800a8b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8b8:	4613      	mov	r3, r2
 800a8ba:	009b      	lsls	r3, r3, #2
 800a8bc:	4413      	add	r3, r2
 800a8be:	009b      	lsls	r3, r3, #2
 800a8c0:	4a26      	ldr	r2, [pc, #152]	@ (800a95c <xTaskRemoveFromEventList+0x1ac>)
 800a8c2:	441a      	add	r2, r3
 800a8c4:	6a3b      	ldr	r3, [r7, #32]
 800a8c6:	615a      	str	r2, [r3, #20]
 800a8c8:	6a3b      	ldr	r3, [r7, #32]
 800a8ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8cc:	4923      	ldr	r1, [pc, #140]	@ (800a95c <xTaskRemoveFromEventList+0x1ac>)
 800a8ce:	4613      	mov	r3, r2
 800a8d0:	009b      	lsls	r3, r3, #2
 800a8d2:	4413      	add	r3, r2
 800a8d4:	009b      	lsls	r3, r3, #2
 800a8d6:	440b      	add	r3, r1
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	6a3a      	ldr	r2, [r7, #32]
 800a8dc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800a8de:	1c59      	adds	r1, r3, #1
 800a8e0:	481e      	ldr	r0, [pc, #120]	@ (800a95c <xTaskRemoveFromEventList+0x1ac>)
 800a8e2:	4613      	mov	r3, r2
 800a8e4:	009b      	lsls	r3, r3, #2
 800a8e6:	4413      	add	r3, r2
 800a8e8:	009b      	lsls	r3, r3, #2
 800a8ea:	4403      	add	r3, r0
 800a8ec:	6019      	str	r1, [r3, #0]
 800a8ee:	e01b      	b.n	800a928 <xTaskRemoveFromEventList+0x178>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a8f0:	4b1b      	ldr	r3, [pc, #108]	@ (800a960 <xTaskRemoveFromEventList+0x1b0>)
 800a8f2:	685b      	ldr	r3, [r3, #4]
 800a8f4:	61bb      	str	r3, [r7, #24]
 800a8f6:	6a3b      	ldr	r3, [r7, #32]
 800a8f8:	69ba      	ldr	r2, [r7, #24]
 800a8fa:	61da      	str	r2, [r3, #28]
 800a8fc:	69bb      	ldr	r3, [r7, #24]
 800a8fe:	689a      	ldr	r2, [r3, #8]
 800a900:	6a3b      	ldr	r3, [r7, #32]
 800a902:	621a      	str	r2, [r3, #32]
 800a904:	69bb      	ldr	r3, [r7, #24]
 800a906:	689b      	ldr	r3, [r3, #8]
 800a908:	6a3a      	ldr	r2, [r7, #32]
 800a90a:	3218      	adds	r2, #24
 800a90c:	605a      	str	r2, [r3, #4]
 800a90e:	6a3b      	ldr	r3, [r7, #32]
 800a910:	f103 0218 	add.w	r2, r3, #24
 800a914:	69bb      	ldr	r3, [r7, #24]
 800a916:	609a      	str	r2, [r3, #8]
 800a918:	6a3b      	ldr	r3, [r7, #32]
 800a91a:	4a11      	ldr	r2, [pc, #68]	@ (800a960 <xTaskRemoveFromEventList+0x1b0>)
 800a91c:	629a      	str	r2, [r3, #40]	@ 0x28
 800a91e:	4b10      	ldr	r3, [pc, #64]	@ (800a960 <xTaskRemoveFromEventList+0x1b0>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	3301      	adds	r3, #1
 800a924:	4a0e      	ldr	r2, [pc, #56]	@ (800a960 <xTaskRemoveFromEventList+0x1b0>)
 800a926:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a928:	6a3b      	ldr	r3, [r7, #32]
 800a92a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a92c:	4b0d      	ldr	r3, [pc, #52]	@ (800a964 <xTaskRemoveFromEventList+0x1b4>)
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a932:	429a      	cmp	r2, r3
 800a934:	d905      	bls.n	800a942 <xTaskRemoveFromEventList+0x192>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 800a936:	2301      	movs	r3, #1
 800a938:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 800a93a:	4b0b      	ldr	r3, [pc, #44]	@ (800a968 <xTaskRemoveFromEventList+0x1b8>)
 800a93c:	2201      	movs	r2, #1
 800a93e:	601a      	str	r2, [r3, #0]
 800a940:	e001      	b.n	800a946 <xTaskRemoveFromEventList+0x196>
        }
        else
        {
            xReturn = pdFALSE;
 800a942:	2300      	movs	r3, #0
 800a944:	627b      	str	r3, [r7, #36]	@ 0x24
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 800a946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a948:	4618      	mov	r0, r3
 800a94a:	3728      	adds	r7, #40	@ 0x28
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}
 800a950:	08010b5c 	.word	0x08010b5c
 800a954:	20000478 	.word	0x20000478
 800a958:	20000458 	.word	0x20000458
 800a95c:	20000354 	.word	0x20000354
 800a960:	20000410 	.word	0x20000410
 800a964:	20000350 	.word	0x20000350
 800a968:	20000464 	.word	0x20000464

0800a96c <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a96c:	b480      	push	{r7}
 800a96e:	b083      	sub	sp, #12
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a974:	4b06      	ldr	r3, [pc, #24]	@ (800a990 <vTaskInternalSetTimeOutState+0x24>)
 800a976:	681a      	ldr	r2, [r3, #0]
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800a97c:	4b05      	ldr	r3, [pc, #20]	@ (800a994 <vTaskInternalSetTimeOutState+0x28>)
 800a97e:	681a      	ldr	r2, [r3, #0]
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 800a984:	bf00      	nop
 800a986:	370c      	adds	r7, #12
 800a988:	46bd      	mov	sp, r7
 800a98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98e:	4770      	bx	lr
 800a990:	20000468 	.word	0x20000468
 800a994:	20000454 	.word	0x20000454

0800a998 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b088      	sub	sp, #32
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
 800a9a0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d110      	bne.n	800a9ca <xTaskCheckForTimeOut+0x32>
    __asm volatile
 800a9a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9ac:	b672      	cpsid	i
 800a9ae:	f383 8811 	msr	BASEPRI, r3
 800a9b2:	f3bf 8f6f 	isb	sy
 800a9b6:	f3bf 8f4f 	dsb	sy
 800a9ba:	b662      	cpsie	i
 800a9bc:	613b      	str	r3, [r7, #16]
}
 800a9be:	bf00      	nop
 800a9c0:	f241 51a5 	movw	r1, #5541	@ 0x15a5
 800a9c4:	482b      	ldr	r0, [pc, #172]	@ (800aa74 <xTaskCheckForTimeOut+0xdc>)
 800a9c6:	f7f7 fcff 	bl	80023c8 <vAssertCalled>
    configASSERT( pxTicksToWait );
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d110      	bne.n	800a9f2 <xTaskCheckForTimeOut+0x5a>
    __asm volatile
 800a9d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9d4:	b672      	cpsid	i
 800a9d6:	f383 8811 	msr	BASEPRI, r3
 800a9da:	f3bf 8f6f 	isb	sy
 800a9de:	f3bf 8f4f 	dsb	sy
 800a9e2:	b662      	cpsie	i
 800a9e4:	60fb      	str	r3, [r7, #12]
}
 800a9e6:	bf00      	nop
 800a9e8:	f241 51a6 	movw	r1, #5542	@ 0x15a6
 800a9ec:	4821      	ldr	r0, [pc, #132]	@ (800aa74 <xTaskCheckForTimeOut+0xdc>)
 800a9ee:	f7f7 fceb 	bl	80023c8 <vAssertCalled>

    taskENTER_CRITICAL();
 800a9f2:	f001 f8b5 	bl	800bb60 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800a9f6:	4b20      	ldr	r3, [pc, #128]	@ (800aa78 <xTaskCheckForTimeOut+0xe0>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	685b      	ldr	r3, [r3, #4]
 800aa00:	69ba      	ldr	r2, [r7, #24]
 800aa02:	1ad3      	subs	r3, r2, r3
 800aa04:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa0e:	d102      	bne.n	800aa16 <xTaskCheckForTimeOut+0x7e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800aa10:	2300      	movs	r3, #0
 800aa12:	61fb      	str	r3, [r7, #28]
 800aa14:	e026      	b.n	800aa64 <xTaskCheckForTimeOut+0xcc>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681a      	ldr	r2, [r3, #0]
 800aa1a:	4b18      	ldr	r3, [pc, #96]	@ (800aa7c <xTaskCheckForTimeOut+0xe4>)
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	429a      	cmp	r2, r3
 800aa20:	d00a      	beq.n	800aa38 <xTaskCheckForTimeOut+0xa0>
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	685b      	ldr	r3, [r3, #4]
 800aa26:	69ba      	ldr	r2, [r7, #24]
 800aa28:	429a      	cmp	r2, r3
 800aa2a:	d305      	bcc.n	800aa38 <xTaskCheckForTimeOut+0xa0>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800aa2c:	2301      	movs	r3, #1
 800aa2e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	2200      	movs	r2, #0
 800aa34:	601a      	str	r2, [r3, #0]
 800aa36:	e015      	b.n	800aa64 <xTaskCheckForTimeOut+0xcc>
        }
        else if( xElapsedTime < *pxTicksToWait )
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	697a      	ldr	r2, [r7, #20]
 800aa3e:	429a      	cmp	r2, r3
 800aa40:	d20b      	bcs.n	800aa5a <xTaskCheckForTimeOut+0xc2>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	681a      	ldr	r2, [r3, #0]
 800aa46:	697b      	ldr	r3, [r7, #20]
 800aa48:	1ad2      	subs	r2, r2, r3
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	f7ff ff8c 	bl	800a96c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800aa54:	2300      	movs	r3, #0
 800aa56:	61fb      	str	r3, [r7, #28]
 800aa58:	e004      	b.n	800aa64 <xTaskCheckForTimeOut+0xcc>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800aa60:	2301      	movs	r3, #1
 800aa62:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800aa64:	f001 f8b4 	bl	800bbd0 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 800aa68:	69fb      	ldr	r3, [r7, #28]
}
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	3720      	adds	r7, #32
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bd80      	pop	{r7, pc}
 800aa72:	bf00      	nop
 800aa74:	08010b5c 	.word	0x08010b5c
 800aa78:	20000454 	.word	0x20000454
 800aa7c:	20000468 	.word	0x20000468

0800aa80 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800aa80:	b480      	push	{r7}
 800aa82:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 800aa84:	4b03      	ldr	r3, [pc, #12]	@ (800aa94 <vTaskMissedYield+0x14>)
 800aa86:	2201      	movs	r2, #1
 800aa88:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 800aa8a:	bf00      	nop
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa92:	4770      	bx	lr
 800aa94:	20000464 	.word	0x20000464

0800aa98 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b082      	sub	sp, #8
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800aaa0:	f000 f852 	bl	800ab48 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 800aaa4:	4b06      	ldr	r3, [pc, #24]	@ (800aac0 <prvIdleTask+0x28>)
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	2b01      	cmp	r3, #1
 800aaaa:	d9f9      	bls.n	800aaa0 <prvIdleTask+0x8>
            {
                taskYIELD();
 800aaac:	4b05      	ldr	r3, [pc, #20]	@ (800aac4 <prvIdleTask+0x2c>)
 800aaae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aab2:	601a      	str	r2, [r3, #0]
 800aab4:	f3bf 8f4f 	dsb	sy
 800aab8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800aabc:	e7f0      	b.n	800aaa0 <prvIdleTask+0x8>
 800aabe:	bf00      	nop
 800aac0:	20000354 	.word	0x20000354
 800aac4:	e000ed04 	.word	0xe000ed04

0800aac8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b082      	sub	sp, #8
 800aacc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aace:	2300      	movs	r3, #0
 800aad0:	607b      	str	r3, [r7, #4]
 800aad2:	e00c      	b.n	800aaee <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800aad4:	687a      	ldr	r2, [r7, #4]
 800aad6:	4613      	mov	r3, r2
 800aad8:	009b      	lsls	r3, r3, #2
 800aada:	4413      	add	r3, r2
 800aadc:	009b      	lsls	r3, r3, #2
 800aade:	4a12      	ldr	r2, [pc, #72]	@ (800ab28 <prvInitialiseTaskLists+0x60>)
 800aae0:	4413      	add	r3, r2
 800aae2:	4618      	mov	r0, r3
 800aae4:	f7fe f8c6 	bl	8008c74 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	3301      	adds	r3, #1
 800aaec:	607b      	str	r3, [r7, #4]
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2b06      	cmp	r3, #6
 800aaf2:	d9ef      	bls.n	800aad4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800aaf4:	480d      	ldr	r0, [pc, #52]	@ (800ab2c <prvInitialiseTaskLists+0x64>)
 800aaf6:	f7fe f8bd 	bl	8008c74 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800aafa:	480d      	ldr	r0, [pc, #52]	@ (800ab30 <prvInitialiseTaskLists+0x68>)
 800aafc:	f7fe f8ba 	bl	8008c74 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800ab00:	480c      	ldr	r0, [pc, #48]	@ (800ab34 <prvInitialiseTaskLists+0x6c>)
 800ab02:	f7fe f8b7 	bl	8008c74 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800ab06:	480c      	ldr	r0, [pc, #48]	@ (800ab38 <prvInitialiseTaskLists+0x70>)
 800ab08:	f7fe f8b4 	bl	8008c74 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800ab0c:	480b      	ldr	r0, [pc, #44]	@ (800ab3c <prvInitialiseTaskLists+0x74>)
 800ab0e:	f7fe f8b1 	bl	8008c74 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800ab12:	4b0b      	ldr	r3, [pc, #44]	@ (800ab40 <prvInitialiseTaskLists+0x78>)
 800ab14:	4a05      	ldr	r2, [pc, #20]	@ (800ab2c <prvInitialiseTaskLists+0x64>)
 800ab16:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ab18:	4b0a      	ldr	r3, [pc, #40]	@ (800ab44 <prvInitialiseTaskLists+0x7c>)
 800ab1a:	4a05      	ldr	r2, [pc, #20]	@ (800ab30 <prvInitialiseTaskLists+0x68>)
 800ab1c:	601a      	str	r2, [r3, #0]
}
 800ab1e:	bf00      	nop
 800ab20:	3708      	adds	r7, #8
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd80      	pop	{r7, pc}
 800ab26:	bf00      	nop
 800ab28:	20000354 	.word	0x20000354
 800ab2c:	200003e0 	.word	0x200003e0
 800ab30:	200003f4 	.word	0x200003f4
 800ab34:	20000410 	.word	0x20000410
 800ab38:	20000424 	.word	0x20000424
 800ab3c:	2000043c 	.word	0x2000043c
 800ab40:	20000408 	.word	0x20000408
 800ab44:	2000040c 	.word	0x2000040c

0800ab48 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b082      	sub	sp, #8
 800ab4c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ab4e:	e019      	b.n	800ab84 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 800ab50:	f001 f806 	bl	800bb60 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800ab54:	4b10      	ldr	r3, [pc, #64]	@ (800ab98 <prvCheckTasksWaitingTermination+0x50>)
 800ab56:	68db      	ldr	r3, [r3, #12]
 800ab58:	68db      	ldr	r3, [r3, #12]
 800ab5a:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	3304      	adds	r3, #4
 800ab60:	4618      	mov	r0, r3
 800ab62:	f7fe f911 	bl	8008d88 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 800ab66:	4b0d      	ldr	r3, [pc, #52]	@ (800ab9c <prvCheckTasksWaitingTermination+0x54>)
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	3b01      	subs	r3, #1
 800ab6c:	4a0b      	ldr	r2, [pc, #44]	@ (800ab9c <prvCheckTasksWaitingTermination+0x54>)
 800ab6e:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 800ab70:	4b0b      	ldr	r3, [pc, #44]	@ (800aba0 <prvCheckTasksWaitingTermination+0x58>)
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	3b01      	subs	r3, #1
 800ab76:	4a0a      	ldr	r2, [pc, #40]	@ (800aba0 <prvCheckTasksWaitingTermination+0x58>)
 800ab78:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 800ab7a:	f001 f829 	bl	800bbd0 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800ab7e:	6878      	ldr	r0, [r7, #4]
 800ab80:	f000 f810 	bl	800aba4 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ab84:	4b06      	ldr	r3, [pc, #24]	@ (800aba0 <prvCheckTasksWaitingTermination+0x58>)
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d1e1      	bne.n	800ab50 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800ab8c:	bf00      	nop
 800ab8e:	bf00      	nop
 800ab90:	3708      	adds	r7, #8
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}
 800ab96:	bf00      	nop
 800ab98:	20000424 	.word	0x20000424
 800ab9c:	20000450 	.word	0x20000450
 800aba0:	20000438 	.word	0x20000438

0800aba4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b082      	sub	sp, #8
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
        portCLEAN_UP_TCB( pxTCB );

        #if ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 )
        {
            /* Free up the memory allocated for the task's TLS Block. */
            configDEINIT_TLS_BLOCK( pxTCB->xTLSBlock );
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	335c      	adds	r3, #92	@ 0x5c
 800abb0:	4618      	mov	r0, r3
 800abb2:	f003 f937 	bl	800de24 <_reclaim_reent>

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abba:	4618      	mov	r0, r3
 800abbc:	f7f7 ff32 	bl	8002a24 <vPortFree>
            vPortFree( pxTCB );
 800abc0:	6878      	ldr	r0, [r7, #4]
 800abc2:	f7f7 ff2f 	bl	8002a24 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800abc6:	bf00      	nop
 800abc8:	3708      	adds	r7, #8
 800abca:	46bd      	mov	sp, r7
 800abcc:	bd80      	pop	{r7, pc}
	...

0800abd0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800abd0:	b480      	push	{r7}
 800abd2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800abd4:	4b0a      	ldr	r3, [pc, #40]	@ (800ac00 <prvResetNextTaskUnblockTime+0x30>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d104      	bne.n	800abe8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800abde:	4b09      	ldr	r3, [pc, #36]	@ (800ac04 <prvResetNextTaskUnblockTime+0x34>)
 800abe0:	f04f 32ff 	mov.w	r2, #4294967295
 800abe4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800abe6:	e005      	b.n	800abf4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800abe8:	4b05      	ldr	r3, [pc, #20]	@ (800ac00 <prvResetNextTaskUnblockTime+0x30>)
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	68db      	ldr	r3, [r3, #12]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	4a04      	ldr	r2, [pc, #16]	@ (800ac04 <prvResetNextTaskUnblockTime+0x34>)
 800abf2:	6013      	str	r3, [r2, #0]
}
 800abf4:	bf00      	nop
 800abf6:	46bd      	mov	sp, r7
 800abf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfc:	4770      	bx	lr
 800abfe:	bf00      	nop
 800ac00:	20000408 	.word	0x20000408
 800ac04:	20000470 	.word	0x20000470

0800ac08 <xTaskGetCurrentTaskHandle>:

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) || ( configNUMBER_OF_CORES > 1 )

    #if ( configNUMBER_OF_CORES == 1 )
        TaskHandle_t xTaskGetCurrentTaskHandle( void )
        {
 800ac08:	b480      	push	{r7}
 800ac0a:	b083      	sub	sp, #12
 800ac0c:	af00      	add	r7, sp, #0
            traceENTER_xTaskGetCurrentTaskHandle();

            /* A critical section is not required as this is not called from
             * an interrupt and the current TCB will always be the same for any
             * individual execution thread. */
            xReturn = pxCurrentTCB;
 800ac0e:	4b05      	ldr	r3, [pc, #20]	@ (800ac24 <xTaskGetCurrentTaskHandle+0x1c>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	607b      	str	r3, [r7, #4]

            traceRETURN_xTaskGetCurrentTaskHandle( xReturn );

            return xReturn;
 800ac14:	687b      	ldr	r3, [r7, #4]
        }
 800ac16:	4618      	mov	r0, r3
 800ac18:	370c      	adds	r7, #12
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac20:	4770      	bx	lr
 800ac22:	bf00      	nop
 800ac24:	20000350 	.word	0x20000350

0800ac28 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800ac28:	b480      	push	{r7}
 800ac2a:	b083      	sub	sp, #12
 800ac2c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 800ac2e:	4b0b      	ldr	r3, [pc, #44]	@ (800ac5c <xTaskGetSchedulerState+0x34>)
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d102      	bne.n	800ac3c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800ac36:	2301      	movs	r3, #1
 800ac38:	607b      	str	r3, [r7, #4]
 800ac3a:	e008      	b.n	800ac4e <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800ac3c:	4b08      	ldr	r3, [pc, #32]	@ (800ac60 <xTaskGetSchedulerState+0x38>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d102      	bne.n	800ac4a <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 800ac44:	2302      	movs	r3, #2
 800ac46:	607b      	str	r3, [r7, #4]
 800ac48:	e001      	b.n	800ac4e <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	607b      	str	r3, [r7, #4]
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );

        return xReturn;
 800ac4e:	687b      	ldr	r3, [r7, #4]
    }
 800ac50:	4618      	mov	r0, r3
 800ac52:	370c      	adds	r7, #12
 800ac54:	46bd      	mov	sp, r7
 800ac56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5a:	4770      	bx	lr
 800ac5c:	2000045c 	.word	0x2000045c
 800ac60:	20000478 	.word	0x20000478

0800ac64 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b086      	sub	sp, #24
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800ac70:	2300      	movs	r3, #0
 800ac72:	617b      	str	r3, [r7, #20]

        traceENTER_xTaskPriorityInherit( pxMutexHolder );

        /* If the mutex is taken by an interrupt, the mutex holder is NULL. Priority
         * inheritance is not applied in this scenario. */
        if( pxMutexHolder != NULL )
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	f000 8089 	beq.w	800ad8e <xTaskPriorityInherit+0x12a>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ac7c:	693b      	ldr	r3, [r7, #16]
 800ac7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac80:	4b45      	ldr	r3, [pc, #276]	@ (800ad98 <xTaskPriorityInherit+0x134>)
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac86:	429a      	cmp	r2, r3
 800ac88:	d278      	bcs.n	800ad7c <xTaskPriorityInherit+0x118>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 800ac8a:	693b      	ldr	r3, [r7, #16]
 800ac8c:	699b      	ldr	r3, [r3, #24]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	db06      	blt.n	800aca0 <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority );
 800ac92:	4b41      	ldr	r3, [pc, #260]	@ (800ad98 <xTaskPriorityInherit+0x134>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac98:	f1c3 0207 	rsb	r2, r3, #7
 800ac9c:	693b      	ldr	r3, [r7, #16]
 800ac9e:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800aca0:	693b      	ldr	r3, [r7, #16]
 800aca2:	6959      	ldr	r1, [r3, #20]
 800aca4:	693b      	ldr	r3, [r7, #16]
 800aca6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aca8:	4613      	mov	r3, r2
 800acaa:	009b      	lsls	r3, r3, #2
 800acac:	4413      	add	r3, r2
 800acae:	009b      	lsls	r3, r3, #2
 800acb0:	4a3a      	ldr	r2, [pc, #232]	@ (800ad9c <xTaskPriorityInherit+0x138>)
 800acb2:	4413      	add	r3, r2
 800acb4:	4299      	cmp	r1, r3
 800acb6:	d159      	bne.n	800ad6c <xTaskPriorityInherit+0x108>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800acb8:	693b      	ldr	r3, [r7, #16]
 800acba:	3304      	adds	r3, #4
 800acbc:	4618      	mov	r0, r3
 800acbe:	f7fe f863 	bl	8008d88 <uxListRemove>
 800acc2:	4603      	mov	r3, r0
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d10a      	bne.n	800acde <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800acc8:	693b      	ldr	r3, [r7, #16]
 800acca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800accc:	2201      	movs	r2, #1
 800acce:	fa02 f303 	lsl.w	r3, r2, r3
 800acd2:	43da      	mvns	r2, r3
 800acd4:	4b32      	ldr	r3, [pc, #200]	@ (800ada0 <xTaskPriorityInherit+0x13c>)
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	4013      	ands	r3, r2
 800acda:	4a31      	ldr	r2, [pc, #196]	@ (800ada0 <xTaskPriorityInherit+0x13c>)
 800acdc:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800acde:	4b2e      	ldr	r3, [pc, #184]	@ (800ad98 <xTaskPriorityInherit+0x134>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ace4:	693b      	ldr	r3, [r7, #16]
 800ace6:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 800ace8:	693b      	ldr	r3, [r7, #16]
 800acea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acec:	2201      	movs	r2, #1
 800acee:	409a      	lsls	r2, r3
 800acf0:	4b2b      	ldr	r3, [pc, #172]	@ (800ada0 <xTaskPriorityInherit+0x13c>)
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	4313      	orrs	r3, r2
 800acf6:	4a2a      	ldr	r2, [pc, #168]	@ (800ada0 <xTaskPriorityInherit+0x13c>)
 800acf8:	6013      	str	r3, [r2, #0]
 800acfa:	693b      	ldr	r3, [r7, #16]
 800acfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800acfe:	4927      	ldr	r1, [pc, #156]	@ (800ad9c <xTaskPriorityInherit+0x138>)
 800ad00:	4613      	mov	r3, r2
 800ad02:	009b      	lsls	r3, r3, #2
 800ad04:	4413      	add	r3, r2
 800ad06:	009b      	lsls	r3, r3, #2
 800ad08:	440b      	add	r3, r1
 800ad0a:	3304      	adds	r3, #4
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	60fb      	str	r3, [r7, #12]
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	68fa      	ldr	r2, [r7, #12]
 800ad14:	609a      	str	r2, [r3, #8]
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	689a      	ldr	r2, [r3, #8]
 800ad1a:	693b      	ldr	r3, [r7, #16]
 800ad1c:	60da      	str	r2, [r3, #12]
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	689b      	ldr	r3, [r3, #8]
 800ad22:	693a      	ldr	r2, [r7, #16]
 800ad24:	3204      	adds	r2, #4
 800ad26:	605a      	str	r2, [r3, #4]
 800ad28:	693b      	ldr	r3, [r7, #16]
 800ad2a:	1d1a      	adds	r2, r3, #4
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	609a      	str	r2, [r3, #8]
 800ad30:	693b      	ldr	r3, [r7, #16]
 800ad32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad34:	4613      	mov	r3, r2
 800ad36:	009b      	lsls	r3, r3, #2
 800ad38:	4413      	add	r3, r2
 800ad3a:	009b      	lsls	r3, r3, #2
 800ad3c:	4a17      	ldr	r2, [pc, #92]	@ (800ad9c <xTaskPriorityInherit+0x138>)
 800ad3e:	441a      	add	r2, r3
 800ad40:	693b      	ldr	r3, [r7, #16]
 800ad42:	615a      	str	r2, [r3, #20]
 800ad44:	693b      	ldr	r3, [r7, #16]
 800ad46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad48:	4914      	ldr	r1, [pc, #80]	@ (800ad9c <xTaskPriorityInherit+0x138>)
 800ad4a:	4613      	mov	r3, r2
 800ad4c:	009b      	lsls	r3, r3, #2
 800ad4e:	4413      	add	r3, r2
 800ad50:	009b      	lsls	r3, r3, #2
 800ad52:	440b      	add	r3, r1
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	693a      	ldr	r2, [r7, #16]
 800ad58:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800ad5a:	1c59      	adds	r1, r3, #1
 800ad5c:	480f      	ldr	r0, [pc, #60]	@ (800ad9c <xTaskPriorityInherit+0x138>)
 800ad5e:	4613      	mov	r3, r2
 800ad60:	009b      	lsls	r3, r3, #2
 800ad62:	4413      	add	r3, r2
 800ad64:	009b      	lsls	r3, r3, #2
 800ad66:	4403      	add	r3, r0
 800ad68:	6019      	str	r1, [r3, #0]
 800ad6a:	e004      	b.n	800ad76 <xTaskPriorityInherit+0x112>
                    #endif /* if ( configNUMBER_OF_CORES > 1 ) */
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ad6c:	4b0a      	ldr	r3, [pc, #40]	@ (800ad98 <xTaskPriorityInherit+0x134>)
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad72:	693b      	ldr	r3, [r7, #16]
 800ad74:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 800ad76:	2301      	movs	r3, #1
 800ad78:	617b      	str	r3, [r7, #20]
 800ad7a:	e008      	b.n	800ad8e <xTaskPriorityInherit+0x12a>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ad7c:	693b      	ldr	r3, [r7, #16]
 800ad7e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ad80:	4b05      	ldr	r3, [pc, #20]	@ (800ad98 <xTaskPriorityInherit+0x134>)
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad86:	429a      	cmp	r2, r3
 800ad88:	d201      	bcs.n	800ad8e <xTaskPriorityInherit+0x12a>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	617b      	str	r3, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityInherit( xReturn );

        return xReturn;
 800ad8e:	697b      	ldr	r3, [r7, #20]
    }
 800ad90:	4618      	mov	r0, r3
 800ad92:	3718      	adds	r7, #24
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd80      	pop	{r7, pc}
 800ad98:	20000350 	.word	0x20000350
 800ad9c:	20000354 	.word	0x20000354
 800ada0:	20000458 	.word	0x20000458

0800ada4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b088      	sub	sp, #32
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 800adb0:	2300      	movs	r3, #0
 800adb2:	61fb      	str	r3, [r7, #28]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	f000 809a 	beq.w	800aef0 <xTaskPriorityDisinherit+0x14c>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800adbc:	4b4f      	ldr	r3, [pc, #316]	@ (800aefc <xTaskPriorityDisinherit+0x158>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	69ba      	ldr	r2, [r7, #24]
 800adc2:	429a      	cmp	r2, r3
 800adc4:	d010      	beq.n	800ade8 <xTaskPriorityDisinherit+0x44>
    __asm volatile
 800adc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adca:	b672      	cpsid	i
 800adcc:	f383 8811 	msr	BASEPRI, r3
 800add0:	f3bf 8f6f 	isb	sy
 800add4:	f3bf 8f4f 	dsb	sy
 800add8:	b662      	cpsie	i
 800adda:	613b      	str	r3, [r7, #16]
}
 800addc:	bf00      	nop
 800adde:	f641 2128 	movw	r1, #6696	@ 0x1a28
 800ade2:	4847      	ldr	r0, [pc, #284]	@ (800af00 <xTaskPriorityDisinherit+0x15c>)
 800ade4:	f7f7 faf0 	bl	80023c8 <vAssertCalled>
            configASSERT( pxTCB->uxMutexesHeld );
 800ade8:	69bb      	ldr	r3, [r7, #24]
 800adea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800adec:	2b00      	cmp	r3, #0
 800adee:	d110      	bne.n	800ae12 <xTaskPriorityDisinherit+0x6e>
    __asm volatile
 800adf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adf4:	b672      	cpsid	i
 800adf6:	f383 8811 	msr	BASEPRI, r3
 800adfa:	f3bf 8f6f 	isb	sy
 800adfe:	f3bf 8f4f 	dsb	sy
 800ae02:	b662      	cpsie	i
 800ae04:	60fb      	str	r3, [r7, #12]
}
 800ae06:	bf00      	nop
 800ae08:	f641 2129 	movw	r1, #6697	@ 0x1a29
 800ae0c:	483c      	ldr	r0, [pc, #240]	@ (800af00 <xTaskPriorityDisinherit+0x15c>)
 800ae0e:	f7f7 fadb 	bl	80023c8 <vAssertCalled>
            ( pxTCB->uxMutexesHeld )--;
 800ae12:	69bb      	ldr	r3, [r7, #24]
 800ae14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae16:	1e5a      	subs	r2, r3, #1
 800ae18:	69bb      	ldr	r3, [r7, #24]
 800ae1a:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ae1c:	69bb      	ldr	r3, [r7, #24]
 800ae1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae20:	69bb      	ldr	r3, [r7, #24]
 800ae22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae24:	429a      	cmp	r2, r3
 800ae26:	d063      	beq.n	800aef0 <xTaskPriorityDisinherit+0x14c>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ae28:	69bb      	ldr	r3, [r7, #24]
 800ae2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d15f      	bne.n	800aef0 <xTaskPriorityDisinherit+0x14c>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ae30:	69bb      	ldr	r3, [r7, #24]
 800ae32:	3304      	adds	r3, #4
 800ae34:	4618      	mov	r0, r3
 800ae36:	f7fd ffa7 	bl	8008d88 <uxListRemove>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d10a      	bne.n	800ae56 <xTaskPriorityDisinherit+0xb2>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800ae40:	69bb      	ldr	r3, [r7, #24]
 800ae42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae44:	2201      	movs	r2, #1
 800ae46:	fa02 f303 	lsl.w	r3, r2, r3
 800ae4a:	43da      	mvns	r2, r3
 800ae4c:	4b2d      	ldr	r3, [pc, #180]	@ (800af04 <xTaskPriorityDisinherit+0x160>)
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	4013      	ands	r3, r2
 800ae52:	4a2c      	ldr	r2, [pc, #176]	@ (800af04 <xTaskPriorityDisinherit+0x160>)
 800ae54:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ae56:	69bb      	ldr	r3, [r7, #24]
 800ae58:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ae5a:	69bb      	ldr	r3, [r7, #24]
 800ae5c:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 800ae5e:	69bb      	ldr	r3, [r7, #24]
 800ae60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae62:	f1c3 0207 	rsb	r2, r3, #7
 800ae66:	69bb      	ldr	r3, [r7, #24]
 800ae68:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800ae6a:	69bb      	ldr	r3, [r7, #24]
 800ae6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae6e:	2201      	movs	r2, #1
 800ae70:	409a      	lsls	r2, r3
 800ae72:	4b24      	ldr	r3, [pc, #144]	@ (800af04 <xTaskPriorityDisinherit+0x160>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	4313      	orrs	r3, r2
 800ae78:	4a22      	ldr	r2, [pc, #136]	@ (800af04 <xTaskPriorityDisinherit+0x160>)
 800ae7a:	6013      	str	r3, [r2, #0]
 800ae7c:	69bb      	ldr	r3, [r7, #24]
 800ae7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae80:	4921      	ldr	r1, [pc, #132]	@ (800af08 <xTaskPriorityDisinherit+0x164>)
 800ae82:	4613      	mov	r3, r2
 800ae84:	009b      	lsls	r3, r3, #2
 800ae86:	4413      	add	r3, r2
 800ae88:	009b      	lsls	r3, r3, #2
 800ae8a:	440b      	add	r3, r1
 800ae8c:	3304      	adds	r3, #4
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	617b      	str	r3, [r7, #20]
 800ae92:	69bb      	ldr	r3, [r7, #24]
 800ae94:	697a      	ldr	r2, [r7, #20]
 800ae96:	609a      	str	r2, [r3, #8]
 800ae98:	697b      	ldr	r3, [r7, #20]
 800ae9a:	689a      	ldr	r2, [r3, #8]
 800ae9c:	69bb      	ldr	r3, [r7, #24]
 800ae9e:	60da      	str	r2, [r3, #12]
 800aea0:	697b      	ldr	r3, [r7, #20]
 800aea2:	689b      	ldr	r3, [r3, #8]
 800aea4:	69ba      	ldr	r2, [r7, #24]
 800aea6:	3204      	adds	r2, #4
 800aea8:	605a      	str	r2, [r3, #4]
 800aeaa:	69bb      	ldr	r3, [r7, #24]
 800aeac:	1d1a      	adds	r2, r3, #4
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	609a      	str	r2, [r3, #8]
 800aeb2:	69bb      	ldr	r3, [r7, #24]
 800aeb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aeb6:	4613      	mov	r3, r2
 800aeb8:	009b      	lsls	r3, r3, #2
 800aeba:	4413      	add	r3, r2
 800aebc:	009b      	lsls	r3, r3, #2
 800aebe:	4a12      	ldr	r2, [pc, #72]	@ (800af08 <xTaskPriorityDisinherit+0x164>)
 800aec0:	441a      	add	r2, r3
 800aec2:	69bb      	ldr	r3, [r7, #24]
 800aec4:	615a      	str	r2, [r3, #20]
 800aec6:	69bb      	ldr	r3, [r7, #24]
 800aec8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aeca:	490f      	ldr	r1, [pc, #60]	@ (800af08 <xTaskPriorityDisinherit+0x164>)
 800aecc:	4613      	mov	r3, r2
 800aece:	009b      	lsls	r3, r3, #2
 800aed0:	4413      	add	r3, r2
 800aed2:	009b      	lsls	r3, r3, #2
 800aed4:	440b      	add	r3, r1
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	69ba      	ldr	r2, [r7, #24]
 800aeda:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800aedc:	1c59      	adds	r1, r3, #1
 800aede:	480a      	ldr	r0, [pc, #40]	@ (800af08 <xTaskPriorityDisinherit+0x164>)
 800aee0:	4613      	mov	r3, r2
 800aee2:	009b      	lsls	r3, r3, #2
 800aee4:	4413      	add	r3, r2
 800aee6:	009b      	lsls	r3, r3, #2
 800aee8:	4403      	add	r3, r0
 800aeea:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800aeec:	2301      	movs	r3, #1
 800aeee:	61fb      	str	r3, [r7, #28]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );

        return xReturn;
 800aef0:	69fb      	ldr	r3, [r7, #28]
    }
 800aef2:	4618      	mov	r0, r3
 800aef4:	3720      	adds	r7, #32
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bd80      	pop	{r7, pc}
 800aefa:	bf00      	nop
 800aefc:	20000350 	.word	0x20000350
 800af00:	08010b5c 	.word	0x08010b5c
 800af04:	20000458 	.word	0x20000458
 800af08:	20000354 	.word	0x20000354

0800af0c <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b08a      	sub	sp, #40	@ 0x28
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
 800af14:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800af1a:	2301      	movs	r3, #1
 800af1c:	61fb      	str	r3, [r7, #28]

        traceENTER_vTaskPriorityDisinheritAfterTimeout( pxMutexHolder, uxHighestPriorityWaitingTask );

        if( pxMutexHolder != NULL )
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	2b00      	cmp	r3, #0
 800af22:	f000 80b0 	beq.w	800b086 <vTaskPriorityDisinheritAfterTimeout+0x17a>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 800af26:	6a3b      	ldr	r3, [r7, #32]
 800af28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d110      	bne.n	800af50 <vTaskPriorityDisinheritAfterTimeout+0x44>
    __asm volatile
 800af2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af32:	b672      	cpsid	i
 800af34:	f383 8811 	msr	BASEPRI, r3
 800af38:	f3bf 8f6f 	isb	sy
 800af3c:	f3bf 8f4f 	dsb	sy
 800af40:	b662      	cpsie	i
 800af42:	613b      	str	r3, [r7, #16]
}
 800af44:	bf00      	nop
 800af46:	f641 2186 	movw	r1, #6790	@ 0x1a86
 800af4a:	4851      	ldr	r0, [pc, #324]	@ (800b090 <vTaskPriorityDisinheritAfterTimeout+0x184>)
 800af4c:	f7f7 fa3c 	bl	80023c8 <vAssertCalled>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800af50:	6a3b      	ldr	r3, [r7, #32]
 800af52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af54:	683a      	ldr	r2, [r7, #0]
 800af56:	429a      	cmp	r2, r3
 800af58:	d902      	bls.n	800af60 <vTaskPriorityDisinheritAfterTimeout+0x54>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	627b      	str	r3, [r7, #36]	@ 0x24
 800af5e:	e002      	b.n	800af66 <vTaskPriorityDisinheritAfterTimeout+0x5a>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 800af60:	6a3b      	ldr	r3, [r7, #32]
 800af62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af64:	627b      	str	r3, [r7, #36]	@ 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 800af66:	6a3b      	ldr	r3, [r7, #32]
 800af68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af6c:	429a      	cmp	r2, r3
 800af6e:	f000 808a 	beq.w	800b086 <vTaskPriorityDisinheritAfterTimeout+0x17a>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800af72:	6a3b      	ldr	r3, [r7, #32]
 800af74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af76:	69fa      	ldr	r2, [r7, #28]
 800af78:	429a      	cmp	r2, r3
 800af7a:	f040 8084 	bne.w	800b086 <vTaskPriorityDisinheritAfterTimeout+0x17a>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 800af7e:	4b45      	ldr	r3, [pc, #276]	@ (800b094 <vTaskPriorityDisinheritAfterTimeout+0x188>)
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	6a3a      	ldr	r2, [r7, #32]
 800af84:	429a      	cmp	r2, r3
 800af86:	d110      	bne.n	800afaa <vTaskPriorityDisinheritAfterTimeout+0x9e>
    __asm volatile
 800af88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af8c:	b672      	cpsid	i
 800af8e:	f383 8811 	msr	BASEPRI, r3
 800af92:	f3bf 8f6f 	isb	sy
 800af96:	f3bf 8f4f 	dsb	sy
 800af9a:	b662      	cpsie	i
 800af9c:	60fb      	str	r3, [r7, #12]
}
 800af9e:	bf00      	nop
 800afa0:	f641 21a1 	movw	r1, #6817	@ 0x1aa1
 800afa4:	483a      	ldr	r0, [pc, #232]	@ (800b090 <vTaskPriorityDisinheritAfterTimeout+0x184>)
 800afa6:	f7f7 fa0f 	bl	80023c8 <vAssertCalled>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800afaa:	6a3b      	ldr	r3, [r7, #32]
 800afac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afae:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 800afb0:	6a3b      	ldr	r3, [r7, #32]
 800afb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800afb4:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 800afb6:	6a3b      	ldr	r3, [r7, #32]
 800afb8:	699b      	ldr	r3, [r3, #24]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	db04      	blt.n	800afc8 <vTaskPriorityDisinheritAfterTimeout+0xbc>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse );
 800afbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afc0:	f1c3 0207 	rsb	r2, r3, #7
 800afc4:	6a3b      	ldr	r3, [r7, #32]
 800afc6:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800afc8:	6a3b      	ldr	r3, [r7, #32]
 800afca:	6959      	ldr	r1, [r3, #20]
 800afcc:	69ba      	ldr	r2, [r7, #24]
 800afce:	4613      	mov	r3, r2
 800afd0:	009b      	lsls	r3, r3, #2
 800afd2:	4413      	add	r3, r2
 800afd4:	009b      	lsls	r3, r3, #2
 800afd6:	4a30      	ldr	r2, [pc, #192]	@ (800b098 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
 800afd8:	4413      	add	r3, r2
 800afda:	4299      	cmp	r1, r3
 800afdc:	d153      	bne.n	800b086 <vTaskPriorityDisinheritAfterTimeout+0x17a>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800afde:	6a3b      	ldr	r3, [r7, #32]
 800afe0:	3304      	adds	r3, #4
 800afe2:	4618      	mov	r0, r3
 800afe4:	f7fd fed0 	bl	8008d88 <uxListRemove>
 800afe8:	4603      	mov	r3, r0
 800afea:	2b00      	cmp	r3, #0
 800afec:	d10a      	bne.n	800b004 <vTaskPriorityDisinheritAfterTimeout+0xf8>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800afee:	6a3b      	ldr	r3, [r7, #32]
 800aff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aff2:	2201      	movs	r2, #1
 800aff4:	fa02 f303 	lsl.w	r3, r2, r3
 800aff8:	43da      	mvns	r2, r3
 800affa:	4b28      	ldr	r3, [pc, #160]	@ (800b09c <vTaskPriorityDisinheritAfterTimeout+0x190>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	4013      	ands	r3, r2
 800b000:	4a26      	ldr	r2, [pc, #152]	@ (800b09c <vTaskPriorityDisinheritAfterTimeout+0x190>)
 800b002:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 800b004:	6a3b      	ldr	r3, [r7, #32]
 800b006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b008:	2201      	movs	r2, #1
 800b00a:	409a      	lsls	r2, r3
 800b00c:	4b23      	ldr	r3, [pc, #140]	@ (800b09c <vTaskPriorityDisinheritAfterTimeout+0x190>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	4313      	orrs	r3, r2
 800b012:	4a22      	ldr	r2, [pc, #136]	@ (800b09c <vTaskPriorityDisinheritAfterTimeout+0x190>)
 800b014:	6013      	str	r3, [r2, #0]
 800b016:	6a3b      	ldr	r3, [r7, #32]
 800b018:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b01a:	491f      	ldr	r1, [pc, #124]	@ (800b098 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
 800b01c:	4613      	mov	r3, r2
 800b01e:	009b      	lsls	r3, r3, #2
 800b020:	4413      	add	r3, r2
 800b022:	009b      	lsls	r3, r3, #2
 800b024:	440b      	add	r3, r1
 800b026:	3304      	adds	r3, #4
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	617b      	str	r3, [r7, #20]
 800b02c:	6a3b      	ldr	r3, [r7, #32]
 800b02e:	697a      	ldr	r2, [r7, #20]
 800b030:	609a      	str	r2, [r3, #8]
 800b032:	697b      	ldr	r3, [r7, #20]
 800b034:	689a      	ldr	r2, [r3, #8]
 800b036:	6a3b      	ldr	r3, [r7, #32]
 800b038:	60da      	str	r2, [r3, #12]
 800b03a:	697b      	ldr	r3, [r7, #20]
 800b03c:	689b      	ldr	r3, [r3, #8]
 800b03e:	6a3a      	ldr	r2, [r7, #32]
 800b040:	3204      	adds	r2, #4
 800b042:	605a      	str	r2, [r3, #4]
 800b044:	6a3b      	ldr	r3, [r7, #32]
 800b046:	1d1a      	adds	r2, r3, #4
 800b048:	697b      	ldr	r3, [r7, #20]
 800b04a:	609a      	str	r2, [r3, #8]
 800b04c:	6a3b      	ldr	r3, [r7, #32]
 800b04e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b050:	4613      	mov	r3, r2
 800b052:	009b      	lsls	r3, r3, #2
 800b054:	4413      	add	r3, r2
 800b056:	009b      	lsls	r3, r3, #2
 800b058:	4a0f      	ldr	r2, [pc, #60]	@ (800b098 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
 800b05a:	441a      	add	r2, r3
 800b05c:	6a3b      	ldr	r3, [r7, #32]
 800b05e:	615a      	str	r2, [r3, #20]
 800b060:	6a3b      	ldr	r3, [r7, #32]
 800b062:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b064:	490c      	ldr	r1, [pc, #48]	@ (800b098 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
 800b066:	4613      	mov	r3, r2
 800b068:	009b      	lsls	r3, r3, #2
 800b06a:	4413      	add	r3, r2
 800b06c:	009b      	lsls	r3, r3, #2
 800b06e:	440b      	add	r3, r1
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	6a3a      	ldr	r2, [r7, #32]
 800b074:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800b076:	1c59      	adds	r1, r3, #1
 800b078:	4807      	ldr	r0, [pc, #28]	@ (800b098 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
 800b07a:	4613      	mov	r3, r2
 800b07c:	009b      	lsls	r3, r3, #2
 800b07e:	4413      	add	r3, r2
 800b080:	009b      	lsls	r3, r3, #2
 800b082:	4403      	add	r3, r0
 800b084:	6019      	str	r1, [r3, #0]
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskPriorityDisinheritAfterTimeout();
    }
 800b086:	bf00      	nop
 800b088:	3728      	adds	r7, #40	@ 0x28
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd80      	pop	{r7, pc}
 800b08e:	bf00      	nop
 800b090:	08010b5c 	.word	0x08010b5c
 800b094:	20000350 	.word	0x20000350
 800b098:	20000354 	.word	0x20000354
 800b09c:	20000458 	.word	0x20000458

0800b0a0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 800b0a0:	b480      	push	{r7}
 800b0a2:	b083      	sub	sp, #12
 800b0a4:	af00      	add	r7, sp, #0
        TCB_t * pxTCB;

        traceENTER_pvTaskIncrementMutexHeldCount();

        pxTCB = pxCurrentTCB;
 800b0a6:	4b09      	ldr	r3, [pc, #36]	@ (800b0cc <pvTaskIncrementMutexHeldCount+0x2c>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	607b      	str	r3, [r7, #4]

        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxTCB != NULL )
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d004      	beq.n	800b0bc <pvTaskIncrementMutexHeldCount+0x1c>
        {
            ( pxTCB->uxMutexesHeld )++;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b0b6:	1c5a      	adds	r2, r3, #1
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        traceRETURN_pvTaskIncrementMutexHeldCount( pxTCB );

        return pxTCB;
 800b0bc:	687b      	ldr	r3, [r7, #4]
    }
 800b0be:	4618      	mov	r0, r3
 800b0c0:	370c      	adds	r7, #12
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c8:	4770      	bx	lr
 800b0ca:	bf00      	nop
 800b0cc:	20000350 	.word	0x20000350

0800b0d0 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b088      	sub	sp, #32
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
 800b0d8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800b0da:	4b37      	ldr	r3, [pc, #220]	@ (800b1b8 <prvAddCurrentTaskToDelayedList+0xe8>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 800b0e0:	4b36      	ldr	r3, [pc, #216]	@ (800b1bc <prvAddCurrentTaskToDelayedList+0xec>)
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 800b0e6:	4b36      	ldr	r3, [pc, #216]	@ (800b1c0 <prvAddCurrentTaskToDelayedList+0xf0>)
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b0ec:	4b35      	ldr	r3, [pc, #212]	@ (800b1c4 <prvAddCurrentTaskToDelayedList+0xf4>)
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	3304      	adds	r3, #4
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	f7fd fe48 	bl	8008d88 <uxListRemove>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d10b      	bne.n	800b116 <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800b0fe:	4b31      	ldr	r3, [pc, #196]	@ (800b1c4 <prvAddCurrentTaskToDelayedList+0xf4>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b104:	2201      	movs	r2, #1
 800b106:	fa02 f303 	lsl.w	r3, r2, r3
 800b10a:	43da      	mvns	r2, r3
 800b10c:	4b2e      	ldr	r3, [pc, #184]	@ (800b1c8 <prvAddCurrentTaskToDelayedList+0xf8>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	4013      	ands	r3, r2
 800b112:	4a2d      	ldr	r2, [pc, #180]	@ (800b1c8 <prvAddCurrentTaskToDelayedList+0xf8>)
 800b114:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b11c:	d124      	bne.n	800b168 <prvAddCurrentTaskToDelayedList+0x98>
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d021      	beq.n	800b168 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b124:	4b29      	ldr	r3, [pc, #164]	@ (800b1cc <prvAddCurrentTaskToDelayedList+0xfc>)
 800b126:	685b      	ldr	r3, [r3, #4]
 800b128:	613b      	str	r3, [r7, #16]
 800b12a:	4b26      	ldr	r3, [pc, #152]	@ (800b1c4 <prvAddCurrentTaskToDelayedList+0xf4>)
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	693a      	ldr	r2, [r7, #16]
 800b130:	609a      	str	r2, [r3, #8]
 800b132:	4b24      	ldr	r3, [pc, #144]	@ (800b1c4 <prvAddCurrentTaskToDelayedList+0xf4>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	693a      	ldr	r2, [r7, #16]
 800b138:	6892      	ldr	r2, [r2, #8]
 800b13a:	60da      	str	r2, [r3, #12]
 800b13c:	4b21      	ldr	r3, [pc, #132]	@ (800b1c4 <prvAddCurrentTaskToDelayedList+0xf4>)
 800b13e:	681a      	ldr	r2, [r3, #0]
 800b140:	693b      	ldr	r3, [r7, #16]
 800b142:	689b      	ldr	r3, [r3, #8]
 800b144:	3204      	adds	r2, #4
 800b146:	605a      	str	r2, [r3, #4]
 800b148:	4b1e      	ldr	r3, [pc, #120]	@ (800b1c4 <prvAddCurrentTaskToDelayedList+0xf4>)
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	1d1a      	adds	r2, r3, #4
 800b14e:	693b      	ldr	r3, [r7, #16]
 800b150:	609a      	str	r2, [r3, #8]
 800b152:	4b1c      	ldr	r3, [pc, #112]	@ (800b1c4 <prvAddCurrentTaskToDelayedList+0xf4>)
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	4a1d      	ldr	r2, [pc, #116]	@ (800b1cc <prvAddCurrentTaskToDelayedList+0xfc>)
 800b158:	615a      	str	r2, [r3, #20]
 800b15a:	4b1c      	ldr	r3, [pc, #112]	@ (800b1cc <prvAddCurrentTaskToDelayedList+0xfc>)
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	3301      	adds	r3, #1
 800b160:	4a1a      	ldr	r2, [pc, #104]	@ (800b1cc <prvAddCurrentTaskToDelayedList+0xfc>)
 800b162:	6013      	str	r3, [r2, #0]
 800b164:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800b166:	e022      	b.n	800b1ae <prvAddCurrentTaskToDelayedList+0xde>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800b168:	69fa      	ldr	r2, [r7, #28]
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	4413      	add	r3, r2
 800b16e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b170:	4b14      	ldr	r3, [pc, #80]	@ (800b1c4 <prvAddCurrentTaskToDelayedList+0xf4>)
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	68fa      	ldr	r2, [r7, #12]
 800b176:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800b178:	68fa      	ldr	r2, [r7, #12]
 800b17a:	69fb      	ldr	r3, [r7, #28]
 800b17c:	429a      	cmp	r2, r3
 800b17e:	d207      	bcs.n	800b190 <prvAddCurrentTaskToDelayedList+0xc0>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 800b180:	4b10      	ldr	r3, [pc, #64]	@ (800b1c4 <prvAddCurrentTaskToDelayedList+0xf4>)
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	3304      	adds	r3, #4
 800b186:	4619      	mov	r1, r3
 800b188:	6978      	ldr	r0, [r7, #20]
 800b18a:	f7fd fdc4 	bl	8008d16 <vListInsert>
}
 800b18e:	e00e      	b.n	800b1ae <prvAddCurrentTaskToDelayedList+0xde>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 800b190:	4b0c      	ldr	r3, [pc, #48]	@ (800b1c4 <prvAddCurrentTaskToDelayedList+0xf4>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	3304      	adds	r3, #4
 800b196:	4619      	mov	r1, r3
 800b198:	69b8      	ldr	r0, [r7, #24]
 800b19a:	f7fd fdbc 	bl	8008d16 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800b19e:	4b0c      	ldr	r3, [pc, #48]	@ (800b1d0 <prvAddCurrentTaskToDelayedList+0x100>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	68fa      	ldr	r2, [r7, #12]
 800b1a4:	429a      	cmp	r2, r3
 800b1a6:	d202      	bcs.n	800b1ae <prvAddCurrentTaskToDelayedList+0xde>
                    xNextTaskUnblockTime = xTimeToWake;
 800b1a8:	4a09      	ldr	r2, [pc, #36]	@ (800b1d0 <prvAddCurrentTaskToDelayedList+0x100>)
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	6013      	str	r3, [r2, #0]
}
 800b1ae:	bf00      	nop
 800b1b0:	3720      	adds	r7, #32
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}
 800b1b6:	bf00      	nop
 800b1b8:	20000454 	.word	0x20000454
 800b1bc:	20000408 	.word	0x20000408
 800b1c0:	2000040c 	.word	0x2000040c
 800b1c4:	20000350 	.word	0x20000350
 800b1c8:	20000458 	.word	0x20000458
 800b1cc:	2000043c 	.word	0x2000043c
 800b1d0:	20000470 	.word	0x20000470

0800b1d4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b084      	sub	sp, #16
 800b1d8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800b1da:	2300      	movs	r3, #0
 800b1dc:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800b1de:	f000 fb23 	bl	800b828 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800b1e2:	4b14      	ldr	r3, [pc, #80]	@ (800b234 <xTimerCreateTimerTask+0x60>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d00b      	beq.n	800b202 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800b1ea:	4b13      	ldr	r3, [pc, #76]	@ (800b238 <xTimerCreateTimerTask+0x64>)
 800b1ec:	9301      	str	r3, [sp, #4]
 800b1ee:	2306      	movs	r3, #6
 800b1f0:	9300      	str	r3, [sp, #0]
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800b1f8:	4910      	ldr	r1, [pc, #64]	@ (800b23c <xTimerCreateTimerTask+0x68>)
 800b1fa:	4811      	ldr	r0, [pc, #68]	@ (800b240 <xTimerCreateTimerTask+0x6c>)
 800b1fc:	f7fe fc68 	bl	8009ad0 <xTaskCreate>
 800b200:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d110      	bne.n	800b22a <xTimerCreateTimerTask+0x56>
    __asm volatile
 800b208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b20c:	b672      	cpsid	i
 800b20e:	f383 8811 	msr	BASEPRI, r3
 800b212:	f3bf 8f6f 	isb	sy
 800b216:	f3bf 8f4f 	dsb	sy
 800b21a:	b662      	cpsie	i
 800b21c:	603b      	str	r3, [r7, #0]
}
 800b21e:	bf00      	nop
 800b220:	f44f 71a3 	mov.w	r1, #326	@ 0x146
 800b224:	4807      	ldr	r0, [pc, #28]	@ (800b244 <xTimerCreateTimerTask+0x70>)
 800b226:	f7f7 f8cf 	bl	80023c8 <vAssertCalled>

        traceRETURN_xTimerCreateTimerTask( xReturn );

        return xReturn;
 800b22a:	687b      	ldr	r3, [r7, #4]
    }
 800b22c:	4618      	mov	r0, r3
 800b22e:	3708      	adds	r7, #8
 800b230:	46bd      	mov	sp, r7
 800b232:	bd80      	pop	{r7, pc}
 800b234:	200004b4 	.word	0x200004b4
 800b238:	200004b8 	.word	0x200004b8
 800b23c:	08010c24 	.word	0x08010c24
 800b240:	0800b471 	.word	0x0800b471
 800b244:	08010c2c 	.word	0x08010c2c

0800b248 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName,
                                    const TickType_t xTimerPeriodInTicks,
                                    const BaseType_t xAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 800b248:	b580      	push	{r7, lr}
 800b24a:	b088      	sub	sp, #32
 800b24c:	af02      	add	r7, sp, #8
 800b24e:	60f8      	str	r0, [r7, #12]
 800b250:	60b9      	str	r1, [r7, #8]
 800b252:	607a      	str	r2, [r7, #4]
 800b254:	603b      	str	r3, [r7, #0]
            traceENTER_xTimerCreate( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction );

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800b256:	202c      	movs	r0, #44	@ 0x2c
 800b258:	f7f7 fbd6 	bl	8002a08 <pvPortMalloc>
 800b25c:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 800b25e:	697b      	ldr	r3, [r7, #20]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d00d      	beq.n	800b280 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 800b264:	697b      	ldr	r3, [r7, #20]
 800b266:	2200      	movs	r2, #0
 800b268:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800b26c:	697b      	ldr	r3, [r7, #20]
 800b26e:	9301      	str	r3, [sp, #4]
 800b270:	6a3b      	ldr	r3, [r7, #32]
 800b272:	9300      	str	r3, [sp, #0]
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	687a      	ldr	r2, [r7, #4]
 800b278:	68b9      	ldr	r1, [r7, #8]
 800b27a:	68f8      	ldr	r0, [r7, #12]
 800b27c:	f000 f806 	bl	800b28c <prvInitialiseNewTimer>
            }

            traceRETURN_xTimerCreate( pxNewTimer );

            return pxNewTimer;
 800b280:	697b      	ldr	r3, [r7, #20]
        }
 800b282:	4618      	mov	r0, r3
 800b284:	3718      	adds	r7, #24
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}
	...

0800b28c <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const BaseType_t xAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b086      	sub	sp, #24
 800b290:	af00      	add	r7, sp, #0
 800b292:	60f8      	str	r0, [r7, #12]
 800b294:	60b9      	str	r1, [r7, #8]
 800b296:	607a      	str	r2, [r7, #4]
 800b298:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800b29a:	68bb      	ldr	r3, [r7, #8]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d110      	bne.n	800b2c2 <prvInitialiseNewTimer+0x36>
    __asm volatile
 800b2a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2a4:	b672      	cpsid	i
 800b2a6:	f383 8811 	msr	BASEPRI, r3
 800b2aa:	f3bf 8f6f 	isb	sy
 800b2ae:	f3bf 8f4f 	dsb	sy
 800b2b2:	b662      	cpsie	i
 800b2b4:	617b      	str	r3, [r7, #20]
}
 800b2b6:	bf00      	nop
 800b2b8:	f240 11a9 	movw	r1, #425	@ 0x1a9
 800b2bc:	4812      	ldr	r0, [pc, #72]	@ (800b308 <prvInitialiseNewTimer+0x7c>)
 800b2be:	f7f7 f883 	bl	80023c8 <vAssertCalled>

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
 800b2c2:	f000 fab1 	bl	800b828 <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
 800b2c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2c8:	68fa      	ldr	r2, [r7, #12]
 800b2ca:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800b2cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2ce:	68ba      	ldr	r2, [r7, #8]
 800b2d0:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 800b2d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2d4:	683a      	ldr	r2, [r7, #0]
 800b2d6:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800b2d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2da:	6a3a      	ldr	r2, [r7, #32]
 800b2dc:	621a      	str	r2, [r3, #32]
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800b2de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2e0:	3304      	adds	r3, #4
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	f7fd fce6 	bl	8008cb4 <vListInitialiseItem>

        if( xAutoReload != pdFALSE )
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d008      	beq.n	800b300 <prvInitialiseNewTimer+0x74>
        {
            pxNewTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_AUTORELOAD;
 800b2ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b2f4:	f043 0304 	orr.w	r3, r3, #4
 800b2f8:	b2da      	uxtb	r2, r3
 800b2fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2fc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        traceTIMER_CREATE( pxNewTimer );
    }
 800b300:	bf00      	nop
 800b302:	3718      	adds	r7, #24
 800b304:	46bd      	mov	sp, r7
 800b306:	bd80      	pop	{r7, pc}
 800b308:	08010c2c 	.word	0x08010c2c

0800b30c <xTimerGenericCommandFromTask>:
    BaseType_t xTimerGenericCommandFromTask( TimerHandle_t xTimer,
                                             const BaseType_t xCommandID,
                                             const TickType_t xOptionalValue,
                                             BaseType_t * const pxHigherPriorityTaskWoken,
                                             const TickType_t xTicksToWait )
    {
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b08a      	sub	sp, #40	@ 0x28
 800b310:	af00      	add	r7, sp, #0
 800b312:	60f8      	str	r0, [r7, #12]
 800b314:	60b9      	str	r1, [r7, #8]
 800b316:	607a      	str	r2, [r7, #4]
 800b318:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800b31a:	2300      	movs	r3, #0
 800b31c:	627b      	str	r3, [r7, #36]	@ 0x24

        ( void ) pxHigherPriorityTaskWoken;

        traceENTER_xTimerGenericCommandFromTask( xTimer, xCommandID, xOptionalValue, pxHigherPriorityTaskWoken, xTicksToWait );

        configASSERT( xTimer );
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d110      	bne.n	800b346 <xTimerGenericCommandFromTask+0x3a>
    __asm volatile
 800b324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b328:	b672      	cpsid	i
 800b32a:	f383 8811 	msr	BASEPRI, r3
 800b32e:	f3bf 8f6f 	isb	sy
 800b332:	f3bf 8f4f 	dsb	sy
 800b336:	b662      	cpsie	i
 800b338:	623b      	str	r3, [r7, #32]
}
 800b33a:	bf00      	nop
 800b33c:	f240 11cd 	movw	r1, #461	@ 0x1cd
 800b340:	4820      	ldr	r0, [pc, #128]	@ (800b3c4 <xTimerGenericCommandFromTask+0xb8>)
 800b342:	f7f7 f841 	bl	80023c8 <vAssertCalled>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800b346:	4b20      	ldr	r3, [pc, #128]	@ (800b3c8 <xTimerGenericCommandFromTask+0xbc>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d034      	beq.n	800b3b8 <xTimerGenericCommandFromTask+0xac>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800b34e:	68bb      	ldr	r3, [r7, #8]
 800b350:	613b      	str	r3, [r7, #16]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	61bb      	str	r3, [r7, #24]

            configASSERT( xCommandID < tmrFIRST_FROM_ISR_COMMAND );
 800b35a:	68bb      	ldr	r3, [r7, #8]
 800b35c:	2b05      	cmp	r3, #5
 800b35e:	dd10      	ble.n	800b382 <xTimerGenericCommandFromTask+0x76>
    __asm volatile
 800b360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b364:	b672      	cpsid	i
 800b366:	f383 8811 	msr	BASEPRI, r3
 800b36a:	f3bf 8f6f 	isb	sy
 800b36e:	f3bf 8f4f 	dsb	sy
 800b372:	b662      	cpsie	i
 800b374:	61fb      	str	r3, [r7, #28]
}
 800b376:	bf00      	nop
 800b378:	f44f 71ec 	mov.w	r1, #472	@ 0x1d8
 800b37c:	4811      	ldr	r0, [pc, #68]	@ (800b3c4 <xTimerGenericCommandFromTask+0xb8>)
 800b37e:	f7f7 f823 	bl	80023c8 <vAssertCalled>

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b382:	68bb      	ldr	r3, [r7, #8]
 800b384:	2b05      	cmp	r3, #5
 800b386:	dc17      	bgt.n	800b3b8 <xTimerGenericCommandFromTask+0xac>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b388:	f7ff fc4e 	bl	800ac28 <xTaskGetSchedulerState>
 800b38c:	4603      	mov	r3, r0
 800b38e:	2b02      	cmp	r3, #2
 800b390:	d109      	bne.n	800b3a6 <xTimerGenericCommandFromTask+0x9a>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b392:	4b0d      	ldr	r3, [pc, #52]	@ (800b3c8 <xTimerGenericCommandFromTask+0xbc>)
 800b394:	6818      	ldr	r0, [r3, #0]
 800b396:	f107 0110 	add.w	r1, r7, #16
 800b39a:	2300      	movs	r3, #0
 800b39c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b39e:	f7fd fee1 	bl	8009164 <xQueueGenericSend>
 800b3a2:	6278      	str	r0, [r7, #36]	@ 0x24
 800b3a4:	e008      	b.n	800b3b8 <xTimerGenericCommandFromTask+0xac>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b3a6:	4b08      	ldr	r3, [pc, #32]	@ (800b3c8 <xTimerGenericCommandFromTask+0xbc>)
 800b3a8:	6818      	ldr	r0, [r3, #0]
 800b3aa:	f107 0110 	add.w	r1, r7, #16
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	f7fd fed7 	bl	8009164 <xQueueGenericSend>
 800b3b6:	6278      	str	r0, [r7, #36]	@ 0x24
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTimerGenericCommandFromTask( xReturn );

        return xReturn;
 800b3b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	3728      	adds	r7, #40	@ 0x28
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd80      	pop	{r7, pc}
 800b3c2:	bf00      	nop
 800b3c4:	08010c2c 	.word	0x08010c2c
 800b3c8:	200004b4 	.word	0x200004b4

0800b3cc <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b084      	sub	sp, #16
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	60f8      	str	r0, [r7, #12]
 800b3d4:	60b9      	str	r1, [r7, #8]
 800b3d6:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800b3d8:	e008      	b.n	800b3ec <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	699b      	ldr	r3, [r3, #24]
 800b3de:	68ba      	ldr	r2, [r7, #8]
 800b3e0:	4413      	add	r3, r2
 800b3e2:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	6a1b      	ldr	r3, [r3, #32]
 800b3e8:	68f8      	ldr	r0, [r7, #12]
 800b3ea:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	699a      	ldr	r2, [r3, #24]
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	18d1      	adds	r1, r2, r3
 800b3f4:	68bb      	ldr	r3, [r7, #8]
 800b3f6:	687a      	ldr	r2, [r7, #4]
 800b3f8:	68f8      	ldr	r0, [r7, #12]
 800b3fa:	f000 f8df 	bl	800b5bc <prvInsertTimerInActiveList>
 800b3fe:	4603      	mov	r3, r0
 800b400:	2b00      	cmp	r3, #0
 800b402:	d1ea      	bne.n	800b3da <prvReloadTimer+0xe>
        }
    }
 800b404:	bf00      	nop
 800b406:	bf00      	nop
 800b408:	3710      	adds	r7, #16
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bd80      	pop	{r7, pc}
	...

0800b410 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800b410:	b580      	push	{r7, lr}
 800b412:	b084      	sub	sp, #16
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
 800b418:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b41a:	4b14      	ldr	r3, [pc, #80]	@ (800b46c <prvProcessExpiredTimer+0x5c>)
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	68db      	ldr	r3, [r3, #12]
 800b420:	68db      	ldr	r3, [r3, #12]
 800b422:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	3304      	adds	r3, #4
 800b428:	4618      	mov	r0, r3
 800b42a:	f7fd fcad 	bl	8008d88 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b434:	f003 0304 	and.w	r3, r3, #4
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d005      	beq.n	800b448 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800b43c:	683a      	ldr	r2, [r7, #0]
 800b43e:	6879      	ldr	r1, [r7, #4]
 800b440:	68f8      	ldr	r0, [r7, #12]
 800b442:	f7ff ffc3 	bl	800b3cc <prvReloadTimer>
 800b446:	e008      	b.n	800b45a <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b44e:	f023 0301 	bic.w	r3, r3, #1
 800b452:	b2da      	uxtb	r2, r3
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	6a1b      	ldr	r3, [r3, #32]
 800b45e:	68f8      	ldr	r0, [r7, #12]
 800b460:	4798      	blx	r3
    }
 800b462:	bf00      	nop
 800b464:	3710      	adds	r7, #16
 800b466:	46bd      	mov	sp, r7
 800b468:	bd80      	pop	{r7, pc}
 800b46a:	bf00      	nop
 800b46c:	200004ac 	.word	0x200004ac

0800b470 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800b470:	b580      	push	{r7, lr}
 800b472:	b084      	sub	sp, #16
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b478:	f107 0308 	add.w	r3, r7, #8
 800b47c:	4618      	mov	r0, r3
 800b47e:	f000 f859 	bl	800b534 <prvGetNextExpireTime>
 800b482:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b484:	68bb      	ldr	r3, [r7, #8]
 800b486:	4619      	mov	r1, r3
 800b488:	68f8      	ldr	r0, [r7, #12]
 800b48a:	f000 f805 	bl	800b498 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800b48e:	f000 f8d7 	bl	800b640 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b492:	bf00      	nop
 800b494:	e7f0      	b.n	800b478 <prvTimerTask+0x8>
	...

0800b498 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800b498:	b580      	push	{r7, lr}
 800b49a:	b084      	sub	sp, #16
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
 800b4a0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800b4a2:	f7fe fe0f 	bl	800a0c4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b4a6:	f107 0308 	add.w	r3, r7, #8
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	f000 f866 	bl	800b57c <prvSampleTimeNow>
 800b4b0:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800b4b2:	68bb      	ldr	r3, [r7, #8]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d130      	bne.n	800b51a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d10a      	bne.n	800b4d4 <prvProcessTimerOrBlockTask+0x3c>
 800b4be:	687a      	ldr	r2, [r7, #4]
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	429a      	cmp	r2, r3
 800b4c4:	d806      	bhi.n	800b4d4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800b4c6:	f7fe fe0b 	bl	800a0e0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b4ca:	68f9      	ldr	r1, [r7, #12]
 800b4cc:	6878      	ldr	r0, [r7, #4]
 800b4ce:	f7ff ff9f 	bl	800b410 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800b4d2:	e024      	b.n	800b51e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d008      	beq.n	800b4ec <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b4da:	4b13      	ldr	r3, [pc, #76]	@ (800b528 <prvProcessTimerOrBlockTask+0x90>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d101      	bne.n	800b4e8 <prvProcessTimerOrBlockTask+0x50>
 800b4e4:	2301      	movs	r3, #1
 800b4e6:	e000      	b.n	800b4ea <prvProcessTimerOrBlockTask+0x52>
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b4ec:	4b0f      	ldr	r3, [pc, #60]	@ (800b52c <prvProcessTimerOrBlockTask+0x94>)
 800b4ee:	6818      	ldr	r0, [r3, #0]
 800b4f0:	687a      	ldr	r2, [r7, #4]
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	1ad3      	subs	r3, r2, r3
 800b4f6:	683a      	ldr	r2, [r7, #0]
 800b4f8:	4619      	mov	r1, r3
 800b4fa:	f7fe fa79 	bl	80099f0 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800b4fe:	f7fe fdef 	bl	800a0e0 <xTaskResumeAll>
 800b502:	4603      	mov	r3, r0
 800b504:	2b00      	cmp	r3, #0
 800b506:	d10a      	bne.n	800b51e <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 800b508:	4b09      	ldr	r3, [pc, #36]	@ (800b530 <prvProcessTimerOrBlockTask+0x98>)
 800b50a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b50e:	601a      	str	r2, [r3, #0]
 800b510:	f3bf 8f4f 	dsb	sy
 800b514:	f3bf 8f6f 	isb	sy
    }
 800b518:	e001      	b.n	800b51e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800b51a:	f7fe fde1 	bl	800a0e0 <xTaskResumeAll>
    }
 800b51e:	bf00      	nop
 800b520:	3710      	adds	r7, #16
 800b522:	46bd      	mov	sp, r7
 800b524:	bd80      	pop	{r7, pc}
 800b526:	bf00      	nop
 800b528:	200004b0 	.word	0x200004b0
 800b52c:	200004b4 	.word	0x200004b4
 800b530:	e000ed04 	.word	0xe000ed04

0800b534 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800b534:	b480      	push	{r7}
 800b536:	b085      	sub	sp, #20
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b53c:	4b0e      	ldr	r3, [pc, #56]	@ (800b578 <prvGetNextExpireTime+0x44>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d101      	bne.n	800b54a <prvGetNextExpireTime+0x16>
 800b546:	2201      	movs	r2, #1
 800b548:	e000      	b.n	800b54c <prvGetNextExpireTime+0x18>
 800b54a:	2200      	movs	r2, #0
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d105      	bne.n	800b564 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b558:	4b07      	ldr	r3, [pc, #28]	@ (800b578 <prvGetNextExpireTime+0x44>)
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	68db      	ldr	r3, [r3, #12]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	60fb      	str	r3, [r7, #12]
 800b562:	e001      	b.n	800b568 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800b564:	2300      	movs	r3, #0
 800b566:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800b568:	68fb      	ldr	r3, [r7, #12]
    }
 800b56a:	4618      	mov	r0, r3
 800b56c:	3714      	adds	r7, #20
 800b56e:	46bd      	mov	sp, r7
 800b570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b574:	4770      	bx	lr
 800b576:	bf00      	nop
 800b578:	200004ac 	.word	0x200004ac

0800b57c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b084      	sub	sp, #16
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 800b584:	f7fe febc 	bl	800a300 <xTaskGetTickCount>
 800b588:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800b58a:	4b0b      	ldr	r3, [pc, #44]	@ (800b5b8 <prvSampleTimeNow+0x3c>)
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	68fa      	ldr	r2, [r7, #12]
 800b590:	429a      	cmp	r2, r3
 800b592:	d205      	bcs.n	800b5a0 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800b594:	f000 f922 	bl	800b7dc <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2201      	movs	r2, #1
 800b59c:	601a      	str	r2, [r3, #0]
 800b59e:	e002      	b.n	800b5a6 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800b5a6:	4a04      	ldr	r2, [pc, #16]	@ (800b5b8 <prvSampleTimeNow+0x3c>)
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
    }
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	3710      	adds	r7, #16
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}
 800b5b6:	bf00      	nop
 800b5b8:	200004bc 	.word	0x200004bc

0800b5bc <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b086      	sub	sp, #24
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	60f8      	str	r0, [r7, #12]
 800b5c4:	60b9      	str	r1, [r7, #8]
 800b5c6:	607a      	str	r2, [r7, #4]
 800b5c8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	68ba      	ldr	r2, [r7, #8]
 800b5d2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	68fa      	ldr	r2, [r7, #12]
 800b5d8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800b5da:	68ba      	ldr	r2, [r7, #8]
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	429a      	cmp	r2, r3
 800b5e0:	d812      	bhi.n	800b608 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 800b5e2:	687a      	ldr	r2, [r7, #4]
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	1ad2      	subs	r2, r2, r3
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	699b      	ldr	r3, [r3, #24]
 800b5ec:	429a      	cmp	r2, r3
 800b5ee:	d302      	bcc.n	800b5f6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800b5f0:	2301      	movs	r3, #1
 800b5f2:	617b      	str	r3, [r7, #20]
 800b5f4:	e01b      	b.n	800b62e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b5f6:	4b10      	ldr	r3, [pc, #64]	@ (800b638 <prvInsertTimerInActiveList+0x7c>)
 800b5f8:	681a      	ldr	r2, [r3, #0]
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	3304      	adds	r3, #4
 800b5fe:	4619      	mov	r1, r3
 800b600:	4610      	mov	r0, r2
 800b602:	f7fd fb88 	bl	8008d16 <vListInsert>
 800b606:	e012      	b.n	800b62e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b608:	687a      	ldr	r2, [r7, #4]
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	429a      	cmp	r2, r3
 800b60e:	d206      	bcs.n	800b61e <prvInsertTimerInActiveList+0x62>
 800b610:	68ba      	ldr	r2, [r7, #8]
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	429a      	cmp	r2, r3
 800b616:	d302      	bcc.n	800b61e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800b618:	2301      	movs	r3, #1
 800b61a:	617b      	str	r3, [r7, #20]
 800b61c:	e007      	b.n	800b62e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b61e:	4b07      	ldr	r3, [pc, #28]	@ (800b63c <prvInsertTimerInActiveList+0x80>)
 800b620:	681a      	ldr	r2, [r3, #0]
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	3304      	adds	r3, #4
 800b626:	4619      	mov	r1, r3
 800b628:	4610      	mov	r0, r2
 800b62a:	f7fd fb74 	bl	8008d16 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800b62e:	697b      	ldr	r3, [r7, #20]
    }
 800b630:	4618      	mov	r0, r3
 800b632:	3718      	adds	r7, #24
 800b634:	46bd      	mov	sp, r7
 800b636:	bd80      	pop	{r7, pc}
 800b638:	200004b0 	.word	0x200004b0
 800b63c:	200004ac 	.word	0x200004ac

0800b640 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800b640:	b580      	push	{r7, lr}
 800b642:	b088      	sub	sp, #32
 800b644:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 800b646:	f107 0308 	add.w	r3, r7, #8
 800b64a:	2200      	movs	r2, #0
 800b64c:	601a      	str	r2, [r3, #0]
 800b64e:	605a      	str	r2, [r3, #4]
 800b650:	609a      	str	r2, [r3, #8]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 800b652:	e0ae      	b.n	800b7b2 <prvProcessReceivedCommands+0x172>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b654:	68bb      	ldr	r3, [r7, #8]
 800b656:	2b00      	cmp	r3, #0
 800b658:	f2c0 80ab 	blt.w	800b7b2 <prvProcessReceivedCommands+0x172>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b65c:	693b      	ldr	r3, [r7, #16]
 800b65e:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800b660:	69fb      	ldr	r3, [r7, #28]
 800b662:	695b      	ldr	r3, [r3, #20]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d004      	beq.n	800b672 <prvProcessReceivedCommands+0x32>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b668:	69fb      	ldr	r3, [r7, #28]
 800b66a:	3304      	adds	r3, #4
 800b66c:	4618      	mov	r0, r3
 800b66e:	f7fd fb8b 	bl	8008d88 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b672:	1d3b      	adds	r3, r7, #4
 800b674:	4618      	mov	r0, r3
 800b676:	f7ff ff81 	bl	800b57c <prvSampleTimeNow>
 800b67a:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 800b67c:	68bb      	ldr	r3, [r7, #8]
 800b67e:	3b01      	subs	r3, #1
 800b680:	2b08      	cmp	r3, #8
 800b682:	f200 8093 	bhi.w	800b7ac <prvProcessReceivedCommands+0x16c>
 800b686:	a201      	add	r2, pc, #4	@ (adr r2, 800b68c <prvProcessReceivedCommands+0x4c>)
 800b688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b68c:	0800b6b1 	.word	0x0800b6b1
 800b690:	0800b6b1 	.word	0x0800b6b1
 800b694:	0800b719 	.word	0x0800b719
 800b698:	0800b72d 	.word	0x0800b72d
 800b69c:	0800b783 	.word	0x0800b783
 800b6a0:	0800b6b1 	.word	0x0800b6b1
 800b6a4:	0800b6b1 	.word	0x0800b6b1
 800b6a8:	0800b719 	.word	0x0800b719
 800b6ac:	0800b72d 	.word	0x0800b72d
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 800b6b0:	69fb      	ldr	r3, [r7, #28]
 800b6b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b6b6:	f043 0301 	orr.w	r3, r3, #1
 800b6ba:	b2da      	uxtb	r2, r3
 800b6bc:	69fb      	ldr	r3, [r7, #28]
 800b6be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b6c2:	68fa      	ldr	r2, [r7, #12]
 800b6c4:	69fb      	ldr	r3, [r7, #28]
 800b6c6:	699b      	ldr	r3, [r3, #24]
 800b6c8:	18d1      	adds	r1, r2, r3
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	69ba      	ldr	r2, [r7, #24]
 800b6ce:	69f8      	ldr	r0, [r7, #28]
 800b6d0:	f7ff ff74 	bl	800b5bc <prvInsertTimerInActiveList>
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d06a      	beq.n	800b7b0 <prvProcessReceivedCommands+0x170>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 800b6da:	69fb      	ldr	r3, [r7, #28]
 800b6dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b6e0:	f003 0304 	and.w	r3, r3, #4
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d009      	beq.n	800b6fc <prvProcessReceivedCommands+0xbc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800b6e8:	68fa      	ldr	r2, [r7, #12]
 800b6ea:	69fb      	ldr	r3, [r7, #28]
 800b6ec:	699b      	ldr	r3, [r3, #24]
 800b6ee:	4413      	add	r3, r2
 800b6f0:	69ba      	ldr	r2, [r7, #24]
 800b6f2:	4619      	mov	r1, r3
 800b6f4:	69f8      	ldr	r0, [r7, #28]
 800b6f6:	f7ff fe69 	bl	800b3cc <prvReloadTimer>
 800b6fa:	e008      	b.n	800b70e <prvProcessReceivedCommands+0xce>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800b6fc:	69fb      	ldr	r3, [r7, #28]
 800b6fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b702:	f023 0301 	bic.w	r3, r3, #1
 800b706:	b2da      	uxtb	r2, r3
 800b708:	69fb      	ldr	r3, [r7, #28]
 800b70a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b70e:	69fb      	ldr	r3, [r7, #28]
 800b710:	6a1b      	ldr	r3, [r3, #32]
 800b712:	69f8      	ldr	r0, [r7, #28]
 800b714:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800b716:	e04b      	b.n	800b7b0 <prvProcessReceivedCommands+0x170>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800b718:	69fb      	ldr	r3, [r7, #28]
 800b71a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b71e:	f023 0301 	bic.w	r3, r3, #1
 800b722:	b2da      	uxtb	r2, r3
 800b724:	69fb      	ldr	r3, [r7, #28]
 800b726:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800b72a:	e042      	b.n	800b7b2 <prvProcessReceivedCommands+0x172>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 800b72c:	69fb      	ldr	r3, [r7, #28]
 800b72e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b732:	f043 0301 	orr.w	r3, r3, #1
 800b736:	b2da      	uxtb	r2, r3
 800b738:	69fb      	ldr	r3, [r7, #28]
 800b73a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b73e:	68fa      	ldr	r2, [r7, #12]
 800b740:	69fb      	ldr	r3, [r7, #28]
 800b742:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b744:	69fb      	ldr	r3, [r7, #28]
 800b746:	699b      	ldr	r3, [r3, #24]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d110      	bne.n	800b76e <prvProcessReceivedCommands+0x12e>
    __asm volatile
 800b74c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b750:	b672      	cpsid	i
 800b752:	f383 8811 	msr	BASEPRI, r3
 800b756:	f3bf 8f6f 	isb	sy
 800b75a:	f3bf 8f4f 	dsb	sy
 800b75e:	b662      	cpsie	i
 800b760:	617b      	str	r3, [r7, #20]
}
 800b762:	bf00      	nop
 800b764:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 800b768:	481a      	ldr	r0, [pc, #104]	@ (800b7d4 <prvProcessReceivedCommands+0x194>)
 800b76a:	f7f6 fe2d 	bl	80023c8 <vAssertCalled>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b76e:	69fb      	ldr	r3, [r7, #28]
 800b770:	699a      	ldr	r2, [r3, #24]
 800b772:	69bb      	ldr	r3, [r7, #24]
 800b774:	18d1      	adds	r1, r2, r3
 800b776:	69bb      	ldr	r3, [r7, #24]
 800b778:	69ba      	ldr	r2, [r7, #24]
 800b77a:	69f8      	ldr	r0, [r7, #28]
 800b77c:	f7ff ff1e 	bl	800b5bc <prvInsertTimerInActiveList>
                        break;
 800b780:	e017      	b.n	800b7b2 <prvProcessReceivedCommands+0x172>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b782:	69fb      	ldr	r3, [r7, #28]
 800b784:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b788:	f003 0302 	and.w	r3, r3, #2
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d103      	bne.n	800b798 <prvProcessReceivedCommands+0x158>
                            {
                                vPortFree( pxTimer );
 800b790:	69f8      	ldr	r0, [r7, #28]
 800b792:	f7f7 f947 	bl	8002a24 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800b796:	e00c      	b.n	800b7b2 <prvProcessReceivedCommands+0x172>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800b798:	69fb      	ldr	r3, [r7, #28]
 800b79a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b79e:	f023 0301 	bic.w	r3, r3, #1
 800b7a2:	b2da      	uxtb	r2, r3
 800b7a4:	69fb      	ldr	r3, [r7, #28]
 800b7a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800b7aa:	e002      	b.n	800b7b2 <prvProcessReceivedCommands+0x172>

                    default:
                        /* Don't expect to get here. */
                        break;
 800b7ac:	bf00      	nop
 800b7ae:	e000      	b.n	800b7b2 <prvProcessReceivedCommands+0x172>
                        break;
 800b7b0:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 800b7b2:	4b09      	ldr	r3, [pc, #36]	@ (800b7d8 <prvProcessReceivedCommands+0x198>)
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	f107 0108 	add.w	r1, r7, #8
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	4618      	mov	r0, r3
 800b7be:	f7fd fde9 	bl	8009394 <xQueueReceive>
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	f47f af45 	bne.w	800b654 <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 800b7ca:	bf00      	nop
 800b7cc:	bf00      	nop
 800b7ce:	3720      	adds	r7, #32
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	bd80      	pop	{r7, pc}
 800b7d4:	08010c2c 	.word	0x08010c2c
 800b7d8:	200004b4 	.word	0x200004b4

0800b7dc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b082      	sub	sp, #8
 800b7e0:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b7e2:	e009      	b.n	800b7f8 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b7e4:	4b0e      	ldr	r3, [pc, #56]	@ (800b820 <prvSwitchTimerLists+0x44>)
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	68db      	ldr	r3, [r3, #12]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800b7ee:	f04f 31ff 	mov.w	r1, #4294967295
 800b7f2:	6838      	ldr	r0, [r7, #0]
 800b7f4:	f7ff fe0c 	bl	800b410 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b7f8:	4b09      	ldr	r3, [pc, #36]	@ (800b820 <prvSwitchTimerLists+0x44>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d1f0      	bne.n	800b7e4 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800b802:	4b07      	ldr	r3, [pc, #28]	@ (800b820 <prvSwitchTimerLists+0x44>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800b808:	4b06      	ldr	r3, [pc, #24]	@ (800b824 <prvSwitchTimerLists+0x48>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	4a04      	ldr	r2, [pc, #16]	@ (800b820 <prvSwitchTimerLists+0x44>)
 800b80e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800b810:	4a04      	ldr	r2, [pc, #16]	@ (800b824 <prvSwitchTimerLists+0x48>)
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	6013      	str	r3, [r2, #0]
    }
 800b816:	bf00      	nop
 800b818:	3708      	adds	r7, #8
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bd80      	pop	{r7, pc}
 800b81e:	bf00      	nop
 800b820:	200004ac 	.word	0x200004ac
 800b824:	200004b0 	.word	0x200004b0

0800b828 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800b828:	b580      	push	{r7, lr}
 800b82a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800b82c:	f000 f998 	bl	800bb60 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800b830:	4b0d      	ldr	r3, [pc, #52]	@ (800b868 <prvCheckForValidListAndQueue+0x40>)
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d113      	bne.n	800b860 <prvCheckForValidListAndQueue+0x38>
            {
                vListInitialise( &xActiveTimerList1 );
 800b838:	480c      	ldr	r0, [pc, #48]	@ (800b86c <prvCheckForValidListAndQueue+0x44>)
 800b83a:	f7fd fa1b 	bl	8008c74 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800b83e:	480c      	ldr	r0, [pc, #48]	@ (800b870 <prvCheckForValidListAndQueue+0x48>)
 800b840:	f7fd fa18 	bl	8008c74 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800b844:	4b0b      	ldr	r3, [pc, #44]	@ (800b874 <prvCheckForValidListAndQueue+0x4c>)
 800b846:	4a09      	ldr	r2, [pc, #36]	@ (800b86c <prvCheckForValidListAndQueue+0x44>)
 800b848:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800b84a:	4b0b      	ldr	r3, [pc, #44]	@ (800b878 <prvCheckForValidListAndQueue+0x50>)
 800b84c:	4a08      	ldr	r2, [pc, #32]	@ (800b870 <prvCheckForValidListAndQueue+0x48>)
 800b84e:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 800b850:	2200      	movs	r2, #0
 800b852:	210c      	movs	r1, #12
 800b854:	2008      	movs	r0, #8
 800b856:	f7fd fb5f 	bl	8008f18 <xQueueGenericCreate>
 800b85a:	4603      	mov	r3, r0
 800b85c:	4a02      	ldr	r2, [pc, #8]	@ (800b868 <prvCheckForValidListAndQueue+0x40>)
 800b85e:	6013      	str	r3, [r2, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800b860:	f000 f9b6 	bl	800bbd0 <vPortExitCritical>
    }
 800b864:	bf00      	nop
 800b866:	bd80      	pop	{r7, pc}
 800b868:	200004b4 	.word	0x200004b4
 800b86c:	20000484 	.word	0x20000484
 800b870:	20000498 	.word	0x20000498
 800b874:	200004ac 	.word	0x200004ac
 800b878:	200004b0 	.word	0x200004b0

0800b87c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800b87c:	b480      	push	{r7}
 800b87e:	b085      	sub	sp, #20
 800b880:	af00      	add	r7, sp, #0
 800b882:	60f8      	str	r0, [r7, #12]
 800b884:	60b9      	str	r1, [r7, #8]
 800b886:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	3b04      	subs	r3, #4
 800b88c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b894:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	3b04      	subs	r3, #4
 800b89a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800b89c:	68bb      	ldr	r3, [r7, #8]
 800b89e:	f023 0201 	bic.w	r2, r3, #1
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	3b04      	subs	r3, #4
 800b8aa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800b8ac:	4a0c      	ldr	r2, [pc, #48]	@ (800b8e0 <pxPortInitialiseStack+0x64>)
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	3b14      	subs	r3, #20
 800b8b6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800b8b8:	687a      	ldr	r2, [r7, #4]
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	3b04      	subs	r3, #4
 800b8c2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	f06f 0202 	mvn.w	r2, #2
 800b8ca:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	3b20      	subs	r3, #32
 800b8d0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
}
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	3714      	adds	r7, #20
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8de:	4770      	bx	lr
 800b8e0:	0800b8e5 	.word	0x0800b8e5

0800b8e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b084      	sub	sp, #16
 800b8e8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800b8ee:	4b15      	ldr	r3, [pc, #84]	@ (800b944 <prvTaskExitError+0x60>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8f6:	d00f      	beq.n	800b918 <prvTaskExitError+0x34>
    __asm volatile
 800b8f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8fc:	b672      	cpsid	i
 800b8fe:	f383 8811 	msr	BASEPRI, r3
 800b902:	f3bf 8f6f 	isb	sy
 800b906:	f3bf 8f4f 	dsb	sy
 800b90a:	b662      	cpsie	i
 800b90c:	60fb      	str	r3, [r7, #12]
}
 800b90e:	bf00      	nop
 800b910:	21ee      	movs	r1, #238	@ 0xee
 800b912:	480d      	ldr	r0, [pc, #52]	@ (800b948 <prvTaskExitError+0x64>)
 800b914:	f7f6 fd58 	bl	80023c8 <vAssertCalled>
    __asm volatile
 800b918:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b91c:	b672      	cpsid	i
 800b91e:	f383 8811 	msr	BASEPRI, r3
 800b922:	f3bf 8f6f 	isb	sy
 800b926:	f3bf 8f4f 	dsb	sy
 800b92a:	b662      	cpsie	i
 800b92c:	60bb      	str	r3, [r7, #8]
}
 800b92e:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800b930:	bf00      	nop
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d0fc      	beq.n	800b932 <prvTaskExitError+0x4e>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800b938:	bf00      	nop
 800b93a:	bf00      	nop
 800b93c:	3710      	adds	r7, #16
 800b93e:	46bd      	mov	sp, r7
 800b940:	bd80      	pop	{r7, pc}
 800b942:	bf00      	nop
 800b944:	20000010 	.word	0x20000010
 800b948:	08010cc4 	.word	0x08010cc4
 800b94c:	00000000 	.word	0x00000000

0800b950 <SVC_Handler>:
/*-----------------------------------------------------------*/
void vPortSVCHandler( void )
{
	__asm volatile (
 800b950:	4b07      	ldr	r3, [pc, #28]	@ (800b970 <pxCurrentTCBConst2>)
 800b952:	6819      	ldr	r1, [r3, #0]
 800b954:	6808      	ldr	r0, [r1, #0]
 800b956:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b95a:	f380 8809 	msr	PSP, r0
 800b95e:	f3bf 8f6f 	isb	sy
 800b962:	f04f 0000 	mov.w	r0, #0
 800b966:	f380 8811 	msr	BASEPRI, r0
 800b96a:	4770      	bx	lr
 800b96c:	f3af 8000 	nop.w

0800b970 <pxCurrentTCBConst2>:
 800b970:	20000350 	.word	0x20000350
	        "   bx r14                          \n"
	        "                                   \n"
	        "   .align 4                        \n"
	        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
	        );
}
 800b974:	bf00      	nop
 800b976:	bf00      	nop

0800b978 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 800b978:	4808      	ldr	r0, [pc, #32]	@ (800b99c <prvPortStartFirstTask+0x24>)
 800b97a:	6800      	ldr	r0, [r0, #0]
 800b97c:	6800      	ldr	r0, [r0, #0]
 800b97e:	f380 8808 	msr	MSP, r0
 800b982:	f04f 0000 	mov.w	r0, #0
 800b986:	f380 8814 	msr	CONTROL, r0
 800b98a:	b662      	cpsie	i
 800b98c:	b661      	cpsie	f
 800b98e:	f3bf 8f4f 	dsb	sy
 800b992:	f3bf 8f6f 	isb	sy
 800b996:	df00      	svc	0
 800b998:	bf00      	nop
 800b99a:	0000      	.short	0x0000
 800b99c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 800b9a0:	bf00      	nop
 800b9a2:	bf00      	nop

0800b9a4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b08a      	sub	sp, #40	@ 0x28
 800b9a8:	af00      	add	r7, sp, #0
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 800b9aa:	4b62      	ldr	r3, [pc, #392]	@ (800bb34 <xPortStartScheduler+0x190>)
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	627b      	str	r3, [r7, #36]	@ 0x24
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 800b9b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9b2:	332c      	adds	r3, #44	@ 0x2c
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	4a60      	ldr	r2, [pc, #384]	@ (800bb38 <xPortStartScheduler+0x194>)
 800b9b8:	4293      	cmp	r3, r2
 800b9ba:	d010      	beq.n	800b9de <xPortStartScheduler+0x3a>
    __asm volatile
 800b9bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9c0:	b672      	cpsid	i
 800b9c2:	f383 8811 	msr	BASEPRI, r3
 800b9c6:	f3bf 8f6f 	isb	sy
 800b9ca:	f3bf 8f4f 	dsb	sy
 800b9ce:	b662      	cpsie	i
 800b9d0:	61bb      	str	r3, [r7, #24]
}
 800b9d2:	bf00      	nop
 800b9d4:	f240 114b 	movw	r1, #331	@ 0x14b
 800b9d8:	4858      	ldr	r0, [pc, #352]	@ (800bb3c <xPortStartScheduler+0x198>)
 800b9da:	f7f6 fcf5 	bl	80023c8 <vAssertCalled>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 800b9de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9e0:	3338      	adds	r3, #56	@ 0x38
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	4a56      	ldr	r2, [pc, #344]	@ (800bb40 <xPortStartScheduler+0x19c>)
 800b9e6:	4293      	cmp	r3, r2
 800b9e8:	d010      	beq.n	800ba0c <xPortStartScheduler+0x68>
    __asm volatile
 800b9ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9ee:	b672      	cpsid	i
 800b9f0:	f383 8811 	msr	BASEPRI, r3
 800b9f4:	f3bf 8f6f 	isb	sy
 800b9f8:	f3bf 8f4f 	dsb	sy
 800b9fc:	b662      	cpsie	i
 800b9fe:	61fb      	str	r3, [r7, #28]
}
 800ba00:	bf00      	nop
 800ba02:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 800ba06:	484d      	ldr	r0, [pc, #308]	@ (800bb3c <xPortStartScheduler+0x198>)
 800ba08:	f7f6 fcde 	bl	80023c8 <vAssertCalled>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ba10:	4b4c      	ldr	r3, [pc, #304]	@ (800bb44 <xPortStartScheduler+0x1a0>)
 800ba12:	623b      	str	r3, [r7, #32]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 800ba14:	6a3b      	ldr	r3, [r7, #32]
 800ba16:	781b      	ldrb	r3, [r3, #0]
 800ba18:	b2db      	uxtb	r3, r3
 800ba1a:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ba1c:	6a3b      	ldr	r3, [r7, #32]
 800ba1e:	22ff      	movs	r2, #255	@ 0xff
 800ba20:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ba22:	6a3b      	ldr	r3, [r7, #32]
 800ba24:	781b      	ldrb	r3, [r3, #0]
 800ba26:	b2db      	uxtb	r3, r3
 800ba28:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ba2a:	79fb      	ldrb	r3, [r7, #7]
 800ba2c:	b2db      	uxtb	r3, r3
 800ba2e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ba32:	b2da      	uxtb	r2, r3
 800ba34:	4b44      	ldr	r3, [pc, #272]	@ (800bb48 <xPortStartScheduler+0x1a4>)
 800ba36:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 800ba38:	4b43      	ldr	r3, [pc, #268]	@ (800bb48 <xPortStartScheduler+0x1a4>)
 800ba3a:	781b      	ldrb	r3, [r3, #0]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d110      	bne.n	800ba62 <xPortStartScheduler+0xbe>
    __asm volatile
 800ba40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba44:	b672      	cpsid	i
 800ba46:	f383 8811 	msr	BASEPRI, r3
 800ba4a:	f3bf 8f6f 	isb	sy
 800ba4e:	f3bf 8f4f 	dsb	sy
 800ba52:	b662      	cpsie	i
 800ba54:	617b      	str	r3, [r7, #20]
}
 800ba56:	bf00      	nop
 800ba58:	f240 116f 	movw	r1, #367	@ 0x16f
 800ba5c:	4837      	ldr	r0, [pc, #220]	@ (800bb3c <xPortStartScheduler+0x198>)
 800ba5e:	f7f6 fcb3 	bl	80023c8 <vAssertCalled>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 800ba62:	79fb      	ldrb	r3, [r7, #7]
 800ba64:	b2db      	uxtb	r3, r3
 800ba66:	43db      	mvns	r3, r3
 800ba68:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d019      	beq.n	800baa4 <xPortStartScheduler+0x100>
    __asm volatile
 800ba70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba74:	b672      	cpsid	i
 800ba76:	f383 8811 	msr	BASEPRI, r3
 800ba7a:	f3bf 8f6f 	isb	sy
 800ba7e:	f3bf 8f4f 	dsb	sy
 800ba82:	b662      	cpsie	i
 800ba84:	613b      	str	r3, [r7, #16]
}
 800ba86:	bf00      	nop
 800ba88:	f240 1173 	movw	r1, #371	@ 0x173
 800ba8c:	482b      	ldr	r0, [pc, #172]	@ (800bb3c <xPortStartScheduler+0x198>)
 800ba8e:	f7f6 fc9b 	bl	80023c8 <vAssertCalled>

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ba92:	e007      	b.n	800baa4 <xPortStartScheduler+0x100>
        {
            ulImplementedPrioBits++;
 800ba94:	68bb      	ldr	r3, [r7, #8]
 800ba96:	3301      	adds	r3, #1
 800ba98:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ba9a:	79fb      	ldrb	r3, [r7, #7]
 800ba9c:	b2db      	uxtb	r3, r3
 800ba9e:	005b      	lsls	r3, r3, #1
 800baa0:	b2db      	uxtb	r3, r3
 800baa2:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800baa4:	79fb      	ldrb	r3, [r7, #7]
 800baa6:	b2db      	uxtb	r3, r3
 800baa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800baac:	2b80      	cmp	r3, #128	@ 0x80
 800baae:	d0f1      	beq.n	800ba94 <xPortStartScheduler+0xf0>
        }

        if( ulImplementedPrioBits == 8 )
 800bab0:	68bb      	ldr	r3, [r7, #8]
 800bab2:	2b08      	cmp	r3, #8
 800bab4:	d103      	bne.n	800babe <xPortStartScheduler+0x11a>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 800bab6:	4b25      	ldr	r3, [pc, #148]	@ (800bb4c <xPortStartScheduler+0x1a8>)
 800bab8:	2200      	movs	r2, #0
 800baba:	601a      	str	r2, [r3, #0]
 800babc:	e004      	b.n	800bac8 <xPortStartScheduler+0x124>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	f1c3 0307 	rsb	r3, r3, #7
 800bac4:	4a21      	ldr	r2, [pc, #132]	@ (800bb4c <xPortStartScheduler+0x1a8>)
 800bac6:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bac8:	4b20      	ldr	r3, [pc, #128]	@ (800bb4c <xPortStartScheduler+0x1a8>)
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	021b      	lsls	r3, r3, #8
 800bace:	4a1f      	ldr	r2, [pc, #124]	@ (800bb4c <xPortStartScheduler+0x1a8>)
 800bad0:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bad2:	4b1e      	ldr	r3, [pc, #120]	@ (800bb4c <xPortStartScheduler+0x1a8>)
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800bada:	4a1c      	ldr	r2, [pc, #112]	@ (800bb4c <xPortStartScheduler+0x1a8>)
 800badc:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 800bade:	7bfb      	ldrb	r3, [r7, #15]
 800bae0:	b2da      	uxtb	r2, r3
 800bae2:	6a3b      	ldr	r3, [r7, #32]
 800bae4:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800bae6:	4b1a      	ldr	r3, [pc, #104]	@ (800bb50 <xPortStartScheduler+0x1ac>)
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	4a19      	ldr	r2, [pc, #100]	@ (800bb50 <xPortStartScheduler+0x1ac>)
 800baec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800baf0:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800baf2:	4b17      	ldr	r3, [pc, #92]	@ (800bb50 <xPortStartScheduler+0x1ac>)
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	4a16      	ldr	r2, [pc, #88]	@ (800bb50 <xPortStartScheduler+0x1ac>)
 800baf8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bafc:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 800bafe:	4b15      	ldr	r3, [pc, #84]	@ (800bb54 <xPortStartScheduler+0x1b0>)
 800bb00:	2200      	movs	r2, #0
 800bb02:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800bb04:	f000 f8ec 	bl	800bce0 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800bb08:	4b13      	ldr	r3, [pc, #76]	@ (800bb58 <xPortStartScheduler+0x1b4>)
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800bb0e:	f000 f90b 	bl	800bd28 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bb12:	4b12      	ldr	r3, [pc, #72]	@ (800bb5c <xPortStartScheduler+0x1b8>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	4a11      	ldr	r2, [pc, #68]	@ (800bb5c <xPortStartScheduler+0x1b8>)
 800bb18:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800bb1c:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800bb1e:	f7ff ff2b 	bl	800b978 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800bb22:	f7fe fd1d 	bl	800a560 <vTaskSwitchContext>
    prvTaskExitError();
 800bb26:	f7ff fedd 	bl	800b8e4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800bb2a:	2300      	movs	r3, #0
}
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	3728      	adds	r7, #40	@ 0x28
 800bb30:	46bd      	mov	sp, r7
 800bb32:	bd80      	pop	{r7, pc}
 800bb34:	e000ed08 	.word	0xe000ed08
 800bb38:	0800b951 	.word	0x0800b951
 800bb3c:	08010cc4 	.word	0x08010cc4
 800bb40:	0800bc31 	.word	0x0800bc31
 800bb44:	e000e400 	.word	0xe000e400
 800bb48:	200004c0 	.word	0x200004c0
 800bb4c:	200004c4 	.word	0x200004c4
 800bb50:	e000ed20 	.word	0xe000ed20
 800bb54:	e000ed1c 	.word	0xe000ed1c
 800bb58:	20000010 	.word	0x20000010
 800bb5c:	e000ef34 	.word	0xe000ef34

0800bb60 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b082      	sub	sp, #8
 800bb64:	af00      	add	r7, sp, #0
    __asm volatile
 800bb66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb6a:	b672      	cpsid	i
 800bb6c:	f383 8811 	msr	BASEPRI, r3
 800bb70:	f3bf 8f6f 	isb	sy
 800bb74:	f3bf 8f4f 	dsb	sy
 800bb78:	b662      	cpsie	i
 800bb7a:	607b      	str	r3, [r7, #4]
}
 800bb7c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800bb7e:	4b11      	ldr	r3, [pc, #68]	@ (800bbc4 <vPortEnterCritical+0x64>)
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	3301      	adds	r3, #1
 800bb84:	4a0f      	ldr	r2, [pc, #60]	@ (800bbc4 <vPortEnterCritical+0x64>)
 800bb86:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800bb88:	4b0e      	ldr	r3, [pc, #56]	@ (800bbc4 <vPortEnterCritical+0x64>)
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	2b01      	cmp	r3, #1
 800bb8e:	d115      	bne.n	800bbbc <vPortEnterCritical+0x5c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bb90:	4b0d      	ldr	r3, [pc, #52]	@ (800bbc8 <vPortEnterCritical+0x68>)
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	b2db      	uxtb	r3, r3
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d010      	beq.n	800bbbc <vPortEnterCritical+0x5c>
    __asm volatile
 800bb9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb9e:	b672      	cpsid	i
 800bba0:	f383 8811 	msr	BASEPRI, r3
 800bba4:	f3bf 8f6f 	isb	sy
 800bba8:	f3bf 8f4f 	dsb	sy
 800bbac:	b662      	cpsie	i
 800bbae:	603b      	str	r3, [r7, #0]
}
 800bbb0:	bf00      	nop
 800bbb2:	f44f 71ee 	mov.w	r1, #476	@ 0x1dc
 800bbb6:	4805      	ldr	r0, [pc, #20]	@ (800bbcc <vPortEnterCritical+0x6c>)
 800bbb8:	f7f6 fc06 	bl	80023c8 <vAssertCalled>
    }
}
 800bbbc:	bf00      	nop
 800bbbe:	3708      	adds	r7, #8
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	bd80      	pop	{r7, pc}
 800bbc4:	20000010 	.word	0x20000010
 800bbc8:	e000ed04 	.word	0xe000ed04
 800bbcc:	08010cc4 	.word	0x08010cc4

0800bbd0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b082      	sub	sp, #8
 800bbd4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800bbd6:	4b14      	ldr	r3, [pc, #80]	@ (800bc28 <vPortExitCritical+0x58>)
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d110      	bne.n	800bc00 <vPortExitCritical+0x30>
    __asm volatile
 800bbde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbe2:	b672      	cpsid	i
 800bbe4:	f383 8811 	msr	BASEPRI, r3
 800bbe8:	f3bf 8f6f 	isb	sy
 800bbec:	f3bf 8f4f 	dsb	sy
 800bbf0:	b662      	cpsie	i
 800bbf2:	607b      	str	r3, [r7, #4]
}
 800bbf4:	bf00      	nop
 800bbf6:	f240 11e3 	movw	r1, #483	@ 0x1e3
 800bbfa:	480c      	ldr	r0, [pc, #48]	@ (800bc2c <vPortExitCritical+0x5c>)
 800bbfc:	f7f6 fbe4 	bl	80023c8 <vAssertCalled>
    uxCriticalNesting--;
 800bc00:	4b09      	ldr	r3, [pc, #36]	@ (800bc28 <vPortExitCritical+0x58>)
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	3b01      	subs	r3, #1
 800bc06:	4a08      	ldr	r2, [pc, #32]	@ (800bc28 <vPortExitCritical+0x58>)
 800bc08:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800bc0a:	4b07      	ldr	r3, [pc, #28]	@ (800bc28 <vPortExitCritical+0x58>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d105      	bne.n	800bc1e <vPortExitCritical+0x4e>
 800bc12:	2300      	movs	r3, #0
 800bc14:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 800bc1c:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800bc1e:	bf00      	nop
 800bc20:	3708      	adds	r7, #8
 800bc22:	46bd      	mov	sp, r7
 800bc24:	bd80      	pop	{r7, pc}
 800bc26:	bf00      	nop
 800bc28:	20000010 	.word	0x20000010
 800bc2c:	08010cc4 	.word	0x08010cc4

0800bc30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 800bc30:	f3ef 8009 	mrs	r0, PSP
 800bc34:	f3bf 8f6f 	isb	sy
 800bc38:	4b15      	ldr	r3, [pc, #84]	@ (800bc90 <pxCurrentTCBConst>)
 800bc3a:	681a      	ldr	r2, [r3, #0]
 800bc3c:	f01e 0f10 	tst.w	lr, #16
 800bc40:	bf08      	it	eq
 800bc42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bc46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc4a:	6010      	str	r0, [r2, #0]
 800bc4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bc50:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800bc54:	b672      	cpsid	i
 800bc56:	f380 8811 	msr	BASEPRI, r0
 800bc5a:	f3bf 8f4f 	dsb	sy
 800bc5e:	f3bf 8f6f 	isb	sy
 800bc62:	b662      	cpsie	i
 800bc64:	f7fe fc7c 	bl	800a560 <vTaskSwitchContext>
 800bc68:	f04f 0000 	mov.w	r0, #0
 800bc6c:	f380 8811 	msr	BASEPRI, r0
 800bc70:	bc09      	pop	{r0, r3}
 800bc72:	6819      	ldr	r1, [r3, #0]
 800bc74:	6808      	ldr	r0, [r1, #0]
 800bc76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc7a:	f01e 0f10 	tst.w	lr, #16
 800bc7e:	bf08      	it	eq
 800bc80:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bc84:	f380 8809 	msr	PSP, r0
 800bc88:	f3bf 8f6f 	isb	sy
 800bc8c:	4770      	bx	lr
 800bc8e:	bf00      	nop

0800bc90 <pxCurrentTCBConst>:
 800bc90:	20000350 	.word	0x20000350
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 800bc94:	bf00      	nop
 800bc96:	bf00      	nop

0800bc98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b082      	sub	sp, #8
 800bc9c:	af00      	add	r7, sp, #0
    __asm volatile
 800bc9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bca2:	b672      	cpsid	i
 800bca4:	f383 8811 	msr	BASEPRI, r3
 800bca8:	f3bf 8f6f 	isb	sy
 800bcac:	f3bf 8f4f 	dsb	sy
 800bcb0:	b662      	cpsie	i
 800bcb2:	607b      	str	r3, [r7, #4]
}
 800bcb4:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800bcb6:	f7fe fb33 	bl	800a320 <xTaskIncrementTick>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d003      	beq.n	800bcc8 <xPortSysTickHandler+0x30>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bcc0:	4b06      	ldr	r3, [pc, #24]	@ (800bcdc <xPortSysTickHandler+0x44>)
 800bcc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bcc6:	601a      	str	r2, [r3, #0]
 800bcc8:	2300      	movs	r3, #0
 800bcca:	603b      	str	r3, [r7, #0]
    __asm volatile
 800bccc:	683b      	ldr	r3, [r7, #0]
 800bcce:	f383 8811 	msr	BASEPRI, r3
}
 800bcd2:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 800bcd4:	bf00      	nop
 800bcd6:	3708      	adds	r7, #8
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	bd80      	pop	{r7, pc}
 800bcdc:	e000ed04 	.word	0xe000ed04

0800bce0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800bce0:	b480      	push	{r7}
 800bce2:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bce4:	4b0b      	ldr	r3, [pc, #44]	@ (800bd14 <vPortSetupTimerInterrupt+0x34>)
 800bce6:	2200      	movs	r2, #0
 800bce8:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bcea:	4b0b      	ldr	r3, [pc, #44]	@ (800bd18 <vPortSetupTimerInterrupt+0x38>)
 800bcec:	2200      	movs	r2, #0
 800bcee:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bcf0:	4b0a      	ldr	r3, [pc, #40]	@ (800bd1c <vPortSetupTimerInterrupt+0x3c>)
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	4a0a      	ldr	r2, [pc, #40]	@ (800bd20 <vPortSetupTimerInterrupt+0x40>)
 800bcf6:	fba2 2303 	umull	r2, r3, r2, r3
 800bcfa:	099b      	lsrs	r3, r3, #6
 800bcfc:	4a09      	ldr	r2, [pc, #36]	@ (800bd24 <vPortSetupTimerInterrupt+0x44>)
 800bcfe:	3b01      	subs	r3, #1
 800bd00:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bd02:	4b04      	ldr	r3, [pc, #16]	@ (800bd14 <vPortSetupTimerInterrupt+0x34>)
 800bd04:	2207      	movs	r2, #7
 800bd06:	601a      	str	r2, [r3, #0]
}
 800bd08:	bf00      	nop
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd10:	4770      	bx	lr
 800bd12:	bf00      	nop
 800bd14:	e000e010 	.word	0xe000e010
 800bd18:	e000e018 	.word	0xe000e018
 800bd1c:	20000004 	.word	0x20000004
 800bd20:	10624dd3 	.word	0x10624dd3
 800bd24:	e000e014 	.word	0xe000e014

0800bd28 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 800bd28:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800bd38 <vPortEnableVFP+0x10>
 800bd2c:	6801      	ldr	r1, [r0, #0]
 800bd2e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800bd32:	6001      	str	r1, [r0, #0]
 800bd34:	4770      	bx	lr
 800bd36:	0000      	.short	0x0000
 800bd38:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 800bd3c:	bf00      	nop
 800bd3e:	bf00      	nop

0800bd40 <__assert_func>:
 800bd40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bd42:	4614      	mov	r4, r2
 800bd44:	461a      	mov	r2, r3
 800bd46:	4b09      	ldr	r3, [pc, #36]	@ (800bd6c <__assert_func+0x2c>)
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	4605      	mov	r5, r0
 800bd4c:	68d8      	ldr	r0, [r3, #12]
 800bd4e:	b14c      	cbz	r4, 800bd64 <__assert_func+0x24>
 800bd50:	4b07      	ldr	r3, [pc, #28]	@ (800bd70 <__assert_func+0x30>)
 800bd52:	9100      	str	r1, [sp, #0]
 800bd54:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bd58:	4906      	ldr	r1, [pc, #24]	@ (800bd74 <__assert_func+0x34>)
 800bd5a:	462b      	mov	r3, r5
 800bd5c:	f001 fe9a 	bl	800da94 <fiprintf>
 800bd60:	f002 f940 	bl	800dfe4 <abort>
 800bd64:	4b04      	ldr	r3, [pc, #16]	@ (800bd78 <__assert_func+0x38>)
 800bd66:	461c      	mov	r4, r3
 800bd68:	e7f3      	b.n	800bd52 <__assert_func+0x12>
 800bd6a:	bf00      	nop
 800bd6c:	2000018c 	.word	0x2000018c
 800bd70:	08010f90 	.word	0x08010f90
 800bd74:	08010f9d 	.word	0x08010f9d
 800bd78:	08010fcb 	.word	0x08010fcb

0800bd7c <_calloc_r>:
 800bd7c:	b570      	push	{r4, r5, r6, lr}
 800bd7e:	fba1 5402 	umull	r5, r4, r1, r2
 800bd82:	b934      	cbnz	r4, 800bd92 <_calloc_r+0x16>
 800bd84:	4629      	mov	r1, r5
 800bd86:	f000 f83f 	bl	800be08 <_malloc_r>
 800bd8a:	4606      	mov	r6, r0
 800bd8c:	b928      	cbnz	r0, 800bd9a <_calloc_r+0x1e>
 800bd8e:	4630      	mov	r0, r6
 800bd90:	bd70      	pop	{r4, r5, r6, pc}
 800bd92:	220c      	movs	r2, #12
 800bd94:	6002      	str	r2, [r0, #0]
 800bd96:	2600      	movs	r6, #0
 800bd98:	e7f9      	b.n	800bd8e <_calloc_r+0x12>
 800bd9a:	462a      	mov	r2, r5
 800bd9c:	4621      	mov	r1, r4
 800bd9e:	f002 f813 	bl	800ddc8 <memset>
 800bda2:	e7f4      	b.n	800bd8e <_calloc_r+0x12>

0800bda4 <malloc>:
 800bda4:	4b02      	ldr	r3, [pc, #8]	@ (800bdb0 <malloc+0xc>)
 800bda6:	4601      	mov	r1, r0
 800bda8:	6818      	ldr	r0, [r3, #0]
 800bdaa:	f000 b82d 	b.w	800be08 <_malloc_r>
 800bdae:	bf00      	nop
 800bdb0:	2000018c 	.word	0x2000018c

0800bdb4 <free>:
 800bdb4:	4b02      	ldr	r3, [pc, #8]	@ (800bdc0 <free+0xc>)
 800bdb6:	4601      	mov	r1, r0
 800bdb8:	6818      	ldr	r0, [r3, #0]
 800bdba:	f002 bf75 	b.w	800eca8 <_free_r>
 800bdbe:	bf00      	nop
 800bdc0:	2000018c 	.word	0x2000018c

0800bdc4 <sbrk_aligned>:
 800bdc4:	b570      	push	{r4, r5, r6, lr}
 800bdc6:	4e0f      	ldr	r6, [pc, #60]	@ (800be04 <sbrk_aligned+0x40>)
 800bdc8:	460c      	mov	r4, r1
 800bdca:	6831      	ldr	r1, [r6, #0]
 800bdcc:	4605      	mov	r5, r0
 800bdce:	b911      	cbnz	r1, 800bdd6 <sbrk_aligned+0x12>
 800bdd0:	f7f6 fd48 	bl	8002864 <_sbrk_r>
 800bdd4:	6030      	str	r0, [r6, #0]
 800bdd6:	4621      	mov	r1, r4
 800bdd8:	4628      	mov	r0, r5
 800bdda:	f7f6 fd43 	bl	8002864 <_sbrk_r>
 800bdde:	1c43      	adds	r3, r0, #1
 800bde0:	d103      	bne.n	800bdea <sbrk_aligned+0x26>
 800bde2:	f04f 34ff 	mov.w	r4, #4294967295
 800bde6:	4620      	mov	r0, r4
 800bde8:	bd70      	pop	{r4, r5, r6, pc}
 800bdea:	1cc4      	adds	r4, r0, #3
 800bdec:	f024 0403 	bic.w	r4, r4, #3
 800bdf0:	42a0      	cmp	r0, r4
 800bdf2:	d0f8      	beq.n	800bde6 <sbrk_aligned+0x22>
 800bdf4:	1a21      	subs	r1, r4, r0
 800bdf6:	4628      	mov	r0, r5
 800bdf8:	f7f6 fd34 	bl	8002864 <_sbrk_r>
 800bdfc:	3001      	adds	r0, #1
 800bdfe:	d1f2      	bne.n	800bde6 <sbrk_aligned+0x22>
 800be00:	e7ef      	b.n	800bde2 <sbrk_aligned+0x1e>
 800be02:	bf00      	nop
 800be04:	200004c8 	.word	0x200004c8

0800be08 <_malloc_r>:
 800be08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be0c:	1ccd      	adds	r5, r1, #3
 800be0e:	f025 0503 	bic.w	r5, r5, #3
 800be12:	3508      	adds	r5, #8
 800be14:	2d0c      	cmp	r5, #12
 800be16:	bf38      	it	cc
 800be18:	250c      	movcc	r5, #12
 800be1a:	2d00      	cmp	r5, #0
 800be1c:	4606      	mov	r6, r0
 800be1e:	db01      	blt.n	800be24 <_malloc_r+0x1c>
 800be20:	42a9      	cmp	r1, r5
 800be22:	d904      	bls.n	800be2e <_malloc_r+0x26>
 800be24:	230c      	movs	r3, #12
 800be26:	6033      	str	r3, [r6, #0]
 800be28:	2000      	movs	r0, #0
 800be2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bf04 <_malloc_r+0xfc>
 800be32:	f7f6 fd9b 	bl	800296c <__malloc_lock>
 800be36:	f8d8 3000 	ldr.w	r3, [r8]
 800be3a:	461c      	mov	r4, r3
 800be3c:	bb44      	cbnz	r4, 800be90 <_malloc_r+0x88>
 800be3e:	4629      	mov	r1, r5
 800be40:	4630      	mov	r0, r6
 800be42:	f7ff ffbf 	bl	800bdc4 <sbrk_aligned>
 800be46:	1c43      	adds	r3, r0, #1
 800be48:	4604      	mov	r4, r0
 800be4a:	d158      	bne.n	800befe <_malloc_r+0xf6>
 800be4c:	f8d8 4000 	ldr.w	r4, [r8]
 800be50:	4627      	mov	r7, r4
 800be52:	2f00      	cmp	r7, #0
 800be54:	d143      	bne.n	800bede <_malloc_r+0xd6>
 800be56:	2c00      	cmp	r4, #0
 800be58:	d04b      	beq.n	800bef2 <_malloc_r+0xea>
 800be5a:	6823      	ldr	r3, [r4, #0]
 800be5c:	4639      	mov	r1, r7
 800be5e:	4630      	mov	r0, r6
 800be60:	eb04 0903 	add.w	r9, r4, r3
 800be64:	f7f6 fcfe 	bl	8002864 <_sbrk_r>
 800be68:	4581      	cmp	r9, r0
 800be6a:	d142      	bne.n	800bef2 <_malloc_r+0xea>
 800be6c:	6821      	ldr	r1, [r4, #0]
 800be6e:	1a6d      	subs	r5, r5, r1
 800be70:	4629      	mov	r1, r5
 800be72:	4630      	mov	r0, r6
 800be74:	f7ff ffa6 	bl	800bdc4 <sbrk_aligned>
 800be78:	3001      	adds	r0, #1
 800be7a:	d03a      	beq.n	800bef2 <_malloc_r+0xea>
 800be7c:	6823      	ldr	r3, [r4, #0]
 800be7e:	442b      	add	r3, r5
 800be80:	6023      	str	r3, [r4, #0]
 800be82:	f8d8 3000 	ldr.w	r3, [r8]
 800be86:	685a      	ldr	r2, [r3, #4]
 800be88:	bb62      	cbnz	r2, 800bee4 <_malloc_r+0xdc>
 800be8a:	f8c8 7000 	str.w	r7, [r8]
 800be8e:	e00f      	b.n	800beb0 <_malloc_r+0xa8>
 800be90:	6822      	ldr	r2, [r4, #0]
 800be92:	1b52      	subs	r2, r2, r5
 800be94:	d420      	bmi.n	800bed8 <_malloc_r+0xd0>
 800be96:	2a0b      	cmp	r2, #11
 800be98:	d917      	bls.n	800beca <_malloc_r+0xc2>
 800be9a:	1961      	adds	r1, r4, r5
 800be9c:	42a3      	cmp	r3, r4
 800be9e:	6025      	str	r5, [r4, #0]
 800bea0:	bf18      	it	ne
 800bea2:	6059      	strne	r1, [r3, #4]
 800bea4:	6863      	ldr	r3, [r4, #4]
 800bea6:	bf08      	it	eq
 800bea8:	f8c8 1000 	streq.w	r1, [r8]
 800beac:	5162      	str	r2, [r4, r5]
 800beae:	604b      	str	r3, [r1, #4]
 800beb0:	4630      	mov	r0, r6
 800beb2:	f7f6 fd95 	bl	80029e0 <__malloc_unlock>
 800beb6:	f104 000b 	add.w	r0, r4, #11
 800beba:	1d23      	adds	r3, r4, #4
 800bebc:	f020 0007 	bic.w	r0, r0, #7
 800bec0:	1ac2      	subs	r2, r0, r3
 800bec2:	bf1c      	itt	ne
 800bec4:	1a1b      	subne	r3, r3, r0
 800bec6:	50a3      	strne	r3, [r4, r2]
 800bec8:	e7af      	b.n	800be2a <_malloc_r+0x22>
 800beca:	6862      	ldr	r2, [r4, #4]
 800becc:	42a3      	cmp	r3, r4
 800bece:	bf0c      	ite	eq
 800bed0:	f8c8 2000 	streq.w	r2, [r8]
 800bed4:	605a      	strne	r2, [r3, #4]
 800bed6:	e7eb      	b.n	800beb0 <_malloc_r+0xa8>
 800bed8:	4623      	mov	r3, r4
 800beda:	6864      	ldr	r4, [r4, #4]
 800bedc:	e7ae      	b.n	800be3c <_malloc_r+0x34>
 800bede:	463c      	mov	r4, r7
 800bee0:	687f      	ldr	r7, [r7, #4]
 800bee2:	e7b6      	b.n	800be52 <_malloc_r+0x4a>
 800bee4:	461a      	mov	r2, r3
 800bee6:	685b      	ldr	r3, [r3, #4]
 800bee8:	42a3      	cmp	r3, r4
 800beea:	d1fb      	bne.n	800bee4 <_malloc_r+0xdc>
 800beec:	2300      	movs	r3, #0
 800beee:	6053      	str	r3, [r2, #4]
 800bef0:	e7de      	b.n	800beb0 <_malloc_r+0xa8>
 800bef2:	230c      	movs	r3, #12
 800bef4:	6033      	str	r3, [r6, #0]
 800bef6:	4630      	mov	r0, r6
 800bef8:	f7f6 fd72 	bl	80029e0 <__malloc_unlock>
 800befc:	e794      	b.n	800be28 <_malloc_r+0x20>
 800befe:	6005      	str	r5, [r0, #0]
 800bf00:	e7d6      	b.n	800beb0 <_malloc_r+0xa8>
 800bf02:	bf00      	nop
 800bf04:	200004cc 	.word	0x200004cc

0800bf08 <mallinfo>:
 800bf08:	b510      	push	{r4, lr}
 800bf0a:	4b03      	ldr	r3, [pc, #12]	@ (800bf18 <mallinfo+0x10>)
 800bf0c:	4604      	mov	r4, r0
 800bf0e:	6819      	ldr	r1, [r3, #0]
 800bf10:	f003 fa4e 	bl	800f3b0 <_mallinfo_r>
 800bf14:	4620      	mov	r0, r4
 800bf16:	bd10      	pop	{r4, pc}
 800bf18:	2000018c 	.word	0x2000018c

0800bf1c <sulp>:
 800bf1c:	b570      	push	{r4, r5, r6, lr}
 800bf1e:	4604      	mov	r4, r0
 800bf20:	460d      	mov	r5, r1
 800bf22:	ec45 4b10 	vmov	d0, r4, r5
 800bf26:	4616      	mov	r6, r2
 800bf28:	f003 fdf4 	bl	800fb14 <__ulp>
 800bf2c:	ec51 0b10 	vmov	r0, r1, d0
 800bf30:	b17e      	cbz	r6, 800bf52 <sulp+0x36>
 800bf32:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800bf36:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	dd09      	ble.n	800bf52 <sulp+0x36>
 800bf3e:	051b      	lsls	r3, r3, #20
 800bf40:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800bf44:	2400      	movs	r4, #0
 800bf46:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800bf4a:	4622      	mov	r2, r4
 800bf4c:	462b      	mov	r3, r5
 800bf4e:	f7f4 fb73 	bl	8000638 <__aeabi_dmul>
 800bf52:	ec41 0b10 	vmov	d0, r0, r1
 800bf56:	bd70      	pop	{r4, r5, r6, pc}

0800bf58 <_strtod_l>:
 800bf58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf5c:	b09f      	sub	sp, #124	@ 0x7c
 800bf5e:	460c      	mov	r4, r1
 800bf60:	9217      	str	r2, [sp, #92]	@ 0x5c
 800bf62:	2200      	movs	r2, #0
 800bf64:	921a      	str	r2, [sp, #104]	@ 0x68
 800bf66:	9005      	str	r0, [sp, #20]
 800bf68:	f04f 0a00 	mov.w	sl, #0
 800bf6c:	f04f 0b00 	mov.w	fp, #0
 800bf70:	460a      	mov	r2, r1
 800bf72:	9219      	str	r2, [sp, #100]	@ 0x64
 800bf74:	7811      	ldrb	r1, [r2, #0]
 800bf76:	292b      	cmp	r1, #43	@ 0x2b
 800bf78:	d04a      	beq.n	800c010 <_strtod_l+0xb8>
 800bf7a:	d838      	bhi.n	800bfee <_strtod_l+0x96>
 800bf7c:	290d      	cmp	r1, #13
 800bf7e:	d832      	bhi.n	800bfe6 <_strtod_l+0x8e>
 800bf80:	2908      	cmp	r1, #8
 800bf82:	d832      	bhi.n	800bfea <_strtod_l+0x92>
 800bf84:	2900      	cmp	r1, #0
 800bf86:	d03b      	beq.n	800c000 <_strtod_l+0xa8>
 800bf88:	2200      	movs	r2, #0
 800bf8a:	920e      	str	r2, [sp, #56]	@ 0x38
 800bf8c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800bf8e:	782a      	ldrb	r2, [r5, #0]
 800bf90:	2a30      	cmp	r2, #48	@ 0x30
 800bf92:	f040 80b2 	bne.w	800c0fa <_strtod_l+0x1a2>
 800bf96:	786a      	ldrb	r2, [r5, #1]
 800bf98:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800bf9c:	2a58      	cmp	r2, #88	@ 0x58
 800bf9e:	d16e      	bne.n	800c07e <_strtod_l+0x126>
 800bfa0:	9302      	str	r3, [sp, #8]
 800bfa2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bfa4:	9301      	str	r3, [sp, #4]
 800bfa6:	ab1a      	add	r3, sp, #104	@ 0x68
 800bfa8:	9300      	str	r3, [sp, #0]
 800bfaa:	4a8f      	ldr	r2, [pc, #572]	@ (800c1e8 <_strtod_l+0x290>)
 800bfac:	9805      	ldr	r0, [sp, #20]
 800bfae:	ab1b      	add	r3, sp, #108	@ 0x6c
 800bfb0:	a919      	add	r1, sp, #100	@ 0x64
 800bfb2:	f002 ff2b 	bl	800ee0c <__gethex>
 800bfb6:	f010 060f 	ands.w	r6, r0, #15
 800bfba:	4604      	mov	r4, r0
 800bfbc:	d005      	beq.n	800bfca <_strtod_l+0x72>
 800bfbe:	2e06      	cmp	r6, #6
 800bfc0:	d128      	bne.n	800c014 <_strtod_l+0xbc>
 800bfc2:	3501      	adds	r5, #1
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	9519      	str	r5, [sp, #100]	@ 0x64
 800bfc8:	930e      	str	r3, [sp, #56]	@ 0x38
 800bfca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	f040 858e 	bne.w	800caee <_strtod_l+0xb96>
 800bfd2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bfd4:	b1cb      	cbz	r3, 800c00a <_strtod_l+0xb2>
 800bfd6:	4652      	mov	r2, sl
 800bfd8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800bfdc:	ec43 2b10 	vmov	d0, r2, r3
 800bfe0:	b01f      	add	sp, #124	@ 0x7c
 800bfe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfe6:	2920      	cmp	r1, #32
 800bfe8:	d1ce      	bne.n	800bf88 <_strtod_l+0x30>
 800bfea:	3201      	adds	r2, #1
 800bfec:	e7c1      	b.n	800bf72 <_strtod_l+0x1a>
 800bfee:	292d      	cmp	r1, #45	@ 0x2d
 800bff0:	d1ca      	bne.n	800bf88 <_strtod_l+0x30>
 800bff2:	2101      	movs	r1, #1
 800bff4:	910e      	str	r1, [sp, #56]	@ 0x38
 800bff6:	1c51      	adds	r1, r2, #1
 800bff8:	9119      	str	r1, [sp, #100]	@ 0x64
 800bffa:	7852      	ldrb	r2, [r2, #1]
 800bffc:	2a00      	cmp	r2, #0
 800bffe:	d1c5      	bne.n	800bf8c <_strtod_l+0x34>
 800c000:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c002:	9419      	str	r4, [sp, #100]	@ 0x64
 800c004:	2b00      	cmp	r3, #0
 800c006:	f040 8570 	bne.w	800caea <_strtod_l+0xb92>
 800c00a:	4652      	mov	r2, sl
 800c00c:	465b      	mov	r3, fp
 800c00e:	e7e5      	b.n	800bfdc <_strtod_l+0x84>
 800c010:	2100      	movs	r1, #0
 800c012:	e7ef      	b.n	800bff4 <_strtod_l+0x9c>
 800c014:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c016:	b13a      	cbz	r2, 800c028 <_strtod_l+0xd0>
 800c018:	2135      	movs	r1, #53	@ 0x35
 800c01a:	a81c      	add	r0, sp, #112	@ 0x70
 800c01c:	f003 fe74 	bl	800fd08 <__copybits>
 800c020:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c022:	9805      	ldr	r0, [sp, #20]
 800c024:	f003 fa4a 	bl	800f4bc <_Bfree>
 800c028:	3e01      	subs	r6, #1
 800c02a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c02c:	2e04      	cmp	r6, #4
 800c02e:	d806      	bhi.n	800c03e <_strtod_l+0xe6>
 800c030:	e8df f006 	tbb	[pc, r6]
 800c034:	201d0314 	.word	0x201d0314
 800c038:	14          	.byte	0x14
 800c039:	00          	.byte	0x00
 800c03a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c03e:	05e1      	lsls	r1, r4, #23
 800c040:	bf48      	it	mi
 800c042:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c046:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c04a:	0d1b      	lsrs	r3, r3, #20
 800c04c:	051b      	lsls	r3, r3, #20
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d1bb      	bne.n	800bfca <_strtod_l+0x72>
 800c052:	f001 ff7b 	bl	800df4c <__errno>
 800c056:	2322      	movs	r3, #34	@ 0x22
 800c058:	6003      	str	r3, [r0, #0]
 800c05a:	e7b6      	b.n	800bfca <_strtod_l+0x72>
 800c05c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c060:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c064:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c068:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c06c:	e7e7      	b.n	800c03e <_strtod_l+0xe6>
 800c06e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800c1f0 <_strtod_l+0x298>
 800c072:	e7e4      	b.n	800c03e <_strtod_l+0xe6>
 800c074:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c078:	f04f 3aff 	mov.w	sl, #4294967295
 800c07c:	e7df      	b.n	800c03e <_strtod_l+0xe6>
 800c07e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c080:	1c5a      	adds	r2, r3, #1
 800c082:	9219      	str	r2, [sp, #100]	@ 0x64
 800c084:	785b      	ldrb	r3, [r3, #1]
 800c086:	2b30      	cmp	r3, #48	@ 0x30
 800c088:	d0f9      	beq.n	800c07e <_strtod_l+0x126>
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d09d      	beq.n	800bfca <_strtod_l+0x72>
 800c08e:	2301      	movs	r3, #1
 800c090:	2700      	movs	r7, #0
 800c092:	9308      	str	r3, [sp, #32]
 800c094:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c096:	930c      	str	r3, [sp, #48]	@ 0x30
 800c098:	970b      	str	r7, [sp, #44]	@ 0x2c
 800c09a:	46b9      	mov	r9, r7
 800c09c:	220a      	movs	r2, #10
 800c09e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c0a0:	7805      	ldrb	r5, [r0, #0]
 800c0a2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c0a6:	b2d9      	uxtb	r1, r3
 800c0a8:	2909      	cmp	r1, #9
 800c0aa:	d928      	bls.n	800c0fe <_strtod_l+0x1a6>
 800c0ac:	494f      	ldr	r1, [pc, #316]	@ (800c1ec <_strtod_l+0x294>)
 800c0ae:	2201      	movs	r2, #1
 800c0b0:	f001 fe92 	bl	800ddd8 <strncmp>
 800c0b4:	2800      	cmp	r0, #0
 800c0b6:	d032      	beq.n	800c11e <_strtod_l+0x1c6>
 800c0b8:	2000      	movs	r0, #0
 800c0ba:	462a      	mov	r2, r5
 800c0bc:	900a      	str	r0, [sp, #40]	@ 0x28
 800c0be:	464d      	mov	r5, r9
 800c0c0:	4603      	mov	r3, r0
 800c0c2:	2a65      	cmp	r2, #101	@ 0x65
 800c0c4:	d001      	beq.n	800c0ca <_strtod_l+0x172>
 800c0c6:	2a45      	cmp	r2, #69	@ 0x45
 800c0c8:	d114      	bne.n	800c0f4 <_strtod_l+0x19c>
 800c0ca:	b91d      	cbnz	r5, 800c0d4 <_strtod_l+0x17c>
 800c0cc:	9a08      	ldr	r2, [sp, #32]
 800c0ce:	4302      	orrs	r2, r0
 800c0d0:	d096      	beq.n	800c000 <_strtod_l+0xa8>
 800c0d2:	2500      	movs	r5, #0
 800c0d4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c0d6:	1c62      	adds	r2, r4, #1
 800c0d8:	9219      	str	r2, [sp, #100]	@ 0x64
 800c0da:	7862      	ldrb	r2, [r4, #1]
 800c0dc:	2a2b      	cmp	r2, #43	@ 0x2b
 800c0de:	d07a      	beq.n	800c1d6 <_strtod_l+0x27e>
 800c0e0:	2a2d      	cmp	r2, #45	@ 0x2d
 800c0e2:	d07e      	beq.n	800c1e2 <_strtod_l+0x28a>
 800c0e4:	f04f 0c00 	mov.w	ip, #0
 800c0e8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c0ec:	2909      	cmp	r1, #9
 800c0ee:	f240 8085 	bls.w	800c1fc <_strtod_l+0x2a4>
 800c0f2:	9419      	str	r4, [sp, #100]	@ 0x64
 800c0f4:	f04f 0800 	mov.w	r8, #0
 800c0f8:	e0a5      	b.n	800c246 <_strtod_l+0x2ee>
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	e7c8      	b.n	800c090 <_strtod_l+0x138>
 800c0fe:	f1b9 0f08 	cmp.w	r9, #8
 800c102:	bfd8      	it	le
 800c104:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800c106:	f100 0001 	add.w	r0, r0, #1
 800c10a:	bfda      	itte	le
 800c10c:	fb02 3301 	mlale	r3, r2, r1, r3
 800c110:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800c112:	fb02 3707 	mlagt	r7, r2, r7, r3
 800c116:	f109 0901 	add.w	r9, r9, #1
 800c11a:	9019      	str	r0, [sp, #100]	@ 0x64
 800c11c:	e7bf      	b.n	800c09e <_strtod_l+0x146>
 800c11e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c120:	1c5a      	adds	r2, r3, #1
 800c122:	9219      	str	r2, [sp, #100]	@ 0x64
 800c124:	785a      	ldrb	r2, [r3, #1]
 800c126:	f1b9 0f00 	cmp.w	r9, #0
 800c12a:	d03b      	beq.n	800c1a4 <_strtod_l+0x24c>
 800c12c:	900a      	str	r0, [sp, #40]	@ 0x28
 800c12e:	464d      	mov	r5, r9
 800c130:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800c134:	2b09      	cmp	r3, #9
 800c136:	d912      	bls.n	800c15e <_strtod_l+0x206>
 800c138:	2301      	movs	r3, #1
 800c13a:	e7c2      	b.n	800c0c2 <_strtod_l+0x16a>
 800c13c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c13e:	1c5a      	adds	r2, r3, #1
 800c140:	9219      	str	r2, [sp, #100]	@ 0x64
 800c142:	785a      	ldrb	r2, [r3, #1]
 800c144:	3001      	adds	r0, #1
 800c146:	2a30      	cmp	r2, #48	@ 0x30
 800c148:	d0f8      	beq.n	800c13c <_strtod_l+0x1e4>
 800c14a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c14e:	2b08      	cmp	r3, #8
 800c150:	f200 84d2 	bhi.w	800caf8 <_strtod_l+0xba0>
 800c154:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c156:	900a      	str	r0, [sp, #40]	@ 0x28
 800c158:	2000      	movs	r0, #0
 800c15a:	930c      	str	r3, [sp, #48]	@ 0x30
 800c15c:	4605      	mov	r5, r0
 800c15e:	3a30      	subs	r2, #48	@ 0x30
 800c160:	f100 0301 	add.w	r3, r0, #1
 800c164:	d018      	beq.n	800c198 <_strtod_l+0x240>
 800c166:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c168:	4419      	add	r1, r3
 800c16a:	910a      	str	r1, [sp, #40]	@ 0x28
 800c16c:	462e      	mov	r6, r5
 800c16e:	f04f 0e0a 	mov.w	lr, #10
 800c172:	1c71      	adds	r1, r6, #1
 800c174:	eba1 0c05 	sub.w	ip, r1, r5
 800c178:	4563      	cmp	r3, ip
 800c17a:	dc15      	bgt.n	800c1a8 <_strtod_l+0x250>
 800c17c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800c180:	182b      	adds	r3, r5, r0
 800c182:	2b08      	cmp	r3, #8
 800c184:	f105 0501 	add.w	r5, r5, #1
 800c188:	4405      	add	r5, r0
 800c18a:	dc1a      	bgt.n	800c1c2 <_strtod_l+0x26a>
 800c18c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c18e:	230a      	movs	r3, #10
 800c190:	fb03 2301 	mla	r3, r3, r1, r2
 800c194:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c196:	2300      	movs	r3, #0
 800c198:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c19a:	1c51      	adds	r1, r2, #1
 800c19c:	9119      	str	r1, [sp, #100]	@ 0x64
 800c19e:	7852      	ldrb	r2, [r2, #1]
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	e7c5      	b.n	800c130 <_strtod_l+0x1d8>
 800c1a4:	4648      	mov	r0, r9
 800c1a6:	e7ce      	b.n	800c146 <_strtod_l+0x1ee>
 800c1a8:	2e08      	cmp	r6, #8
 800c1aa:	dc05      	bgt.n	800c1b8 <_strtod_l+0x260>
 800c1ac:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800c1ae:	fb0e f606 	mul.w	r6, lr, r6
 800c1b2:	960b      	str	r6, [sp, #44]	@ 0x2c
 800c1b4:	460e      	mov	r6, r1
 800c1b6:	e7dc      	b.n	800c172 <_strtod_l+0x21a>
 800c1b8:	2910      	cmp	r1, #16
 800c1ba:	bfd8      	it	le
 800c1bc:	fb0e f707 	mulle.w	r7, lr, r7
 800c1c0:	e7f8      	b.n	800c1b4 <_strtod_l+0x25c>
 800c1c2:	2b0f      	cmp	r3, #15
 800c1c4:	bfdc      	itt	le
 800c1c6:	230a      	movle	r3, #10
 800c1c8:	fb03 2707 	mlale	r7, r3, r7, r2
 800c1cc:	e7e3      	b.n	800c196 <_strtod_l+0x23e>
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	930a      	str	r3, [sp, #40]	@ 0x28
 800c1d2:	2301      	movs	r3, #1
 800c1d4:	e77a      	b.n	800c0cc <_strtod_l+0x174>
 800c1d6:	f04f 0c00 	mov.w	ip, #0
 800c1da:	1ca2      	adds	r2, r4, #2
 800c1dc:	9219      	str	r2, [sp, #100]	@ 0x64
 800c1de:	78a2      	ldrb	r2, [r4, #2]
 800c1e0:	e782      	b.n	800c0e8 <_strtod_l+0x190>
 800c1e2:	f04f 0c01 	mov.w	ip, #1
 800c1e6:	e7f8      	b.n	800c1da <_strtod_l+0x282>
 800c1e8:	0801117c 	.word	0x0801117c
 800c1ec:	08010fcc 	.word	0x08010fcc
 800c1f0:	7ff00000 	.word	0x7ff00000
 800c1f4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c1f6:	1c51      	adds	r1, r2, #1
 800c1f8:	9119      	str	r1, [sp, #100]	@ 0x64
 800c1fa:	7852      	ldrb	r2, [r2, #1]
 800c1fc:	2a30      	cmp	r2, #48	@ 0x30
 800c1fe:	d0f9      	beq.n	800c1f4 <_strtod_l+0x29c>
 800c200:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800c204:	2908      	cmp	r1, #8
 800c206:	f63f af75 	bhi.w	800c0f4 <_strtod_l+0x19c>
 800c20a:	3a30      	subs	r2, #48	@ 0x30
 800c20c:	9209      	str	r2, [sp, #36]	@ 0x24
 800c20e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c210:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c212:	f04f 080a 	mov.w	r8, #10
 800c216:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c218:	1c56      	adds	r6, r2, #1
 800c21a:	9619      	str	r6, [sp, #100]	@ 0x64
 800c21c:	7852      	ldrb	r2, [r2, #1]
 800c21e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800c222:	f1be 0f09 	cmp.w	lr, #9
 800c226:	d939      	bls.n	800c29c <_strtod_l+0x344>
 800c228:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c22a:	1a76      	subs	r6, r6, r1
 800c22c:	2e08      	cmp	r6, #8
 800c22e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800c232:	dc03      	bgt.n	800c23c <_strtod_l+0x2e4>
 800c234:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c236:	4588      	cmp	r8, r1
 800c238:	bfa8      	it	ge
 800c23a:	4688      	movge	r8, r1
 800c23c:	f1bc 0f00 	cmp.w	ip, #0
 800c240:	d001      	beq.n	800c246 <_strtod_l+0x2ee>
 800c242:	f1c8 0800 	rsb	r8, r8, #0
 800c246:	2d00      	cmp	r5, #0
 800c248:	d14e      	bne.n	800c2e8 <_strtod_l+0x390>
 800c24a:	9908      	ldr	r1, [sp, #32]
 800c24c:	4308      	orrs	r0, r1
 800c24e:	f47f aebc 	bne.w	800bfca <_strtod_l+0x72>
 800c252:	2b00      	cmp	r3, #0
 800c254:	f47f aed4 	bne.w	800c000 <_strtod_l+0xa8>
 800c258:	2a69      	cmp	r2, #105	@ 0x69
 800c25a:	d028      	beq.n	800c2ae <_strtod_l+0x356>
 800c25c:	dc25      	bgt.n	800c2aa <_strtod_l+0x352>
 800c25e:	2a49      	cmp	r2, #73	@ 0x49
 800c260:	d025      	beq.n	800c2ae <_strtod_l+0x356>
 800c262:	2a4e      	cmp	r2, #78	@ 0x4e
 800c264:	f47f aecc 	bne.w	800c000 <_strtod_l+0xa8>
 800c268:	499a      	ldr	r1, [pc, #616]	@ (800c4d4 <_strtod_l+0x57c>)
 800c26a:	a819      	add	r0, sp, #100	@ 0x64
 800c26c:	f002 fff0 	bl	800f250 <__match>
 800c270:	2800      	cmp	r0, #0
 800c272:	f43f aec5 	beq.w	800c000 <_strtod_l+0xa8>
 800c276:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c278:	781b      	ldrb	r3, [r3, #0]
 800c27a:	2b28      	cmp	r3, #40	@ 0x28
 800c27c:	d12e      	bne.n	800c2dc <_strtod_l+0x384>
 800c27e:	4996      	ldr	r1, [pc, #600]	@ (800c4d8 <_strtod_l+0x580>)
 800c280:	aa1c      	add	r2, sp, #112	@ 0x70
 800c282:	a819      	add	r0, sp, #100	@ 0x64
 800c284:	f002 fff8 	bl	800f278 <__hexnan>
 800c288:	2805      	cmp	r0, #5
 800c28a:	d127      	bne.n	800c2dc <_strtod_l+0x384>
 800c28c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c28e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800c292:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c296:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c29a:	e696      	b.n	800bfca <_strtod_l+0x72>
 800c29c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c29e:	fb08 2101 	mla	r1, r8, r1, r2
 800c2a2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800c2a6:	9209      	str	r2, [sp, #36]	@ 0x24
 800c2a8:	e7b5      	b.n	800c216 <_strtod_l+0x2be>
 800c2aa:	2a6e      	cmp	r2, #110	@ 0x6e
 800c2ac:	e7da      	b.n	800c264 <_strtod_l+0x30c>
 800c2ae:	498b      	ldr	r1, [pc, #556]	@ (800c4dc <_strtod_l+0x584>)
 800c2b0:	a819      	add	r0, sp, #100	@ 0x64
 800c2b2:	f002 ffcd 	bl	800f250 <__match>
 800c2b6:	2800      	cmp	r0, #0
 800c2b8:	f43f aea2 	beq.w	800c000 <_strtod_l+0xa8>
 800c2bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c2be:	4988      	ldr	r1, [pc, #544]	@ (800c4e0 <_strtod_l+0x588>)
 800c2c0:	3b01      	subs	r3, #1
 800c2c2:	a819      	add	r0, sp, #100	@ 0x64
 800c2c4:	9319      	str	r3, [sp, #100]	@ 0x64
 800c2c6:	f002 ffc3 	bl	800f250 <__match>
 800c2ca:	b910      	cbnz	r0, 800c2d2 <_strtod_l+0x37a>
 800c2cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c2ce:	3301      	adds	r3, #1
 800c2d0:	9319      	str	r3, [sp, #100]	@ 0x64
 800c2d2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800c4f0 <_strtod_l+0x598>
 800c2d6:	f04f 0a00 	mov.w	sl, #0
 800c2da:	e676      	b.n	800bfca <_strtod_l+0x72>
 800c2dc:	4881      	ldr	r0, [pc, #516]	@ (800c4e4 <_strtod_l+0x58c>)
 800c2de:	f001 fe73 	bl	800dfc8 <nan>
 800c2e2:	ec5b ab10 	vmov	sl, fp, d0
 800c2e6:	e670      	b.n	800bfca <_strtod_l+0x72>
 800c2e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c2ea:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800c2ec:	eba8 0303 	sub.w	r3, r8, r3
 800c2f0:	f1b9 0f00 	cmp.w	r9, #0
 800c2f4:	bf08      	it	eq
 800c2f6:	46a9      	moveq	r9, r5
 800c2f8:	2d10      	cmp	r5, #16
 800c2fa:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2fc:	462c      	mov	r4, r5
 800c2fe:	bfa8      	it	ge
 800c300:	2410      	movge	r4, #16
 800c302:	f7f4 f91f 	bl	8000544 <__aeabi_ui2d>
 800c306:	2d09      	cmp	r5, #9
 800c308:	4682      	mov	sl, r0
 800c30a:	468b      	mov	fp, r1
 800c30c:	dc13      	bgt.n	800c336 <_strtod_l+0x3de>
 800c30e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c310:	2b00      	cmp	r3, #0
 800c312:	f43f ae5a 	beq.w	800bfca <_strtod_l+0x72>
 800c316:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c318:	dd78      	ble.n	800c40c <_strtod_l+0x4b4>
 800c31a:	2b16      	cmp	r3, #22
 800c31c:	dc5f      	bgt.n	800c3de <_strtod_l+0x486>
 800c31e:	4972      	ldr	r1, [pc, #456]	@ (800c4e8 <_strtod_l+0x590>)
 800c320:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c324:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c328:	4652      	mov	r2, sl
 800c32a:	465b      	mov	r3, fp
 800c32c:	f7f4 f984 	bl	8000638 <__aeabi_dmul>
 800c330:	4682      	mov	sl, r0
 800c332:	468b      	mov	fp, r1
 800c334:	e649      	b.n	800bfca <_strtod_l+0x72>
 800c336:	4b6c      	ldr	r3, [pc, #432]	@ (800c4e8 <_strtod_l+0x590>)
 800c338:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c33c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800c340:	f7f4 f97a 	bl	8000638 <__aeabi_dmul>
 800c344:	4682      	mov	sl, r0
 800c346:	4638      	mov	r0, r7
 800c348:	468b      	mov	fp, r1
 800c34a:	f7f4 f8fb 	bl	8000544 <__aeabi_ui2d>
 800c34e:	4602      	mov	r2, r0
 800c350:	460b      	mov	r3, r1
 800c352:	4650      	mov	r0, sl
 800c354:	4659      	mov	r1, fp
 800c356:	f7f3 ffb9 	bl	80002cc <__adddf3>
 800c35a:	2d0f      	cmp	r5, #15
 800c35c:	4682      	mov	sl, r0
 800c35e:	468b      	mov	fp, r1
 800c360:	ddd5      	ble.n	800c30e <_strtod_l+0x3b6>
 800c362:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c364:	1b2c      	subs	r4, r5, r4
 800c366:	441c      	add	r4, r3
 800c368:	2c00      	cmp	r4, #0
 800c36a:	f340 8093 	ble.w	800c494 <_strtod_l+0x53c>
 800c36e:	f014 030f 	ands.w	r3, r4, #15
 800c372:	d00a      	beq.n	800c38a <_strtod_l+0x432>
 800c374:	495c      	ldr	r1, [pc, #368]	@ (800c4e8 <_strtod_l+0x590>)
 800c376:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c37a:	4652      	mov	r2, sl
 800c37c:	465b      	mov	r3, fp
 800c37e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c382:	f7f4 f959 	bl	8000638 <__aeabi_dmul>
 800c386:	4682      	mov	sl, r0
 800c388:	468b      	mov	fp, r1
 800c38a:	f034 040f 	bics.w	r4, r4, #15
 800c38e:	d073      	beq.n	800c478 <_strtod_l+0x520>
 800c390:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800c394:	dd49      	ble.n	800c42a <_strtod_l+0x4d2>
 800c396:	2400      	movs	r4, #0
 800c398:	46a0      	mov	r8, r4
 800c39a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c39c:	46a1      	mov	r9, r4
 800c39e:	9a05      	ldr	r2, [sp, #20]
 800c3a0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800c4f0 <_strtod_l+0x598>
 800c3a4:	2322      	movs	r3, #34	@ 0x22
 800c3a6:	6013      	str	r3, [r2, #0]
 800c3a8:	f04f 0a00 	mov.w	sl, #0
 800c3ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	f43f ae0b 	beq.w	800bfca <_strtod_l+0x72>
 800c3b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c3b6:	9805      	ldr	r0, [sp, #20]
 800c3b8:	f003 f880 	bl	800f4bc <_Bfree>
 800c3bc:	9805      	ldr	r0, [sp, #20]
 800c3be:	4649      	mov	r1, r9
 800c3c0:	f003 f87c 	bl	800f4bc <_Bfree>
 800c3c4:	9805      	ldr	r0, [sp, #20]
 800c3c6:	4641      	mov	r1, r8
 800c3c8:	f003 f878 	bl	800f4bc <_Bfree>
 800c3cc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c3ce:	9805      	ldr	r0, [sp, #20]
 800c3d0:	f003 f874 	bl	800f4bc <_Bfree>
 800c3d4:	9805      	ldr	r0, [sp, #20]
 800c3d6:	4621      	mov	r1, r4
 800c3d8:	f003 f870 	bl	800f4bc <_Bfree>
 800c3dc:	e5f5      	b.n	800bfca <_strtod_l+0x72>
 800c3de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c3e0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800c3e4:	4293      	cmp	r3, r2
 800c3e6:	dbbc      	blt.n	800c362 <_strtod_l+0x40a>
 800c3e8:	4c3f      	ldr	r4, [pc, #252]	@ (800c4e8 <_strtod_l+0x590>)
 800c3ea:	f1c5 050f 	rsb	r5, r5, #15
 800c3ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c3f2:	4652      	mov	r2, sl
 800c3f4:	465b      	mov	r3, fp
 800c3f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3fa:	f7f4 f91d 	bl	8000638 <__aeabi_dmul>
 800c3fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c400:	1b5d      	subs	r5, r3, r5
 800c402:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c406:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c40a:	e78f      	b.n	800c32c <_strtod_l+0x3d4>
 800c40c:	3316      	adds	r3, #22
 800c40e:	dba8      	blt.n	800c362 <_strtod_l+0x40a>
 800c410:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c412:	eba3 0808 	sub.w	r8, r3, r8
 800c416:	4b34      	ldr	r3, [pc, #208]	@ (800c4e8 <_strtod_l+0x590>)
 800c418:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800c41c:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c420:	4650      	mov	r0, sl
 800c422:	4659      	mov	r1, fp
 800c424:	f7f4 fa32 	bl	800088c <__aeabi_ddiv>
 800c428:	e782      	b.n	800c330 <_strtod_l+0x3d8>
 800c42a:	2300      	movs	r3, #0
 800c42c:	4f2f      	ldr	r7, [pc, #188]	@ (800c4ec <_strtod_l+0x594>)
 800c42e:	1124      	asrs	r4, r4, #4
 800c430:	4650      	mov	r0, sl
 800c432:	4659      	mov	r1, fp
 800c434:	461e      	mov	r6, r3
 800c436:	2c01      	cmp	r4, #1
 800c438:	dc21      	bgt.n	800c47e <_strtod_l+0x526>
 800c43a:	b10b      	cbz	r3, 800c440 <_strtod_l+0x4e8>
 800c43c:	4682      	mov	sl, r0
 800c43e:	468b      	mov	fp, r1
 800c440:	492a      	ldr	r1, [pc, #168]	@ (800c4ec <_strtod_l+0x594>)
 800c442:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c446:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800c44a:	4652      	mov	r2, sl
 800c44c:	465b      	mov	r3, fp
 800c44e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c452:	f7f4 f8f1 	bl	8000638 <__aeabi_dmul>
 800c456:	4b26      	ldr	r3, [pc, #152]	@ (800c4f0 <_strtod_l+0x598>)
 800c458:	460a      	mov	r2, r1
 800c45a:	400b      	ands	r3, r1
 800c45c:	4925      	ldr	r1, [pc, #148]	@ (800c4f4 <_strtod_l+0x59c>)
 800c45e:	428b      	cmp	r3, r1
 800c460:	4682      	mov	sl, r0
 800c462:	d898      	bhi.n	800c396 <_strtod_l+0x43e>
 800c464:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800c468:	428b      	cmp	r3, r1
 800c46a:	bf86      	itte	hi
 800c46c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800c4f8 <_strtod_l+0x5a0>
 800c470:	f04f 3aff 	movhi.w	sl, #4294967295
 800c474:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800c478:	2300      	movs	r3, #0
 800c47a:	9308      	str	r3, [sp, #32]
 800c47c:	e076      	b.n	800c56c <_strtod_l+0x614>
 800c47e:	07e2      	lsls	r2, r4, #31
 800c480:	d504      	bpl.n	800c48c <_strtod_l+0x534>
 800c482:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c486:	f7f4 f8d7 	bl	8000638 <__aeabi_dmul>
 800c48a:	2301      	movs	r3, #1
 800c48c:	3601      	adds	r6, #1
 800c48e:	1064      	asrs	r4, r4, #1
 800c490:	3708      	adds	r7, #8
 800c492:	e7d0      	b.n	800c436 <_strtod_l+0x4de>
 800c494:	d0f0      	beq.n	800c478 <_strtod_l+0x520>
 800c496:	4264      	negs	r4, r4
 800c498:	f014 020f 	ands.w	r2, r4, #15
 800c49c:	d00a      	beq.n	800c4b4 <_strtod_l+0x55c>
 800c49e:	4b12      	ldr	r3, [pc, #72]	@ (800c4e8 <_strtod_l+0x590>)
 800c4a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c4a4:	4650      	mov	r0, sl
 800c4a6:	4659      	mov	r1, fp
 800c4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ac:	f7f4 f9ee 	bl	800088c <__aeabi_ddiv>
 800c4b0:	4682      	mov	sl, r0
 800c4b2:	468b      	mov	fp, r1
 800c4b4:	1124      	asrs	r4, r4, #4
 800c4b6:	d0df      	beq.n	800c478 <_strtod_l+0x520>
 800c4b8:	2c1f      	cmp	r4, #31
 800c4ba:	dd1f      	ble.n	800c4fc <_strtod_l+0x5a4>
 800c4bc:	2400      	movs	r4, #0
 800c4be:	46a0      	mov	r8, r4
 800c4c0:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c4c2:	46a1      	mov	r9, r4
 800c4c4:	9a05      	ldr	r2, [sp, #20]
 800c4c6:	2322      	movs	r3, #34	@ 0x22
 800c4c8:	f04f 0a00 	mov.w	sl, #0
 800c4cc:	f04f 0b00 	mov.w	fp, #0
 800c4d0:	6013      	str	r3, [r2, #0]
 800c4d2:	e76b      	b.n	800c3ac <_strtod_l+0x454>
 800c4d4:	08010fdb 	.word	0x08010fdb
 800c4d8:	08011168 	.word	0x08011168
 800c4dc:	08010fd3 	.word	0x08010fd3
 800c4e0:	08011012 	.word	0x08011012
 800c4e4:	08010fcb 	.word	0x08010fcb
 800c4e8:	080111f0 	.word	0x080111f0
 800c4ec:	080111c8 	.word	0x080111c8
 800c4f0:	7ff00000 	.word	0x7ff00000
 800c4f4:	7ca00000 	.word	0x7ca00000
 800c4f8:	7fefffff 	.word	0x7fefffff
 800c4fc:	f014 0310 	ands.w	r3, r4, #16
 800c500:	bf18      	it	ne
 800c502:	236a      	movne	r3, #106	@ 0x6a
 800c504:	4ea9      	ldr	r6, [pc, #676]	@ (800c7ac <_strtod_l+0x854>)
 800c506:	9308      	str	r3, [sp, #32]
 800c508:	4650      	mov	r0, sl
 800c50a:	4659      	mov	r1, fp
 800c50c:	2300      	movs	r3, #0
 800c50e:	07e7      	lsls	r7, r4, #31
 800c510:	d504      	bpl.n	800c51c <_strtod_l+0x5c4>
 800c512:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c516:	f7f4 f88f 	bl	8000638 <__aeabi_dmul>
 800c51a:	2301      	movs	r3, #1
 800c51c:	1064      	asrs	r4, r4, #1
 800c51e:	f106 0608 	add.w	r6, r6, #8
 800c522:	d1f4      	bne.n	800c50e <_strtod_l+0x5b6>
 800c524:	b10b      	cbz	r3, 800c52a <_strtod_l+0x5d2>
 800c526:	4682      	mov	sl, r0
 800c528:	468b      	mov	fp, r1
 800c52a:	9b08      	ldr	r3, [sp, #32]
 800c52c:	b1b3      	cbz	r3, 800c55c <_strtod_l+0x604>
 800c52e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c532:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800c536:	2b00      	cmp	r3, #0
 800c538:	4659      	mov	r1, fp
 800c53a:	dd0f      	ble.n	800c55c <_strtod_l+0x604>
 800c53c:	2b1f      	cmp	r3, #31
 800c53e:	dd56      	ble.n	800c5ee <_strtod_l+0x696>
 800c540:	2b34      	cmp	r3, #52	@ 0x34
 800c542:	bfde      	ittt	le
 800c544:	f04f 33ff 	movle.w	r3, #4294967295
 800c548:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800c54c:	4093      	lslle	r3, r2
 800c54e:	f04f 0a00 	mov.w	sl, #0
 800c552:	bfcc      	ite	gt
 800c554:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800c558:	ea03 0b01 	andle.w	fp, r3, r1
 800c55c:	2200      	movs	r2, #0
 800c55e:	2300      	movs	r3, #0
 800c560:	4650      	mov	r0, sl
 800c562:	4659      	mov	r1, fp
 800c564:	f7f4 fad0 	bl	8000b08 <__aeabi_dcmpeq>
 800c568:	2800      	cmp	r0, #0
 800c56a:	d1a7      	bne.n	800c4bc <_strtod_l+0x564>
 800c56c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c56e:	9300      	str	r3, [sp, #0]
 800c570:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c572:	9805      	ldr	r0, [sp, #20]
 800c574:	462b      	mov	r3, r5
 800c576:	464a      	mov	r2, r9
 800c578:	f003 f808 	bl	800f58c <__s2b>
 800c57c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800c57e:	2800      	cmp	r0, #0
 800c580:	f43f af09 	beq.w	800c396 <_strtod_l+0x43e>
 800c584:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c586:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c588:	2a00      	cmp	r2, #0
 800c58a:	eba3 0308 	sub.w	r3, r3, r8
 800c58e:	bfa8      	it	ge
 800c590:	2300      	movge	r3, #0
 800c592:	9312      	str	r3, [sp, #72]	@ 0x48
 800c594:	2400      	movs	r4, #0
 800c596:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c59a:	9316      	str	r3, [sp, #88]	@ 0x58
 800c59c:	46a0      	mov	r8, r4
 800c59e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c5a0:	9805      	ldr	r0, [sp, #20]
 800c5a2:	6859      	ldr	r1, [r3, #4]
 800c5a4:	f002 ff4a 	bl	800f43c <_Balloc>
 800c5a8:	4681      	mov	r9, r0
 800c5aa:	2800      	cmp	r0, #0
 800c5ac:	f43f aef7 	beq.w	800c39e <_strtod_l+0x446>
 800c5b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c5b2:	691a      	ldr	r2, [r3, #16]
 800c5b4:	3202      	adds	r2, #2
 800c5b6:	f103 010c 	add.w	r1, r3, #12
 800c5ba:	0092      	lsls	r2, r2, #2
 800c5bc:	300c      	adds	r0, #12
 800c5be:	f001 fcf2 	bl	800dfa6 <memcpy>
 800c5c2:	ec4b ab10 	vmov	d0, sl, fp
 800c5c6:	9805      	ldr	r0, [sp, #20]
 800c5c8:	aa1c      	add	r2, sp, #112	@ 0x70
 800c5ca:	a91b      	add	r1, sp, #108	@ 0x6c
 800c5cc:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800c5d0:	f003 fb10 	bl	800fbf4 <__d2b>
 800c5d4:	901a      	str	r0, [sp, #104]	@ 0x68
 800c5d6:	2800      	cmp	r0, #0
 800c5d8:	f43f aee1 	beq.w	800c39e <_strtod_l+0x446>
 800c5dc:	9805      	ldr	r0, [sp, #20]
 800c5de:	2101      	movs	r1, #1
 800c5e0:	f003 f86a 	bl	800f6b8 <__i2b>
 800c5e4:	4680      	mov	r8, r0
 800c5e6:	b948      	cbnz	r0, 800c5fc <_strtod_l+0x6a4>
 800c5e8:	f04f 0800 	mov.w	r8, #0
 800c5ec:	e6d7      	b.n	800c39e <_strtod_l+0x446>
 800c5ee:	f04f 32ff 	mov.w	r2, #4294967295
 800c5f2:	fa02 f303 	lsl.w	r3, r2, r3
 800c5f6:	ea03 0a0a 	and.w	sl, r3, sl
 800c5fa:	e7af      	b.n	800c55c <_strtod_l+0x604>
 800c5fc:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800c5fe:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800c600:	2d00      	cmp	r5, #0
 800c602:	bfab      	itete	ge
 800c604:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800c606:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800c608:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800c60a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800c60c:	bfac      	ite	ge
 800c60e:	18ef      	addge	r7, r5, r3
 800c610:	1b5e      	sublt	r6, r3, r5
 800c612:	9b08      	ldr	r3, [sp, #32]
 800c614:	1aed      	subs	r5, r5, r3
 800c616:	4415      	add	r5, r2
 800c618:	4b65      	ldr	r3, [pc, #404]	@ (800c7b0 <_strtod_l+0x858>)
 800c61a:	3d01      	subs	r5, #1
 800c61c:	429d      	cmp	r5, r3
 800c61e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c622:	da50      	bge.n	800c6c6 <_strtod_l+0x76e>
 800c624:	1b5b      	subs	r3, r3, r5
 800c626:	2b1f      	cmp	r3, #31
 800c628:	eba2 0203 	sub.w	r2, r2, r3
 800c62c:	f04f 0101 	mov.w	r1, #1
 800c630:	dc3d      	bgt.n	800c6ae <_strtod_l+0x756>
 800c632:	fa01 f303 	lsl.w	r3, r1, r3
 800c636:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c638:	2300      	movs	r3, #0
 800c63a:	9310      	str	r3, [sp, #64]	@ 0x40
 800c63c:	18bd      	adds	r5, r7, r2
 800c63e:	9b08      	ldr	r3, [sp, #32]
 800c640:	42af      	cmp	r7, r5
 800c642:	4416      	add	r6, r2
 800c644:	441e      	add	r6, r3
 800c646:	463b      	mov	r3, r7
 800c648:	bfa8      	it	ge
 800c64a:	462b      	movge	r3, r5
 800c64c:	42b3      	cmp	r3, r6
 800c64e:	bfa8      	it	ge
 800c650:	4633      	movge	r3, r6
 800c652:	2b00      	cmp	r3, #0
 800c654:	bfc2      	ittt	gt
 800c656:	1aed      	subgt	r5, r5, r3
 800c658:	1af6      	subgt	r6, r6, r3
 800c65a:	1aff      	subgt	r7, r7, r3
 800c65c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c65e:	2b00      	cmp	r3, #0
 800c660:	dd16      	ble.n	800c690 <_strtod_l+0x738>
 800c662:	4641      	mov	r1, r8
 800c664:	9805      	ldr	r0, [sp, #20]
 800c666:	461a      	mov	r2, r3
 800c668:	f003 f8de 	bl	800f828 <__pow5mult>
 800c66c:	4680      	mov	r8, r0
 800c66e:	2800      	cmp	r0, #0
 800c670:	d0ba      	beq.n	800c5e8 <_strtod_l+0x690>
 800c672:	4601      	mov	r1, r0
 800c674:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c676:	9805      	ldr	r0, [sp, #20]
 800c678:	f003 f834 	bl	800f6e4 <__multiply>
 800c67c:	900a      	str	r0, [sp, #40]	@ 0x28
 800c67e:	2800      	cmp	r0, #0
 800c680:	f43f ae8d 	beq.w	800c39e <_strtod_l+0x446>
 800c684:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c686:	9805      	ldr	r0, [sp, #20]
 800c688:	f002 ff18 	bl	800f4bc <_Bfree>
 800c68c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c68e:	931a      	str	r3, [sp, #104]	@ 0x68
 800c690:	2d00      	cmp	r5, #0
 800c692:	dc1d      	bgt.n	800c6d0 <_strtod_l+0x778>
 800c694:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c696:	2b00      	cmp	r3, #0
 800c698:	dd23      	ble.n	800c6e2 <_strtod_l+0x78a>
 800c69a:	4649      	mov	r1, r9
 800c69c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800c69e:	9805      	ldr	r0, [sp, #20]
 800c6a0:	f003 f8c2 	bl	800f828 <__pow5mult>
 800c6a4:	4681      	mov	r9, r0
 800c6a6:	b9e0      	cbnz	r0, 800c6e2 <_strtod_l+0x78a>
 800c6a8:	f04f 0900 	mov.w	r9, #0
 800c6ac:	e677      	b.n	800c39e <_strtod_l+0x446>
 800c6ae:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800c6b2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800c6b6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800c6ba:	35e2      	adds	r5, #226	@ 0xe2
 800c6bc:	fa01 f305 	lsl.w	r3, r1, r5
 800c6c0:	9310      	str	r3, [sp, #64]	@ 0x40
 800c6c2:	9113      	str	r1, [sp, #76]	@ 0x4c
 800c6c4:	e7ba      	b.n	800c63c <_strtod_l+0x6e4>
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	9310      	str	r3, [sp, #64]	@ 0x40
 800c6ca:	2301      	movs	r3, #1
 800c6cc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c6ce:	e7b5      	b.n	800c63c <_strtod_l+0x6e4>
 800c6d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c6d2:	9805      	ldr	r0, [sp, #20]
 800c6d4:	462a      	mov	r2, r5
 800c6d6:	f003 f901 	bl	800f8dc <__lshift>
 800c6da:	901a      	str	r0, [sp, #104]	@ 0x68
 800c6dc:	2800      	cmp	r0, #0
 800c6de:	d1d9      	bne.n	800c694 <_strtod_l+0x73c>
 800c6e0:	e65d      	b.n	800c39e <_strtod_l+0x446>
 800c6e2:	2e00      	cmp	r6, #0
 800c6e4:	dd07      	ble.n	800c6f6 <_strtod_l+0x79e>
 800c6e6:	4649      	mov	r1, r9
 800c6e8:	9805      	ldr	r0, [sp, #20]
 800c6ea:	4632      	mov	r2, r6
 800c6ec:	f003 f8f6 	bl	800f8dc <__lshift>
 800c6f0:	4681      	mov	r9, r0
 800c6f2:	2800      	cmp	r0, #0
 800c6f4:	d0d8      	beq.n	800c6a8 <_strtod_l+0x750>
 800c6f6:	2f00      	cmp	r7, #0
 800c6f8:	dd08      	ble.n	800c70c <_strtod_l+0x7b4>
 800c6fa:	4641      	mov	r1, r8
 800c6fc:	9805      	ldr	r0, [sp, #20]
 800c6fe:	463a      	mov	r2, r7
 800c700:	f003 f8ec 	bl	800f8dc <__lshift>
 800c704:	4680      	mov	r8, r0
 800c706:	2800      	cmp	r0, #0
 800c708:	f43f ae49 	beq.w	800c39e <_strtod_l+0x446>
 800c70c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c70e:	9805      	ldr	r0, [sp, #20]
 800c710:	464a      	mov	r2, r9
 800c712:	f003 f96b 	bl	800f9ec <__mdiff>
 800c716:	4604      	mov	r4, r0
 800c718:	2800      	cmp	r0, #0
 800c71a:	f43f ae40 	beq.w	800c39e <_strtod_l+0x446>
 800c71e:	68c3      	ldr	r3, [r0, #12]
 800c720:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c722:	2300      	movs	r3, #0
 800c724:	60c3      	str	r3, [r0, #12]
 800c726:	4641      	mov	r1, r8
 800c728:	f003 f944 	bl	800f9b4 <__mcmp>
 800c72c:	2800      	cmp	r0, #0
 800c72e:	da45      	bge.n	800c7bc <_strtod_l+0x864>
 800c730:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c732:	ea53 030a 	orrs.w	r3, r3, sl
 800c736:	d16b      	bne.n	800c810 <_strtod_l+0x8b8>
 800c738:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d167      	bne.n	800c810 <_strtod_l+0x8b8>
 800c740:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c744:	0d1b      	lsrs	r3, r3, #20
 800c746:	051b      	lsls	r3, r3, #20
 800c748:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c74c:	d960      	bls.n	800c810 <_strtod_l+0x8b8>
 800c74e:	6963      	ldr	r3, [r4, #20]
 800c750:	b913      	cbnz	r3, 800c758 <_strtod_l+0x800>
 800c752:	6923      	ldr	r3, [r4, #16]
 800c754:	2b01      	cmp	r3, #1
 800c756:	dd5b      	ble.n	800c810 <_strtod_l+0x8b8>
 800c758:	4621      	mov	r1, r4
 800c75a:	2201      	movs	r2, #1
 800c75c:	9805      	ldr	r0, [sp, #20]
 800c75e:	f003 f8bd 	bl	800f8dc <__lshift>
 800c762:	4641      	mov	r1, r8
 800c764:	4604      	mov	r4, r0
 800c766:	f003 f925 	bl	800f9b4 <__mcmp>
 800c76a:	2800      	cmp	r0, #0
 800c76c:	dd50      	ble.n	800c810 <_strtod_l+0x8b8>
 800c76e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c772:	9a08      	ldr	r2, [sp, #32]
 800c774:	0d1b      	lsrs	r3, r3, #20
 800c776:	051b      	lsls	r3, r3, #20
 800c778:	2a00      	cmp	r2, #0
 800c77a:	d06a      	beq.n	800c852 <_strtod_l+0x8fa>
 800c77c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c780:	d867      	bhi.n	800c852 <_strtod_l+0x8fa>
 800c782:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800c786:	f67f ae9d 	bls.w	800c4c4 <_strtod_l+0x56c>
 800c78a:	4b0a      	ldr	r3, [pc, #40]	@ (800c7b4 <_strtod_l+0x85c>)
 800c78c:	4650      	mov	r0, sl
 800c78e:	4659      	mov	r1, fp
 800c790:	2200      	movs	r2, #0
 800c792:	f7f3 ff51 	bl	8000638 <__aeabi_dmul>
 800c796:	4b08      	ldr	r3, [pc, #32]	@ (800c7b8 <_strtod_l+0x860>)
 800c798:	400b      	ands	r3, r1
 800c79a:	4682      	mov	sl, r0
 800c79c:	468b      	mov	fp, r1
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	f47f ae08 	bne.w	800c3b4 <_strtod_l+0x45c>
 800c7a4:	9a05      	ldr	r2, [sp, #20]
 800c7a6:	2322      	movs	r3, #34	@ 0x22
 800c7a8:	6013      	str	r3, [r2, #0]
 800c7aa:	e603      	b.n	800c3b4 <_strtod_l+0x45c>
 800c7ac:	08011190 	.word	0x08011190
 800c7b0:	fffffc02 	.word	0xfffffc02
 800c7b4:	39500000 	.word	0x39500000
 800c7b8:	7ff00000 	.word	0x7ff00000
 800c7bc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800c7c0:	d165      	bne.n	800c88e <_strtod_l+0x936>
 800c7c2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c7c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c7c8:	b35a      	cbz	r2, 800c822 <_strtod_l+0x8ca>
 800c7ca:	4a9f      	ldr	r2, [pc, #636]	@ (800ca48 <_strtod_l+0xaf0>)
 800c7cc:	4293      	cmp	r3, r2
 800c7ce:	d12b      	bne.n	800c828 <_strtod_l+0x8d0>
 800c7d0:	9b08      	ldr	r3, [sp, #32]
 800c7d2:	4651      	mov	r1, sl
 800c7d4:	b303      	cbz	r3, 800c818 <_strtod_l+0x8c0>
 800c7d6:	4b9d      	ldr	r3, [pc, #628]	@ (800ca4c <_strtod_l+0xaf4>)
 800c7d8:	465a      	mov	r2, fp
 800c7da:	4013      	ands	r3, r2
 800c7dc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800c7e0:	f04f 32ff 	mov.w	r2, #4294967295
 800c7e4:	d81b      	bhi.n	800c81e <_strtod_l+0x8c6>
 800c7e6:	0d1b      	lsrs	r3, r3, #20
 800c7e8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c7ec:	fa02 f303 	lsl.w	r3, r2, r3
 800c7f0:	4299      	cmp	r1, r3
 800c7f2:	d119      	bne.n	800c828 <_strtod_l+0x8d0>
 800c7f4:	4b96      	ldr	r3, [pc, #600]	@ (800ca50 <_strtod_l+0xaf8>)
 800c7f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c7f8:	429a      	cmp	r2, r3
 800c7fa:	d102      	bne.n	800c802 <_strtod_l+0x8aa>
 800c7fc:	3101      	adds	r1, #1
 800c7fe:	f43f adce 	beq.w	800c39e <_strtod_l+0x446>
 800c802:	4b92      	ldr	r3, [pc, #584]	@ (800ca4c <_strtod_l+0xaf4>)
 800c804:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c806:	401a      	ands	r2, r3
 800c808:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800c80c:	f04f 0a00 	mov.w	sl, #0
 800c810:	9b08      	ldr	r3, [sp, #32]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d1b9      	bne.n	800c78a <_strtod_l+0x832>
 800c816:	e5cd      	b.n	800c3b4 <_strtod_l+0x45c>
 800c818:	f04f 33ff 	mov.w	r3, #4294967295
 800c81c:	e7e8      	b.n	800c7f0 <_strtod_l+0x898>
 800c81e:	4613      	mov	r3, r2
 800c820:	e7e6      	b.n	800c7f0 <_strtod_l+0x898>
 800c822:	ea53 030a 	orrs.w	r3, r3, sl
 800c826:	d0a2      	beq.n	800c76e <_strtod_l+0x816>
 800c828:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c82a:	b1db      	cbz	r3, 800c864 <_strtod_l+0x90c>
 800c82c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c82e:	4213      	tst	r3, r2
 800c830:	d0ee      	beq.n	800c810 <_strtod_l+0x8b8>
 800c832:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c834:	9a08      	ldr	r2, [sp, #32]
 800c836:	4650      	mov	r0, sl
 800c838:	4659      	mov	r1, fp
 800c83a:	b1bb      	cbz	r3, 800c86c <_strtod_l+0x914>
 800c83c:	f7ff fb6e 	bl	800bf1c <sulp>
 800c840:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c844:	ec53 2b10 	vmov	r2, r3, d0
 800c848:	f7f3 fd40 	bl	80002cc <__adddf3>
 800c84c:	4682      	mov	sl, r0
 800c84e:	468b      	mov	fp, r1
 800c850:	e7de      	b.n	800c810 <_strtod_l+0x8b8>
 800c852:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800c856:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c85a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c85e:	f04f 3aff 	mov.w	sl, #4294967295
 800c862:	e7d5      	b.n	800c810 <_strtod_l+0x8b8>
 800c864:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c866:	ea13 0f0a 	tst.w	r3, sl
 800c86a:	e7e1      	b.n	800c830 <_strtod_l+0x8d8>
 800c86c:	f7ff fb56 	bl	800bf1c <sulp>
 800c870:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c874:	ec53 2b10 	vmov	r2, r3, d0
 800c878:	f7f3 fd26 	bl	80002c8 <__aeabi_dsub>
 800c87c:	2200      	movs	r2, #0
 800c87e:	2300      	movs	r3, #0
 800c880:	4682      	mov	sl, r0
 800c882:	468b      	mov	fp, r1
 800c884:	f7f4 f940 	bl	8000b08 <__aeabi_dcmpeq>
 800c888:	2800      	cmp	r0, #0
 800c88a:	d0c1      	beq.n	800c810 <_strtod_l+0x8b8>
 800c88c:	e61a      	b.n	800c4c4 <_strtod_l+0x56c>
 800c88e:	4641      	mov	r1, r8
 800c890:	4620      	mov	r0, r4
 800c892:	f003 fa07 	bl	800fca4 <__ratio>
 800c896:	ec57 6b10 	vmov	r6, r7, d0
 800c89a:	2200      	movs	r2, #0
 800c89c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c8a0:	4630      	mov	r0, r6
 800c8a2:	4639      	mov	r1, r7
 800c8a4:	f7f4 f944 	bl	8000b30 <__aeabi_dcmple>
 800c8a8:	2800      	cmp	r0, #0
 800c8aa:	d06f      	beq.n	800c98c <_strtod_l+0xa34>
 800c8ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d17a      	bne.n	800c9a8 <_strtod_l+0xa50>
 800c8b2:	f1ba 0f00 	cmp.w	sl, #0
 800c8b6:	d158      	bne.n	800c96a <_strtod_l+0xa12>
 800c8b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c8ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d15a      	bne.n	800c978 <_strtod_l+0xa20>
 800c8c2:	4b64      	ldr	r3, [pc, #400]	@ (800ca54 <_strtod_l+0xafc>)
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	4630      	mov	r0, r6
 800c8c8:	4639      	mov	r1, r7
 800c8ca:	f7f4 f927 	bl	8000b1c <__aeabi_dcmplt>
 800c8ce:	2800      	cmp	r0, #0
 800c8d0:	d159      	bne.n	800c986 <_strtod_l+0xa2e>
 800c8d2:	4630      	mov	r0, r6
 800c8d4:	4639      	mov	r1, r7
 800c8d6:	4b60      	ldr	r3, [pc, #384]	@ (800ca58 <_strtod_l+0xb00>)
 800c8d8:	2200      	movs	r2, #0
 800c8da:	f7f3 fead 	bl	8000638 <__aeabi_dmul>
 800c8de:	4606      	mov	r6, r0
 800c8e0:	460f      	mov	r7, r1
 800c8e2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800c8e6:	9606      	str	r6, [sp, #24]
 800c8e8:	9307      	str	r3, [sp, #28]
 800c8ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c8ee:	4d57      	ldr	r5, [pc, #348]	@ (800ca4c <_strtod_l+0xaf4>)
 800c8f0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c8f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c8f6:	401d      	ands	r5, r3
 800c8f8:	4b58      	ldr	r3, [pc, #352]	@ (800ca5c <_strtod_l+0xb04>)
 800c8fa:	429d      	cmp	r5, r3
 800c8fc:	f040 80b2 	bne.w	800ca64 <_strtod_l+0xb0c>
 800c900:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c902:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800c906:	ec4b ab10 	vmov	d0, sl, fp
 800c90a:	f003 f903 	bl	800fb14 <__ulp>
 800c90e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c912:	ec51 0b10 	vmov	r0, r1, d0
 800c916:	f7f3 fe8f 	bl	8000638 <__aeabi_dmul>
 800c91a:	4652      	mov	r2, sl
 800c91c:	465b      	mov	r3, fp
 800c91e:	f7f3 fcd5 	bl	80002cc <__adddf3>
 800c922:	460b      	mov	r3, r1
 800c924:	4949      	ldr	r1, [pc, #292]	@ (800ca4c <_strtod_l+0xaf4>)
 800c926:	4a4e      	ldr	r2, [pc, #312]	@ (800ca60 <_strtod_l+0xb08>)
 800c928:	4019      	ands	r1, r3
 800c92a:	4291      	cmp	r1, r2
 800c92c:	4682      	mov	sl, r0
 800c92e:	d942      	bls.n	800c9b6 <_strtod_l+0xa5e>
 800c930:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c932:	4b47      	ldr	r3, [pc, #284]	@ (800ca50 <_strtod_l+0xaf8>)
 800c934:	429a      	cmp	r2, r3
 800c936:	d103      	bne.n	800c940 <_strtod_l+0x9e8>
 800c938:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c93a:	3301      	adds	r3, #1
 800c93c:	f43f ad2f 	beq.w	800c39e <_strtod_l+0x446>
 800c940:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800ca50 <_strtod_l+0xaf8>
 800c944:	f04f 3aff 	mov.w	sl, #4294967295
 800c948:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c94a:	9805      	ldr	r0, [sp, #20]
 800c94c:	f002 fdb6 	bl	800f4bc <_Bfree>
 800c950:	9805      	ldr	r0, [sp, #20]
 800c952:	4649      	mov	r1, r9
 800c954:	f002 fdb2 	bl	800f4bc <_Bfree>
 800c958:	9805      	ldr	r0, [sp, #20]
 800c95a:	4641      	mov	r1, r8
 800c95c:	f002 fdae 	bl	800f4bc <_Bfree>
 800c960:	9805      	ldr	r0, [sp, #20]
 800c962:	4621      	mov	r1, r4
 800c964:	f002 fdaa 	bl	800f4bc <_Bfree>
 800c968:	e619      	b.n	800c59e <_strtod_l+0x646>
 800c96a:	f1ba 0f01 	cmp.w	sl, #1
 800c96e:	d103      	bne.n	800c978 <_strtod_l+0xa20>
 800c970:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c972:	2b00      	cmp	r3, #0
 800c974:	f43f ada6 	beq.w	800c4c4 <_strtod_l+0x56c>
 800c978:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800ca28 <_strtod_l+0xad0>
 800c97c:	4f35      	ldr	r7, [pc, #212]	@ (800ca54 <_strtod_l+0xafc>)
 800c97e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c982:	2600      	movs	r6, #0
 800c984:	e7b1      	b.n	800c8ea <_strtod_l+0x992>
 800c986:	4f34      	ldr	r7, [pc, #208]	@ (800ca58 <_strtod_l+0xb00>)
 800c988:	2600      	movs	r6, #0
 800c98a:	e7aa      	b.n	800c8e2 <_strtod_l+0x98a>
 800c98c:	4b32      	ldr	r3, [pc, #200]	@ (800ca58 <_strtod_l+0xb00>)
 800c98e:	4630      	mov	r0, r6
 800c990:	4639      	mov	r1, r7
 800c992:	2200      	movs	r2, #0
 800c994:	f7f3 fe50 	bl	8000638 <__aeabi_dmul>
 800c998:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c99a:	4606      	mov	r6, r0
 800c99c:	460f      	mov	r7, r1
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d09f      	beq.n	800c8e2 <_strtod_l+0x98a>
 800c9a2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c9a6:	e7a0      	b.n	800c8ea <_strtod_l+0x992>
 800c9a8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800ca30 <_strtod_l+0xad8>
 800c9ac:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c9b0:	ec57 6b17 	vmov	r6, r7, d7
 800c9b4:	e799      	b.n	800c8ea <_strtod_l+0x992>
 800c9b6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800c9ba:	9b08      	ldr	r3, [sp, #32]
 800c9bc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d1c1      	bne.n	800c948 <_strtod_l+0x9f0>
 800c9c4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c9c8:	0d1b      	lsrs	r3, r3, #20
 800c9ca:	051b      	lsls	r3, r3, #20
 800c9cc:	429d      	cmp	r5, r3
 800c9ce:	d1bb      	bne.n	800c948 <_strtod_l+0x9f0>
 800c9d0:	4630      	mov	r0, r6
 800c9d2:	4639      	mov	r1, r7
 800c9d4:	f7f4 f990 	bl	8000cf8 <__aeabi_d2lz>
 800c9d8:	f7f3 fe00 	bl	80005dc <__aeabi_l2d>
 800c9dc:	4602      	mov	r2, r0
 800c9de:	460b      	mov	r3, r1
 800c9e0:	4630      	mov	r0, r6
 800c9e2:	4639      	mov	r1, r7
 800c9e4:	f7f3 fc70 	bl	80002c8 <__aeabi_dsub>
 800c9e8:	460b      	mov	r3, r1
 800c9ea:	4602      	mov	r2, r0
 800c9ec:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c9f0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800c9f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c9f6:	ea46 060a 	orr.w	r6, r6, sl
 800c9fa:	431e      	orrs	r6, r3
 800c9fc:	d06f      	beq.n	800cade <_strtod_l+0xb86>
 800c9fe:	a30e      	add	r3, pc, #56	@ (adr r3, 800ca38 <_strtod_l+0xae0>)
 800ca00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca04:	f7f4 f88a 	bl	8000b1c <__aeabi_dcmplt>
 800ca08:	2800      	cmp	r0, #0
 800ca0a:	f47f acd3 	bne.w	800c3b4 <_strtod_l+0x45c>
 800ca0e:	a30c      	add	r3, pc, #48	@ (adr r3, 800ca40 <_strtod_l+0xae8>)
 800ca10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ca18:	f7f4 f89e 	bl	8000b58 <__aeabi_dcmpgt>
 800ca1c:	2800      	cmp	r0, #0
 800ca1e:	d093      	beq.n	800c948 <_strtod_l+0x9f0>
 800ca20:	e4c8      	b.n	800c3b4 <_strtod_l+0x45c>
 800ca22:	bf00      	nop
 800ca24:	f3af 8000 	nop.w
 800ca28:	00000000 	.word	0x00000000
 800ca2c:	bff00000 	.word	0xbff00000
 800ca30:	00000000 	.word	0x00000000
 800ca34:	3ff00000 	.word	0x3ff00000
 800ca38:	94a03595 	.word	0x94a03595
 800ca3c:	3fdfffff 	.word	0x3fdfffff
 800ca40:	35afe535 	.word	0x35afe535
 800ca44:	3fe00000 	.word	0x3fe00000
 800ca48:	000fffff 	.word	0x000fffff
 800ca4c:	7ff00000 	.word	0x7ff00000
 800ca50:	7fefffff 	.word	0x7fefffff
 800ca54:	3ff00000 	.word	0x3ff00000
 800ca58:	3fe00000 	.word	0x3fe00000
 800ca5c:	7fe00000 	.word	0x7fe00000
 800ca60:	7c9fffff 	.word	0x7c9fffff
 800ca64:	9b08      	ldr	r3, [sp, #32]
 800ca66:	b323      	cbz	r3, 800cab2 <_strtod_l+0xb5a>
 800ca68:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800ca6c:	d821      	bhi.n	800cab2 <_strtod_l+0xb5a>
 800ca6e:	a328      	add	r3, pc, #160	@ (adr r3, 800cb10 <_strtod_l+0xbb8>)
 800ca70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca74:	4630      	mov	r0, r6
 800ca76:	4639      	mov	r1, r7
 800ca78:	f7f4 f85a 	bl	8000b30 <__aeabi_dcmple>
 800ca7c:	b1a0      	cbz	r0, 800caa8 <_strtod_l+0xb50>
 800ca7e:	4639      	mov	r1, r7
 800ca80:	4630      	mov	r0, r6
 800ca82:	f7f4 f8b1 	bl	8000be8 <__aeabi_d2uiz>
 800ca86:	2801      	cmp	r0, #1
 800ca88:	bf38      	it	cc
 800ca8a:	2001      	movcc	r0, #1
 800ca8c:	f7f3 fd5a 	bl	8000544 <__aeabi_ui2d>
 800ca90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca92:	4606      	mov	r6, r0
 800ca94:	460f      	mov	r7, r1
 800ca96:	b9fb      	cbnz	r3, 800cad8 <_strtod_l+0xb80>
 800ca98:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ca9c:	9014      	str	r0, [sp, #80]	@ 0x50
 800ca9e:	9315      	str	r3, [sp, #84]	@ 0x54
 800caa0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800caa4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800caa8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800caaa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800caae:	1b5b      	subs	r3, r3, r5
 800cab0:	9311      	str	r3, [sp, #68]	@ 0x44
 800cab2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800cab6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800caba:	f003 f82b 	bl	800fb14 <__ulp>
 800cabe:	4650      	mov	r0, sl
 800cac0:	ec53 2b10 	vmov	r2, r3, d0
 800cac4:	4659      	mov	r1, fp
 800cac6:	f7f3 fdb7 	bl	8000638 <__aeabi_dmul>
 800caca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800cace:	f7f3 fbfd 	bl	80002cc <__adddf3>
 800cad2:	4682      	mov	sl, r0
 800cad4:	468b      	mov	fp, r1
 800cad6:	e770      	b.n	800c9ba <_strtod_l+0xa62>
 800cad8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800cadc:	e7e0      	b.n	800caa0 <_strtod_l+0xb48>
 800cade:	a30e      	add	r3, pc, #56	@ (adr r3, 800cb18 <_strtod_l+0xbc0>)
 800cae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cae4:	f7f4 f81a 	bl	8000b1c <__aeabi_dcmplt>
 800cae8:	e798      	b.n	800ca1c <_strtod_l+0xac4>
 800caea:	2300      	movs	r3, #0
 800caec:	930e      	str	r3, [sp, #56]	@ 0x38
 800caee:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800caf0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800caf2:	6013      	str	r3, [r2, #0]
 800caf4:	f7ff ba6d 	b.w	800bfd2 <_strtod_l+0x7a>
 800caf8:	2a65      	cmp	r2, #101	@ 0x65
 800cafa:	f43f ab68 	beq.w	800c1ce <_strtod_l+0x276>
 800cafe:	2a45      	cmp	r2, #69	@ 0x45
 800cb00:	f43f ab65 	beq.w	800c1ce <_strtod_l+0x276>
 800cb04:	2301      	movs	r3, #1
 800cb06:	f7ff bba0 	b.w	800c24a <_strtod_l+0x2f2>
 800cb0a:	bf00      	nop
 800cb0c:	f3af 8000 	nop.w
 800cb10:	ffc00000 	.word	0xffc00000
 800cb14:	41dfffff 	.word	0x41dfffff
 800cb18:	94a03595 	.word	0x94a03595
 800cb1c:	3fcfffff 	.word	0x3fcfffff

0800cb20 <_strtod_r>:
 800cb20:	4b01      	ldr	r3, [pc, #4]	@ (800cb28 <_strtod_r+0x8>)
 800cb22:	f7ff ba19 	b.w	800bf58 <_strtod_l>
 800cb26:	bf00      	nop
 800cb28:	20000020 	.word	0x20000020

0800cb2c <__cvt>:
 800cb2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cb30:	ec57 6b10 	vmov	r6, r7, d0
 800cb34:	2f00      	cmp	r7, #0
 800cb36:	460c      	mov	r4, r1
 800cb38:	4619      	mov	r1, r3
 800cb3a:	463b      	mov	r3, r7
 800cb3c:	bfbb      	ittet	lt
 800cb3e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800cb42:	461f      	movlt	r7, r3
 800cb44:	2300      	movge	r3, #0
 800cb46:	232d      	movlt	r3, #45	@ 0x2d
 800cb48:	700b      	strb	r3, [r1, #0]
 800cb4a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cb4c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800cb50:	4691      	mov	r9, r2
 800cb52:	f023 0820 	bic.w	r8, r3, #32
 800cb56:	bfbc      	itt	lt
 800cb58:	4632      	movlt	r2, r6
 800cb5a:	4616      	movlt	r6, r2
 800cb5c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cb60:	d005      	beq.n	800cb6e <__cvt+0x42>
 800cb62:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800cb66:	d100      	bne.n	800cb6a <__cvt+0x3e>
 800cb68:	3401      	adds	r4, #1
 800cb6a:	2102      	movs	r1, #2
 800cb6c:	e000      	b.n	800cb70 <__cvt+0x44>
 800cb6e:	2103      	movs	r1, #3
 800cb70:	ab03      	add	r3, sp, #12
 800cb72:	9301      	str	r3, [sp, #4]
 800cb74:	ab02      	add	r3, sp, #8
 800cb76:	9300      	str	r3, [sp, #0]
 800cb78:	ec47 6b10 	vmov	d0, r6, r7
 800cb7c:	4653      	mov	r3, sl
 800cb7e:	4622      	mov	r2, r4
 800cb80:	f001 fac2 	bl	800e108 <_dtoa_r>
 800cb84:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800cb88:	4605      	mov	r5, r0
 800cb8a:	d119      	bne.n	800cbc0 <__cvt+0x94>
 800cb8c:	f019 0f01 	tst.w	r9, #1
 800cb90:	d00e      	beq.n	800cbb0 <__cvt+0x84>
 800cb92:	eb00 0904 	add.w	r9, r0, r4
 800cb96:	2200      	movs	r2, #0
 800cb98:	2300      	movs	r3, #0
 800cb9a:	4630      	mov	r0, r6
 800cb9c:	4639      	mov	r1, r7
 800cb9e:	f7f3 ffb3 	bl	8000b08 <__aeabi_dcmpeq>
 800cba2:	b108      	cbz	r0, 800cba8 <__cvt+0x7c>
 800cba4:	f8cd 900c 	str.w	r9, [sp, #12]
 800cba8:	2230      	movs	r2, #48	@ 0x30
 800cbaa:	9b03      	ldr	r3, [sp, #12]
 800cbac:	454b      	cmp	r3, r9
 800cbae:	d31e      	bcc.n	800cbee <__cvt+0xc2>
 800cbb0:	9b03      	ldr	r3, [sp, #12]
 800cbb2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cbb4:	1b5b      	subs	r3, r3, r5
 800cbb6:	4628      	mov	r0, r5
 800cbb8:	6013      	str	r3, [r2, #0]
 800cbba:	b004      	add	sp, #16
 800cbbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbc0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cbc4:	eb00 0904 	add.w	r9, r0, r4
 800cbc8:	d1e5      	bne.n	800cb96 <__cvt+0x6a>
 800cbca:	7803      	ldrb	r3, [r0, #0]
 800cbcc:	2b30      	cmp	r3, #48	@ 0x30
 800cbce:	d10a      	bne.n	800cbe6 <__cvt+0xba>
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	4630      	mov	r0, r6
 800cbd6:	4639      	mov	r1, r7
 800cbd8:	f7f3 ff96 	bl	8000b08 <__aeabi_dcmpeq>
 800cbdc:	b918      	cbnz	r0, 800cbe6 <__cvt+0xba>
 800cbde:	f1c4 0401 	rsb	r4, r4, #1
 800cbe2:	f8ca 4000 	str.w	r4, [sl]
 800cbe6:	f8da 3000 	ldr.w	r3, [sl]
 800cbea:	4499      	add	r9, r3
 800cbec:	e7d3      	b.n	800cb96 <__cvt+0x6a>
 800cbee:	1c59      	adds	r1, r3, #1
 800cbf0:	9103      	str	r1, [sp, #12]
 800cbf2:	701a      	strb	r2, [r3, #0]
 800cbf4:	e7d9      	b.n	800cbaa <__cvt+0x7e>

0800cbf6 <__exponent>:
 800cbf6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cbf8:	2900      	cmp	r1, #0
 800cbfa:	bfba      	itte	lt
 800cbfc:	4249      	neglt	r1, r1
 800cbfe:	232d      	movlt	r3, #45	@ 0x2d
 800cc00:	232b      	movge	r3, #43	@ 0x2b
 800cc02:	2909      	cmp	r1, #9
 800cc04:	7002      	strb	r2, [r0, #0]
 800cc06:	7043      	strb	r3, [r0, #1]
 800cc08:	dd29      	ble.n	800cc5e <__exponent+0x68>
 800cc0a:	f10d 0307 	add.w	r3, sp, #7
 800cc0e:	461d      	mov	r5, r3
 800cc10:	270a      	movs	r7, #10
 800cc12:	461a      	mov	r2, r3
 800cc14:	fbb1 f6f7 	udiv	r6, r1, r7
 800cc18:	fb07 1416 	mls	r4, r7, r6, r1
 800cc1c:	3430      	adds	r4, #48	@ 0x30
 800cc1e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800cc22:	460c      	mov	r4, r1
 800cc24:	2c63      	cmp	r4, #99	@ 0x63
 800cc26:	f103 33ff 	add.w	r3, r3, #4294967295
 800cc2a:	4631      	mov	r1, r6
 800cc2c:	dcf1      	bgt.n	800cc12 <__exponent+0x1c>
 800cc2e:	3130      	adds	r1, #48	@ 0x30
 800cc30:	1e94      	subs	r4, r2, #2
 800cc32:	f803 1c01 	strb.w	r1, [r3, #-1]
 800cc36:	1c41      	adds	r1, r0, #1
 800cc38:	4623      	mov	r3, r4
 800cc3a:	42ab      	cmp	r3, r5
 800cc3c:	d30a      	bcc.n	800cc54 <__exponent+0x5e>
 800cc3e:	f10d 0309 	add.w	r3, sp, #9
 800cc42:	1a9b      	subs	r3, r3, r2
 800cc44:	42ac      	cmp	r4, r5
 800cc46:	bf88      	it	hi
 800cc48:	2300      	movhi	r3, #0
 800cc4a:	3302      	adds	r3, #2
 800cc4c:	4403      	add	r3, r0
 800cc4e:	1a18      	subs	r0, r3, r0
 800cc50:	b003      	add	sp, #12
 800cc52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc54:	f813 6b01 	ldrb.w	r6, [r3], #1
 800cc58:	f801 6f01 	strb.w	r6, [r1, #1]!
 800cc5c:	e7ed      	b.n	800cc3a <__exponent+0x44>
 800cc5e:	2330      	movs	r3, #48	@ 0x30
 800cc60:	3130      	adds	r1, #48	@ 0x30
 800cc62:	7083      	strb	r3, [r0, #2]
 800cc64:	70c1      	strb	r1, [r0, #3]
 800cc66:	1d03      	adds	r3, r0, #4
 800cc68:	e7f1      	b.n	800cc4e <__exponent+0x58>
	...

0800cc6c <_printf_float>:
 800cc6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc70:	b08d      	sub	sp, #52	@ 0x34
 800cc72:	460c      	mov	r4, r1
 800cc74:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800cc78:	4616      	mov	r6, r2
 800cc7a:	461f      	mov	r7, r3
 800cc7c:	4605      	mov	r5, r0
 800cc7e:	f001 f8bd 	bl	800ddfc <_localeconv_r>
 800cc82:	6803      	ldr	r3, [r0, #0]
 800cc84:	9304      	str	r3, [sp, #16]
 800cc86:	4618      	mov	r0, r3
 800cc88:	f7f3 fb12 	bl	80002b0 <strlen>
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	930a      	str	r3, [sp, #40]	@ 0x28
 800cc90:	f8d8 3000 	ldr.w	r3, [r8]
 800cc94:	9005      	str	r0, [sp, #20]
 800cc96:	3307      	adds	r3, #7
 800cc98:	f023 0307 	bic.w	r3, r3, #7
 800cc9c:	f103 0208 	add.w	r2, r3, #8
 800cca0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800cca4:	f8d4 b000 	ldr.w	fp, [r4]
 800cca8:	f8c8 2000 	str.w	r2, [r8]
 800ccac:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ccb0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ccb4:	9307      	str	r3, [sp, #28]
 800ccb6:	f8cd 8018 	str.w	r8, [sp, #24]
 800ccba:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ccbe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ccc2:	4b9c      	ldr	r3, [pc, #624]	@ (800cf34 <_printf_float+0x2c8>)
 800ccc4:	f04f 32ff 	mov.w	r2, #4294967295
 800ccc8:	f7f3 ff50 	bl	8000b6c <__aeabi_dcmpun>
 800cccc:	bb70      	cbnz	r0, 800cd2c <_printf_float+0xc0>
 800ccce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ccd2:	4b98      	ldr	r3, [pc, #608]	@ (800cf34 <_printf_float+0x2c8>)
 800ccd4:	f04f 32ff 	mov.w	r2, #4294967295
 800ccd8:	f7f3 ff2a 	bl	8000b30 <__aeabi_dcmple>
 800ccdc:	bb30      	cbnz	r0, 800cd2c <_printf_float+0xc0>
 800ccde:	2200      	movs	r2, #0
 800cce0:	2300      	movs	r3, #0
 800cce2:	4640      	mov	r0, r8
 800cce4:	4649      	mov	r1, r9
 800cce6:	f7f3 ff19 	bl	8000b1c <__aeabi_dcmplt>
 800ccea:	b110      	cbz	r0, 800ccf2 <_printf_float+0x86>
 800ccec:	232d      	movs	r3, #45	@ 0x2d
 800ccee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ccf2:	4a91      	ldr	r2, [pc, #580]	@ (800cf38 <_printf_float+0x2cc>)
 800ccf4:	4b91      	ldr	r3, [pc, #580]	@ (800cf3c <_printf_float+0x2d0>)
 800ccf6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ccfa:	bf8c      	ite	hi
 800ccfc:	4690      	movhi	r8, r2
 800ccfe:	4698      	movls	r8, r3
 800cd00:	2303      	movs	r3, #3
 800cd02:	6123      	str	r3, [r4, #16]
 800cd04:	f02b 0304 	bic.w	r3, fp, #4
 800cd08:	6023      	str	r3, [r4, #0]
 800cd0a:	f04f 0900 	mov.w	r9, #0
 800cd0e:	9700      	str	r7, [sp, #0]
 800cd10:	4633      	mov	r3, r6
 800cd12:	aa0b      	add	r2, sp, #44	@ 0x2c
 800cd14:	4621      	mov	r1, r4
 800cd16:	4628      	mov	r0, r5
 800cd18:	f000 f9d2 	bl	800d0c0 <_printf_common>
 800cd1c:	3001      	adds	r0, #1
 800cd1e:	f040 808d 	bne.w	800ce3c <_printf_float+0x1d0>
 800cd22:	f04f 30ff 	mov.w	r0, #4294967295
 800cd26:	b00d      	add	sp, #52	@ 0x34
 800cd28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd2c:	4642      	mov	r2, r8
 800cd2e:	464b      	mov	r3, r9
 800cd30:	4640      	mov	r0, r8
 800cd32:	4649      	mov	r1, r9
 800cd34:	f7f3 ff1a 	bl	8000b6c <__aeabi_dcmpun>
 800cd38:	b140      	cbz	r0, 800cd4c <_printf_float+0xe0>
 800cd3a:	464b      	mov	r3, r9
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	bfbc      	itt	lt
 800cd40:	232d      	movlt	r3, #45	@ 0x2d
 800cd42:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800cd46:	4a7e      	ldr	r2, [pc, #504]	@ (800cf40 <_printf_float+0x2d4>)
 800cd48:	4b7e      	ldr	r3, [pc, #504]	@ (800cf44 <_printf_float+0x2d8>)
 800cd4a:	e7d4      	b.n	800ccf6 <_printf_float+0x8a>
 800cd4c:	6863      	ldr	r3, [r4, #4]
 800cd4e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800cd52:	9206      	str	r2, [sp, #24]
 800cd54:	1c5a      	adds	r2, r3, #1
 800cd56:	d13b      	bne.n	800cdd0 <_printf_float+0x164>
 800cd58:	2306      	movs	r3, #6
 800cd5a:	6063      	str	r3, [r4, #4]
 800cd5c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800cd60:	2300      	movs	r3, #0
 800cd62:	6022      	str	r2, [r4, #0]
 800cd64:	9303      	str	r3, [sp, #12]
 800cd66:	ab0a      	add	r3, sp, #40	@ 0x28
 800cd68:	e9cd a301 	strd	sl, r3, [sp, #4]
 800cd6c:	ab09      	add	r3, sp, #36	@ 0x24
 800cd6e:	9300      	str	r3, [sp, #0]
 800cd70:	6861      	ldr	r1, [r4, #4]
 800cd72:	ec49 8b10 	vmov	d0, r8, r9
 800cd76:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800cd7a:	4628      	mov	r0, r5
 800cd7c:	f7ff fed6 	bl	800cb2c <__cvt>
 800cd80:	9b06      	ldr	r3, [sp, #24]
 800cd82:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cd84:	2b47      	cmp	r3, #71	@ 0x47
 800cd86:	4680      	mov	r8, r0
 800cd88:	d129      	bne.n	800cdde <_printf_float+0x172>
 800cd8a:	1cc8      	adds	r0, r1, #3
 800cd8c:	db02      	blt.n	800cd94 <_printf_float+0x128>
 800cd8e:	6863      	ldr	r3, [r4, #4]
 800cd90:	4299      	cmp	r1, r3
 800cd92:	dd41      	ble.n	800ce18 <_printf_float+0x1ac>
 800cd94:	f1aa 0a02 	sub.w	sl, sl, #2
 800cd98:	fa5f fa8a 	uxtb.w	sl, sl
 800cd9c:	3901      	subs	r1, #1
 800cd9e:	4652      	mov	r2, sl
 800cda0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800cda4:	9109      	str	r1, [sp, #36]	@ 0x24
 800cda6:	f7ff ff26 	bl	800cbf6 <__exponent>
 800cdaa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cdac:	1813      	adds	r3, r2, r0
 800cdae:	2a01      	cmp	r2, #1
 800cdb0:	4681      	mov	r9, r0
 800cdb2:	6123      	str	r3, [r4, #16]
 800cdb4:	dc02      	bgt.n	800cdbc <_printf_float+0x150>
 800cdb6:	6822      	ldr	r2, [r4, #0]
 800cdb8:	07d2      	lsls	r2, r2, #31
 800cdba:	d501      	bpl.n	800cdc0 <_printf_float+0x154>
 800cdbc:	3301      	adds	r3, #1
 800cdbe:	6123      	str	r3, [r4, #16]
 800cdc0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d0a2      	beq.n	800cd0e <_printf_float+0xa2>
 800cdc8:	232d      	movs	r3, #45	@ 0x2d
 800cdca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cdce:	e79e      	b.n	800cd0e <_printf_float+0xa2>
 800cdd0:	9a06      	ldr	r2, [sp, #24]
 800cdd2:	2a47      	cmp	r2, #71	@ 0x47
 800cdd4:	d1c2      	bne.n	800cd5c <_printf_float+0xf0>
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d1c0      	bne.n	800cd5c <_printf_float+0xf0>
 800cdda:	2301      	movs	r3, #1
 800cddc:	e7bd      	b.n	800cd5a <_printf_float+0xee>
 800cdde:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cde2:	d9db      	bls.n	800cd9c <_printf_float+0x130>
 800cde4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800cde8:	d118      	bne.n	800ce1c <_printf_float+0x1b0>
 800cdea:	2900      	cmp	r1, #0
 800cdec:	6863      	ldr	r3, [r4, #4]
 800cdee:	dd0b      	ble.n	800ce08 <_printf_float+0x19c>
 800cdf0:	6121      	str	r1, [r4, #16]
 800cdf2:	b913      	cbnz	r3, 800cdfa <_printf_float+0x18e>
 800cdf4:	6822      	ldr	r2, [r4, #0]
 800cdf6:	07d0      	lsls	r0, r2, #31
 800cdf8:	d502      	bpl.n	800ce00 <_printf_float+0x194>
 800cdfa:	3301      	adds	r3, #1
 800cdfc:	440b      	add	r3, r1
 800cdfe:	6123      	str	r3, [r4, #16]
 800ce00:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ce02:	f04f 0900 	mov.w	r9, #0
 800ce06:	e7db      	b.n	800cdc0 <_printf_float+0x154>
 800ce08:	b913      	cbnz	r3, 800ce10 <_printf_float+0x1a4>
 800ce0a:	6822      	ldr	r2, [r4, #0]
 800ce0c:	07d2      	lsls	r2, r2, #31
 800ce0e:	d501      	bpl.n	800ce14 <_printf_float+0x1a8>
 800ce10:	3302      	adds	r3, #2
 800ce12:	e7f4      	b.n	800cdfe <_printf_float+0x192>
 800ce14:	2301      	movs	r3, #1
 800ce16:	e7f2      	b.n	800cdfe <_printf_float+0x192>
 800ce18:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ce1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce1e:	4299      	cmp	r1, r3
 800ce20:	db05      	blt.n	800ce2e <_printf_float+0x1c2>
 800ce22:	6823      	ldr	r3, [r4, #0]
 800ce24:	6121      	str	r1, [r4, #16]
 800ce26:	07d8      	lsls	r0, r3, #31
 800ce28:	d5ea      	bpl.n	800ce00 <_printf_float+0x194>
 800ce2a:	1c4b      	adds	r3, r1, #1
 800ce2c:	e7e7      	b.n	800cdfe <_printf_float+0x192>
 800ce2e:	2900      	cmp	r1, #0
 800ce30:	bfd4      	ite	le
 800ce32:	f1c1 0202 	rsble	r2, r1, #2
 800ce36:	2201      	movgt	r2, #1
 800ce38:	4413      	add	r3, r2
 800ce3a:	e7e0      	b.n	800cdfe <_printf_float+0x192>
 800ce3c:	6823      	ldr	r3, [r4, #0]
 800ce3e:	055a      	lsls	r2, r3, #21
 800ce40:	d407      	bmi.n	800ce52 <_printf_float+0x1e6>
 800ce42:	6923      	ldr	r3, [r4, #16]
 800ce44:	4642      	mov	r2, r8
 800ce46:	4631      	mov	r1, r6
 800ce48:	4628      	mov	r0, r5
 800ce4a:	47b8      	blx	r7
 800ce4c:	3001      	adds	r0, #1
 800ce4e:	d12b      	bne.n	800cea8 <_printf_float+0x23c>
 800ce50:	e767      	b.n	800cd22 <_printf_float+0xb6>
 800ce52:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ce56:	f240 80dd 	bls.w	800d014 <_printf_float+0x3a8>
 800ce5a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ce5e:	2200      	movs	r2, #0
 800ce60:	2300      	movs	r3, #0
 800ce62:	f7f3 fe51 	bl	8000b08 <__aeabi_dcmpeq>
 800ce66:	2800      	cmp	r0, #0
 800ce68:	d033      	beq.n	800ced2 <_printf_float+0x266>
 800ce6a:	4a37      	ldr	r2, [pc, #220]	@ (800cf48 <_printf_float+0x2dc>)
 800ce6c:	2301      	movs	r3, #1
 800ce6e:	4631      	mov	r1, r6
 800ce70:	4628      	mov	r0, r5
 800ce72:	47b8      	blx	r7
 800ce74:	3001      	adds	r0, #1
 800ce76:	f43f af54 	beq.w	800cd22 <_printf_float+0xb6>
 800ce7a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ce7e:	4543      	cmp	r3, r8
 800ce80:	db02      	blt.n	800ce88 <_printf_float+0x21c>
 800ce82:	6823      	ldr	r3, [r4, #0]
 800ce84:	07d8      	lsls	r0, r3, #31
 800ce86:	d50f      	bpl.n	800cea8 <_printf_float+0x23c>
 800ce88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ce8c:	4631      	mov	r1, r6
 800ce8e:	4628      	mov	r0, r5
 800ce90:	47b8      	blx	r7
 800ce92:	3001      	adds	r0, #1
 800ce94:	f43f af45 	beq.w	800cd22 <_printf_float+0xb6>
 800ce98:	f04f 0900 	mov.w	r9, #0
 800ce9c:	f108 38ff 	add.w	r8, r8, #4294967295
 800cea0:	f104 0a1a 	add.w	sl, r4, #26
 800cea4:	45c8      	cmp	r8, r9
 800cea6:	dc09      	bgt.n	800cebc <_printf_float+0x250>
 800cea8:	6823      	ldr	r3, [r4, #0]
 800ceaa:	079b      	lsls	r3, r3, #30
 800ceac:	f100 8103 	bmi.w	800d0b6 <_printf_float+0x44a>
 800ceb0:	68e0      	ldr	r0, [r4, #12]
 800ceb2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ceb4:	4298      	cmp	r0, r3
 800ceb6:	bfb8      	it	lt
 800ceb8:	4618      	movlt	r0, r3
 800ceba:	e734      	b.n	800cd26 <_printf_float+0xba>
 800cebc:	2301      	movs	r3, #1
 800cebe:	4652      	mov	r2, sl
 800cec0:	4631      	mov	r1, r6
 800cec2:	4628      	mov	r0, r5
 800cec4:	47b8      	blx	r7
 800cec6:	3001      	adds	r0, #1
 800cec8:	f43f af2b 	beq.w	800cd22 <_printf_float+0xb6>
 800cecc:	f109 0901 	add.w	r9, r9, #1
 800ced0:	e7e8      	b.n	800cea4 <_printf_float+0x238>
 800ced2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	dc39      	bgt.n	800cf4c <_printf_float+0x2e0>
 800ced8:	4a1b      	ldr	r2, [pc, #108]	@ (800cf48 <_printf_float+0x2dc>)
 800ceda:	2301      	movs	r3, #1
 800cedc:	4631      	mov	r1, r6
 800cede:	4628      	mov	r0, r5
 800cee0:	47b8      	blx	r7
 800cee2:	3001      	adds	r0, #1
 800cee4:	f43f af1d 	beq.w	800cd22 <_printf_float+0xb6>
 800cee8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ceec:	ea59 0303 	orrs.w	r3, r9, r3
 800cef0:	d102      	bne.n	800cef8 <_printf_float+0x28c>
 800cef2:	6823      	ldr	r3, [r4, #0]
 800cef4:	07d9      	lsls	r1, r3, #31
 800cef6:	d5d7      	bpl.n	800cea8 <_printf_float+0x23c>
 800cef8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cefc:	4631      	mov	r1, r6
 800cefe:	4628      	mov	r0, r5
 800cf00:	47b8      	blx	r7
 800cf02:	3001      	adds	r0, #1
 800cf04:	f43f af0d 	beq.w	800cd22 <_printf_float+0xb6>
 800cf08:	f04f 0a00 	mov.w	sl, #0
 800cf0c:	f104 0b1a 	add.w	fp, r4, #26
 800cf10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf12:	425b      	negs	r3, r3
 800cf14:	4553      	cmp	r3, sl
 800cf16:	dc01      	bgt.n	800cf1c <_printf_float+0x2b0>
 800cf18:	464b      	mov	r3, r9
 800cf1a:	e793      	b.n	800ce44 <_printf_float+0x1d8>
 800cf1c:	2301      	movs	r3, #1
 800cf1e:	465a      	mov	r2, fp
 800cf20:	4631      	mov	r1, r6
 800cf22:	4628      	mov	r0, r5
 800cf24:	47b8      	blx	r7
 800cf26:	3001      	adds	r0, #1
 800cf28:	f43f aefb 	beq.w	800cd22 <_printf_float+0xb6>
 800cf2c:	f10a 0a01 	add.w	sl, sl, #1
 800cf30:	e7ee      	b.n	800cf10 <_printf_float+0x2a4>
 800cf32:	bf00      	nop
 800cf34:	7fefffff 	.word	0x7fefffff
 800cf38:	08010fd2 	.word	0x08010fd2
 800cf3c:	08010fce 	.word	0x08010fce
 800cf40:	08010fda 	.word	0x08010fda
 800cf44:	08010fd6 	.word	0x08010fd6
 800cf48:	08010fde 	.word	0x08010fde
 800cf4c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cf4e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800cf52:	4553      	cmp	r3, sl
 800cf54:	bfa8      	it	ge
 800cf56:	4653      	movge	r3, sl
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	4699      	mov	r9, r3
 800cf5c:	dc36      	bgt.n	800cfcc <_printf_float+0x360>
 800cf5e:	f04f 0b00 	mov.w	fp, #0
 800cf62:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cf66:	f104 021a 	add.w	r2, r4, #26
 800cf6a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cf6c:	9306      	str	r3, [sp, #24]
 800cf6e:	eba3 0309 	sub.w	r3, r3, r9
 800cf72:	455b      	cmp	r3, fp
 800cf74:	dc31      	bgt.n	800cfda <_printf_float+0x36e>
 800cf76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf78:	459a      	cmp	sl, r3
 800cf7a:	dc3a      	bgt.n	800cff2 <_printf_float+0x386>
 800cf7c:	6823      	ldr	r3, [r4, #0]
 800cf7e:	07da      	lsls	r2, r3, #31
 800cf80:	d437      	bmi.n	800cff2 <_printf_float+0x386>
 800cf82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf84:	ebaa 0903 	sub.w	r9, sl, r3
 800cf88:	9b06      	ldr	r3, [sp, #24]
 800cf8a:	ebaa 0303 	sub.w	r3, sl, r3
 800cf8e:	4599      	cmp	r9, r3
 800cf90:	bfa8      	it	ge
 800cf92:	4699      	movge	r9, r3
 800cf94:	f1b9 0f00 	cmp.w	r9, #0
 800cf98:	dc33      	bgt.n	800d002 <_printf_float+0x396>
 800cf9a:	f04f 0800 	mov.w	r8, #0
 800cf9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cfa2:	f104 0b1a 	add.w	fp, r4, #26
 800cfa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfa8:	ebaa 0303 	sub.w	r3, sl, r3
 800cfac:	eba3 0309 	sub.w	r3, r3, r9
 800cfb0:	4543      	cmp	r3, r8
 800cfb2:	f77f af79 	ble.w	800cea8 <_printf_float+0x23c>
 800cfb6:	2301      	movs	r3, #1
 800cfb8:	465a      	mov	r2, fp
 800cfba:	4631      	mov	r1, r6
 800cfbc:	4628      	mov	r0, r5
 800cfbe:	47b8      	blx	r7
 800cfc0:	3001      	adds	r0, #1
 800cfc2:	f43f aeae 	beq.w	800cd22 <_printf_float+0xb6>
 800cfc6:	f108 0801 	add.w	r8, r8, #1
 800cfca:	e7ec      	b.n	800cfa6 <_printf_float+0x33a>
 800cfcc:	4642      	mov	r2, r8
 800cfce:	4631      	mov	r1, r6
 800cfd0:	4628      	mov	r0, r5
 800cfd2:	47b8      	blx	r7
 800cfd4:	3001      	adds	r0, #1
 800cfd6:	d1c2      	bne.n	800cf5e <_printf_float+0x2f2>
 800cfd8:	e6a3      	b.n	800cd22 <_printf_float+0xb6>
 800cfda:	2301      	movs	r3, #1
 800cfdc:	4631      	mov	r1, r6
 800cfde:	4628      	mov	r0, r5
 800cfe0:	9206      	str	r2, [sp, #24]
 800cfe2:	47b8      	blx	r7
 800cfe4:	3001      	adds	r0, #1
 800cfe6:	f43f ae9c 	beq.w	800cd22 <_printf_float+0xb6>
 800cfea:	9a06      	ldr	r2, [sp, #24]
 800cfec:	f10b 0b01 	add.w	fp, fp, #1
 800cff0:	e7bb      	b.n	800cf6a <_printf_float+0x2fe>
 800cff2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cff6:	4631      	mov	r1, r6
 800cff8:	4628      	mov	r0, r5
 800cffa:	47b8      	blx	r7
 800cffc:	3001      	adds	r0, #1
 800cffe:	d1c0      	bne.n	800cf82 <_printf_float+0x316>
 800d000:	e68f      	b.n	800cd22 <_printf_float+0xb6>
 800d002:	9a06      	ldr	r2, [sp, #24]
 800d004:	464b      	mov	r3, r9
 800d006:	4442      	add	r2, r8
 800d008:	4631      	mov	r1, r6
 800d00a:	4628      	mov	r0, r5
 800d00c:	47b8      	blx	r7
 800d00e:	3001      	adds	r0, #1
 800d010:	d1c3      	bne.n	800cf9a <_printf_float+0x32e>
 800d012:	e686      	b.n	800cd22 <_printf_float+0xb6>
 800d014:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d018:	f1ba 0f01 	cmp.w	sl, #1
 800d01c:	dc01      	bgt.n	800d022 <_printf_float+0x3b6>
 800d01e:	07db      	lsls	r3, r3, #31
 800d020:	d536      	bpl.n	800d090 <_printf_float+0x424>
 800d022:	2301      	movs	r3, #1
 800d024:	4642      	mov	r2, r8
 800d026:	4631      	mov	r1, r6
 800d028:	4628      	mov	r0, r5
 800d02a:	47b8      	blx	r7
 800d02c:	3001      	adds	r0, #1
 800d02e:	f43f ae78 	beq.w	800cd22 <_printf_float+0xb6>
 800d032:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d036:	4631      	mov	r1, r6
 800d038:	4628      	mov	r0, r5
 800d03a:	47b8      	blx	r7
 800d03c:	3001      	adds	r0, #1
 800d03e:	f43f ae70 	beq.w	800cd22 <_printf_float+0xb6>
 800d042:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d046:	2200      	movs	r2, #0
 800d048:	2300      	movs	r3, #0
 800d04a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d04e:	f7f3 fd5b 	bl	8000b08 <__aeabi_dcmpeq>
 800d052:	b9c0      	cbnz	r0, 800d086 <_printf_float+0x41a>
 800d054:	4653      	mov	r3, sl
 800d056:	f108 0201 	add.w	r2, r8, #1
 800d05a:	4631      	mov	r1, r6
 800d05c:	4628      	mov	r0, r5
 800d05e:	47b8      	blx	r7
 800d060:	3001      	adds	r0, #1
 800d062:	d10c      	bne.n	800d07e <_printf_float+0x412>
 800d064:	e65d      	b.n	800cd22 <_printf_float+0xb6>
 800d066:	2301      	movs	r3, #1
 800d068:	465a      	mov	r2, fp
 800d06a:	4631      	mov	r1, r6
 800d06c:	4628      	mov	r0, r5
 800d06e:	47b8      	blx	r7
 800d070:	3001      	adds	r0, #1
 800d072:	f43f ae56 	beq.w	800cd22 <_printf_float+0xb6>
 800d076:	f108 0801 	add.w	r8, r8, #1
 800d07a:	45d0      	cmp	r8, sl
 800d07c:	dbf3      	blt.n	800d066 <_printf_float+0x3fa>
 800d07e:	464b      	mov	r3, r9
 800d080:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d084:	e6df      	b.n	800ce46 <_printf_float+0x1da>
 800d086:	f04f 0800 	mov.w	r8, #0
 800d08a:	f104 0b1a 	add.w	fp, r4, #26
 800d08e:	e7f4      	b.n	800d07a <_printf_float+0x40e>
 800d090:	2301      	movs	r3, #1
 800d092:	4642      	mov	r2, r8
 800d094:	e7e1      	b.n	800d05a <_printf_float+0x3ee>
 800d096:	2301      	movs	r3, #1
 800d098:	464a      	mov	r2, r9
 800d09a:	4631      	mov	r1, r6
 800d09c:	4628      	mov	r0, r5
 800d09e:	47b8      	blx	r7
 800d0a0:	3001      	adds	r0, #1
 800d0a2:	f43f ae3e 	beq.w	800cd22 <_printf_float+0xb6>
 800d0a6:	f108 0801 	add.w	r8, r8, #1
 800d0aa:	68e3      	ldr	r3, [r4, #12]
 800d0ac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d0ae:	1a5b      	subs	r3, r3, r1
 800d0b0:	4543      	cmp	r3, r8
 800d0b2:	dcf0      	bgt.n	800d096 <_printf_float+0x42a>
 800d0b4:	e6fc      	b.n	800ceb0 <_printf_float+0x244>
 800d0b6:	f04f 0800 	mov.w	r8, #0
 800d0ba:	f104 0919 	add.w	r9, r4, #25
 800d0be:	e7f4      	b.n	800d0aa <_printf_float+0x43e>

0800d0c0 <_printf_common>:
 800d0c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0c4:	4616      	mov	r6, r2
 800d0c6:	4698      	mov	r8, r3
 800d0c8:	688a      	ldr	r2, [r1, #8]
 800d0ca:	690b      	ldr	r3, [r1, #16]
 800d0cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d0d0:	4293      	cmp	r3, r2
 800d0d2:	bfb8      	it	lt
 800d0d4:	4613      	movlt	r3, r2
 800d0d6:	6033      	str	r3, [r6, #0]
 800d0d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d0dc:	4607      	mov	r7, r0
 800d0de:	460c      	mov	r4, r1
 800d0e0:	b10a      	cbz	r2, 800d0e6 <_printf_common+0x26>
 800d0e2:	3301      	adds	r3, #1
 800d0e4:	6033      	str	r3, [r6, #0]
 800d0e6:	6823      	ldr	r3, [r4, #0]
 800d0e8:	0699      	lsls	r1, r3, #26
 800d0ea:	bf42      	ittt	mi
 800d0ec:	6833      	ldrmi	r3, [r6, #0]
 800d0ee:	3302      	addmi	r3, #2
 800d0f0:	6033      	strmi	r3, [r6, #0]
 800d0f2:	6825      	ldr	r5, [r4, #0]
 800d0f4:	f015 0506 	ands.w	r5, r5, #6
 800d0f8:	d106      	bne.n	800d108 <_printf_common+0x48>
 800d0fa:	f104 0a19 	add.w	sl, r4, #25
 800d0fe:	68e3      	ldr	r3, [r4, #12]
 800d100:	6832      	ldr	r2, [r6, #0]
 800d102:	1a9b      	subs	r3, r3, r2
 800d104:	42ab      	cmp	r3, r5
 800d106:	dc26      	bgt.n	800d156 <_printf_common+0x96>
 800d108:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d10c:	6822      	ldr	r2, [r4, #0]
 800d10e:	3b00      	subs	r3, #0
 800d110:	bf18      	it	ne
 800d112:	2301      	movne	r3, #1
 800d114:	0692      	lsls	r2, r2, #26
 800d116:	d42b      	bmi.n	800d170 <_printf_common+0xb0>
 800d118:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d11c:	4641      	mov	r1, r8
 800d11e:	4638      	mov	r0, r7
 800d120:	47c8      	blx	r9
 800d122:	3001      	adds	r0, #1
 800d124:	d01e      	beq.n	800d164 <_printf_common+0xa4>
 800d126:	6823      	ldr	r3, [r4, #0]
 800d128:	6922      	ldr	r2, [r4, #16]
 800d12a:	f003 0306 	and.w	r3, r3, #6
 800d12e:	2b04      	cmp	r3, #4
 800d130:	bf02      	ittt	eq
 800d132:	68e5      	ldreq	r5, [r4, #12]
 800d134:	6833      	ldreq	r3, [r6, #0]
 800d136:	1aed      	subeq	r5, r5, r3
 800d138:	68a3      	ldr	r3, [r4, #8]
 800d13a:	bf0c      	ite	eq
 800d13c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d140:	2500      	movne	r5, #0
 800d142:	4293      	cmp	r3, r2
 800d144:	bfc4      	itt	gt
 800d146:	1a9b      	subgt	r3, r3, r2
 800d148:	18ed      	addgt	r5, r5, r3
 800d14a:	2600      	movs	r6, #0
 800d14c:	341a      	adds	r4, #26
 800d14e:	42b5      	cmp	r5, r6
 800d150:	d11a      	bne.n	800d188 <_printf_common+0xc8>
 800d152:	2000      	movs	r0, #0
 800d154:	e008      	b.n	800d168 <_printf_common+0xa8>
 800d156:	2301      	movs	r3, #1
 800d158:	4652      	mov	r2, sl
 800d15a:	4641      	mov	r1, r8
 800d15c:	4638      	mov	r0, r7
 800d15e:	47c8      	blx	r9
 800d160:	3001      	adds	r0, #1
 800d162:	d103      	bne.n	800d16c <_printf_common+0xac>
 800d164:	f04f 30ff 	mov.w	r0, #4294967295
 800d168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d16c:	3501      	adds	r5, #1
 800d16e:	e7c6      	b.n	800d0fe <_printf_common+0x3e>
 800d170:	18e1      	adds	r1, r4, r3
 800d172:	1c5a      	adds	r2, r3, #1
 800d174:	2030      	movs	r0, #48	@ 0x30
 800d176:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d17a:	4422      	add	r2, r4
 800d17c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d180:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d184:	3302      	adds	r3, #2
 800d186:	e7c7      	b.n	800d118 <_printf_common+0x58>
 800d188:	2301      	movs	r3, #1
 800d18a:	4622      	mov	r2, r4
 800d18c:	4641      	mov	r1, r8
 800d18e:	4638      	mov	r0, r7
 800d190:	47c8      	blx	r9
 800d192:	3001      	adds	r0, #1
 800d194:	d0e6      	beq.n	800d164 <_printf_common+0xa4>
 800d196:	3601      	adds	r6, #1
 800d198:	e7d9      	b.n	800d14e <_printf_common+0x8e>
	...

0800d19c <_printf_i>:
 800d19c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d1a0:	7e0f      	ldrb	r7, [r1, #24]
 800d1a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d1a4:	2f78      	cmp	r7, #120	@ 0x78
 800d1a6:	4691      	mov	r9, r2
 800d1a8:	4680      	mov	r8, r0
 800d1aa:	460c      	mov	r4, r1
 800d1ac:	469a      	mov	sl, r3
 800d1ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d1b2:	d807      	bhi.n	800d1c4 <_printf_i+0x28>
 800d1b4:	2f62      	cmp	r7, #98	@ 0x62
 800d1b6:	d80a      	bhi.n	800d1ce <_printf_i+0x32>
 800d1b8:	2f00      	cmp	r7, #0
 800d1ba:	f000 80d1 	beq.w	800d360 <_printf_i+0x1c4>
 800d1be:	2f58      	cmp	r7, #88	@ 0x58
 800d1c0:	f000 80b8 	beq.w	800d334 <_printf_i+0x198>
 800d1c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d1c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d1cc:	e03a      	b.n	800d244 <_printf_i+0xa8>
 800d1ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d1d2:	2b15      	cmp	r3, #21
 800d1d4:	d8f6      	bhi.n	800d1c4 <_printf_i+0x28>
 800d1d6:	a101      	add	r1, pc, #4	@ (adr r1, 800d1dc <_printf_i+0x40>)
 800d1d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d1dc:	0800d235 	.word	0x0800d235
 800d1e0:	0800d249 	.word	0x0800d249
 800d1e4:	0800d1c5 	.word	0x0800d1c5
 800d1e8:	0800d1c5 	.word	0x0800d1c5
 800d1ec:	0800d1c5 	.word	0x0800d1c5
 800d1f0:	0800d1c5 	.word	0x0800d1c5
 800d1f4:	0800d249 	.word	0x0800d249
 800d1f8:	0800d1c5 	.word	0x0800d1c5
 800d1fc:	0800d1c5 	.word	0x0800d1c5
 800d200:	0800d1c5 	.word	0x0800d1c5
 800d204:	0800d1c5 	.word	0x0800d1c5
 800d208:	0800d347 	.word	0x0800d347
 800d20c:	0800d273 	.word	0x0800d273
 800d210:	0800d301 	.word	0x0800d301
 800d214:	0800d1c5 	.word	0x0800d1c5
 800d218:	0800d1c5 	.word	0x0800d1c5
 800d21c:	0800d369 	.word	0x0800d369
 800d220:	0800d1c5 	.word	0x0800d1c5
 800d224:	0800d273 	.word	0x0800d273
 800d228:	0800d1c5 	.word	0x0800d1c5
 800d22c:	0800d1c5 	.word	0x0800d1c5
 800d230:	0800d309 	.word	0x0800d309
 800d234:	6833      	ldr	r3, [r6, #0]
 800d236:	1d1a      	adds	r2, r3, #4
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	6032      	str	r2, [r6, #0]
 800d23c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d240:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d244:	2301      	movs	r3, #1
 800d246:	e09c      	b.n	800d382 <_printf_i+0x1e6>
 800d248:	6833      	ldr	r3, [r6, #0]
 800d24a:	6820      	ldr	r0, [r4, #0]
 800d24c:	1d19      	adds	r1, r3, #4
 800d24e:	6031      	str	r1, [r6, #0]
 800d250:	0606      	lsls	r6, r0, #24
 800d252:	d501      	bpl.n	800d258 <_printf_i+0xbc>
 800d254:	681d      	ldr	r5, [r3, #0]
 800d256:	e003      	b.n	800d260 <_printf_i+0xc4>
 800d258:	0645      	lsls	r5, r0, #25
 800d25a:	d5fb      	bpl.n	800d254 <_printf_i+0xb8>
 800d25c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d260:	2d00      	cmp	r5, #0
 800d262:	da03      	bge.n	800d26c <_printf_i+0xd0>
 800d264:	232d      	movs	r3, #45	@ 0x2d
 800d266:	426d      	negs	r5, r5
 800d268:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d26c:	4858      	ldr	r0, [pc, #352]	@ (800d3d0 <_printf_i+0x234>)
 800d26e:	230a      	movs	r3, #10
 800d270:	e011      	b.n	800d296 <_printf_i+0xfa>
 800d272:	6821      	ldr	r1, [r4, #0]
 800d274:	6833      	ldr	r3, [r6, #0]
 800d276:	0608      	lsls	r0, r1, #24
 800d278:	f853 5b04 	ldr.w	r5, [r3], #4
 800d27c:	d402      	bmi.n	800d284 <_printf_i+0xe8>
 800d27e:	0649      	lsls	r1, r1, #25
 800d280:	bf48      	it	mi
 800d282:	b2ad      	uxthmi	r5, r5
 800d284:	2f6f      	cmp	r7, #111	@ 0x6f
 800d286:	4852      	ldr	r0, [pc, #328]	@ (800d3d0 <_printf_i+0x234>)
 800d288:	6033      	str	r3, [r6, #0]
 800d28a:	bf14      	ite	ne
 800d28c:	230a      	movne	r3, #10
 800d28e:	2308      	moveq	r3, #8
 800d290:	2100      	movs	r1, #0
 800d292:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d296:	6866      	ldr	r6, [r4, #4]
 800d298:	60a6      	str	r6, [r4, #8]
 800d29a:	2e00      	cmp	r6, #0
 800d29c:	db05      	blt.n	800d2aa <_printf_i+0x10e>
 800d29e:	6821      	ldr	r1, [r4, #0]
 800d2a0:	432e      	orrs	r6, r5
 800d2a2:	f021 0104 	bic.w	r1, r1, #4
 800d2a6:	6021      	str	r1, [r4, #0]
 800d2a8:	d04b      	beq.n	800d342 <_printf_i+0x1a6>
 800d2aa:	4616      	mov	r6, r2
 800d2ac:	fbb5 f1f3 	udiv	r1, r5, r3
 800d2b0:	fb03 5711 	mls	r7, r3, r1, r5
 800d2b4:	5dc7      	ldrb	r7, [r0, r7]
 800d2b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d2ba:	462f      	mov	r7, r5
 800d2bc:	42bb      	cmp	r3, r7
 800d2be:	460d      	mov	r5, r1
 800d2c0:	d9f4      	bls.n	800d2ac <_printf_i+0x110>
 800d2c2:	2b08      	cmp	r3, #8
 800d2c4:	d10b      	bne.n	800d2de <_printf_i+0x142>
 800d2c6:	6823      	ldr	r3, [r4, #0]
 800d2c8:	07df      	lsls	r7, r3, #31
 800d2ca:	d508      	bpl.n	800d2de <_printf_i+0x142>
 800d2cc:	6923      	ldr	r3, [r4, #16]
 800d2ce:	6861      	ldr	r1, [r4, #4]
 800d2d0:	4299      	cmp	r1, r3
 800d2d2:	bfde      	ittt	le
 800d2d4:	2330      	movle	r3, #48	@ 0x30
 800d2d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d2da:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d2de:	1b92      	subs	r2, r2, r6
 800d2e0:	6122      	str	r2, [r4, #16]
 800d2e2:	f8cd a000 	str.w	sl, [sp]
 800d2e6:	464b      	mov	r3, r9
 800d2e8:	aa03      	add	r2, sp, #12
 800d2ea:	4621      	mov	r1, r4
 800d2ec:	4640      	mov	r0, r8
 800d2ee:	f7ff fee7 	bl	800d0c0 <_printf_common>
 800d2f2:	3001      	adds	r0, #1
 800d2f4:	d14a      	bne.n	800d38c <_printf_i+0x1f0>
 800d2f6:	f04f 30ff 	mov.w	r0, #4294967295
 800d2fa:	b004      	add	sp, #16
 800d2fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d300:	6823      	ldr	r3, [r4, #0]
 800d302:	f043 0320 	orr.w	r3, r3, #32
 800d306:	6023      	str	r3, [r4, #0]
 800d308:	4832      	ldr	r0, [pc, #200]	@ (800d3d4 <_printf_i+0x238>)
 800d30a:	2778      	movs	r7, #120	@ 0x78
 800d30c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d310:	6823      	ldr	r3, [r4, #0]
 800d312:	6831      	ldr	r1, [r6, #0]
 800d314:	061f      	lsls	r7, r3, #24
 800d316:	f851 5b04 	ldr.w	r5, [r1], #4
 800d31a:	d402      	bmi.n	800d322 <_printf_i+0x186>
 800d31c:	065f      	lsls	r7, r3, #25
 800d31e:	bf48      	it	mi
 800d320:	b2ad      	uxthmi	r5, r5
 800d322:	6031      	str	r1, [r6, #0]
 800d324:	07d9      	lsls	r1, r3, #31
 800d326:	bf44      	itt	mi
 800d328:	f043 0320 	orrmi.w	r3, r3, #32
 800d32c:	6023      	strmi	r3, [r4, #0]
 800d32e:	b11d      	cbz	r5, 800d338 <_printf_i+0x19c>
 800d330:	2310      	movs	r3, #16
 800d332:	e7ad      	b.n	800d290 <_printf_i+0xf4>
 800d334:	4826      	ldr	r0, [pc, #152]	@ (800d3d0 <_printf_i+0x234>)
 800d336:	e7e9      	b.n	800d30c <_printf_i+0x170>
 800d338:	6823      	ldr	r3, [r4, #0]
 800d33a:	f023 0320 	bic.w	r3, r3, #32
 800d33e:	6023      	str	r3, [r4, #0]
 800d340:	e7f6      	b.n	800d330 <_printf_i+0x194>
 800d342:	4616      	mov	r6, r2
 800d344:	e7bd      	b.n	800d2c2 <_printf_i+0x126>
 800d346:	6833      	ldr	r3, [r6, #0]
 800d348:	6825      	ldr	r5, [r4, #0]
 800d34a:	6961      	ldr	r1, [r4, #20]
 800d34c:	1d18      	adds	r0, r3, #4
 800d34e:	6030      	str	r0, [r6, #0]
 800d350:	062e      	lsls	r6, r5, #24
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	d501      	bpl.n	800d35a <_printf_i+0x1be>
 800d356:	6019      	str	r1, [r3, #0]
 800d358:	e002      	b.n	800d360 <_printf_i+0x1c4>
 800d35a:	0668      	lsls	r0, r5, #25
 800d35c:	d5fb      	bpl.n	800d356 <_printf_i+0x1ba>
 800d35e:	8019      	strh	r1, [r3, #0]
 800d360:	2300      	movs	r3, #0
 800d362:	6123      	str	r3, [r4, #16]
 800d364:	4616      	mov	r6, r2
 800d366:	e7bc      	b.n	800d2e2 <_printf_i+0x146>
 800d368:	6833      	ldr	r3, [r6, #0]
 800d36a:	1d1a      	adds	r2, r3, #4
 800d36c:	6032      	str	r2, [r6, #0]
 800d36e:	681e      	ldr	r6, [r3, #0]
 800d370:	6862      	ldr	r2, [r4, #4]
 800d372:	2100      	movs	r1, #0
 800d374:	4630      	mov	r0, r6
 800d376:	f7f2 ff4b 	bl	8000210 <memchr>
 800d37a:	b108      	cbz	r0, 800d380 <_printf_i+0x1e4>
 800d37c:	1b80      	subs	r0, r0, r6
 800d37e:	6060      	str	r0, [r4, #4]
 800d380:	6863      	ldr	r3, [r4, #4]
 800d382:	6123      	str	r3, [r4, #16]
 800d384:	2300      	movs	r3, #0
 800d386:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d38a:	e7aa      	b.n	800d2e2 <_printf_i+0x146>
 800d38c:	6923      	ldr	r3, [r4, #16]
 800d38e:	4632      	mov	r2, r6
 800d390:	4649      	mov	r1, r9
 800d392:	4640      	mov	r0, r8
 800d394:	47d0      	blx	sl
 800d396:	3001      	adds	r0, #1
 800d398:	d0ad      	beq.n	800d2f6 <_printf_i+0x15a>
 800d39a:	6823      	ldr	r3, [r4, #0]
 800d39c:	079b      	lsls	r3, r3, #30
 800d39e:	d413      	bmi.n	800d3c8 <_printf_i+0x22c>
 800d3a0:	68e0      	ldr	r0, [r4, #12]
 800d3a2:	9b03      	ldr	r3, [sp, #12]
 800d3a4:	4298      	cmp	r0, r3
 800d3a6:	bfb8      	it	lt
 800d3a8:	4618      	movlt	r0, r3
 800d3aa:	e7a6      	b.n	800d2fa <_printf_i+0x15e>
 800d3ac:	2301      	movs	r3, #1
 800d3ae:	4632      	mov	r2, r6
 800d3b0:	4649      	mov	r1, r9
 800d3b2:	4640      	mov	r0, r8
 800d3b4:	47d0      	blx	sl
 800d3b6:	3001      	adds	r0, #1
 800d3b8:	d09d      	beq.n	800d2f6 <_printf_i+0x15a>
 800d3ba:	3501      	adds	r5, #1
 800d3bc:	68e3      	ldr	r3, [r4, #12]
 800d3be:	9903      	ldr	r1, [sp, #12]
 800d3c0:	1a5b      	subs	r3, r3, r1
 800d3c2:	42ab      	cmp	r3, r5
 800d3c4:	dcf2      	bgt.n	800d3ac <_printf_i+0x210>
 800d3c6:	e7eb      	b.n	800d3a0 <_printf_i+0x204>
 800d3c8:	2500      	movs	r5, #0
 800d3ca:	f104 0619 	add.w	r6, r4, #25
 800d3ce:	e7f5      	b.n	800d3bc <_printf_i+0x220>
 800d3d0:	08010fe0 	.word	0x08010fe0
 800d3d4:	08010ff1 	.word	0x08010ff1

0800d3d8 <_scanf_float>:
 800d3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3dc:	b087      	sub	sp, #28
 800d3de:	4691      	mov	r9, r2
 800d3e0:	9303      	str	r3, [sp, #12]
 800d3e2:	688b      	ldr	r3, [r1, #8]
 800d3e4:	1e5a      	subs	r2, r3, #1
 800d3e6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800d3ea:	bf81      	itttt	hi
 800d3ec:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800d3f0:	eb03 0b05 	addhi.w	fp, r3, r5
 800d3f4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800d3f8:	608b      	strhi	r3, [r1, #8]
 800d3fa:	680b      	ldr	r3, [r1, #0]
 800d3fc:	460a      	mov	r2, r1
 800d3fe:	f04f 0500 	mov.w	r5, #0
 800d402:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800d406:	f842 3b1c 	str.w	r3, [r2], #28
 800d40a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d40e:	4680      	mov	r8, r0
 800d410:	460c      	mov	r4, r1
 800d412:	bf98      	it	ls
 800d414:	f04f 0b00 	movls.w	fp, #0
 800d418:	9201      	str	r2, [sp, #4]
 800d41a:	4616      	mov	r6, r2
 800d41c:	46aa      	mov	sl, r5
 800d41e:	462f      	mov	r7, r5
 800d420:	9502      	str	r5, [sp, #8]
 800d422:	68a2      	ldr	r2, [r4, #8]
 800d424:	b15a      	cbz	r2, 800d43e <_scanf_float+0x66>
 800d426:	f8d9 3000 	ldr.w	r3, [r9]
 800d42a:	781b      	ldrb	r3, [r3, #0]
 800d42c:	2b4e      	cmp	r3, #78	@ 0x4e
 800d42e:	d863      	bhi.n	800d4f8 <_scanf_float+0x120>
 800d430:	2b40      	cmp	r3, #64	@ 0x40
 800d432:	d83b      	bhi.n	800d4ac <_scanf_float+0xd4>
 800d434:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800d438:	b2c8      	uxtb	r0, r1
 800d43a:	280e      	cmp	r0, #14
 800d43c:	d939      	bls.n	800d4b2 <_scanf_float+0xda>
 800d43e:	b11f      	cbz	r7, 800d448 <_scanf_float+0x70>
 800d440:	6823      	ldr	r3, [r4, #0]
 800d442:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d446:	6023      	str	r3, [r4, #0]
 800d448:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d44c:	f1ba 0f01 	cmp.w	sl, #1
 800d450:	f200 8114 	bhi.w	800d67c <_scanf_float+0x2a4>
 800d454:	9b01      	ldr	r3, [sp, #4]
 800d456:	429e      	cmp	r6, r3
 800d458:	f200 8105 	bhi.w	800d666 <_scanf_float+0x28e>
 800d45c:	2001      	movs	r0, #1
 800d45e:	b007      	add	sp, #28
 800d460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d464:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800d468:	2a0d      	cmp	r2, #13
 800d46a:	d8e8      	bhi.n	800d43e <_scanf_float+0x66>
 800d46c:	a101      	add	r1, pc, #4	@ (adr r1, 800d474 <_scanf_float+0x9c>)
 800d46e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d472:	bf00      	nop
 800d474:	0800d5bd 	.word	0x0800d5bd
 800d478:	0800d43f 	.word	0x0800d43f
 800d47c:	0800d43f 	.word	0x0800d43f
 800d480:	0800d43f 	.word	0x0800d43f
 800d484:	0800d619 	.word	0x0800d619
 800d488:	0800d5f3 	.word	0x0800d5f3
 800d48c:	0800d43f 	.word	0x0800d43f
 800d490:	0800d43f 	.word	0x0800d43f
 800d494:	0800d5cb 	.word	0x0800d5cb
 800d498:	0800d43f 	.word	0x0800d43f
 800d49c:	0800d43f 	.word	0x0800d43f
 800d4a0:	0800d43f 	.word	0x0800d43f
 800d4a4:	0800d43f 	.word	0x0800d43f
 800d4a8:	0800d587 	.word	0x0800d587
 800d4ac:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800d4b0:	e7da      	b.n	800d468 <_scanf_float+0x90>
 800d4b2:	290e      	cmp	r1, #14
 800d4b4:	d8c3      	bhi.n	800d43e <_scanf_float+0x66>
 800d4b6:	a001      	add	r0, pc, #4	@ (adr r0, 800d4bc <_scanf_float+0xe4>)
 800d4b8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d4bc:	0800d577 	.word	0x0800d577
 800d4c0:	0800d43f 	.word	0x0800d43f
 800d4c4:	0800d577 	.word	0x0800d577
 800d4c8:	0800d607 	.word	0x0800d607
 800d4cc:	0800d43f 	.word	0x0800d43f
 800d4d0:	0800d519 	.word	0x0800d519
 800d4d4:	0800d55d 	.word	0x0800d55d
 800d4d8:	0800d55d 	.word	0x0800d55d
 800d4dc:	0800d55d 	.word	0x0800d55d
 800d4e0:	0800d55d 	.word	0x0800d55d
 800d4e4:	0800d55d 	.word	0x0800d55d
 800d4e8:	0800d55d 	.word	0x0800d55d
 800d4ec:	0800d55d 	.word	0x0800d55d
 800d4f0:	0800d55d 	.word	0x0800d55d
 800d4f4:	0800d55d 	.word	0x0800d55d
 800d4f8:	2b6e      	cmp	r3, #110	@ 0x6e
 800d4fa:	d809      	bhi.n	800d510 <_scanf_float+0x138>
 800d4fc:	2b60      	cmp	r3, #96	@ 0x60
 800d4fe:	d8b1      	bhi.n	800d464 <_scanf_float+0x8c>
 800d500:	2b54      	cmp	r3, #84	@ 0x54
 800d502:	d07b      	beq.n	800d5fc <_scanf_float+0x224>
 800d504:	2b59      	cmp	r3, #89	@ 0x59
 800d506:	d19a      	bne.n	800d43e <_scanf_float+0x66>
 800d508:	2d07      	cmp	r5, #7
 800d50a:	d198      	bne.n	800d43e <_scanf_float+0x66>
 800d50c:	2508      	movs	r5, #8
 800d50e:	e02f      	b.n	800d570 <_scanf_float+0x198>
 800d510:	2b74      	cmp	r3, #116	@ 0x74
 800d512:	d073      	beq.n	800d5fc <_scanf_float+0x224>
 800d514:	2b79      	cmp	r3, #121	@ 0x79
 800d516:	e7f6      	b.n	800d506 <_scanf_float+0x12e>
 800d518:	6821      	ldr	r1, [r4, #0]
 800d51a:	05c8      	lsls	r0, r1, #23
 800d51c:	d51e      	bpl.n	800d55c <_scanf_float+0x184>
 800d51e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800d522:	6021      	str	r1, [r4, #0]
 800d524:	3701      	adds	r7, #1
 800d526:	f1bb 0f00 	cmp.w	fp, #0
 800d52a:	d003      	beq.n	800d534 <_scanf_float+0x15c>
 800d52c:	3201      	adds	r2, #1
 800d52e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d532:	60a2      	str	r2, [r4, #8]
 800d534:	68a3      	ldr	r3, [r4, #8]
 800d536:	3b01      	subs	r3, #1
 800d538:	60a3      	str	r3, [r4, #8]
 800d53a:	6923      	ldr	r3, [r4, #16]
 800d53c:	3301      	adds	r3, #1
 800d53e:	6123      	str	r3, [r4, #16]
 800d540:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800d544:	3b01      	subs	r3, #1
 800d546:	2b00      	cmp	r3, #0
 800d548:	f8c9 3004 	str.w	r3, [r9, #4]
 800d54c:	f340 8082 	ble.w	800d654 <_scanf_float+0x27c>
 800d550:	f8d9 3000 	ldr.w	r3, [r9]
 800d554:	3301      	adds	r3, #1
 800d556:	f8c9 3000 	str.w	r3, [r9]
 800d55a:	e762      	b.n	800d422 <_scanf_float+0x4a>
 800d55c:	eb1a 0105 	adds.w	r1, sl, r5
 800d560:	f47f af6d 	bne.w	800d43e <_scanf_float+0x66>
 800d564:	6822      	ldr	r2, [r4, #0]
 800d566:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800d56a:	6022      	str	r2, [r4, #0]
 800d56c:	460d      	mov	r5, r1
 800d56e:	468a      	mov	sl, r1
 800d570:	f806 3b01 	strb.w	r3, [r6], #1
 800d574:	e7de      	b.n	800d534 <_scanf_float+0x15c>
 800d576:	6822      	ldr	r2, [r4, #0]
 800d578:	0610      	lsls	r0, r2, #24
 800d57a:	f57f af60 	bpl.w	800d43e <_scanf_float+0x66>
 800d57e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d582:	6022      	str	r2, [r4, #0]
 800d584:	e7f4      	b.n	800d570 <_scanf_float+0x198>
 800d586:	f1ba 0f00 	cmp.w	sl, #0
 800d58a:	d10c      	bne.n	800d5a6 <_scanf_float+0x1ce>
 800d58c:	b977      	cbnz	r7, 800d5ac <_scanf_float+0x1d4>
 800d58e:	6822      	ldr	r2, [r4, #0]
 800d590:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800d594:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800d598:	d108      	bne.n	800d5ac <_scanf_float+0x1d4>
 800d59a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d59e:	6022      	str	r2, [r4, #0]
 800d5a0:	f04f 0a01 	mov.w	sl, #1
 800d5a4:	e7e4      	b.n	800d570 <_scanf_float+0x198>
 800d5a6:	f1ba 0f02 	cmp.w	sl, #2
 800d5aa:	d050      	beq.n	800d64e <_scanf_float+0x276>
 800d5ac:	2d01      	cmp	r5, #1
 800d5ae:	d002      	beq.n	800d5b6 <_scanf_float+0x1de>
 800d5b0:	2d04      	cmp	r5, #4
 800d5b2:	f47f af44 	bne.w	800d43e <_scanf_float+0x66>
 800d5b6:	3501      	adds	r5, #1
 800d5b8:	b2ed      	uxtb	r5, r5
 800d5ba:	e7d9      	b.n	800d570 <_scanf_float+0x198>
 800d5bc:	f1ba 0f01 	cmp.w	sl, #1
 800d5c0:	f47f af3d 	bne.w	800d43e <_scanf_float+0x66>
 800d5c4:	f04f 0a02 	mov.w	sl, #2
 800d5c8:	e7d2      	b.n	800d570 <_scanf_float+0x198>
 800d5ca:	b975      	cbnz	r5, 800d5ea <_scanf_float+0x212>
 800d5cc:	2f00      	cmp	r7, #0
 800d5ce:	f47f af37 	bne.w	800d440 <_scanf_float+0x68>
 800d5d2:	6822      	ldr	r2, [r4, #0]
 800d5d4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800d5d8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800d5dc:	f040 8103 	bne.w	800d7e6 <_scanf_float+0x40e>
 800d5e0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d5e4:	6022      	str	r2, [r4, #0]
 800d5e6:	2501      	movs	r5, #1
 800d5e8:	e7c2      	b.n	800d570 <_scanf_float+0x198>
 800d5ea:	2d03      	cmp	r5, #3
 800d5ec:	d0e3      	beq.n	800d5b6 <_scanf_float+0x1de>
 800d5ee:	2d05      	cmp	r5, #5
 800d5f0:	e7df      	b.n	800d5b2 <_scanf_float+0x1da>
 800d5f2:	2d02      	cmp	r5, #2
 800d5f4:	f47f af23 	bne.w	800d43e <_scanf_float+0x66>
 800d5f8:	2503      	movs	r5, #3
 800d5fa:	e7b9      	b.n	800d570 <_scanf_float+0x198>
 800d5fc:	2d06      	cmp	r5, #6
 800d5fe:	f47f af1e 	bne.w	800d43e <_scanf_float+0x66>
 800d602:	2507      	movs	r5, #7
 800d604:	e7b4      	b.n	800d570 <_scanf_float+0x198>
 800d606:	6822      	ldr	r2, [r4, #0]
 800d608:	0591      	lsls	r1, r2, #22
 800d60a:	f57f af18 	bpl.w	800d43e <_scanf_float+0x66>
 800d60e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800d612:	6022      	str	r2, [r4, #0]
 800d614:	9702      	str	r7, [sp, #8]
 800d616:	e7ab      	b.n	800d570 <_scanf_float+0x198>
 800d618:	6822      	ldr	r2, [r4, #0]
 800d61a:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800d61e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800d622:	d005      	beq.n	800d630 <_scanf_float+0x258>
 800d624:	0550      	lsls	r0, r2, #21
 800d626:	f57f af0a 	bpl.w	800d43e <_scanf_float+0x66>
 800d62a:	2f00      	cmp	r7, #0
 800d62c:	f000 80db 	beq.w	800d7e6 <_scanf_float+0x40e>
 800d630:	0591      	lsls	r1, r2, #22
 800d632:	bf58      	it	pl
 800d634:	9902      	ldrpl	r1, [sp, #8]
 800d636:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d63a:	bf58      	it	pl
 800d63c:	1a79      	subpl	r1, r7, r1
 800d63e:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800d642:	bf58      	it	pl
 800d644:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800d648:	6022      	str	r2, [r4, #0]
 800d64a:	2700      	movs	r7, #0
 800d64c:	e790      	b.n	800d570 <_scanf_float+0x198>
 800d64e:	f04f 0a03 	mov.w	sl, #3
 800d652:	e78d      	b.n	800d570 <_scanf_float+0x198>
 800d654:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800d658:	4649      	mov	r1, r9
 800d65a:	4640      	mov	r0, r8
 800d65c:	4798      	blx	r3
 800d65e:	2800      	cmp	r0, #0
 800d660:	f43f aedf 	beq.w	800d422 <_scanf_float+0x4a>
 800d664:	e6eb      	b.n	800d43e <_scanf_float+0x66>
 800d666:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d66a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d66e:	464a      	mov	r2, r9
 800d670:	4640      	mov	r0, r8
 800d672:	4798      	blx	r3
 800d674:	6923      	ldr	r3, [r4, #16]
 800d676:	3b01      	subs	r3, #1
 800d678:	6123      	str	r3, [r4, #16]
 800d67a:	e6eb      	b.n	800d454 <_scanf_float+0x7c>
 800d67c:	1e6b      	subs	r3, r5, #1
 800d67e:	2b06      	cmp	r3, #6
 800d680:	d824      	bhi.n	800d6cc <_scanf_float+0x2f4>
 800d682:	2d02      	cmp	r5, #2
 800d684:	d836      	bhi.n	800d6f4 <_scanf_float+0x31c>
 800d686:	9b01      	ldr	r3, [sp, #4]
 800d688:	429e      	cmp	r6, r3
 800d68a:	f67f aee7 	bls.w	800d45c <_scanf_float+0x84>
 800d68e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d692:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d696:	464a      	mov	r2, r9
 800d698:	4640      	mov	r0, r8
 800d69a:	4798      	blx	r3
 800d69c:	6923      	ldr	r3, [r4, #16]
 800d69e:	3b01      	subs	r3, #1
 800d6a0:	6123      	str	r3, [r4, #16]
 800d6a2:	e7f0      	b.n	800d686 <_scanf_float+0x2ae>
 800d6a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d6a8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800d6ac:	464a      	mov	r2, r9
 800d6ae:	4640      	mov	r0, r8
 800d6b0:	4798      	blx	r3
 800d6b2:	6923      	ldr	r3, [r4, #16]
 800d6b4:	3b01      	subs	r3, #1
 800d6b6:	6123      	str	r3, [r4, #16]
 800d6b8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d6bc:	fa5f fa8a 	uxtb.w	sl, sl
 800d6c0:	f1ba 0f02 	cmp.w	sl, #2
 800d6c4:	d1ee      	bne.n	800d6a4 <_scanf_float+0x2cc>
 800d6c6:	3d03      	subs	r5, #3
 800d6c8:	b2ed      	uxtb	r5, r5
 800d6ca:	1b76      	subs	r6, r6, r5
 800d6cc:	6823      	ldr	r3, [r4, #0]
 800d6ce:	05da      	lsls	r2, r3, #23
 800d6d0:	d530      	bpl.n	800d734 <_scanf_float+0x35c>
 800d6d2:	055b      	lsls	r3, r3, #21
 800d6d4:	d511      	bpl.n	800d6fa <_scanf_float+0x322>
 800d6d6:	9b01      	ldr	r3, [sp, #4]
 800d6d8:	429e      	cmp	r6, r3
 800d6da:	f67f aebf 	bls.w	800d45c <_scanf_float+0x84>
 800d6de:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d6e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d6e6:	464a      	mov	r2, r9
 800d6e8:	4640      	mov	r0, r8
 800d6ea:	4798      	blx	r3
 800d6ec:	6923      	ldr	r3, [r4, #16]
 800d6ee:	3b01      	subs	r3, #1
 800d6f0:	6123      	str	r3, [r4, #16]
 800d6f2:	e7f0      	b.n	800d6d6 <_scanf_float+0x2fe>
 800d6f4:	46aa      	mov	sl, r5
 800d6f6:	46b3      	mov	fp, r6
 800d6f8:	e7de      	b.n	800d6b8 <_scanf_float+0x2e0>
 800d6fa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d6fe:	6923      	ldr	r3, [r4, #16]
 800d700:	2965      	cmp	r1, #101	@ 0x65
 800d702:	f103 33ff 	add.w	r3, r3, #4294967295
 800d706:	f106 35ff 	add.w	r5, r6, #4294967295
 800d70a:	6123      	str	r3, [r4, #16]
 800d70c:	d00c      	beq.n	800d728 <_scanf_float+0x350>
 800d70e:	2945      	cmp	r1, #69	@ 0x45
 800d710:	d00a      	beq.n	800d728 <_scanf_float+0x350>
 800d712:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d716:	464a      	mov	r2, r9
 800d718:	4640      	mov	r0, r8
 800d71a:	4798      	blx	r3
 800d71c:	6923      	ldr	r3, [r4, #16]
 800d71e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800d722:	3b01      	subs	r3, #1
 800d724:	1eb5      	subs	r5, r6, #2
 800d726:	6123      	str	r3, [r4, #16]
 800d728:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d72c:	464a      	mov	r2, r9
 800d72e:	4640      	mov	r0, r8
 800d730:	4798      	blx	r3
 800d732:	462e      	mov	r6, r5
 800d734:	6822      	ldr	r2, [r4, #0]
 800d736:	f012 0210 	ands.w	r2, r2, #16
 800d73a:	d001      	beq.n	800d740 <_scanf_float+0x368>
 800d73c:	2000      	movs	r0, #0
 800d73e:	e68e      	b.n	800d45e <_scanf_float+0x86>
 800d740:	7032      	strb	r2, [r6, #0]
 800d742:	6823      	ldr	r3, [r4, #0]
 800d744:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800d748:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d74c:	d125      	bne.n	800d79a <_scanf_float+0x3c2>
 800d74e:	9b02      	ldr	r3, [sp, #8]
 800d750:	429f      	cmp	r7, r3
 800d752:	d00a      	beq.n	800d76a <_scanf_float+0x392>
 800d754:	1bda      	subs	r2, r3, r7
 800d756:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800d75a:	429e      	cmp	r6, r3
 800d75c:	bf28      	it	cs
 800d75e:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800d762:	4922      	ldr	r1, [pc, #136]	@ (800d7ec <_scanf_float+0x414>)
 800d764:	4630      	mov	r0, r6
 800d766:	f000 fa35 	bl	800dbd4 <siprintf>
 800d76a:	9901      	ldr	r1, [sp, #4]
 800d76c:	2200      	movs	r2, #0
 800d76e:	4640      	mov	r0, r8
 800d770:	f7ff f9d6 	bl	800cb20 <_strtod_r>
 800d774:	9b03      	ldr	r3, [sp, #12]
 800d776:	6821      	ldr	r1, [r4, #0]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	f011 0f02 	tst.w	r1, #2
 800d77e:	ec57 6b10 	vmov	r6, r7, d0
 800d782:	f103 0204 	add.w	r2, r3, #4
 800d786:	d015      	beq.n	800d7b4 <_scanf_float+0x3dc>
 800d788:	9903      	ldr	r1, [sp, #12]
 800d78a:	600a      	str	r2, [r1, #0]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	e9c3 6700 	strd	r6, r7, [r3]
 800d792:	68e3      	ldr	r3, [r4, #12]
 800d794:	3301      	adds	r3, #1
 800d796:	60e3      	str	r3, [r4, #12]
 800d798:	e7d0      	b.n	800d73c <_scanf_float+0x364>
 800d79a:	9b04      	ldr	r3, [sp, #16]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d0e4      	beq.n	800d76a <_scanf_float+0x392>
 800d7a0:	9905      	ldr	r1, [sp, #20]
 800d7a2:	230a      	movs	r3, #10
 800d7a4:	3101      	adds	r1, #1
 800d7a6:	4640      	mov	r0, r8
 800d7a8:	f002 fb9a 	bl	800fee0 <_strtol_r>
 800d7ac:	9b04      	ldr	r3, [sp, #16]
 800d7ae:	9e05      	ldr	r6, [sp, #20]
 800d7b0:	1ac2      	subs	r2, r0, r3
 800d7b2:	e7d0      	b.n	800d756 <_scanf_float+0x37e>
 800d7b4:	f011 0f04 	tst.w	r1, #4
 800d7b8:	9903      	ldr	r1, [sp, #12]
 800d7ba:	600a      	str	r2, [r1, #0]
 800d7bc:	d1e6      	bne.n	800d78c <_scanf_float+0x3b4>
 800d7be:	681d      	ldr	r5, [r3, #0]
 800d7c0:	4632      	mov	r2, r6
 800d7c2:	463b      	mov	r3, r7
 800d7c4:	4630      	mov	r0, r6
 800d7c6:	4639      	mov	r1, r7
 800d7c8:	f7f3 f9d0 	bl	8000b6c <__aeabi_dcmpun>
 800d7cc:	b128      	cbz	r0, 800d7da <_scanf_float+0x402>
 800d7ce:	4808      	ldr	r0, [pc, #32]	@ (800d7f0 <_scanf_float+0x418>)
 800d7d0:	f000 fc02 	bl	800dfd8 <nanf>
 800d7d4:	ed85 0a00 	vstr	s0, [r5]
 800d7d8:	e7db      	b.n	800d792 <_scanf_float+0x3ba>
 800d7da:	4630      	mov	r0, r6
 800d7dc:	4639      	mov	r1, r7
 800d7de:	f7f3 fa23 	bl	8000c28 <__aeabi_d2f>
 800d7e2:	6028      	str	r0, [r5, #0]
 800d7e4:	e7d5      	b.n	800d792 <_scanf_float+0x3ba>
 800d7e6:	2700      	movs	r7, #0
 800d7e8:	e62e      	b.n	800d448 <_scanf_float+0x70>
 800d7ea:	bf00      	nop
 800d7ec:	08011002 	.word	0x08011002
 800d7f0:	08010fcb 	.word	0x08010fcb

0800d7f4 <__sflush_r>:
 800d7f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d7f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7fc:	0716      	lsls	r6, r2, #28
 800d7fe:	4605      	mov	r5, r0
 800d800:	460c      	mov	r4, r1
 800d802:	d454      	bmi.n	800d8ae <__sflush_r+0xba>
 800d804:	684b      	ldr	r3, [r1, #4]
 800d806:	2b00      	cmp	r3, #0
 800d808:	dc02      	bgt.n	800d810 <__sflush_r+0x1c>
 800d80a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	dd48      	ble.n	800d8a2 <__sflush_r+0xae>
 800d810:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d812:	2e00      	cmp	r6, #0
 800d814:	d045      	beq.n	800d8a2 <__sflush_r+0xae>
 800d816:	2300      	movs	r3, #0
 800d818:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d81c:	682f      	ldr	r7, [r5, #0]
 800d81e:	6a21      	ldr	r1, [r4, #32]
 800d820:	602b      	str	r3, [r5, #0]
 800d822:	d030      	beq.n	800d886 <__sflush_r+0x92>
 800d824:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d826:	89a3      	ldrh	r3, [r4, #12]
 800d828:	0759      	lsls	r1, r3, #29
 800d82a:	d505      	bpl.n	800d838 <__sflush_r+0x44>
 800d82c:	6863      	ldr	r3, [r4, #4]
 800d82e:	1ad2      	subs	r2, r2, r3
 800d830:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d832:	b10b      	cbz	r3, 800d838 <__sflush_r+0x44>
 800d834:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d836:	1ad2      	subs	r2, r2, r3
 800d838:	2300      	movs	r3, #0
 800d83a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d83c:	6a21      	ldr	r1, [r4, #32]
 800d83e:	4628      	mov	r0, r5
 800d840:	47b0      	blx	r6
 800d842:	1c43      	adds	r3, r0, #1
 800d844:	89a3      	ldrh	r3, [r4, #12]
 800d846:	d106      	bne.n	800d856 <__sflush_r+0x62>
 800d848:	6829      	ldr	r1, [r5, #0]
 800d84a:	291d      	cmp	r1, #29
 800d84c:	d82b      	bhi.n	800d8a6 <__sflush_r+0xb2>
 800d84e:	4a2a      	ldr	r2, [pc, #168]	@ (800d8f8 <__sflush_r+0x104>)
 800d850:	40ca      	lsrs	r2, r1
 800d852:	07d6      	lsls	r6, r2, #31
 800d854:	d527      	bpl.n	800d8a6 <__sflush_r+0xb2>
 800d856:	2200      	movs	r2, #0
 800d858:	6062      	str	r2, [r4, #4]
 800d85a:	04d9      	lsls	r1, r3, #19
 800d85c:	6922      	ldr	r2, [r4, #16]
 800d85e:	6022      	str	r2, [r4, #0]
 800d860:	d504      	bpl.n	800d86c <__sflush_r+0x78>
 800d862:	1c42      	adds	r2, r0, #1
 800d864:	d101      	bne.n	800d86a <__sflush_r+0x76>
 800d866:	682b      	ldr	r3, [r5, #0]
 800d868:	b903      	cbnz	r3, 800d86c <__sflush_r+0x78>
 800d86a:	6560      	str	r0, [r4, #84]	@ 0x54
 800d86c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d86e:	602f      	str	r7, [r5, #0]
 800d870:	b1b9      	cbz	r1, 800d8a2 <__sflush_r+0xae>
 800d872:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d876:	4299      	cmp	r1, r3
 800d878:	d002      	beq.n	800d880 <__sflush_r+0x8c>
 800d87a:	4628      	mov	r0, r5
 800d87c:	f001 fa14 	bl	800eca8 <_free_r>
 800d880:	2300      	movs	r3, #0
 800d882:	6363      	str	r3, [r4, #52]	@ 0x34
 800d884:	e00d      	b.n	800d8a2 <__sflush_r+0xae>
 800d886:	2301      	movs	r3, #1
 800d888:	4628      	mov	r0, r5
 800d88a:	47b0      	blx	r6
 800d88c:	4602      	mov	r2, r0
 800d88e:	1c50      	adds	r0, r2, #1
 800d890:	d1c9      	bne.n	800d826 <__sflush_r+0x32>
 800d892:	682b      	ldr	r3, [r5, #0]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d0c6      	beq.n	800d826 <__sflush_r+0x32>
 800d898:	2b1d      	cmp	r3, #29
 800d89a:	d001      	beq.n	800d8a0 <__sflush_r+0xac>
 800d89c:	2b16      	cmp	r3, #22
 800d89e:	d11e      	bne.n	800d8de <__sflush_r+0xea>
 800d8a0:	602f      	str	r7, [r5, #0]
 800d8a2:	2000      	movs	r0, #0
 800d8a4:	e022      	b.n	800d8ec <__sflush_r+0xf8>
 800d8a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d8aa:	b21b      	sxth	r3, r3
 800d8ac:	e01b      	b.n	800d8e6 <__sflush_r+0xf2>
 800d8ae:	690f      	ldr	r7, [r1, #16]
 800d8b0:	2f00      	cmp	r7, #0
 800d8b2:	d0f6      	beq.n	800d8a2 <__sflush_r+0xae>
 800d8b4:	0793      	lsls	r3, r2, #30
 800d8b6:	680e      	ldr	r6, [r1, #0]
 800d8b8:	bf08      	it	eq
 800d8ba:	694b      	ldreq	r3, [r1, #20]
 800d8bc:	600f      	str	r7, [r1, #0]
 800d8be:	bf18      	it	ne
 800d8c0:	2300      	movne	r3, #0
 800d8c2:	eba6 0807 	sub.w	r8, r6, r7
 800d8c6:	608b      	str	r3, [r1, #8]
 800d8c8:	f1b8 0f00 	cmp.w	r8, #0
 800d8cc:	dde9      	ble.n	800d8a2 <__sflush_r+0xae>
 800d8ce:	6a21      	ldr	r1, [r4, #32]
 800d8d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d8d2:	4643      	mov	r3, r8
 800d8d4:	463a      	mov	r2, r7
 800d8d6:	4628      	mov	r0, r5
 800d8d8:	47b0      	blx	r6
 800d8da:	2800      	cmp	r0, #0
 800d8dc:	dc08      	bgt.n	800d8f0 <__sflush_r+0xfc>
 800d8de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d8e6:	81a3      	strh	r3, [r4, #12]
 800d8e8:	f04f 30ff 	mov.w	r0, #4294967295
 800d8ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8f0:	4407      	add	r7, r0
 800d8f2:	eba8 0800 	sub.w	r8, r8, r0
 800d8f6:	e7e7      	b.n	800d8c8 <__sflush_r+0xd4>
 800d8f8:	20400001 	.word	0x20400001

0800d8fc <_fflush_r>:
 800d8fc:	b538      	push	{r3, r4, r5, lr}
 800d8fe:	690b      	ldr	r3, [r1, #16]
 800d900:	4605      	mov	r5, r0
 800d902:	460c      	mov	r4, r1
 800d904:	b913      	cbnz	r3, 800d90c <_fflush_r+0x10>
 800d906:	2500      	movs	r5, #0
 800d908:	4628      	mov	r0, r5
 800d90a:	bd38      	pop	{r3, r4, r5, pc}
 800d90c:	b118      	cbz	r0, 800d916 <_fflush_r+0x1a>
 800d90e:	6a03      	ldr	r3, [r0, #32]
 800d910:	b90b      	cbnz	r3, 800d916 <_fflush_r+0x1a>
 800d912:	f000 f8a7 	bl	800da64 <__sinit>
 800d916:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d0f3      	beq.n	800d906 <_fflush_r+0xa>
 800d91e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d920:	07d0      	lsls	r0, r2, #31
 800d922:	d404      	bmi.n	800d92e <_fflush_r+0x32>
 800d924:	0599      	lsls	r1, r3, #22
 800d926:	d402      	bmi.n	800d92e <_fflush_r+0x32>
 800d928:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d92a:	f000 fb3a 	bl	800dfa2 <__retarget_lock_acquire_recursive>
 800d92e:	4628      	mov	r0, r5
 800d930:	4621      	mov	r1, r4
 800d932:	f7ff ff5f 	bl	800d7f4 <__sflush_r>
 800d936:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d938:	07da      	lsls	r2, r3, #31
 800d93a:	4605      	mov	r5, r0
 800d93c:	d4e4      	bmi.n	800d908 <_fflush_r+0xc>
 800d93e:	89a3      	ldrh	r3, [r4, #12]
 800d940:	059b      	lsls	r3, r3, #22
 800d942:	d4e1      	bmi.n	800d908 <_fflush_r+0xc>
 800d944:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d946:	f000 fb2d 	bl	800dfa4 <__retarget_lock_release_recursive>
 800d94a:	e7dd      	b.n	800d908 <_fflush_r+0xc>

0800d94c <std>:
 800d94c:	2300      	movs	r3, #0
 800d94e:	b510      	push	{r4, lr}
 800d950:	4604      	mov	r4, r0
 800d952:	e9c0 3300 	strd	r3, r3, [r0]
 800d956:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d95a:	6083      	str	r3, [r0, #8]
 800d95c:	8181      	strh	r1, [r0, #12]
 800d95e:	6643      	str	r3, [r0, #100]	@ 0x64
 800d960:	81c2      	strh	r2, [r0, #14]
 800d962:	6183      	str	r3, [r0, #24]
 800d964:	4619      	mov	r1, r3
 800d966:	2208      	movs	r2, #8
 800d968:	305c      	adds	r0, #92	@ 0x5c
 800d96a:	f000 fa2d 	bl	800ddc8 <memset>
 800d96e:	4b0d      	ldr	r3, [pc, #52]	@ (800d9a4 <std+0x58>)
 800d970:	6263      	str	r3, [r4, #36]	@ 0x24
 800d972:	4b0d      	ldr	r3, [pc, #52]	@ (800d9a8 <std+0x5c>)
 800d974:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d976:	4b0d      	ldr	r3, [pc, #52]	@ (800d9ac <std+0x60>)
 800d978:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d97a:	4b0d      	ldr	r3, [pc, #52]	@ (800d9b0 <std+0x64>)
 800d97c:	6323      	str	r3, [r4, #48]	@ 0x30
 800d97e:	4b0d      	ldr	r3, [pc, #52]	@ (800d9b4 <std+0x68>)
 800d980:	6224      	str	r4, [r4, #32]
 800d982:	429c      	cmp	r4, r3
 800d984:	d006      	beq.n	800d994 <std+0x48>
 800d986:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d98a:	4294      	cmp	r4, r2
 800d98c:	d002      	beq.n	800d994 <std+0x48>
 800d98e:	33d0      	adds	r3, #208	@ 0xd0
 800d990:	429c      	cmp	r4, r3
 800d992:	d105      	bne.n	800d9a0 <std+0x54>
 800d994:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d99c:	f000 bb00 	b.w	800dfa0 <__retarget_lock_init_recursive>
 800d9a0:	bd10      	pop	{r4, pc}
 800d9a2:	bf00      	nop
 800d9a4:	0800dc19 	.word	0x0800dc19
 800d9a8:	0800dc3b 	.word	0x0800dc3b
 800d9ac:	0800dc73 	.word	0x0800dc73
 800d9b0:	0800dc97 	.word	0x0800dc97
 800d9b4:	200004d0 	.word	0x200004d0

0800d9b8 <stdio_exit_handler>:
 800d9b8:	4a02      	ldr	r2, [pc, #8]	@ (800d9c4 <stdio_exit_handler+0xc>)
 800d9ba:	4903      	ldr	r1, [pc, #12]	@ (800d9c8 <stdio_exit_handler+0x10>)
 800d9bc:	4803      	ldr	r0, [pc, #12]	@ (800d9cc <stdio_exit_handler+0x14>)
 800d9be:	f000 b87b 	b.w	800dab8 <_fwalk_sglue>
 800d9c2:	bf00      	nop
 800d9c4:	20000014 	.word	0x20000014
 800d9c8:	0800d8fd 	.word	0x0800d8fd
 800d9cc:	20000190 	.word	0x20000190

0800d9d0 <cleanup_stdio>:
 800d9d0:	6841      	ldr	r1, [r0, #4]
 800d9d2:	4b0c      	ldr	r3, [pc, #48]	@ (800da04 <cleanup_stdio+0x34>)
 800d9d4:	4299      	cmp	r1, r3
 800d9d6:	b510      	push	{r4, lr}
 800d9d8:	4604      	mov	r4, r0
 800d9da:	d001      	beq.n	800d9e0 <cleanup_stdio+0x10>
 800d9dc:	f7ff ff8e 	bl	800d8fc <_fflush_r>
 800d9e0:	68a1      	ldr	r1, [r4, #8]
 800d9e2:	4b09      	ldr	r3, [pc, #36]	@ (800da08 <cleanup_stdio+0x38>)
 800d9e4:	4299      	cmp	r1, r3
 800d9e6:	d002      	beq.n	800d9ee <cleanup_stdio+0x1e>
 800d9e8:	4620      	mov	r0, r4
 800d9ea:	f7ff ff87 	bl	800d8fc <_fflush_r>
 800d9ee:	68e1      	ldr	r1, [r4, #12]
 800d9f0:	4b06      	ldr	r3, [pc, #24]	@ (800da0c <cleanup_stdio+0x3c>)
 800d9f2:	4299      	cmp	r1, r3
 800d9f4:	d004      	beq.n	800da00 <cleanup_stdio+0x30>
 800d9f6:	4620      	mov	r0, r4
 800d9f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d9fc:	f7ff bf7e 	b.w	800d8fc <_fflush_r>
 800da00:	bd10      	pop	{r4, pc}
 800da02:	bf00      	nop
 800da04:	200004d0 	.word	0x200004d0
 800da08:	20000538 	.word	0x20000538
 800da0c:	200005a0 	.word	0x200005a0

0800da10 <global_stdio_init.part.0>:
 800da10:	b510      	push	{r4, lr}
 800da12:	4b0b      	ldr	r3, [pc, #44]	@ (800da40 <global_stdio_init.part.0+0x30>)
 800da14:	4c0b      	ldr	r4, [pc, #44]	@ (800da44 <global_stdio_init.part.0+0x34>)
 800da16:	4a0c      	ldr	r2, [pc, #48]	@ (800da48 <global_stdio_init.part.0+0x38>)
 800da18:	601a      	str	r2, [r3, #0]
 800da1a:	4620      	mov	r0, r4
 800da1c:	2200      	movs	r2, #0
 800da1e:	2104      	movs	r1, #4
 800da20:	f7ff ff94 	bl	800d94c <std>
 800da24:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800da28:	2201      	movs	r2, #1
 800da2a:	2109      	movs	r1, #9
 800da2c:	f7ff ff8e 	bl	800d94c <std>
 800da30:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800da34:	2202      	movs	r2, #2
 800da36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da3a:	2112      	movs	r1, #18
 800da3c:	f7ff bf86 	b.w	800d94c <std>
 800da40:	20000608 	.word	0x20000608
 800da44:	200004d0 	.word	0x200004d0
 800da48:	0800d9b9 	.word	0x0800d9b9

0800da4c <__sfp_lock_acquire>:
 800da4c:	4801      	ldr	r0, [pc, #4]	@ (800da54 <__sfp_lock_acquire+0x8>)
 800da4e:	f000 baa8 	b.w	800dfa2 <__retarget_lock_acquire_recursive>
 800da52:	bf00      	nop
 800da54:	20000610 	.word	0x20000610

0800da58 <__sfp_lock_release>:
 800da58:	4801      	ldr	r0, [pc, #4]	@ (800da60 <__sfp_lock_release+0x8>)
 800da5a:	f000 baa3 	b.w	800dfa4 <__retarget_lock_release_recursive>
 800da5e:	bf00      	nop
 800da60:	20000610 	.word	0x20000610

0800da64 <__sinit>:
 800da64:	b510      	push	{r4, lr}
 800da66:	4604      	mov	r4, r0
 800da68:	f7ff fff0 	bl	800da4c <__sfp_lock_acquire>
 800da6c:	6a23      	ldr	r3, [r4, #32]
 800da6e:	b11b      	cbz	r3, 800da78 <__sinit+0x14>
 800da70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da74:	f7ff bff0 	b.w	800da58 <__sfp_lock_release>
 800da78:	4b04      	ldr	r3, [pc, #16]	@ (800da8c <__sinit+0x28>)
 800da7a:	6223      	str	r3, [r4, #32]
 800da7c:	4b04      	ldr	r3, [pc, #16]	@ (800da90 <__sinit+0x2c>)
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d1f5      	bne.n	800da70 <__sinit+0xc>
 800da84:	f7ff ffc4 	bl	800da10 <global_stdio_init.part.0>
 800da88:	e7f2      	b.n	800da70 <__sinit+0xc>
 800da8a:	bf00      	nop
 800da8c:	0800d9d1 	.word	0x0800d9d1
 800da90:	20000608 	.word	0x20000608

0800da94 <fiprintf>:
 800da94:	b40e      	push	{r1, r2, r3}
 800da96:	b503      	push	{r0, r1, lr}
 800da98:	4601      	mov	r1, r0
 800da9a:	ab03      	add	r3, sp, #12
 800da9c:	4805      	ldr	r0, [pc, #20]	@ (800dab4 <fiprintf+0x20>)
 800da9e:	f853 2b04 	ldr.w	r2, [r3], #4
 800daa2:	6800      	ldr	r0, [r0, #0]
 800daa4:	9301      	str	r3, [sp, #4]
 800daa6:	f002 fbab 	bl	8010200 <_vfiprintf_r>
 800daaa:	b002      	add	sp, #8
 800daac:	f85d eb04 	ldr.w	lr, [sp], #4
 800dab0:	b003      	add	sp, #12
 800dab2:	4770      	bx	lr
 800dab4:	2000018c 	.word	0x2000018c

0800dab8 <_fwalk_sglue>:
 800dab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dabc:	4607      	mov	r7, r0
 800dabe:	4688      	mov	r8, r1
 800dac0:	4614      	mov	r4, r2
 800dac2:	2600      	movs	r6, #0
 800dac4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dac8:	f1b9 0901 	subs.w	r9, r9, #1
 800dacc:	d505      	bpl.n	800dada <_fwalk_sglue+0x22>
 800dace:	6824      	ldr	r4, [r4, #0]
 800dad0:	2c00      	cmp	r4, #0
 800dad2:	d1f7      	bne.n	800dac4 <_fwalk_sglue+0xc>
 800dad4:	4630      	mov	r0, r6
 800dad6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dada:	89ab      	ldrh	r3, [r5, #12]
 800dadc:	2b01      	cmp	r3, #1
 800dade:	d907      	bls.n	800daf0 <_fwalk_sglue+0x38>
 800dae0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dae4:	3301      	adds	r3, #1
 800dae6:	d003      	beq.n	800daf0 <_fwalk_sglue+0x38>
 800dae8:	4629      	mov	r1, r5
 800daea:	4638      	mov	r0, r7
 800daec:	47c0      	blx	r8
 800daee:	4306      	orrs	r6, r0
 800daf0:	3568      	adds	r5, #104	@ 0x68
 800daf2:	e7e9      	b.n	800dac8 <_fwalk_sglue+0x10>

0800daf4 <iprintf>:
 800daf4:	b40f      	push	{r0, r1, r2, r3}
 800daf6:	b507      	push	{r0, r1, r2, lr}
 800daf8:	4906      	ldr	r1, [pc, #24]	@ (800db14 <iprintf+0x20>)
 800dafa:	ab04      	add	r3, sp, #16
 800dafc:	6808      	ldr	r0, [r1, #0]
 800dafe:	f853 2b04 	ldr.w	r2, [r3], #4
 800db02:	6881      	ldr	r1, [r0, #8]
 800db04:	9301      	str	r3, [sp, #4]
 800db06:	f002 fb7b 	bl	8010200 <_vfiprintf_r>
 800db0a:	b003      	add	sp, #12
 800db0c:	f85d eb04 	ldr.w	lr, [sp], #4
 800db10:	b004      	add	sp, #16
 800db12:	4770      	bx	lr
 800db14:	2000018c 	.word	0x2000018c

0800db18 <_puts_r>:
 800db18:	6a03      	ldr	r3, [r0, #32]
 800db1a:	b570      	push	{r4, r5, r6, lr}
 800db1c:	6884      	ldr	r4, [r0, #8]
 800db1e:	4605      	mov	r5, r0
 800db20:	460e      	mov	r6, r1
 800db22:	b90b      	cbnz	r3, 800db28 <_puts_r+0x10>
 800db24:	f7ff ff9e 	bl	800da64 <__sinit>
 800db28:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800db2a:	07db      	lsls	r3, r3, #31
 800db2c:	d405      	bmi.n	800db3a <_puts_r+0x22>
 800db2e:	89a3      	ldrh	r3, [r4, #12]
 800db30:	0598      	lsls	r0, r3, #22
 800db32:	d402      	bmi.n	800db3a <_puts_r+0x22>
 800db34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800db36:	f000 fa34 	bl	800dfa2 <__retarget_lock_acquire_recursive>
 800db3a:	89a3      	ldrh	r3, [r4, #12]
 800db3c:	0719      	lsls	r1, r3, #28
 800db3e:	d502      	bpl.n	800db46 <_puts_r+0x2e>
 800db40:	6923      	ldr	r3, [r4, #16]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d135      	bne.n	800dbb2 <_puts_r+0x9a>
 800db46:	4621      	mov	r1, r4
 800db48:	4628      	mov	r0, r5
 800db4a:	f000 f8e7 	bl	800dd1c <__swsetup_r>
 800db4e:	b380      	cbz	r0, 800dbb2 <_puts_r+0x9a>
 800db50:	f04f 35ff 	mov.w	r5, #4294967295
 800db54:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800db56:	07da      	lsls	r2, r3, #31
 800db58:	d405      	bmi.n	800db66 <_puts_r+0x4e>
 800db5a:	89a3      	ldrh	r3, [r4, #12]
 800db5c:	059b      	lsls	r3, r3, #22
 800db5e:	d402      	bmi.n	800db66 <_puts_r+0x4e>
 800db60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800db62:	f000 fa1f 	bl	800dfa4 <__retarget_lock_release_recursive>
 800db66:	4628      	mov	r0, r5
 800db68:	bd70      	pop	{r4, r5, r6, pc}
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	da04      	bge.n	800db78 <_puts_r+0x60>
 800db6e:	69a2      	ldr	r2, [r4, #24]
 800db70:	429a      	cmp	r2, r3
 800db72:	dc17      	bgt.n	800dba4 <_puts_r+0x8c>
 800db74:	290a      	cmp	r1, #10
 800db76:	d015      	beq.n	800dba4 <_puts_r+0x8c>
 800db78:	6823      	ldr	r3, [r4, #0]
 800db7a:	1c5a      	adds	r2, r3, #1
 800db7c:	6022      	str	r2, [r4, #0]
 800db7e:	7019      	strb	r1, [r3, #0]
 800db80:	68a3      	ldr	r3, [r4, #8]
 800db82:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800db86:	3b01      	subs	r3, #1
 800db88:	60a3      	str	r3, [r4, #8]
 800db8a:	2900      	cmp	r1, #0
 800db8c:	d1ed      	bne.n	800db6a <_puts_r+0x52>
 800db8e:	2b00      	cmp	r3, #0
 800db90:	da11      	bge.n	800dbb6 <_puts_r+0x9e>
 800db92:	4622      	mov	r2, r4
 800db94:	210a      	movs	r1, #10
 800db96:	4628      	mov	r0, r5
 800db98:	f000 f881 	bl	800dc9e <__swbuf_r>
 800db9c:	3001      	adds	r0, #1
 800db9e:	d0d7      	beq.n	800db50 <_puts_r+0x38>
 800dba0:	250a      	movs	r5, #10
 800dba2:	e7d7      	b.n	800db54 <_puts_r+0x3c>
 800dba4:	4622      	mov	r2, r4
 800dba6:	4628      	mov	r0, r5
 800dba8:	f000 f879 	bl	800dc9e <__swbuf_r>
 800dbac:	3001      	adds	r0, #1
 800dbae:	d1e7      	bne.n	800db80 <_puts_r+0x68>
 800dbb0:	e7ce      	b.n	800db50 <_puts_r+0x38>
 800dbb2:	3e01      	subs	r6, #1
 800dbb4:	e7e4      	b.n	800db80 <_puts_r+0x68>
 800dbb6:	6823      	ldr	r3, [r4, #0]
 800dbb8:	1c5a      	adds	r2, r3, #1
 800dbba:	6022      	str	r2, [r4, #0]
 800dbbc:	220a      	movs	r2, #10
 800dbbe:	701a      	strb	r2, [r3, #0]
 800dbc0:	e7ee      	b.n	800dba0 <_puts_r+0x88>
	...

0800dbc4 <puts>:
 800dbc4:	4b02      	ldr	r3, [pc, #8]	@ (800dbd0 <puts+0xc>)
 800dbc6:	4601      	mov	r1, r0
 800dbc8:	6818      	ldr	r0, [r3, #0]
 800dbca:	f7ff bfa5 	b.w	800db18 <_puts_r>
 800dbce:	bf00      	nop
 800dbd0:	2000018c 	.word	0x2000018c

0800dbd4 <siprintf>:
 800dbd4:	b40e      	push	{r1, r2, r3}
 800dbd6:	b510      	push	{r4, lr}
 800dbd8:	b09d      	sub	sp, #116	@ 0x74
 800dbda:	ab1f      	add	r3, sp, #124	@ 0x7c
 800dbdc:	9002      	str	r0, [sp, #8]
 800dbde:	9006      	str	r0, [sp, #24]
 800dbe0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800dbe4:	480a      	ldr	r0, [pc, #40]	@ (800dc10 <siprintf+0x3c>)
 800dbe6:	9107      	str	r1, [sp, #28]
 800dbe8:	9104      	str	r1, [sp, #16]
 800dbea:	490a      	ldr	r1, [pc, #40]	@ (800dc14 <siprintf+0x40>)
 800dbec:	f853 2b04 	ldr.w	r2, [r3], #4
 800dbf0:	9105      	str	r1, [sp, #20]
 800dbf2:	2400      	movs	r4, #0
 800dbf4:	a902      	add	r1, sp, #8
 800dbf6:	6800      	ldr	r0, [r0, #0]
 800dbf8:	9301      	str	r3, [sp, #4]
 800dbfa:	941b      	str	r4, [sp, #108]	@ 0x6c
 800dbfc:	f002 f9da 	bl	800ffb4 <_svfiprintf_r>
 800dc00:	9b02      	ldr	r3, [sp, #8]
 800dc02:	701c      	strb	r4, [r3, #0]
 800dc04:	b01d      	add	sp, #116	@ 0x74
 800dc06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc0a:	b003      	add	sp, #12
 800dc0c:	4770      	bx	lr
 800dc0e:	bf00      	nop
 800dc10:	2000018c 	.word	0x2000018c
 800dc14:	ffff0208 	.word	0xffff0208

0800dc18 <__sread>:
 800dc18:	b510      	push	{r4, lr}
 800dc1a:	460c      	mov	r4, r1
 800dc1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc20:	f000 f970 	bl	800df04 <_read_r>
 800dc24:	2800      	cmp	r0, #0
 800dc26:	bfab      	itete	ge
 800dc28:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800dc2a:	89a3      	ldrhlt	r3, [r4, #12]
 800dc2c:	181b      	addge	r3, r3, r0
 800dc2e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800dc32:	bfac      	ite	ge
 800dc34:	6563      	strge	r3, [r4, #84]	@ 0x54
 800dc36:	81a3      	strhlt	r3, [r4, #12]
 800dc38:	bd10      	pop	{r4, pc}

0800dc3a <__swrite>:
 800dc3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc3e:	461f      	mov	r7, r3
 800dc40:	898b      	ldrh	r3, [r1, #12]
 800dc42:	05db      	lsls	r3, r3, #23
 800dc44:	4605      	mov	r5, r0
 800dc46:	460c      	mov	r4, r1
 800dc48:	4616      	mov	r6, r2
 800dc4a:	d505      	bpl.n	800dc58 <__swrite+0x1e>
 800dc4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc50:	2302      	movs	r3, #2
 800dc52:	2200      	movs	r2, #0
 800dc54:	f000 f944 	bl	800dee0 <_lseek_r>
 800dc58:	89a3      	ldrh	r3, [r4, #12]
 800dc5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dc5e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dc62:	81a3      	strh	r3, [r4, #12]
 800dc64:	4632      	mov	r2, r6
 800dc66:	463b      	mov	r3, r7
 800dc68:	4628      	mov	r0, r5
 800dc6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dc6e:	f000 b95b 	b.w	800df28 <_write_r>

0800dc72 <__sseek>:
 800dc72:	b510      	push	{r4, lr}
 800dc74:	460c      	mov	r4, r1
 800dc76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc7a:	f000 f931 	bl	800dee0 <_lseek_r>
 800dc7e:	1c43      	adds	r3, r0, #1
 800dc80:	89a3      	ldrh	r3, [r4, #12]
 800dc82:	bf15      	itete	ne
 800dc84:	6560      	strne	r0, [r4, #84]	@ 0x54
 800dc86:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800dc8a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800dc8e:	81a3      	strheq	r3, [r4, #12]
 800dc90:	bf18      	it	ne
 800dc92:	81a3      	strhne	r3, [r4, #12]
 800dc94:	bd10      	pop	{r4, pc}

0800dc96 <__sclose>:
 800dc96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc9a:	f000 b8b3 	b.w	800de04 <_close_r>

0800dc9e <__swbuf_r>:
 800dc9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dca0:	460e      	mov	r6, r1
 800dca2:	4614      	mov	r4, r2
 800dca4:	4605      	mov	r5, r0
 800dca6:	b118      	cbz	r0, 800dcb0 <__swbuf_r+0x12>
 800dca8:	6a03      	ldr	r3, [r0, #32]
 800dcaa:	b90b      	cbnz	r3, 800dcb0 <__swbuf_r+0x12>
 800dcac:	f7ff feda 	bl	800da64 <__sinit>
 800dcb0:	69a3      	ldr	r3, [r4, #24]
 800dcb2:	60a3      	str	r3, [r4, #8]
 800dcb4:	89a3      	ldrh	r3, [r4, #12]
 800dcb6:	071a      	lsls	r2, r3, #28
 800dcb8:	d501      	bpl.n	800dcbe <__swbuf_r+0x20>
 800dcba:	6923      	ldr	r3, [r4, #16]
 800dcbc:	b943      	cbnz	r3, 800dcd0 <__swbuf_r+0x32>
 800dcbe:	4621      	mov	r1, r4
 800dcc0:	4628      	mov	r0, r5
 800dcc2:	f000 f82b 	bl	800dd1c <__swsetup_r>
 800dcc6:	b118      	cbz	r0, 800dcd0 <__swbuf_r+0x32>
 800dcc8:	f04f 37ff 	mov.w	r7, #4294967295
 800dccc:	4638      	mov	r0, r7
 800dcce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dcd0:	6823      	ldr	r3, [r4, #0]
 800dcd2:	6922      	ldr	r2, [r4, #16]
 800dcd4:	1a98      	subs	r0, r3, r2
 800dcd6:	6963      	ldr	r3, [r4, #20]
 800dcd8:	b2f6      	uxtb	r6, r6
 800dcda:	4283      	cmp	r3, r0
 800dcdc:	4637      	mov	r7, r6
 800dcde:	dc05      	bgt.n	800dcec <__swbuf_r+0x4e>
 800dce0:	4621      	mov	r1, r4
 800dce2:	4628      	mov	r0, r5
 800dce4:	f7ff fe0a 	bl	800d8fc <_fflush_r>
 800dce8:	2800      	cmp	r0, #0
 800dcea:	d1ed      	bne.n	800dcc8 <__swbuf_r+0x2a>
 800dcec:	68a3      	ldr	r3, [r4, #8]
 800dcee:	3b01      	subs	r3, #1
 800dcf0:	60a3      	str	r3, [r4, #8]
 800dcf2:	6823      	ldr	r3, [r4, #0]
 800dcf4:	1c5a      	adds	r2, r3, #1
 800dcf6:	6022      	str	r2, [r4, #0]
 800dcf8:	701e      	strb	r6, [r3, #0]
 800dcfa:	6962      	ldr	r2, [r4, #20]
 800dcfc:	1c43      	adds	r3, r0, #1
 800dcfe:	429a      	cmp	r2, r3
 800dd00:	d004      	beq.n	800dd0c <__swbuf_r+0x6e>
 800dd02:	89a3      	ldrh	r3, [r4, #12]
 800dd04:	07db      	lsls	r3, r3, #31
 800dd06:	d5e1      	bpl.n	800dccc <__swbuf_r+0x2e>
 800dd08:	2e0a      	cmp	r6, #10
 800dd0a:	d1df      	bne.n	800dccc <__swbuf_r+0x2e>
 800dd0c:	4621      	mov	r1, r4
 800dd0e:	4628      	mov	r0, r5
 800dd10:	f7ff fdf4 	bl	800d8fc <_fflush_r>
 800dd14:	2800      	cmp	r0, #0
 800dd16:	d0d9      	beq.n	800dccc <__swbuf_r+0x2e>
 800dd18:	e7d6      	b.n	800dcc8 <__swbuf_r+0x2a>
	...

0800dd1c <__swsetup_r>:
 800dd1c:	b538      	push	{r3, r4, r5, lr}
 800dd1e:	4b29      	ldr	r3, [pc, #164]	@ (800ddc4 <__swsetup_r+0xa8>)
 800dd20:	4605      	mov	r5, r0
 800dd22:	6818      	ldr	r0, [r3, #0]
 800dd24:	460c      	mov	r4, r1
 800dd26:	b118      	cbz	r0, 800dd30 <__swsetup_r+0x14>
 800dd28:	6a03      	ldr	r3, [r0, #32]
 800dd2a:	b90b      	cbnz	r3, 800dd30 <__swsetup_r+0x14>
 800dd2c:	f7ff fe9a 	bl	800da64 <__sinit>
 800dd30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd34:	0719      	lsls	r1, r3, #28
 800dd36:	d422      	bmi.n	800dd7e <__swsetup_r+0x62>
 800dd38:	06da      	lsls	r2, r3, #27
 800dd3a:	d407      	bmi.n	800dd4c <__swsetup_r+0x30>
 800dd3c:	2209      	movs	r2, #9
 800dd3e:	602a      	str	r2, [r5, #0]
 800dd40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dd44:	81a3      	strh	r3, [r4, #12]
 800dd46:	f04f 30ff 	mov.w	r0, #4294967295
 800dd4a:	e033      	b.n	800ddb4 <__swsetup_r+0x98>
 800dd4c:	0758      	lsls	r0, r3, #29
 800dd4e:	d512      	bpl.n	800dd76 <__swsetup_r+0x5a>
 800dd50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dd52:	b141      	cbz	r1, 800dd66 <__swsetup_r+0x4a>
 800dd54:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dd58:	4299      	cmp	r1, r3
 800dd5a:	d002      	beq.n	800dd62 <__swsetup_r+0x46>
 800dd5c:	4628      	mov	r0, r5
 800dd5e:	f000 ffa3 	bl	800eca8 <_free_r>
 800dd62:	2300      	movs	r3, #0
 800dd64:	6363      	str	r3, [r4, #52]	@ 0x34
 800dd66:	89a3      	ldrh	r3, [r4, #12]
 800dd68:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800dd6c:	81a3      	strh	r3, [r4, #12]
 800dd6e:	2300      	movs	r3, #0
 800dd70:	6063      	str	r3, [r4, #4]
 800dd72:	6923      	ldr	r3, [r4, #16]
 800dd74:	6023      	str	r3, [r4, #0]
 800dd76:	89a3      	ldrh	r3, [r4, #12]
 800dd78:	f043 0308 	orr.w	r3, r3, #8
 800dd7c:	81a3      	strh	r3, [r4, #12]
 800dd7e:	6923      	ldr	r3, [r4, #16]
 800dd80:	b94b      	cbnz	r3, 800dd96 <__swsetup_r+0x7a>
 800dd82:	89a3      	ldrh	r3, [r4, #12]
 800dd84:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800dd88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dd8c:	d003      	beq.n	800dd96 <__swsetup_r+0x7a>
 800dd8e:	4621      	mov	r1, r4
 800dd90:	4628      	mov	r0, r5
 800dd92:	f002 fb73 	bl	801047c <__smakebuf_r>
 800dd96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd9a:	f013 0201 	ands.w	r2, r3, #1
 800dd9e:	d00a      	beq.n	800ddb6 <__swsetup_r+0x9a>
 800dda0:	2200      	movs	r2, #0
 800dda2:	60a2      	str	r2, [r4, #8]
 800dda4:	6962      	ldr	r2, [r4, #20]
 800dda6:	4252      	negs	r2, r2
 800dda8:	61a2      	str	r2, [r4, #24]
 800ddaa:	6922      	ldr	r2, [r4, #16]
 800ddac:	b942      	cbnz	r2, 800ddc0 <__swsetup_r+0xa4>
 800ddae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ddb2:	d1c5      	bne.n	800dd40 <__swsetup_r+0x24>
 800ddb4:	bd38      	pop	{r3, r4, r5, pc}
 800ddb6:	0799      	lsls	r1, r3, #30
 800ddb8:	bf58      	it	pl
 800ddba:	6962      	ldrpl	r2, [r4, #20]
 800ddbc:	60a2      	str	r2, [r4, #8]
 800ddbe:	e7f4      	b.n	800ddaa <__swsetup_r+0x8e>
 800ddc0:	2000      	movs	r0, #0
 800ddc2:	e7f7      	b.n	800ddb4 <__swsetup_r+0x98>
 800ddc4:	2000018c 	.word	0x2000018c

0800ddc8 <memset>:
 800ddc8:	4402      	add	r2, r0
 800ddca:	4603      	mov	r3, r0
 800ddcc:	4293      	cmp	r3, r2
 800ddce:	d100      	bne.n	800ddd2 <memset+0xa>
 800ddd0:	4770      	bx	lr
 800ddd2:	f803 1b01 	strb.w	r1, [r3], #1
 800ddd6:	e7f9      	b.n	800ddcc <memset+0x4>

0800ddd8 <strncmp>:
 800ddd8:	b510      	push	{r4, lr}
 800ddda:	b16a      	cbz	r2, 800ddf8 <strncmp+0x20>
 800dddc:	3901      	subs	r1, #1
 800ddde:	1884      	adds	r4, r0, r2
 800dde0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dde4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800dde8:	429a      	cmp	r2, r3
 800ddea:	d103      	bne.n	800ddf4 <strncmp+0x1c>
 800ddec:	42a0      	cmp	r0, r4
 800ddee:	d001      	beq.n	800ddf4 <strncmp+0x1c>
 800ddf0:	2a00      	cmp	r2, #0
 800ddf2:	d1f5      	bne.n	800dde0 <strncmp+0x8>
 800ddf4:	1ad0      	subs	r0, r2, r3
 800ddf6:	bd10      	pop	{r4, pc}
 800ddf8:	4610      	mov	r0, r2
 800ddfa:	e7fc      	b.n	800ddf6 <strncmp+0x1e>

0800ddfc <_localeconv_r>:
 800ddfc:	4800      	ldr	r0, [pc, #0]	@ (800de00 <_localeconv_r+0x4>)
 800ddfe:	4770      	bx	lr
 800de00:	20000110 	.word	0x20000110

0800de04 <_close_r>:
 800de04:	b538      	push	{r3, r4, r5, lr}
 800de06:	4d06      	ldr	r5, [pc, #24]	@ (800de20 <_close_r+0x1c>)
 800de08:	2300      	movs	r3, #0
 800de0a:	4604      	mov	r4, r0
 800de0c:	4608      	mov	r0, r1
 800de0e:	602b      	str	r3, [r5, #0]
 800de10:	f7f4 fcd4 	bl	80027bc <_close>
 800de14:	1c43      	adds	r3, r0, #1
 800de16:	d102      	bne.n	800de1e <_close_r+0x1a>
 800de18:	682b      	ldr	r3, [r5, #0]
 800de1a:	b103      	cbz	r3, 800de1e <_close_r+0x1a>
 800de1c:	6023      	str	r3, [r4, #0]
 800de1e:	bd38      	pop	{r3, r4, r5, pc}
 800de20:	2000060c 	.word	0x2000060c

0800de24 <_reclaim_reent>:
 800de24:	4b2d      	ldr	r3, [pc, #180]	@ (800dedc <_reclaim_reent+0xb8>)
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	4283      	cmp	r3, r0
 800de2a:	b570      	push	{r4, r5, r6, lr}
 800de2c:	4604      	mov	r4, r0
 800de2e:	d053      	beq.n	800ded8 <_reclaim_reent+0xb4>
 800de30:	69c3      	ldr	r3, [r0, #28]
 800de32:	b31b      	cbz	r3, 800de7c <_reclaim_reent+0x58>
 800de34:	68db      	ldr	r3, [r3, #12]
 800de36:	b163      	cbz	r3, 800de52 <_reclaim_reent+0x2e>
 800de38:	2500      	movs	r5, #0
 800de3a:	69e3      	ldr	r3, [r4, #28]
 800de3c:	68db      	ldr	r3, [r3, #12]
 800de3e:	5959      	ldr	r1, [r3, r5]
 800de40:	b9b1      	cbnz	r1, 800de70 <_reclaim_reent+0x4c>
 800de42:	3504      	adds	r5, #4
 800de44:	2d80      	cmp	r5, #128	@ 0x80
 800de46:	d1f8      	bne.n	800de3a <_reclaim_reent+0x16>
 800de48:	69e3      	ldr	r3, [r4, #28]
 800de4a:	4620      	mov	r0, r4
 800de4c:	68d9      	ldr	r1, [r3, #12]
 800de4e:	f000 ff2b 	bl	800eca8 <_free_r>
 800de52:	69e3      	ldr	r3, [r4, #28]
 800de54:	6819      	ldr	r1, [r3, #0]
 800de56:	b111      	cbz	r1, 800de5e <_reclaim_reent+0x3a>
 800de58:	4620      	mov	r0, r4
 800de5a:	f000 ff25 	bl	800eca8 <_free_r>
 800de5e:	69e3      	ldr	r3, [r4, #28]
 800de60:	689d      	ldr	r5, [r3, #8]
 800de62:	b15d      	cbz	r5, 800de7c <_reclaim_reent+0x58>
 800de64:	4629      	mov	r1, r5
 800de66:	4620      	mov	r0, r4
 800de68:	682d      	ldr	r5, [r5, #0]
 800de6a:	f000 ff1d 	bl	800eca8 <_free_r>
 800de6e:	e7f8      	b.n	800de62 <_reclaim_reent+0x3e>
 800de70:	680e      	ldr	r6, [r1, #0]
 800de72:	4620      	mov	r0, r4
 800de74:	f000 ff18 	bl	800eca8 <_free_r>
 800de78:	4631      	mov	r1, r6
 800de7a:	e7e1      	b.n	800de40 <_reclaim_reent+0x1c>
 800de7c:	6961      	ldr	r1, [r4, #20]
 800de7e:	b111      	cbz	r1, 800de86 <_reclaim_reent+0x62>
 800de80:	4620      	mov	r0, r4
 800de82:	f000 ff11 	bl	800eca8 <_free_r>
 800de86:	69e1      	ldr	r1, [r4, #28]
 800de88:	b111      	cbz	r1, 800de90 <_reclaim_reent+0x6c>
 800de8a:	4620      	mov	r0, r4
 800de8c:	f000 ff0c 	bl	800eca8 <_free_r>
 800de90:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800de92:	b111      	cbz	r1, 800de9a <_reclaim_reent+0x76>
 800de94:	4620      	mov	r0, r4
 800de96:	f000 ff07 	bl	800eca8 <_free_r>
 800de9a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800de9c:	b111      	cbz	r1, 800dea4 <_reclaim_reent+0x80>
 800de9e:	4620      	mov	r0, r4
 800dea0:	f000 ff02 	bl	800eca8 <_free_r>
 800dea4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800dea6:	b111      	cbz	r1, 800deae <_reclaim_reent+0x8a>
 800dea8:	4620      	mov	r0, r4
 800deaa:	f000 fefd 	bl	800eca8 <_free_r>
 800deae:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800deb0:	b111      	cbz	r1, 800deb8 <_reclaim_reent+0x94>
 800deb2:	4620      	mov	r0, r4
 800deb4:	f000 fef8 	bl	800eca8 <_free_r>
 800deb8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800deba:	b111      	cbz	r1, 800dec2 <_reclaim_reent+0x9e>
 800debc:	4620      	mov	r0, r4
 800debe:	f000 fef3 	bl	800eca8 <_free_r>
 800dec2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800dec4:	b111      	cbz	r1, 800decc <_reclaim_reent+0xa8>
 800dec6:	4620      	mov	r0, r4
 800dec8:	f000 feee 	bl	800eca8 <_free_r>
 800decc:	6a23      	ldr	r3, [r4, #32]
 800dece:	b11b      	cbz	r3, 800ded8 <_reclaim_reent+0xb4>
 800ded0:	4620      	mov	r0, r4
 800ded2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ded6:	4718      	bx	r3
 800ded8:	bd70      	pop	{r4, r5, r6, pc}
 800deda:	bf00      	nop
 800dedc:	2000018c 	.word	0x2000018c

0800dee0 <_lseek_r>:
 800dee0:	b538      	push	{r3, r4, r5, lr}
 800dee2:	4d07      	ldr	r5, [pc, #28]	@ (800df00 <_lseek_r+0x20>)
 800dee4:	4604      	mov	r4, r0
 800dee6:	4608      	mov	r0, r1
 800dee8:	4611      	mov	r1, r2
 800deea:	2200      	movs	r2, #0
 800deec:	602a      	str	r2, [r5, #0]
 800deee:	461a      	mov	r2, r3
 800def0:	f7f4 fcaa 	bl	8002848 <_lseek>
 800def4:	1c43      	adds	r3, r0, #1
 800def6:	d102      	bne.n	800defe <_lseek_r+0x1e>
 800def8:	682b      	ldr	r3, [r5, #0]
 800defa:	b103      	cbz	r3, 800defe <_lseek_r+0x1e>
 800defc:	6023      	str	r3, [r4, #0]
 800defe:	bd38      	pop	{r3, r4, r5, pc}
 800df00:	2000060c 	.word	0x2000060c

0800df04 <_read_r>:
 800df04:	b538      	push	{r3, r4, r5, lr}
 800df06:	4d07      	ldr	r5, [pc, #28]	@ (800df24 <_read_r+0x20>)
 800df08:	4604      	mov	r4, r0
 800df0a:	4608      	mov	r0, r1
 800df0c:	4611      	mov	r1, r2
 800df0e:	2200      	movs	r2, #0
 800df10:	602a      	str	r2, [r5, #0]
 800df12:	461a      	mov	r2, r3
 800df14:	f7f4 fb9c 	bl	8002650 <_read>
 800df18:	1c43      	adds	r3, r0, #1
 800df1a:	d102      	bne.n	800df22 <_read_r+0x1e>
 800df1c:	682b      	ldr	r3, [r5, #0]
 800df1e:	b103      	cbz	r3, 800df22 <_read_r+0x1e>
 800df20:	6023      	str	r3, [r4, #0]
 800df22:	bd38      	pop	{r3, r4, r5, pc}
 800df24:	2000060c 	.word	0x2000060c

0800df28 <_write_r>:
 800df28:	b538      	push	{r3, r4, r5, lr}
 800df2a:	4d07      	ldr	r5, [pc, #28]	@ (800df48 <_write_r+0x20>)
 800df2c:	4604      	mov	r4, r0
 800df2e:	4608      	mov	r0, r1
 800df30:	4611      	mov	r1, r2
 800df32:	2200      	movs	r2, #0
 800df34:	602a      	str	r2, [r5, #0]
 800df36:	461a      	mov	r2, r3
 800df38:	f7f4 fbd0 	bl	80026dc <_write>
 800df3c:	1c43      	adds	r3, r0, #1
 800df3e:	d102      	bne.n	800df46 <_write_r+0x1e>
 800df40:	682b      	ldr	r3, [r5, #0]
 800df42:	b103      	cbz	r3, 800df46 <_write_r+0x1e>
 800df44:	6023      	str	r3, [r4, #0]
 800df46:	bd38      	pop	{r3, r4, r5, pc}
 800df48:	2000060c 	.word	0x2000060c

0800df4c <__errno>:
 800df4c:	4b01      	ldr	r3, [pc, #4]	@ (800df54 <__errno+0x8>)
 800df4e:	6818      	ldr	r0, [r3, #0]
 800df50:	4770      	bx	lr
 800df52:	bf00      	nop
 800df54:	2000018c 	.word	0x2000018c

0800df58 <__libc_init_array>:
 800df58:	b570      	push	{r4, r5, r6, lr}
 800df5a:	4d0d      	ldr	r5, [pc, #52]	@ (800df90 <__libc_init_array+0x38>)
 800df5c:	4c0d      	ldr	r4, [pc, #52]	@ (800df94 <__libc_init_array+0x3c>)
 800df5e:	1b64      	subs	r4, r4, r5
 800df60:	10a4      	asrs	r4, r4, #2
 800df62:	2600      	movs	r6, #0
 800df64:	42a6      	cmp	r6, r4
 800df66:	d109      	bne.n	800df7c <__libc_init_array+0x24>
 800df68:	4d0b      	ldr	r5, [pc, #44]	@ (800df98 <__libc_init_array+0x40>)
 800df6a:	4c0c      	ldr	r4, [pc, #48]	@ (800df9c <__libc_init_array+0x44>)
 800df6c:	f002 fb4a 	bl	8010604 <_init>
 800df70:	1b64      	subs	r4, r4, r5
 800df72:	10a4      	asrs	r4, r4, #2
 800df74:	2600      	movs	r6, #0
 800df76:	42a6      	cmp	r6, r4
 800df78:	d105      	bne.n	800df86 <__libc_init_array+0x2e>
 800df7a:	bd70      	pop	{r4, r5, r6, pc}
 800df7c:	f855 3b04 	ldr.w	r3, [r5], #4
 800df80:	4798      	blx	r3
 800df82:	3601      	adds	r6, #1
 800df84:	e7ee      	b.n	800df64 <__libc_init_array+0xc>
 800df86:	f855 3b04 	ldr.w	r3, [r5], #4
 800df8a:	4798      	blx	r3
 800df8c:	3601      	adds	r6, #1
 800df8e:	e7f2      	b.n	800df76 <__libc_init_array+0x1e>
 800df90:	080113c4 	.word	0x080113c4
 800df94:	080113c4 	.word	0x080113c4
 800df98:	080113c4 	.word	0x080113c4
 800df9c:	080113cc 	.word	0x080113cc

0800dfa0 <__retarget_lock_init_recursive>:
 800dfa0:	4770      	bx	lr

0800dfa2 <__retarget_lock_acquire_recursive>:
 800dfa2:	4770      	bx	lr

0800dfa4 <__retarget_lock_release_recursive>:
 800dfa4:	4770      	bx	lr

0800dfa6 <memcpy>:
 800dfa6:	440a      	add	r2, r1
 800dfa8:	4291      	cmp	r1, r2
 800dfaa:	f100 33ff 	add.w	r3, r0, #4294967295
 800dfae:	d100      	bne.n	800dfb2 <memcpy+0xc>
 800dfb0:	4770      	bx	lr
 800dfb2:	b510      	push	{r4, lr}
 800dfb4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dfb8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dfbc:	4291      	cmp	r1, r2
 800dfbe:	d1f9      	bne.n	800dfb4 <memcpy+0xe>
 800dfc0:	bd10      	pop	{r4, pc}
 800dfc2:	0000      	movs	r0, r0
 800dfc4:	0000      	movs	r0, r0
	...

0800dfc8 <nan>:
 800dfc8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800dfd0 <nan+0x8>
 800dfcc:	4770      	bx	lr
 800dfce:	bf00      	nop
 800dfd0:	00000000 	.word	0x00000000
 800dfd4:	7ff80000 	.word	0x7ff80000

0800dfd8 <nanf>:
 800dfd8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800dfe0 <nanf+0x8>
 800dfdc:	4770      	bx	lr
 800dfde:	bf00      	nop
 800dfe0:	7fc00000 	.word	0x7fc00000

0800dfe4 <abort>:
 800dfe4:	b508      	push	{r3, lr}
 800dfe6:	2006      	movs	r0, #6
 800dfe8:	f002 fac6 	bl	8010578 <raise>
 800dfec:	2001      	movs	r0, #1
 800dfee:	f7f4 fb23 	bl	8002638 <_exit>

0800dff2 <quorem>:
 800dff2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dff6:	6903      	ldr	r3, [r0, #16]
 800dff8:	690c      	ldr	r4, [r1, #16]
 800dffa:	42a3      	cmp	r3, r4
 800dffc:	4607      	mov	r7, r0
 800dffe:	db7e      	blt.n	800e0fe <quorem+0x10c>
 800e000:	3c01      	subs	r4, #1
 800e002:	f101 0814 	add.w	r8, r1, #20
 800e006:	00a3      	lsls	r3, r4, #2
 800e008:	f100 0514 	add.w	r5, r0, #20
 800e00c:	9300      	str	r3, [sp, #0]
 800e00e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e012:	9301      	str	r3, [sp, #4]
 800e014:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e018:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e01c:	3301      	adds	r3, #1
 800e01e:	429a      	cmp	r2, r3
 800e020:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e024:	fbb2 f6f3 	udiv	r6, r2, r3
 800e028:	d32e      	bcc.n	800e088 <quorem+0x96>
 800e02a:	f04f 0a00 	mov.w	sl, #0
 800e02e:	46c4      	mov	ip, r8
 800e030:	46ae      	mov	lr, r5
 800e032:	46d3      	mov	fp, sl
 800e034:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e038:	b298      	uxth	r0, r3
 800e03a:	fb06 a000 	mla	r0, r6, r0, sl
 800e03e:	0c02      	lsrs	r2, r0, #16
 800e040:	0c1b      	lsrs	r3, r3, #16
 800e042:	fb06 2303 	mla	r3, r6, r3, r2
 800e046:	f8de 2000 	ldr.w	r2, [lr]
 800e04a:	b280      	uxth	r0, r0
 800e04c:	b292      	uxth	r2, r2
 800e04e:	1a12      	subs	r2, r2, r0
 800e050:	445a      	add	r2, fp
 800e052:	f8de 0000 	ldr.w	r0, [lr]
 800e056:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e05a:	b29b      	uxth	r3, r3
 800e05c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e060:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e064:	b292      	uxth	r2, r2
 800e066:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e06a:	45e1      	cmp	r9, ip
 800e06c:	f84e 2b04 	str.w	r2, [lr], #4
 800e070:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e074:	d2de      	bcs.n	800e034 <quorem+0x42>
 800e076:	9b00      	ldr	r3, [sp, #0]
 800e078:	58eb      	ldr	r3, [r5, r3]
 800e07a:	b92b      	cbnz	r3, 800e088 <quorem+0x96>
 800e07c:	9b01      	ldr	r3, [sp, #4]
 800e07e:	3b04      	subs	r3, #4
 800e080:	429d      	cmp	r5, r3
 800e082:	461a      	mov	r2, r3
 800e084:	d32f      	bcc.n	800e0e6 <quorem+0xf4>
 800e086:	613c      	str	r4, [r7, #16]
 800e088:	4638      	mov	r0, r7
 800e08a:	f001 fc93 	bl	800f9b4 <__mcmp>
 800e08e:	2800      	cmp	r0, #0
 800e090:	db25      	blt.n	800e0de <quorem+0xec>
 800e092:	4629      	mov	r1, r5
 800e094:	2000      	movs	r0, #0
 800e096:	f858 2b04 	ldr.w	r2, [r8], #4
 800e09a:	f8d1 c000 	ldr.w	ip, [r1]
 800e09e:	fa1f fe82 	uxth.w	lr, r2
 800e0a2:	fa1f f38c 	uxth.w	r3, ip
 800e0a6:	eba3 030e 	sub.w	r3, r3, lr
 800e0aa:	4403      	add	r3, r0
 800e0ac:	0c12      	lsrs	r2, r2, #16
 800e0ae:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e0b2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e0b6:	b29b      	uxth	r3, r3
 800e0b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e0bc:	45c1      	cmp	r9, r8
 800e0be:	f841 3b04 	str.w	r3, [r1], #4
 800e0c2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e0c6:	d2e6      	bcs.n	800e096 <quorem+0xa4>
 800e0c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e0cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e0d0:	b922      	cbnz	r2, 800e0dc <quorem+0xea>
 800e0d2:	3b04      	subs	r3, #4
 800e0d4:	429d      	cmp	r5, r3
 800e0d6:	461a      	mov	r2, r3
 800e0d8:	d30b      	bcc.n	800e0f2 <quorem+0x100>
 800e0da:	613c      	str	r4, [r7, #16]
 800e0dc:	3601      	adds	r6, #1
 800e0de:	4630      	mov	r0, r6
 800e0e0:	b003      	add	sp, #12
 800e0e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0e6:	6812      	ldr	r2, [r2, #0]
 800e0e8:	3b04      	subs	r3, #4
 800e0ea:	2a00      	cmp	r2, #0
 800e0ec:	d1cb      	bne.n	800e086 <quorem+0x94>
 800e0ee:	3c01      	subs	r4, #1
 800e0f0:	e7c6      	b.n	800e080 <quorem+0x8e>
 800e0f2:	6812      	ldr	r2, [r2, #0]
 800e0f4:	3b04      	subs	r3, #4
 800e0f6:	2a00      	cmp	r2, #0
 800e0f8:	d1ef      	bne.n	800e0da <quorem+0xe8>
 800e0fa:	3c01      	subs	r4, #1
 800e0fc:	e7ea      	b.n	800e0d4 <quorem+0xe2>
 800e0fe:	2000      	movs	r0, #0
 800e100:	e7ee      	b.n	800e0e0 <quorem+0xee>
 800e102:	0000      	movs	r0, r0
 800e104:	0000      	movs	r0, r0
	...

0800e108 <_dtoa_r>:
 800e108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e10c:	69c7      	ldr	r7, [r0, #28]
 800e10e:	b097      	sub	sp, #92	@ 0x5c
 800e110:	ed8d 0b04 	vstr	d0, [sp, #16]
 800e114:	ec55 4b10 	vmov	r4, r5, d0
 800e118:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800e11a:	9107      	str	r1, [sp, #28]
 800e11c:	4681      	mov	r9, r0
 800e11e:	920c      	str	r2, [sp, #48]	@ 0x30
 800e120:	9311      	str	r3, [sp, #68]	@ 0x44
 800e122:	b97f      	cbnz	r7, 800e144 <_dtoa_r+0x3c>
 800e124:	2010      	movs	r0, #16
 800e126:	f7fd fe3d 	bl	800bda4 <malloc>
 800e12a:	4602      	mov	r2, r0
 800e12c:	f8c9 001c 	str.w	r0, [r9, #28]
 800e130:	b920      	cbnz	r0, 800e13c <_dtoa_r+0x34>
 800e132:	4ba9      	ldr	r3, [pc, #676]	@ (800e3d8 <_dtoa_r+0x2d0>)
 800e134:	21ef      	movs	r1, #239	@ 0xef
 800e136:	48a9      	ldr	r0, [pc, #676]	@ (800e3dc <_dtoa_r+0x2d4>)
 800e138:	f7fd fe02 	bl	800bd40 <__assert_func>
 800e13c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e140:	6007      	str	r7, [r0, #0]
 800e142:	60c7      	str	r7, [r0, #12]
 800e144:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e148:	6819      	ldr	r1, [r3, #0]
 800e14a:	b159      	cbz	r1, 800e164 <_dtoa_r+0x5c>
 800e14c:	685a      	ldr	r2, [r3, #4]
 800e14e:	604a      	str	r2, [r1, #4]
 800e150:	2301      	movs	r3, #1
 800e152:	4093      	lsls	r3, r2
 800e154:	608b      	str	r3, [r1, #8]
 800e156:	4648      	mov	r0, r9
 800e158:	f001 f9b0 	bl	800f4bc <_Bfree>
 800e15c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e160:	2200      	movs	r2, #0
 800e162:	601a      	str	r2, [r3, #0]
 800e164:	1e2b      	subs	r3, r5, #0
 800e166:	bfb9      	ittee	lt
 800e168:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e16c:	9305      	strlt	r3, [sp, #20]
 800e16e:	2300      	movge	r3, #0
 800e170:	6033      	strge	r3, [r6, #0]
 800e172:	9f05      	ldr	r7, [sp, #20]
 800e174:	4b9a      	ldr	r3, [pc, #616]	@ (800e3e0 <_dtoa_r+0x2d8>)
 800e176:	bfbc      	itt	lt
 800e178:	2201      	movlt	r2, #1
 800e17a:	6032      	strlt	r2, [r6, #0]
 800e17c:	43bb      	bics	r3, r7
 800e17e:	d112      	bne.n	800e1a6 <_dtoa_r+0x9e>
 800e180:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e182:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e186:	6013      	str	r3, [r2, #0]
 800e188:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e18c:	4323      	orrs	r3, r4
 800e18e:	f000 855a 	beq.w	800ec46 <_dtoa_r+0xb3e>
 800e192:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e194:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800e3f4 <_dtoa_r+0x2ec>
 800e198:	2b00      	cmp	r3, #0
 800e19a:	f000 855c 	beq.w	800ec56 <_dtoa_r+0xb4e>
 800e19e:	f10a 0303 	add.w	r3, sl, #3
 800e1a2:	f000 bd56 	b.w	800ec52 <_dtoa_r+0xb4a>
 800e1a6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800e1aa:	2200      	movs	r2, #0
 800e1ac:	ec51 0b17 	vmov	r0, r1, d7
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800e1b6:	f7f2 fca7 	bl	8000b08 <__aeabi_dcmpeq>
 800e1ba:	4680      	mov	r8, r0
 800e1bc:	b158      	cbz	r0, 800e1d6 <_dtoa_r+0xce>
 800e1be:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e1c0:	2301      	movs	r3, #1
 800e1c2:	6013      	str	r3, [r2, #0]
 800e1c4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e1c6:	b113      	cbz	r3, 800e1ce <_dtoa_r+0xc6>
 800e1c8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800e1ca:	4b86      	ldr	r3, [pc, #536]	@ (800e3e4 <_dtoa_r+0x2dc>)
 800e1cc:	6013      	str	r3, [r2, #0]
 800e1ce:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800e3f8 <_dtoa_r+0x2f0>
 800e1d2:	f000 bd40 	b.w	800ec56 <_dtoa_r+0xb4e>
 800e1d6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800e1da:	aa14      	add	r2, sp, #80	@ 0x50
 800e1dc:	a915      	add	r1, sp, #84	@ 0x54
 800e1de:	4648      	mov	r0, r9
 800e1e0:	f001 fd08 	bl	800fbf4 <__d2b>
 800e1e4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e1e8:	9002      	str	r0, [sp, #8]
 800e1ea:	2e00      	cmp	r6, #0
 800e1ec:	d078      	beq.n	800e2e0 <_dtoa_r+0x1d8>
 800e1ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e1f0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800e1f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e1f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e1fc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e200:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e204:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e208:	4619      	mov	r1, r3
 800e20a:	2200      	movs	r2, #0
 800e20c:	4b76      	ldr	r3, [pc, #472]	@ (800e3e8 <_dtoa_r+0x2e0>)
 800e20e:	f7f2 f85b 	bl	80002c8 <__aeabi_dsub>
 800e212:	a36b      	add	r3, pc, #428	@ (adr r3, 800e3c0 <_dtoa_r+0x2b8>)
 800e214:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e218:	f7f2 fa0e 	bl	8000638 <__aeabi_dmul>
 800e21c:	a36a      	add	r3, pc, #424	@ (adr r3, 800e3c8 <_dtoa_r+0x2c0>)
 800e21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e222:	f7f2 f853 	bl	80002cc <__adddf3>
 800e226:	4604      	mov	r4, r0
 800e228:	4630      	mov	r0, r6
 800e22a:	460d      	mov	r5, r1
 800e22c:	f7f2 f99a 	bl	8000564 <__aeabi_i2d>
 800e230:	a367      	add	r3, pc, #412	@ (adr r3, 800e3d0 <_dtoa_r+0x2c8>)
 800e232:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e236:	f7f2 f9ff 	bl	8000638 <__aeabi_dmul>
 800e23a:	4602      	mov	r2, r0
 800e23c:	460b      	mov	r3, r1
 800e23e:	4620      	mov	r0, r4
 800e240:	4629      	mov	r1, r5
 800e242:	f7f2 f843 	bl	80002cc <__adddf3>
 800e246:	4604      	mov	r4, r0
 800e248:	460d      	mov	r5, r1
 800e24a:	f7f2 fca5 	bl	8000b98 <__aeabi_d2iz>
 800e24e:	2200      	movs	r2, #0
 800e250:	4607      	mov	r7, r0
 800e252:	2300      	movs	r3, #0
 800e254:	4620      	mov	r0, r4
 800e256:	4629      	mov	r1, r5
 800e258:	f7f2 fc60 	bl	8000b1c <__aeabi_dcmplt>
 800e25c:	b140      	cbz	r0, 800e270 <_dtoa_r+0x168>
 800e25e:	4638      	mov	r0, r7
 800e260:	f7f2 f980 	bl	8000564 <__aeabi_i2d>
 800e264:	4622      	mov	r2, r4
 800e266:	462b      	mov	r3, r5
 800e268:	f7f2 fc4e 	bl	8000b08 <__aeabi_dcmpeq>
 800e26c:	b900      	cbnz	r0, 800e270 <_dtoa_r+0x168>
 800e26e:	3f01      	subs	r7, #1
 800e270:	2f16      	cmp	r7, #22
 800e272:	d852      	bhi.n	800e31a <_dtoa_r+0x212>
 800e274:	4b5d      	ldr	r3, [pc, #372]	@ (800e3ec <_dtoa_r+0x2e4>)
 800e276:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e27e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e282:	f7f2 fc4b 	bl	8000b1c <__aeabi_dcmplt>
 800e286:	2800      	cmp	r0, #0
 800e288:	d049      	beq.n	800e31e <_dtoa_r+0x216>
 800e28a:	3f01      	subs	r7, #1
 800e28c:	2300      	movs	r3, #0
 800e28e:	9310      	str	r3, [sp, #64]	@ 0x40
 800e290:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e292:	1b9b      	subs	r3, r3, r6
 800e294:	1e5a      	subs	r2, r3, #1
 800e296:	bf45      	ittet	mi
 800e298:	f1c3 0301 	rsbmi	r3, r3, #1
 800e29c:	9300      	strmi	r3, [sp, #0]
 800e29e:	2300      	movpl	r3, #0
 800e2a0:	2300      	movmi	r3, #0
 800e2a2:	9206      	str	r2, [sp, #24]
 800e2a4:	bf54      	ite	pl
 800e2a6:	9300      	strpl	r3, [sp, #0]
 800e2a8:	9306      	strmi	r3, [sp, #24]
 800e2aa:	2f00      	cmp	r7, #0
 800e2ac:	db39      	blt.n	800e322 <_dtoa_r+0x21a>
 800e2ae:	9b06      	ldr	r3, [sp, #24]
 800e2b0:	970d      	str	r7, [sp, #52]	@ 0x34
 800e2b2:	443b      	add	r3, r7
 800e2b4:	9306      	str	r3, [sp, #24]
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	9308      	str	r3, [sp, #32]
 800e2ba:	9b07      	ldr	r3, [sp, #28]
 800e2bc:	2b09      	cmp	r3, #9
 800e2be:	d863      	bhi.n	800e388 <_dtoa_r+0x280>
 800e2c0:	2b05      	cmp	r3, #5
 800e2c2:	bfc4      	itt	gt
 800e2c4:	3b04      	subgt	r3, #4
 800e2c6:	9307      	strgt	r3, [sp, #28]
 800e2c8:	9b07      	ldr	r3, [sp, #28]
 800e2ca:	f1a3 0302 	sub.w	r3, r3, #2
 800e2ce:	bfcc      	ite	gt
 800e2d0:	2400      	movgt	r4, #0
 800e2d2:	2401      	movle	r4, #1
 800e2d4:	2b03      	cmp	r3, #3
 800e2d6:	d863      	bhi.n	800e3a0 <_dtoa_r+0x298>
 800e2d8:	e8df f003 	tbb	[pc, r3]
 800e2dc:	2b375452 	.word	0x2b375452
 800e2e0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800e2e4:	441e      	add	r6, r3
 800e2e6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e2ea:	2b20      	cmp	r3, #32
 800e2ec:	bfc1      	itttt	gt
 800e2ee:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e2f2:	409f      	lslgt	r7, r3
 800e2f4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e2f8:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e2fc:	bfd6      	itet	le
 800e2fe:	f1c3 0320 	rsble	r3, r3, #32
 800e302:	ea47 0003 	orrgt.w	r0, r7, r3
 800e306:	fa04 f003 	lslle.w	r0, r4, r3
 800e30a:	f7f2 f91b 	bl	8000544 <__aeabi_ui2d>
 800e30e:	2201      	movs	r2, #1
 800e310:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e314:	3e01      	subs	r6, #1
 800e316:	9212      	str	r2, [sp, #72]	@ 0x48
 800e318:	e776      	b.n	800e208 <_dtoa_r+0x100>
 800e31a:	2301      	movs	r3, #1
 800e31c:	e7b7      	b.n	800e28e <_dtoa_r+0x186>
 800e31e:	9010      	str	r0, [sp, #64]	@ 0x40
 800e320:	e7b6      	b.n	800e290 <_dtoa_r+0x188>
 800e322:	9b00      	ldr	r3, [sp, #0]
 800e324:	1bdb      	subs	r3, r3, r7
 800e326:	9300      	str	r3, [sp, #0]
 800e328:	427b      	negs	r3, r7
 800e32a:	9308      	str	r3, [sp, #32]
 800e32c:	2300      	movs	r3, #0
 800e32e:	930d      	str	r3, [sp, #52]	@ 0x34
 800e330:	e7c3      	b.n	800e2ba <_dtoa_r+0x1b2>
 800e332:	2301      	movs	r3, #1
 800e334:	9309      	str	r3, [sp, #36]	@ 0x24
 800e336:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e338:	eb07 0b03 	add.w	fp, r7, r3
 800e33c:	f10b 0301 	add.w	r3, fp, #1
 800e340:	2b01      	cmp	r3, #1
 800e342:	9303      	str	r3, [sp, #12]
 800e344:	bfb8      	it	lt
 800e346:	2301      	movlt	r3, #1
 800e348:	e006      	b.n	800e358 <_dtoa_r+0x250>
 800e34a:	2301      	movs	r3, #1
 800e34c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e34e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e350:	2b00      	cmp	r3, #0
 800e352:	dd28      	ble.n	800e3a6 <_dtoa_r+0x29e>
 800e354:	469b      	mov	fp, r3
 800e356:	9303      	str	r3, [sp, #12]
 800e358:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800e35c:	2100      	movs	r1, #0
 800e35e:	2204      	movs	r2, #4
 800e360:	f102 0514 	add.w	r5, r2, #20
 800e364:	429d      	cmp	r5, r3
 800e366:	d926      	bls.n	800e3b6 <_dtoa_r+0x2ae>
 800e368:	6041      	str	r1, [r0, #4]
 800e36a:	4648      	mov	r0, r9
 800e36c:	f001 f866 	bl	800f43c <_Balloc>
 800e370:	4682      	mov	sl, r0
 800e372:	2800      	cmp	r0, #0
 800e374:	d142      	bne.n	800e3fc <_dtoa_r+0x2f4>
 800e376:	4b1e      	ldr	r3, [pc, #120]	@ (800e3f0 <_dtoa_r+0x2e8>)
 800e378:	4602      	mov	r2, r0
 800e37a:	f240 11af 	movw	r1, #431	@ 0x1af
 800e37e:	e6da      	b.n	800e136 <_dtoa_r+0x2e>
 800e380:	2300      	movs	r3, #0
 800e382:	e7e3      	b.n	800e34c <_dtoa_r+0x244>
 800e384:	2300      	movs	r3, #0
 800e386:	e7d5      	b.n	800e334 <_dtoa_r+0x22c>
 800e388:	2401      	movs	r4, #1
 800e38a:	2300      	movs	r3, #0
 800e38c:	9307      	str	r3, [sp, #28]
 800e38e:	9409      	str	r4, [sp, #36]	@ 0x24
 800e390:	f04f 3bff 	mov.w	fp, #4294967295
 800e394:	2200      	movs	r2, #0
 800e396:	f8cd b00c 	str.w	fp, [sp, #12]
 800e39a:	2312      	movs	r3, #18
 800e39c:	920c      	str	r2, [sp, #48]	@ 0x30
 800e39e:	e7db      	b.n	800e358 <_dtoa_r+0x250>
 800e3a0:	2301      	movs	r3, #1
 800e3a2:	9309      	str	r3, [sp, #36]	@ 0x24
 800e3a4:	e7f4      	b.n	800e390 <_dtoa_r+0x288>
 800e3a6:	f04f 0b01 	mov.w	fp, #1
 800e3aa:	f8cd b00c 	str.w	fp, [sp, #12]
 800e3ae:	465b      	mov	r3, fp
 800e3b0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800e3b4:	e7d0      	b.n	800e358 <_dtoa_r+0x250>
 800e3b6:	3101      	adds	r1, #1
 800e3b8:	0052      	lsls	r2, r2, #1
 800e3ba:	e7d1      	b.n	800e360 <_dtoa_r+0x258>
 800e3bc:	f3af 8000 	nop.w
 800e3c0:	636f4361 	.word	0x636f4361
 800e3c4:	3fd287a7 	.word	0x3fd287a7
 800e3c8:	8b60c8b3 	.word	0x8b60c8b3
 800e3cc:	3fc68a28 	.word	0x3fc68a28
 800e3d0:	509f79fb 	.word	0x509f79fb
 800e3d4:	3fd34413 	.word	0x3fd34413
 800e3d8:	0801101c 	.word	0x0801101c
 800e3dc:	08011033 	.word	0x08011033
 800e3e0:	7ff00000 	.word	0x7ff00000
 800e3e4:	08010fdf 	.word	0x08010fdf
 800e3e8:	3ff80000 	.word	0x3ff80000
 800e3ec:	080111f0 	.word	0x080111f0
 800e3f0:	0801108b 	.word	0x0801108b
 800e3f4:	08011018 	.word	0x08011018
 800e3f8:	08010fde 	.word	0x08010fde
 800e3fc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e400:	6018      	str	r0, [r3, #0]
 800e402:	9b03      	ldr	r3, [sp, #12]
 800e404:	2b0e      	cmp	r3, #14
 800e406:	f200 80a1 	bhi.w	800e54c <_dtoa_r+0x444>
 800e40a:	2c00      	cmp	r4, #0
 800e40c:	f000 809e 	beq.w	800e54c <_dtoa_r+0x444>
 800e410:	2f00      	cmp	r7, #0
 800e412:	dd33      	ble.n	800e47c <_dtoa_r+0x374>
 800e414:	4b9c      	ldr	r3, [pc, #624]	@ (800e688 <_dtoa_r+0x580>)
 800e416:	f007 020f 	and.w	r2, r7, #15
 800e41a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e41e:	ed93 7b00 	vldr	d7, [r3]
 800e422:	05f8      	lsls	r0, r7, #23
 800e424:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800e428:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e42c:	d516      	bpl.n	800e45c <_dtoa_r+0x354>
 800e42e:	4b97      	ldr	r3, [pc, #604]	@ (800e68c <_dtoa_r+0x584>)
 800e430:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e434:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e438:	f7f2 fa28 	bl	800088c <__aeabi_ddiv>
 800e43c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e440:	f004 040f 	and.w	r4, r4, #15
 800e444:	2603      	movs	r6, #3
 800e446:	4d91      	ldr	r5, [pc, #580]	@ (800e68c <_dtoa_r+0x584>)
 800e448:	b954      	cbnz	r4, 800e460 <_dtoa_r+0x358>
 800e44a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e44e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e452:	f7f2 fa1b 	bl	800088c <__aeabi_ddiv>
 800e456:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e45a:	e028      	b.n	800e4ae <_dtoa_r+0x3a6>
 800e45c:	2602      	movs	r6, #2
 800e45e:	e7f2      	b.n	800e446 <_dtoa_r+0x33e>
 800e460:	07e1      	lsls	r1, r4, #31
 800e462:	d508      	bpl.n	800e476 <_dtoa_r+0x36e>
 800e464:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e468:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e46c:	f7f2 f8e4 	bl	8000638 <__aeabi_dmul>
 800e470:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e474:	3601      	adds	r6, #1
 800e476:	1064      	asrs	r4, r4, #1
 800e478:	3508      	adds	r5, #8
 800e47a:	e7e5      	b.n	800e448 <_dtoa_r+0x340>
 800e47c:	f000 80af 	beq.w	800e5de <_dtoa_r+0x4d6>
 800e480:	427c      	negs	r4, r7
 800e482:	4b81      	ldr	r3, [pc, #516]	@ (800e688 <_dtoa_r+0x580>)
 800e484:	4d81      	ldr	r5, [pc, #516]	@ (800e68c <_dtoa_r+0x584>)
 800e486:	f004 020f 	and.w	r2, r4, #15
 800e48a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e492:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e496:	f7f2 f8cf 	bl	8000638 <__aeabi_dmul>
 800e49a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e49e:	1124      	asrs	r4, r4, #4
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	2602      	movs	r6, #2
 800e4a4:	2c00      	cmp	r4, #0
 800e4a6:	f040 808f 	bne.w	800e5c8 <_dtoa_r+0x4c0>
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d1d3      	bne.n	800e456 <_dtoa_r+0x34e>
 800e4ae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e4b0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	f000 8094 	beq.w	800e5e2 <_dtoa_r+0x4da>
 800e4ba:	4b75      	ldr	r3, [pc, #468]	@ (800e690 <_dtoa_r+0x588>)
 800e4bc:	2200      	movs	r2, #0
 800e4be:	4620      	mov	r0, r4
 800e4c0:	4629      	mov	r1, r5
 800e4c2:	f7f2 fb2b 	bl	8000b1c <__aeabi_dcmplt>
 800e4c6:	2800      	cmp	r0, #0
 800e4c8:	f000 808b 	beq.w	800e5e2 <_dtoa_r+0x4da>
 800e4cc:	9b03      	ldr	r3, [sp, #12]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	f000 8087 	beq.w	800e5e2 <_dtoa_r+0x4da>
 800e4d4:	f1bb 0f00 	cmp.w	fp, #0
 800e4d8:	dd34      	ble.n	800e544 <_dtoa_r+0x43c>
 800e4da:	4620      	mov	r0, r4
 800e4dc:	4b6d      	ldr	r3, [pc, #436]	@ (800e694 <_dtoa_r+0x58c>)
 800e4de:	2200      	movs	r2, #0
 800e4e0:	4629      	mov	r1, r5
 800e4e2:	f7f2 f8a9 	bl	8000638 <__aeabi_dmul>
 800e4e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e4ea:	f107 38ff 	add.w	r8, r7, #4294967295
 800e4ee:	3601      	adds	r6, #1
 800e4f0:	465c      	mov	r4, fp
 800e4f2:	4630      	mov	r0, r6
 800e4f4:	f7f2 f836 	bl	8000564 <__aeabi_i2d>
 800e4f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e4fc:	f7f2 f89c 	bl	8000638 <__aeabi_dmul>
 800e500:	4b65      	ldr	r3, [pc, #404]	@ (800e698 <_dtoa_r+0x590>)
 800e502:	2200      	movs	r2, #0
 800e504:	f7f1 fee2 	bl	80002cc <__adddf3>
 800e508:	4605      	mov	r5, r0
 800e50a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e50e:	2c00      	cmp	r4, #0
 800e510:	d16a      	bne.n	800e5e8 <_dtoa_r+0x4e0>
 800e512:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e516:	4b61      	ldr	r3, [pc, #388]	@ (800e69c <_dtoa_r+0x594>)
 800e518:	2200      	movs	r2, #0
 800e51a:	f7f1 fed5 	bl	80002c8 <__aeabi_dsub>
 800e51e:	4602      	mov	r2, r0
 800e520:	460b      	mov	r3, r1
 800e522:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e526:	462a      	mov	r2, r5
 800e528:	4633      	mov	r3, r6
 800e52a:	f7f2 fb15 	bl	8000b58 <__aeabi_dcmpgt>
 800e52e:	2800      	cmp	r0, #0
 800e530:	f040 8298 	bne.w	800ea64 <_dtoa_r+0x95c>
 800e534:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e538:	462a      	mov	r2, r5
 800e53a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e53e:	f7f2 faed 	bl	8000b1c <__aeabi_dcmplt>
 800e542:	bb38      	cbnz	r0, 800e594 <_dtoa_r+0x48c>
 800e544:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800e548:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800e54c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e54e:	2b00      	cmp	r3, #0
 800e550:	f2c0 8157 	blt.w	800e802 <_dtoa_r+0x6fa>
 800e554:	2f0e      	cmp	r7, #14
 800e556:	f300 8154 	bgt.w	800e802 <_dtoa_r+0x6fa>
 800e55a:	4b4b      	ldr	r3, [pc, #300]	@ (800e688 <_dtoa_r+0x580>)
 800e55c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e560:	ed93 7b00 	vldr	d7, [r3]
 800e564:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e566:	2b00      	cmp	r3, #0
 800e568:	ed8d 7b00 	vstr	d7, [sp]
 800e56c:	f280 80e5 	bge.w	800e73a <_dtoa_r+0x632>
 800e570:	9b03      	ldr	r3, [sp, #12]
 800e572:	2b00      	cmp	r3, #0
 800e574:	f300 80e1 	bgt.w	800e73a <_dtoa_r+0x632>
 800e578:	d10c      	bne.n	800e594 <_dtoa_r+0x48c>
 800e57a:	4b48      	ldr	r3, [pc, #288]	@ (800e69c <_dtoa_r+0x594>)
 800e57c:	2200      	movs	r2, #0
 800e57e:	ec51 0b17 	vmov	r0, r1, d7
 800e582:	f7f2 f859 	bl	8000638 <__aeabi_dmul>
 800e586:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e58a:	f7f2 fadb 	bl	8000b44 <__aeabi_dcmpge>
 800e58e:	2800      	cmp	r0, #0
 800e590:	f000 8266 	beq.w	800ea60 <_dtoa_r+0x958>
 800e594:	2400      	movs	r4, #0
 800e596:	4625      	mov	r5, r4
 800e598:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e59a:	4656      	mov	r6, sl
 800e59c:	ea6f 0803 	mvn.w	r8, r3
 800e5a0:	2700      	movs	r7, #0
 800e5a2:	4621      	mov	r1, r4
 800e5a4:	4648      	mov	r0, r9
 800e5a6:	f000 ff89 	bl	800f4bc <_Bfree>
 800e5aa:	2d00      	cmp	r5, #0
 800e5ac:	f000 80bd 	beq.w	800e72a <_dtoa_r+0x622>
 800e5b0:	b12f      	cbz	r7, 800e5be <_dtoa_r+0x4b6>
 800e5b2:	42af      	cmp	r7, r5
 800e5b4:	d003      	beq.n	800e5be <_dtoa_r+0x4b6>
 800e5b6:	4639      	mov	r1, r7
 800e5b8:	4648      	mov	r0, r9
 800e5ba:	f000 ff7f 	bl	800f4bc <_Bfree>
 800e5be:	4629      	mov	r1, r5
 800e5c0:	4648      	mov	r0, r9
 800e5c2:	f000 ff7b 	bl	800f4bc <_Bfree>
 800e5c6:	e0b0      	b.n	800e72a <_dtoa_r+0x622>
 800e5c8:	07e2      	lsls	r2, r4, #31
 800e5ca:	d505      	bpl.n	800e5d8 <_dtoa_r+0x4d0>
 800e5cc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e5d0:	f7f2 f832 	bl	8000638 <__aeabi_dmul>
 800e5d4:	3601      	adds	r6, #1
 800e5d6:	2301      	movs	r3, #1
 800e5d8:	1064      	asrs	r4, r4, #1
 800e5da:	3508      	adds	r5, #8
 800e5dc:	e762      	b.n	800e4a4 <_dtoa_r+0x39c>
 800e5de:	2602      	movs	r6, #2
 800e5e0:	e765      	b.n	800e4ae <_dtoa_r+0x3a6>
 800e5e2:	9c03      	ldr	r4, [sp, #12]
 800e5e4:	46b8      	mov	r8, r7
 800e5e6:	e784      	b.n	800e4f2 <_dtoa_r+0x3ea>
 800e5e8:	4b27      	ldr	r3, [pc, #156]	@ (800e688 <_dtoa_r+0x580>)
 800e5ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e5ec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e5f0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e5f4:	4454      	add	r4, sl
 800e5f6:	2900      	cmp	r1, #0
 800e5f8:	d054      	beq.n	800e6a4 <_dtoa_r+0x59c>
 800e5fa:	4929      	ldr	r1, [pc, #164]	@ (800e6a0 <_dtoa_r+0x598>)
 800e5fc:	2000      	movs	r0, #0
 800e5fe:	f7f2 f945 	bl	800088c <__aeabi_ddiv>
 800e602:	4633      	mov	r3, r6
 800e604:	462a      	mov	r2, r5
 800e606:	f7f1 fe5f 	bl	80002c8 <__aeabi_dsub>
 800e60a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e60e:	4656      	mov	r6, sl
 800e610:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e614:	f7f2 fac0 	bl	8000b98 <__aeabi_d2iz>
 800e618:	4605      	mov	r5, r0
 800e61a:	f7f1 ffa3 	bl	8000564 <__aeabi_i2d>
 800e61e:	4602      	mov	r2, r0
 800e620:	460b      	mov	r3, r1
 800e622:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e626:	f7f1 fe4f 	bl	80002c8 <__aeabi_dsub>
 800e62a:	3530      	adds	r5, #48	@ 0x30
 800e62c:	4602      	mov	r2, r0
 800e62e:	460b      	mov	r3, r1
 800e630:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e634:	f806 5b01 	strb.w	r5, [r6], #1
 800e638:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e63c:	f7f2 fa6e 	bl	8000b1c <__aeabi_dcmplt>
 800e640:	2800      	cmp	r0, #0
 800e642:	d172      	bne.n	800e72a <_dtoa_r+0x622>
 800e644:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e648:	4911      	ldr	r1, [pc, #68]	@ (800e690 <_dtoa_r+0x588>)
 800e64a:	2000      	movs	r0, #0
 800e64c:	f7f1 fe3c 	bl	80002c8 <__aeabi_dsub>
 800e650:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e654:	f7f2 fa62 	bl	8000b1c <__aeabi_dcmplt>
 800e658:	2800      	cmp	r0, #0
 800e65a:	f040 80b4 	bne.w	800e7c6 <_dtoa_r+0x6be>
 800e65e:	42a6      	cmp	r6, r4
 800e660:	f43f af70 	beq.w	800e544 <_dtoa_r+0x43c>
 800e664:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e668:	4b0a      	ldr	r3, [pc, #40]	@ (800e694 <_dtoa_r+0x58c>)
 800e66a:	2200      	movs	r2, #0
 800e66c:	f7f1 ffe4 	bl	8000638 <__aeabi_dmul>
 800e670:	4b08      	ldr	r3, [pc, #32]	@ (800e694 <_dtoa_r+0x58c>)
 800e672:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e676:	2200      	movs	r2, #0
 800e678:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e67c:	f7f1 ffdc 	bl	8000638 <__aeabi_dmul>
 800e680:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e684:	e7c4      	b.n	800e610 <_dtoa_r+0x508>
 800e686:	bf00      	nop
 800e688:	080111f0 	.word	0x080111f0
 800e68c:	080111c8 	.word	0x080111c8
 800e690:	3ff00000 	.word	0x3ff00000
 800e694:	40240000 	.word	0x40240000
 800e698:	401c0000 	.word	0x401c0000
 800e69c:	40140000 	.word	0x40140000
 800e6a0:	3fe00000 	.word	0x3fe00000
 800e6a4:	4631      	mov	r1, r6
 800e6a6:	4628      	mov	r0, r5
 800e6a8:	f7f1 ffc6 	bl	8000638 <__aeabi_dmul>
 800e6ac:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e6b0:	9413      	str	r4, [sp, #76]	@ 0x4c
 800e6b2:	4656      	mov	r6, sl
 800e6b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e6b8:	f7f2 fa6e 	bl	8000b98 <__aeabi_d2iz>
 800e6bc:	4605      	mov	r5, r0
 800e6be:	f7f1 ff51 	bl	8000564 <__aeabi_i2d>
 800e6c2:	4602      	mov	r2, r0
 800e6c4:	460b      	mov	r3, r1
 800e6c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e6ca:	f7f1 fdfd 	bl	80002c8 <__aeabi_dsub>
 800e6ce:	3530      	adds	r5, #48	@ 0x30
 800e6d0:	f806 5b01 	strb.w	r5, [r6], #1
 800e6d4:	4602      	mov	r2, r0
 800e6d6:	460b      	mov	r3, r1
 800e6d8:	42a6      	cmp	r6, r4
 800e6da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e6de:	f04f 0200 	mov.w	r2, #0
 800e6e2:	d124      	bne.n	800e72e <_dtoa_r+0x626>
 800e6e4:	4baf      	ldr	r3, [pc, #700]	@ (800e9a4 <_dtoa_r+0x89c>)
 800e6e6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e6ea:	f7f1 fdef 	bl	80002cc <__adddf3>
 800e6ee:	4602      	mov	r2, r0
 800e6f0:	460b      	mov	r3, r1
 800e6f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e6f6:	f7f2 fa2f 	bl	8000b58 <__aeabi_dcmpgt>
 800e6fa:	2800      	cmp	r0, #0
 800e6fc:	d163      	bne.n	800e7c6 <_dtoa_r+0x6be>
 800e6fe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e702:	49a8      	ldr	r1, [pc, #672]	@ (800e9a4 <_dtoa_r+0x89c>)
 800e704:	2000      	movs	r0, #0
 800e706:	f7f1 fddf 	bl	80002c8 <__aeabi_dsub>
 800e70a:	4602      	mov	r2, r0
 800e70c:	460b      	mov	r3, r1
 800e70e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e712:	f7f2 fa03 	bl	8000b1c <__aeabi_dcmplt>
 800e716:	2800      	cmp	r0, #0
 800e718:	f43f af14 	beq.w	800e544 <_dtoa_r+0x43c>
 800e71c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800e71e:	1e73      	subs	r3, r6, #1
 800e720:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e722:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e726:	2b30      	cmp	r3, #48	@ 0x30
 800e728:	d0f8      	beq.n	800e71c <_dtoa_r+0x614>
 800e72a:	4647      	mov	r7, r8
 800e72c:	e03b      	b.n	800e7a6 <_dtoa_r+0x69e>
 800e72e:	4b9e      	ldr	r3, [pc, #632]	@ (800e9a8 <_dtoa_r+0x8a0>)
 800e730:	f7f1 ff82 	bl	8000638 <__aeabi_dmul>
 800e734:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e738:	e7bc      	b.n	800e6b4 <_dtoa_r+0x5ac>
 800e73a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800e73e:	4656      	mov	r6, sl
 800e740:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e744:	4620      	mov	r0, r4
 800e746:	4629      	mov	r1, r5
 800e748:	f7f2 f8a0 	bl	800088c <__aeabi_ddiv>
 800e74c:	f7f2 fa24 	bl	8000b98 <__aeabi_d2iz>
 800e750:	4680      	mov	r8, r0
 800e752:	f7f1 ff07 	bl	8000564 <__aeabi_i2d>
 800e756:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e75a:	f7f1 ff6d 	bl	8000638 <__aeabi_dmul>
 800e75e:	4602      	mov	r2, r0
 800e760:	460b      	mov	r3, r1
 800e762:	4620      	mov	r0, r4
 800e764:	4629      	mov	r1, r5
 800e766:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e76a:	f7f1 fdad 	bl	80002c8 <__aeabi_dsub>
 800e76e:	f806 4b01 	strb.w	r4, [r6], #1
 800e772:	9d03      	ldr	r5, [sp, #12]
 800e774:	eba6 040a 	sub.w	r4, r6, sl
 800e778:	42a5      	cmp	r5, r4
 800e77a:	4602      	mov	r2, r0
 800e77c:	460b      	mov	r3, r1
 800e77e:	d133      	bne.n	800e7e8 <_dtoa_r+0x6e0>
 800e780:	f7f1 fda4 	bl	80002cc <__adddf3>
 800e784:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e788:	4604      	mov	r4, r0
 800e78a:	460d      	mov	r5, r1
 800e78c:	f7f2 f9e4 	bl	8000b58 <__aeabi_dcmpgt>
 800e790:	b9c0      	cbnz	r0, 800e7c4 <_dtoa_r+0x6bc>
 800e792:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e796:	4620      	mov	r0, r4
 800e798:	4629      	mov	r1, r5
 800e79a:	f7f2 f9b5 	bl	8000b08 <__aeabi_dcmpeq>
 800e79e:	b110      	cbz	r0, 800e7a6 <_dtoa_r+0x69e>
 800e7a0:	f018 0f01 	tst.w	r8, #1
 800e7a4:	d10e      	bne.n	800e7c4 <_dtoa_r+0x6bc>
 800e7a6:	9902      	ldr	r1, [sp, #8]
 800e7a8:	4648      	mov	r0, r9
 800e7aa:	f000 fe87 	bl	800f4bc <_Bfree>
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	7033      	strb	r3, [r6, #0]
 800e7b2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e7b4:	3701      	adds	r7, #1
 800e7b6:	601f      	str	r7, [r3, #0]
 800e7b8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	f000 824b 	beq.w	800ec56 <_dtoa_r+0xb4e>
 800e7c0:	601e      	str	r6, [r3, #0]
 800e7c2:	e248      	b.n	800ec56 <_dtoa_r+0xb4e>
 800e7c4:	46b8      	mov	r8, r7
 800e7c6:	4633      	mov	r3, r6
 800e7c8:	461e      	mov	r6, r3
 800e7ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e7ce:	2a39      	cmp	r2, #57	@ 0x39
 800e7d0:	d106      	bne.n	800e7e0 <_dtoa_r+0x6d8>
 800e7d2:	459a      	cmp	sl, r3
 800e7d4:	d1f8      	bne.n	800e7c8 <_dtoa_r+0x6c0>
 800e7d6:	2230      	movs	r2, #48	@ 0x30
 800e7d8:	f108 0801 	add.w	r8, r8, #1
 800e7dc:	f88a 2000 	strb.w	r2, [sl]
 800e7e0:	781a      	ldrb	r2, [r3, #0]
 800e7e2:	3201      	adds	r2, #1
 800e7e4:	701a      	strb	r2, [r3, #0]
 800e7e6:	e7a0      	b.n	800e72a <_dtoa_r+0x622>
 800e7e8:	4b6f      	ldr	r3, [pc, #444]	@ (800e9a8 <_dtoa_r+0x8a0>)
 800e7ea:	2200      	movs	r2, #0
 800e7ec:	f7f1 ff24 	bl	8000638 <__aeabi_dmul>
 800e7f0:	2200      	movs	r2, #0
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	4604      	mov	r4, r0
 800e7f6:	460d      	mov	r5, r1
 800e7f8:	f7f2 f986 	bl	8000b08 <__aeabi_dcmpeq>
 800e7fc:	2800      	cmp	r0, #0
 800e7fe:	d09f      	beq.n	800e740 <_dtoa_r+0x638>
 800e800:	e7d1      	b.n	800e7a6 <_dtoa_r+0x69e>
 800e802:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e804:	2a00      	cmp	r2, #0
 800e806:	f000 80ea 	beq.w	800e9de <_dtoa_r+0x8d6>
 800e80a:	9a07      	ldr	r2, [sp, #28]
 800e80c:	2a01      	cmp	r2, #1
 800e80e:	f300 80cd 	bgt.w	800e9ac <_dtoa_r+0x8a4>
 800e812:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e814:	2a00      	cmp	r2, #0
 800e816:	f000 80c1 	beq.w	800e99c <_dtoa_r+0x894>
 800e81a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e81e:	9c08      	ldr	r4, [sp, #32]
 800e820:	9e00      	ldr	r6, [sp, #0]
 800e822:	9a00      	ldr	r2, [sp, #0]
 800e824:	441a      	add	r2, r3
 800e826:	9200      	str	r2, [sp, #0]
 800e828:	9a06      	ldr	r2, [sp, #24]
 800e82a:	2101      	movs	r1, #1
 800e82c:	441a      	add	r2, r3
 800e82e:	4648      	mov	r0, r9
 800e830:	9206      	str	r2, [sp, #24]
 800e832:	f000 ff41 	bl	800f6b8 <__i2b>
 800e836:	4605      	mov	r5, r0
 800e838:	b166      	cbz	r6, 800e854 <_dtoa_r+0x74c>
 800e83a:	9b06      	ldr	r3, [sp, #24]
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	dd09      	ble.n	800e854 <_dtoa_r+0x74c>
 800e840:	42b3      	cmp	r3, r6
 800e842:	9a00      	ldr	r2, [sp, #0]
 800e844:	bfa8      	it	ge
 800e846:	4633      	movge	r3, r6
 800e848:	1ad2      	subs	r2, r2, r3
 800e84a:	9200      	str	r2, [sp, #0]
 800e84c:	9a06      	ldr	r2, [sp, #24]
 800e84e:	1af6      	subs	r6, r6, r3
 800e850:	1ad3      	subs	r3, r2, r3
 800e852:	9306      	str	r3, [sp, #24]
 800e854:	9b08      	ldr	r3, [sp, #32]
 800e856:	b30b      	cbz	r3, 800e89c <_dtoa_r+0x794>
 800e858:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	f000 80c6 	beq.w	800e9ec <_dtoa_r+0x8e4>
 800e860:	2c00      	cmp	r4, #0
 800e862:	f000 80c0 	beq.w	800e9e6 <_dtoa_r+0x8de>
 800e866:	4629      	mov	r1, r5
 800e868:	4622      	mov	r2, r4
 800e86a:	4648      	mov	r0, r9
 800e86c:	f000 ffdc 	bl	800f828 <__pow5mult>
 800e870:	9a02      	ldr	r2, [sp, #8]
 800e872:	4601      	mov	r1, r0
 800e874:	4605      	mov	r5, r0
 800e876:	4648      	mov	r0, r9
 800e878:	f000 ff34 	bl	800f6e4 <__multiply>
 800e87c:	9902      	ldr	r1, [sp, #8]
 800e87e:	4680      	mov	r8, r0
 800e880:	4648      	mov	r0, r9
 800e882:	f000 fe1b 	bl	800f4bc <_Bfree>
 800e886:	9b08      	ldr	r3, [sp, #32]
 800e888:	1b1b      	subs	r3, r3, r4
 800e88a:	9308      	str	r3, [sp, #32]
 800e88c:	f000 80b1 	beq.w	800e9f2 <_dtoa_r+0x8ea>
 800e890:	9a08      	ldr	r2, [sp, #32]
 800e892:	4641      	mov	r1, r8
 800e894:	4648      	mov	r0, r9
 800e896:	f000 ffc7 	bl	800f828 <__pow5mult>
 800e89a:	9002      	str	r0, [sp, #8]
 800e89c:	2101      	movs	r1, #1
 800e89e:	4648      	mov	r0, r9
 800e8a0:	f000 ff0a 	bl	800f6b8 <__i2b>
 800e8a4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e8a6:	4604      	mov	r4, r0
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	f000 81d8 	beq.w	800ec5e <_dtoa_r+0xb56>
 800e8ae:	461a      	mov	r2, r3
 800e8b0:	4601      	mov	r1, r0
 800e8b2:	4648      	mov	r0, r9
 800e8b4:	f000 ffb8 	bl	800f828 <__pow5mult>
 800e8b8:	9b07      	ldr	r3, [sp, #28]
 800e8ba:	2b01      	cmp	r3, #1
 800e8bc:	4604      	mov	r4, r0
 800e8be:	f300 809f 	bgt.w	800ea00 <_dtoa_r+0x8f8>
 800e8c2:	9b04      	ldr	r3, [sp, #16]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	f040 8097 	bne.w	800e9f8 <_dtoa_r+0x8f0>
 800e8ca:	9b05      	ldr	r3, [sp, #20]
 800e8cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	f040 8093 	bne.w	800e9fc <_dtoa_r+0x8f4>
 800e8d6:	9b05      	ldr	r3, [sp, #20]
 800e8d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e8dc:	0d1b      	lsrs	r3, r3, #20
 800e8de:	051b      	lsls	r3, r3, #20
 800e8e0:	b133      	cbz	r3, 800e8f0 <_dtoa_r+0x7e8>
 800e8e2:	9b00      	ldr	r3, [sp, #0]
 800e8e4:	3301      	adds	r3, #1
 800e8e6:	9300      	str	r3, [sp, #0]
 800e8e8:	9b06      	ldr	r3, [sp, #24]
 800e8ea:	3301      	adds	r3, #1
 800e8ec:	9306      	str	r3, [sp, #24]
 800e8ee:	2301      	movs	r3, #1
 800e8f0:	9308      	str	r3, [sp, #32]
 800e8f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	f000 81b8 	beq.w	800ec6a <_dtoa_r+0xb62>
 800e8fa:	6923      	ldr	r3, [r4, #16]
 800e8fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e900:	6918      	ldr	r0, [r3, #16]
 800e902:	f000 fe8d 	bl	800f620 <__hi0bits>
 800e906:	f1c0 0020 	rsb	r0, r0, #32
 800e90a:	9b06      	ldr	r3, [sp, #24]
 800e90c:	4418      	add	r0, r3
 800e90e:	f010 001f 	ands.w	r0, r0, #31
 800e912:	f000 8082 	beq.w	800ea1a <_dtoa_r+0x912>
 800e916:	f1c0 0320 	rsb	r3, r0, #32
 800e91a:	2b04      	cmp	r3, #4
 800e91c:	dd73      	ble.n	800ea06 <_dtoa_r+0x8fe>
 800e91e:	9b00      	ldr	r3, [sp, #0]
 800e920:	f1c0 001c 	rsb	r0, r0, #28
 800e924:	4403      	add	r3, r0
 800e926:	9300      	str	r3, [sp, #0]
 800e928:	9b06      	ldr	r3, [sp, #24]
 800e92a:	4403      	add	r3, r0
 800e92c:	4406      	add	r6, r0
 800e92e:	9306      	str	r3, [sp, #24]
 800e930:	9b00      	ldr	r3, [sp, #0]
 800e932:	2b00      	cmp	r3, #0
 800e934:	dd05      	ble.n	800e942 <_dtoa_r+0x83a>
 800e936:	9902      	ldr	r1, [sp, #8]
 800e938:	461a      	mov	r2, r3
 800e93a:	4648      	mov	r0, r9
 800e93c:	f000 ffce 	bl	800f8dc <__lshift>
 800e940:	9002      	str	r0, [sp, #8]
 800e942:	9b06      	ldr	r3, [sp, #24]
 800e944:	2b00      	cmp	r3, #0
 800e946:	dd05      	ble.n	800e954 <_dtoa_r+0x84c>
 800e948:	4621      	mov	r1, r4
 800e94a:	461a      	mov	r2, r3
 800e94c:	4648      	mov	r0, r9
 800e94e:	f000 ffc5 	bl	800f8dc <__lshift>
 800e952:	4604      	mov	r4, r0
 800e954:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e956:	2b00      	cmp	r3, #0
 800e958:	d061      	beq.n	800ea1e <_dtoa_r+0x916>
 800e95a:	9802      	ldr	r0, [sp, #8]
 800e95c:	4621      	mov	r1, r4
 800e95e:	f001 f829 	bl	800f9b4 <__mcmp>
 800e962:	2800      	cmp	r0, #0
 800e964:	da5b      	bge.n	800ea1e <_dtoa_r+0x916>
 800e966:	2300      	movs	r3, #0
 800e968:	9902      	ldr	r1, [sp, #8]
 800e96a:	220a      	movs	r2, #10
 800e96c:	4648      	mov	r0, r9
 800e96e:	f000 fdc7 	bl	800f500 <__multadd>
 800e972:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e974:	9002      	str	r0, [sp, #8]
 800e976:	f107 38ff 	add.w	r8, r7, #4294967295
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	f000 8177 	beq.w	800ec6e <_dtoa_r+0xb66>
 800e980:	4629      	mov	r1, r5
 800e982:	2300      	movs	r3, #0
 800e984:	220a      	movs	r2, #10
 800e986:	4648      	mov	r0, r9
 800e988:	f000 fdba 	bl	800f500 <__multadd>
 800e98c:	f1bb 0f00 	cmp.w	fp, #0
 800e990:	4605      	mov	r5, r0
 800e992:	dc6f      	bgt.n	800ea74 <_dtoa_r+0x96c>
 800e994:	9b07      	ldr	r3, [sp, #28]
 800e996:	2b02      	cmp	r3, #2
 800e998:	dc49      	bgt.n	800ea2e <_dtoa_r+0x926>
 800e99a:	e06b      	b.n	800ea74 <_dtoa_r+0x96c>
 800e99c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e99e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e9a2:	e73c      	b.n	800e81e <_dtoa_r+0x716>
 800e9a4:	3fe00000 	.word	0x3fe00000
 800e9a8:	40240000 	.word	0x40240000
 800e9ac:	9b03      	ldr	r3, [sp, #12]
 800e9ae:	1e5c      	subs	r4, r3, #1
 800e9b0:	9b08      	ldr	r3, [sp, #32]
 800e9b2:	42a3      	cmp	r3, r4
 800e9b4:	db09      	blt.n	800e9ca <_dtoa_r+0x8c2>
 800e9b6:	1b1c      	subs	r4, r3, r4
 800e9b8:	9b03      	ldr	r3, [sp, #12]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	f6bf af30 	bge.w	800e820 <_dtoa_r+0x718>
 800e9c0:	9b00      	ldr	r3, [sp, #0]
 800e9c2:	9a03      	ldr	r2, [sp, #12]
 800e9c4:	1a9e      	subs	r6, r3, r2
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	e72b      	b.n	800e822 <_dtoa_r+0x71a>
 800e9ca:	9b08      	ldr	r3, [sp, #32]
 800e9cc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e9ce:	9408      	str	r4, [sp, #32]
 800e9d0:	1ae3      	subs	r3, r4, r3
 800e9d2:	441a      	add	r2, r3
 800e9d4:	9e00      	ldr	r6, [sp, #0]
 800e9d6:	9b03      	ldr	r3, [sp, #12]
 800e9d8:	920d      	str	r2, [sp, #52]	@ 0x34
 800e9da:	2400      	movs	r4, #0
 800e9dc:	e721      	b.n	800e822 <_dtoa_r+0x71a>
 800e9de:	9c08      	ldr	r4, [sp, #32]
 800e9e0:	9e00      	ldr	r6, [sp, #0]
 800e9e2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800e9e4:	e728      	b.n	800e838 <_dtoa_r+0x730>
 800e9e6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800e9ea:	e751      	b.n	800e890 <_dtoa_r+0x788>
 800e9ec:	9a08      	ldr	r2, [sp, #32]
 800e9ee:	9902      	ldr	r1, [sp, #8]
 800e9f0:	e750      	b.n	800e894 <_dtoa_r+0x78c>
 800e9f2:	f8cd 8008 	str.w	r8, [sp, #8]
 800e9f6:	e751      	b.n	800e89c <_dtoa_r+0x794>
 800e9f8:	2300      	movs	r3, #0
 800e9fa:	e779      	b.n	800e8f0 <_dtoa_r+0x7e8>
 800e9fc:	9b04      	ldr	r3, [sp, #16]
 800e9fe:	e777      	b.n	800e8f0 <_dtoa_r+0x7e8>
 800ea00:	2300      	movs	r3, #0
 800ea02:	9308      	str	r3, [sp, #32]
 800ea04:	e779      	b.n	800e8fa <_dtoa_r+0x7f2>
 800ea06:	d093      	beq.n	800e930 <_dtoa_r+0x828>
 800ea08:	9a00      	ldr	r2, [sp, #0]
 800ea0a:	331c      	adds	r3, #28
 800ea0c:	441a      	add	r2, r3
 800ea0e:	9200      	str	r2, [sp, #0]
 800ea10:	9a06      	ldr	r2, [sp, #24]
 800ea12:	441a      	add	r2, r3
 800ea14:	441e      	add	r6, r3
 800ea16:	9206      	str	r2, [sp, #24]
 800ea18:	e78a      	b.n	800e930 <_dtoa_r+0x828>
 800ea1a:	4603      	mov	r3, r0
 800ea1c:	e7f4      	b.n	800ea08 <_dtoa_r+0x900>
 800ea1e:	9b03      	ldr	r3, [sp, #12]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	46b8      	mov	r8, r7
 800ea24:	dc20      	bgt.n	800ea68 <_dtoa_r+0x960>
 800ea26:	469b      	mov	fp, r3
 800ea28:	9b07      	ldr	r3, [sp, #28]
 800ea2a:	2b02      	cmp	r3, #2
 800ea2c:	dd1e      	ble.n	800ea6c <_dtoa_r+0x964>
 800ea2e:	f1bb 0f00 	cmp.w	fp, #0
 800ea32:	f47f adb1 	bne.w	800e598 <_dtoa_r+0x490>
 800ea36:	4621      	mov	r1, r4
 800ea38:	465b      	mov	r3, fp
 800ea3a:	2205      	movs	r2, #5
 800ea3c:	4648      	mov	r0, r9
 800ea3e:	f000 fd5f 	bl	800f500 <__multadd>
 800ea42:	4601      	mov	r1, r0
 800ea44:	4604      	mov	r4, r0
 800ea46:	9802      	ldr	r0, [sp, #8]
 800ea48:	f000 ffb4 	bl	800f9b4 <__mcmp>
 800ea4c:	2800      	cmp	r0, #0
 800ea4e:	f77f ada3 	ble.w	800e598 <_dtoa_r+0x490>
 800ea52:	4656      	mov	r6, sl
 800ea54:	2331      	movs	r3, #49	@ 0x31
 800ea56:	f806 3b01 	strb.w	r3, [r6], #1
 800ea5a:	f108 0801 	add.w	r8, r8, #1
 800ea5e:	e59f      	b.n	800e5a0 <_dtoa_r+0x498>
 800ea60:	9c03      	ldr	r4, [sp, #12]
 800ea62:	46b8      	mov	r8, r7
 800ea64:	4625      	mov	r5, r4
 800ea66:	e7f4      	b.n	800ea52 <_dtoa_r+0x94a>
 800ea68:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800ea6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	f000 8101 	beq.w	800ec76 <_dtoa_r+0xb6e>
 800ea74:	2e00      	cmp	r6, #0
 800ea76:	dd05      	ble.n	800ea84 <_dtoa_r+0x97c>
 800ea78:	4629      	mov	r1, r5
 800ea7a:	4632      	mov	r2, r6
 800ea7c:	4648      	mov	r0, r9
 800ea7e:	f000 ff2d 	bl	800f8dc <__lshift>
 800ea82:	4605      	mov	r5, r0
 800ea84:	9b08      	ldr	r3, [sp, #32]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d05c      	beq.n	800eb44 <_dtoa_r+0xa3c>
 800ea8a:	6869      	ldr	r1, [r5, #4]
 800ea8c:	4648      	mov	r0, r9
 800ea8e:	f000 fcd5 	bl	800f43c <_Balloc>
 800ea92:	4606      	mov	r6, r0
 800ea94:	b928      	cbnz	r0, 800eaa2 <_dtoa_r+0x99a>
 800ea96:	4b82      	ldr	r3, [pc, #520]	@ (800eca0 <_dtoa_r+0xb98>)
 800ea98:	4602      	mov	r2, r0
 800ea9a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ea9e:	f7ff bb4a 	b.w	800e136 <_dtoa_r+0x2e>
 800eaa2:	692a      	ldr	r2, [r5, #16]
 800eaa4:	3202      	adds	r2, #2
 800eaa6:	0092      	lsls	r2, r2, #2
 800eaa8:	f105 010c 	add.w	r1, r5, #12
 800eaac:	300c      	adds	r0, #12
 800eaae:	f7ff fa7a 	bl	800dfa6 <memcpy>
 800eab2:	2201      	movs	r2, #1
 800eab4:	4631      	mov	r1, r6
 800eab6:	4648      	mov	r0, r9
 800eab8:	f000 ff10 	bl	800f8dc <__lshift>
 800eabc:	f10a 0301 	add.w	r3, sl, #1
 800eac0:	9300      	str	r3, [sp, #0]
 800eac2:	eb0a 030b 	add.w	r3, sl, fp
 800eac6:	9308      	str	r3, [sp, #32]
 800eac8:	9b04      	ldr	r3, [sp, #16]
 800eaca:	f003 0301 	and.w	r3, r3, #1
 800eace:	462f      	mov	r7, r5
 800ead0:	9306      	str	r3, [sp, #24]
 800ead2:	4605      	mov	r5, r0
 800ead4:	9b00      	ldr	r3, [sp, #0]
 800ead6:	9802      	ldr	r0, [sp, #8]
 800ead8:	4621      	mov	r1, r4
 800eada:	f103 3bff 	add.w	fp, r3, #4294967295
 800eade:	f7ff fa88 	bl	800dff2 <quorem>
 800eae2:	4603      	mov	r3, r0
 800eae4:	3330      	adds	r3, #48	@ 0x30
 800eae6:	9003      	str	r0, [sp, #12]
 800eae8:	4639      	mov	r1, r7
 800eaea:	9802      	ldr	r0, [sp, #8]
 800eaec:	9309      	str	r3, [sp, #36]	@ 0x24
 800eaee:	f000 ff61 	bl	800f9b4 <__mcmp>
 800eaf2:	462a      	mov	r2, r5
 800eaf4:	9004      	str	r0, [sp, #16]
 800eaf6:	4621      	mov	r1, r4
 800eaf8:	4648      	mov	r0, r9
 800eafa:	f000 ff77 	bl	800f9ec <__mdiff>
 800eafe:	68c2      	ldr	r2, [r0, #12]
 800eb00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb02:	4606      	mov	r6, r0
 800eb04:	bb02      	cbnz	r2, 800eb48 <_dtoa_r+0xa40>
 800eb06:	4601      	mov	r1, r0
 800eb08:	9802      	ldr	r0, [sp, #8]
 800eb0a:	f000 ff53 	bl	800f9b4 <__mcmp>
 800eb0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb10:	4602      	mov	r2, r0
 800eb12:	4631      	mov	r1, r6
 800eb14:	4648      	mov	r0, r9
 800eb16:	920c      	str	r2, [sp, #48]	@ 0x30
 800eb18:	9309      	str	r3, [sp, #36]	@ 0x24
 800eb1a:	f000 fccf 	bl	800f4bc <_Bfree>
 800eb1e:	9b07      	ldr	r3, [sp, #28]
 800eb20:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800eb22:	9e00      	ldr	r6, [sp, #0]
 800eb24:	ea42 0103 	orr.w	r1, r2, r3
 800eb28:	9b06      	ldr	r3, [sp, #24]
 800eb2a:	4319      	orrs	r1, r3
 800eb2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb2e:	d10d      	bne.n	800eb4c <_dtoa_r+0xa44>
 800eb30:	2b39      	cmp	r3, #57	@ 0x39
 800eb32:	d027      	beq.n	800eb84 <_dtoa_r+0xa7c>
 800eb34:	9a04      	ldr	r2, [sp, #16]
 800eb36:	2a00      	cmp	r2, #0
 800eb38:	dd01      	ble.n	800eb3e <_dtoa_r+0xa36>
 800eb3a:	9b03      	ldr	r3, [sp, #12]
 800eb3c:	3331      	adds	r3, #49	@ 0x31
 800eb3e:	f88b 3000 	strb.w	r3, [fp]
 800eb42:	e52e      	b.n	800e5a2 <_dtoa_r+0x49a>
 800eb44:	4628      	mov	r0, r5
 800eb46:	e7b9      	b.n	800eabc <_dtoa_r+0x9b4>
 800eb48:	2201      	movs	r2, #1
 800eb4a:	e7e2      	b.n	800eb12 <_dtoa_r+0xa0a>
 800eb4c:	9904      	ldr	r1, [sp, #16]
 800eb4e:	2900      	cmp	r1, #0
 800eb50:	db04      	blt.n	800eb5c <_dtoa_r+0xa54>
 800eb52:	9807      	ldr	r0, [sp, #28]
 800eb54:	4301      	orrs	r1, r0
 800eb56:	9806      	ldr	r0, [sp, #24]
 800eb58:	4301      	orrs	r1, r0
 800eb5a:	d120      	bne.n	800eb9e <_dtoa_r+0xa96>
 800eb5c:	2a00      	cmp	r2, #0
 800eb5e:	ddee      	ble.n	800eb3e <_dtoa_r+0xa36>
 800eb60:	9902      	ldr	r1, [sp, #8]
 800eb62:	9300      	str	r3, [sp, #0]
 800eb64:	2201      	movs	r2, #1
 800eb66:	4648      	mov	r0, r9
 800eb68:	f000 feb8 	bl	800f8dc <__lshift>
 800eb6c:	4621      	mov	r1, r4
 800eb6e:	9002      	str	r0, [sp, #8]
 800eb70:	f000 ff20 	bl	800f9b4 <__mcmp>
 800eb74:	2800      	cmp	r0, #0
 800eb76:	9b00      	ldr	r3, [sp, #0]
 800eb78:	dc02      	bgt.n	800eb80 <_dtoa_r+0xa78>
 800eb7a:	d1e0      	bne.n	800eb3e <_dtoa_r+0xa36>
 800eb7c:	07da      	lsls	r2, r3, #31
 800eb7e:	d5de      	bpl.n	800eb3e <_dtoa_r+0xa36>
 800eb80:	2b39      	cmp	r3, #57	@ 0x39
 800eb82:	d1da      	bne.n	800eb3a <_dtoa_r+0xa32>
 800eb84:	2339      	movs	r3, #57	@ 0x39
 800eb86:	f88b 3000 	strb.w	r3, [fp]
 800eb8a:	4633      	mov	r3, r6
 800eb8c:	461e      	mov	r6, r3
 800eb8e:	3b01      	subs	r3, #1
 800eb90:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800eb94:	2a39      	cmp	r2, #57	@ 0x39
 800eb96:	d04e      	beq.n	800ec36 <_dtoa_r+0xb2e>
 800eb98:	3201      	adds	r2, #1
 800eb9a:	701a      	strb	r2, [r3, #0]
 800eb9c:	e501      	b.n	800e5a2 <_dtoa_r+0x49a>
 800eb9e:	2a00      	cmp	r2, #0
 800eba0:	dd03      	ble.n	800ebaa <_dtoa_r+0xaa2>
 800eba2:	2b39      	cmp	r3, #57	@ 0x39
 800eba4:	d0ee      	beq.n	800eb84 <_dtoa_r+0xa7c>
 800eba6:	3301      	adds	r3, #1
 800eba8:	e7c9      	b.n	800eb3e <_dtoa_r+0xa36>
 800ebaa:	9a00      	ldr	r2, [sp, #0]
 800ebac:	9908      	ldr	r1, [sp, #32]
 800ebae:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ebb2:	428a      	cmp	r2, r1
 800ebb4:	d028      	beq.n	800ec08 <_dtoa_r+0xb00>
 800ebb6:	9902      	ldr	r1, [sp, #8]
 800ebb8:	2300      	movs	r3, #0
 800ebba:	220a      	movs	r2, #10
 800ebbc:	4648      	mov	r0, r9
 800ebbe:	f000 fc9f 	bl	800f500 <__multadd>
 800ebc2:	42af      	cmp	r7, r5
 800ebc4:	9002      	str	r0, [sp, #8]
 800ebc6:	f04f 0300 	mov.w	r3, #0
 800ebca:	f04f 020a 	mov.w	r2, #10
 800ebce:	4639      	mov	r1, r7
 800ebd0:	4648      	mov	r0, r9
 800ebd2:	d107      	bne.n	800ebe4 <_dtoa_r+0xadc>
 800ebd4:	f000 fc94 	bl	800f500 <__multadd>
 800ebd8:	4607      	mov	r7, r0
 800ebda:	4605      	mov	r5, r0
 800ebdc:	9b00      	ldr	r3, [sp, #0]
 800ebde:	3301      	adds	r3, #1
 800ebe0:	9300      	str	r3, [sp, #0]
 800ebe2:	e777      	b.n	800ead4 <_dtoa_r+0x9cc>
 800ebe4:	f000 fc8c 	bl	800f500 <__multadd>
 800ebe8:	4629      	mov	r1, r5
 800ebea:	4607      	mov	r7, r0
 800ebec:	2300      	movs	r3, #0
 800ebee:	220a      	movs	r2, #10
 800ebf0:	4648      	mov	r0, r9
 800ebf2:	f000 fc85 	bl	800f500 <__multadd>
 800ebf6:	4605      	mov	r5, r0
 800ebf8:	e7f0      	b.n	800ebdc <_dtoa_r+0xad4>
 800ebfa:	f1bb 0f00 	cmp.w	fp, #0
 800ebfe:	bfcc      	ite	gt
 800ec00:	465e      	movgt	r6, fp
 800ec02:	2601      	movle	r6, #1
 800ec04:	4456      	add	r6, sl
 800ec06:	2700      	movs	r7, #0
 800ec08:	9902      	ldr	r1, [sp, #8]
 800ec0a:	9300      	str	r3, [sp, #0]
 800ec0c:	2201      	movs	r2, #1
 800ec0e:	4648      	mov	r0, r9
 800ec10:	f000 fe64 	bl	800f8dc <__lshift>
 800ec14:	4621      	mov	r1, r4
 800ec16:	9002      	str	r0, [sp, #8]
 800ec18:	f000 fecc 	bl	800f9b4 <__mcmp>
 800ec1c:	2800      	cmp	r0, #0
 800ec1e:	dcb4      	bgt.n	800eb8a <_dtoa_r+0xa82>
 800ec20:	d102      	bne.n	800ec28 <_dtoa_r+0xb20>
 800ec22:	9b00      	ldr	r3, [sp, #0]
 800ec24:	07db      	lsls	r3, r3, #31
 800ec26:	d4b0      	bmi.n	800eb8a <_dtoa_r+0xa82>
 800ec28:	4633      	mov	r3, r6
 800ec2a:	461e      	mov	r6, r3
 800ec2c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ec30:	2a30      	cmp	r2, #48	@ 0x30
 800ec32:	d0fa      	beq.n	800ec2a <_dtoa_r+0xb22>
 800ec34:	e4b5      	b.n	800e5a2 <_dtoa_r+0x49a>
 800ec36:	459a      	cmp	sl, r3
 800ec38:	d1a8      	bne.n	800eb8c <_dtoa_r+0xa84>
 800ec3a:	2331      	movs	r3, #49	@ 0x31
 800ec3c:	f108 0801 	add.w	r8, r8, #1
 800ec40:	f88a 3000 	strb.w	r3, [sl]
 800ec44:	e4ad      	b.n	800e5a2 <_dtoa_r+0x49a>
 800ec46:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ec48:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800eca4 <_dtoa_r+0xb9c>
 800ec4c:	b11b      	cbz	r3, 800ec56 <_dtoa_r+0xb4e>
 800ec4e:	f10a 0308 	add.w	r3, sl, #8
 800ec52:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800ec54:	6013      	str	r3, [r2, #0]
 800ec56:	4650      	mov	r0, sl
 800ec58:	b017      	add	sp, #92	@ 0x5c
 800ec5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec5e:	9b07      	ldr	r3, [sp, #28]
 800ec60:	2b01      	cmp	r3, #1
 800ec62:	f77f ae2e 	ble.w	800e8c2 <_dtoa_r+0x7ba>
 800ec66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ec68:	9308      	str	r3, [sp, #32]
 800ec6a:	2001      	movs	r0, #1
 800ec6c:	e64d      	b.n	800e90a <_dtoa_r+0x802>
 800ec6e:	f1bb 0f00 	cmp.w	fp, #0
 800ec72:	f77f aed9 	ble.w	800ea28 <_dtoa_r+0x920>
 800ec76:	4656      	mov	r6, sl
 800ec78:	9802      	ldr	r0, [sp, #8]
 800ec7a:	4621      	mov	r1, r4
 800ec7c:	f7ff f9b9 	bl	800dff2 <quorem>
 800ec80:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800ec84:	f806 3b01 	strb.w	r3, [r6], #1
 800ec88:	eba6 020a 	sub.w	r2, r6, sl
 800ec8c:	4593      	cmp	fp, r2
 800ec8e:	ddb4      	ble.n	800ebfa <_dtoa_r+0xaf2>
 800ec90:	9902      	ldr	r1, [sp, #8]
 800ec92:	2300      	movs	r3, #0
 800ec94:	220a      	movs	r2, #10
 800ec96:	4648      	mov	r0, r9
 800ec98:	f000 fc32 	bl	800f500 <__multadd>
 800ec9c:	9002      	str	r0, [sp, #8]
 800ec9e:	e7eb      	b.n	800ec78 <_dtoa_r+0xb70>
 800eca0:	0801108b 	.word	0x0801108b
 800eca4:	0801100f 	.word	0x0801100f

0800eca8 <_free_r>:
 800eca8:	b538      	push	{r3, r4, r5, lr}
 800ecaa:	4605      	mov	r5, r0
 800ecac:	2900      	cmp	r1, #0
 800ecae:	d041      	beq.n	800ed34 <_free_r+0x8c>
 800ecb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ecb4:	1f0c      	subs	r4, r1, #4
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	bfb8      	it	lt
 800ecba:	18e4      	addlt	r4, r4, r3
 800ecbc:	f7f3 fe56 	bl	800296c <__malloc_lock>
 800ecc0:	4a1d      	ldr	r2, [pc, #116]	@ (800ed38 <_free_r+0x90>)
 800ecc2:	6813      	ldr	r3, [r2, #0]
 800ecc4:	b933      	cbnz	r3, 800ecd4 <_free_r+0x2c>
 800ecc6:	6063      	str	r3, [r4, #4]
 800ecc8:	6014      	str	r4, [r2, #0]
 800ecca:	4628      	mov	r0, r5
 800eccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ecd0:	f7f3 be86 	b.w	80029e0 <__malloc_unlock>
 800ecd4:	42a3      	cmp	r3, r4
 800ecd6:	d908      	bls.n	800ecea <_free_r+0x42>
 800ecd8:	6820      	ldr	r0, [r4, #0]
 800ecda:	1821      	adds	r1, r4, r0
 800ecdc:	428b      	cmp	r3, r1
 800ecde:	bf01      	itttt	eq
 800ece0:	6819      	ldreq	r1, [r3, #0]
 800ece2:	685b      	ldreq	r3, [r3, #4]
 800ece4:	1809      	addeq	r1, r1, r0
 800ece6:	6021      	streq	r1, [r4, #0]
 800ece8:	e7ed      	b.n	800ecc6 <_free_r+0x1e>
 800ecea:	461a      	mov	r2, r3
 800ecec:	685b      	ldr	r3, [r3, #4]
 800ecee:	b10b      	cbz	r3, 800ecf4 <_free_r+0x4c>
 800ecf0:	42a3      	cmp	r3, r4
 800ecf2:	d9fa      	bls.n	800ecea <_free_r+0x42>
 800ecf4:	6811      	ldr	r1, [r2, #0]
 800ecf6:	1850      	adds	r0, r2, r1
 800ecf8:	42a0      	cmp	r0, r4
 800ecfa:	d10b      	bne.n	800ed14 <_free_r+0x6c>
 800ecfc:	6820      	ldr	r0, [r4, #0]
 800ecfe:	4401      	add	r1, r0
 800ed00:	1850      	adds	r0, r2, r1
 800ed02:	4283      	cmp	r3, r0
 800ed04:	6011      	str	r1, [r2, #0]
 800ed06:	d1e0      	bne.n	800ecca <_free_r+0x22>
 800ed08:	6818      	ldr	r0, [r3, #0]
 800ed0a:	685b      	ldr	r3, [r3, #4]
 800ed0c:	6053      	str	r3, [r2, #4]
 800ed0e:	4408      	add	r0, r1
 800ed10:	6010      	str	r0, [r2, #0]
 800ed12:	e7da      	b.n	800ecca <_free_r+0x22>
 800ed14:	d902      	bls.n	800ed1c <_free_r+0x74>
 800ed16:	230c      	movs	r3, #12
 800ed18:	602b      	str	r3, [r5, #0]
 800ed1a:	e7d6      	b.n	800ecca <_free_r+0x22>
 800ed1c:	6820      	ldr	r0, [r4, #0]
 800ed1e:	1821      	adds	r1, r4, r0
 800ed20:	428b      	cmp	r3, r1
 800ed22:	bf04      	itt	eq
 800ed24:	6819      	ldreq	r1, [r3, #0]
 800ed26:	685b      	ldreq	r3, [r3, #4]
 800ed28:	6063      	str	r3, [r4, #4]
 800ed2a:	bf04      	itt	eq
 800ed2c:	1809      	addeq	r1, r1, r0
 800ed2e:	6021      	streq	r1, [r4, #0]
 800ed30:	6054      	str	r4, [r2, #4]
 800ed32:	e7ca      	b.n	800ecca <_free_r+0x22>
 800ed34:	bd38      	pop	{r3, r4, r5, pc}
 800ed36:	bf00      	nop
 800ed38:	200004cc 	.word	0x200004cc

0800ed3c <rshift>:
 800ed3c:	6903      	ldr	r3, [r0, #16]
 800ed3e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ed42:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ed46:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ed4a:	f100 0414 	add.w	r4, r0, #20
 800ed4e:	dd45      	ble.n	800eddc <rshift+0xa0>
 800ed50:	f011 011f 	ands.w	r1, r1, #31
 800ed54:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ed58:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ed5c:	d10c      	bne.n	800ed78 <rshift+0x3c>
 800ed5e:	f100 0710 	add.w	r7, r0, #16
 800ed62:	4629      	mov	r1, r5
 800ed64:	42b1      	cmp	r1, r6
 800ed66:	d334      	bcc.n	800edd2 <rshift+0x96>
 800ed68:	1a9b      	subs	r3, r3, r2
 800ed6a:	009b      	lsls	r3, r3, #2
 800ed6c:	1eea      	subs	r2, r5, #3
 800ed6e:	4296      	cmp	r6, r2
 800ed70:	bf38      	it	cc
 800ed72:	2300      	movcc	r3, #0
 800ed74:	4423      	add	r3, r4
 800ed76:	e015      	b.n	800eda4 <rshift+0x68>
 800ed78:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ed7c:	f1c1 0820 	rsb	r8, r1, #32
 800ed80:	40cf      	lsrs	r7, r1
 800ed82:	f105 0e04 	add.w	lr, r5, #4
 800ed86:	46a1      	mov	r9, r4
 800ed88:	4576      	cmp	r6, lr
 800ed8a:	46f4      	mov	ip, lr
 800ed8c:	d815      	bhi.n	800edba <rshift+0x7e>
 800ed8e:	1a9a      	subs	r2, r3, r2
 800ed90:	0092      	lsls	r2, r2, #2
 800ed92:	3a04      	subs	r2, #4
 800ed94:	3501      	adds	r5, #1
 800ed96:	42ae      	cmp	r6, r5
 800ed98:	bf38      	it	cc
 800ed9a:	2200      	movcc	r2, #0
 800ed9c:	18a3      	adds	r3, r4, r2
 800ed9e:	50a7      	str	r7, [r4, r2]
 800eda0:	b107      	cbz	r7, 800eda4 <rshift+0x68>
 800eda2:	3304      	adds	r3, #4
 800eda4:	1b1a      	subs	r2, r3, r4
 800eda6:	42a3      	cmp	r3, r4
 800eda8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800edac:	bf08      	it	eq
 800edae:	2300      	moveq	r3, #0
 800edb0:	6102      	str	r2, [r0, #16]
 800edb2:	bf08      	it	eq
 800edb4:	6143      	streq	r3, [r0, #20]
 800edb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800edba:	f8dc c000 	ldr.w	ip, [ip]
 800edbe:	fa0c fc08 	lsl.w	ip, ip, r8
 800edc2:	ea4c 0707 	orr.w	r7, ip, r7
 800edc6:	f849 7b04 	str.w	r7, [r9], #4
 800edca:	f85e 7b04 	ldr.w	r7, [lr], #4
 800edce:	40cf      	lsrs	r7, r1
 800edd0:	e7da      	b.n	800ed88 <rshift+0x4c>
 800edd2:	f851 cb04 	ldr.w	ip, [r1], #4
 800edd6:	f847 cf04 	str.w	ip, [r7, #4]!
 800edda:	e7c3      	b.n	800ed64 <rshift+0x28>
 800eddc:	4623      	mov	r3, r4
 800edde:	e7e1      	b.n	800eda4 <rshift+0x68>

0800ede0 <__hexdig_fun>:
 800ede0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ede4:	2b09      	cmp	r3, #9
 800ede6:	d802      	bhi.n	800edee <__hexdig_fun+0xe>
 800ede8:	3820      	subs	r0, #32
 800edea:	b2c0      	uxtb	r0, r0
 800edec:	4770      	bx	lr
 800edee:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800edf2:	2b05      	cmp	r3, #5
 800edf4:	d801      	bhi.n	800edfa <__hexdig_fun+0x1a>
 800edf6:	3847      	subs	r0, #71	@ 0x47
 800edf8:	e7f7      	b.n	800edea <__hexdig_fun+0xa>
 800edfa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800edfe:	2b05      	cmp	r3, #5
 800ee00:	d801      	bhi.n	800ee06 <__hexdig_fun+0x26>
 800ee02:	3827      	subs	r0, #39	@ 0x27
 800ee04:	e7f1      	b.n	800edea <__hexdig_fun+0xa>
 800ee06:	2000      	movs	r0, #0
 800ee08:	4770      	bx	lr
	...

0800ee0c <__gethex>:
 800ee0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee10:	b085      	sub	sp, #20
 800ee12:	468a      	mov	sl, r1
 800ee14:	9302      	str	r3, [sp, #8]
 800ee16:	680b      	ldr	r3, [r1, #0]
 800ee18:	9001      	str	r0, [sp, #4]
 800ee1a:	4690      	mov	r8, r2
 800ee1c:	1c9c      	adds	r4, r3, #2
 800ee1e:	46a1      	mov	r9, r4
 800ee20:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ee24:	2830      	cmp	r0, #48	@ 0x30
 800ee26:	d0fa      	beq.n	800ee1e <__gethex+0x12>
 800ee28:	eba9 0303 	sub.w	r3, r9, r3
 800ee2c:	f1a3 0b02 	sub.w	fp, r3, #2
 800ee30:	f7ff ffd6 	bl	800ede0 <__hexdig_fun>
 800ee34:	4605      	mov	r5, r0
 800ee36:	2800      	cmp	r0, #0
 800ee38:	d168      	bne.n	800ef0c <__gethex+0x100>
 800ee3a:	49a0      	ldr	r1, [pc, #640]	@ (800f0bc <__gethex+0x2b0>)
 800ee3c:	2201      	movs	r2, #1
 800ee3e:	4648      	mov	r0, r9
 800ee40:	f7fe ffca 	bl	800ddd8 <strncmp>
 800ee44:	4607      	mov	r7, r0
 800ee46:	2800      	cmp	r0, #0
 800ee48:	d167      	bne.n	800ef1a <__gethex+0x10e>
 800ee4a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ee4e:	4626      	mov	r6, r4
 800ee50:	f7ff ffc6 	bl	800ede0 <__hexdig_fun>
 800ee54:	2800      	cmp	r0, #0
 800ee56:	d062      	beq.n	800ef1e <__gethex+0x112>
 800ee58:	4623      	mov	r3, r4
 800ee5a:	7818      	ldrb	r0, [r3, #0]
 800ee5c:	2830      	cmp	r0, #48	@ 0x30
 800ee5e:	4699      	mov	r9, r3
 800ee60:	f103 0301 	add.w	r3, r3, #1
 800ee64:	d0f9      	beq.n	800ee5a <__gethex+0x4e>
 800ee66:	f7ff ffbb 	bl	800ede0 <__hexdig_fun>
 800ee6a:	fab0 f580 	clz	r5, r0
 800ee6e:	096d      	lsrs	r5, r5, #5
 800ee70:	f04f 0b01 	mov.w	fp, #1
 800ee74:	464a      	mov	r2, r9
 800ee76:	4616      	mov	r6, r2
 800ee78:	3201      	adds	r2, #1
 800ee7a:	7830      	ldrb	r0, [r6, #0]
 800ee7c:	f7ff ffb0 	bl	800ede0 <__hexdig_fun>
 800ee80:	2800      	cmp	r0, #0
 800ee82:	d1f8      	bne.n	800ee76 <__gethex+0x6a>
 800ee84:	498d      	ldr	r1, [pc, #564]	@ (800f0bc <__gethex+0x2b0>)
 800ee86:	2201      	movs	r2, #1
 800ee88:	4630      	mov	r0, r6
 800ee8a:	f7fe ffa5 	bl	800ddd8 <strncmp>
 800ee8e:	2800      	cmp	r0, #0
 800ee90:	d13f      	bne.n	800ef12 <__gethex+0x106>
 800ee92:	b944      	cbnz	r4, 800eea6 <__gethex+0x9a>
 800ee94:	1c74      	adds	r4, r6, #1
 800ee96:	4622      	mov	r2, r4
 800ee98:	4616      	mov	r6, r2
 800ee9a:	3201      	adds	r2, #1
 800ee9c:	7830      	ldrb	r0, [r6, #0]
 800ee9e:	f7ff ff9f 	bl	800ede0 <__hexdig_fun>
 800eea2:	2800      	cmp	r0, #0
 800eea4:	d1f8      	bne.n	800ee98 <__gethex+0x8c>
 800eea6:	1ba4      	subs	r4, r4, r6
 800eea8:	00a7      	lsls	r7, r4, #2
 800eeaa:	7833      	ldrb	r3, [r6, #0]
 800eeac:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800eeb0:	2b50      	cmp	r3, #80	@ 0x50
 800eeb2:	d13e      	bne.n	800ef32 <__gethex+0x126>
 800eeb4:	7873      	ldrb	r3, [r6, #1]
 800eeb6:	2b2b      	cmp	r3, #43	@ 0x2b
 800eeb8:	d033      	beq.n	800ef22 <__gethex+0x116>
 800eeba:	2b2d      	cmp	r3, #45	@ 0x2d
 800eebc:	d034      	beq.n	800ef28 <__gethex+0x11c>
 800eebe:	1c71      	adds	r1, r6, #1
 800eec0:	2400      	movs	r4, #0
 800eec2:	7808      	ldrb	r0, [r1, #0]
 800eec4:	f7ff ff8c 	bl	800ede0 <__hexdig_fun>
 800eec8:	1e43      	subs	r3, r0, #1
 800eeca:	b2db      	uxtb	r3, r3
 800eecc:	2b18      	cmp	r3, #24
 800eece:	d830      	bhi.n	800ef32 <__gethex+0x126>
 800eed0:	f1a0 0210 	sub.w	r2, r0, #16
 800eed4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800eed8:	f7ff ff82 	bl	800ede0 <__hexdig_fun>
 800eedc:	f100 3cff 	add.w	ip, r0, #4294967295
 800eee0:	fa5f fc8c 	uxtb.w	ip, ip
 800eee4:	f1bc 0f18 	cmp.w	ip, #24
 800eee8:	f04f 030a 	mov.w	r3, #10
 800eeec:	d91e      	bls.n	800ef2c <__gethex+0x120>
 800eeee:	b104      	cbz	r4, 800eef2 <__gethex+0xe6>
 800eef0:	4252      	negs	r2, r2
 800eef2:	4417      	add	r7, r2
 800eef4:	f8ca 1000 	str.w	r1, [sl]
 800eef8:	b1ed      	cbz	r5, 800ef36 <__gethex+0x12a>
 800eefa:	f1bb 0f00 	cmp.w	fp, #0
 800eefe:	bf0c      	ite	eq
 800ef00:	2506      	moveq	r5, #6
 800ef02:	2500      	movne	r5, #0
 800ef04:	4628      	mov	r0, r5
 800ef06:	b005      	add	sp, #20
 800ef08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef0c:	2500      	movs	r5, #0
 800ef0e:	462c      	mov	r4, r5
 800ef10:	e7b0      	b.n	800ee74 <__gethex+0x68>
 800ef12:	2c00      	cmp	r4, #0
 800ef14:	d1c7      	bne.n	800eea6 <__gethex+0x9a>
 800ef16:	4627      	mov	r7, r4
 800ef18:	e7c7      	b.n	800eeaa <__gethex+0x9e>
 800ef1a:	464e      	mov	r6, r9
 800ef1c:	462f      	mov	r7, r5
 800ef1e:	2501      	movs	r5, #1
 800ef20:	e7c3      	b.n	800eeaa <__gethex+0x9e>
 800ef22:	2400      	movs	r4, #0
 800ef24:	1cb1      	adds	r1, r6, #2
 800ef26:	e7cc      	b.n	800eec2 <__gethex+0xb6>
 800ef28:	2401      	movs	r4, #1
 800ef2a:	e7fb      	b.n	800ef24 <__gethex+0x118>
 800ef2c:	fb03 0002 	mla	r0, r3, r2, r0
 800ef30:	e7ce      	b.n	800eed0 <__gethex+0xc4>
 800ef32:	4631      	mov	r1, r6
 800ef34:	e7de      	b.n	800eef4 <__gethex+0xe8>
 800ef36:	eba6 0309 	sub.w	r3, r6, r9
 800ef3a:	3b01      	subs	r3, #1
 800ef3c:	4629      	mov	r1, r5
 800ef3e:	2b07      	cmp	r3, #7
 800ef40:	dc0a      	bgt.n	800ef58 <__gethex+0x14c>
 800ef42:	9801      	ldr	r0, [sp, #4]
 800ef44:	f000 fa7a 	bl	800f43c <_Balloc>
 800ef48:	4604      	mov	r4, r0
 800ef4a:	b940      	cbnz	r0, 800ef5e <__gethex+0x152>
 800ef4c:	4b5c      	ldr	r3, [pc, #368]	@ (800f0c0 <__gethex+0x2b4>)
 800ef4e:	4602      	mov	r2, r0
 800ef50:	21e4      	movs	r1, #228	@ 0xe4
 800ef52:	485c      	ldr	r0, [pc, #368]	@ (800f0c4 <__gethex+0x2b8>)
 800ef54:	f7fc fef4 	bl	800bd40 <__assert_func>
 800ef58:	3101      	adds	r1, #1
 800ef5a:	105b      	asrs	r3, r3, #1
 800ef5c:	e7ef      	b.n	800ef3e <__gethex+0x132>
 800ef5e:	f100 0a14 	add.w	sl, r0, #20
 800ef62:	2300      	movs	r3, #0
 800ef64:	4655      	mov	r5, sl
 800ef66:	469b      	mov	fp, r3
 800ef68:	45b1      	cmp	r9, r6
 800ef6a:	d337      	bcc.n	800efdc <__gethex+0x1d0>
 800ef6c:	f845 bb04 	str.w	fp, [r5], #4
 800ef70:	eba5 050a 	sub.w	r5, r5, sl
 800ef74:	10ad      	asrs	r5, r5, #2
 800ef76:	6125      	str	r5, [r4, #16]
 800ef78:	4658      	mov	r0, fp
 800ef7a:	f000 fb51 	bl	800f620 <__hi0bits>
 800ef7e:	016d      	lsls	r5, r5, #5
 800ef80:	f8d8 6000 	ldr.w	r6, [r8]
 800ef84:	1a2d      	subs	r5, r5, r0
 800ef86:	42b5      	cmp	r5, r6
 800ef88:	dd54      	ble.n	800f034 <__gethex+0x228>
 800ef8a:	1bad      	subs	r5, r5, r6
 800ef8c:	4629      	mov	r1, r5
 800ef8e:	4620      	mov	r0, r4
 800ef90:	f000 fedd 	bl	800fd4e <__any_on>
 800ef94:	4681      	mov	r9, r0
 800ef96:	b178      	cbz	r0, 800efb8 <__gethex+0x1ac>
 800ef98:	1e6b      	subs	r3, r5, #1
 800ef9a:	1159      	asrs	r1, r3, #5
 800ef9c:	f003 021f 	and.w	r2, r3, #31
 800efa0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800efa4:	f04f 0901 	mov.w	r9, #1
 800efa8:	fa09 f202 	lsl.w	r2, r9, r2
 800efac:	420a      	tst	r2, r1
 800efae:	d003      	beq.n	800efb8 <__gethex+0x1ac>
 800efb0:	454b      	cmp	r3, r9
 800efb2:	dc36      	bgt.n	800f022 <__gethex+0x216>
 800efb4:	f04f 0902 	mov.w	r9, #2
 800efb8:	4629      	mov	r1, r5
 800efba:	4620      	mov	r0, r4
 800efbc:	f7ff febe 	bl	800ed3c <rshift>
 800efc0:	442f      	add	r7, r5
 800efc2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800efc6:	42bb      	cmp	r3, r7
 800efc8:	da42      	bge.n	800f050 <__gethex+0x244>
 800efca:	9801      	ldr	r0, [sp, #4]
 800efcc:	4621      	mov	r1, r4
 800efce:	f000 fa75 	bl	800f4bc <_Bfree>
 800efd2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800efd4:	2300      	movs	r3, #0
 800efd6:	6013      	str	r3, [r2, #0]
 800efd8:	25a3      	movs	r5, #163	@ 0xa3
 800efda:	e793      	b.n	800ef04 <__gethex+0xf8>
 800efdc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800efe0:	2a2e      	cmp	r2, #46	@ 0x2e
 800efe2:	d012      	beq.n	800f00a <__gethex+0x1fe>
 800efe4:	2b20      	cmp	r3, #32
 800efe6:	d104      	bne.n	800eff2 <__gethex+0x1e6>
 800efe8:	f845 bb04 	str.w	fp, [r5], #4
 800efec:	f04f 0b00 	mov.w	fp, #0
 800eff0:	465b      	mov	r3, fp
 800eff2:	7830      	ldrb	r0, [r6, #0]
 800eff4:	9303      	str	r3, [sp, #12]
 800eff6:	f7ff fef3 	bl	800ede0 <__hexdig_fun>
 800effa:	9b03      	ldr	r3, [sp, #12]
 800effc:	f000 000f 	and.w	r0, r0, #15
 800f000:	4098      	lsls	r0, r3
 800f002:	ea4b 0b00 	orr.w	fp, fp, r0
 800f006:	3304      	adds	r3, #4
 800f008:	e7ae      	b.n	800ef68 <__gethex+0x15c>
 800f00a:	45b1      	cmp	r9, r6
 800f00c:	d8ea      	bhi.n	800efe4 <__gethex+0x1d8>
 800f00e:	492b      	ldr	r1, [pc, #172]	@ (800f0bc <__gethex+0x2b0>)
 800f010:	9303      	str	r3, [sp, #12]
 800f012:	2201      	movs	r2, #1
 800f014:	4630      	mov	r0, r6
 800f016:	f7fe fedf 	bl	800ddd8 <strncmp>
 800f01a:	9b03      	ldr	r3, [sp, #12]
 800f01c:	2800      	cmp	r0, #0
 800f01e:	d1e1      	bne.n	800efe4 <__gethex+0x1d8>
 800f020:	e7a2      	b.n	800ef68 <__gethex+0x15c>
 800f022:	1ea9      	subs	r1, r5, #2
 800f024:	4620      	mov	r0, r4
 800f026:	f000 fe92 	bl	800fd4e <__any_on>
 800f02a:	2800      	cmp	r0, #0
 800f02c:	d0c2      	beq.n	800efb4 <__gethex+0x1a8>
 800f02e:	f04f 0903 	mov.w	r9, #3
 800f032:	e7c1      	b.n	800efb8 <__gethex+0x1ac>
 800f034:	da09      	bge.n	800f04a <__gethex+0x23e>
 800f036:	1b75      	subs	r5, r6, r5
 800f038:	4621      	mov	r1, r4
 800f03a:	9801      	ldr	r0, [sp, #4]
 800f03c:	462a      	mov	r2, r5
 800f03e:	f000 fc4d 	bl	800f8dc <__lshift>
 800f042:	1b7f      	subs	r7, r7, r5
 800f044:	4604      	mov	r4, r0
 800f046:	f100 0a14 	add.w	sl, r0, #20
 800f04a:	f04f 0900 	mov.w	r9, #0
 800f04e:	e7b8      	b.n	800efc2 <__gethex+0x1b6>
 800f050:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f054:	42bd      	cmp	r5, r7
 800f056:	dd6f      	ble.n	800f138 <__gethex+0x32c>
 800f058:	1bed      	subs	r5, r5, r7
 800f05a:	42ae      	cmp	r6, r5
 800f05c:	dc34      	bgt.n	800f0c8 <__gethex+0x2bc>
 800f05e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f062:	2b02      	cmp	r3, #2
 800f064:	d022      	beq.n	800f0ac <__gethex+0x2a0>
 800f066:	2b03      	cmp	r3, #3
 800f068:	d024      	beq.n	800f0b4 <__gethex+0x2a8>
 800f06a:	2b01      	cmp	r3, #1
 800f06c:	d115      	bne.n	800f09a <__gethex+0x28e>
 800f06e:	42ae      	cmp	r6, r5
 800f070:	d113      	bne.n	800f09a <__gethex+0x28e>
 800f072:	2e01      	cmp	r6, #1
 800f074:	d10b      	bne.n	800f08e <__gethex+0x282>
 800f076:	9a02      	ldr	r2, [sp, #8]
 800f078:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f07c:	6013      	str	r3, [r2, #0]
 800f07e:	2301      	movs	r3, #1
 800f080:	6123      	str	r3, [r4, #16]
 800f082:	f8ca 3000 	str.w	r3, [sl]
 800f086:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f088:	2562      	movs	r5, #98	@ 0x62
 800f08a:	601c      	str	r4, [r3, #0]
 800f08c:	e73a      	b.n	800ef04 <__gethex+0xf8>
 800f08e:	1e71      	subs	r1, r6, #1
 800f090:	4620      	mov	r0, r4
 800f092:	f000 fe5c 	bl	800fd4e <__any_on>
 800f096:	2800      	cmp	r0, #0
 800f098:	d1ed      	bne.n	800f076 <__gethex+0x26a>
 800f09a:	9801      	ldr	r0, [sp, #4]
 800f09c:	4621      	mov	r1, r4
 800f09e:	f000 fa0d 	bl	800f4bc <_Bfree>
 800f0a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f0a4:	2300      	movs	r3, #0
 800f0a6:	6013      	str	r3, [r2, #0]
 800f0a8:	2550      	movs	r5, #80	@ 0x50
 800f0aa:	e72b      	b.n	800ef04 <__gethex+0xf8>
 800f0ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d1f3      	bne.n	800f09a <__gethex+0x28e>
 800f0b2:	e7e0      	b.n	800f076 <__gethex+0x26a>
 800f0b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d1dd      	bne.n	800f076 <__gethex+0x26a>
 800f0ba:	e7ee      	b.n	800f09a <__gethex+0x28e>
 800f0bc:	08010fcc 	.word	0x08010fcc
 800f0c0:	0801108b 	.word	0x0801108b
 800f0c4:	0801109c 	.word	0x0801109c
 800f0c8:	1e6f      	subs	r7, r5, #1
 800f0ca:	f1b9 0f00 	cmp.w	r9, #0
 800f0ce:	d130      	bne.n	800f132 <__gethex+0x326>
 800f0d0:	b127      	cbz	r7, 800f0dc <__gethex+0x2d0>
 800f0d2:	4639      	mov	r1, r7
 800f0d4:	4620      	mov	r0, r4
 800f0d6:	f000 fe3a 	bl	800fd4e <__any_on>
 800f0da:	4681      	mov	r9, r0
 800f0dc:	117a      	asrs	r2, r7, #5
 800f0de:	2301      	movs	r3, #1
 800f0e0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800f0e4:	f007 071f 	and.w	r7, r7, #31
 800f0e8:	40bb      	lsls	r3, r7
 800f0ea:	4213      	tst	r3, r2
 800f0ec:	4629      	mov	r1, r5
 800f0ee:	4620      	mov	r0, r4
 800f0f0:	bf18      	it	ne
 800f0f2:	f049 0902 	orrne.w	r9, r9, #2
 800f0f6:	f7ff fe21 	bl	800ed3c <rshift>
 800f0fa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800f0fe:	1b76      	subs	r6, r6, r5
 800f100:	2502      	movs	r5, #2
 800f102:	f1b9 0f00 	cmp.w	r9, #0
 800f106:	d047      	beq.n	800f198 <__gethex+0x38c>
 800f108:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f10c:	2b02      	cmp	r3, #2
 800f10e:	d015      	beq.n	800f13c <__gethex+0x330>
 800f110:	2b03      	cmp	r3, #3
 800f112:	d017      	beq.n	800f144 <__gethex+0x338>
 800f114:	2b01      	cmp	r3, #1
 800f116:	d109      	bne.n	800f12c <__gethex+0x320>
 800f118:	f019 0f02 	tst.w	r9, #2
 800f11c:	d006      	beq.n	800f12c <__gethex+0x320>
 800f11e:	f8da 3000 	ldr.w	r3, [sl]
 800f122:	ea49 0903 	orr.w	r9, r9, r3
 800f126:	f019 0f01 	tst.w	r9, #1
 800f12a:	d10e      	bne.n	800f14a <__gethex+0x33e>
 800f12c:	f045 0510 	orr.w	r5, r5, #16
 800f130:	e032      	b.n	800f198 <__gethex+0x38c>
 800f132:	f04f 0901 	mov.w	r9, #1
 800f136:	e7d1      	b.n	800f0dc <__gethex+0x2d0>
 800f138:	2501      	movs	r5, #1
 800f13a:	e7e2      	b.n	800f102 <__gethex+0x2f6>
 800f13c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f13e:	f1c3 0301 	rsb	r3, r3, #1
 800f142:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f144:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f146:	2b00      	cmp	r3, #0
 800f148:	d0f0      	beq.n	800f12c <__gethex+0x320>
 800f14a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f14e:	f104 0314 	add.w	r3, r4, #20
 800f152:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f156:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f15a:	f04f 0c00 	mov.w	ip, #0
 800f15e:	4618      	mov	r0, r3
 800f160:	f853 2b04 	ldr.w	r2, [r3], #4
 800f164:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f168:	d01b      	beq.n	800f1a2 <__gethex+0x396>
 800f16a:	3201      	adds	r2, #1
 800f16c:	6002      	str	r2, [r0, #0]
 800f16e:	2d02      	cmp	r5, #2
 800f170:	f104 0314 	add.w	r3, r4, #20
 800f174:	d13c      	bne.n	800f1f0 <__gethex+0x3e4>
 800f176:	f8d8 2000 	ldr.w	r2, [r8]
 800f17a:	3a01      	subs	r2, #1
 800f17c:	42b2      	cmp	r2, r6
 800f17e:	d109      	bne.n	800f194 <__gethex+0x388>
 800f180:	1171      	asrs	r1, r6, #5
 800f182:	2201      	movs	r2, #1
 800f184:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f188:	f006 061f 	and.w	r6, r6, #31
 800f18c:	fa02 f606 	lsl.w	r6, r2, r6
 800f190:	421e      	tst	r6, r3
 800f192:	d13a      	bne.n	800f20a <__gethex+0x3fe>
 800f194:	f045 0520 	orr.w	r5, r5, #32
 800f198:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f19a:	601c      	str	r4, [r3, #0]
 800f19c:	9b02      	ldr	r3, [sp, #8]
 800f19e:	601f      	str	r7, [r3, #0]
 800f1a0:	e6b0      	b.n	800ef04 <__gethex+0xf8>
 800f1a2:	4299      	cmp	r1, r3
 800f1a4:	f843 cc04 	str.w	ip, [r3, #-4]
 800f1a8:	d8d9      	bhi.n	800f15e <__gethex+0x352>
 800f1aa:	68a3      	ldr	r3, [r4, #8]
 800f1ac:	459b      	cmp	fp, r3
 800f1ae:	db17      	blt.n	800f1e0 <__gethex+0x3d4>
 800f1b0:	6861      	ldr	r1, [r4, #4]
 800f1b2:	9801      	ldr	r0, [sp, #4]
 800f1b4:	3101      	adds	r1, #1
 800f1b6:	f000 f941 	bl	800f43c <_Balloc>
 800f1ba:	4681      	mov	r9, r0
 800f1bc:	b918      	cbnz	r0, 800f1c6 <__gethex+0x3ba>
 800f1be:	4b1a      	ldr	r3, [pc, #104]	@ (800f228 <__gethex+0x41c>)
 800f1c0:	4602      	mov	r2, r0
 800f1c2:	2184      	movs	r1, #132	@ 0x84
 800f1c4:	e6c5      	b.n	800ef52 <__gethex+0x146>
 800f1c6:	6922      	ldr	r2, [r4, #16]
 800f1c8:	3202      	adds	r2, #2
 800f1ca:	f104 010c 	add.w	r1, r4, #12
 800f1ce:	0092      	lsls	r2, r2, #2
 800f1d0:	300c      	adds	r0, #12
 800f1d2:	f7fe fee8 	bl	800dfa6 <memcpy>
 800f1d6:	4621      	mov	r1, r4
 800f1d8:	9801      	ldr	r0, [sp, #4]
 800f1da:	f000 f96f 	bl	800f4bc <_Bfree>
 800f1de:	464c      	mov	r4, r9
 800f1e0:	6923      	ldr	r3, [r4, #16]
 800f1e2:	1c5a      	adds	r2, r3, #1
 800f1e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f1e8:	6122      	str	r2, [r4, #16]
 800f1ea:	2201      	movs	r2, #1
 800f1ec:	615a      	str	r2, [r3, #20]
 800f1ee:	e7be      	b.n	800f16e <__gethex+0x362>
 800f1f0:	6922      	ldr	r2, [r4, #16]
 800f1f2:	455a      	cmp	r2, fp
 800f1f4:	dd0b      	ble.n	800f20e <__gethex+0x402>
 800f1f6:	2101      	movs	r1, #1
 800f1f8:	4620      	mov	r0, r4
 800f1fa:	f7ff fd9f 	bl	800ed3c <rshift>
 800f1fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f202:	3701      	adds	r7, #1
 800f204:	42bb      	cmp	r3, r7
 800f206:	f6ff aee0 	blt.w	800efca <__gethex+0x1be>
 800f20a:	2501      	movs	r5, #1
 800f20c:	e7c2      	b.n	800f194 <__gethex+0x388>
 800f20e:	f016 061f 	ands.w	r6, r6, #31
 800f212:	d0fa      	beq.n	800f20a <__gethex+0x3fe>
 800f214:	4453      	add	r3, sl
 800f216:	f1c6 0620 	rsb	r6, r6, #32
 800f21a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f21e:	f000 f9ff 	bl	800f620 <__hi0bits>
 800f222:	42b0      	cmp	r0, r6
 800f224:	dbe7      	blt.n	800f1f6 <__gethex+0x3ea>
 800f226:	e7f0      	b.n	800f20a <__gethex+0x3fe>
 800f228:	0801108b 	.word	0x0801108b

0800f22c <L_shift>:
 800f22c:	f1c2 0208 	rsb	r2, r2, #8
 800f230:	0092      	lsls	r2, r2, #2
 800f232:	b570      	push	{r4, r5, r6, lr}
 800f234:	f1c2 0620 	rsb	r6, r2, #32
 800f238:	6843      	ldr	r3, [r0, #4]
 800f23a:	6804      	ldr	r4, [r0, #0]
 800f23c:	fa03 f506 	lsl.w	r5, r3, r6
 800f240:	432c      	orrs	r4, r5
 800f242:	40d3      	lsrs	r3, r2
 800f244:	6004      	str	r4, [r0, #0]
 800f246:	f840 3f04 	str.w	r3, [r0, #4]!
 800f24a:	4288      	cmp	r0, r1
 800f24c:	d3f4      	bcc.n	800f238 <L_shift+0xc>
 800f24e:	bd70      	pop	{r4, r5, r6, pc}

0800f250 <__match>:
 800f250:	b530      	push	{r4, r5, lr}
 800f252:	6803      	ldr	r3, [r0, #0]
 800f254:	3301      	adds	r3, #1
 800f256:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f25a:	b914      	cbnz	r4, 800f262 <__match+0x12>
 800f25c:	6003      	str	r3, [r0, #0]
 800f25e:	2001      	movs	r0, #1
 800f260:	bd30      	pop	{r4, r5, pc}
 800f262:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f266:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800f26a:	2d19      	cmp	r5, #25
 800f26c:	bf98      	it	ls
 800f26e:	3220      	addls	r2, #32
 800f270:	42a2      	cmp	r2, r4
 800f272:	d0f0      	beq.n	800f256 <__match+0x6>
 800f274:	2000      	movs	r0, #0
 800f276:	e7f3      	b.n	800f260 <__match+0x10>

0800f278 <__hexnan>:
 800f278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f27c:	680b      	ldr	r3, [r1, #0]
 800f27e:	6801      	ldr	r1, [r0, #0]
 800f280:	115e      	asrs	r6, r3, #5
 800f282:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f286:	f013 031f 	ands.w	r3, r3, #31
 800f28a:	b087      	sub	sp, #28
 800f28c:	bf18      	it	ne
 800f28e:	3604      	addne	r6, #4
 800f290:	2500      	movs	r5, #0
 800f292:	1f37      	subs	r7, r6, #4
 800f294:	4682      	mov	sl, r0
 800f296:	4690      	mov	r8, r2
 800f298:	9301      	str	r3, [sp, #4]
 800f29a:	f846 5c04 	str.w	r5, [r6, #-4]
 800f29e:	46b9      	mov	r9, r7
 800f2a0:	463c      	mov	r4, r7
 800f2a2:	9502      	str	r5, [sp, #8]
 800f2a4:	46ab      	mov	fp, r5
 800f2a6:	784a      	ldrb	r2, [r1, #1]
 800f2a8:	1c4b      	adds	r3, r1, #1
 800f2aa:	9303      	str	r3, [sp, #12]
 800f2ac:	b342      	cbz	r2, 800f300 <__hexnan+0x88>
 800f2ae:	4610      	mov	r0, r2
 800f2b0:	9105      	str	r1, [sp, #20]
 800f2b2:	9204      	str	r2, [sp, #16]
 800f2b4:	f7ff fd94 	bl	800ede0 <__hexdig_fun>
 800f2b8:	2800      	cmp	r0, #0
 800f2ba:	d151      	bne.n	800f360 <__hexnan+0xe8>
 800f2bc:	9a04      	ldr	r2, [sp, #16]
 800f2be:	9905      	ldr	r1, [sp, #20]
 800f2c0:	2a20      	cmp	r2, #32
 800f2c2:	d818      	bhi.n	800f2f6 <__hexnan+0x7e>
 800f2c4:	9b02      	ldr	r3, [sp, #8]
 800f2c6:	459b      	cmp	fp, r3
 800f2c8:	dd13      	ble.n	800f2f2 <__hexnan+0x7a>
 800f2ca:	454c      	cmp	r4, r9
 800f2cc:	d206      	bcs.n	800f2dc <__hexnan+0x64>
 800f2ce:	2d07      	cmp	r5, #7
 800f2d0:	dc04      	bgt.n	800f2dc <__hexnan+0x64>
 800f2d2:	462a      	mov	r2, r5
 800f2d4:	4649      	mov	r1, r9
 800f2d6:	4620      	mov	r0, r4
 800f2d8:	f7ff ffa8 	bl	800f22c <L_shift>
 800f2dc:	4544      	cmp	r4, r8
 800f2de:	d952      	bls.n	800f386 <__hexnan+0x10e>
 800f2e0:	2300      	movs	r3, #0
 800f2e2:	f1a4 0904 	sub.w	r9, r4, #4
 800f2e6:	f844 3c04 	str.w	r3, [r4, #-4]
 800f2ea:	f8cd b008 	str.w	fp, [sp, #8]
 800f2ee:	464c      	mov	r4, r9
 800f2f0:	461d      	mov	r5, r3
 800f2f2:	9903      	ldr	r1, [sp, #12]
 800f2f4:	e7d7      	b.n	800f2a6 <__hexnan+0x2e>
 800f2f6:	2a29      	cmp	r2, #41	@ 0x29
 800f2f8:	d157      	bne.n	800f3aa <__hexnan+0x132>
 800f2fa:	3102      	adds	r1, #2
 800f2fc:	f8ca 1000 	str.w	r1, [sl]
 800f300:	f1bb 0f00 	cmp.w	fp, #0
 800f304:	d051      	beq.n	800f3aa <__hexnan+0x132>
 800f306:	454c      	cmp	r4, r9
 800f308:	d206      	bcs.n	800f318 <__hexnan+0xa0>
 800f30a:	2d07      	cmp	r5, #7
 800f30c:	dc04      	bgt.n	800f318 <__hexnan+0xa0>
 800f30e:	462a      	mov	r2, r5
 800f310:	4649      	mov	r1, r9
 800f312:	4620      	mov	r0, r4
 800f314:	f7ff ff8a 	bl	800f22c <L_shift>
 800f318:	4544      	cmp	r4, r8
 800f31a:	d936      	bls.n	800f38a <__hexnan+0x112>
 800f31c:	f1a8 0204 	sub.w	r2, r8, #4
 800f320:	4623      	mov	r3, r4
 800f322:	f853 1b04 	ldr.w	r1, [r3], #4
 800f326:	f842 1f04 	str.w	r1, [r2, #4]!
 800f32a:	429f      	cmp	r7, r3
 800f32c:	d2f9      	bcs.n	800f322 <__hexnan+0xaa>
 800f32e:	1b3b      	subs	r3, r7, r4
 800f330:	f023 0303 	bic.w	r3, r3, #3
 800f334:	3304      	adds	r3, #4
 800f336:	3401      	adds	r4, #1
 800f338:	3e03      	subs	r6, #3
 800f33a:	42b4      	cmp	r4, r6
 800f33c:	bf88      	it	hi
 800f33e:	2304      	movhi	r3, #4
 800f340:	4443      	add	r3, r8
 800f342:	2200      	movs	r2, #0
 800f344:	f843 2b04 	str.w	r2, [r3], #4
 800f348:	429f      	cmp	r7, r3
 800f34a:	d2fb      	bcs.n	800f344 <__hexnan+0xcc>
 800f34c:	683b      	ldr	r3, [r7, #0]
 800f34e:	b91b      	cbnz	r3, 800f358 <__hexnan+0xe0>
 800f350:	4547      	cmp	r7, r8
 800f352:	d128      	bne.n	800f3a6 <__hexnan+0x12e>
 800f354:	2301      	movs	r3, #1
 800f356:	603b      	str	r3, [r7, #0]
 800f358:	2005      	movs	r0, #5
 800f35a:	b007      	add	sp, #28
 800f35c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f360:	3501      	adds	r5, #1
 800f362:	2d08      	cmp	r5, #8
 800f364:	f10b 0b01 	add.w	fp, fp, #1
 800f368:	dd06      	ble.n	800f378 <__hexnan+0x100>
 800f36a:	4544      	cmp	r4, r8
 800f36c:	d9c1      	bls.n	800f2f2 <__hexnan+0x7a>
 800f36e:	2300      	movs	r3, #0
 800f370:	f844 3c04 	str.w	r3, [r4, #-4]
 800f374:	2501      	movs	r5, #1
 800f376:	3c04      	subs	r4, #4
 800f378:	6822      	ldr	r2, [r4, #0]
 800f37a:	f000 000f 	and.w	r0, r0, #15
 800f37e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f382:	6020      	str	r0, [r4, #0]
 800f384:	e7b5      	b.n	800f2f2 <__hexnan+0x7a>
 800f386:	2508      	movs	r5, #8
 800f388:	e7b3      	b.n	800f2f2 <__hexnan+0x7a>
 800f38a:	9b01      	ldr	r3, [sp, #4]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d0dd      	beq.n	800f34c <__hexnan+0xd4>
 800f390:	f1c3 0320 	rsb	r3, r3, #32
 800f394:	f04f 32ff 	mov.w	r2, #4294967295
 800f398:	40da      	lsrs	r2, r3
 800f39a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f39e:	4013      	ands	r3, r2
 800f3a0:	f846 3c04 	str.w	r3, [r6, #-4]
 800f3a4:	e7d2      	b.n	800f34c <__hexnan+0xd4>
 800f3a6:	3f04      	subs	r7, #4
 800f3a8:	e7d0      	b.n	800f34c <__hexnan+0xd4>
 800f3aa:	2004      	movs	r0, #4
 800f3ac:	e7d5      	b.n	800f35a <__hexnan+0xe2>
	...

0800f3b0 <_mallinfo_r>:
 800f3b0:	b570      	push	{r4, r5, r6, lr}
 800f3b2:	4c16      	ldr	r4, [pc, #88]	@ (800f40c <_mallinfo_r+0x5c>)
 800f3b4:	4605      	mov	r5, r0
 800f3b6:	4608      	mov	r0, r1
 800f3b8:	460e      	mov	r6, r1
 800f3ba:	f7f3 fad7 	bl	800296c <__malloc_lock>
 800f3be:	6823      	ldr	r3, [r4, #0]
 800f3c0:	b14b      	cbz	r3, 800f3d6 <_mallinfo_r+0x26>
 800f3c2:	2100      	movs	r1, #0
 800f3c4:	4630      	mov	r0, r6
 800f3c6:	f7f3 fa4d 	bl	8002864 <_sbrk_r>
 800f3ca:	1c42      	adds	r2, r0, #1
 800f3cc:	bf18      	it	ne
 800f3ce:	6822      	ldrne	r2, [r4, #0]
 800f3d0:	4603      	mov	r3, r0
 800f3d2:	bf18      	it	ne
 800f3d4:	1a83      	subne	r3, r0, r2
 800f3d6:	4a0e      	ldr	r2, [pc, #56]	@ (800f410 <_mallinfo_r+0x60>)
 800f3d8:	6811      	ldr	r1, [r2, #0]
 800f3da:	2200      	movs	r2, #0
 800f3dc:	b991      	cbnz	r1, 800f404 <_mallinfo_r+0x54>
 800f3de:	4c0d      	ldr	r4, [pc, #52]	@ (800f414 <_mallinfo_r+0x64>)
 800f3e0:	4630      	mov	r0, r6
 800f3e2:	6023      	str	r3, [r4, #0]
 800f3e4:	1a9b      	subs	r3, r3, r2
 800f3e6:	6222      	str	r2, [r4, #32]
 800f3e8:	61e3      	str	r3, [r4, #28]
 800f3ea:	f7f3 faf9 	bl	80029e0 <__malloc_unlock>
 800f3ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f3f0:	462e      	mov	r6, r5
 800f3f2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800f3f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f3f6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800f3f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 800f3fc:	e886 0003 	stmia.w	r6, {r0, r1}
 800f400:	4628      	mov	r0, r5
 800f402:	bd70      	pop	{r4, r5, r6, pc}
 800f404:	6808      	ldr	r0, [r1, #0]
 800f406:	6849      	ldr	r1, [r1, #4]
 800f408:	4402      	add	r2, r0
 800f40a:	e7e7      	b.n	800f3dc <_mallinfo_r+0x2c>
 800f40c:	200004c8 	.word	0x200004c8
 800f410:	200004cc 	.word	0x200004cc
 800f414:	20000614 	.word	0x20000614

0800f418 <__ascii_mbtowc>:
 800f418:	b082      	sub	sp, #8
 800f41a:	b901      	cbnz	r1, 800f41e <__ascii_mbtowc+0x6>
 800f41c:	a901      	add	r1, sp, #4
 800f41e:	b142      	cbz	r2, 800f432 <__ascii_mbtowc+0x1a>
 800f420:	b14b      	cbz	r3, 800f436 <__ascii_mbtowc+0x1e>
 800f422:	7813      	ldrb	r3, [r2, #0]
 800f424:	600b      	str	r3, [r1, #0]
 800f426:	7812      	ldrb	r2, [r2, #0]
 800f428:	1e10      	subs	r0, r2, #0
 800f42a:	bf18      	it	ne
 800f42c:	2001      	movne	r0, #1
 800f42e:	b002      	add	sp, #8
 800f430:	4770      	bx	lr
 800f432:	4610      	mov	r0, r2
 800f434:	e7fb      	b.n	800f42e <__ascii_mbtowc+0x16>
 800f436:	f06f 0001 	mvn.w	r0, #1
 800f43a:	e7f8      	b.n	800f42e <__ascii_mbtowc+0x16>

0800f43c <_Balloc>:
 800f43c:	b570      	push	{r4, r5, r6, lr}
 800f43e:	69c6      	ldr	r6, [r0, #28]
 800f440:	4604      	mov	r4, r0
 800f442:	460d      	mov	r5, r1
 800f444:	b976      	cbnz	r6, 800f464 <_Balloc+0x28>
 800f446:	2010      	movs	r0, #16
 800f448:	f7fc fcac 	bl	800bda4 <malloc>
 800f44c:	4602      	mov	r2, r0
 800f44e:	61e0      	str	r0, [r4, #28]
 800f450:	b920      	cbnz	r0, 800f45c <_Balloc+0x20>
 800f452:	4b18      	ldr	r3, [pc, #96]	@ (800f4b4 <_Balloc+0x78>)
 800f454:	4818      	ldr	r0, [pc, #96]	@ (800f4b8 <_Balloc+0x7c>)
 800f456:	216b      	movs	r1, #107	@ 0x6b
 800f458:	f7fc fc72 	bl	800bd40 <__assert_func>
 800f45c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f460:	6006      	str	r6, [r0, #0]
 800f462:	60c6      	str	r6, [r0, #12]
 800f464:	69e6      	ldr	r6, [r4, #28]
 800f466:	68f3      	ldr	r3, [r6, #12]
 800f468:	b183      	cbz	r3, 800f48c <_Balloc+0x50>
 800f46a:	69e3      	ldr	r3, [r4, #28]
 800f46c:	68db      	ldr	r3, [r3, #12]
 800f46e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f472:	b9b8      	cbnz	r0, 800f4a4 <_Balloc+0x68>
 800f474:	2101      	movs	r1, #1
 800f476:	fa01 f605 	lsl.w	r6, r1, r5
 800f47a:	1d72      	adds	r2, r6, #5
 800f47c:	0092      	lsls	r2, r2, #2
 800f47e:	4620      	mov	r0, r4
 800f480:	f7fc fc7c 	bl	800bd7c <_calloc_r>
 800f484:	b160      	cbz	r0, 800f4a0 <_Balloc+0x64>
 800f486:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f48a:	e00e      	b.n	800f4aa <_Balloc+0x6e>
 800f48c:	2221      	movs	r2, #33	@ 0x21
 800f48e:	2104      	movs	r1, #4
 800f490:	4620      	mov	r0, r4
 800f492:	f7fc fc73 	bl	800bd7c <_calloc_r>
 800f496:	69e3      	ldr	r3, [r4, #28]
 800f498:	60f0      	str	r0, [r6, #12]
 800f49a:	68db      	ldr	r3, [r3, #12]
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d1e4      	bne.n	800f46a <_Balloc+0x2e>
 800f4a0:	2000      	movs	r0, #0
 800f4a2:	bd70      	pop	{r4, r5, r6, pc}
 800f4a4:	6802      	ldr	r2, [r0, #0]
 800f4a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f4aa:	2300      	movs	r3, #0
 800f4ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f4b0:	e7f7      	b.n	800f4a2 <_Balloc+0x66>
 800f4b2:	bf00      	nop
 800f4b4:	0801101c 	.word	0x0801101c
 800f4b8:	080110fc 	.word	0x080110fc

0800f4bc <_Bfree>:
 800f4bc:	b570      	push	{r4, r5, r6, lr}
 800f4be:	69c6      	ldr	r6, [r0, #28]
 800f4c0:	4605      	mov	r5, r0
 800f4c2:	460c      	mov	r4, r1
 800f4c4:	b976      	cbnz	r6, 800f4e4 <_Bfree+0x28>
 800f4c6:	2010      	movs	r0, #16
 800f4c8:	f7fc fc6c 	bl	800bda4 <malloc>
 800f4cc:	4602      	mov	r2, r0
 800f4ce:	61e8      	str	r0, [r5, #28]
 800f4d0:	b920      	cbnz	r0, 800f4dc <_Bfree+0x20>
 800f4d2:	4b09      	ldr	r3, [pc, #36]	@ (800f4f8 <_Bfree+0x3c>)
 800f4d4:	4809      	ldr	r0, [pc, #36]	@ (800f4fc <_Bfree+0x40>)
 800f4d6:	218f      	movs	r1, #143	@ 0x8f
 800f4d8:	f7fc fc32 	bl	800bd40 <__assert_func>
 800f4dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f4e0:	6006      	str	r6, [r0, #0]
 800f4e2:	60c6      	str	r6, [r0, #12]
 800f4e4:	b13c      	cbz	r4, 800f4f6 <_Bfree+0x3a>
 800f4e6:	69eb      	ldr	r3, [r5, #28]
 800f4e8:	6862      	ldr	r2, [r4, #4]
 800f4ea:	68db      	ldr	r3, [r3, #12]
 800f4ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f4f0:	6021      	str	r1, [r4, #0]
 800f4f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f4f6:	bd70      	pop	{r4, r5, r6, pc}
 800f4f8:	0801101c 	.word	0x0801101c
 800f4fc:	080110fc 	.word	0x080110fc

0800f500 <__multadd>:
 800f500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f504:	690d      	ldr	r5, [r1, #16]
 800f506:	4607      	mov	r7, r0
 800f508:	460c      	mov	r4, r1
 800f50a:	461e      	mov	r6, r3
 800f50c:	f101 0c14 	add.w	ip, r1, #20
 800f510:	2000      	movs	r0, #0
 800f512:	f8dc 3000 	ldr.w	r3, [ip]
 800f516:	b299      	uxth	r1, r3
 800f518:	fb02 6101 	mla	r1, r2, r1, r6
 800f51c:	0c1e      	lsrs	r6, r3, #16
 800f51e:	0c0b      	lsrs	r3, r1, #16
 800f520:	fb02 3306 	mla	r3, r2, r6, r3
 800f524:	b289      	uxth	r1, r1
 800f526:	3001      	adds	r0, #1
 800f528:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f52c:	4285      	cmp	r5, r0
 800f52e:	f84c 1b04 	str.w	r1, [ip], #4
 800f532:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f536:	dcec      	bgt.n	800f512 <__multadd+0x12>
 800f538:	b30e      	cbz	r6, 800f57e <__multadd+0x7e>
 800f53a:	68a3      	ldr	r3, [r4, #8]
 800f53c:	42ab      	cmp	r3, r5
 800f53e:	dc19      	bgt.n	800f574 <__multadd+0x74>
 800f540:	6861      	ldr	r1, [r4, #4]
 800f542:	4638      	mov	r0, r7
 800f544:	3101      	adds	r1, #1
 800f546:	f7ff ff79 	bl	800f43c <_Balloc>
 800f54a:	4680      	mov	r8, r0
 800f54c:	b928      	cbnz	r0, 800f55a <__multadd+0x5a>
 800f54e:	4602      	mov	r2, r0
 800f550:	4b0c      	ldr	r3, [pc, #48]	@ (800f584 <__multadd+0x84>)
 800f552:	480d      	ldr	r0, [pc, #52]	@ (800f588 <__multadd+0x88>)
 800f554:	21ba      	movs	r1, #186	@ 0xba
 800f556:	f7fc fbf3 	bl	800bd40 <__assert_func>
 800f55a:	6922      	ldr	r2, [r4, #16]
 800f55c:	3202      	adds	r2, #2
 800f55e:	f104 010c 	add.w	r1, r4, #12
 800f562:	0092      	lsls	r2, r2, #2
 800f564:	300c      	adds	r0, #12
 800f566:	f7fe fd1e 	bl	800dfa6 <memcpy>
 800f56a:	4621      	mov	r1, r4
 800f56c:	4638      	mov	r0, r7
 800f56e:	f7ff ffa5 	bl	800f4bc <_Bfree>
 800f572:	4644      	mov	r4, r8
 800f574:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f578:	3501      	adds	r5, #1
 800f57a:	615e      	str	r6, [r3, #20]
 800f57c:	6125      	str	r5, [r4, #16]
 800f57e:	4620      	mov	r0, r4
 800f580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f584:	0801108b 	.word	0x0801108b
 800f588:	080110fc 	.word	0x080110fc

0800f58c <__s2b>:
 800f58c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f590:	460c      	mov	r4, r1
 800f592:	4615      	mov	r5, r2
 800f594:	461f      	mov	r7, r3
 800f596:	2209      	movs	r2, #9
 800f598:	3308      	adds	r3, #8
 800f59a:	4606      	mov	r6, r0
 800f59c:	fb93 f3f2 	sdiv	r3, r3, r2
 800f5a0:	2100      	movs	r1, #0
 800f5a2:	2201      	movs	r2, #1
 800f5a4:	429a      	cmp	r2, r3
 800f5a6:	db09      	blt.n	800f5bc <__s2b+0x30>
 800f5a8:	4630      	mov	r0, r6
 800f5aa:	f7ff ff47 	bl	800f43c <_Balloc>
 800f5ae:	b940      	cbnz	r0, 800f5c2 <__s2b+0x36>
 800f5b0:	4602      	mov	r2, r0
 800f5b2:	4b19      	ldr	r3, [pc, #100]	@ (800f618 <__s2b+0x8c>)
 800f5b4:	4819      	ldr	r0, [pc, #100]	@ (800f61c <__s2b+0x90>)
 800f5b6:	21d3      	movs	r1, #211	@ 0xd3
 800f5b8:	f7fc fbc2 	bl	800bd40 <__assert_func>
 800f5bc:	0052      	lsls	r2, r2, #1
 800f5be:	3101      	adds	r1, #1
 800f5c0:	e7f0      	b.n	800f5a4 <__s2b+0x18>
 800f5c2:	9b08      	ldr	r3, [sp, #32]
 800f5c4:	6143      	str	r3, [r0, #20]
 800f5c6:	2d09      	cmp	r5, #9
 800f5c8:	f04f 0301 	mov.w	r3, #1
 800f5cc:	6103      	str	r3, [r0, #16]
 800f5ce:	dd16      	ble.n	800f5fe <__s2b+0x72>
 800f5d0:	f104 0909 	add.w	r9, r4, #9
 800f5d4:	46c8      	mov	r8, r9
 800f5d6:	442c      	add	r4, r5
 800f5d8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f5dc:	4601      	mov	r1, r0
 800f5de:	3b30      	subs	r3, #48	@ 0x30
 800f5e0:	220a      	movs	r2, #10
 800f5e2:	4630      	mov	r0, r6
 800f5e4:	f7ff ff8c 	bl	800f500 <__multadd>
 800f5e8:	45a0      	cmp	r8, r4
 800f5ea:	d1f5      	bne.n	800f5d8 <__s2b+0x4c>
 800f5ec:	f1a5 0408 	sub.w	r4, r5, #8
 800f5f0:	444c      	add	r4, r9
 800f5f2:	1b2d      	subs	r5, r5, r4
 800f5f4:	1963      	adds	r3, r4, r5
 800f5f6:	42bb      	cmp	r3, r7
 800f5f8:	db04      	blt.n	800f604 <__s2b+0x78>
 800f5fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f5fe:	340a      	adds	r4, #10
 800f600:	2509      	movs	r5, #9
 800f602:	e7f6      	b.n	800f5f2 <__s2b+0x66>
 800f604:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f608:	4601      	mov	r1, r0
 800f60a:	3b30      	subs	r3, #48	@ 0x30
 800f60c:	220a      	movs	r2, #10
 800f60e:	4630      	mov	r0, r6
 800f610:	f7ff ff76 	bl	800f500 <__multadd>
 800f614:	e7ee      	b.n	800f5f4 <__s2b+0x68>
 800f616:	bf00      	nop
 800f618:	0801108b 	.word	0x0801108b
 800f61c:	080110fc 	.word	0x080110fc

0800f620 <__hi0bits>:
 800f620:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f624:	4603      	mov	r3, r0
 800f626:	bf36      	itet	cc
 800f628:	0403      	lslcc	r3, r0, #16
 800f62a:	2000      	movcs	r0, #0
 800f62c:	2010      	movcc	r0, #16
 800f62e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f632:	bf3c      	itt	cc
 800f634:	021b      	lslcc	r3, r3, #8
 800f636:	3008      	addcc	r0, #8
 800f638:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f63c:	bf3c      	itt	cc
 800f63e:	011b      	lslcc	r3, r3, #4
 800f640:	3004      	addcc	r0, #4
 800f642:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f646:	bf3c      	itt	cc
 800f648:	009b      	lslcc	r3, r3, #2
 800f64a:	3002      	addcc	r0, #2
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	db05      	blt.n	800f65c <__hi0bits+0x3c>
 800f650:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f654:	f100 0001 	add.w	r0, r0, #1
 800f658:	bf08      	it	eq
 800f65a:	2020      	moveq	r0, #32
 800f65c:	4770      	bx	lr

0800f65e <__lo0bits>:
 800f65e:	6803      	ldr	r3, [r0, #0]
 800f660:	4602      	mov	r2, r0
 800f662:	f013 0007 	ands.w	r0, r3, #7
 800f666:	d00b      	beq.n	800f680 <__lo0bits+0x22>
 800f668:	07d9      	lsls	r1, r3, #31
 800f66a:	d421      	bmi.n	800f6b0 <__lo0bits+0x52>
 800f66c:	0798      	lsls	r0, r3, #30
 800f66e:	bf49      	itett	mi
 800f670:	085b      	lsrmi	r3, r3, #1
 800f672:	089b      	lsrpl	r3, r3, #2
 800f674:	2001      	movmi	r0, #1
 800f676:	6013      	strmi	r3, [r2, #0]
 800f678:	bf5c      	itt	pl
 800f67a:	6013      	strpl	r3, [r2, #0]
 800f67c:	2002      	movpl	r0, #2
 800f67e:	4770      	bx	lr
 800f680:	b299      	uxth	r1, r3
 800f682:	b909      	cbnz	r1, 800f688 <__lo0bits+0x2a>
 800f684:	0c1b      	lsrs	r3, r3, #16
 800f686:	2010      	movs	r0, #16
 800f688:	b2d9      	uxtb	r1, r3
 800f68a:	b909      	cbnz	r1, 800f690 <__lo0bits+0x32>
 800f68c:	3008      	adds	r0, #8
 800f68e:	0a1b      	lsrs	r3, r3, #8
 800f690:	0719      	lsls	r1, r3, #28
 800f692:	bf04      	itt	eq
 800f694:	091b      	lsreq	r3, r3, #4
 800f696:	3004      	addeq	r0, #4
 800f698:	0799      	lsls	r1, r3, #30
 800f69a:	bf04      	itt	eq
 800f69c:	089b      	lsreq	r3, r3, #2
 800f69e:	3002      	addeq	r0, #2
 800f6a0:	07d9      	lsls	r1, r3, #31
 800f6a2:	d403      	bmi.n	800f6ac <__lo0bits+0x4e>
 800f6a4:	085b      	lsrs	r3, r3, #1
 800f6a6:	f100 0001 	add.w	r0, r0, #1
 800f6aa:	d003      	beq.n	800f6b4 <__lo0bits+0x56>
 800f6ac:	6013      	str	r3, [r2, #0]
 800f6ae:	4770      	bx	lr
 800f6b0:	2000      	movs	r0, #0
 800f6b2:	4770      	bx	lr
 800f6b4:	2020      	movs	r0, #32
 800f6b6:	4770      	bx	lr

0800f6b8 <__i2b>:
 800f6b8:	b510      	push	{r4, lr}
 800f6ba:	460c      	mov	r4, r1
 800f6bc:	2101      	movs	r1, #1
 800f6be:	f7ff febd 	bl	800f43c <_Balloc>
 800f6c2:	4602      	mov	r2, r0
 800f6c4:	b928      	cbnz	r0, 800f6d2 <__i2b+0x1a>
 800f6c6:	4b05      	ldr	r3, [pc, #20]	@ (800f6dc <__i2b+0x24>)
 800f6c8:	4805      	ldr	r0, [pc, #20]	@ (800f6e0 <__i2b+0x28>)
 800f6ca:	f240 1145 	movw	r1, #325	@ 0x145
 800f6ce:	f7fc fb37 	bl	800bd40 <__assert_func>
 800f6d2:	2301      	movs	r3, #1
 800f6d4:	6144      	str	r4, [r0, #20]
 800f6d6:	6103      	str	r3, [r0, #16]
 800f6d8:	bd10      	pop	{r4, pc}
 800f6da:	bf00      	nop
 800f6dc:	0801108b 	.word	0x0801108b
 800f6e0:	080110fc 	.word	0x080110fc

0800f6e4 <__multiply>:
 800f6e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6e8:	4617      	mov	r7, r2
 800f6ea:	690a      	ldr	r2, [r1, #16]
 800f6ec:	693b      	ldr	r3, [r7, #16]
 800f6ee:	429a      	cmp	r2, r3
 800f6f0:	bfa8      	it	ge
 800f6f2:	463b      	movge	r3, r7
 800f6f4:	4689      	mov	r9, r1
 800f6f6:	bfa4      	itt	ge
 800f6f8:	460f      	movge	r7, r1
 800f6fa:	4699      	movge	r9, r3
 800f6fc:	693d      	ldr	r5, [r7, #16]
 800f6fe:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f702:	68bb      	ldr	r3, [r7, #8]
 800f704:	6879      	ldr	r1, [r7, #4]
 800f706:	eb05 060a 	add.w	r6, r5, sl
 800f70a:	42b3      	cmp	r3, r6
 800f70c:	b085      	sub	sp, #20
 800f70e:	bfb8      	it	lt
 800f710:	3101      	addlt	r1, #1
 800f712:	f7ff fe93 	bl	800f43c <_Balloc>
 800f716:	b930      	cbnz	r0, 800f726 <__multiply+0x42>
 800f718:	4602      	mov	r2, r0
 800f71a:	4b41      	ldr	r3, [pc, #260]	@ (800f820 <__multiply+0x13c>)
 800f71c:	4841      	ldr	r0, [pc, #260]	@ (800f824 <__multiply+0x140>)
 800f71e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f722:	f7fc fb0d 	bl	800bd40 <__assert_func>
 800f726:	f100 0414 	add.w	r4, r0, #20
 800f72a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800f72e:	4623      	mov	r3, r4
 800f730:	2200      	movs	r2, #0
 800f732:	4573      	cmp	r3, lr
 800f734:	d320      	bcc.n	800f778 <__multiply+0x94>
 800f736:	f107 0814 	add.w	r8, r7, #20
 800f73a:	f109 0114 	add.w	r1, r9, #20
 800f73e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800f742:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800f746:	9302      	str	r3, [sp, #8]
 800f748:	1beb      	subs	r3, r5, r7
 800f74a:	3b15      	subs	r3, #21
 800f74c:	f023 0303 	bic.w	r3, r3, #3
 800f750:	3304      	adds	r3, #4
 800f752:	3715      	adds	r7, #21
 800f754:	42bd      	cmp	r5, r7
 800f756:	bf38      	it	cc
 800f758:	2304      	movcc	r3, #4
 800f75a:	9301      	str	r3, [sp, #4]
 800f75c:	9b02      	ldr	r3, [sp, #8]
 800f75e:	9103      	str	r1, [sp, #12]
 800f760:	428b      	cmp	r3, r1
 800f762:	d80c      	bhi.n	800f77e <__multiply+0x9a>
 800f764:	2e00      	cmp	r6, #0
 800f766:	dd03      	ble.n	800f770 <__multiply+0x8c>
 800f768:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d055      	beq.n	800f81c <__multiply+0x138>
 800f770:	6106      	str	r6, [r0, #16]
 800f772:	b005      	add	sp, #20
 800f774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f778:	f843 2b04 	str.w	r2, [r3], #4
 800f77c:	e7d9      	b.n	800f732 <__multiply+0x4e>
 800f77e:	f8b1 a000 	ldrh.w	sl, [r1]
 800f782:	f1ba 0f00 	cmp.w	sl, #0
 800f786:	d01f      	beq.n	800f7c8 <__multiply+0xe4>
 800f788:	46c4      	mov	ip, r8
 800f78a:	46a1      	mov	r9, r4
 800f78c:	2700      	movs	r7, #0
 800f78e:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f792:	f8d9 3000 	ldr.w	r3, [r9]
 800f796:	fa1f fb82 	uxth.w	fp, r2
 800f79a:	b29b      	uxth	r3, r3
 800f79c:	fb0a 330b 	mla	r3, sl, fp, r3
 800f7a0:	443b      	add	r3, r7
 800f7a2:	f8d9 7000 	ldr.w	r7, [r9]
 800f7a6:	0c12      	lsrs	r2, r2, #16
 800f7a8:	0c3f      	lsrs	r7, r7, #16
 800f7aa:	fb0a 7202 	mla	r2, sl, r2, r7
 800f7ae:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800f7b2:	b29b      	uxth	r3, r3
 800f7b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f7b8:	4565      	cmp	r5, ip
 800f7ba:	f849 3b04 	str.w	r3, [r9], #4
 800f7be:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800f7c2:	d8e4      	bhi.n	800f78e <__multiply+0xaa>
 800f7c4:	9b01      	ldr	r3, [sp, #4]
 800f7c6:	50e7      	str	r7, [r4, r3]
 800f7c8:	9b03      	ldr	r3, [sp, #12]
 800f7ca:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f7ce:	3104      	adds	r1, #4
 800f7d0:	f1b9 0f00 	cmp.w	r9, #0
 800f7d4:	d020      	beq.n	800f818 <__multiply+0x134>
 800f7d6:	6823      	ldr	r3, [r4, #0]
 800f7d8:	4647      	mov	r7, r8
 800f7da:	46a4      	mov	ip, r4
 800f7dc:	f04f 0a00 	mov.w	sl, #0
 800f7e0:	f8b7 b000 	ldrh.w	fp, [r7]
 800f7e4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800f7e8:	fb09 220b 	mla	r2, r9, fp, r2
 800f7ec:	4452      	add	r2, sl
 800f7ee:	b29b      	uxth	r3, r3
 800f7f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f7f4:	f84c 3b04 	str.w	r3, [ip], #4
 800f7f8:	f857 3b04 	ldr.w	r3, [r7], #4
 800f7fc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f800:	f8bc 3000 	ldrh.w	r3, [ip]
 800f804:	fb09 330a 	mla	r3, r9, sl, r3
 800f808:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800f80c:	42bd      	cmp	r5, r7
 800f80e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f812:	d8e5      	bhi.n	800f7e0 <__multiply+0xfc>
 800f814:	9a01      	ldr	r2, [sp, #4]
 800f816:	50a3      	str	r3, [r4, r2]
 800f818:	3404      	adds	r4, #4
 800f81a:	e79f      	b.n	800f75c <__multiply+0x78>
 800f81c:	3e01      	subs	r6, #1
 800f81e:	e7a1      	b.n	800f764 <__multiply+0x80>
 800f820:	0801108b 	.word	0x0801108b
 800f824:	080110fc 	.word	0x080110fc

0800f828 <__pow5mult>:
 800f828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f82c:	4615      	mov	r5, r2
 800f82e:	f012 0203 	ands.w	r2, r2, #3
 800f832:	4607      	mov	r7, r0
 800f834:	460e      	mov	r6, r1
 800f836:	d007      	beq.n	800f848 <__pow5mult+0x20>
 800f838:	4c25      	ldr	r4, [pc, #148]	@ (800f8d0 <__pow5mult+0xa8>)
 800f83a:	3a01      	subs	r2, #1
 800f83c:	2300      	movs	r3, #0
 800f83e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f842:	f7ff fe5d 	bl	800f500 <__multadd>
 800f846:	4606      	mov	r6, r0
 800f848:	10ad      	asrs	r5, r5, #2
 800f84a:	d03d      	beq.n	800f8c8 <__pow5mult+0xa0>
 800f84c:	69fc      	ldr	r4, [r7, #28]
 800f84e:	b97c      	cbnz	r4, 800f870 <__pow5mult+0x48>
 800f850:	2010      	movs	r0, #16
 800f852:	f7fc faa7 	bl	800bda4 <malloc>
 800f856:	4602      	mov	r2, r0
 800f858:	61f8      	str	r0, [r7, #28]
 800f85a:	b928      	cbnz	r0, 800f868 <__pow5mult+0x40>
 800f85c:	4b1d      	ldr	r3, [pc, #116]	@ (800f8d4 <__pow5mult+0xac>)
 800f85e:	481e      	ldr	r0, [pc, #120]	@ (800f8d8 <__pow5mult+0xb0>)
 800f860:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f864:	f7fc fa6c 	bl	800bd40 <__assert_func>
 800f868:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f86c:	6004      	str	r4, [r0, #0]
 800f86e:	60c4      	str	r4, [r0, #12]
 800f870:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f874:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f878:	b94c      	cbnz	r4, 800f88e <__pow5mult+0x66>
 800f87a:	f240 2171 	movw	r1, #625	@ 0x271
 800f87e:	4638      	mov	r0, r7
 800f880:	f7ff ff1a 	bl	800f6b8 <__i2b>
 800f884:	2300      	movs	r3, #0
 800f886:	f8c8 0008 	str.w	r0, [r8, #8]
 800f88a:	4604      	mov	r4, r0
 800f88c:	6003      	str	r3, [r0, #0]
 800f88e:	f04f 0900 	mov.w	r9, #0
 800f892:	07eb      	lsls	r3, r5, #31
 800f894:	d50a      	bpl.n	800f8ac <__pow5mult+0x84>
 800f896:	4631      	mov	r1, r6
 800f898:	4622      	mov	r2, r4
 800f89a:	4638      	mov	r0, r7
 800f89c:	f7ff ff22 	bl	800f6e4 <__multiply>
 800f8a0:	4631      	mov	r1, r6
 800f8a2:	4680      	mov	r8, r0
 800f8a4:	4638      	mov	r0, r7
 800f8a6:	f7ff fe09 	bl	800f4bc <_Bfree>
 800f8aa:	4646      	mov	r6, r8
 800f8ac:	106d      	asrs	r5, r5, #1
 800f8ae:	d00b      	beq.n	800f8c8 <__pow5mult+0xa0>
 800f8b0:	6820      	ldr	r0, [r4, #0]
 800f8b2:	b938      	cbnz	r0, 800f8c4 <__pow5mult+0x9c>
 800f8b4:	4622      	mov	r2, r4
 800f8b6:	4621      	mov	r1, r4
 800f8b8:	4638      	mov	r0, r7
 800f8ba:	f7ff ff13 	bl	800f6e4 <__multiply>
 800f8be:	6020      	str	r0, [r4, #0]
 800f8c0:	f8c0 9000 	str.w	r9, [r0]
 800f8c4:	4604      	mov	r4, r0
 800f8c6:	e7e4      	b.n	800f892 <__pow5mult+0x6a>
 800f8c8:	4630      	mov	r0, r6
 800f8ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f8ce:	bf00      	nop
 800f8d0:	080111b8 	.word	0x080111b8
 800f8d4:	0801101c 	.word	0x0801101c
 800f8d8:	080110fc 	.word	0x080110fc

0800f8dc <__lshift>:
 800f8dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f8e0:	460c      	mov	r4, r1
 800f8e2:	6849      	ldr	r1, [r1, #4]
 800f8e4:	6923      	ldr	r3, [r4, #16]
 800f8e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f8ea:	68a3      	ldr	r3, [r4, #8]
 800f8ec:	4607      	mov	r7, r0
 800f8ee:	4691      	mov	r9, r2
 800f8f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f8f4:	f108 0601 	add.w	r6, r8, #1
 800f8f8:	42b3      	cmp	r3, r6
 800f8fa:	db0b      	blt.n	800f914 <__lshift+0x38>
 800f8fc:	4638      	mov	r0, r7
 800f8fe:	f7ff fd9d 	bl	800f43c <_Balloc>
 800f902:	4605      	mov	r5, r0
 800f904:	b948      	cbnz	r0, 800f91a <__lshift+0x3e>
 800f906:	4602      	mov	r2, r0
 800f908:	4b28      	ldr	r3, [pc, #160]	@ (800f9ac <__lshift+0xd0>)
 800f90a:	4829      	ldr	r0, [pc, #164]	@ (800f9b0 <__lshift+0xd4>)
 800f90c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f910:	f7fc fa16 	bl	800bd40 <__assert_func>
 800f914:	3101      	adds	r1, #1
 800f916:	005b      	lsls	r3, r3, #1
 800f918:	e7ee      	b.n	800f8f8 <__lshift+0x1c>
 800f91a:	2300      	movs	r3, #0
 800f91c:	f100 0114 	add.w	r1, r0, #20
 800f920:	f100 0210 	add.w	r2, r0, #16
 800f924:	4618      	mov	r0, r3
 800f926:	4553      	cmp	r3, sl
 800f928:	db33      	blt.n	800f992 <__lshift+0xb6>
 800f92a:	6920      	ldr	r0, [r4, #16]
 800f92c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f930:	f104 0314 	add.w	r3, r4, #20
 800f934:	f019 091f 	ands.w	r9, r9, #31
 800f938:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f93c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f940:	d02b      	beq.n	800f99a <__lshift+0xbe>
 800f942:	f1c9 0e20 	rsb	lr, r9, #32
 800f946:	468a      	mov	sl, r1
 800f948:	2200      	movs	r2, #0
 800f94a:	6818      	ldr	r0, [r3, #0]
 800f94c:	fa00 f009 	lsl.w	r0, r0, r9
 800f950:	4310      	orrs	r0, r2
 800f952:	f84a 0b04 	str.w	r0, [sl], #4
 800f956:	f853 2b04 	ldr.w	r2, [r3], #4
 800f95a:	459c      	cmp	ip, r3
 800f95c:	fa22 f20e 	lsr.w	r2, r2, lr
 800f960:	d8f3      	bhi.n	800f94a <__lshift+0x6e>
 800f962:	ebac 0304 	sub.w	r3, ip, r4
 800f966:	3b15      	subs	r3, #21
 800f968:	f023 0303 	bic.w	r3, r3, #3
 800f96c:	3304      	adds	r3, #4
 800f96e:	f104 0015 	add.w	r0, r4, #21
 800f972:	4560      	cmp	r0, ip
 800f974:	bf88      	it	hi
 800f976:	2304      	movhi	r3, #4
 800f978:	50ca      	str	r2, [r1, r3]
 800f97a:	b10a      	cbz	r2, 800f980 <__lshift+0xa4>
 800f97c:	f108 0602 	add.w	r6, r8, #2
 800f980:	3e01      	subs	r6, #1
 800f982:	4638      	mov	r0, r7
 800f984:	612e      	str	r6, [r5, #16]
 800f986:	4621      	mov	r1, r4
 800f988:	f7ff fd98 	bl	800f4bc <_Bfree>
 800f98c:	4628      	mov	r0, r5
 800f98e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f992:	f842 0f04 	str.w	r0, [r2, #4]!
 800f996:	3301      	adds	r3, #1
 800f998:	e7c5      	b.n	800f926 <__lshift+0x4a>
 800f99a:	3904      	subs	r1, #4
 800f99c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f9a0:	f841 2f04 	str.w	r2, [r1, #4]!
 800f9a4:	459c      	cmp	ip, r3
 800f9a6:	d8f9      	bhi.n	800f99c <__lshift+0xc0>
 800f9a8:	e7ea      	b.n	800f980 <__lshift+0xa4>
 800f9aa:	bf00      	nop
 800f9ac:	0801108b 	.word	0x0801108b
 800f9b0:	080110fc 	.word	0x080110fc

0800f9b4 <__mcmp>:
 800f9b4:	690a      	ldr	r2, [r1, #16]
 800f9b6:	4603      	mov	r3, r0
 800f9b8:	6900      	ldr	r0, [r0, #16]
 800f9ba:	1a80      	subs	r0, r0, r2
 800f9bc:	b530      	push	{r4, r5, lr}
 800f9be:	d10e      	bne.n	800f9de <__mcmp+0x2a>
 800f9c0:	3314      	adds	r3, #20
 800f9c2:	3114      	adds	r1, #20
 800f9c4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f9c8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f9cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f9d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f9d4:	4295      	cmp	r5, r2
 800f9d6:	d003      	beq.n	800f9e0 <__mcmp+0x2c>
 800f9d8:	d205      	bcs.n	800f9e6 <__mcmp+0x32>
 800f9da:	f04f 30ff 	mov.w	r0, #4294967295
 800f9de:	bd30      	pop	{r4, r5, pc}
 800f9e0:	42a3      	cmp	r3, r4
 800f9e2:	d3f3      	bcc.n	800f9cc <__mcmp+0x18>
 800f9e4:	e7fb      	b.n	800f9de <__mcmp+0x2a>
 800f9e6:	2001      	movs	r0, #1
 800f9e8:	e7f9      	b.n	800f9de <__mcmp+0x2a>
	...

0800f9ec <__mdiff>:
 800f9ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9f0:	4689      	mov	r9, r1
 800f9f2:	4606      	mov	r6, r0
 800f9f4:	4611      	mov	r1, r2
 800f9f6:	4648      	mov	r0, r9
 800f9f8:	4614      	mov	r4, r2
 800f9fa:	f7ff ffdb 	bl	800f9b4 <__mcmp>
 800f9fe:	1e05      	subs	r5, r0, #0
 800fa00:	d112      	bne.n	800fa28 <__mdiff+0x3c>
 800fa02:	4629      	mov	r1, r5
 800fa04:	4630      	mov	r0, r6
 800fa06:	f7ff fd19 	bl	800f43c <_Balloc>
 800fa0a:	4602      	mov	r2, r0
 800fa0c:	b928      	cbnz	r0, 800fa1a <__mdiff+0x2e>
 800fa0e:	4b3f      	ldr	r3, [pc, #252]	@ (800fb0c <__mdiff+0x120>)
 800fa10:	f240 2137 	movw	r1, #567	@ 0x237
 800fa14:	483e      	ldr	r0, [pc, #248]	@ (800fb10 <__mdiff+0x124>)
 800fa16:	f7fc f993 	bl	800bd40 <__assert_func>
 800fa1a:	2301      	movs	r3, #1
 800fa1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fa20:	4610      	mov	r0, r2
 800fa22:	b003      	add	sp, #12
 800fa24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa28:	bfbc      	itt	lt
 800fa2a:	464b      	movlt	r3, r9
 800fa2c:	46a1      	movlt	r9, r4
 800fa2e:	4630      	mov	r0, r6
 800fa30:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800fa34:	bfba      	itte	lt
 800fa36:	461c      	movlt	r4, r3
 800fa38:	2501      	movlt	r5, #1
 800fa3a:	2500      	movge	r5, #0
 800fa3c:	f7ff fcfe 	bl	800f43c <_Balloc>
 800fa40:	4602      	mov	r2, r0
 800fa42:	b918      	cbnz	r0, 800fa4c <__mdiff+0x60>
 800fa44:	4b31      	ldr	r3, [pc, #196]	@ (800fb0c <__mdiff+0x120>)
 800fa46:	f240 2145 	movw	r1, #581	@ 0x245
 800fa4a:	e7e3      	b.n	800fa14 <__mdiff+0x28>
 800fa4c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800fa50:	6926      	ldr	r6, [r4, #16]
 800fa52:	60c5      	str	r5, [r0, #12]
 800fa54:	f109 0310 	add.w	r3, r9, #16
 800fa58:	f109 0514 	add.w	r5, r9, #20
 800fa5c:	f104 0e14 	add.w	lr, r4, #20
 800fa60:	f100 0b14 	add.w	fp, r0, #20
 800fa64:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800fa68:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800fa6c:	9301      	str	r3, [sp, #4]
 800fa6e:	46d9      	mov	r9, fp
 800fa70:	f04f 0c00 	mov.w	ip, #0
 800fa74:	9b01      	ldr	r3, [sp, #4]
 800fa76:	f85e 0b04 	ldr.w	r0, [lr], #4
 800fa7a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800fa7e:	9301      	str	r3, [sp, #4]
 800fa80:	fa1f f38a 	uxth.w	r3, sl
 800fa84:	4619      	mov	r1, r3
 800fa86:	b283      	uxth	r3, r0
 800fa88:	1acb      	subs	r3, r1, r3
 800fa8a:	0c00      	lsrs	r0, r0, #16
 800fa8c:	4463      	add	r3, ip
 800fa8e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800fa92:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800fa96:	b29b      	uxth	r3, r3
 800fa98:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800fa9c:	4576      	cmp	r6, lr
 800fa9e:	f849 3b04 	str.w	r3, [r9], #4
 800faa2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800faa6:	d8e5      	bhi.n	800fa74 <__mdiff+0x88>
 800faa8:	1b33      	subs	r3, r6, r4
 800faaa:	3b15      	subs	r3, #21
 800faac:	f023 0303 	bic.w	r3, r3, #3
 800fab0:	3415      	adds	r4, #21
 800fab2:	3304      	adds	r3, #4
 800fab4:	42a6      	cmp	r6, r4
 800fab6:	bf38      	it	cc
 800fab8:	2304      	movcc	r3, #4
 800faba:	441d      	add	r5, r3
 800fabc:	445b      	add	r3, fp
 800fabe:	461e      	mov	r6, r3
 800fac0:	462c      	mov	r4, r5
 800fac2:	4544      	cmp	r4, r8
 800fac4:	d30e      	bcc.n	800fae4 <__mdiff+0xf8>
 800fac6:	f108 0103 	add.w	r1, r8, #3
 800faca:	1b49      	subs	r1, r1, r5
 800facc:	f021 0103 	bic.w	r1, r1, #3
 800fad0:	3d03      	subs	r5, #3
 800fad2:	45a8      	cmp	r8, r5
 800fad4:	bf38      	it	cc
 800fad6:	2100      	movcc	r1, #0
 800fad8:	440b      	add	r3, r1
 800fada:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fade:	b191      	cbz	r1, 800fb06 <__mdiff+0x11a>
 800fae0:	6117      	str	r7, [r2, #16]
 800fae2:	e79d      	b.n	800fa20 <__mdiff+0x34>
 800fae4:	f854 1b04 	ldr.w	r1, [r4], #4
 800fae8:	46e6      	mov	lr, ip
 800faea:	0c08      	lsrs	r0, r1, #16
 800faec:	fa1c fc81 	uxtah	ip, ip, r1
 800faf0:	4471      	add	r1, lr
 800faf2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800faf6:	b289      	uxth	r1, r1
 800faf8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800fafc:	f846 1b04 	str.w	r1, [r6], #4
 800fb00:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fb04:	e7dd      	b.n	800fac2 <__mdiff+0xd6>
 800fb06:	3f01      	subs	r7, #1
 800fb08:	e7e7      	b.n	800fada <__mdiff+0xee>
 800fb0a:	bf00      	nop
 800fb0c:	0801108b 	.word	0x0801108b
 800fb10:	080110fc 	.word	0x080110fc

0800fb14 <__ulp>:
 800fb14:	b082      	sub	sp, #8
 800fb16:	ed8d 0b00 	vstr	d0, [sp]
 800fb1a:	9a01      	ldr	r2, [sp, #4]
 800fb1c:	4b0f      	ldr	r3, [pc, #60]	@ (800fb5c <__ulp+0x48>)
 800fb1e:	4013      	ands	r3, r2
 800fb20:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	dc08      	bgt.n	800fb3a <__ulp+0x26>
 800fb28:	425b      	negs	r3, r3
 800fb2a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800fb2e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800fb32:	da04      	bge.n	800fb3e <__ulp+0x2a>
 800fb34:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800fb38:	4113      	asrs	r3, r2
 800fb3a:	2200      	movs	r2, #0
 800fb3c:	e008      	b.n	800fb50 <__ulp+0x3c>
 800fb3e:	f1a2 0314 	sub.w	r3, r2, #20
 800fb42:	2b1e      	cmp	r3, #30
 800fb44:	bfda      	itte	le
 800fb46:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800fb4a:	40da      	lsrle	r2, r3
 800fb4c:	2201      	movgt	r2, #1
 800fb4e:	2300      	movs	r3, #0
 800fb50:	4619      	mov	r1, r3
 800fb52:	4610      	mov	r0, r2
 800fb54:	ec41 0b10 	vmov	d0, r0, r1
 800fb58:	b002      	add	sp, #8
 800fb5a:	4770      	bx	lr
 800fb5c:	7ff00000 	.word	0x7ff00000

0800fb60 <__b2d>:
 800fb60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb64:	6906      	ldr	r6, [r0, #16]
 800fb66:	f100 0814 	add.w	r8, r0, #20
 800fb6a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800fb6e:	1f37      	subs	r7, r6, #4
 800fb70:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800fb74:	4610      	mov	r0, r2
 800fb76:	f7ff fd53 	bl	800f620 <__hi0bits>
 800fb7a:	f1c0 0320 	rsb	r3, r0, #32
 800fb7e:	280a      	cmp	r0, #10
 800fb80:	600b      	str	r3, [r1, #0]
 800fb82:	491b      	ldr	r1, [pc, #108]	@ (800fbf0 <__b2d+0x90>)
 800fb84:	dc15      	bgt.n	800fbb2 <__b2d+0x52>
 800fb86:	f1c0 0c0b 	rsb	ip, r0, #11
 800fb8a:	fa22 f30c 	lsr.w	r3, r2, ip
 800fb8e:	45b8      	cmp	r8, r7
 800fb90:	ea43 0501 	orr.w	r5, r3, r1
 800fb94:	bf34      	ite	cc
 800fb96:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800fb9a:	2300      	movcs	r3, #0
 800fb9c:	3015      	adds	r0, #21
 800fb9e:	fa02 f000 	lsl.w	r0, r2, r0
 800fba2:	fa23 f30c 	lsr.w	r3, r3, ip
 800fba6:	4303      	orrs	r3, r0
 800fba8:	461c      	mov	r4, r3
 800fbaa:	ec45 4b10 	vmov	d0, r4, r5
 800fbae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbb2:	45b8      	cmp	r8, r7
 800fbb4:	bf3a      	itte	cc
 800fbb6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800fbba:	f1a6 0708 	subcc.w	r7, r6, #8
 800fbbe:	2300      	movcs	r3, #0
 800fbc0:	380b      	subs	r0, #11
 800fbc2:	d012      	beq.n	800fbea <__b2d+0x8a>
 800fbc4:	f1c0 0120 	rsb	r1, r0, #32
 800fbc8:	fa23 f401 	lsr.w	r4, r3, r1
 800fbcc:	4082      	lsls	r2, r0
 800fbce:	4322      	orrs	r2, r4
 800fbd0:	4547      	cmp	r7, r8
 800fbd2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800fbd6:	bf8c      	ite	hi
 800fbd8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800fbdc:	2200      	movls	r2, #0
 800fbde:	4083      	lsls	r3, r0
 800fbe0:	40ca      	lsrs	r2, r1
 800fbe2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800fbe6:	4313      	orrs	r3, r2
 800fbe8:	e7de      	b.n	800fba8 <__b2d+0x48>
 800fbea:	ea42 0501 	orr.w	r5, r2, r1
 800fbee:	e7db      	b.n	800fba8 <__b2d+0x48>
 800fbf0:	3ff00000 	.word	0x3ff00000

0800fbf4 <__d2b>:
 800fbf4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fbf8:	460f      	mov	r7, r1
 800fbfa:	2101      	movs	r1, #1
 800fbfc:	ec59 8b10 	vmov	r8, r9, d0
 800fc00:	4616      	mov	r6, r2
 800fc02:	f7ff fc1b 	bl	800f43c <_Balloc>
 800fc06:	4604      	mov	r4, r0
 800fc08:	b930      	cbnz	r0, 800fc18 <__d2b+0x24>
 800fc0a:	4602      	mov	r2, r0
 800fc0c:	4b23      	ldr	r3, [pc, #140]	@ (800fc9c <__d2b+0xa8>)
 800fc0e:	4824      	ldr	r0, [pc, #144]	@ (800fca0 <__d2b+0xac>)
 800fc10:	f240 310f 	movw	r1, #783	@ 0x30f
 800fc14:	f7fc f894 	bl	800bd40 <__assert_func>
 800fc18:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fc1c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fc20:	b10d      	cbz	r5, 800fc26 <__d2b+0x32>
 800fc22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fc26:	9301      	str	r3, [sp, #4]
 800fc28:	f1b8 0300 	subs.w	r3, r8, #0
 800fc2c:	d023      	beq.n	800fc76 <__d2b+0x82>
 800fc2e:	4668      	mov	r0, sp
 800fc30:	9300      	str	r3, [sp, #0]
 800fc32:	f7ff fd14 	bl	800f65e <__lo0bits>
 800fc36:	e9dd 1200 	ldrd	r1, r2, [sp]
 800fc3a:	b1d0      	cbz	r0, 800fc72 <__d2b+0x7e>
 800fc3c:	f1c0 0320 	rsb	r3, r0, #32
 800fc40:	fa02 f303 	lsl.w	r3, r2, r3
 800fc44:	430b      	orrs	r3, r1
 800fc46:	40c2      	lsrs	r2, r0
 800fc48:	6163      	str	r3, [r4, #20]
 800fc4a:	9201      	str	r2, [sp, #4]
 800fc4c:	9b01      	ldr	r3, [sp, #4]
 800fc4e:	61a3      	str	r3, [r4, #24]
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	bf0c      	ite	eq
 800fc54:	2201      	moveq	r2, #1
 800fc56:	2202      	movne	r2, #2
 800fc58:	6122      	str	r2, [r4, #16]
 800fc5a:	b1a5      	cbz	r5, 800fc86 <__d2b+0x92>
 800fc5c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800fc60:	4405      	add	r5, r0
 800fc62:	603d      	str	r5, [r7, #0]
 800fc64:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800fc68:	6030      	str	r0, [r6, #0]
 800fc6a:	4620      	mov	r0, r4
 800fc6c:	b003      	add	sp, #12
 800fc6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fc72:	6161      	str	r1, [r4, #20]
 800fc74:	e7ea      	b.n	800fc4c <__d2b+0x58>
 800fc76:	a801      	add	r0, sp, #4
 800fc78:	f7ff fcf1 	bl	800f65e <__lo0bits>
 800fc7c:	9b01      	ldr	r3, [sp, #4]
 800fc7e:	6163      	str	r3, [r4, #20]
 800fc80:	3020      	adds	r0, #32
 800fc82:	2201      	movs	r2, #1
 800fc84:	e7e8      	b.n	800fc58 <__d2b+0x64>
 800fc86:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fc8a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800fc8e:	6038      	str	r0, [r7, #0]
 800fc90:	6918      	ldr	r0, [r3, #16]
 800fc92:	f7ff fcc5 	bl	800f620 <__hi0bits>
 800fc96:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fc9a:	e7e5      	b.n	800fc68 <__d2b+0x74>
 800fc9c:	0801108b 	.word	0x0801108b
 800fca0:	080110fc 	.word	0x080110fc

0800fca4 <__ratio>:
 800fca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fca8:	b085      	sub	sp, #20
 800fcaa:	e9cd 1000 	strd	r1, r0, [sp]
 800fcae:	a902      	add	r1, sp, #8
 800fcb0:	f7ff ff56 	bl	800fb60 <__b2d>
 800fcb4:	9800      	ldr	r0, [sp, #0]
 800fcb6:	a903      	add	r1, sp, #12
 800fcb8:	ec55 4b10 	vmov	r4, r5, d0
 800fcbc:	f7ff ff50 	bl	800fb60 <__b2d>
 800fcc0:	9b01      	ldr	r3, [sp, #4]
 800fcc2:	6919      	ldr	r1, [r3, #16]
 800fcc4:	9b00      	ldr	r3, [sp, #0]
 800fcc6:	691b      	ldr	r3, [r3, #16]
 800fcc8:	1ac9      	subs	r1, r1, r3
 800fcca:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800fcce:	1a9b      	subs	r3, r3, r2
 800fcd0:	ec5b ab10 	vmov	sl, fp, d0
 800fcd4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	bfce      	itee	gt
 800fcdc:	462a      	movgt	r2, r5
 800fcde:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800fce2:	465a      	movle	r2, fp
 800fce4:	462f      	mov	r7, r5
 800fce6:	46d9      	mov	r9, fp
 800fce8:	bfcc      	ite	gt
 800fcea:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800fcee:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800fcf2:	464b      	mov	r3, r9
 800fcf4:	4652      	mov	r2, sl
 800fcf6:	4620      	mov	r0, r4
 800fcf8:	4639      	mov	r1, r7
 800fcfa:	f7f0 fdc7 	bl	800088c <__aeabi_ddiv>
 800fcfe:	ec41 0b10 	vmov	d0, r0, r1
 800fd02:	b005      	add	sp, #20
 800fd04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fd08 <__copybits>:
 800fd08:	3901      	subs	r1, #1
 800fd0a:	b570      	push	{r4, r5, r6, lr}
 800fd0c:	1149      	asrs	r1, r1, #5
 800fd0e:	6914      	ldr	r4, [r2, #16]
 800fd10:	3101      	adds	r1, #1
 800fd12:	f102 0314 	add.w	r3, r2, #20
 800fd16:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fd1a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fd1e:	1f05      	subs	r5, r0, #4
 800fd20:	42a3      	cmp	r3, r4
 800fd22:	d30c      	bcc.n	800fd3e <__copybits+0x36>
 800fd24:	1aa3      	subs	r3, r4, r2
 800fd26:	3b11      	subs	r3, #17
 800fd28:	f023 0303 	bic.w	r3, r3, #3
 800fd2c:	3211      	adds	r2, #17
 800fd2e:	42a2      	cmp	r2, r4
 800fd30:	bf88      	it	hi
 800fd32:	2300      	movhi	r3, #0
 800fd34:	4418      	add	r0, r3
 800fd36:	2300      	movs	r3, #0
 800fd38:	4288      	cmp	r0, r1
 800fd3a:	d305      	bcc.n	800fd48 <__copybits+0x40>
 800fd3c:	bd70      	pop	{r4, r5, r6, pc}
 800fd3e:	f853 6b04 	ldr.w	r6, [r3], #4
 800fd42:	f845 6f04 	str.w	r6, [r5, #4]!
 800fd46:	e7eb      	b.n	800fd20 <__copybits+0x18>
 800fd48:	f840 3b04 	str.w	r3, [r0], #4
 800fd4c:	e7f4      	b.n	800fd38 <__copybits+0x30>

0800fd4e <__any_on>:
 800fd4e:	f100 0214 	add.w	r2, r0, #20
 800fd52:	6900      	ldr	r0, [r0, #16]
 800fd54:	114b      	asrs	r3, r1, #5
 800fd56:	4298      	cmp	r0, r3
 800fd58:	b510      	push	{r4, lr}
 800fd5a:	db11      	blt.n	800fd80 <__any_on+0x32>
 800fd5c:	dd0a      	ble.n	800fd74 <__any_on+0x26>
 800fd5e:	f011 011f 	ands.w	r1, r1, #31
 800fd62:	d007      	beq.n	800fd74 <__any_on+0x26>
 800fd64:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fd68:	fa24 f001 	lsr.w	r0, r4, r1
 800fd6c:	fa00 f101 	lsl.w	r1, r0, r1
 800fd70:	428c      	cmp	r4, r1
 800fd72:	d10b      	bne.n	800fd8c <__any_on+0x3e>
 800fd74:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fd78:	4293      	cmp	r3, r2
 800fd7a:	d803      	bhi.n	800fd84 <__any_on+0x36>
 800fd7c:	2000      	movs	r0, #0
 800fd7e:	bd10      	pop	{r4, pc}
 800fd80:	4603      	mov	r3, r0
 800fd82:	e7f7      	b.n	800fd74 <__any_on+0x26>
 800fd84:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fd88:	2900      	cmp	r1, #0
 800fd8a:	d0f5      	beq.n	800fd78 <__any_on+0x2a>
 800fd8c:	2001      	movs	r0, #1
 800fd8e:	e7f6      	b.n	800fd7e <__any_on+0x30>

0800fd90 <_realloc_r>:
 800fd90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd94:	4607      	mov	r7, r0
 800fd96:	4614      	mov	r4, r2
 800fd98:	460d      	mov	r5, r1
 800fd9a:	b921      	cbnz	r1, 800fda6 <_realloc_r+0x16>
 800fd9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fda0:	4611      	mov	r1, r2
 800fda2:	f7fc b831 	b.w	800be08 <_malloc_r>
 800fda6:	b92a      	cbnz	r2, 800fdb4 <_realloc_r+0x24>
 800fda8:	f7fe ff7e 	bl	800eca8 <_free_r>
 800fdac:	4625      	mov	r5, r4
 800fdae:	4628      	mov	r0, r5
 800fdb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdb4:	f000 fc1e 	bl	80105f4 <_malloc_usable_size_r>
 800fdb8:	4284      	cmp	r4, r0
 800fdba:	4606      	mov	r6, r0
 800fdbc:	d802      	bhi.n	800fdc4 <_realloc_r+0x34>
 800fdbe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fdc2:	d8f4      	bhi.n	800fdae <_realloc_r+0x1e>
 800fdc4:	4621      	mov	r1, r4
 800fdc6:	4638      	mov	r0, r7
 800fdc8:	f7fc f81e 	bl	800be08 <_malloc_r>
 800fdcc:	4680      	mov	r8, r0
 800fdce:	b908      	cbnz	r0, 800fdd4 <_realloc_r+0x44>
 800fdd0:	4645      	mov	r5, r8
 800fdd2:	e7ec      	b.n	800fdae <_realloc_r+0x1e>
 800fdd4:	42b4      	cmp	r4, r6
 800fdd6:	4622      	mov	r2, r4
 800fdd8:	4629      	mov	r1, r5
 800fdda:	bf28      	it	cs
 800fddc:	4632      	movcs	r2, r6
 800fdde:	f7fe f8e2 	bl	800dfa6 <memcpy>
 800fde2:	4629      	mov	r1, r5
 800fde4:	4638      	mov	r0, r7
 800fde6:	f7fe ff5f 	bl	800eca8 <_free_r>
 800fdea:	e7f1      	b.n	800fdd0 <_realloc_r+0x40>

0800fdec <_strtol_l.isra.0>:
 800fdec:	2b24      	cmp	r3, #36	@ 0x24
 800fdee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fdf2:	4686      	mov	lr, r0
 800fdf4:	4690      	mov	r8, r2
 800fdf6:	d801      	bhi.n	800fdfc <_strtol_l.isra.0+0x10>
 800fdf8:	2b01      	cmp	r3, #1
 800fdfa:	d106      	bne.n	800fe0a <_strtol_l.isra.0+0x1e>
 800fdfc:	f7fe f8a6 	bl	800df4c <__errno>
 800fe00:	2316      	movs	r3, #22
 800fe02:	6003      	str	r3, [r0, #0]
 800fe04:	2000      	movs	r0, #0
 800fe06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe0a:	4834      	ldr	r0, [pc, #208]	@ (800fedc <_strtol_l.isra.0+0xf0>)
 800fe0c:	460d      	mov	r5, r1
 800fe0e:	462a      	mov	r2, r5
 800fe10:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fe14:	5d06      	ldrb	r6, [r0, r4]
 800fe16:	f016 0608 	ands.w	r6, r6, #8
 800fe1a:	d1f8      	bne.n	800fe0e <_strtol_l.isra.0+0x22>
 800fe1c:	2c2d      	cmp	r4, #45	@ 0x2d
 800fe1e:	d110      	bne.n	800fe42 <_strtol_l.isra.0+0x56>
 800fe20:	782c      	ldrb	r4, [r5, #0]
 800fe22:	2601      	movs	r6, #1
 800fe24:	1c95      	adds	r5, r2, #2
 800fe26:	f033 0210 	bics.w	r2, r3, #16
 800fe2a:	d115      	bne.n	800fe58 <_strtol_l.isra.0+0x6c>
 800fe2c:	2c30      	cmp	r4, #48	@ 0x30
 800fe2e:	d10d      	bne.n	800fe4c <_strtol_l.isra.0+0x60>
 800fe30:	782a      	ldrb	r2, [r5, #0]
 800fe32:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800fe36:	2a58      	cmp	r2, #88	@ 0x58
 800fe38:	d108      	bne.n	800fe4c <_strtol_l.isra.0+0x60>
 800fe3a:	786c      	ldrb	r4, [r5, #1]
 800fe3c:	3502      	adds	r5, #2
 800fe3e:	2310      	movs	r3, #16
 800fe40:	e00a      	b.n	800fe58 <_strtol_l.isra.0+0x6c>
 800fe42:	2c2b      	cmp	r4, #43	@ 0x2b
 800fe44:	bf04      	itt	eq
 800fe46:	782c      	ldrbeq	r4, [r5, #0]
 800fe48:	1c95      	addeq	r5, r2, #2
 800fe4a:	e7ec      	b.n	800fe26 <_strtol_l.isra.0+0x3a>
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d1f6      	bne.n	800fe3e <_strtol_l.isra.0+0x52>
 800fe50:	2c30      	cmp	r4, #48	@ 0x30
 800fe52:	bf14      	ite	ne
 800fe54:	230a      	movne	r3, #10
 800fe56:	2308      	moveq	r3, #8
 800fe58:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800fe5c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800fe60:	2200      	movs	r2, #0
 800fe62:	fbbc f9f3 	udiv	r9, ip, r3
 800fe66:	4610      	mov	r0, r2
 800fe68:	fb03 ca19 	mls	sl, r3, r9, ip
 800fe6c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800fe70:	2f09      	cmp	r7, #9
 800fe72:	d80f      	bhi.n	800fe94 <_strtol_l.isra.0+0xa8>
 800fe74:	463c      	mov	r4, r7
 800fe76:	42a3      	cmp	r3, r4
 800fe78:	dd1b      	ble.n	800feb2 <_strtol_l.isra.0+0xc6>
 800fe7a:	1c57      	adds	r7, r2, #1
 800fe7c:	d007      	beq.n	800fe8e <_strtol_l.isra.0+0xa2>
 800fe7e:	4581      	cmp	r9, r0
 800fe80:	d314      	bcc.n	800feac <_strtol_l.isra.0+0xc0>
 800fe82:	d101      	bne.n	800fe88 <_strtol_l.isra.0+0x9c>
 800fe84:	45a2      	cmp	sl, r4
 800fe86:	db11      	blt.n	800feac <_strtol_l.isra.0+0xc0>
 800fe88:	fb00 4003 	mla	r0, r0, r3, r4
 800fe8c:	2201      	movs	r2, #1
 800fe8e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fe92:	e7eb      	b.n	800fe6c <_strtol_l.isra.0+0x80>
 800fe94:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800fe98:	2f19      	cmp	r7, #25
 800fe9a:	d801      	bhi.n	800fea0 <_strtol_l.isra.0+0xb4>
 800fe9c:	3c37      	subs	r4, #55	@ 0x37
 800fe9e:	e7ea      	b.n	800fe76 <_strtol_l.isra.0+0x8a>
 800fea0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800fea4:	2f19      	cmp	r7, #25
 800fea6:	d804      	bhi.n	800feb2 <_strtol_l.isra.0+0xc6>
 800fea8:	3c57      	subs	r4, #87	@ 0x57
 800feaa:	e7e4      	b.n	800fe76 <_strtol_l.isra.0+0x8a>
 800feac:	f04f 32ff 	mov.w	r2, #4294967295
 800feb0:	e7ed      	b.n	800fe8e <_strtol_l.isra.0+0xa2>
 800feb2:	1c53      	adds	r3, r2, #1
 800feb4:	d108      	bne.n	800fec8 <_strtol_l.isra.0+0xdc>
 800feb6:	2322      	movs	r3, #34	@ 0x22
 800feb8:	f8ce 3000 	str.w	r3, [lr]
 800febc:	4660      	mov	r0, ip
 800febe:	f1b8 0f00 	cmp.w	r8, #0
 800fec2:	d0a0      	beq.n	800fe06 <_strtol_l.isra.0+0x1a>
 800fec4:	1e69      	subs	r1, r5, #1
 800fec6:	e006      	b.n	800fed6 <_strtol_l.isra.0+0xea>
 800fec8:	b106      	cbz	r6, 800fecc <_strtol_l.isra.0+0xe0>
 800feca:	4240      	negs	r0, r0
 800fecc:	f1b8 0f00 	cmp.w	r8, #0
 800fed0:	d099      	beq.n	800fe06 <_strtol_l.isra.0+0x1a>
 800fed2:	2a00      	cmp	r2, #0
 800fed4:	d1f6      	bne.n	800fec4 <_strtol_l.isra.0+0xd8>
 800fed6:	f8c8 1000 	str.w	r1, [r8]
 800feda:	e794      	b.n	800fe06 <_strtol_l.isra.0+0x1a>
 800fedc:	080112b9 	.word	0x080112b9

0800fee0 <_strtol_r>:
 800fee0:	f7ff bf84 	b.w	800fdec <_strtol_l.isra.0>

0800fee4 <__ascii_wctomb>:
 800fee4:	4603      	mov	r3, r0
 800fee6:	4608      	mov	r0, r1
 800fee8:	b141      	cbz	r1, 800fefc <__ascii_wctomb+0x18>
 800feea:	2aff      	cmp	r2, #255	@ 0xff
 800feec:	d904      	bls.n	800fef8 <__ascii_wctomb+0x14>
 800feee:	228a      	movs	r2, #138	@ 0x8a
 800fef0:	601a      	str	r2, [r3, #0]
 800fef2:	f04f 30ff 	mov.w	r0, #4294967295
 800fef6:	4770      	bx	lr
 800fef8:	700a      	strb	r2, [r1, #0]
 800fefa:	2001      	movs	r0, #1
 800fefc:	4770      	bx	lr

0800fefe <__ssputs_r>:
 800fefe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff02:	688e      	ldr	r6, [r1, #8]
 800ff04:	461f      	mov	r7, r3
 800ff06:	42be      	cmp	r6, r7
 800ff08:	680b      	ldr	r3, [r1, #0]
 800ff0a:	4682      	mov	sl, r0
 800ff0c:	460c      	mov	r4, r1
 800ff0e:	4690      	mov	r8, r2
 800ff10:	d82d      	bhi.n	800ff6e <__ssputs_r+0x70>
 800ff12:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ff16:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ff1a:	d026      	beq.n	800ff6a <__ssputs_r+0x6c>
 800ff1c:	6965      	ldr	r5, [r4, #20]
 800ff1e:	6909      	ldr	r1, [r1, #16]
 800ff20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ff24:	eba3 0901 	sub.w	r9, r3, r1
 800ff28:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ff2c:	1c7b      	adds	r3, r7, #1
 800ff2e:	444b      	add	r3, r9
 800ff30:	106d      	asrs	r5, r5, #1
 800ff32:	429d      	cmp	r5, r3
 800ff34:	bf38      	it	cc
 800ff36:	461d      	movcc	r5, r3
 800ff38:	0553      	lsls	r3, r2, #21
 800ff3a:	d527      	bpl.n	800ff8c <__ssputs_r+0x8e>
 800ff3c:	4629      	mov	r1, r5
 800ff3e:	f7fb ff63 	bl	800be08 <_malloc_r>
 800ff42:	4606      	mov	r6, r0
 800ff44:	b360      	cbz	r0, 800ffa0 <__ssputs_r+0xa2>
 800ff46:	6921      	ldr	r1, [r4, #16]
 800ff48:	464a      	mov	r2, r9
 800ff4a:	f7fe f82c 	bl	800dfa6 <memcpy>
 800ff4e:	89a3      	ldrh	r3, [r4, #12]
 800ff50:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ff54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ff58:	81a3      	strh	r3, [r4, #12]
 800ff5a:	6126      	str	r6, [r4, #16]
 800ff5c:	6165      	str	r5, [r4, #20]
 800ff5e:	444e      	add	r6, r9
 800ff60:	eba5 0509 	sub.w	r5, r5, r9
 800ff64:	6026      	str	r6, [r4, #0]
 800ff66:	60a5      	str	r5, [r4, #8]
 800ff68:	463e      	mov	r6, r7
 800ff6a:	42be      	cmp	r6, r7
 800ff6c:	d900      	bls.n	800ff70 <__ssputs_r+0x72>
 800ff6e:	463e      	mov	r6, r7
 800ff70:	6820      	ldr	r0, [r4, #0]
 800ff72:	4632      	mov	r2, r6
 800ff74:	4641      	mov	r1, r8
 800ff76:	f000 fabd 	bl	80104f4 <memmove>
 800ff7a:	68a3      	ldr	r3, [r4, #8]
 800ff7c:	1b9b      	subs	r3, r3, r6
 800ff7e:	60a3      	str	r3, [r4, #8]
 800ff80:	6823      	ldr	r3, [r4, #0]
 800ff82:	4433      	add	r3, r6
 800ff84:	6023      	str	r3, [r4, #0]
 800ff86:	2000      	movs	r0, #0
 800ff88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff8c:	462a      	mov	r2, r5
 800ff8e:	f7ff feff 	bl	800fd90 <_realloc_r>
 800ff92:	4606      	mov	r6, r0
 800ff94:	2800      	cmp	r0, #0
 800ff96:	d1e0      	bne.n	800ff5a <__ssputs_r+0x5c>
 800ff98:	6921      	ldr	r1, [r4, #16]
 800ff9a:	4650      	mov	r0, sl
 800ff9c:	f7fe fe84 	bl	800eca8 <_free_r>
 800ffa0:	230c      	movs	r3, #12
 800ffa2:	f8ca 3000 	str.w	r3, [sl]
 800ffa6:	89a3      	ldrh	r3, [r4, #12]
 800ffa8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ffac:	81a3      	strh	r3, [r4, #12]
 800ffae:	f04f 30ff 	mov.w	r0, #4294967295
 800ffb2:	e7e9      	b.n	800ff88 <__ssputs_r+0x8a>

0800ffb4 <_svfiprintf_r>:
 800ffb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffb8:	4698      	mov	r8, r3
 800ffba:	898b      	ldrh	r3, [r1, #12]
 800ffbc:	061b      	lsls	r3, r3, #24
 800ffbe:	b09d      	sub	sp, #116	@ 0x74
 800ffc0:	4607      	mov	r7, r0
 800ffc2:	460d      	mov	r5, r1
 800ffc4:	4614      	mov	r4, r2
 800ffc6:	d510      	bpl.n	800ffea <_svfiprintf_r+0x36>
 800ffc8:	690b      	ldr	r3, [r1, #16]
 800ffca:	b973      	cbnz	r3, 800ffea <_svfiprintf_r+0x36>
 800ffcc:	2140      	movs	r1, #64	@ 0x40
 800ffce:	f7fb ff1b 	bl	800be08 <_malloc_r>
 800ffd2:	6028      	str	r0, [r5, #0]
 800ffd4:	6128      	str	r0, [r5, #16]
 800ffd6:	b930      	cbnz	r0, 800ffe6 <_svfiprintf_r+0x32>
 800ffd8:	230c      	movs	r3, #12
 800ffda:	603b      	str	r3, [r7, #0]
 800ffdc:	f04f 30ff 	mov.w	r0, #4294967295
 800ffe0:	b01d      	add	sp, #116	@ 0x74
 800ffe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffe6:	2340      	movs	r3, #64	@ 0x40
 800ffe8:	616b      	str	r3, [r5, #20]
 800ffea:	2300      	movs	r3, #0
 800ffec:	9309      	str	r3, [sp, #36]	@ 0x24
 800ffee:	2320      	movs	r3, #32
 800fff0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fff4:	f8cd 800c 	str.w	r8, [sp, #12]
 800fff8:	2330      	movs	r3, #48	@ 0x30
 800fffa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010198 <_svfiprintf_r+0x1e4>
 800fffe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010002:	f04f 0901 	mov.w	r9, #1
 8010006:	4623      	mov	r3, r4
 8010008:	469a      	mov	sl, r3
 801000a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801000e:	b10a      	cbz	r2, 8010014 <_svfiprintf_r+0x60>
 8010010:	2a25      	cmp	r2, #37	@ 0x25
 8010012:	d1f9      	bne.n	8010008 <_svfiprintf_r+0x54>
 8010014:	ebba 0b04 	subs.w	fp, sl, r4
 8010018:	d00b      	beq.n	8010032 <_svfiprintf_r+0x7e>
 801001a:	465b      	mov	r3, fp
 801001c:	4622      	mov	r2, r4
 801001e:	4629      	mov	r1, r5
 8010020:	4638      	mov	r0, r7
 8010022:	f7ff ff6c 	bl	800fefe <__ssputs_r>
 8010026:	3001      	adds	r0, #1
 8010028:	f000 80a7 	beq.w	801017a <_svfiprintf_r+0x1c6>
 801002c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801002e:	445a      	add	r2, fp
 8010030:	9209      	str	r2, [sp, #36]	@ 0x24
 8010032:	f89a 3000 	ldrb.w	r3, [sl]
 8010036:	2b00      	cmp	r3, #0
 8010038:	f000 809f 	beq.w	801017a <_svfiprintf_r+0x1c6>
 801003c:	2300      	movs	r3, #0
 801003e:	f04f 32ff 	mov.w	r2, #4294967295
 8010042:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010046:	f10a 0a01 	add.w	sl, sl, #1
 801004a:	9304      	str	r3, [sp, #16]
 801004c:	9307      	str	r3, [sp, #28]
 801004e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010052:	931a      	str	r3, [sp, #104]	@ 0x68
 8010054:	4654      	mov	r4, sl
 8010056:	2205      	movs	r2, #5
 8010058:	f814 1b01 	ldrb.w	r1, [r4], #1
 801005c:	484e      	ldr	r0, [pc, #312]	@ (8010198 <_svfiprintf_r+0x1e4>)
 801005e:	f7f0 f8d7 	bl	8000210 <memchr>
 8010062:	9a04      	ldr	r2, [sp, #16]
 8010064:	b9d8      	cbnz	r0, 801009e <_svfiprintf_r+0xea>
 8010066:	06d0      	lsls	r0, r2, #27
 8010068:	bf44      	itt	mi
 801006a:	2320      	movmi	r3, #32
 801006c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010070:	0711      	lsls	r1, r2, #28
 8010072:	bf44      	itt	mi
 8010074:	232b      	movmi	r3, #43	@ 0x2b
 8010076:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801007a:	f89a 3000 	ldrb.w	r3, [sl]
 801007e:	2b2a      	cmp	r3, #42	@ 0x2a
 8010080:	d015      	beq.n	80100ae <_svfiprintf_r+0xfa>
 8010082:	9a07      	ldr	r2, [sp, #28]
 8010084:	4654      	mov	r4, sl
 8010086:	2000      	movs	r0, #0
 8010088:	f04f 0c0a 	mov.w	ip, #10
 801008c:	4621      	mov	r1, r4
 801008e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010092:	3b30      	subs	r3, #48	@ 0x30
 8010094:	2b09      	cmp	r3, #9
 8010096:	d94b      	bls.n	8010130 <_svfiprintf_r+0x17c>
 8010098:	b1b0      	cbz	r0, 80100c8 <_svfiprintf_r+0x114>
 801009a:	9207      	str	r2, [sp, #28]
 801009c:	e014      	b.n	80100c8 <_svfiprintf_r+0x114>
 801009e:	eba0 0308 	sub.w	r3, r0, r8
 80100a2:	fa09 f303 	lsl.w	r3, r9, r3
 80100a6:	4313      	orrs	r3, r2
 80100a8:	9304      	str	r3, [sp, #16]
 80100aa:	46a2      	mov	sl, r4
 80100ac:	e7d2      	b.n	8010054 <_svfiprintf_r+0xa0>
 80100ae:	9b03      	ldr	r3, [sp, #12]
 80100b0:	1d19      	adds	r1, r3, #4
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	9103      	str	r1, [sp, #12]
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	bfbb      	ittet	lt
 80100ba:	425b      	neglt	r3, r3
 80100bc:	f042 0202 	orrlt.w	r2, r2, #2
 80100c0:	9307      	strge	r3, [sp, #28]
 80100c2:	9307      	strlt	r3, [sp, #28]
 80100c4:	bfb8      	it	lt
 80100c6:	9204      	strlt	r2, [sp, #16]
 80100c8:	7823      	ldrb	r3, [r4, #0]
 80100ca:	2b2e      	cmp	r3, #46	@ 0x2e
 80100cc:	d10a      	bne.n	80100e4 <_svfiprintf_r+0x130>
 80100ce:	7863      	ldrb	r3, [r4, #1]
 80100d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80100d2:	d132      	bne.n	801013a <_svfiprintf_r+0x186>
 80100d4:	9b03      	ldr	r3, [sp, #12]
 80100d6:	1d1a      	adds	r2, r3, #4
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	9203      	str	r2, [sp, #12]
 80100dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80100e0:	3402      	adds	r4, #2
 80100e2:	9305      	str	r3, [sp, #20]
 80100e4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80101a8 <_svfiprintf_r+0x1f4>
 80100e8:	7821      	ldrb	r1, [r4, #0]
 80100ea:	2203      	movs	r2, #3
 80100ec:	4650      	mov	r0, sl
 80100ee:	f7f0 f88f 	bl	8000210 <memchr>
 80100f2:	b138      	cbz	r0, 8010104 <_svfiprintf_r+0x150>
 80100f4:	9b04      	ldr	r3, [sp, #16]
 80100f6:	eba0 000a 	sub.w	r0, r0, sl
 80100fa:	2240      	movs	r2, #64	@ 0x40
 80100fc:	4082      	lsls	r2, r0
 80100fe:	4313      	orrs	r3, r2
 8010100:	3401      	adds	r4, #1
 8010102:	9304      	str	r3, [sp, #16]
 8010104:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010108:	4824      	ldr	r0, [pc, #144]	@ (801019c <_svfiprintf_r+0x1e8>)
 801010a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801010e:	2206      	movs	r2, #6
 8010110:	f7f0 f87e 	bl	8000210 <memchr>
 8010114:	2800      	cmp	r0, #0
 8010116:	d036      	beq.n	8010186 <_svfiprintf_r+0x1d2>
 8010118:	4b21      	ldr	r3, [pc, #132]	@ (80101a0 <_svfiprintf_r+0x1ec>)
 801011a:	bb1b      	cbnz	r3, 8010164 <_svfiprintf_r+0x1b0>
 801011c:	9b03      	ldr	r3, [sp, #12]
 801011e:	3307      	adds	r3, #7
 8010120:	f023 0307 	bic.w	r3, r3, #7
 8010124:	3308      	adds	r3, #8
 8010126:	9303      	str	r3, [sp, #12]
 8010128:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801012a:	4433      	add	r3, r6
 801012c:	9309      	str	r3, [sp, #36]	@ 0x24
 801012e:	e76a      	b.n	8010006 <_svfiprintf_r+0x52>
 8010130:	fb0c 3202 	mla	r2, ip, r2, r3
 8010134:	460c      	mov	r4, r1
 8010136:	2001      	movs	r0, #1
 8010138:	e7a8      	b.n	801008c <_svfiprintf_r+0xd8>
 801013a:	2300      	movs	r3, #0
 801013c:	3401      	adds	r4, #1
 801013e:	9305      	str	r3, [sp, #20]
 8010140:	4619      	mov	r1, r3
 8010142:	f04f 0c0a 	mov.w	ip, #10
 8010146:	4620      	mov	r0, r4
 8010148:	f810 2b01 	ldrb.w	r2, [r0], #1
 801014c:	3a30      	subs	r2, #48	@ 0x30
 801014e:	2a09      	cmp	r2, #9
 8010150:	d903      	bls.n	801015a <_svfiprintf_r+0x1a6>
 8010152:	2b00      	cmp	r3, #0
 8010154:	d0c6      	beq.n	80100e4 <_svfiprintf_r+0x130>
 8010156:	9105      	str	r1, [sp, #20]
 8010158:	e7c4      	b.n	80100e4 <_svfiprintf_r+0x130>
 801015a:	fb0c 2101 	mla	r1, ip, r1, r2
 801015e:	4604      	mov	r4, r0
 8010160:	2301      	movs	r3, #1
 8010162:	e7f0      	b.n	8010146 <_svfiprintf_r+0x192>
 8010164:	ab03      	add	r3, sp, #12
 8010166:	9300      	str	r3, [sp, #0]
 8010168:	462a      	mov	r2, r5
 801016a:	4b0e      	ldr	r3, [pc, #56]	@ (80101a4 <_svfiprintf_r+0x1f0>)
 801016c:	a904      	add	r1, sp, #16
 801016e:	4638      	mov	r0, r7
 8010170:	f7fc fd7c 	bl	800cc6c <_printf_float>
 8010174:	1c42      	adds	r2, r0, #1
 8010176:	4606      	mov	r6, r0
 8010178:	d1d6      	bne.n	8010128 <_svfiprintf_r+0x174>
 801017a:	89ab      	ldrh	r3, [r5, #12]
 801017c:	065b      	lsls	r3, r3, #25
 801017e:	f53f af2d 	bmi.w	800ffdc <_svfiprintf_r+0x28>
 8010182:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010184:	e72c      	b.n	800ffe0 <_svfiprintf_r+0x2c>
 8010186:	ab03      	add	r3, sp, #12
 8010188:	9300      	str	r3, [sp, #0]
 801018a:	462a      	mov	r2, r5
 801018c:	4b05      	ldr	r3, [pc, #20]	@ (80101a4 <_svfiprintf_r+0x1f0>)
 801018e:	a904      	add	r1, sp, #16
 8010190:	4638      	mov	r0, r7
 8010192:	f7fd f803 	bl	800d19c <_printf_i>
 8010196:	e7ed      	b.n	8010174 <_svfiprintf_r+0x1c0>
 8010198:	08011155 	.word	0x08011155
 801019c:	0801115f 	.word	0x0801115f
 80101a0:	0800cc6d 	.word	0x0800cc6d
 80101a4:	0800feff 	.word	0x0800feff
 80101a8:	0801115b 	.word	0x0801115b

080101ac <__sfputc_r>:
 80101ac:	6893      	ldr	r3, [r2, #8]
 80101ae:	3b01      	subs	r3, #1
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	b410      	push	{r4}
 80101b4:	6093      	str	r3, [r2, #8]
 80101b6:	da08      	bge.n	80101ca <__sfputc_r+0x1e>
 80101b8:	6994      	ldr	r4, [r2, #24]
 80101ba:	42a3      	cmp	r3, r4
 80101bc:	db01      	blt.n	80101c2 <__sfputc_r+0x16>
 80101be:	290a      	cmp	r1, #10
 80101c0:	d103      	bne.n	80101ca <__sfputc_r+0x1e>
 80101c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80101c6:	f7fd bd6a 	b.w	800dc9e <__swbuf_r>
 80101ca:	6813      	ldr	r3, [r2, #0]
 80101cc:	1c58      	adds	r0, r3, #1
 80101ce:	6010      	str	r0, [r2, #0]
 80101d0:	7019      	strb	r1, [r3, #0]
 80101d2:	4608      	mov	r0, r1
 80101d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80101d8:	4770      	bx	lr

080101da <__sfputs_r>:
 80101da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101dc:	4606      	mov	r6, r0
 80101de:	460f      	mov	r7, r1
 80101e0:	4614      	mov	r4, r2
 80101e2:	18d5      	adds	r5, r2, r3
 80101e4:	42ac      	cmp	r4, r5
 80101e6:	d101      	bne.n	80101ec <__sfputs_r+0x12>
 80101e8:	2000      	movs	r0, #0
 80101ea:	e007      	b.n	80101fc <__sfputs_r+0x22>
 80101ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80101f0:	463a      	mov	r2, r7
 80101f2:	4630      	mov	r0, r6
 80101f4:	f7ff ffda 	bl	80101ac <__sfputc_r>
 80101f8:	1c43      	adds	r3, r0, #1
 80101fa:	d1f3      	bne.n	80101e4 <__sfputs_r+0xa>
 80101fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010200 <_vfiprintf_r>:
 8010200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010204:	460d      	mov	r5, r1
 8010206:	b09d      	sub	sp, #116	@ 0x74
 8010208:	4614      	mov	r4, r2
 801020a:	4698      	mov	r8, r3
 801020c:	4606      	mov	r6, r0
 801020e:	b118      	cbz	r0, 8010218 <_vfiprintf_r+0x18>
 8010210:	6a03      	ldr	r3, [r0, #32]
 8010212:	b90b      	cbnz	r3, 8010218 <_vfiprintf_r+0x18>
 8010214:	f7fd fc26 	bl	800da64 <__sinit>
 8010218:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801021a:	07d9      	lsls	r1, r3, #31
 801021c:	d405      	bmi.n	801022a <_vfiprintf_r+0x2a>
 801021e:	89ab      	ldrh	r3, [r5, #12]
 8010220:	059a      	lsls	r2, r3, #22
 8010222:	d402      	bmi.n	801022a <_vfiprintf_r+0x2a>
 8010224:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010226:	f7fd febc 	bl	800dfa2 <__retarget_lock_acquire_recursive>
 801022a:	89ab      	ldrh	r3, [r5, #12]
 801022c:	071b      	lsls	r3, r3, #28
 801022e:	d501      	bpl.n	8010234 <_vfiprintf_r+0x34>
 8010230:	692b      	ldr	r3, [r5, #16]
 8010232:	b99b      	cbnz	r3, 801025c <_vfiprintf_r+0x5c>
 8010234:	4629      	mov	r1, r5
 8010236:	4630      	mov	r0, r6
 8010238:	f7fd fd70 	bl	800dd1c <__swsetup_r>
 801023c:	b170      	cbz	r0, 801025c <_vfiprintf_r+0x5c>
 801023e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010240:	07dc      	lsls	r4, r3, #31
 8010242:	d504      	bpl.n	801024e <_vfiprintf_r+0x4e>
 8010244:	f04f 30ff 	mov.w	r0, #4294967295
 8010248:	b01d      	add	sp, #116	@ 0x74
 801024a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801024e:	89ab      	ldrh	r3, [r5, #12]
 8010250:	0598      	lsls	r0, r3, #22
 8010252:	d4f7      	bmi.n	8010244 <_vfiprintf_r+0x44>
 8010254:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010256:	f7fd fea5 	bl	800dfa4 <__retarget_lock_release_recursive>
 801025a:	e7f3      	b.n	8010244 <_vfiprintf_r+0x44>
 801025c:	2300      	movs	r3, #0
 801025e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010260:	2320      	movs	r3, #32
 8010262:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010266:	f8cd 800c 	str.w	r8, [sp, #12]
 801026a:	2330      	movs	r3, #48	@ 0x30
 801026c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801041c <_vfiprintf_r+0x21c>
 8010270:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010274:	f04f 0901 	mov.w	r9, #1
 8010278:	4623      	mov	r3, r4
 801027a:	469a      	mov	sl, r3
 801027c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010280:	b10a      	cbz	r2, 8010286 <_vfiprintf_r+0x86>
 8010282:	2a25      	cmp	r2, #37	@ 0x25
 8010284:	d1f9      	bne.n	801027a <_vfiprintf_r+0x7a>
 8010286:	ebba 0b04 	subs.w	fp, sl, r4
 801028a:	d00b      	beq.n	80102a4 <_vfiprintf_r+0xa4>
 801028c:	465b      	mov	r3, fp
 801028e:	4622      	mov	r2, r4
 8010290:	4629      	mov	r1, r5
 8010292:	4630      	mov	r0, r6
 8010294:	f7ff ffa1 	bl	80101da <__sfputs_r>
 8010298:	3001      	adds	r0, #1
 801029a:	f000 80a7 	beq.w	80103ec <_vfiprintf_r+0x1ec>
 801029e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80102a0:	445a      	add	r2, fp
 80102a2:	9209      	str	r2, [sp, #36]	@ 0x24
 80102a4:	f89a 3000 	ldrb.w	r3, [sl]
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	f000 809f 	beq.w	80103ec <_vfiprintf_r+0x1ec>
 80102ae:	2300      	movs	r3, #0
 80102b0:	f04f 32ff 	mov.w	r2, #4294967295
 80102b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80102b8:	f10a 0a01 	add.w	sl, sl, #1
 80102bc:	9304      	str	r3, [sp, #16]
 80102be:	9307      	str	r3, [sp, #28]
 80102c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80102c4:	931a      	str	r3, [sp, #104]	@ 0x68
 80102c6:	4654      	mov	r4, sl
 80102c8:	2205      	movs	r2, #5
 80102ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80102ce:	4853      	ldr	r0, [pc, #332]	@ (801041c <_vfiprintf_r+0x21c>)
 80102d0:	f7ef ff9e 	bl	8000210 <memchr>
 80102d4:	9a04      	ldr	r2, [sp, #16]
 80102d6:	b9d8      	cbnz	r0, 8010310 <_vfiprintf_r+0x110>
 80102d8:	06d1      	lsls	r1, r2, #27
 80102da:	bf44      	itt	mi
 80102dc:	2320      	movmi	r3, #32
 80102de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80102e2:	0713      	lsls	r3, r2, #28
 80102e4:	bf44      	itt	mi
 80102e6:	232b      	movmi	r3, #43	@ 0x2b
 80102e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80102ec:	f89a 3000 	ldrb.w	r3, [sl]
 80102f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80102f2:	d015      	beq.n	8010320 <_vfiprintf_r+0x120>
 80102f4:	9a07      	ldr	r2, [sp, #28]
 80102f6:	4654      	mov	r4, sl
 80102f8:	2000      	movs	r0, #0
 80102fa:	f04f 0c0a 	mov.w	ip, #10
 80102fe:	4621      	mov	r1, r4
 8010300:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010304:	3b30      	subs	r3, #48	@ 0x30
 8010306:	2b09      	cmp	r3, #9
 8010308:	d94b      	bls.n	80103a2 <_vfiprintf_r+0x1a2>
 801030a:	b1b0      	cbz	r0, 801033a <_vfiprintf_r+0x13a>
 801030c:	9207      	str	r2, [sp, #28]
 801030e:	e014      	b.n	801033a <_vfiprintf_r+0x13a>
 8010310:	eba0 0308 	sub.w	r3, r0, r8
 8010314:	fa09 f303 	lsl.w	r3, r9, r3
 8010318:	4313      	orrs	r3, r2
 801031a:	9304      	str	r3, [sp, #16]
 801031c:	46a2      	mov	sl, r4
 801031e:	e7d2      	b.n	80102c6 <_vfiprintf_r+0xc6>
 8010320:	9b03      	ldr	r3, [sp, #12]
 8010322:	1d19      	adds	r1, r3, #4
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	9103      	str	r1, [sp, #12]
 8010328:	2b00      	cmp	r3, #0
 801032a:	bfbb      	ittet	lt
 801032c:	425b      	neglt	r3, r3
 801032e:	f042 0202 	orrlt.w	r2, r2, #2
 8010332:	9307      	strge	r3, [sp, #28]
 8010334:	9307      	strlt	r3, [sp, #28]
 8010336:	bfb8      	it	lt
 8010338:	9204      	strlt	r2, [sp, #16]
 801033a:	7823      	ldrb	r3, [r4, #0]
 801033c:	2b2e      	cmp	r3, #46	@ 0x2e
 801033e:	d10a      	bne.n	8010356 <_vfiprintf_r+0x156>
 8010340:	7863      	ldrb	r3, [r4, #1]
 8010342:	2b2a      	cmp	r3, #42	@ 0x2a
 8010344:	d132      	bne.n	80103ac <_vfiprintf_r+0x1ac>
 8010346:	9b03      	ldr	r3, [sp, #12]
 8010348:	1d1a      	adds	r2, r3, #4
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	9203      	str	r2, [sp, #12]
 801034e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010352:	3402      	adds	r4, #2
 8010354:	9305      	str	r3, [sp, #20]
 8010356:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801042c <_vfiprintf_r+0x22c>
 801035a:	7821      	ldrb	r1, [r4, #0]
 801035c:	2203      	movs	r2, #3
 801035e:	4650      	mov	r0, sl
 8010360:	f7ef ff56 	bl	8000210 <memchr>
 8010364:	b138      	cbz	r0, 8010376 <_vfiprintf_r+0x176>
 8010366:	9b04      	ldr	r3, [sp, #16]
 8010368:	eba0 000a 	sub.w	r0, r0, sl
 801036c:	2240      	movs	r2, #64	@ 0x40
 801036e:	4082      	lsls	r2, r0
 8010370:	4313      	orrs	r3, r2
 8010372:	3401      	adds	r4, #1
 8010374:	9304      	str	r3, [sp, #16]
 8010376:	f814 1b01 	ldrb.w	r1, [r4], #1
 801037a:	4829      	ldr	r0, [pc, #164]	@ (8010420 <_vfiprintf_r+0x220>)
 801037c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010380:	2206      	movs	r2, #6
 8010382:	f7ef ff45 	bl	8000210 <memchr>
 8010386:	2800      	cmp	r0, #0
 8010388:	d03f      	beq.n	801040a <_vfiprintf_r+0x20a>
 801038a:	4b26      	ldr	r3, [pc, #152]	@ (8010424 <_vfiprintf_r+0x224>)
 801038c:	bb1b      	cbnz	r3, 80103d6 <_vfiprintf_r+0x1d6>
 801038e:	9b03      	ldr	r3, [sp, #12]
 8010390:	3307      	adds	r3, #7
 8010392:	f023 0307 	bic.w	r3, r3, #7
 8010396:	3308      	adds	r3, #8
 8010398:	9303      	str	r3, [sp, #12]
 801039a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801039c:	443b      	add	r3, r7
 801039e:	9309      	str	r3, [sp, #36]	@ 0x24
 80103a0:	e76a      	b.n	8010278 <_vfiprintf_r+0x78>
 80103a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80103a6:	460c      	mov	r4, r1
 80103a8:	2001      	movs	r0, #1
 80103aa:	e7a8      	b.n	80102fe <_vfiprintf_r+0xfe>
 80103ac:	2300      	movs	r3, #0
 80103ae:	3401      	adds	r4, #1
 80103b0:	9305      	str	r3, [sp, #20]
 80103b2:	4619      	mov	r1, r3
 80103b4:	f04f 0c0a 	mov.w	ip, #10
 80103b8:	4620      	mov	r0, r4
 80103ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80103be:	3a30      	subs	r2, #48	@ 0x30
 80103c0:	2a09      	cmp	r2, #9
 80103c2:	d903      	bls.n	80103cc <_vfiprintf_r+0x1cc>
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d0c6      	beq.n	8010356 <_vfiprintf_r+0x156>
 80103c8:	9105      	str	r1, [sp, #20]
 80103ca:	e7c4      	b.n	8010356 <_vfiprintf_r+0x156>
 80103cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80103d0:	4604      	mov	r4, r0
 80103d2:	2301      	movs	r3, #1
 80103d4:	e7f0      	b.n	80103b8 <_vfiprintf_r+0x1b8>
 80103d6:	ab03      	add	r3, sp, #12
 80103d8:	9300      	str	r3, [sp, #0]
 80103da:	462a      	mov	r2, r5
 80103dc:	4b12      	ldr	r3, [pc, #72]	@ (8010428 <_vfiprintf_r+0x228>)
 80103de:	a904      	add	r1, sp, #16
 80103e0:	4630      	mov	r0, r6
 80103e2:	f7fc fc43 	bl	800cc6c <_printf_float>
 80103e6:	4607      	mov	r7, r0
 80103e8:	1c78      	adds	r0, r7, #1
 80103ea:	d1d6      	bne.n	801039a <_vfiprintf_r+0x19a>
 80103ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80103ee:	07d9      	lsls	r1, r3, #31
 80103f0:	d405      	bmi.n	80103fe <_vfiprintf_r+0x1fe>
 80103f2:	89ab      	ldrh	r3, [r5, #12]
 80103f4:	059a      	lsls	r2, r3, #22
 80103f6:	d402      	bmi.n	80103fe <_vfiprintf_r+0x1fe>
 80103f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80103fa:	f7fd fdd3 	bl	800dfa4 <__retarget_lock_release_recursive>
 80103fe:	89ab      	ldrh	r3, [r5, #12]
 8010400:	065b      	lsls	r3, r3, #25
 8010402:	f53f af1f 	bmi.w	8010244 <_vfiprintf_r+0x44>
 8010406:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010408:	e71e      	b.n	8010248 <_vfiprintf_r+0x48>
 801040a:	ab03      	add	r3, sp, #12
 801040c:	9300      	str	r3, [sp, #0]
 801040e:	462a      	mov	r2, r5
 8010410:	4b05      	ldr	r3, [pc, #20]	@ (8010428 <_vfiprintf_r+0x228>)
 8010412:	a904      	add	r1, sp, #16
 8010414:	4630      	mov	r0, r6
 8010416:	f7fc fec1 	bl	800d19c <_printf_i>
 801041a:	e7e4      	b.n	80103e6 <_vfiprintf_r+0x1e6>
 801041c:	08011155 	.word	0x08011155
 8010420:	0801115f 	.word	0x0801115f
 8010424:	0800cc6d 	.word	0x0800cc6d
 8010428:	080101db 	.word	0x080101db
 801042c:	0801115b 	.word	0x0801115b

08010430 <__swhatbuf_r>:
 8010430:	b570      	push	{r4, r5, r6, lr}
 8010432:	460c      	mov	r4, r1
 8010434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010438:	2900      	cmp	r1, #0
 801043a:	b096      	sub	sp, #88	@ 0x58
 801043c:	4615      	mov	r5, r2
 801043e:	461e      	mov	r6, r3
 8010440:	da0d      	bge.n	801045e <__swhatbuf_r+0x2e>
 8010442:	89a3      	ldrh	r3, [r4, #12]
 8010444:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010448:	f04f 0100 	mov.w	r1, #0
 801044c:	bf14      	ite	ne
 801044e:	2340      	movne	r3, #64	@ 0x40
 8010450:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010454:	2000      	movs	r0, #0
 8010456:	6031      	str	r1, [r6, #0]
 8010458:	602b      	str	r3, [r5, #0]
 801045a:	b016      	add	sp, #88	@ 0x58
 801045c:	bd70      	pop	{r4, r5, r6, pc}
 801045e:	466a      	mov	r2, sp
 8010460:	f000 f892 	bl	8010588 <_fstat_r>
 8010464:	2800      	cmp	r0, #0
 8010466:	dbec      	blt.n	8010442 <__swhatbuf_r+0x12>
 8010468:	9901      	ldr	r1, [sp, #4]
 801046a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801046e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010472:	4259      	negs	r1, r3
 8010474:	4159      	adcs	r1, r3
 8010476:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801047a:	e7eb      	b.n	8010454 <__swhatbuf_r+0x24>

0801047c <__smakebuf_r>:
 801047c:	898b      	ldrh	r3, [r1, #12]
 801047e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010480:	079d      	lsls	r5, r3, #30
 8010482:	4606      	mov	r6, r0
 8010484:	460c      	mov	r4, r1
 8010486:	d507      	bpl.n	8010498 <__smakebuf_r+0x1c>
 8010488:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801048c:	6023      	str	r3, [r4, #0]
 801048e:	6123      	str	r3, [r4, #16]
 8010490:	2301      	movs	r3, #1
 8010492:	6163      	str	r3, [r4, #20]
 8010494:	b003      	add	sp, #12
 8010496:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010498:	ab01      	add	r3, sp, #4
 801049a:	466a      	mov	r2, sp
 801049c:	f7ff ffc8 	bl	8010430 <__swhatbuf_r>
 80104a0:	9f00      	ldr	r7, [sp, #0]
 80104a2:	4605      	mov	r5, r0
 80104a4:	4639      	mov	r1, r7
 80104a6:	4630      	mov	r0, r6
 80104a8:	f7fb fcae 	bl	800be08 <_malloc_r>
 80104ac:	b948      	cbnz	r0, 80104c2 <__smakebuf_r+0x46>
 80104ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80104b2:	059a      	lsls	r2, r3, #22
 80104b4:	d4ee      	bmi.n	8010494 <__smakebuf_r+0x18>
 80104b6:	f023 0303 	bic.w	r3, r3, #3
 80104ba:	f043 0302 	orr.w	r3, r3, #2
 80104be:	81a3      	strh	r3, [r4, #12]
 80104c0:	e7e2      	b.n	8010488 <__smakebuf_r+0xc>
 80104c2:	89a3      	ldrh	r3, [r4, #12]
 80104c4:	6020      	str	r0, [r4, #0]
 80104c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80104ca:	81a3      	strh	r3, [r4, #12]
 80104cc:	9b01      	ldr	r3, [sp, #4]
 80104ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80104d2:	b15b      	cbz	r3, 80104ec <__smakebuf_r+0x70>
 80104d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80104d8:	4630      	mov	r0, r6
 80104da:	f000 f867 	bl	80105ac <_isatty_r>
 80104de:	b128      	cbz	r0, 80104ec <__smakebuf_r+0x70>
 80104e0:	89a3      	ldrh	r3, [r4, #12]
 80104e2:	f023 0303 	bic.w	r3, r3, #3
 80104e6:	f043 0301 	orr.w	r3, r3, #1
 80104ea:	81a3      	strh	r3, [r4, #12]
 80104ec:	89a3      	ldrh	r3, [r4, #12]
 80104ee:	431d      	orrs	r5, r3
 80104f0:	81a5      	strh	r5, [r4, #12]
 80104f2:	e7cf      	b.n	8010494 <__smakebuf_r+0x18>

080104f4 <memmove>:
 80104f4:	4288      	cmp	r0, r1
 80104f6:	b510      	push	{r4, lr}
 80104f8:	eb01 0402 	add.w	r4, r1, r2
 80104fc:	d902      	bls.n	8010504 <memmove+0x10>
 80104fe:	4284      	cmp	r4, r0
 8010500:	4623      	mov	r3, r4
 8010502:	d807      	bhi.n	8010514 <memmove+0x20>
 8010504:	1e43      	subs	r3, r0, #1
 8010506:	42a1      	cmp	r1, r4
 8010508:	d008      	beq.n	801051c <memmove+0x28>
 801050a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801050e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010512:	e7f8      	b.n	8010506 <memmove+0x12>
 8010514:	4402      	add	r2, r0
 8010516:	4601      	mov	r1, r0
 8010518:	428a      	cmp	r2, r1
 801051a:	d100      	bne.n	801051e <memmove+0x2a>
 801051c:	bd10      	pop	{r4, pc}
 801051e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010522:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010526:	e7f7      	b.n	8010518 <memmove+0x24>

08010528 <_raise_r>:
 8010528:	291f      	cmp	r1, #31
 801052a:	b538      	push	{r3, r4, r5, lr}
 801052c:	4605      	mov	r5, r0
 801052e:	460c      	mov	r4, r1
 8010530:	d904      	bls.n	801053c <_raise_r+0x14>
 8010532:	2316      	movs	r3, #22
 8010534:	6003      	str	r3, [r0, #0]
 8010536:	f04f 30ff 	mov.w	r0, #4294967295
 801053a:	bd38      	pop	{r3, r4, r5, pc}
 801053c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801053e:	b112      	cbz	r2, 8010546 <_raise_r+0x1e>
 8010540:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010544:	b94b      	cbnz	r3, 801055a <_raise_r+0x32>
 8010546:	4628      	mov	r0, r5
 8010548:	f000 f852 	bl	80105f0 <_getpid_r>
 801054c:	4622      	mov	r2, r4
 801054e:	4601      	mov	r1, r0
 8010550:	4628      	mov	r0, r5
 8010552:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010556:	f000 b839 	b.w	80105cc <_kill_r>
 801055a:	2b01      	cmp	r3, #1
 801055c:	d00a      	beq.n	8010574 <_raise_r+0x4c>
 801055e:	1c59      	adds	r1, r3, #1
 8010560:	d103      	bne.n	801056a <_raise_r+0x42>
 8010562:	2316      	movs	r3, #22
 8010564:	6003      	str	r3, [r0, #0]
 8010566:	2001      	movs	r0, #1
 8010568:	e7e7      	b.n	801053a <_raise_r+0x12>
 801056a:	2100      	movs	r1, #0
 801056c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010570:	4620      	mov	r0, r4
 8010572:	4798      	blx	r3
 8010574:	2000      	movs	r0, #0
 8010576:	e7e0      	b.n	801053a <_raise_r+0x12>

08010578 <raise>:
 8010578:	4b02      	ldr	r3, [pc, #8]	@ (8010584 <raise+0xc>)
 801057a:	4601      	mov	r1, r0
 801057c:	6818      	ldr	r0, [r3, #0]
 801057e:	f7ff bfd3 	b.w	8010528 <_raise_r>
 8010582:	bf00      	nop
 8010584:	2000018c 	.word	0x2000018c

08010588 <_fstat_r>:
 8010588:	b538      	push	{r3, r4, r5, lr}
 801058a:	4d07      	ldr	r5, [pc, #28]	@ (80105a8 <_fstat_r+0x20>)
 801058c:	2300      	movs	r3, #0
 801058e:	4604      	mov	r4, r0
 8010590:	4608      	mov	r0, r1
 8010592:	4611      	mov	r1, r2
 8010594:	602b      	str	r3, [r5, #0]
 8010596:	f7f2 f91d 	bl	80027d4 <_fstat>
 801059a:	1c43      	adds	r3, r0, #1
 801059c:	d102      	bne.n	80105a4 <_fstat_r+0x1c>
 801059e:	682b      	ldr	r3, [r5, #0]
 80105a0:	b103      	cbz	r3, 80105a4 <_fstat_r+0x1c>
 80105a2:	6023      	str	r3, [r4, #0]
 80105a4:	bd38      	pop	{r3, r4, r5, pc}
 80105a6:	bf00      	nop
 80105a8:	2000060c 	.word	0x2000060c

080105ac <_isatty_r>:
 80105ac:	b538      	push	{r3, r4, r5, lr}
 80105ae:	4d06      	ldr	r5, [pc, #24]	@ (80105c8 <_isatty_r+0x1c>)
 80105b0:	2300      	movs	r3, #0
 80105b2:	4604      	mov	r4, r0
 80105b4:	4608      	mov	r0, r1
 80105b6:	602b      	str	r3, [r5, #0]
 80105b8:	f7f2 f933 	bl	8002822 <_isatty>
 80105bc:	1c43      	adds	r3, r0, #1
 80105be:	d102      	bne.n	80105c6 <_isatty_r+0x1a>
 80105c0:	682b      	ldr	r3, [r5, #0]
 80105c2:	b103      	cbz	r3, 80105c6 <_isatty_r+0x1a>
 80105c4:	6023      	str	r3, [r4, #0]
 80105c6:	bd38      	pop	{r3, r4, r5, pc}
 80105c8:	2000060c 	.word	0x2000060c

080105cc <_kill_r>:
 80105cc:	b538      	push	{r3, r4, r5, lr}
 80105ce:	4d07      	ldr	r5, [pc, #28]	@ (80105ec <_kill_r+0x20>)
 80105d0:	2300      	movs	r3, #0
 80105d2:	4604      	mov	r4, r0
 80105d4:	4608      	mov	r0, r1
 80105d6:	4611      	mov	r1, r2
 80105d8:	602b      	str	r3, [r5, #0]
 80105da:	f7f2 f813 	bl	8002604 <_kill>
 80105de:	1c43      	adds	r3, r0, #1
 80105e0:	d102      	bne.n	80105e8 <_kill_r+0x1c>
 80105e2:	682b      	ldr	r3, [r5, #0]
 80105e4:	b103      	cbz	r3, 80105e8 <_kill_r+0x1c>
 80105e6:	6023      	str	r3, [r4, #0]
 80105e8:	bd38      	pop	{r3, r4, r5, pc}
 80105ea:	bf00      	nop
 80105ec:	2000060c 	.word	0x2000060c

080105f0 <_getpid_r>:
 80105f0:	f7f2 b800 	b.w	80025f4 <_getpid>

080105f4 <_malloc_usable_size_r>:
 80105f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80105f8:	1f18      	subs	r0, r3, #4
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	bfbc      	itt	lt
 80105fe:	580b      	ldrlt	r3, [r1, r0]
 8010600:	18c0      	addlt	r0, r0, r3
 8010602:	4770      	bx	lr

08010604 <_init>:
 8010604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010606:	bf00      	nop
 8010608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801060a:	bc08      	pop	{r3}
 801060c:	469e      	mov	lr, r3
 801060e:	4770      	bx	lr

08010610 <_fini>:
 8010610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010612:	bf00      	nop
 8010614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010616:	bc08      	pop	{r3}
 8010618:	469e      	mov	lr, r3
 801061a:	4770      	bx	lr
