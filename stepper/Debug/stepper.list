
stepper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012090  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d64  08012260  08012260  00013260  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013fc4  08013fc4  00015210  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08013fc4  08013fc4  00014fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013fcc  08013fcc  00015210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08013fcc  08013fcc  00014fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08013fd4  08013fd4  00014fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000210  20000000  08013fd8  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000464  20000210  080141e8  00015210  2**2
                  ALLOC
 10 ._user_heap_stack 00038004  20000674  080141e8  00015674  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00015210  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b3f8  00000000  00000000  00015240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c02  00000000  00000000  00030638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016f0  00000000  00000000  00034240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000122d  00000000  00000000  00035930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b0d0  00000000  00000000  00036b5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f856  00000000  00000000  00061c2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010ac83  00000000  00000000  00081483  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018c106  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ba4  00000000  00000000  0018c14c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b5  00000000  00000000  00193cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000210 	.word	0x20000210
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08012248 	.word	0x08012248

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000214 	.word	0x20000214
 800020c:	08012248 	.word	0x08012248

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cfc:	f000 b9be 	b.w	800107c <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	@ (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	468e      	mov	lr, r1
 8000d8c:	4604      	mov	r4, r0
 8000d8e:	4688      	mov	r8, r1
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d14a      	bne.n	8000e2a <__udivmoddi4+0xa6>
 8000d94:	428a      	cmp	r2, r1
 8000d96:	4617      	mov	r7, r2
 8000d98:	d962      	bls.n	8000e60 <__udivmoddi4+0xdc>
 8000d9a:	fab2 f682 	clz	r6, r2
 8000d9e:	b14e      	cbz	r6, 8000db4 <__udivmoddi4+0x30>
 8000da0:	f1c6 0320 	rsb	r3, r6, #32
 8000da4:	fa01 f806 	lsl.w	r8, r1, r6
 8000da8:	fa20 f303 	lsr.w	r3, r0, r3
 8000dac:	40b7      	lsls	r7, r6
 8000dae:	ea43 0808 	orr.w	r8, r3, r8
 8000db2:	40b4      	lsls	r4, r6
 8000db4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000db8:	fa1f fc87 	uxth.w	ip, r7
 8000dbc:	fbb8 f1fe 	udiv	r1, r8, lr
 8000dc0:	0c23      	lsrs	r3, r4, #16
 8000dc2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000dc6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dca:	fb01 f20c 	mul.w	r2, r1, ip
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x62>
 8000dd2:	18fb      	adds	r3, r7, r3
 8000dd4:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000dd8:	f080 80ea 	bcs.w	8000fb0 <__udivmoddi4+0x22c>
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	f240 80e7 	bls.w	8000fb0 <__udivmoddi4+0x22c>
 8000de2:	3902      	subs	r1, #2
 8000de4:	443b      	add	r3, r7
 8000de6:	1a9a      	subs	r2, r3, r2
 8000de8:	b2a3      	uxth	r3, r4
 8000dea:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dee:	fb0e 2210 	mls	r2, lr, r0, r2
 8000df2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000df6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dfa:	459c      	cmp	ip, r3
 8000dfc:	d909      	bls.n	8000e12 <__udivmoddi4+0x8e>
 8000dfe:	18fb      	adds	r3, r7, r3
 8000e00:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000e04:	f080 80d6 	bcs.w	8000fb4 <__udivmoddi4+0x230>
 8000e08:	459c      	cmp	ip, r3
 8000e0a:	f240 80d3 	bls.w	8000fb4 <__udivmoddi4+0x230>
 8000e0e:	443b      	add	r3, r7
 8000e10:	3802      	subs	r0, #2
 8000e12:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e16:	eba3 030c 	sub.w	r3, r3, ip
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	b11d      	cbz	r5, 8000e26 <__udivmoddi4+0xa2>
 8000e1e:	40f3      	lsrs	r3, r6
 8000e20:	2200      	movs	r2, #0
 8000e22:	e9c5 3200 	strd	r3, r2, [r5]
 8000e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	d905      	bls.n	8000e3a <__udivmoddi4+0xb6>
 8000e2e:	b10d      	cbz	r5, 8000e34 <__udivmoddi4+0xb0>
 8000e30:	e9c5 0100 	strd	r0, r1, [r5]
 8000e34:	2100      	movs	r1, #0
 8000e36:	4608      	mov	r0, r1
 8000e38:	e7f5      	b.n	8000e26 <__udivmoddi4+0xa2>
 8000e3a:	fab3 f183 	clz	r1, r3
 8000e3e:	2900      	cmp	r1, #0
 8000e40:	d146      	bne.n	8000ed0 <__udivmoddi4+0x14c>
 8000e42:	4573      	cmp	r3, lr
 8000e44:	d302      	bcc.n	8000e4c <__udivmoddi4+0xc8>
 8000e46:	4282      	cmp	r2, r0
 8000e48:	f200 8105 	bhi.w	8001056 <__udivmoddi4+0x2d2>
 8000e4c:	1a84      	subs	r4, r0, r2
 8000e4e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e52:	2001      	movs	r0, #1
 8000e54:	4690      	mov	r8, r2
 8000e56:	2d00      	cmp	r5, #0
 8000e58:	d0e5      	beq.n	8000e26 <__udivmoddi4+0xa2>
 8000e5a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e5e:	e7e2      	b.n	8000e26 <__udivmoddi4+0xa2>
 8000e60:	2a00      	cmp	r2, #0
 8000e62:	f000 8090 	beq.w	8000f86 <__udivmoddi4+0x202>
 8000e66:	fab2 f682 	clz	r6, r2
 8000e6a:	2e00      	cmp	r6, #0
 8000e6c:	f040 80a4 	bne.w	8000fb8 <__udivmoddi4+0x234>
 8000e70:	1a8a      	subs	r2, r1, r2
 8000e72:	0c03      	lsrs	r3, r0, #16
 8000e74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e78:	b280      	uxth	r0, r0
 8000e7a:	b2bc      	uxth	r4, r7
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e82:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e8a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	d907      	bls.n	8000ea2 <__udivmoddi4+0x11e>
 8000e92:	18fb      	adds	r3, r7, r3
 8000e94:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000e98:	d202      	bcs.n	8000ea0 <__udivmoddi4+0x11c>
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	f200 80e0 	bhi.w	8001060 <__udivmoddi4+0x2dc>
 8000ea0:	46c4      	mov	ip, r8
 8000ea2:	1a9b      	subs	r3, r3, r2
 8000ea4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ea8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000eac:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000eb0:	fb02 f404 	mul.w	r4, r2, r4
 8000eb4:	429c      	cmp	r4, r3
 8000eb6:	d907      	bls.n	8000ec8 <__udivmoddi4+0x144>
 8000eb8:	18fb      	adds	r3, r7, r3
 8000eba:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000ebe:	d202      	bcs.n	8000ec6 <__udivmoddi4+0x142>
 8000ec0:	429c      	cmp	r4, r3
 8000ec2:	f200 80ca 	bhi.w	800105a <__udivmoddi4+0x2d6>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	1b1b      	subs	r3, r3, r4
 8000eca:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ece:	e7a5      	b.n	8000e1c <__udivmoddi4+0x98>
 8000ed0:	f1c1 0620 	rsb	r6, r1, #32
 8000ed4:	408b      	lsls	r3, r1
 8000ed6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eda:	431f      	orrs	r7, r3
 8000edc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ee0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ee4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ee8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000eec:	4323      	orrs	r3, r4
 8000eee:	fa00 f801 	lsl.w	r8, r0, r1
 8000ef2:	fa1f fc87 	uxth.w	ip, r7
 8000ef6:	fbbe f0f9 	udiv	r0, lr, r9
 8000efa:	0c1c      	lsrs	r4, r3, #16
 8000efc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000f00:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000f04:	fb00 fe0c 	mul.w	lr, r0, ip
 8000f08:	45a6      	cmp	lr, r4
 8000f0a:	fa02 f201 	lsl.w	r2, r2, r1
 8000f0e:	d909      	bls.n	8000f24 <__udivmoddi4+0x1a0>
 8000f10:	193c      	adds	r4, r7, r4
 8000f12:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000f16:	f080 809c 	bcs.w	8001052 <__udivmoddi4+0x2ce>
 8000f1a:	45a6      	cmp	lr, r4
 8000f1c:	f240 8099 	bls.w	8001052 <__udivmoddi4+0x2ce>
 8000f20:	3802      	subs	r0, #2
 8000f22:	443c      	add	r4, r7
 8000f24:	eba4 040e 	sub.w	r4, r4, lr
 8000f28:	fa1f fe83 	uxth.w	lr, r3
 8000f2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f30:	fb09 4413 	mls	r4, r9, r3, r4
 8000f34:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f38:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f3c:	45a4      	cmp	ip, r4
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x1ce>
 8000f40:	193c      	adds	r4, r7, r4
 8000f42:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000f46:	f080 8082 	bcs.w	800104e <__udivmoddi4+0x2ca>
 8000f4a:	45a4      	cmp	ip, r4
 8000f4c:	d97f      	bls.n	800104e <__udivmoddi4+0x2ca>
 8000f4e:	3b02      	subs	r3, #2
 8000f50:	443c      	add	r4, r7
 8000f52:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f56:	eba4 040c 	sub.w	r4, r4, ip
 8000f5a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f5e:	4564      	cmp	r4, ip
 8000f60:	4673      	mov	r3, lr
 8000f62:	46e1      	mov	r9, ip
 8000f64:	d362      	bcc.n	800102c <__udivmoddi4+0x2a8>
 8000f66:	d05f      	beq.n	8001028 <__udivmoddi4+0x2a4>
 8000f68:	b15d      	cbz	r5, 8000f82 <__udivmoddi4+0x1fe>
 8000f6a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f6e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f72:	fa04 f606 	lsl.w	r6, r4, r6
 8000f76:	fa22 f301 	lsr.w	r3, r2, r1
 8000f7a:	431e      	orrs	r6, r3
 8000f7c:	40cc      	lsrs	r4, r1
 8000f7e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f82:	2100      	movs	r1, #0
 8000f84:	e74f      	b.n	8000e26 <__udivmoddi4+0xa2>
 8000f86:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f8a:	0c01      	lsrs	r1, r0, #16
 8000f8c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f90:	b280      	uxth	r0, r0
 8000f92:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f96:	463b      	mov	r3, r7
 8000f98:	4638      	mov	r0, r7
 8000f9a:	463c      	mov	r4, r7
 8000f9c:	46b8      	mov	r8, r7
 8000f9e:	46be      	mov	lr, r7
 8000fa0:	2620      	movs	r6, #32
 8000fa2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000fa6:	eba2 0208 	sub.w	r2, r2, r8
 8000faa:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000fae:	e766      	b.n	8000e7e <__udivmoddi4+0xfa>
 8000fb0:	4601      	mov	r1, r0
 8000fb2:	e718      	b.n	8000de6 <__udivmoddi4+0x62>
 8000fb4:	4610      	mov	r0, r2
 8000fb6:	e72c      	b.n	8000e12 <__udivmoddi4+0x8e>
 8000fb8:	f1c6 0220 	rsb	r2, r6, #32
 8000fbc:	fa2e f302 	lsr.w	r3, lr, r2
 8000fc0:	40b7      	lsls	r7, r6
 8000fc2:	40b1      	lsls	r1, r6
 8000fc4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fd2:	b2bc      	uxth	r4, r7
 8000fd4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fd8:	0c11      	lsrs	r1, r2, #16
 8000fda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fde:	fb08 f904 	mul.w	r9, r8, r4
 8000fe2:	40b0      	lsls	r0, r6
 8000fe4:	4589      	cmp	r9, r1
 8000fe6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fea:	b280      	uxth	r0, r0
 8000fec:	d93e      	bls.n	800106c <__udivmoddi4+0x2e8>
 8000fee:	1879      	adds	r1, r7, r1
 8000ff0:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000ff4:	d201      	bcs.n	8000ffa <__udivmoddi4+0x276>
 8000ff6:	4589      	cmp	r9, r1
 8000ff8:	d81f      	bhi.n	800103a <__udivmoddi4+0x2b6>
 8000ffa:	eba1 0109 	sub.w	r1, r1, r9
 8000ffe:	fbb1 f9fe 	udiv	r9, r1, lr
 8001002:	fb09 f804 	mul.w	r8, r9, r4
 8001006:	fb0e 1119 	mls	r1, lr, r9, r1
 800100a:	b292      	uxth	r2, r2
 800100c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001010:	4542      	cmp	r2, r8
 8001012:	d229      	bcs.n	8001068 <__udivmoddi4+0x2e4>
 8001014:	18ba      	adds	r2, r7, r2
 8001016:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800101a:	d2c4      	bcs.n	8000fa6 <__udivmoddi4+0x222>
 800101c:	4542      	cmp	r2, r8
 800101e:	d2c2      	bcs.n	8000fa6 <__udivmoddi4+0x222>
 8001020:	f1a9 0102 	sub.w	r1, r9, #2
 8001024:	443a      	add	r2, r7
 8001026:	e7be      	b.n	8000fa6 <__udivmoddi4+0x222>
 8001028:	45f0      	cmp	r8, lr
 800102a:	d29d      	bcs.n	8000f68 <__udivmoddi4+0x1e4>
 800102c:	ebbe 0302 	subs.w	r3, lr, r2
 8001030:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001034:	3801      	subs	r0, #1
 8001036:	46e1      	mov	r9, ip
 8001038:	e796      	b.n	8000f68 <__udivmoddi4+0x1e4>
 800103a:	eba7 0909 	sub.w	r9, r7, r9
 800103e:	4449      	add	r1, r9
 8001040:	f1a8 0c02 	sub.w	ip, r8, #2
 8001044:	fbb1 f9fe 	udiv	r9, r1, lr
 8001048:	fb09 f804 	mul.w	r8, r9, r4
 800104c:	e7db      	b.n	8001006 <__udivmoddi4+0x282>
 800104e:	4673      	mov	r3, lr
 8001050:	e77f      	b.n	8000f52 <__udivmoddi4+0x1ce>
 8001052:	4650      	mov	r0, sl
 8001054:	e766      	b.n	8000f24 <__udivmoddi4+0x1a0>
 8001056:	4608      	mov	r0, r1
 8001058:	e6fd      	b.n	8000e56 <__udivmoddi4+0xd2>
 800105a:	443b      	add	r3, r7
 800105c:	3a02      	subs	r2, #2
 800105e:	e733      	b.n	8000ec8 <__udivmoddi4+0x144>
 8001060:	f1ac 0c02 	sub.w	ip, ip, #2
 8001064:	443b      	add	r3, r7
 8001066:	e71c      	b.n	8000ea2 <__udivmoddi4+0x11e>
 8001068:	4649      	mov	r1, r9
 800106a:	e79c      	b.n	8000fa6 <__udivmoddi4+0x222>
 800106c:	eba1 0109 	sub.w	r1, r1, r9
 8001070:	46c4      	mov	ip, r8
 8001072:	fbb1 f9fe 	udiv	r9, r1, lr
 8001076:	fb09 f804 	mul.w	r8, r9, r4
 800107a:	e7c4      	b.n	8001006 <__udivmoddi4+0x282>

0800107c <__aeabi_idiv0>:
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop

08001080 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001084:	f3bf 8f4f 	dsb	sy
}
 8001088:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800108a:	4b06      	ldr	r3, [pc, #24]	@ (80010a4 <__NVIC_SystemReset+0x24>)
 800108c:	68db      	ldr	r3, [r3, #12]
 800108e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001092:	4904      	ldr	r1, [pc, #16]	@ (80010a4 <__NVIC_SystemReset+0x24>)
 8001094:	4b04      	ldr	r3, [pc, #16]	@ (80010a8 <__NVIC_SystemReset+0x28>)
 8001096:	4313      	orrs	r3, r2
 8001098:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800109a:	f3bf 8f4f 	dsb	sy
}
 800109e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80010a0:	bf00      	nop
 80010a2:	e7fd      	b.n	80010a0 <__NVIC_SystemReset+0x20>
 80010a4:	e000ed00 	.word	0xe000ed00
 80010a8:	05fa0004 	.word	0x05fa0004

080010ac <ControlSequenceParserConsume>:
#endif

// --------------------------------------------------------------------------------------------------------------------
cspTYPE ControlSequenceParserConsume( char input, cspState_t* s )
// --------------------------------------------------------------------------------------------------------------------
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	6039      	str	r1, [r7, #0]
 80010b6:	71fb      	strb	r3, [r7, #7]
#define CHECK_FOR_OVERFLOW(x) do { if ( ((x)+1) > s->maxLength ) \
	                          { s->type = ctrlOVERFLOW; s->length = 0; s->state = ctrlpsIDLE_DETECT; \
	                          return csptCONTROL; } } while(0)

	switch (s->state)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b04      	cmp	r3, #4
 80010be:	f200 8131 	bhi.w	8001324 <ControlSequenceParserConsume+0x278>
 80010c2:	a201      	add	r2, pc, #4	@ (adr r2, 80010c8 <ControlSequenceParserConsume+0x1c>)
 80010c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010c8:	080010dd 	.word	0x080010dd
 80010cc:	08001133 	.word	0x08001133
 80010d0:	08001207 	.word	0x08001207
 80010d4:	08001271 	.word	0x08001271
 80010d8:	080012bb 	.word	0x080012bb
	{
	case ctrlpsIDLE_DETECT:
		// default start condition
		s->buff[0] = input;
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	691b      	ldr	r3, [r3, #16]
 80010e0:	79fa      	ldrb	r2, [r7, #7]
 80010e2:	701a      	strb	r2, [r3, #0]
		s->buff[1] = ctrlC0_NUL;
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	691b      	ldr	r3, [r3, #16]
 80010e8:	3301      	adds	r3, #1
 80010ea:	2200      	movs	r2, #0
 80010ec:	701a      	strb	r2, [r3, #0]
		s->ptr = 0;
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	2200      	movs	r2, #0
 80010f2:	605a      	str	r2, [r3, #4]
		s->length = 1;
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	2201      	movs	r2, #1
 80010f8:	609a      	str	r2, [r3, #8]

		// escape code takes more than one byte in total length
		if (input == ctrlC0_ESC)
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	2b1b      	cmp	r3, #27
 80010fe:	d10a      	bne.n	8001116 <ControlSequenceParserConsume+0x6a>
		{
			s->state = ctrlpsSTART_C1;
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	2201      	movs	r2, #1
 8001104:	701a      	strb	r2, [r3, #0]
			s->ptr = 1;
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	2201      	movs	r2, #1
 800110a:	605a      	str	r2, [r3, #4]
			s->type = ctrlC0_ESC;
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	221b      	movs	r2, #27
 8001110:	805a      	strh	r2, [r3, #2]
			return csptNONE;
 8001112:	2300      	movs	r3, #0
 8001114:	e107      	b.n	8001326 <ControlSequenceParserConsume+0x27a>
		}

		// single length control code
		else if ( ( /* input >= ctrlC0_NUL &&*/ (unsigned char)input <= (unsigned char)ctrlC0_US ) ||
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	2b1f      	cmp	r3, #31
 800111a:	d902      	bls.n	8001122 <ControlSequenceParserConsume+0x76>
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001120:	d105      	bne.n	800112e <ControlSequenceParserConsume+0x82>
				  ( input == ctrlC0_DEL ) )
	    {
			s->type = input;
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	b29a      	uxth	r2, r3
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	805a      	strh	r2, [r3, #2]
			return csptCONTROL;
 800112a:	2302      	movs	r3, #2
 800112c:	e0fb      	b.n	8001326 <ControlSequenceParserConsume+0x27a>
	    }

		// only a character, nothing else
		return csptCHARACTER;
 800112e:	2301      	movs	r3, #1
 8001130:	e0f9      	b.n	8001326 <ControlSequenceParserConsume+0x27a>

	case ctrlpsSTART_C1:

		// now we need to check the type of escape sequence
		s->buff[s->ptr++] = input;
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	691a      	ldr	r2, [r3, #16]
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	1c58      	adds	r0, r3, #1
 800113c:	6839      	ldr	r1, [r7, #0]
 800113e:	6048      	str	r0, [r1, #4]
 8001140:	4413      	add	r3, r2
 8001142:	79fa      	ldrb	r2, [r7, #7]
 8001144:	701a      	strb	r2, [r3, #0]
		CHECK_FOR_OVERFLOW(s->ptr);
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	1c5a      	adds	r2, r3, #1
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	429a      	cmp	r2, r3
 8001152:	d90b      	bls.n	800116c <ControlSequenceParserConsume+0xc0>
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	f241 0201 	movw	r2, #4097	@ 0x1001
 800115a:	805a      	strh	r2, [r3, #2]
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	2200      	movs	r2, #0
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	2200      	movs	r2, #0
 8001166:	701a      	strb	r2, [r3, #0]
 8001168:	2302      	movs	r3, #2
 800116a:	e0dc      	b.n	8001326 <ControlSequenceParserConsume+0x27a>
		if ( input == '[' )
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	2b5b      	cmp	r3, #91	@ 0x5b
 8001170:	d107      	bne.n	8001182 <ControlSequenceParserConsume+0xd6>
		{
			s->type = ctrlC1_CSI;
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8001178:	805a      	strh	r2, [r3, #2]
			s->state = ctrlpsHANDLE_CSI;
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	2202      	movs	r2, #2
 800117e:	701a      	strb	r2, [r3, #0]
 8001180:	e03f      	b.n	8001202 <ControlSequenceParserConsume+0x156>
		}
		else if ( input == 'X' )
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	2b58      	cmp	r3, #88	@ 0x58
 8001186:	d107      	bne.n	8001198 <ControlSequenceParserConsume+0xec>
		{
			s->type = ctrlC1_SOS;
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	f240 1203 	movw	r2, #259	@ 0x103
 800118e:	805a      	strh	r2, [r3, #2]
			s->state = ctrlpsHANDLE_ST_1;
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	2203      	movs	r2, #3
 8001194:	701a      	strb	r2, [r3, #0]
 8001196:	e034      	b.n	8001202 <ControlSequenceParserConsume+0x156>
		}
		else if ( input == '^' )
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	2b5e      	cmp	r3, #94	@ 0x5e
 800119c:	d107      	bne.n	80011ae <ControlSequenceParserConsume+0x102>
		{
			s->type = ctrlC1_PM;
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80011a4:	805a      	strh	r2, [r3, #2]
			s->state = ctrlpsHANDLE_ST_1;
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	2203      	movs	r2, #3
 80011aa:	701a      	strb	r2, [r3, #0]
 80011ac:	e029      	b.n	8001202 <ControlSequenceParserConsume+0x156>
		}
		else if ( input == '_' )
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	2b5f      	cmp	r3, #95	@ 0x5f
 80011b2:	d107      	bne.n	80011c4 <ControlSequenceParserConsume+0x118>
		{
			s->type = ctrlC1_APC;
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	f240 1205 	movw	r2, #261	@ 0x105
 80011ba:	805a      	strh	r2, [r3, #2]
			s->state = ctrlpsHANDLE_ST_1;
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	2203      	movs	r2, #3
 80011c0:	701a      	strb	r2, [r3, #0]
 80011c2:	e01e      	b.n	8001202 <ControlSequenceParserConsume+0x156>
		}
		else if ( input == '\\' )
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	2b5c      	cmp	r3, #92	@ 0x5c
 80011c8:	d107      	bne.n	80011da <ControlSequenceParserConsume+0x12e>
		{
			s->type = ctrlC1_ST;
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	f44f 7283 	mov.w	r2, #262	@ 0x106
 80011d0:	805a      	strh	r2, [r3, #2]
			s->state = ctrlpsHANDLE_ST_1;
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	2203      	movs	r2, #3
 80011d6:	701a      	strb	r2, [r3, #0]
 80011d8:	e013      	b.n	8001202 <ControlSequenceParserConsume+0x156>
		}
		else if ( input == 'P' )
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	2b50      	cmp	r3, #80	@ 0x50
 80011de:	d107      	bne.n	80011f0 <ControlSequenceParserConsume+0x144>
		{
			s->type = ctrlC1_DCS;
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	f240 1201 	movw	r2, #257	@ 0x101
 80011e6:	805a      	strh	r2, [r3, #2]
			s->state = ctrlpsHANDLE_ST_1;
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	2203      	movs	r2, #3
 80011ec:	701a      	strb	r2, [r3, #0]
 80011ee:	e008      	b.n	8001202 <ControlSequenceParserConsume+0x156>
		}
		else
		{
			s->type = ctrlUNKNOWN;
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80011f6:	805a      	strh	r2, [r3, #2]
			s->state = ctrlpsIDLE_DETECT;
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	2200      	movs	r2, #0
 80011fc:	701a      	strb	r2, [r3, #0]
			return csptCONTROL;
 80011fe:	2302      	movs	r3, #2
 8001200:	e091      	b.n	8001326 <ControlSequenceParserConsume+0x27a>
		}
		return csptNONE;
 8001202:	2300      	movs	r3, #0
 8001204:	e08f      	b.n	8001326 <ControlSequenceParserConsume+0x27a>

	// data handling and termination of Control Sequence Introducer
	case ctrlpsHANDLE_CSI:
	{
		s->buff[s->ptr++] = input;
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	691a      	ldr	r2, [r3, #16]
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	1c58      	adds	r0, r3, #1
 8001210:	6839      	ldr	r1, [r7, #0]
 8001212:	6048      	str	r0, [r1, #4]
 8001214:	4413      	add	r3, r2
 8001216:	79fa      	ldrb	r2, [r7, #7]
 8001218:	701a      	strb	r2, [r3, #0]
		CHECK_FOR_OVERFLOW(s->ptr);
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	1c5a      	adds	r2, r3, #1
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	429a      	cmp	r2, r3
 8001226:	d90b      	bls.n	8001240 <ControlSequenceParserConsume+0x194>
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	f241 0201 	movw	r2, #4097	@ 0x1001
 800122e:	805a      	strh	r2, [r3, #2]
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	2200      	movs	r2, #0
 8001234:	609a      	str	r2, [r3, #8]
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	2200      	movs	r2, #0
 800123a:	701a      	strb	r2, [r3, #0]
 800123c:	2302      	movs	r3, #2
 800123e:	e072      	b.n	8001326 <ControlSequenceParserConsume+0x27a>
		if ( input >= 0x40 && input <= 0x7E )
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	2b3f      	cmp	r3, #63	@ 0x3f
 8001244:	d912      	bls.n	800126c <ControlSequenceParserConsume+0x1c0>
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	2b7e      	cmp	r3, #126	@ 0x7e
 800124a:	d80f      	bhi.n	800126c <ControlSequenceParserConsume+0x1c0>
		{
			s->buff[s->ptr] = ctrlC0_NUL;
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	691a      	ldr	r2, [r3, #16]
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	4413      	add	r3, r2
 8001256:	2200      	movs	r2, #0
 8001258:	701a      	strb	r2, [r3, #0]
			s->length = s->ptr;
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685a      	ldr	r2, [r3, #4]
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	609a      	str	r2, [r3, #8]
			s->state = ctrlpsIDLE_DETECT;
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	2200      	movs	r2, #0
 8001266:	701a      	strb	r2, [r3, #0]
			return csptCONTROL;
 8001268:	2302      	movs	r3, #2
 800126a:	e05c      	b.n	8001326 <ControlSequenceParserConsume+0x27a>
		}
		return csptNONE;
 800126c:	2300      	movs	r3, #0
 800126e:	e05a      	b.n	8001326 <ControlSequenceParserConsume+0x27a>
	}

	// first part of ST terminator
	case ctrlpsHANDLE_ST_1:
	{
		s->buff[s->ptr++] = input;
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	691a      	ldr	r2, [r3, #16]
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	1c58      	adds	r0, r3, #1
 800127a:	6839      	ldr	r1, [r7, #0]
 800127c:	6048      	str	r0, [r1, #4]
 800127e:	4413      	add	r3, r2
 8001280:	79fa      	ldrb	r2, [r7, #7]
 8001282:	701a      	strb	r2, [r3, #0]
		CHECK_FOR_OVERFLOW(s->ptr);
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	1c5a      	adds	r2, r3, #1
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	68db      	ldr	r3, [r3, #12]
 800128e:	429a      	cmp	r2, r3
 8001290:	d90b      	bls.n	80012aa <ControlSequenceParserConsume+0x1fe>
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	f241 0201 	movw	r2, #4097	@ 0x1001
 8001298:	805a      	strh	r2, [r3, #2]
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	2200      	movs	r2, #0
 80012a4:	701a      	strb	r2, [r3, #0]
 80012a6:	2302      	movs	r3, #2
 80012a8:	e03d      	b.n	8001326 <ControlSequenceParserConsume+0x27a>
		if ( input == '\033' )
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	2b1b      	cmp	r3, #27
 80012ae:	d102      	bne.n	80012b6 <ControlSequenceParserConsume+0x20a>
		{
			s->state = ctrlpsHANDLE_ST_2;
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	2204      	movs	r2, #4
 80012b4:	701a      	strb	r2, [r3, #0]
		}
		return csptNONE;
 80012b6:	2300      	movs	r3, #0
 80012b8:	e035      	b.n	8001326 <ControlSequenceParserConsume+0x27a>
	}
	// second part of ST terminator
	case ctrlpsHANDLE_ST_2:
	{
		s->buff[s->ptr++] = input;
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	691a      	ldr	r2, [r3, #16]
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	1c58      	adds	r0, r3, #1
 80012c4:	6839      	ldr	r1, [r7, #0]
 80012c6:	6048      	str	r0, [r1, #4]
 80012c8:	4413      	add	r3, r2
 80012ca:	79fa      	ldrb	r2, [r7, #7]
 80012cc:	701a      	strb	r2, [r3, #0]
		CHECK_FOR_OVERFLOW(s->ptr);
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	1c5a      	adds	r2, r3, #1
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d90b      	bls.n	80012f4 <ControlSequenceParserConsume+0x248>
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	f241 0201 	movw	r2, #4097	@ 0x1001
 80012e2:	805a      	strh	r2, [r3, #2]
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	2200      	movs	r2, #0
 80012ee:	701a      	strb	r2, [r3, #0]
 80012f0:	2302      	movs	r3, #2
 80012f2:	e018      	b.n	8001326 <ControlSequenceParserConsume+0x27a>
		if ( input != '\\' )
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	2b5c      	cmp	r3, #92	@ 0x5c
 80012f8:	d004      	beq.n	8001304 <ControlSequenceParserConsume+0x258>
		{
			s->state = ctrlpsHANDLE_ST_1;
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	2203      	movs	r2, #3
 80012fe:	701a      	strb	r2, [r3, #0]
			s->buff[s->ptr] = ctrlC0_NUL;
			s->length = s->ptr;
			s->state = ctrlpsIDLE_DETECT;
			return csptCONTROL;
		}
		return csptNONE;
 8001300:	2300      	movs	r3, #0
 8001302:	e010      	b.n	8001326 <ControlSequenceParserConsume+0x27a>
			s->buff[s->ptr] = ctrlC0_NUL;
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	691a      	ldr	r2, [r3, #16]
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	4413      	add	r3, r2
 800130e:	2200      	movs	r2, #0
 8001310:	701a      	strb	r2, [r3, #0]
			s->length = s->ptr;
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685a      	ldr	r2, [r3, #4]
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	609a      	str	r2, [r3, #8]
			s->state = ctrlpsIDLE_DETECT;
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	2200      	movs	r2, #0
 800131e:	701a      	strb	r2, [r3, #0]
			return csptCONTROL;
 8001320:	2302      	movs	r3, #2
 8001322:	e000      	b.n	8001326 <ControlSequenceParserConsume+0x27a>
	}
	default:
		return csptCHARACTER;
 8001324:	2301      	movs	r3, #1
	}
}
 8001326:	4618      	mov	r0, r3
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop

08001334 <ProcessCommand>:

// --------------------------------------------------------------------------------------------------------------------
static int ProcessCommand(char* command, int cmdLen, char** args, int numArgs, cmdState_t* c, int* isAlias, char* inputBuffer, int inbuffsz)
// --------------------------------------------------------------------------------------------------------------------
{
 8001334:	b590      	push	{r4, r7, lr}
 8001336:	b0d9      	sub	sp, #356	@ 0x164
 8001338:	af00      	add	r7, sp, #0
 800133a:	f507 74b0 	add.w	r4, r7, #352	@ 0x160
 800133e:	f5a4 74aa 	sub.w	r4, r4, #340	@ 0x154
 8001342:	6020      	str	r0, [r4, #0]
 8001344:	f507 70b0 	add.w	r0, r7, #352	@ 0x160
 8001348:	f5a0 70ac 	sub.w	r0, r0, #344	@ 0x158
 800134c:	6001      	str	r1, [r0, #0]
 800134e:	f507 71b0 	add.w	r1, r7, #352	@ 0x160
 8001352:	f5a1 71ae 	sub.w	r1, r1, #348	@ 0x15c
 8001356:	600a      	str	r2, [r1, #0]
 8001358:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 800135c:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001360:	6013      	str	r3, [r2, #0]
	// here we have to look for a matching entry and therefore we have to search linearly through
	// our linked list of command entries
	xSemaphoreTakeRecursive( c->lockGuard, -1 );
 8001362:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800136c:	4618      	mov	r0, r3
 800136e:	f008 ff4d 	bl	800a20c <xQueueTakeMutexRecursive>
	cmdEntry_t* pElement = c->commands.lh_first;
 8001372:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
	int found = 0;
 800137c:	2300      	movs	r3, #0
 800137e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
	int result = 0;
 8001382:	2300      	movs	r3, #0
 8001384:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
	while ( pElement != NULL )
 8001388:	e17b      	b.n	8001682 <ProcessCommand+0x34e>
	{
		// if string compare result and determined length match, then this must be the function
		if ( strncmp(command, pElement->content.cmd, cmdLen) == 0 && cmdLen == pElement->content.cmdLen )
 800138a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800138e:	f103 0108 	add.w	r1, r3, #8
 8001392:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001396:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80013a0:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80013a4:	6818      	ldr	r0, [r3, #0]
 80013a6:	f00e f9d6 	bl	800f756 <strncmp>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	f040 8162 	bne.w	8001676 <ProcessCommand+0x342>
 80013b2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80013b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013b8:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 80013bc:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80013c0:	6812      	ldr	r2, [r2, #0]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	f040 8157 	bne.w	8001676 <ProcessCommand+0x342>
		{
			found = 1;
 80013c8:	2301      	movs	r3, #1
 80013ca:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
			if ( pElement->content.isAlias )
 80013ce:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80013d2:	f8d3 3258 	ldr.w	r3, [r3, #600]	@ 0x258
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	f000 8139 	beq.w	800164e <ProcessCommand+0x31a>
			{
				*isAlias = 1;
 80013dc:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80013e0:	2201      	movs	r2, #1
 80013e2:	601a      	str	r2, [r3, #0]
				// first we have to copy the arguments behind the command (as long as we have enough space)
				int currentArg = 0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
				int stillCopiedLength = 0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
				char tempInBuff[CONSOLE_LINE_SIZE + 1];
				char* tempArgs[CONSOLE_MAX_NUM_ARGS];
				memset(tempArgs, 0, sizeof(tempArgs));
 80013f0:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80013f4:	22b0      	movs	r2, #176	@ 0xb0
 80013f6:	2100      	movs	r1, #0
 80013f8:	4618      	mov	r0, r3
 80013fa:	f00e f997 	bl	800f72c <memset>
				for (int i = 0; i < numArgs; i++)
 80013fe:	2300      	movs	r3, #0
 8001400:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8001404:	e01d      	b.n	8001442 <ProcessCommand+0x10e>
				{
					tempArgs[i] = args[i] - inputBuffer + tempInBuff;
 8001406:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8001410:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001414:	6812      	ldr	r2, [r2, #0]
 8001416:	4413      	add	r3, r2
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	461a      	mov	r2, r3
 8001422:	f107 0314 	add.w	r3, r7, #20
 8001426:	441a      	add	r2, r3
 8001428:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001432:	443b      	add	r3, r7
 8001434:	f843 2cd0 	str.w	r2, [r3, #-208]
				for (int i = 0; i < numArgs; i++)
 8001438:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800143c:	3301      	adds	r3, #1
 800143e:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8001442:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001446:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800144a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	429a      	cmp	r2, r3
 8001452:	dbd8      	blt.n	8001406 <ProcessCommand+0xd2>
				}
				memcpy(tempInBuff, inputBuffer, inbuffsz);
 8001454:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001458:	f107 0314 	add.w	r3, r7, #20
 800145c:	f8d7 1178 	ldr.w	r1, [r7, #376]	@ 0x178
 8001460:	4618      	mov	r0, r3
 8001462:	f00e fac9 	bl	800f9f8 <memcpy>
				while (numArgs > 0)
 8001466:	e0b2      	b.n	80015ce <ProcessCommand+0x29a>
				{
					// all args are NULL-terminated so we can safely use strlen
					int argCopyLen = strlen(tempArgs[currentArg]);
 8001468:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001472:	443b      	add	r3, r7
 8001474:	f853 3cd0 	ldr.w	r3, [r3, #-208]
 8001478:	4618      	mov	r0, r3
 800147a:	f7fe ff29 	bl	80002d0 <strlen>
 800147e:	4603      	mov	r3, r0
 8001480:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
					int additionalTermination = 0;
 8001484:	2300      	movs	r3, #0
 8001486:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
					if (*(tempArgs[currentArg] - 1) == '"' || tempArgs[currentArg] == NULL)
 800148a:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001494:	443b      	add	r3, r7
 8001496:	f853 3cd0 	ldr.w	r3, [r3, #-208]
 800149a:	3b01      	subs	r3, #1
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b22      	cmp	r3, #34	@ 0x22
 80014a0:	d009      	beq.n	80014b6 <ProcessCommand+0x182>
 80014a2:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80014ac:	443b      	add	r3, r7
 80014ae:	f853 3cd0 	ldr.w	r3, [r3, #-208]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d102      	bne.n	80014bc <ProcessCommand+0x188>
					{
						additionalTermination = 1;
 80014b6:	2301      	movs	r3, #1
 80014b8:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
					}
					if ((argCopyLen + pElement->content.helpLen + stillCopiedLength + 1) > inbuffsz)
 80014bc:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80014c0:	f8d3 2254 	ldr.w	r2, [r3, #596]	@ 0x254
 80014c4:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80014c8:	441a      	add	r2, r3
 80014ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80014ce:	4413      	add	r3, r2
 80014d0:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 80014d4:	429a      	cmp	r2, r3
 80014d6:	dc0d      	bgt.n	80014f4 <ProcessCommand+0x1c0>
					{
						printf("\033[31mAlias Argument Substitution Overflow\033[0m");
 80014d8:	487b      	ldr	r0, [pc, #492]	@ (80016c8 <ProcessCommand+0x394>)
 80014da:	f00d fed1 	bl	800f280 <iprintf>
						result = -1;
 80014de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014e2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
						*isAlias = 0;
 80014e6:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
						return result;
 80014ee:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80014f2:	e0e4      	b.n	80016be <ProcessCommand+0x38a>
					}
					if (additionalTermination)
 80014f4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d011      	beq.n	8001520 <ProcessCommand+0x1ec>
					{
						inputBuffer[pElement->content.helpLen + stillCopiedLength + 1] = '"';
 80014fc:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001500:	f8d3 2254 	ldr.w	r2, [r3, #596]	@ 0x254
 8001504:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8001508:	4413      	add	r3, r2
 800150a:	3301      	adds	r3, #1
 800150c:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001510:	4413      	add	r3, r2
 8001512:	2222      	movs	r2, #34	@ 0x22
 8001514:	701a      	strb	r2, [r3, #0]
						stillCopiedLength += 1;
 8001516:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800151a:	3301      	adds	r3, #1
 800151c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
					}
					memcpy(&inputBuffer[pElement->content.helpLen + stillCopiedLength + 1], tempArgs[currentArg], argCopyLen);
 8001520:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001524:	f8d3 2254 	ldr.w	r2, [r3, #596]	@ 0x254
 8001528:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800152c:	4413      	add	r3, r2
 800152e:	3301      	adds	r3, #1
 8001530:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001534:	18d0      	adds	r0, r2, r3
 8001536:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001540:	443b      	add	r3, r7
 8001542:	f853 3cd0 	ldr.w	r3, [r3, #-208]
 8001546:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 800154a:	4619      	mov	r1, r3
 800154c:	f00e fa54 	bl	800f9f8 <memcpy>
					stillCopiedLength += argCopyLen;
 8001550:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001554:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8001558:	4413      	add	r3, r2
 800155a:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
					if (additionalTermination)
 800155e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8001562:	2b00      	cmp	r3, #0
 8001564:	d011      	beq.n	800158a <ProcessCommand+0x256>
					{
						inputBuffer[pElement->content.helpLen + stillCopiedLength + 1] = '"';
 8001566:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800156a:	f8d3 2254 	ldr.w	r2, [r3, #596]	@ 0x254
 800156e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8001572:	4413      	add	r3, r2
 8001574:	3301      	adds	r3, #1
 8001576:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800157a:	4413      	add	r3, r2
 800157c:	2222      	movs	r2, #34	@ 0x22
 800157e:	701a      	strb	r2, [r3, #0]
						stillCopiedLength += 1;
 8001580:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8001584:	3301      	adds	r3, #1
 8001586:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
					}
					inputBuffer[pElement->content.helpLen + stillCopiedLength + 1] = ' ';
 800158a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800158e:	f8d3 2254 	ldr.w	r2, [r3, #596]	@ 0x254
 8001592:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8001596:	4413      	add	r3, r2
 8001598:	3301      	adds	r3, #1
 800159a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800159e:	4413      	add	r3, r2
 80015a0:	2220      	movs	r2, #32
 80015a2:	701a      	strb	r2, [r3, #0]
					stillCopiedLength += 1;
 80015a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80015a8:	3301      	adds	r3, #1
 80015aa:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
					numArgs -= 1;
 80015ae:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80015b2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80015b6:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 80015ba:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80015be:	6812      	ldr	r2, [r2, #0]
 80015c0:	3a01      	subs	r2, #1
 80015c2:	601a      	str	r2, [r3, #0]
					currentArg += 1;
 80015c4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80015c8:	3301      	adds	r3, #1
 80015ca:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
				while (numArgs > 0)
 80015ce:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80015d2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	f73f af45 	bgt.w	8001468 <ProcessCommand+0x134>
				}

				memcpy(inputBuffer, pElement->content.help, pElement->content.helpLen);
 80015de:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80015e2:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 80015e6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80015ea:	f8d3 3254 	ldr.w	r3, [r3, #596]	@ 0x254
 80015ee:	461a      	mov	r2, r3
 80015f0:	f8d7 0178 	ldr.w	r0, [r7, #376]	@ 0x178
 80015f4:	f00e fa00 	bl	800f9f8 <memcpy>
				memset(&inputBuffer[pElement->content.helpLen+ stillCopiedLength], 0, inbuffsz-(pElement->content.helpLen+stillCopiedLength));
 80015f8:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80015fc:	f8d3 2254 	ldr.w	r2, [r3, #596]	@ 0x254
 8001600:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8001604:	4413      	add	r3, r2
 8001606:	461a      	mov	r2, r3
 8001608:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800160c:	1898      	adds	r0, r3, r2
 800160e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001612:	f8d3 2254 	ldr.w	r2, [r3, #596]	@ 0x254
 8001616:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800161a:	4413      	add	r3, r2
 800161c:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	461a      	mov	r2, r3
 8001624:	2100      	movs	r1, #0
 8001626:	f00e f881 	bl	800f72c <memset>
				if (currentArg != 0) inputBuffer[pElement->content.helpLen] = ' ';
 800162a:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800162e:	2b00      	cmp	r3, #0
 8001630:	d009      	beq.n	8001646 <ProcessCommand+0x312>
 8001632:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001636:	f8d3 3254 	ldr.w	r3, [r3, #596]	@ 0x254
 800163a:	461a      	mov	r2, r3
 800163c:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8001640:	4413      	add	r3, r2
 8001642:	2220      	movs	r2, #32
 8001644:	701a      	strb	r2, [r3, #0]
				result = 0;
 8001646:	2300      	movs	r3, #0
 8001648:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
			}
			else
			{
				result = pElement->content.func(numArgs, args, pElement->content.ctx);
			}
			break;
 800164c:	e01e      	b.n	800168c <ProcessCommand+0x358>
				result = pElement->content.func(numArgs, args, pElement->content.ctx);
 800164e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 8001658:	6852      	ldr	r2, [r2, #4]
 800165a:	f507 71b0 	add.w	r1, r7, #352	@ 0x160
 800165e:	f5a1 71ae 	sub.w	r1, r1, #348	@ 0x15c
 8001662:	f507 70b0 	add.w	r0, r7, #352	@ 0x160
 8001666:	f5a0 70b0 	sub.w	r0, r0, #352	@ 0x160
 800166a:	6809      	ldr	r1, [r1, #0]
 800166c:	6800      	ldr	r0, [r0, #0]
 800166e:	4798      	blx	r3
 8001670:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154
			break;
 8001674:	e00a      	b.n	800168c <ProcessCommand+0x358>
		}

		pElement = pElement->navigate.le_next;
 8001676:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800167a:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
 800167e:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
	while ( pElement != NULL )
 8001682:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001686:	2b00      	cmp	r3, #0
 8001688:	f47f ae7f 	bne.w	800138a <ProcessCommand+0x56>
	}

	xSemaphoreGiveRecursive( c->lockGuard );
 800168c:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4618      	mov	r0, r3
 8001694:	f008 fd7e 	bl	800a194 <xQueueGiveMutexRecursive>
	if ( found == 0 )
 8001698:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800169c:	2b00      	cmp	r3, #0
 800169e:	d10c      	bne.n	80016ba <ProcessCommand+0x386>
	{
		printf("\033[31mInvalid command\033[0m");
 80016a0:	480a      	ldr	r0, [pc, #40]	@ (80016cc <ProcessCommand+0x398>)
 80016a2:	f00d fded 	bl	800f280 <iprintf>
		fflush(stdout);
 80016a6:	4b0a      	ldr	r3, [pc, #40]	@ (80016d0 <ProcessCommand+0x39c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f00d fca5 	bl	800effc <fflush>
		result = -1;
 80016b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016b6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
	}
	return result;
 80016ba:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
}
 80016be:	4618      	mov	r0, r3
 80016c0:	f507 77b2 	add.w	r7, r7, #356	@ 0x164
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd90      	pop	{r4, r7, pc}
 80016c8:	08012260 	.word	0x08012260
 80016cc:	08012290 	.word	0x08012290
 80016d0:	200001c0 	.word	0x200001c0

080016d4 <TransformAndProcessTheCommand>:

// --------------------------------------------------------------------------------------------------------------------
static int TransformAndProcessTheCommand(char* lineBuff, int line_size, cmdState_t* cState)
// --------------------------------------------------------------------------------------------------------------------
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b0be      	sub	sp, #248	@ 0xf8
 80016d8:	af04      	add	r7, sp, #16
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
	int numArgs;
	int isAlias;

	char* args[CONSOLE_MAX_NUM_ARGS];
	char* command;
	char* strtokNewIndex = NULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

restart:
	startIdx = 0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
	endIdx = CONSOLE_LINE_SIZE - 1;
 80016ec:	2377      	movs	r3, #119	@ 0x77
 80016ee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
	numArgs = 0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
	isAlias = 0;
 80016f8:	2300      	movs	r3, #0
 80016fa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
	command = NULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

	memset(args, 0, sizeof(args));
 8001704:	f107 0310 	add.w	r3, r7, #16
 8001708:	22b0      	movs	r2, #176	@ 0xb0
 800170a:	2100      	movs	r1, #0
 800170c:	4618      	mov	r0, r3
 800170e:	f00e f80d 	bl	800f72c <memset>

	if ( lineBuff[startIdx] == '\0' ) return 0;
 8001712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001716:	68fa      	ldr	r2, [r7, #12]
 8001718:	4413      	add	r3, r2
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d10d      	bne.n	800173c <TransformAndProcessTheCommand+0x68>
 8001720:	2300      	movs	r3, #0
 8001722:	e118      	b.n	8001956 <TransformAndProcessTheCommand+0x282>

	while(startIdx < line_size)
	{
		if ( lineBuff[startIdx] != ' ' ) break;
 8001724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001728:	68fa      	ldr	r2, [r7, #12]
 800172a:	4413      	add	r3, r2
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2b20      	cmp	r3, #32
 8001730:	d10a      	bne.n	8001748 <TransformAndProcessTheCommand+0x74>
		startIdx += 1;
 8001732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001736:	3301      	adds	r3, #1
 8001738:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
	while(startIdx < line_size)
 800173c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	429a      	cmp	r2, r3
 8001744:	dbee      	blt.n	8001724 <TransformAndProcessTheCommand+0x50>
 8001746:	e014      	b.n	8001772 <TransformAndProcessTheCommand+0x9e>
		if ( lineBuff[startIdx] != ' ' ) break;
 8001748:	bf00      	nop
	}

	while(endIdx > 0)
 800174a:	e012      	b.n	8001772 <TransformAndProcessTheCommand+0x9e>
	{
		if ( lineBuff[endIdx] != '\0' && lineBuff[endIdx] != ' ' ) break;
 800174c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001750:	68fa      	ldr	r2, [r7, #12]
 8001752:	4413      	add	r3, r2
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d006      	beq.n	8001768 <TransformAndProcessTheCommand+0x94>
 800175a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800175e:	68fa      	ldr	r2, [r7, #12]
 8001760:	4413      	add	r3, r2
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2b20      	cmp	r3, #32
 8001766:	d109      	bne.n	800177c <TransformAndProcessTheCommand+0xa8>
		endIdx -= 1;
 8001768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800176c:	3b01      	subs	r3, #1
 800176e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
	while(endIdx > 0)
 8001772:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001776:	2b00      	cmp	r3, #0
 8001778:	dce8      	bgt.n	800174c <TransformAndProcessTheCommand+0x78>
 800177a:	e000      	b.n	800177e <TransformAndProcessTheCommand+0xaa>
		if ( lineBuff[endIdx] != '\0' && lineBuff[endIdx] != ' ' ) break;
 800177c:	bf00      	nop
	}

	if ( startIdx <= endIdx )
 800177e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001782:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001786:	429a      	cmp	r2, r3
 8001788:	f300 80e4 	bgt.w	8001954 <TransformAndProcessTheCommand+0x280>
	{
		// strtok is safe because we have a nulled safety margin behind the string
		command = strtok(&lineBuff[startIdx], " ");
 800178c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001790:	68fa      	ldr	r2, [r7, #12]
 8001792:	4413      	add	r3, r2
 8001794:	4972      	ldr	r1, [pc, #456]	@ (8001960 <TransformAndProcessTheCommand+0x28c>)
 8001796:	4618      	mov	r0, r3
 8001798:	f00d fffc 	bl	800f794 <strtok>
 800179c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0

		// some sanity checks before tokenizing
		if ( command == NULL ) return 0;
 80017a0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d101      	bne.n	80017ac <TransformAndProcessTheCommand+0xd8>
 80017a8:	2300      	movs	r3, #0
 80017aa:	e0d4      	b.n	8001956 <TransformAndProcessTheCommand+0x282>
		if ((int)strnlen(command, line_size) == 0 ) return 0;
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	4619      	mov	r1, r3
 80017b0:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 80017b4:	f00d ffe1 	bl	800f77a <strnlen>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d101      	bne.n	80017c2 <TransformAndProcessTheCommand+0xee>
 80017be:	2300      	movs	r3, #0
 80017c0:	e0c9      	b.n	8001956 <TransformAndProcessTheCommand+0x282>

		int cmdLength = (int)strnlen(command, line_size);
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	4619      	mov	r1, r3
 80017c6:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 80017ca:	f00d ffd6 	bl	800f77a <strnlen>
 80017ce:	4603      	mov	r3, r0
 80017d0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

		// now get the arguments
		while((args[numArgs] = strtok(strtokNewIndex, " ")) != NULL && numArgs < CONSOLE_MAX_NUM_ARGS)
 80017d4:	e086      	b.n	80018e4 <TransformAndProcessTheCommand+0x210>
		{
			strtokNewIndex = NULL;
 80017d6:	2300      	movs	r3, #0
 80017d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			if (args[numArgs][0] == '"')
 80017dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	33e8      	adds	r3, #232	@ 0xe8
 80017e4:	443b      	add	r3, r7
 80017e6:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b22      	cmp	r3, #34	@ 0x22
 80017ee:	d174      	bne.n	80018da <TransformAndProcessTheCommand+0x206>
			{
				// move the argument to remove the quotes
				args[numArgs] += 1;
 80017f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	33e8      	adds	r3, #232	@ 0xe8
 80017f8:	443b      	add	r3, r7
 80017fa:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 80017fe:	1c5a      	adds	r2, r3, #1
 8001800:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	33e8      	adds	r3, #232	@ 0xe8
 8001808:	443b      	add	r3, r7
 800180a:	f843 2cd8 	str.w	r2, [r3, #-216]
				if (args[numArgs][0] == '"') {
 800180e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	33e8      	adds	r3, #232	@ 0xe8
 8001816:	443b      	add	r3, r7
 8001818:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	2b22      	cmp	r3, #34	@ 0x22
 8001820:	d113      	bne.n	800184a <TransformAndProcessTheCommand+0x176>
					args[numArgs][0] = '\0';
 8001822:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	33e8      	adds	r3, #232	@ 0xe8
 800182a:	443b      	add	r3, r7
 800182c:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001830:	2200      	movs	r2, #0
 8001832:	701a      	strb	r2, [r3, #0]
					// we have to add a plus 2 because there is the '"' char and '\0' from strtok as second
					// char. So we need to add 2 chars to get to the next valid char or the end of the string
					strtokNewIndex = &args[numArgs][2];
 8001834:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	33e8      	adds	r3, #232	@ 0xe8
 800183c:	443b      	add	r3, r7
 800183e:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001842:	3302      	adds	r3, #2
 8001844:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001848:	e047      	b.n	80018da <TransformAndProcessTheCommand+0x206>
				}
				else
				{
					// now look for the end of the argument and set new strtok index to this
					// string part
					int firstLen = strlen(args[numArgs]);
 800184a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	33e8      	adds	r3, #232	@ 0xe8
 8001852:	443b      	add	r3, r7
 8001854:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001858:	4618      	mov	r0, r3
 800185a:	f7fe fd39 	bl	80002d0 <strlen>
 800185e:	4603      	mov	r3, r0
 8001860:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
					args[numArgs][firstLen] = ' ';
 8001864:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	33e8      	adds	r3, #232	@ 0xe8
 800186c:	443b      	add	r3, r7
 800186e:	f853 2cd8 	ldr.w	r2, [r3, #-216]
 8001872:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001876:	4413      	add	r3, r2
 8001878:	2220      	movs	r2, #32
 800187a:	701a      	strb	r2, [r3, #0]
					char* endChar = &args[numArgs][firstLen-1];
 800187c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	33e8      	adds	r3, #232	@ 0xe8
 8001884:	443b      	add	r3, r7
 8001886:	f853 2cd8 	ldr.w	r2, [r3, #-216]
 800188a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800188e:	3b01      	subs	r3, #1
 8001890:	4413      	add	r3, r2
 8001892:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
					// while loop is safe because we have a nulled safety margin behind the string
					while (*endChar != '\0' && *endChar != '"') endChar += 1;
 8001896:	e004      	b.n	80018a2 <TransformAndProcessTheCommand+0x1ce>
 8001898:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800189c:	3301      	adds	r3, #1
 800189e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80018a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d004      	beq.n	80018b6 <TransformAndProcessTheCommand+0x1e2>
 80018ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	2b22      	cmp	r3, #34	@ 0x22
 80018b4:	d1f0      	bne.n	8001898 <TransformAndProcessTheCommand+0x1c4>
					if (*endChar == '"') {
 80018b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	2b22      	cmp	r3, #34	@ 0x22
 80018be:	d108      	bne.n	80018d2 <TransformAndProcessTheCommand+0x1fe>
						*endChar = '\0'; endChar += 1;
 80018c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80018c4:	2200      	movs	r2, #0
 80018c6:	701a      	strb	r2, [r3, #0]
 80018c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80018cc:	3301      	adds	r3, #1
 80018ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
					}
					strtokNewIndex = endChar;
 80018d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80018d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
				}
			}
			numArgs+=1;
 80018da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80018de:	3301      	adds	r3, #1
 80018e0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
		while((args[numArgs] = strtok(strtokNewIndex, " ")) != NULL && numArgs < CONSOLE_MAX_NUM_ARGS)
 80018e4:	491e      	ldr	r1, [pc, #120]	@ (8001960 <TransformAndProcessTheCommand+0x28c>)
 80018e6:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 80018ea:	f00d ff53 	bl	800f794 <strtok>
 80018ee:	4602      	mov	r2, r0
 80018f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	33e8      	adds	r3, #232	@ 0xe8
 80018f8:	443b      	add	r3, r7
 80018fa:	f843 2cd8 	str.w	r2, [r3, #-216]
 80018fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	33e8      	adds	r3, #232	@ 0xe8
 8001906:	443b      	add	r3, r7
 8001908:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d004      	beq.n	800191a <TransformAndProcessTheCommand+0x246>
 8001910:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001914:	2b2b      	cmp	r3, #43	@ 0x2b
 8001916:	f77f af5e 	ble.w	80017d6 <TransformAndProcessTheCommand+0x102>
		}

		// now call the command
		int retVal = ProcessCommand(command, cmdLength, args, numArgs, cState, &isAlias, lineBuff, line_size);
 800191a:	f107 0210 	add.w	r2, r7, #16
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	9303      	str	r3, [sp, #12]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	9302      	str	r3, [sp, #8]
 8001926:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800192a:	9301      	str	r3, [sp, #4]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001934:	f8d7 10cc 	ldr.w	r1, [r7, #204]	@ 0xcc
 8001938:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 800193c:	f7ff fcfa 	bl	8001334 <ProcessCommand>
 8001940:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
		if ( isAlias )
 8001944:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d000      	beq.n	800194e <TransformAndProcessTheCommand+0x27a>
		{
			// in case it is an alias, the line buffer has been overwritten with the alias and so we have to do
			// this round again
			goto restart;
 800194c:	e6cb      	b.n	80016e6 <TransformAndProcessTheCommand+0x12>
		}
		return retVal;
 800194e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001952:	e000      	b.n	8001956 <TransformAndProcessTheCommand+0x282>
	}

	return 0;
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	37e8      	adds	r7, #232	@ 0xe8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	080122ac 	.word	0x080122ac

08001964 <PrintConsoleControl>:

// --------------------------------------------------------------------------------------------------------------------
static void PrintConsoleControl( cspState_t* s )
// --------------------------------------------------------------------------------------------------------------------
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
	if ( s->length >= 3 && s->type == ctrlC1_CSI )
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	2b02      	cmp	r3, #2
 8001972:	d91d      	bls.n	80019b0 <PrintConsoleControl+0x4c>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	885b      	ldrh	r3, [r3, #2]
 8001978:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 800197c:	d118      	bne.n	80019b0 <PrintConsoleControl+0x4c>
	{
		for ( unsigned int i = 0; i < s->length; i ++ )
 800197e:	2300      	movs	r3, #0
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	e00a      	b.n	800199a <PrintConsoleControl+0x36>
		{
			putchar(s->buff[i]);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	691a      	ldr	r2, [r3, #16]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	4413      	add	r3, r2
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f00d fc88 	bl	800f2a4 <putchar>
		for ( unsigned int i = 0; i < s->length; i ++ )
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	3301      	adds	r3, #1
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	68fa      	ldr	r2, [r7, #12]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d3ef      	bcc.n	8001984 <PrintConsoleControl+0x20>
		}
		fflush(stdout);
 80019a4:	4b04      	ldr	r3, [pc, #16]	@ (80019b8 <PrintConsoleControl+0x54>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f00d fb26 	bl	800effc <fflush>
	}
}
 80019b0:	bf00      	nop
 80019b2:	3710      	adds	r7, #16
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	200001c0 	.word	0x200001c0

080019bc <ConsoleIsArrowLeft>:

// --------------------------------------------------------------------------------------------------------------------
static int ConsoleIsArrowLeft( cspState_t* s )
// --------------------------------------------------------------------------------------------------------------------
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
	return ( s->length >= 3 && s->type == ctrlC1_CSI && s->buff[2] == 68);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d90c      	bls.n	80019e6 <ConsoleIsArrowLeft+0x2a>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	885b      	ldrh	r3, [r3, #2]
 80019d0:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 80019d4:	d107      	bne.n	80019e6 <ConsoleIsArrowLeft+0x2a>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	691b      	ldr	r3, [r3, #16]
 80019da:	3302      	adds	r3, #2
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	2b44      	cmp	r3, #68	@ 0x44
 80019e0:	d101      	bne.n	80019e6 <ConsoleIsArrowLeft+0x2a>
 80019e2:	2301      	movs	r3, #1
 80019e4:	e000      	b.n	80019e8 <ConsoleIsArrowLeft+0x2c>
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <ConsoleIsArrowRight>:

// --------------------------------------------------------------------------------------------------------------------
static int ConsoleIsArrowRight( cspState_t* s )
// --------------------------------------------------------------------------------------------------------------------
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
	return ( s->length >= 3 && s->type == ctrlC1_CSI && s->buff[2] == 67);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d90c      	bls.n	8001a1e <ConsoleIsArrowRight+0x2a>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	885b      	ldrh	r3, [r3, #2]
 8001a08:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8001a0c:	d107      	bne.n	8001a1e <ConsoleIsArrowRight+0x2a>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	691b      	ldr	r3, [r3, #16]
 8001a12:	3302      	adds	r3, #2
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b43      	cmp	r3, #67	@ 0x43
 8001a18:	d101      	bne.n	8001a1e <ConsoleIsArrowRight+0x2a>
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e000      	b.n	8001a20 <ConsoleIsArrowRight+0x2c>
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <ConsoleIsArrowUp>:

// --------------------------------------------------------------------------------------------------------------------
static int ConsoleIsArrowUp( cspState_t* s )
// --------------------------------------------------------------------------------------------------------------------
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
	return ( s->length >= 3 && s->type == ctrlC1_CSI && s->buff[2] == 65);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d90c      	bls.n	8001a56 <ConsoleIsArrowUp+0x2a>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	885b      	ldrh	r3, [r3, #2]
 8001a40:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8001a44:	d107      	bne.n	8001a56 <ConsoleIsArrowUp+0x2a>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	3302      	adds	r3, #2
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	2b41      	cmp	r3, #65	@ 0x41
 8001a50:	d101      	bne.n	8001a56 <ConsoleIsArrowUp+0x2a>
 8001a52:	2301      	movs	r3, #1
 8001a54:	e000      	b.n	8001a58 <ConsoleIsArrowUp+0x2c>
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <ConsoleIsArrowDown>:

// --------------------------------------------------------------------------------------------------------------------
static int ConsoleIsArrowDown( cspState_t* s )
// --------------------------------------------------------------------------------------------------------------------
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
	return ( s->length >= 3 && s->type == ctrlC1_CSI && s->buff[2] == 66);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d90c      	bls.n	8001a8e <ConsoleIsArrowDown+0x2a>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	885b      	ldrh	r3, [r3, #2]
 8001a78:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8001a7c:	d107      	bne.n	8001a8e <ConsoleIsArrowDown+0x2a>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	691b      	ldr	r3, [r3, #16]
 8001a82:	3302      	adds	r3, #2
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	2b42      	cmp	r3, #66	@ 0x42
 8001a88:	d101      	bne.n	8001a8e <ConsoleIsArrowDown+0x2a>
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e000      	b.n	8001a90 <ConsoleIsArrowDown+0x2c>
 8001a8e:	2300      	movs	r3, #0
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <ConsoleIsEntf>:

// --------------------------------------------------------------------------------------------------------------------
static int ConsoleIsEntf( cspState_t* s )
// --------------------------------------------------------------------------------------------------------------------
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
	return ( s->length >= 4 && s->type == ctrlC1_CSI && s->buff[2] == 51 && s->buff[3] == 126);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	2b03      	cmp	r3, #3
 8001aaa:	d912      	bls.n	8001ad2 <ConsoleIsEntf+0x36>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	885b      	ldrh	r3, [r3, #2]
 8001ab0:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8001ab4:	d10d      	bne.n	8001ad2 <ConsoleIsEntf+0x36>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	691b      	ldr	r3, [r3, #16]
 8001aba:	3302      	adds	r3, #2
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	2b33      	cmp	r3, #51	@ 0x33
 8001ac0:	d107      	bne.n	8001ad2 <ConsoleIsEntf+0x36>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	3303      	adds	r3, #3
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	2b7e      	cmp	r3, #126	@ 0x7e
 8001acc:	d101      	bne.n	8001ad2 <ConsoleIsEntf+0x36>
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e000      	b.n	8001ad4 <ConsoleIsEntf+0x38>
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <PrintConsoleArrowLeft>:

// --------------------------------------------------------------------------------------------------------------------
static void PrintConsoleArrowLeft( void )
// --------------------------------------------------------------------------------------------------------------------
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
	putchar('\033');
 8001ae4:	201b      	movs	r0, #27
 8001ae6:	f00d fbdd 	bl	800f2a4 <putchar>
	putchar('[');
 8001aea:	205b      	movs	r0, #91	@ 0x5b
 8001aec:	f00d fbda 	bl	800f2a4 <putchar>
	putchar(68);
 8001af0:	2044      	movs	r0, #68	@ 0x44
 8001af2:	f00d fbd7 	bl	800f2a4 <putchar>
	fflush(stdout);
 8001af6:	4b04      	ldr	r3, [pc, #16]	@ (8001b08 <PrintConsoleArrowLeft+0x28>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f00d fa7d 	bl	800effc <fflush>
}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	200001c0 	.word	0x200001c0

08001b0c <CONSOLE_RedirectStreams>:

// --------------------------------------------------------------------------------------------------------------------
int CONSOLE_RedirectStreams( ConsoleHandle_t h, ConsoleReadStream_t rdFunc, ConsoleWriteStream_t wrFunc,
		void* rdContext, void* wrContext )
// --------------------------------------------------------------------------------------------------------------------
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b08a      	sub	sp, #40	@ 0x28
 8001b10:	af02      	add	r7, sp, #8
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
 8001b18:	603b      	str	r3, [r7, #0]
#ifndef __NEWLIB__ // so far only newlib is supported
	return -2;
#else
	// we can only exec the real stream redirection when we are the console thread itself and the scheduler is running,
	// otherwise we have to set the request to pending state
	if ( ( taskSCHEDULER_RUNNING == xTaskGetSchedulerState() ) && ( xTaskGetCurrentTaskHandle() == h->tHandle ) )
 8001b1a:	f00a fb3b 	bl	800c194 <xTaskGetSchedulerState>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d165      	bne.n	8001bf0 <CONSOLE_RedirectStreams+0xe4>
 8001b24:	f00a fb26 	bl	800c174 <xTaskGetCurrentTaskHandle>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	69db      	ldr	r3, [r3, #28]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d15e      	bne.n	8001bf0 <CONSOLE_RedirectStreams+0xe4>
	{
		FILE* rdToClean = NULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	61fb      	str	r3, [r7, #28]
		if ( _impure_ptr->_stdin != &__sf[0])
 8001b36:	4b3c      	ldr	r3, [pc, #240]	@ (8001c28 <CONSOLE_RedirectStreams+0x11c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	4a3b      	ldr	r2, [pc, #236]	@ (8001c2c <CONSOLE_RedirectStreams+0x120>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d003      	beq.n	8001b4a <CONSOLE_RedirectStreams+0x3e>
		{
			rdToClean = _impure_ptr->_stdin;
 8001b42:	4b39      	ldr	r3, [pc, #228]	@ (8001c28 <CONSOLE_RedirectStreams+0x11c>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	61fb      	str	r3, [r7, #28]
		}

		FILE* wrToClean = NULL;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61bb      	str	r3, [r7, #24]
		if ( _impure_ptr->_stdout != &__sf[1])
 8001b4e:	4b36      	ldr	r3, [pc, #216]	@ (8001c28 <CONSOLE_RedirectStreams+0x11c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	4a36      	ldr	r2, [pc, #216]	@ (8001c30 <CONSOLE_RedirectStreams+0x124>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d003      	beq.n	8001b62 <CONSOLE_RedirectStreams+0x56>
		{
			wrToClean = _impure_ptr->_stdout;
 8001b5a:	4b33      	ldr	r3, [pc, #204]	@ (8001c28 <CONSOLE_RedirectStreams+0x11c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	61bb      	str	r3, [r7, #24]
		}

		FILE* myStdOut = &__sf[1];
 8001b62:	4b33      	ldr	r3, [pc, #204]	@ (8001c30 <CONSOLE_RedirectStreams+0x124>)
 8001b64:	617b      	str	r3, [r7, #20]
		if ( wrFunc != NULL )
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d00e      	beq.n	8001b8a <CONSOLE_RedirectStreams+0x7e>
		{
			myStdOut = fwopen(wrContext, wrFunc);
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	9300      	str	r3, [sp, #0]
 8001b70:	2300      	movs	r3, #0
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	2100      	movs	r1, #0
 8001b76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001b78:	f00d fdc8 	bl	800f70c <funopen>
 8001b7c:	6178      	str	r0, [r7, #20]
			if ( myStdOut == NULL ) return -1;
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d102      	bne.n	8001b8a <CONSOLE_RedirectStreams+0x7e>
 8001b84:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b88:	e049      	b.n	8001c1e <CONSOLE_RedirectStreams+0x112>
		}

		FILE* myStdIn = &__sf[0];
 8001b8a:	4b28      	ldr	r3, [pc, #160]	@ (8001c2c <CONSOLE_RedirectStreams+0x120>)
 8001b8c:	613b      	str	r3, [r7, #16]
		if ( rdFunc != NULL )
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d018      	beq.n	8001bc6 <CONSOLE_RedirectStreams+0xba>
		{
			myStdIn = fropen(rdContext, rdFunc);
 8001b94:	2300      	movs	r3, #0
 8001b96:	9300      	str	r3, [sp, #0]
 8001b98:	2300      	movs	r3, #0
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	68b9      	ldr	r1, [r7, #8]
 8001b9e:	6838      	ldr	r0, [r7, #0]
 8001ba0:	f00d fdb4 	bl	800f70c <funopen>
 8001ba4:	6138      	str	r0, [r7, #16]
			if ( myStdIn == NULL )
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d10c      	bne.n	8001bc6 <CONSOLE_RedirectStreams+0xba>
			{
				if ( myStdOut != NULL && myStdOut != &__sf[1]) fclose(myStdOut);
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d006      	beq.n	8001bc0 <CONSOLE_RedirectStreams+0xb4>
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	4a1e      	ldr	r2, [pc, #120]	@ (8001c30 <CONSOLE_RedirectStreams+0x124>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d002      	beq.n	8001bc0 <CONSOLE_RedirectStreams+0xb4>
 8001bba:	6978      	ldr	r0, [r7, #20]
 8001bbc:	f00d f96a 	bl	800ee94 <fclose>
				return -1;
 8001bc0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001bc4:	e02b      	b.n	8001c1e <CONSOLE_RedirectStreams+0x112>
			}
		}

		_impure_ptr->_stdin  = myStdIn;
 8001bc6:	4b18      	ldr	r3, [pc, #96]	@ (8001c28 <CONSOLE_RedirectStreams+0x11c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	605a      	str	r2, [r3, #4]
		_impure_ptr->_stdout = myStdOut;
 8001bce:	4b16      	ldr	r3, [pc, #88]	@ (8001c28 <CONSOLE_RedirectStreams+0x11c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	697a      	ldr	r2, [r7, #20]
 8001bd4:	609a      	str	r2, [r3, #8]

		if (wrToClean != NULL) fclose(wrToClean);
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d002      	beq.n	8001be2 <CONSOLE_RedirectStreams+0xd6>
 8001bdc:	69b8      	ldr	r0, [r7, #24]
 8001bde:	f00d f959 	bl	800ee94 <fclose>
		if (rdToClean != NULL) fclose(rdToClean);
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d018      	beq.n	8001c1a <CONSOLE_RedirectStreams+0x10e>
 8001be8:	69f8      	ldr	r0, [r7, #28]
 8001bea:	f00d f953 	bl	800ee94 <fclose>
	{
 8001bee:	e014      	b.n	8001c1a <CONSOLE_RedirectStreams+0x10e>
	}
	else
	{
		h->pendingRedirect = 1;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
		h->pendingRdStream = rdFunc;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	68ba      	ldr	r2, [r7, #8]
 8001bfc:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
		h->pendingWrStream = wrFunc;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	f8c3 2414 	str.w	r2, [r3, #1044]	@ 0x414
		h->pendingRdCtx    = rdContext;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	683a      	ldr	r2, [r7, #0]
 8001c0c:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
		h->pendingWrCtx    = wrContext;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001c14:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c
 8001c18:	e000      	b.n	8001c1c <CONSOLE_RedirectStreams+0x110>
	{
 8001c1a:	bf00      	nop
	}
#endif
	return 0;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3720      	adds	r7, #32
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	200001c0 	.word	0x200001c0
 8001c2c:	20000508 	.word	0x20000508
 8001c30:	20000570 	.word	0x20000570

08001c34 <ConsoleFunction>:

// --------------------------------------------------------------------------------------------------------------------
static void ConsoleFunction( void * arg )
// --------------------------------------------------------------------------------------------------------------------
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b09a      	sub	sp, #104	@ 0x68
 8001c38:	af02      	add	r7, sp, #8
 8001c3a:	6078      	str	r0, [r7, #4]
	ConsoleHandle_t h = (ConsoleHandle_t)arg;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	627b      	str	r3, [r7, #36]	@ 0x24
	if (h == NULL) goto destroy;
 8001c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	f000 84aa 	beq.w	800259c <ConsoleFunction+0x968>

	if( h->pendingRedirect != 0 )
 8001c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c4a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d01a      	beq.n	8001c88 <ConsoleFunction+0x54>
	{
		h->pendingRedirect = 0;
 8001c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c54:	2200      	movs	r2, #0
 8001c56:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
		if ( CONSOLE_RedirectStreams(h, h->pendingRdStream, h->pendingWrStream, h->pendingRdCtx, h->pendingWrCtx) )
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c5c:	f8d3 1410 	ldr.w	r1, [r3, #1040]	@ 0x410
 8001c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c62:	f8d3 2414 	ldr.w	r2, [r3, #1044]	@ 0x414
 8001c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c68:	f8d3 0418 	ldr.w	r0, [r3, #1048]	@ 0x418
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c6e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 8001c72:	9300      	str	r3, [sp, #0]
 8001c74:	4603      	mov	r3, r0
 8001c76:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001c78:	f7ff ff48 	bl	8001b0c <CONSOLE_RedirectStreams>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d002      	beq.n	8001c88 <ConsoleFunction+0x54>
		{
			printf("was not able to redirect console streams, requested by user!");
 8001c82:	4892      	ldr	r0, [pc, #584]	@ (8001ecc <ConsoleFunction+0x298>)
 8001c84:	f00d fafc 	bl	800f280 <iprintf>
#ifdef WIN32
		"\033[39m      -=   MSVC RTOS SIMULATOR ";
#else
		"\033[39m      -=   ARM RTOS ";
#endif
    printf((char*)headerASCIIArt);
 8001c88:	4891      	ldr	r0, [pc, #580]	@ (8001ed0 <ConsoleFunction+0x29c>)
 8001c8a:	f00d faf9 	bl	800f280 <iprintf>
#ifdef EXERCISE
    printf("EXERCISE: ");
    printf(xstr(EXERCISE)));
    printf("\r\n\r\n");
#else
    printf("PLAYGROUND\r\n\r\n");
 8001c8e:	4891      	ldr	r0, [pc, #580]	@ (8001ed4 <ConsoleFunction+0x2a0>)
 8001c90:	f00d fb66 	bl	800f360 <puts>
#endif

#if CONSOLE_USE_DYNAMIC_USERNAME != 0
	char* usernamePtr = getenv("USERNAME");
 8001c94:	4890      	ldr	r0, [pc, #576]	@ (8001ed8 <ConsoleFunction+0x2a4>)
 8001c96:	f00b fa89 	bl	800d1ac <getenv>
 8001c9a:	65f8      	str	r0, [r7, #92]	@ 0x5c
	if ( usernamePtr == 0 ) usernamePtr = CONSOLE_USERNAME;
 8001c9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d101      	bne.n	8001ca6 <ConsoleFunction+0x72>
 8001ca2:	4b8e      	ldr	r3, [pc, #568]	@ (8001edc <ConsoleFunction+0x2a8>)
 8001ca4:	65fb      	str	r3, [r7, #92]	@ 0x5c
#else
	char* usernamePtr = CONSOLE_USERNAME;
#endif

	char* lineBuff = NULL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	65bb      	str	r3, [r7, #88]	@ 0x58
	char* ctrlBuff = malloc(CONSOLE_LINE_SIZE + CONSOLE_SAFETY_SPACE); // make sure we have a little space behind
 8001caa:	207c      	movs	r0, #124	@ 0x7c
 8001cac:	f00b fac6 	bl	800d23c <malloc>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	623b      	str	r3, [r7, #32]
	if (ctrlBuff == NULL) goto exit;
 8001cb4:	6a3b      	ldr	r3, [r7, #32]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f000 8406 	beq.w	80024c8 <ConsoleFunction+0x894>

	lineBuff = malloc(CONSOLE_LINE_SIZE + CONSOLE_SAFETY_SPACE); // make sure we have a little space behind
 8001cbc:	207c      	movs	r0, #124	@ 0x7c
 8001cbe:	f00b fabd 	bl	800d23c <malloc>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	65bb      	str	r3, [r7, #88]	@ 0x58
	if (lineBuff == NULL) goto exit;
 8001cc6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	f000 83ff 	beq.w	80024cc <ConsoleFunction+0x898>

	memset(ctrlBuff, ctrlC0_NUL, CONSOLE_LINE_SIZE + CONSOLE_SAFETY_SPACE);
 8001cce:	227c      	movs	r2, #124	@ 0x7c
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	6a38      	ldr	r0, [r7, #32]
 8001cd4:	f00d fd2a 	bl	800f72c <memset>
	memset(lineBuff, ctrlC0_NUL, CONSOLE_LINE_SIZE + CONSOLE_SAFETY_SPACE);
 8001cd8:	227c      	movs	r2, #124	@ 0x7c
 8001cda:	2100      	movs	r1, #0
 8001cdc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001cde:	f00d fd25 	bl	800f72c <memset>
	unsigned int lbPtr = 0;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	657b      	str	r3, [r7, #84]	@ 0x54

	printf("\r\nFreeRTOS Console Up and Running\r\n");
 8001ce6:	487e      	ldr	r0, [pc, #504]	@ (8001ee0 <ConsoleFunction+0x2ac>)
 8001ce8:	f00d fb3a 	bl	800f360 <puts>
	printf("\r\n\r\n-------------------------------------------------------------------\r\n");
 8001cec:	487d      	ldr	r0, [pc, #500]	@ (8001ee4 <ConsoleFunction+0x2b0>)
 8001cee:	f00d fb37 	bl	800f360 <puts>

	h->pState.buff = ctrlBuff;
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf4:	6a3a      	ldr	r2, [r7, #32]
 8001cf6:	619a      	str	r2, [r3, #24]

	printf("\r\n%s(\033[32m\xE2\x9C\x93\033[0m) $>", usernamePtr);
 8001cf8:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8001cfa:	487b      	ldr	r0, [pc, #492]	@ (8001ee8 <ConsoleFunction+0x2b4>)
 8001cfc:	f00d fac0 	bl	800f280 <iprintf>
	int consoleStartIndex = (int)strlen(usernamePtr)+6;
 8001d00:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001d02:	f7fe fae5 	bl	80002d0 <strlen>
 8001d06:	4603      	mov	r3, r0
 8001d08:	3306      	adds	r3, #6
 8001d0a:	653b      	str	r3, [r7, #80]	@ 0x50
	fflush(stdout);
 8001d0c:	4b77      	ldr	r3, [pc, #476]	@ (8001eec <ConsoleFunction+0x2b8>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f00d f972 	bl	800effc <fflush>

	while(h->cancel == 0)
 8001d18:	e3d0      	b.n	80024bc <ConsoleFunction+0x888>
	{
		if( h->pendingRedirect != 0 )
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d1c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d01a      	beq.n	8001d5a <ConsoleFunction+0x126>
		{
			h->pendingRedirect = 0;
 8001d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d26:	2200      	movs	r2, #0
 8001d28:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
			if ( CONSOLE_RedirectStreams(h, h->pendingRdStream, h->pendingWrStream, h->pendingRdCtx, h->pendingWrCtx) )
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d2e:	f8d3 1410 	ldr.w	r1, [r3, #1040]	@ 0x410
 8001d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d34:	f8d3 2414 	ldr.w	r2, [r3, #1044]	@ 0x414
 8001d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d3a:	f8d3 0418 	ldr.w	r0, [r3, #1048]	@ 0x418
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d40:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 8001d44:	9300      	str	r3, [sp, #0]
 8001d46:	4603      	mov	r3, r0
 8001d48:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001d4a:	f7ff fedf 	bl	8001b0c <CONSOLE_RedirectStreams>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d002      	beq.n	8001d5a <ConsoleFunction+0x126>
			{
				printf("was not able to redirect console streams, requested by user!");
 8001d54:	485d      	ldr	r0, [pc, #372]	@ (8001ecc <ConsoleFunction+0x298>)
 8001d56:	f00d fa93 	bl	800f280 <iprintf>
			}
		}

		int res = EOF;
 8001d5a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d5e:	61fb      	str	r3, [r7, #28]
		while((res = getchar()) == EOF)
 8001d60:	e004      	b.n	8001d6c <ConsoleFunction+0x138>
		{
			if ( h->cancel == 1 ) goto exit;
 8001d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d64:	6a1b      	ldr	r3, [r3, #32]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	f000 83b2 	beq.w	80024d0 <ConsoleFunction+0x89c>
		while((res = getchar()) == EOF)
 8001d6c:	f00d fa80 	bl	800f270 <getchar>
 8001d70:	61f8      	str	r0, [r7, #28]
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001d78:	d0f3      	beq.n	8001d62 <ConsoleFunction+0x12e>
		}
		char myChar = res;
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	76fb      	strb	r3, [r7, #27]
		cspTYPE result = ControlSequenceParserConsume(myChar, &h->pState);
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d80:	f103 0208 	add.w	r2, r3, #8
 8001d84:	7efb      	ldrb	r3, [r7, #27]
 8001d86:	4611      	mov	r1, r2
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff f98f 	bl	80010ac <ControlSequenceParserConsume>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	76bb      	strb	r3, [r7, #26]
		if ( result == csptCHARACTER )
 8001d92:	7ebb      	ldrb	r3, [r7, #26]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	f040 80b3 	bne.w	8001f00 <ConsoleFunction+0x2cc>
		{
			putchar(myChar);
 8001d9a:	7efb      	ldrb	r3, [r7, #27]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f00d fa81 	bl	800f2a4 <putchar>
			fflush(stdout);
 8001da2:	4b52      	ldr	r3, [pc, #328]	@ (8001eec <ConsoleFunction+0x2b8>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f00d f927 	bl	800effc <fflush>

			if ( lineBuff[lbPtr + 1] != '\0' )
 8001dae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001db0:	3301      	adds	r3, #1
 8001db2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001db4:	4413      	add	r3, r2
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d061      	beq.n	8001e80 <ConsoleFunction+0x24c>
			{
				putchar(lineBuff[lbPtr]);
 8001dbc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001dbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dc0:	4413      	add	r3, r2
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f00d fa6d 	bl	800f2a4 <putchar>
				fflush(stdout);
 8001dca:	4b48      	ldr	r3, [pc, #288]	@ (8001eec <ConsoleFunction+0x2b8>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f00d f913 	bl	800effc <fflush>

				int tmpPtr = lbPtr + 1;
 8001dd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dd8:	3301      	adds	r3, #1
 8001dda:	64fb      	str	r3, [r7, #76]	@ 0x4c
				char parking = myChar;
 8001ddc:	7efb      	ldrb	r3, [r7, #27]
 8001dde:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
				char parking2 = lineBuff[lbPtr];
 8001de2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001de4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001de6:	4413      	add	r3, r2
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
				while(tmpPtr < CONSOLE_LINE_SIZE)
 8001dee:	e02a      	b.n	8001e46 <ConsoleFunction+0x212>
				{
					putchar(lineBuff[tmpPtr]);
 8001df0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001df2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001df4:	4413      	add	r3, r2
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f00d fa53 	bl	800f2a4 <putchar>
					fflush(stdout);
 8001dfe:	4b3b      	ldr	r3, [pc, #236]	@ (8001eec <ConsoleFunction+0x2b8>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f00d f8f9 	bl	800effc <fflush>


					lineBuff[tmpPtr - 1] = parking;
 8001e0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001e10:	4413      	add	r3, r2
 8001e12:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 8001e16:	701a      	strb	r2, [r3, #0]
					parking = parking2;
 8001e18:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8001e1c:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
					parking2 = lineBuff[tmpPtr];
 8001e20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e22:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001e24:	4413      	add	r3, r2
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a

					if ( lineBuff[tmpPtr] == '\0' && parking == '\0')
 8001e2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e2e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001e30:	4413      	add	r3, r2
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d103      	bne.n	8001e40 <ConsoleFunction+0x20c>
 8001e38:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d006      	beq.n	8001e4e <ConsoleFunction+0x21a>
						break;

					tmpPtr += 1;
 8001e40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e42:	3301      	adds	r3, #1
 8001e44:	64fb      	str	r3, [r7, #76]	@ 0x4c
				while(tmpPtr < CONSOLE_LINE_SIZE)
 8001e46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e48:	2b77      	cmp	r3, #119	@ 0x77
 8001e4a:	ddd1      	ble.n	8001df0 <ConsoleFunction+0x1bc>
 8001e4c:	e000      	b.n	8001e50 <ConsoleFunction+0x21c>
						break;
 8001e4e:	bf00      	nop
				}

				printf("\033[%dD", CONSOLE_LINE_SIZE + consoleStartIndex);
 8001e50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001e52:	3378      	adds	r3, #120	@ 0x78
 8001e54:	4619      	mov	r1, r3
 8001e56:	4826      	ldr	r0, [pc, #152]	@ (8001ef0 <ConsoleFunction+0x2bc>)
 8001e58:	f00d fa12 	bl	800f280 <iprintf>
				printf("\033[%dC", consoleStartIndex + lbPtr + 1);
 8001e5c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001e5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e60:	4413      	add	r3, r2
 8001e62:	3301      	adds	r3, #1
 8001e64:	4619      	mov	r1, r3
 8001e66:	4823      	ldr	r0, [pc, #140]	@ (8001ef4 <ConsoleFunction+0x2c0>)
 8001e68:	f00d fa0a 	bl	800f280 <iprintf>
				lbPtr += 1;
 8001e6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e6e:	3301      	adds	r3, #1
 8001e70:	657b      	str	r3, [r7, #84]	@ 0x54
				fflush(stdout);
 8001e72:	4b1e      	ldr	r3, [pc, #120]	@ (8001eec <ConsoleFunction+0x2b8>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f00d f8bf 	bl	800effc <fflush>
 8001e7e:	e007      	b.n	8001e90 <ConsoleFunction+0x25c>
			}
			else
			{
				lineBuff[lbPtr] = myChar;
 8001e80:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001e82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e84:	4413      	add	r3, r2
 8001e86:	7efa      	ldrb	r2, [r7, #27]
 8001e88:	701a      	strb	r2, [r3, #0]
				lbPtr++;
 8001e8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	657b      	str	r3, [r7, #84]	@ 0x54
			}

			if ( lbPtr > CONSOLE_LINE_SIZE )
 8001e90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e92:	2b78      	cmp	r3, #120	@ 0x78
 8001e94:	f240 8312 	bls.w	80024bc <ConsoleFunction+0x888>
			{
				printf("\r\n Buffer Overrun! Clearing input...\r\n");
 8001e98:	4817      	ldr	r0, [pc, #92]	@ (8001ef8 <ConsoleFunction+0x2c4>)
 8001e9a:	f00d fa61 	bl	800f360 <puts>
				// print new console line and decode the result
				printf("\r\n%s(\033[31m\xE2\x98\x93\033[0m) $>", usernamePtr);
 8001e9e:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8001ea0:	4816      	ldr	r0, [pc, #88]	@ (8001efc <ConsoleFunction+0x2c8>)
 8001ea2:	f00d f9ed 	bl	800f280 <iprintf>
				fflush(stdout);
 8001ea6:	4b11      	ldr	r3, [pc, #68]	@ (8001eec <ConsoleFunction+0x2b8>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f00d f8a5 	bl	800effc <fflush>

				// clear the buffer and restore the pointer
				do
				{
					lineBuff[lbPtr] = ctrlC0_NUL;
 8001eb2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001eb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eb6:	4413      	add	r3, r2
 8001eb8:	2200      	movs	r2, #0
 8001eba:	701a      	strb	r2, [r3, #0]
				    if ( lbPtr == 0 ) break;
 8001ebc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f000 82f7 	beq.w	80024b2 <ConsoleFunction+0x87e>
				    else lbPtr -= 1;
 8001ec4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	657b      	str	r3, [r7, #84]	@ 0x54
					lineBuff[lbPtr] = ctrlC0_NUL;
 8001eca:	e7f2      	b.n	8001eb2 <ConsoleFunction+0x27e>
 8001ecc:	080122b0 	.word	0x080122b0
 8001ed0:	08013864 	.word	0x08013864
 8001ed4:	080122f0 	.word	0x080122f0
 8001ed8:	08012300 	.word	0x08012300
 8001edc:	0801230c 	.word	0x0801230c
 8001ee0:	08012324 	.word	0x08012324
 8001ee4:	08012348 	.word	0x08012348
 8001ee8:	08012394 	.word	0x08012394
 8001eec:	200001c0 	.word	0x200001c0
 8001ef0:	080123ac 	.word	0x080123ac
 8001ef4:	080123b4 	.word	0x080123b4
 8001ef8:	080123bc 	.word	0x080123bc
 8001efc:	080123e4 	.word	0x080123e4
				} while (1);
			}
		}
		else if ( result == csptCONTROL )
 8001f00:	7ebb      	ldrb	r3, [r7, #26]
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	f040 82da 	bne.w	80024bc <ConsoleFunction+0x888>
		{
			switch (h->pState.type)
 8001f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f0a:	895b      	ldrh	r3, [r3, #10]
 8001f0c:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8001f10:	f000 8113 	beq.w	800213a <ConsoleFunction+0x506>
 8001f14:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8001f18:	f300 82a5 	bgt.w	8002466 <ConsoleFunction+0x832>
 8001f1c:	2b7f      	cmp	r3, #127	@ 0x7f
 8001f1e:	f000 8093 	beq.w	8002048 <ConsoleFunction+0x414>
 8001f22:	2b7f      	cmp	r3, #127	@ 0x7f
 8001f24:	f300 829f 	bgt.w	8002466 <ConsoleFunction+0x832>
 8001f28:	2b0d      	cmp	r3, #13
 8001f2a:	d008      	beq.n	8001f3e <ConsoleFunction+0x30a>
 8001f2c:	2b0d      	cmp	r3, #13
 8001f2e:	f300 829a 	bgt.w	8002466 <ConsoleFunction+0x832>
 8001f32:	2b09      	cmp	r3, #9
 8001f34:	f000 80e2 	beq.w	80020fc <ConsoleFunction+0x4c8>
 8001f38:	2b0a      	cmp	r3, #10
 8001f3a:	f040 8294 	bne.w	8002466 <ConsoleFunction+0x832>
			{
				// implicit fall through
			case ctrlC0_LF:
			case ctrlC0_CR:
			{
				putchar(h->pState.type);
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f40:	895b      	ldrh	r3, [r3, #10]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f00d f9ae 	bl	800f2a4 <putchar>
				fflush(stdout);
 8001f48:	4ba8      	ldr	r3, [pc, #672]	@ (80021ec <ConsoleFunction+0x5b8>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f00d f854 	bl	800effc <fflush>
					putchar(ctrlC0_CR);
					fflush(stdout);
				}

				// implicit LF on every CR?
				if (1 && h->pState.type == ctrlC0_CR)
 8001f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f56:	895b      	ldrh	r3, [r3, #10]
 8001f58:	2b0d      	cmp	r3, #13
 8001f5a:	d108      	bne.n	8001f6e <ConsoleFunction+0x33a>
				{
					putchar(ctrlC0_LF);
 8001f5c:	200a      	movs	r0, #10
 8001f5e:	f00d f9a1 	bl	800f2a4 <putchar>
					fflush(stdout);
 8001f62:	4ba2      	ldr	r3, [pc, #648]	@ (80021ec <ConsoleFunction+0x5b8>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f00d f847 	bl	800effc <fflush>
				}

				// now adapt the line history accordingly
				memcpy(h->history.lines[h->history.lineHead], lineBuff, CONSOLE_LINE_SIZE);
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f70:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8001f74:	4613      	mov	r3, r2
 8001f76:	015b      	lsls	r3, r3, #5
 8001f78:	1a9b      	subs	r3, r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	3320      	adds	r3, #32
 8001f7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f80:	4413      	add	r3, r2
 8001f82:	3304      	adds	r3, #4
 8001f84:	2278      	movs	r2, #120	@ 0x78
 8001f86:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f00d fd35 	bl	800f9f8 <memcpy>
				h->history.lineHead = (h->history.lineHead + 1) % CONSOLE_LINE_HISTORY;
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f90:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8001f94:	3301      	adds	r3, #1
 8001f96:	425a      	negs	r2, r3
 8001f98:	f003 0307 	and.w	r3, r3, #7
 8001f9c:	f002 0207 	and.w	r2, r2, #7
 8001fa0:	bf58      	it	pl
 8001fa2:	4253      	negpl	r3, r2
 8001fa4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fa6:	f8c2 3404 	str.w	r3, [r2, #1028]	@ 0x404
				h->history.linePtr = h->history.lineHead;
 8001faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fac:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb2:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

				// parse and execute the command and make sure the output streams
				// are flushed before doing anything else with the result
				int result = TransformAndProcessTheCommand(lineBuff, CONSOLE_LINE_SIZE, &h->cState);
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb8:	461a      	mov	r2, r3
 8001fba:	2178      	movs	r1, #120	@ 0x78
 8001fbc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001fbe:	f7ff fb89 	bl	80016d4 <TransformAndProcessTheCommand>
 8001fc2:	60f8      	str	r0, [r7, #12]
				fflush(stdout);
 8001fc4:	4b89      	ldr	r3, [pc, #548]	@ (80021ec <ConsoleFunction+0x5b8>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f00d f816 	bl	800effc <fflush>
				fflush(stderr);
 8001fd0:	4b86      	ldr	r3, [pc, #536]	@ (80021ec <ConsoleFunction+0x5b8>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f00d f810 	bl	800effc <fflush>

#if CONSOLE_USE_DYNAMIC_USERNAME != 0
				// now check if there is a new user name (which is only possible by setenv command
				// which is executed after process command call above...
				usernamePtr = getenv("USERNAME");
 8001fdc:	4884      	ldr	r0, [pc, #528]	@ (80021f0 <ConsoleFunction+0x5bc>)
 8001fde:	f00b f8e5 	bl	800d1ac <getenv>
 8001fe2:	65f8      	str	r0, [r7, #92]	@ 0x5c
				if ( usernamePtr == 0 ) usernamePtr = CONSOLE_USERNAME;
 8001fe4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d101      	bne.n	8001fee <ConsoleFunction+0x3ba>
 8001fea:	4b82      	ldr	r3, [pc, #520]	@ (80021f4 <ConsoleFunction+0x5c0>)
 8001fec:	65fb      	str	r3, [r7, #92]	@ 0x5c
				consoleStartIndex = (int)strlen(usernamePtr)+6;
 8001fee:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001ff0:	f7fe f96e 	bl	80002d0 <strlen>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	3306      	adds	r3, #6
 8001ff8:	653b      	str	r3, [r7, #80]	@ 0x50
#endif
				// print new console line and decode the result
				printf("\r\n%s(", usernamePtr);
 8001ffa:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8001ffc:	487e      	ldr	r0, [pc, #504]	@ (80021f8 <ConsoleFunction+0x5c4>)
 8001ffe:	f00d f93f 	bl	800f280 <iprintf>
				if (result == 0)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d103      	bne.n	8002010 <ConsoleFunction+0x3dc>
				{
					printf("\033[32m\xE2\x9C\x93\033[0m");
 8002008:	487c      	ldr	r0, [pc, #496]	@ (80021fc <ConsoleFunction+0x5c8>)
 800200a:	f00d f939 	bl	800f280 <iprintf>
 800200e:	e002      	b.n	8002016 <ConsoleFunction+0x3e2>
				}
				else
				{
					printf("\033[31m\xE2\x98\x93\033[0m");
 8002010:	487b      	ldr	r0, [pc, #492]	@ (8002200 <ConsoleFunction+0x5cc>)
 8002012:	f00d f935 	bl	800f280 <iprintf>
				}
				printf(") $>");
 8002016:	487b      	ldr	r0, [pc, #492]	@ (8002204 <ConsoleFunction+0x5d0>)
 8002018:	f00d f932 	bl	800f280 <iprintf>
				fflush(stdout);
 800201c:	4b73      	ldr	r3, [pc, #460]	@ (80021ec <ConsoleFunction+0x5b8>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	4618      	mov	r0, r3
 8002024:	f00c ffea 	bl	800effc <fflush>

				// clear the buffer completely because an alias could change
				// the buffer content way more than the user has entered and so
				// we can not only clear lbPtr--!! as we have a safety space we
				// can set CONSOLE_LINE_SIZE as matching pointer value;
				lbPtr = CONSOLE_LINE_SIZE;
 8002028:	2378      	movs	r3, #120	@ 0x78
 800202a:	657b      	str	r3, [r7, #84]	@ 0x54
				do
				{
					lineBuff[lbPtr] = ctrlC0_NUL;
 800202c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800202e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002030:	4413      	add	r3, r2
 8002032:	2200      	movs	r2, #0
 8002034:	701a      	strb	r2, [r3, #0]
					if (lbPtr == 0) break;
 8002036:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002038:	2b00      	cmp	r3, #0
 800203a:	d003      	beq.n	8002044 <ConsoleFunction+0x410>
					else lbPtr -= 1;
 800203c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800203e:	3b01      	subs	r3, #1
 8002040:	657b      	str	r3, [r7, #84]	@ 0x54
					lineBuff[lbPtr] = ctrlC0_NUL;
 8002042:	e7f3      	b.n	800202c <ConsoleFunction+0x3f8>
					if (lbPtr == 0) break;
 8002044:	bf00      	nop
				} while (1);

				break;
 8002046:	e239      	b.n	80024bc <ConsoleFunction+0x888>
			}
			case ctrlC0_DEL:
			{
				if (lbPtr > 0)
 8002048:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800204a:	2b00      	cmp	r3, #0
 800204c:	f000 8233 	beq.w	80024b6 <ConsoleFunction+0x882>
				{
					int tmpPtr = lbPtr;
 8002050:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002052:	647b      	str	r3, [r7, #68]	@ 0x44
					lbPtr -= 1;
 8002054:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002056:	3b01      	subs	r3, #1
 8002058:	657b      	str	r3, [r7, #84]	@ 0x54
					lineBuff[lbPtr] = ctrlC0_NUL;
 800205a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800205c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800205e:	4413      	add	r3, r2
 8002060:	2200      	movs	r2, #0
 8002062:	701a      	strb	r2, [r3, #0]
					putchar(ctrlC0_DEL);
 8002064:	207f      	movs	r0, #127	@ 0x7f
 8002066:	f00d f91d 	bl	800f2a4 <putchar>
					fflush(stdout);
 800206a:	4b60      	ldr	r3, [pc, #384]	@ (80021ec <ConsoleFunction+0x5b8>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	4618      	mov	r0, r3
 8002072:	f00c ffc3 	bl	800effc <fflush>
					while (lineBuff[tmpPtr] != ctrlC0_NUL)
 8002076:	e01c      	b.n	80020b2 <ConsoleFunction+0x47e>
					{
						lineBuff[tmpPtr - 1] = lineBuff[tmpPtr];
 8002078:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800207a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800207c:	441a      	add	r2, r3
 800207e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002080:	3b01      	subs	r3, #1
 8002082:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002084:	440b      	add	r3, r1
 8002086:	7812      	ldrb	r2, [r2, #0]
 8002088:	701a      	strb	r2, [r3, #0]
						putchar(lineBuff[tmpPtr - 1]);
 800208a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800208c:	3b01      	subs	r3, #1
 800208e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002090:	4413      	add	r3, r2
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	4618      	mov	r0, r3
 8002096:	f00d f905 	bl	800f2a4 <putchar>
						fflush(stdout);
 800209a:	4b54      	ldr	r3, [pc, #336]	@ (80021ec <ConsoleFunction+0x5b8>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f00c ffab 	bl	800effc <fflush>
						tmpPtr += 1;
 80020a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020a8:	3301      	adds	r3, #1
 80020aa:	647b      	str	r3, [r7, #68]	@ 0x44
						if (tmpPtr >= CONSOLE_LINE_SIZE) break;
 80020ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020ae:	2b77      	cmp	r3, #119	@ 0x77
 80020b0:	dc06      	bgt.n	80020c0 <ConsoleFunction+0x48c>
					while (lineBuff[tmpPtr] != ctrlC0_NUL)
 80020b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020b4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80020b6:	4413      	add	r3, r2
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1dc      	bne.n	8002078 <ConsoleFunction+0x444>
 80020be:	e000      	b.n	80020c2 <ConsoleFunction+0x48e>
						if (tmpPtr >= CONSOLE_LINE_SIZE) break;
 80020c0:	bf00      	nop
					}
					lineBuff[tmpPtr - 1] = ctrlC0_NUL;
 80020c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020c4:	3b01      	subs	r3, #1
 80020c6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80020c8:	4413      	add	r3, r2
 80020ca:	2200      	movs	r2, #0
 80020cc:	701a      	strb	r2, [r3, #0]
					putchar(' ');
 80020ce:	2020      	movs	r0, #32
 80020d0:	f00d f8e8 	bl	800f2a4 <putchar>
					fflush(stdout);
 80020d4:	4b45      	ldr	r3, [pc, #276]	@ (80021ec <ConsoleFunction+0x5b8>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	4618      	mov	r0, r3
 80020dc:	f00c ff8e 	bl	800effc <fflush>

					int moveBack = tmpPtr - lbPtr;
 80020e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80020e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	643b      	str	r3, [r7, #64]	@ 0x40
					for (; moveBack > 0; moveBack--)
 80020e8:	e004      	b.n	80020f4 <ConsoleFunction+0x4c0>
						PrintConsoleArrowLeft();
 80020ea:	f7ff fcf9 	bl	8001ae0 <PrintConsoleArrowLeft>
					for (; moveBack > 0; moveBack--)
 80020ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020f0:	3b01      	subs	r3, #1
 80020f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80020f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	dcf7      	bgt.n	80020ea <ConsoleFunction+0x4b6>
				}
				break;
 80020fa:	e1dc      	b.n	80024b6 <ConsoleFunction+0x882>
			}
			case ctrlC0_TAB:
			{
				int nums = 4 - (lbPtr % 4);
 80020fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020fe:	f003 0303 	and.w	r3, r3, #3
 8002102:	f1c3 0304 	rsb	r3, r3, #4
 8002106:	63fb      	str	r3, [r7, #60]	@ 0x3c
				for (; nums > 0; nums--)
 8002108:	e013      	b.n	8002132 <ConsoleFunction+0x4fe>
				{
					lineBuff[lbPtr] = ' ';
 800210a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800210c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800210e:	4413      	add	r3, r2
 8002110:	2220      	movs	r2, #32
 8002112:	701a      	strb	r2, [r3, #0]
					lbPtr += 1;
 8002114:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002116:	3301      	adds	r3, #1
 8002118:	657b      	str	r3, [r7, #84]	@ 0x54
					putchar(' ');
 800211a:	2020      	movs	r0, #32
 800211c:	f00d f8c2 	bl	800f2a4 <putchar>
					fflush(stdout);
 8002120:	4b32      	ldr	r3, [pc, #200]	@ (80021ec <ConsoleFunction+0x5b8>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	4618      	mov	r0, r3
 8002128:	f00c ff68 	bl	800effc <fflush>
				for (; nums > 0; nums--)
 800212c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800212e:	3b01      	subs	r3, #1
 8002130:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002132:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002134:	2b00      	cmp	r3, #0
 8002136:	dce8      	bgt.n	800210a <ConsoleFunction+0x4d6>
				}
				break;
 8002138:	e1c0      	b.n	80024bc <ConsoleFunction+0x888>
			}

			case ctrlC1_CSI:
			{
				if (ConsoleIsArrowLeft(&h->pState))
 800213a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800213c:	3308      	adds	r3, #8
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff fc3c 	bl	80019bc <ConsoleIsArrowLeft>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d00c      	beq.n	8002164 <ConsoleFunction+0x530>
				{
					if (lbPtr > 0)
 800214a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800214c:	2b00      	cmp	r3, #0
 800214e:	f000 81b4 	beq.w	80024ba <ConsoleFunction+0x886>
					{
						lbPtr -= 1;
 8002152:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002154:	3b01      	subs	r3, #1
 8002156:	657b      	str	r3, [r7, #84]	@ 0x54
						PrintConsoleControl(&h->pState);
 8002158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800215a:	3308      	adds	r3, #8
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff fc01 	bl	8001964 <PrintConsoleControl>
						}
						fflush(stdout);
					}
				}
				else goto unimp;
				break;
 8002162:	e1aa      	b.n	80024ba <ConsoleFunction+0x886>
				else if (ConsoleIsArrowRight(&h->pState))
 8002164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002166:	3308      	adds	r3, #8
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff fc43 	bl	80019f4 <ConsoleIsArrowRight>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d021      	beq.n	80021b8 <ConsoleFunction+0x584>
					if (lbPtr < (CONSOLE_LINE_SIZE - 1))
 8002174:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002176:	2b76      	cmp	r3, #118	@ 0x76
 8002178:	f200 819f 	bhi.w	80024ba <ConsoleFunction+0x886>
						if (lineBuff[lbPtr] == ctrlC0_NUL)
 800217c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800217e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002180:	4413      	add	r3, r2
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d10e      	bne.n	80021a6 <ConsoleFunction+0x572>
							lineBuff[lbPtr] = ' ';
 8002188:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800218a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800218c:	4413      	add	r3, r2
 800218e:	2220      	movs	r2, #32
 8002190:	701a      	strb	r2, [r3, #0]
							putchar(' ');
 8002192:	2020      	movs	r0, #32
 8002194:	f00d f886 	bl	800f2a4 <putchar>
							fflush(stdout);
 8002198:	4b14      	ldr	r3, [pc, #80]	@ (80021ec <ConsoleFunction+0x5b8>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	4618      	mov	r0, r3
 80021a0:	f00c ff2c 	bl	800effc <fflush>
 80021a4:	e004      	b.n	80021b0 <ConsoleFunction+0x57c>
							PrintConsoleControl(&h->pState);
 80021a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a8:	3308      	adds	r3, #8
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7ff fbda 	bl	8001964 <PrintConsoleControl>
						lbPtr += 1;
 80021b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021b2:	3301      	adds	r3, #1
 80021b4:	657b      	str	r3, [r7, #84]	@ 0x54
				break;
 80021b6:	e180      	b.n	80024ba <ConsoleFunction+0x886>
				else if (ConsoleIsEntf(&h->pState))
 80021b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ba:	3308      	adds	r3, #8
 80021bc:	4618      	mov	r0, r3
 80021be:	f7ff fc6d 	bl	8001a9c <ConsoleIsEntf>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d061      	beq.n	800228c <ConsoleFunction+0x658>
					if (lbPtr < (CONSOLE_LINE_SIZE - 1))
 80021c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021ca:	2b76      	cmp	r3, #118	@ 0x76
 80021cc:	f200 8175 	bhi.w	80024ba <ConsoleFunction+0x886>
						int tmpPtr = lbPtr + 1;
 80021d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021d2:	3301      	adds	r3, #1
 80021d4:	63bb      	str	r3, [r7, #56]	@ 0x38
						lineBuff[lbPtr] = ' ';
 80021d6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80021d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021da:	4413      	add	r3, r2
 80021dc:	2220      	movs	r2, #32
 80021de:	701a      	strb	r2, [r3, #0]
						PrintConsoleControl(&h->pState);
 80021e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e2:	3308      	adds	r3, #8
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff fbbd 	bl	8001964 <PrintConsoleControl>
						while (lineBuff[tmpPtr] != ctrlC0_NUL)
 80021ea:	e02a      	b.n	8002242 <ConsoleFunction+0x60e>
 80021ec:	200001c0 	.word	0x200001c0
 80021f0:	08012300 	.word	0x08012300
 80021f4:	0801230c 	.word	0x0801230c
 80021f8:	080123fc 	.word	0x080123fc
 80021fc:	08012404 	.word	0x08012404
 8002200:	08012414 	.word	0x08012414
 8002204:	08012424 	.word	0x08012424
							lineBuff[tmpPtr - 1] = lineBuff[tmpPtr];
 8002208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800220a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800220c:	441a      	add	r2, r3
 800220e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002210:	3b01      	subs	r3, #1
 8002212:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002214:	440b      	add	r3, r1
 8002216:	7812      	ldrb	r2, [r2, #0]
 8002218:	701a      	strb	r2, [r3, #0]
							putchar(lineBuff[tmpPtr - 1]);
 800221a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800221c:	3b01      	subs	r3, #1
 800221e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002220:	4413      	add	r3, r2
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	4618      	mov	r0, r3
 8002226:	f00d f83d 	bl	800f2a4 <putchar>
							fflush(stdout);
 800222a:	4baa      	ldr	r3, [pc, #680]	@ (80024d4 <ConsoleFunction+0x8a0>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	4618      	mov	r0, r3
 8002232:	f00c fee3 	bl	800effc <fflush>
							tmpPtr += 1;
 8002236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002238:	3301      	adds	r3, #1
 800223a:	63bb      	str	r3, [r7, #56]	@ 0x38
							if (tmpPtr >= CONSOLE_LINE_SIZE) break;
 800223c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800223e:	2b77      	cmp	r3, #119	@ 0x77
 8002240:	dc06      	bgt.n	8002250 <ConsoleFunction+0x61c>
						while (lineBuff[tmpPtr] != ctrlC0_NUL)
 8002242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002244:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002246:	4413      	add	r3, r2
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1dc      	bne.n	8002208 <ConsoleFunction+0x5d4>
 800224e:	e000      	b.n	8002252 <ConsoleFunction+0x61e>
							if (tmpPtr >= CONSOLE_LINE_SIZE) break;
 8002250:	bf00      	nop
						lineBuff[tmpPtr - 1] = ctrlC0_NUL;
 8002252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002254:	3b01      	subs	r3, #1
 8002256:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002258:	4413      	add	r3, r2
 800225a:	2200      	movs	r2, #0
 800225c:	701a      	strb	r2, [r3, #0]
						putchar(' ');
 800225e:	2020      	movs	r0, #32
 8002260:	f00d f820 	bl	800f2a4 <putchar>
						fflush(stdout);
 8002264:	4b9b      	ldr	r3, [pc, #620]	@ (80024d4 <ConsoleFunction+0x8a0>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	4618      	mov	r0, r3
 800226c:	f00c fec6 	bl	800effc <fflush>
						int moveBack = tmpPtr - lbPtr;
 8002270:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002272:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	637b      	str	r3, [r7, #52]	@ 0x34
						for (; moveBack > 0; moveBack--)
 8002278:	e004      	b.n	8002284 <ConsoleFunction+0x650>
							PrintConsoleArrowLeft();
 800227a:	f7ff fc31 	bl	8001ae0 <PrintConsoleArrowLeft>
						for (; moveBack > 0; moveBack--)
 800227e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002280:	3b01      	subs	r3, #1
 8002282:	637b      	str	r3, [r7, #52]	@ 0x34
 8002284:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002286:	2b00      	cmp	r3, #0
 8002288:	dcf7      	bgt.n	800227a <ConsoleFunction+0x646>
				break;
 800228a:	e116      	b.n	80024ba <ConsoleFunction+0x886>
				else if (ConsoleIsArrowUp(&h->pState) || ConsoleIsArrowDown(&h->pState))
 800228c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800228e:	3308      	adds	r3, #8
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff fbcb 	bl	8001a2c <ConsoleIsArrowUp>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d108      	bne.n	80022ae <ConsoleFunction+0x67a>
 800229c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800229e:	3308      	adds	r3, #8
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff fbdf 	bl	8001a64 <ConsoleIsArrowDown>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	f000 80db 	beq.w	8002464 <ConsoleFunction+0x830>
					if (ConsoleIsArrowUp(&h->pState))
 80022ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b0:	3308      	adds	r3, #8
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7ff fbba 	bl	8001a2c <ConsoleIsArrowUp>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d010      	beq.n	80022e0 <ConsoleFunction+0x6ac>
						h->history.linePtr -= 1;
 80022be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80022c4:	1e5a      	subs	r2, r3, #1
 80022c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c8:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
						if (h->history.linePtr < 0) h->history.linePtr = CONSOLE_LINE_HISTORY - 1;
 80022cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ce:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	da14      	bge.n	8002300 <ConsoleFunction+0x6cc>
 80022d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d8:	2207      	movs	r2, #7
 80022da:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
 80022de:	e00f      	b.n	8002300 <ConsoleFunction+0x6cc>
						h->history.linePtr += 1;
 80022e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e2:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80022e6:	1c5a      	adds	r2, r3, #1
 80022e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ea:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
						if (h->history.linePtr >= CONSOLE_LINE_HISTORY) h->history.linePtr = 0;
 80022ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80022f4:	2b07      	cmp	r3, #7
 80022f6:	dd03      	ble.n	8002300 <ConsoleFunction+0x6cc>
 80022f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022fa:	2200      	movs	r2, #0
 80022fc:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
					if (h->history.linePtr == h->history.lineHead)
 8002300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002302:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8002306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002308:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800230c:	429a      	cmp	r2, r3
 800230e:	d134      	bne.n	800237a <ConsoleFunction+0x746>
						int inputLength = (int)strnlen(lineBuff, CONSOLE_LINE_SIZE);
 8002310:	2178      	movs	r1, #120	@ 0x78
 8002312:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002314:	f00d fa31 	bl	800f77a <strnlen>
 8002318:	4603      	mov	r3, r0
 800231a:	613b      	str	r3, [r7, #16]
						printf("\033[%dD", CONSOLE_LINE_SIZE + consoleStartIndex);
 800231c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800231e:	3378      	adds	r3, #120	@ 0x78
 8002320:	4619      	mov	r1, r3
 8002322:	486d      	ldr	r0, [pc, #436]	@ (80024d8 <ConsoleFunction+0x8a4>)
 8002324:	f00c ffac 	bl	800f280 <iprintf>
						printf("\033[%dC", consoleStartIndex);
 8002328:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800232a:	486c      	ldr	r0, [pc, #432]	@ (80024dc <ConsoleFunction+0x8a8>)
 800232c:	f00c ffa8 	bl	800f280 <iprintf>
						for (int i = 0; i < inputLength; i++)
 8002330:	2300      	movs	r3, #0
 8002332:	633b      	str	r3, [r7, #48]	@ 0x30
 8002334:	e005      	b.n	8002342 <ConsoleFunction+0x70e>
							putchar(' ');
 8002336:	2020      	movs	r0, #32
 8002338:	f00c ffb4 	bl	800f2a4 <putchar>
						for (int i = 0; i < inputLength; i++)
 800233c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800233e:	3301      	adds	r3, #1
 8002340:	633b      	str	r3, [r7, #48]	@ 0x30
 8002342:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	429a      	cmp	r2, r3
 8002348:	dbf5      	blt.n	8002336 <ConsoleFunction+0x702>
						memset(lineBuff, 0, CONSOLE_LINE_SIZE);
 800234a:	2278      	movs	r2, #120	@ 0x78
 800234c:	2100      	movs	r1, #0
 800234e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002350:	f00d f9ec 	bl	800f72c <memset>
						lbPtr = 0;
 8002354:	2300      	movs	r3, #0
 8002356:	657b      	str	r3, [r7, #84]	@ 0x54
						printf("\033[%dD", CONSOLE_LINE_SIZE + consoleStartIndex);
 8002358:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800235a:	3378      	adds	r3, #120	@ 0x78
 800235c:	4619      	mov	r1, r3
 800235e:	485e      	ldr	r0, [pc, #376]	@ (80024d8 <ConsoleFunction+0x8a4>)
 8002360:	f00c ff8e 	bl	800f280 <iprintf>
						printf("\033[%dC", consoleStartIndex);
 8002364:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8002366:	485d      	ldr	r0, [pc, #372]	@ (80024dc <ConsoleFunction+0x8a8>)
 8002368:	f00c ff8a 	bl	800f280 <iprintf>
						fflush(stdout);
 800236c:	4b59      	ldr	r3, [pc, #356]	@ (80024d4 <ConsoleFunction+0x8a0>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	4618      	mov	r0, r3
 8002374:	f00c fe42 	bl	800effc <fflush>
					if (h->history.linePtr == h->history.lineHead)
 8002378:	e072      	b.n	8002460 <ConsoleFunction+0x82c>
						int inputLength = (int)strnlen(lineBuff, CONSOLE_LINE_SIZE);
 800237a:	2178      	movs	r1, #120	@ 0x78
 800237c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800237e:	f00d f9fc 	bl	800f77a <strnlen>
 8002382:	4603      	mov	r3, r0
 8002384:	617b      	str	r3, [r7, #20]
						printf("\033[%dD", CONSOLE_LINE_SIZE + consoleStartIndex);
 8002386:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002388:	3378      	adds	r3, #120	@ 0x78
 800238a:	4619      	mov	r1, r3
 800238c:	4852      	ldr	r0, [pc, #328]	@ (80024d8 <ConsoleFunction+0x8a4>)
 800238e:	f00c ff77 	bl	800f280 <iprintf>
						printf("\033[%dC", consoleStartIndex);
 8002392:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8002394:	4851      	ldr	r0, [pc, #324]	@ (80024dc <ConsoleFunction+0x8a8>)
 8002396:	f00c ff73 	bl	800f280 <iprintf>
						int i = 0;
 800239a:	2300      	movs	r3, #0
 800239c:	62fb      	str	r3, [r7, #44]	@ 0x2c
						for (; i < inputLength; i++)
 800239e:	e005      	b.n	80023ac <ConsoleFunction+0x778>
							putchar(' ');
 80023a0:	2020      	movs	r0, #32
 80023a2:	f00c ff7f 	bl	800f2a4 <putchar>
						for (; i < inputLength; i++)
 80023a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023a8:	3301      	adds	r3, #1
 80023aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	dbf5      	blt.n	80023a0 <ConsoleFunction+0x76c>
						printf("\033[%dD", CONSOLE_LINE_SIZE + consoleStartIndex);
 80023b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80023b6:	3378      	adds	r3, #120	@ 0x78
 80023b8:	4619      	mov	r1, r3
 80023ba:	4847      	ldr	r0, [pc, #284]	@ (80024d8 <ConsoleFunction+0x8a4>)
 80023bc:	f00c ff60 	bl	800f280 <iprintf>
						printf("\033[%dC", consoleStartIndex);
 80023c0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80023c2:	4846      	ldr	r0, [pc, #280]	@ (80024dc <ConsoleFunction+0x8a8>)
 80023c4:	f00c ff5c 	bl	800f280 <iprintf>
						fflush(stdout);
 80023c8:	4b42      	ldr	r3, [pc, #264]	@ (80024d4 <ConsoleFunction+0x8a0>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f00c fe14 	bl	800effc <fflush>
						i = 0;
 80023d4:	2300      	movs	r3, #0
 80023d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
						memset(lineBuff, 0, CONSOLE_LINE_SIZE);
 80023d8:	2278      	movs	r2, #120	@ 0x78
 80023da:	2100      	movs	r1, #0
 80023dc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80023de:	f00d f9a5 	bl	800f72c <memset>
						lbPtr = 0;
 80023e2:	2300      	movs	r3, #0
 80023e4:	657b      	str	r3, [r7, #84]	@ 0x54
						while (h->history.lines[h->history.linePtr][i] != '\0')
 80023e6:	e026      	b.n	8002436 <ConsoleFunction+0x802>
							putchar(h->history.lines[h->history.linePtr][i]);
 80023e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ea:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80023ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80023f0:	4613      	mov	r3, r2
 80023f2:	015b      	lsls	r3, r3, #5
 80023f4:	1a9b      	subs	r3, r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	18ca      	adds	r2, r1, r3
 80023fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023fc:	4413      	add	r3, r2
 80023fe:	3324      	adds	r3, #36	@ 0x24
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	4618      	mov	r0, r3
 8002404:	f00c ff4e 	bl	800f2a4 <putchar>
							lineBuff[lbPtr] = h->history.lines[h->history.linePtr][i];
 8002408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800240a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800240e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002410:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002412:	4419      	add	r1, r3
 8002414:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002416:	4613      	mov	r3, r2
 8002418:	015b      	lsls	r3, r3, #5
 800241a:	1a9b      	subs	r3, r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	18c2      	adds	r2, r0, r3
 8002420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002422:	4413      	add	r3, r2
 8002424:	3324      	adds	r3, #36	@ 0x24
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	700b      	strb	r3, [r1, #0]
							lbPtr++;
 800242a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800242c:	3301      	adds	r3, #1
 800242e:	657b      	str	r3, [r7, #84]	@ 0x54
							i++;
 8002430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002432:	3301      	adds	r3, #1
 8002434:	62fb      	str	r3, [r7, #44]	@ 0x2c
						while (h->history.lines[h->history.linePtr][i] != '\0')
 8002436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002438:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800243c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800243e:	4613      	mov	r3, r2
 8002440:	015b      	lsls	r3, r3, #5
 8002442:	1a9b      	subs	r3, r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	18ca      	adds	r2, r1, r3
 8002448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800244a:	4413      	add	r3, r2
 800244c:	3324      	adds	r3, #36	@ 0x24
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d1c9      	bne.n	80023e8 <ConsoleFunction+0x7b4>
						fflush(stdout);
 8002454:	4b1f      	ldr	r3, [pc, #124]	@ (80024d4 <ConsoleFunction+0x8a0>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	4618      	mov	r0, r3
 800245c:	f00c fdce 	bl	800effc <fflush>
					if (h->history.linePtr == h->history.lineHead)
 8002460:	bf00      	nop
				break;
 8002462:	e02a      	b.n	80024ba <ConsoleFunction+0x886>
				else goto unimp;
 8002464:	bf00      	nop

			// all other non implemented controls
			default:
			{
			unimp:
				printf("UNIMP-CTRL-SEQ: ");
 8002466:	481e      	ldr	r0, [pc, #120]	@ (80024e0 <ConsoleFunction+0x8ac>)
 8002468:	f00c ff0a 	bl	800f280 <iprintf>
				for (int i = 0; ctrlBuff[i] != '\0'; i++)
 800246c:	2300      	movs	r3, #0
 800246e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002470:	e00f      	b.n	8002492 <ConsoleFunction+0x85e>
					printf("%2.2x(%d) ", ctrlBuff[i], ctrlBuff[i]);
 8002472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002474:	6a3a      	ldr	r2, [r7, #32]
 8002476:	4413      	add	r3, r2
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	4619      	mov	r1, r3
 800247c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800247e:	6a3a      	ldr	r2, [r7, #32]
 8002480:	4413      	add	r3, r2
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	461a      	mov	r2, r3
 8002486:	4817      	ldr	r0, [pc, #92]	@ (80024e4 <ConsoleFunction+0x8b0>)
 8002488:	f00c fefa 	bl	800f280 <iprintf>
				for (int i = 0; ctrlBuff[i] != '\0'; i++)
 800248c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800248e:	3301      	adds	r3, #1
 8002490:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002494:	6a3a      	ldr	r2, [r7, #32]
 8002496:	4413      	add	r3, r2
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1e9      	bne.n	8002472 <ConsoleFunction+0x83e>
				printf("\r\n");
 800249e:	4812      	ldr	r0, [pc, #72]	@ (80024e8 <ConsoleFunction+0x8b4>)
 80024a0:	f00c ff5e 	bl	800f360 <puts>
				fflush(stdout);
 80024a4:	4b0b      	ldr	r3, [pc, #44]	@ (80024d4 <ConsoleFunction+0x8a0>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f00c fda6 	bl	800effc <fflush>
				break;
 80024b0:	e004      	b.n	80024bc <ConsoleFunction+0x888>
				    if ( lbPtr == 0 ) break;
 80024b2:	bf00      	nop
 80024b4:	e002      	b.n	80024bc <ConsoleFunction+0x888>
				break;
 80024b6:	bf00      	nop
 80024b8:	e000      	b.n	80024bc <ConsoleFunction+0x888>
				break;
 80024ba:	bf00      	nop
	while(h->cancel == 0)
 80024bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f43f ac2a 	beq.w	8001d1a <ConsoleFunction+0xe6>


		}
	}

exit:
 80024c6:	e004      	b.n	80024d2 <ConsoleFunction+0x89e>
	if (ctrlBuff == NULL) goto exit;
 80024c8:	bf00      	nop
 80024ca:	e012      	b.n	80024f2 <ConsoleFunction+0x8be>
	if (lineBuff == NULL) goto exit;
 80024cc:	bf00      	nop
 80024ce:	e010      	b.n	80024f2 <ConsoleFunction+0x8be>
			if ( h->cancel == 1 ) goto exit;
 80024d0:	bf00      	nop
	while (h->cancel == 0) vTaskDelay(pdTICKS_TO_MS(100));
 80024d2:	e00e      	b.n	80024f2 <ConsoleFunction+0x8be>
 80024d4:	200001c0 	.word	0x200001c0
 80024d8:	080123ac 	.word	0x080123ac
 80024dc:	080123b4 	.word	0x080123b4
 80024e0:	0801242c 	.word	0x0801242c
 80024e4:	08012440 	.word	0x08012440
 80024e8:	0801244c 	.word	0x0801244c
 80024ec:	2064      	movs	r0, #100	@ 0x64
 80024ee:	f008 fdc1 	bl	800b074 <vTaskDelay>
 80024f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f4:	6a1b      	ldr	r3, [r3, #32]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d0f8      	beq.n	80024ec <ConsoleFunction+0x8b8>
	
	printf("Console terminated, cleaning up...");
 80024fa:	482c      	ldr	r0, [pc, #176]	@ (80025ac <ConsoleFunction+0x978>)
 80024fc:	f00c fec0 	bl	800f280 <iprintf>
	fflush(stdout);
 8002500:	4b2b      	ldr	r3, [pc, #172]	@ (80025b0 <ConsoleFunction+0x97c>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	4618      	mov	r0, r3
 8002508:	f00c fd78 	bl	800effc <fflush>

	xSemaphoreTakeRecursive(h->cState.lockGuard, -1);
 800250c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002514:	4618      	mov	r0, r3
 8002516:	f007 fe79 	bl	800a20c <xQueueTakeMutexRecursive>
	while (!LIST_EMPTY(&h->cState.commands))
 800251a:	e01c      	b.n	8002556 <ConsoleFunction+0x922>
	{
		cmdEntry_t* pElement = h->cState.commands.lh_first;
 800251c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	60bb      	str	r3, [r7, #8]
		if (pElement != NULL)
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d01b      	beq.n	8002560 <ConsoleFunction+0x92c>
		{
			LIST_REMOVE(pElement, navigate);
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
 800252e:	2b00      	cmp	r3, #0
 8002530:	d007      	beq.n	8002542 <ConsoleFunction+0x90e>
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
 8002538:	68ba      	ldr	r2, [r7, #8]
 800253a:	f8d2 2260 	ldr.w	r2, [r2, #608]	@ 0x260
 800253e:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	f8d3 3260 	ldr.w	r3, [r3, #608]	@ 0x260
 8002548:	68ba      	ldr	r2, [r7, #8]
 800254a:	f8d2 225c 	ldr.w	r2, [r2, #604]	@ 0x25c
 800254e:	601a      	str	r2, [r3, #0]
			free(pElement);
 8002550:	68b8      	ldr	r0, [r7, #8]
 8002552:	f00a fe7b 	bl	800d24c <free>
	while (!LIST_EMPTY(&h->cState.commands))
 8002556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1de      	bne.n	800251c <ConsoleFunction+0x8e8>
 800255e:	e000      	b.n	8002562 <ConsoleFunction+0x92e>
		}
		else break;
 8002560:	bf00      	nop
	}

	xSemaphoreGiveRecursive(h->cState.lockGuard);
 8002562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f007 fe14 	bl	800a194 <xQueueGiveMutexRecursive>
	vSemaphoreDelete(h->cState.lockGuard);
 800256c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4618      	mov	r0, r3
 8002572:	f008 f9a7 	bl	800a8c4 <vQueueDelete>
	free(h);
 8002576:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002578:	f00a fe68 	bl	800d24c <free>
	
	if (lineBuff != NULL) free(lineBuff);
 800257c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800257e:	2b00      	cmp	r3, #0
 8002580:	d002      	beq.n	8002588 <ConsoleFunction+0x954>
 8002582:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002584:	f00a fe62 	bl	800d24c <free>
	if (ctrlBuff != NULL) free(ctrlBuff);
 8002588:	6a3b      	ldr	r3, [r7, #32]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d002      	beq.n	8002594 <ConsoleFunction+0x960>
 800258e:	6a38      	ldr	r0, [r7, #32]
 8002590:	f00a fe5c 	bl	800d24c <free>
	printf("done\r\n");
 8002594:	4807      	ldr	r0, [pc, #28]	@ (80025b4 <ConsoleFunction+0x980>)
 8002596:	f00c fee3 	bl	800f360 <puts>
 800259a:	e000      	b.n	800259e <ConsoleFunction+0x96a>
	if (h == NULL) goto destroy;
 800259c:	bf00      	nop
destroy:
	vTaskDelete(NULL);
 800259e:	2000      	movs	r0, #0
 80025a0:	f008 fcbe 	bl	800af20 <vTaskDelete>
}
 80025a4:	bf00      	nop
 80025a6:	3760      	adds	r7, #96	@ 0x60
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	08012450 	.word	0x08012450
 80025b0:	200001c0 	.word	0x200001c0
 80025b4:	08012474 	.word	0x08012474

080025b8 <ConsolePrintHelp>:

// --------------------------------------------------------------------------------------------------------------------
static int ConsolePrintHelp(int argc, char** argv, void* context)
// --------------------------------------------------------------------------------------------------------------------
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b08a      	sub	sp, #40	@ 0x28
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	607a      	str	r2, [r7, #4]
	ConsoleHandle_t h = (ConsoleHandle_t)context;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	61bb      	str	r3, [r7, #24]
	cmdState_t* c = &h->cState;
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	617b      	str	r3, [r7, #20]
	int found = 0;
 80025cc:	2300      	movs	r3, #0
 80025ce:	627b      	str	r3, [r7, #36]	@ 0x24
	int cmdLen = 0;
 80025d0:	2300      	movs	r3, #0
 80025d2:	623b      	str	r3, [r7, #32]
	if ( argc > 0 )
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	dd06      	ble.n	80025e8 <ConsolePrintHelp+0x30>
	{
		cmdLen = (int)strlen(argv[0]);
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f7fd fe76 	bl	80002d0 <strlen>
 80025e4:	4603      	mov	r3, r0
 80025e6:	623b      	str	r3, [r7, #32]
	}
	xSemaphoreTakeRecursive( c->lockGuard, -1 );
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80025f0:	4618      	mov	r0, r3
 80025f2:	f007 fe0b 	bl	800a20c <xQueueTakeMutexRecursive>
	cmdEntry_t* pElement = c->commands.lh_first;
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	61fb      	str	r3, [r7, #28]

	printf("HELP FOR:\r\n");
 80025fc:	4831      	ldr	r0, [pc, #196]	@ (80026c4 <ConsolePrintHelp+0x10c>)
 80025fe:	f00c feaf 	bl	800f360 <puts>
	printf("-------------------------------------------------------------------\r\n");
 8002602:	4831      	ldr	r0, [pc, #196]	@ (80026c8 <ConsolePrintHelp+0x110>)
 8002604:	f00c feac 	bl	800f360 <puts>
	while ( pElement != NULL )
 8002608:	e048      	b.n	800269c <ConsolePrintHelp+0xe4>
	{
		// if string compare result and determined length match, then this must be the function
		if ( ( argc == 0 ) || ( strncmp(argv[0], pElement->content.cmd, cmdLen) == 0 && cmdLen == pElement->content.cmdLen ) )
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00f      	beq.n	8002630 <ConsolePrintHelp+0x78>
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	6818      	ldr	r0, [r3, #0]
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	3308      	adds	r3, #8
 8002618:	6a3a      	ldr	r2, [r7, #32]
 800261a:	4619      	mov	r1, r3
 800261c:	f00d f89b 	bl	800f756 <strncmp>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d136      	bne.n	8002694 <ConsolePrintHelp+0xdc>
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800262a:	6a3a      	ldr	r2, [r7, #32]
 800262c:	429a      	cmp	r2, r3
 800262e:	d131      	bne.n	8002694 <ConsolePrintHelp+0xdc>
		{
			found = 1;
 8002630:	2301      	movs	r3, #1
 8002632:	627b      	str	r3, [r7, #36]	@ 0x24
			if ( pElement->content.isAlias ) printf("ALIAS\r\n");
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	f8d3 3258 	ldr.w	r3, [r3, #600]	@ 0x258
 800263a:	2b00      	cmp	r3, #0
 800263c:	d003      	beq.n	8002646 <ConsolePrintHelp+0x8e>
 800263e:	4823      	ldr	r0, [pc, #140]	@ (80026cc <ConsolePrintHelp+0x114>)
 8002640:	f00c fe8e 	bl	800f360 <puts>
 8002644:	e002      	b.n	800264c <ConsolePrintHelp+0x94>
			else printf("COMMAND\r\n");
 8002646:	4822      	ldr	r0, [pc, #136]	@ (80026d0 <ConsolePrintHelp+0x118>)
 8002648:	f00c fe8a 	bl	800f360 <puts>
			printf("%s\r\n\r\n", pElement->content.cmd);
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	3308      	adds	r3, #8
 8002650:	4619      	mov	r1, r3
 8002652:	4820      	ldr	r0, [pc, #128]	@ (80026d4 <ConsolePrintHelp+0x11c>)
 8002654:	f00c fe14 	bl	800f280 <iprintf>
			if ( pElement->content.isAlias )
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	f8d3 3258 	ldr.w	r3, [r3, #600]	@ 0x258
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00c      	beq.n	800267c <ConsolePrintHelp+0xc4>
			{
				printf("MAPPING\r\n");
 8002662:	481d      	ldr	r0, [pc, #116]	@ (80026d8 <ConsolePrintHelp+0x120>)
 8002664:	f00c fe7c 	bl	800f360 <puts>
				printf("%s -> '%s'\r\n", pElement->content.cmd, pElement->content.help);
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	f103 0108 	add.w	r1, r3, #8
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	3350      	adds	r3, #80	@ 0x50
 8002672:	461a      	mov	r2, r3
 8002674:	4819      	ldr	r0, [pc, #100]	@ (80026dc <ConsolePrintHelp+0x124>)
 8002676:	f00c fe03 	bl	800f280 <iprintf>
 800267a:	e008      	b.n	800268e <ConsolePrintHelp+0xd6>
			}
			else
			{
				printf("DESCRIPTION\r\n");
 800267c:	4818      	ldr	r0, [pc, #96]	@ (80026e0 <ConsolePrintHelp+0x128>)
 800267e:	f00c fe6f 	bl	800f360 <puts>
				printf("%s\r\n", pElement->content.help);
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	3350      	adds	r3, #80	@ 0x50
 8002686:	4619      	mov	r1, r3
 8002688:	4816      	ldr	r0, [pc, #88]	@ (80026e4 <ConsolePrintHelp+0x12c>)
 800268a:	f00c fdf9 	bl	800f280 <iprintf>
			}
			printf("-------------------------------------------------------------------\r\n");
 800268e:	480e      	ldr	r0, [pc, #56]	@ (80026c8 <ConsolePrintHelp+0x110>)
 8002690:	f00c fe66 	bl	800f360 <puts>
		}

		pElement = pElement->navigate.le_next;
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
 800269a:	61fb      	str	r3, [r7, #28]
	while ( pElement != NULL )
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1b3      	bne.n	800260a <ConsolePrintHelp+0x52>
	}

	xSemaphoreGiveRecursive( c->lockGuard );
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f007 fd74 	bl	800a194 <xQueueGiveMutexRecursive>
	return -(found == 0);
 80026ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	bf0c      	ite	eq
 80026b2:	2301      	moveq	r3, #1
 80026b4:	2300      	movne	r3, #0
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	425b      	negs	r3, r3
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3728      	adds	r7, #40	@ 0x28
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	0801247c 	.word	0x0801247c
 80026c8:	08012488 	.word	0x08012488
 80026cc:	080124d0 	.word	0x080124d0
 80026d0:	080124d8 	.word	0x080124d8
 80026d4:	080124e4 	.word	0x080124e4
 80026d8:	080124ec 	.word	0x080124ec
 80026dc:	080124f8 	.word	0x080124f8
 80026e0:	08012508 	.word	0x08012508
 80026e4:	08012518 	.word	0x08012518

080026e8 <ConsoleExecReset>:

// --------------------------------------------------------------------------------------------------------------------
static int ConsoleExecReset(int argc, char** argv, void* context)
// --------------------------------------------------------------------------------------------------------------------
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
	(void)argc;
	(void)argv;
	(void)context;
#if defined(__arm__)
	NVIC_SystemReset();
 80026f4:	f7fe fcc4 	bl	8001080 <__NVIC_SystemReset>

080026f8 <ConsolePrintKernelTicks>:
}

// --------------------------------------------------------------------------------------------------------------------
static int ConsolePrintKernelTicks(int argc, char** argv, void* context)
// --------------------------------------------------------------------------------------------------------------------
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
	(void)argc;
	(void)argv;
	(void)context;
	printf("%u", (unsigned int)xTaskGetTickCount());
 8002704:	f008 ff40 	bl	800b588 <xTaskGetTickCount>
 8002708:	4603      	mov	r3, r0
 800270a:	4619      	mov	r1, r3
 800270c:	4803      	ldr	r0, [pc, #12]	@ (800271c <ConsolePrintKernelTicks+0x24>)
 800270e:	f00c fdb7 	bl	800f280 <iprintf>
	return 0;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	3710      	adds	r7, #16
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	08012520 	.word	0x08012520

08002720 <ConsolePrintTaskStats>:

#if defined(configGENERATE_RUN_TIME_STATS) && (configGENERATE_RUN_TIME_STATS != 0)
// --------------------------------------------------------------------------------------------------------------------
static int ConsolePrintTaskStats(int argc, char** argv, void* context)
// --------------------------------------------------------------------------------------------------------------------
{
 8002720:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002724:	f2ad 5dc4 	subw	sp, sp, #1476	@ 0x5c4
 8002728:	af06      	add	r7, sp, #24
 800272a:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 800272e:	f2a3 539c 	subw	r3, r3, #1436	@ 0x59c
 8002732:	6018      	str	r0, [r3, #0]
 8002734:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 8002738:	f5a3 63b4 	sub.w	r3, r3, #1440	@ 0x5a0
 800273c:	6019      	str	r1, [r3, #0]
 800273e:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 8002742:	f2a3 53a4 	subw	r3, r3, #1444	@ 0x5a4
 8002746:	601a      	str	r2, [r3, #0]
	(void)argc;
	(void)argv;
	(void)context;
	unsigned int numTasks = (unsigned int)uxTaskGetNumberOfTasks();
 8002748:	f008 ff2e 	bl	800b5a8 <uxTaskGetNumberOfTasks>
 800274c:	f8c7 05a0 	str.w	r0, [r7, #1440]	@ 0x5a0
	TaskStatus_t tasks[32]; // a maximium of 32 so far
	configRUN_TIME_COUNTER_TYPE totalTime = 0;
 8002750:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 8002754:	f5a3 63b3 	sub.w	r3, r3, #1432	@ 0x598
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]

	unsigned int numFeedback = uxTaskGetSystemState( tasks, numTasks, &totalTime);
 800275c:	f107 0210 	add.w	r2, r7, #16
 8002760:	f107 0314 	add.w	r3, r7, #20
 8002764:	f8d7 15a0 	ldr.w	r1, [r7, #1440]	@ 0x5a0
 8002768:	4618      	mov	r0, r3
 800276a:	f008 ff29 	bl	800b5c0 <uxTaskGetSystemState>
 800276e:	f8c7 059c 	str.w	r0, [r7, #1436]	@ 0x59c
	if (numFeedback > 0)
 8002772:	f8d7 359c 	ldr.w	r3, [r7, #1436]	@ 0x59c
 8002776:	2b00      	cmp	r3, #0
 8002778:	d008      	beq.n	800278c <ConsolePrintTaskStats+0x6c>
	{
		printf("|----|----------|----------|----------|---------|------------|-------|\r\n");
 800277a:	4876      	ldr	r0, [pc, #472]	@ (8002954 <ConsolePrintTaskStats+0x234>)
 800277c:	f00c fdf0 	bl	800f360 <puts>
		printf("| ID | NAME     | Prio     | BasePrio | State   | Ticks      | Rel.  |\r\n");
 8002780:	4875      	ldr	r0, [pc, #468]	@ (8002958 <ConsolePrintTaskStats+0x238>)
 8002782:	f00c fded 	bl	800f360 <puts>
		printf("|----|----------|----------|----------|---------|------------|-------|\r\n");
 8002786:	4873      	ldr	r0, [pc, #460]	@ (8002954 <ConsolePrintTaskStats+0x234>)
 8002788:	f00c fdea 	bl	800f360 <puts>
	}
	for (unsigned int i = 0; i < numFeedback; i++ )
 800278c:	2300      	movs	r3, #0
 800278e:	f8c7 35a4 	str.w	r3, [r7, #1444]	@ 0x5a4
 8002792:	e0d0      	b.n	8002936 <ConsolePrintTaskStats+0x216>
	{
		float relativeRuntime = ( (float)tasks[i].ulRunTimeCounter * 100.0f / (float)totalTime );
 8002794:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 8002798:	f2a3 5294 	subw	r2, r3, #1428	@ 0x594
 800279c:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	@ 0x5a4
 80027a0:	212c      	movs	r1, #44	@ 0x2c
 80027a2:	fb01 f303 	mul.w	r3, r1, r3
 80027a6:	4413      	add	r3, r2
 80027a8:	3318      	adds	r3, #24
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	ee07 3a90 	vmov	s15, r3
 80027b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027b4:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 800295c <ConsolePrintTaskStats+0x23c>
 80027b8:	ee67 6a87 	vmul.f32	s13, s15, s14
 80027bc:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 80027c0:	f5a3 63b3 	sub.w	r3, r3, #1432	@ 0x598
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	ee07 3a90 	vmov	s15, r3
 80027ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80027ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027d2:	f507 63b3 	add.w	r3, r7, #1432	@ 0x598
 80027d6:	edc3 7a00 	vstr	s15, [r3]
		char* state = (tasks[i].eCurrentState == eRunning) ? "RUN    " :
 80027da:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 80027de:	f2a3 5294 	subw	r2, r3, #1428	@ 0x594
 80027e2:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	@ 0x5a4
 80027e6:	212c      	movs	r1, #44	@ 0x2c
 80027e8:	fb01 f303 	mul.w	r3, r1, r3
 80027ec:	4413      	add	r3, r2
 80027ee:	330c      	adds	r3, #12
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d041      	beq.n	800287a <ConsolePrintTaskStats+0x15a>
			(tasks[i].eCurrentState == eReady) ? "READY  " :
 80027f6:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 80027fa:	f2a3 5294 	subw	r2, r3, #1428	@ 0x594
 80027fe:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	@ 0x5a4
 8002802:	212c      	movs	r1, #44	@ 0x2c
 8002804:	fb01 f303 	mul.w	r3, r1, r3
 8002808:	4413      	add	r3, r2
 800280a:	330c      	adds	r3, #12
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d031      	beq.n	8002876 <ConsolePrintTaskStats+0x156>
			(tasks[i].eCurrentState == eBlocked) ? "BLOCKED" :
 8002812:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 8002816:	f2a3 5294 	subw	r2, r3, #1428	@ 0x594
 800281a:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	@ 0x5a4
 800281e:	212c      	movs	r1, #44	@ 0x2c
 8002820:	fb01 f303 	mul.w	r3, r1, r3
 8002824:	4413      	add	r3, r2
 8002826:	330c      	adds	r3, #12
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	2b02      	cmp	r3, #2
 800282c:	d021      	beq.n	8002872 <ConsolePrintTaskStats+0x152>
			(tasks[i].eCurrentState == eSuspended) ? "SUSPEND" :
 800282e:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 8002832:	f2a3 5294 	subw	r2, r3, #1428	@ 0x594
 8002836:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	@ 0x5a4
 800283a:	212c      	movs	r1, #44	@ 0x2c
 800283c:	fb01 f303 	mul.w	r3, r1, r3
 8002840:	4413      	add	r3, r2
 8002842:	330c      	adds	r3, #12
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	2b03      	cmp	r3, #3
 8002848:	d011      	beq.n	800286e <ConsolePrintTaskStats+0x14e>
			(tasks[i].eCurrentState == eDeleted) ? "DELETED" : "INVALID";
 800284a:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 800284e:	f2a3 5294 	subw	r2, r3, #1428	@ 0x594
 8002852:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	@ 0x5a4
 8002856:	212c      	movs	r1, #44	@ 0x2c
 8002858:	fb01 f303 	mul.w	r3, r1, r3
 800285c:	4413      	add	r3, r2
 800285e:	330c      	adds	r3, #12
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	2b04      	cmp	r3, #4
 8002864:	d101      	bne.n	800286a <ConsolePrintTaskStats+0x14a>
 8002866:	4b3e      	ldr	r3, [pc, #248]	@ (8002960 <ConsolePrintTaskStats+0x240>)
 8002868:	e008      	b.n	800287c <ConsolePrintTaskStats+0x15c>
 800286a:	4b3e      	ldr	r3, [pc, #248]	@ (8002964 <ConsolePrintTaskStats+0x244>)
 800286c:	e006      	b.n	800287c <ConsolePrintTaskStats+0x15c>
			(tasks[i].eCurrentState == eSuspended) ? "SUSPEND" :
 800286e:	4b3e      	ldr	r3, [pc, #248]	@ (8002968 <ConsolePrintTaskStats+0x248>)
 8002870:	e004      	b.n	800287c <ConsolePrintTaskStats+0x15c>
			(tasks[i].eCurrentState == eBlocked) ? "BLOCKED" :
 8002872:	4b3e      	ldr	r3, [pc, #248]	@ (800296c <ConsolePrintTaskStats+0x24c>)
 8002874:	e002      	b.n	800287c <ConsolePrintTaskStats+0x15c>
			(tasks[i].eCurrentState == eReady) ? "READY  " :
 8002876:	4b3e      	ldr	r3, [pc, #248]	@ (8002970 <ConsolePrintTaskStats+0x250>)
 8002878:	e000      	b.n	800287c <ConsolePrintTaskStats+0x15c>
		char* state = (tasks[i].eCurrentState == eRunning) ? "RUN    " :
 800287a:	4b3e      	ldr	r3, [pc, #248]	@ (8002974 <ConsolePrintTaskStats+0x254>)
 800287c:	f8c7 3594 	str.w	r3, [r7, #1428]	@ 0x594
		printf("| %2.2d | %-8.8s | %4.4d     | %4.4d     | %s | %10.10u | %5.1f |\r\n",
			(int)tasks[i].xTaskNumber, (char*)tasks[i].pcTaskName, (int)tasks[i].uxCurrentPriority, 
 8002880:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 8002884:	f2a3 5294 	subw	r2, r3, #1428	@ 0x594
 8002888:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	@ 0x5a4
 800288c:	212c      	movs	r1, #44	@ 0x2c
 800288e:	fb01 f303 	mul.w	r3, r1, r3
 8002892:	4413      	add	r3, r2
 8002894:	3308      	adds	r3, #8
 8002896:	681b      	ldr	r3, [r3, #0]
		printf("| %2.2d | %-8.8s | %4.4d     | %4.4d     | %s | %10.10u | %5.1f |\r\n",
 8002898:	4698      	mov	r8, r3
			(int)tasks[i].xTaskNumber, (char*)tasks[i].pcTaskName, (int)tasks[i].uxCurrentPriority, 
 800289a:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 800289e:	f2a3 5294 	subw	r2, r3, #1428	@ 0x594
 80028a2:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	@ 0x5a4
 80028a6:	212c      	movs	r1, #44	@ 0x2c
 80028a8:	fb01 f303 	mul.w	r3, r1, r3
 80028ac:	4413      	add	r3, r2
 80028ae:	3304      	adds	r3, #4
 80028b0:	681d      	ldr	r5, [r3, #0]
 80028b2:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 80028b6:	f2a3 5294 	subw	r2, r3, #1428	@ 0x594
 80028ba:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	@ 0x5a4
 80028be:	212c      	movs	r1, #44	@ 0x2c
 80028c0:	fb01 f303 	mul.w	r3, r1, r3
 80028c4:	4413      	add	r3, r2
 80028c6:	3310      	adds	r3, #16
 80028c8:	681b      	ldr	r3, [r3, #0]
		printf("| %2.2d | %-8.8s | %4.4d     | %4.4d     | %s | %10.10u | %5.1f |\r\n",
 80028ca:	4699      	mov	r9, r3
			(int)tasks[i].uxBasePriority, (char*)state, (unsigned int)tasks[i].ulRunTimeCounter,
 80028cc:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 80028d0:	f2a3 5294 	subw	r2, r3, #1428	@ 0x594
 80028d4:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	@ 0x5a4
 80028d8:	212c      	movs	r1, #44	@ 0x2c
 80028da:	fb01 f303 	mul.w	r3, r1, r3
 80028de:	4413      	add	r3, r2
 80028e0:	3314      	adds	r3, #20
 80028e2:	681b      	ldr	r3, [r3, #0]
		printf("| %2.2d | %-8.8s | %4.4d     | %4.4d     | %s | %10.10u | %5.1f |\r\n",
 80028e4:	461e      	mov	r6, r3
			(int)tasks[i].uxBasePriority, (char*)state, (unsigned int)tasks[i].ulRunTimeCounter,
 80028e6:	f507 63b5 	add.w	r3, r7, #1448	@ 0x5a8
 80028ea:	f2a3 5294 	subw	r2, r3, #1428	@ 0x594
 80028ee:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	@ 0x5a4
 80028f2:	212c      	movs	r1, #44	@ 0x2c
 80028f4:	fb01 f303 	mul.w	r3, r1, r3
 80028f8:	4413      	add	r3, r2
 80028fa:	3318      	adds	r3, #24
 80028fc:	681c      	ldr	r4, [r3, #0]
		printf("| %2.2d | %-8.8s | %4.4d     | %4.4d     | %s | %10.10u | %5.1f |\r\n",
 80028fe:	f507 63b3 	add.w	r3, r7, #1432	@ 0x598
 8002902:	6818      	ldr	r0, [r3, #0]
 8002904:	f7fd fe50 	bl	80005a8 <__aeabi_f2d>
 8002908:	4602      	mov	r2, r0
 800290a:	460b      	mov	r3, r1
 800290c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002910:	9402      	str	r4, [sp, #8]
 8002912:	f8d7 3594 	ldr.w	r3, [r7, #1428]	@ 0x594
 8002916:	9301      	str	r3, [sp, #4]
 8002918:	9600      	str	r6, [sp, #0]
 800291a:	464b      	mov	r3, r9
 800291c:	462a      	mov	r2, r5
 800291e:	4641      	mov	r1, r8
 8002920:	4815      	ldr	r0, [pc, #84]	@ (8002978 <ConsolePrintTaskStats+0x258>)
 8002922:	f00c fcad 	bl	800f280 <iprintf>
			(float)relativeRuntime);
		printf("|----|----------|----------|----------|---------|------------|-------|\r\n");
 8002926:	480b      	ldr	r0, [pc, #44]	@ (8002954 <ConsolePrintTaskStats+0x234>)
 8002928:	f00c fd1a 	bl	800f360 <puts>
	for (unsigned int i = 0; i < numFeedback; i++ )
 800292c:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	@ 0x5a4
 8002930:	3301      	adds	r3, #1
 8002932:	f8c7 35a4 	str.w	r3, [r7, #1444]	@ 0x5a4
 8002936:	f8d7 25a4 	ldr.w	r2, [r7, #1444]	@ 0x5a4
 800293a:	f8d7 359c 	ldr.w	r3, [r7, #1436]	@ 0x59c
 800293e:	429a      	cmp	r2, r3
 8002940:	f4ff af28 	bcc.w	8002794 <ConsolePrintTaskStats+0x74>
	}

	return 0;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	f207 57ac 	addw	r7, r7, #1452	@ 0x5ac
 800294c:	46bd      	mov	sp, r7
 800294e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002952:	bf00      	nop
 8002954:	08012524 	.word	0x08012524
 8002958:	0801256c 	.word	0x0801256c
 800295c:	42c80000 	.word	0x42c80000
 8002960:	080125b4 	.word	0x080125b4
 8002964:	080125bc 	.word	0x080125bc
 8002968:	080125c4 	.word	0x080125c4
 800296c:	080125cc 	.word	0x080125cc
 8002970:	080125d4 	.word	0x080125d4
 8002974:	080125dc 	.word	0x080125dc
 8002978:	080125e4 	.word	0x080125e4

0800297c <ConsolePrintKernelVersion>:
#endif

// --------------------------------------------------------------------------------------------------------------------
static int ConsolePrintKernelVersion(int argc, char** argv, void* context)
// --------------------------------------------------------------------------------------------------------------------
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
	ConsoleHandle_t h = (ConsoleHandle_t)context;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	617b      	str	r3, [r7, #20]
	(void)h;
	(void)argc;
	(void)argv;

	printf("FreeRTOS Kernel %s", tskKERNEL_VERSION_NUMBER);
 800298c:	4904      	ldr	r1, [pc, #16]	@ (80029a0 <ConsolePrintKernelVersion+0x24>)
 800298e:	4805      	ldr	r0, [pc, #20]	@ (80029a4 <ConsolePrintKernelVersion+0x28>)
 8002990:	f00c fc76 	bl	800f280 <iprintf>
	return 0;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3718      	adds	r7, #24
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	08012628 	.word	0x08012628
 80029a4:	08012630 	.word	0x08012630

080029a8 <ConsoleWhoAmI>:

// --------------------------------------------------------------------------------------------------------------------
static int ConsoleWhoAmI(int argc, char** argv, void* context)
// --------------------------------------------------------------------------------------------------------------------
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
	ConsoleHandle_t h = (ConsoleHandle_t)context;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	613b      	str	r3, [r7, #16]
	(void)h;
	(void)argc;
	(void)argv;

#if CONSOLE_USE_DYNAMIC_USERNAME != 0
	char* usernamePtr = getenv("USERNAME");
 80029b8:	4808      	ldr	r0, [pc, #32]	@ (80029dc <ConsoleWhoAmI+0x34>)
 80029ba:	f00a fbf7 	bl	800d1ac <getenv>
 80029be:	6178      	str	r0, [r7, #20]
	if ( usernamePtr == 0 ) usernamePtr = CONSOLE_USERNAME;
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <ConsoleWhoAmI+0x22>
 80029c6:	4b06      	ldr	r3, [pc, #24]	@ (80029e0 <ConsoleWhoAmI+0x38>)
 80029c8:	617b      	str	r3, [r7, #20]
#else
	char* usernamePtr = CONSOLE_USERNAME;
#endif

	printf("%s", usernamePtr);
 80029ca:	6979      	ldr	r1, [r7, #20]
 80029cc:	4805      	ldr	r0, [pc, #20]	@ (80029e4 <ConsoleWhoAmI+0x3c>)
 80029ce:	f00c fc57 	bl	800f280 <iprintf>
	return 0;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3718      	adds	r7, #24
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	08012300 	.word	0x08012300
 80029e0:	0801230c 	.word	0x0801230c
 80029e4:	08012644 	.word	0x08012644

080029e8 <ConsoleExit>:

// --------------------------------------------------------------------------------------------------------------------
static int ConsoleExit(int argc, char** argv, void* context)
// --------------------------------------------------------------------------------------------------------------------
{
 80029e8:	b480      	push	{r7}
 80029ea:	b087      	sub	sp, #28
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
	ConsoleHandle_t h = (ConsoleHandle_t)context;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	617b      	str	r3, [r7, #20]
	(void)h;
	(void)argc;
	(void)argv;

	h->cancel = 1;
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	2201      	movs	r2, #1
 80029fc:	621a      	str	r2, [r3, #32]
	return 0;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	371c      	adds	r7, #28
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <ConsoleMallInfo>:

//---------------------------------------------------------------------------------------------------------------------
static int ConsoleMallInfo(int argc, char** argv, void* context)
// --------------------------------------------------------------------------------------------------------------------
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b090      	sub	sp, #64	@ 0x40
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
	ConsoleHandle_t h = (ConsoleHandle_t)context;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	(void)h;
	(void)argc;
	(void)argv;

#ifndef WIN32
	struct mallinfo info = mallinfo();
 8002a1c:	f107 0314 	add.w	r3, r7, #20
 8002a20:	4618      	mov	r0, r3
 8002a22:	f00a fcbd 	bl	800d3a0 <mallinfo>
	printf("arena    : %d\r\n", info.arena);
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	4619      	mov	r1, r3
 8002a2a:	480e      	ldr	r0, [pc, #56]	@ (8002a64 <ConsoleMallInfo+0x58>)
 8002a2c:	f00c fc28 	bl	800f280 <iprintf>
	printf("ordblks  : %d\r\n", info.ordblks);
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	4619      	mov	r1, r3
 8002a34:	480c      	ldr	r0, [pc, #48]	@ (8002a68 <ConsoleMallInfo+0x5c>)
 8002a36:	f00c fc23 	bl	800f280 <iprintf>
	printf("uordblks : %d\r\n", info.uordblks);
 8002a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	480b      	ldr	r0, [pc, #44]	@ (8002a6c <ConsoleMallInfo+0x60>)
 8002a40:	f00c fc1e 	bl	800f280 <iprintf>
	printf("fordblks : %d\r\n", info.fordblks);
 8002a44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a46:	4619      	mov	r1, r3
 8002a48:	4809      	ldr	r0, [pc, #36]	@ (8002a70 <ConsoleMallInfo+0x64>)
 8002a4a:	f00c fc19 	bl	800f280 <iprintf>
	printf("keepcost : %d\r\n", info.keepcost);
 8002a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a50:	4619      	mov	r1, r3
 8002a52:	4808      	ldr	r0, [pc, #32]	@ (8002a74 <ConsoleMallInfo+0x68>)
 8002a54:	f00c fc14 	bl	800f280 <iprintf>
	return 0;
 8002a58:	2300      	movs	r3, #0
#else
	printf("WIN32 has quite a lot!");
	return -1;
#endif
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3740      	adds	r7, #64	@ 0x40
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	08012648 	.word	0x08012648
 8002a68:	08012658 	.word	0x08012658
 8002a6c:	08012668 	.word	0x08012668
 8002a70:	08012678 	.word	0x08012678
 8002a74:	08012688 	.word	0x08012688

08002a78 <ConsoleGetEnv>:

//---------------------------------------------------------------------------------------------------------------------
static int ConsoleGetEnv(int argc, char** argv, void* context)
// --------------------------------------------------------------------------------------------------------------------
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
	ConsoleHandle_t h = (ConsoleHandle_t)context;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	617b      	str	r3, [r7, #20]
	(void)h;

	if ( argc > 0 )
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	dd1a      	ble.n	8002ac4 <ConsoleGetEnv+0x4c>
	{
		char* envValue = getenv(argv[0]);
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f00a fb8a 	bl	800d1ac <getenv>
 8002a98:	6138      	str	r0, [r7, #16]
		if ( envValue != NULL )
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d008      	beq.n	8002ab2 <ConsoleGetEnv+0x3a>
		{
			printf("%s=%s", argv[0], envValue);
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	480b      	ldr	r0, [pc, #44]	@ (8002ad8 <ConsoleGetEnv+0x60>)
 8002aaa:	f00c fbe9 	bl	800f280 <iprintf>
			return 0;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	e00d      	b.n	8002ace <ConsoleGetEnv+0x56>
		}
		else
		{
			printf("%s is no environment variable", argv[0]);
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	4808      	ldr	r0, [pc, #32]	@ (8002adc <ConsoleGetEnv+0x64>)
 8002aba:	f00c fbe1 	bl	800f280 <iprintf>
			return -1;
 8002abe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002ac2:	e004      	b.n	8002ace <ConsoleGetEnv+0x56>
		}
	}
	else
	{
		printf("invalid number of arguments");
 8002ac4:	4806      	ldr	r0, [pc, #24]	@ (8002ae0 <ConsoleGetEnv+0x68>)
 8002ac6:	f00c fbdb 	bl	800f280 <iprintf>
		return -1;
 8002aca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
	}
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3718      	adds	r7, #24
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	08012698 	.word	0x08012698
 8002adc:	080126a0 	.word	0x080126a0
 8002ae0:	080126c0 	.word	0x080126c0

08002ae4 <ConsoleSetEnv>:

//---------------------------------------------------------------------------------------------------------------------
static int ConsoleSetEnv(int argc, char** argv, void* context)
// --------------------------------------------------------------------------------------------------------------------
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
	ConsoleHandle_t h = (ConsoleHandle_t)context;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	617b      	str	r3, [r7, #20]
	(void)h;
	if ( argc > 1 )
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	dd1a      	ble.n	8002b30 <ConsoleSetEnv+0x4c>
	{
		int result = setenv(argv[0], argv[1], 1);
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	6818      	ldr	r0, [r3, #0]
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	3304      	adds	r3, #4
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2201      	movs	r2, #1
 8002b06:	4619      	mov	r1, r3
 8002b08:	f00b fa68 	bl	800dfdc <setenv>
 8002b0c:	6138      	str	r0, [r7, #16]
		if ( result == 0 )
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d101      	bne.n	8002b18 <ConsoleSetEnv+0x34>
		{
			return 0;
 8002b14:	2300      	movs	r3, #0
 8002b16:	e010      	b.n	8002b3a <ConsoleSetEnv+0x56>
		}
		else
		{
			printf("could not set %s with value %s", argv[0], argv[1]);
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	6819      	ldr	r1, [r3, #0]
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	3304      	adds	r3, #4
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	461a      	mov	r2, r3
 8002b24:	4807      	ldr	r0, [pc, #28]	@ (8002b44 <ConsoleSetEnv+0x60>)
 8002b26:	f00c fbab 	bl	800f280 <iprintf>
			return -1;
 8002b2a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002b2e:	e004      	b.n	8002b3a <ConsoleSetEnv+0x56>
		}
	}
	else
	{
		printf("invalid number of arguments");
 8002b30:	4805      	ldr	r0, [pc, #20]	@ (8002b48 <ConsoleSetEnv+0x64>)
 8002b32:	f00c fba5 	bl	800f280 <iprintf>
		return -1;
 8002b36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
	}
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3718      	adds	r7, #24
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	080126dc 	.word	0x080126dc
 8002b48:	080126c0 	.word	0x080126c0

08002b4c <ConsoleAliasConfig>:

// --------------------------------------------------------------------------------------------------------------------
static int ConsoleAliasConfig(int argc, char** argv, void* context)
// --------------------------------------------------------------------------------------------------------------------
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b0a8      	sub	sp, #160	@ 0xa0
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
	ConsoleHandle_t h = (ConsoleHandle_t)context;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

	if ( argc == 0 )
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d105      	bne.n	8002b70 <ConsoleAliasConfig+0x24>
	{
		printf("invalid number of arguments");
 8002b64:	4855      	ldr	r0, [pc, #340]	@ (8002cbc <ConsoleAliasConfig+0x170>)
 8002b66:	f00c fb8b 	bl	800f280 <iprintf>
		return -1;
 8002b6a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002b6e:	e0a0      	b.n	8002cb2 <ConsoleAliasConfig+0x166>
	}

	if( argc == 1 )
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d114      	bne.n	8002ba0 <ConsoleAliasConfig+0x54>
	{
		if ( CONSOLE_RemoveAliasOrCommand(h, argv[0]) == 0 )
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8002b80:	f000 fb60 	bl	8003244 <CONSOLE_RemoveAliasOrCommand>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d104      	bne.n	8002b94 <ConsoleAliasConfig+0x48>
		{
			printf("alias removed successfully");
 8002b8a:	484d      	ldr	r0, [pc, #308]	@ (8002cc0 <ConsoleAliasConfig+0x174>)
 8002b8c:	f00c fb78 	bl	800f280 <iprintf>
			return 0;
 8002b90:	2300      	movs	r3, #0
 8002b92:	e08e      	b.n	8002cb2 <ConsoleAliasConfig+0x166>
		}
		else
		{
			printf("alias was not removed");
 8002b94:	484b      	ldr	r0, [pc, #300]	@ (8002cc4 <ConsoleAliasConfig+0x178>)
 8002b96:	f00c fb73 	bl	800f280 <iprintf>
			return -1;
 8002b9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002b9e:	e088      	b.n	8002cb2 <ConsoleAliasConfig+0x166>
		}
	}
	else
	{
		char aliasBuffer[CONSOLE_LINE_SIZE];
		unsigned int cmdPtr = 1;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
		unsigned int buffPtr = 0;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		memset(aliasBuffer, 0, sizeof(aliasBuffer));
 8002bac:	f107 0314 	add.w	r3, r7, #20
 8002bb0:	2278      	movs	r2, #120	@ 0x78
 8002bb2:	2100      	movs	r1, #0
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f00c fdb9 	bl	800f72c <memset>
		for( unsigned int i = 0; i < sizeof(aliasBuffer)/sizeof(*aliasBuffer); i++)
 8002bba:	2300      	movs	r3, #0
 8002bbc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002bc0:	e05d      	b.n	8002c7e <ConsoleAliasConfig+0x132>
		{
			if ( cmdPtr < (unsigned int)argc )
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d24e      	bcs.n	8002c6a <ConsoleAliasConfig+0x11e>
			{
				int argLen = strnlen(argv[cmdPtr], CONSOLE_LINE_SIZE);
 8002bcc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	68ba      	ldr	r2, [r7, #8]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2178      	movs	r1, #120	@ 0x78
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f00c fdcd 	bl	800f77a <strnlen>
 8002be0:	4603      	mov	r3, r0
 8002be2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
				if ( argLen > 0 )
 8002be6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	dd37      	ble.n	8002c5e <ConsoleAliasConfig+0x112>
				{
					if ( (buffPtr+1) + argLen >= CONSOLE_LINE_SIZE )
 8002bee:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002bf2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002bf6:	4413      	add	r3, r2
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	2b77      	cmp	r3, #119	@ 0x77
 8002bfc:	d905      	bls.n	8002c0a <ConsoleAliasConfig+0xbe>
					{
						printf("the sum of the alias parameters is longer than the max line buffer size!");
 8002bfe:	4832      	ldr	r0, [pc, #200]	@ (8002cc8 <ConsoleAliasConfig+0x17c>)
 8002c00:	f00c fb3e 	bl	800f280 <iprintf>
						return -1;
 8002c04:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002c08:	e053      	b.n	8002cb2 <ConsoleAliasConfig+0x166>
					}
					else
					{
						memcpy(&aliasBuffer[buffPtr], argv[cmdPtr], argLen);
 8002c0a:	f107 0214 	add.w	r2, r7, #20
 8002c0e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c12:	18d0      	adds	r0, r2, r3
 8002c14:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	68ba      	ldr	r2, [r7, #8]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002c24:	4619      	mov	r1, r3
 8002c26:	f00c fee7 	bl	800f9f8 <memcpy>
						buffPtr += argLen;
 8002c2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c2e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8002c32:	4413      	add	r3, r2
 8002c34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
						if ( ( cmdPtr + 1) != (unsigned int)argc )
 8002c38:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c3c:	1c5a      	adds	r2, r3, #1
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d012      	beq.n	8002c6a <ConsoleAliasConfig+0x11e>
						{
							aliasBuffer[buffPtr] = ' ';
 8002c44:	f107 0214 	add.w	r2, r7, #20
 8002c48:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c4c:	4413      	add	r3, r2
 8002c4e:	2220      	movs	r2, #32
 8002c50:	701a      	strb	r2, [r3, #0]
							buffPtr += 1;
 8002c52:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c56:	3301      	adds	r3, #1
 8002c58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002c5c:	e005      	b.n	8002c6a <ConsoleAliasConfig+0x11e>
						}
					}
				}
				else
				{
					printf("at least one of the alias parameters is too long for mapping");
 8002c5e:	481b      	ldr	r0, [pc, #108]	@ (8002ccc <ConsoleAliasConfig+0x180>)
 8002c60:	f00c fb0e 	bl	800f280 <iprintf>
					return -1;
 8002c64:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002c68:	e023      	b.n	8002cb2 <ConsoleAliasConfig+0x166>
				}
			}
			cmdPtr++;
 8002c6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c6e:	3301      	adds	r3, #1
 8002c70:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
		for( unsigned int i = 0; i < sizeof(aliasBuffer)/sizeof(*aliasBuffer); i++)
 8002c74:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002c78:	3301      	adds	r3, #1
 8002c7a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002c7e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002c82:	2b77      	cmp	r3, #119	@ 0x77
 8002c84:	d99d      	bls.n	8002bc2 <ConsoleAliasConfig+0x76>
		}
		if ( CONSOLE_RegisterAlias(h, argv[0], aliasBuffer) == 0 )
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f107 0214 	add.w	r2, r7, #20
 8002c8e:	4619      	mov	r1, r3
 8002c90:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8002c94:	f000 fa0d 	bl	80030b2 <CONSOLE_RegisterAlias>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d104      	bne.n	8002ca8 <ConsoleAliasConfig+0x15c>
		{
			printf("alias created successfully");
 8002c9e:	480c      	ldr	r0, [pc, #48]	@ (8002cd0 <ConsoleAliasConfig+0x184>)
 8002ca0:	f00c faee 	bl	800f280 <iprintf>
			return 0;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	e004      	b.n	8002cb2 <ConsoleAliasConfig+0x166>
		}
		else
		{
			printf("alias was not created");
 8002ca8:	480a      	ldr	r0, [pc, #40]	@ (8002cd4 <ConsoleAliasConfig+0x188>)
 8002caa:	f00c fae9 	bl	800f280 <iprintf>
			return -1;
 8002cae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
		}
	}
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	37a0      	adds	r7, #160	@ 0xa0
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	080126c0 	.word	0x080126c0
 8002cc0:	080126fc 	.word	0x080126fc
 8002cc4:	08012718 	.word	0x08012718
 8002cc8:	08012730 	.word	0x08012730
 8002ccc:	0801277c 	.word	0x0801277c
 8002cd0:	080127bc 	.word	0x080127bc
 8002cd4:	080127d8 	.word	0x080127d8

08002cd8 <ConsoleRegisterBasicCommands>:

// --------------------------------------------------------------------------------------------------------------------
static void ConsoleRegisterBasicCommands( ConsoleHandle_t h )
// --------------------------------------------------------------------------------------------------------------------
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af02      	add	r7, sp, #8
 8002cde:	6078      	str	r0, [r7, #4]
	CONSOLE_RegisterCommand(h, "help",     "<<help>> prints the help of all commands.\r\nIf a <<command>> is passed as argument to help,\r\nonly the help text of this command will be printed on the console.",
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	9300      	str	r3, [sp, #0]
 8002ce4:	4b2c      	ldr	r3, [pc, #176]	@ (8002d98 <ConsoleRegisterBasicCommands+0xc0>)
 8002ce6:	4a2d      	ldr	r2, [pc, #180]	@ (8002d9c <ConsoleRegisterBasicCommands+0xc4>)
 8002ce8:	492d      	ldr	r1, [pc, #180]	@ (8002da0 <ConsoleRegisterBasicCommands+0xc8>)
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 f912 	bl	8002f14 <CONSOLE_RegisterCommand>
			ConsolePrintHelp, h);
	CONSOLE_RegisterCommand(h, "version",  "<<version>> prints the kernel version of the FreeRTOS kernel with which\r\n the current project has been built.",
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	9300      	str	r3, [sp, #0]
 8002cf4:	4b2b      	ldr	r3, [pc, #172]	@ (8002da4 <ConsoleRegisterBasicCommands+0xcc>)
 8002cf6:	4a2c      	ldr	r2, [pc, #176]	@ (8002da8 <ConsoleRegisterBasicCommands+0xd0>)
 8002cf8:	492c      	ldr	r1, [pc, #176]	@ (8002dac <ConsoleRegisterBasicCommands+0xd4>)
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 f90a 	bl	8002f14 <CONSOLE_RegisterCommand>
			ConsolePrintKernelVersion, h);
	CONSOLE_RegisterCommand(h, "whoami",   "<<whoami>> prints the current username which is set in this console instance",
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	9300      	str	r3, [sp, #0]
 8002d04:	4b2a      	ldr	r3, [pc, #168]	@ (8002db0 <ConsoleRegisterBasicCommands+0xd8>)
 8002d06:	4a2b      	ldr	r2, [pc, #172]	@ (8002db4 <ConsoleRegisterBasicCommands+0xdc>)
 8002d08:	492b      	ldr	r1, [pc, #172]	@ (8002db8 <ConsoleRegisterBasicCommands+0xe0>)
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 f902 	bl	8002f14 <CONSOLE_RegisterCommand>
			ConsoleWhoAmI, h);
	CONSOLE_RegisterCommand(h, "mallinfo", "<<mallinfo>> returns a structure describing the current state of\r\nmemory allocation.  The structure is defined in malloc.h.  The\r\nfollowing fields are defined: <<arena>> is the total amount of space\r\nin the heap; <<ordblks>> is the number of chunks which are not in use;\r\n<<uordblks>> is the total amount of space allocated by <<malloc>>;\r\n<<fordblks>> is the total amount of space not in use; <<keepcost>> is\r\nthe size of the top most memory block.\r\n",
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	9300      	str	r3, [sp, #0]
 8002d14:	4b29      	ldr	r3, [pc, #164]	@ (8002dbc <ConsoleRegisterBasicCommands+0xe4>)
 8002d16:	4a2a      	ldr	r2, [pc, #168]	@ (8002dc0 <ConsoleRegisterBasicCommands+0xe8>)
 8002d18:	492a      	ldr	r1, [pc, #168]	@ (8002dc4 <ConsoleRegisterBasicCommands+0xec>)
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 f8fa 	bl	8002f14 <CONSOLE_RegisterCommand>
			ConsoleMallInfo, h);
	CONSOLE_RegisterCommand(h, "getenv",   "<<getenv>> searches the list of environment variable names and values\r\n(using the global pointer ``<<char **environ>>'') for a variable whose\r\nname matches the string at <[name]>.  If a variable name matches,\r\n<<getenv>> returns a pointer to the associated value.",
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	9300      	str	r3, [sp, #0]
 8002d24:	4b28      	ldr	r3, [pc, #160]	@ (8002dc8 <ConsoleRegisterBasicCommands+0xf0>)
 8002d26:	4a29      	ldr	r2, [pc, #164]	@ (8002dcc <ConsoleRegisterBasicCommands+0xf4>)
 8002d28:	4929      	ldr	r1, [pc, #164]	@ (8002dd0 <ConsoleRegisterBasicCommands+0xf8>)
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 f8f2 	bl	8002f14 <CONSOLE_RegisterCommand>
			ConsoleGetEnv, h);
	CONSOLE_RegisterCommand(h, "setenv",   "<<setenv>> is similar to <<getenv>> but it sets a global variable\r\nin the list of environment variable names and values",
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	9300      	str	r3, [sp, #0]
 8002d34:	4b27      	ldr	r3, [pc, #156]	@ (8002dd4 <ConsoleRegisterBasicCommands+0xfc>)
 8002d36:	4a28      	ldr	r2, [pc, #160]	@ (8002dd8 <ConsoleRegisterBasicCommands+0x100>)
 8002d38:	4928      	ldr	r1, [pc, #160]	@ (8002ddc <ConsoleRegisterBasicCommands+0x104>)
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 f8ea 	bl	8002f14 <CONSOLE_RegisterCommand>
			ConsoleSetEnv, h);
	CONSOLE_RegisterCommand(h, "exit",     "<<exit>> leaves the running console instance and stops the consoel thread.\r\n It clears all given resources.\r\nThere is no console support after calling <<exit>> anymore",
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	9300      	str	r3, [sp, #0]
 8002d44:	4b26      	ldr	r3, [pc, #152]	@ (8002de0 <ConsoleRegisterBasicCommands+0x108>)
 8002d46:	4a27      	ldr	r2, [pc, #156]	@ (8002de4 <ConsoleRegisterBasicCommands+0x10c>)
 8002d48:	4927      	ldr	r1, [pc, #156]	@ (8002de8 <ConsoleRegisterBasicCommands+0x110>)
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 f8e2 	bl	8002f14 <CONSOLE_RegisterCommand>
			ConsoleExit, h);
	CONSOLE_RegisterCommand(h, "reset",     "<<reset>> executes a soft reset of the MCU.",
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	9300      	str	r3, [sp, #0]
 8002d54:	4b25      	ldr	r3, [pc, #148]	@ (8002dec <ConsoleRegisterBasicCommands+0x114>)
 8002d56:	4a26      	ldr	r2, [pc, #152]	@ (8002df0 <ConsoleRegisterBasicCommands+0x118>)
 8002d58:	4926      	ldr	r1, [pc, #152]	@ (8002df4 <ConsoleRegisterBasicCommands+0x11c>)
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 f8da 	bl	8002f14 <CONSOLE_RegisterCommand>
			ConsoleExecReset, h);
	CONSOLE_RegisterCommand(h, "ticks",     "<<ticks>> prints the time elapsed since system\r\nis running in the unit of ticks.",
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	9300      	str	r3, [sp, #0]
 8002d64:	4b24      	ldr	r3, [pc, #144]	@ (8002df8 <ConsoleRegisterBasicCommands+0x120>)
 8002d66:	4a25      	ldr	r2, [pc, #148]	@ (8002dfc <ConsoleRegisterBasicCommands+0x124>)
 8002d68:	4925      	ldr	r1, [pc, #148]	@ (8002e00 <ConsoleRegisterBasicCommands+0x128>)
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 f8d2 	bl	8002f14 <CONSOLE_RegisterCommand>
			ConsolePrintKernelTicks, h);
	CONSOLE_RegisterCommand(h, "alias",     "<<alias>>",
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	9300      	str	r3, [sp, #0]
 8002d74:	4b23      	ldr	r3, [pc, #140]	@ (8002e04 <ConsoleRegisterBasicCommands+0x12c>)
 8002d76:	4a24      	ldr	r2, [pc, #144]	@ (8002e08 <ConsoleRegisterBasicCommands+0x130>)
 8002d78:	4924      	ldr	r1, [pc, #144]	@ (8002e0c <ConsoleRegisterBasicCommands+0x134>)
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 f8ca 	bl	8002f14 <CONSOLE_RegisterCommand>
			ConsoleAliasConfig, h);
#if defined(configGENERATE_RUN_TIME_STATS) && (configGENERATE_RUN_TIME_STATS != 0)
	CONSOLE_RegisterCommand(h, "tasks",     "<<tasks>> prints information about the active tasks\r\nand prints also runtime information.",
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	9300      	str	r3, [sp, #0]
 8002d84:	4b22      	ldr	r3, [pc, #136]	@ (8002e10 <ConsoleRegisterBasicCommands+0x138>)
 8002d86:	4a23      	ldr	r2, [pc, #140]	@ (8002e14 <ConsoleRegisterBasicCommands+0x13c>)
 8002d88:	4923      	ldr	r1, [pc, #140]	@ (8002e18 <ConsoleRegisterBasicCommands+0x140>)
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 f8c2 	bl	8002f14 <CONSOLE_RegisterCommand>
		ConsolePrintTaskStats, h);
#endif
}
 8002d90:	bf00      	nop
 8002d92:	3708      	adds	r7, #8
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	080025b9 	.word	0x080025b9
 8002d9c:	080127f0 	.word	0x080127f0
 8002da0:	08012890 	.word	0x08012890
 8002da4:	0800297d 	.word	0x0800297d
 8002da8:	08012898 	.word	0x08012898
 8002dac:	08012908 	.word	0x08012908
 8002db0:	080029a9 	.word	0x080029a9
 8002db4:	08012910 	.word	0x08012910
 8002db8:	08012960 	.word	0x08012960
 8002dbc:	08002a0d 	.word	0x08002a0d
 8002dc0:	08012968 	.word	0x08012968
 8002dc4:	08012b2c 	.word	0x08012b2c
 8002dc8:	08002a79 	.word	0x08002a79
 8002dcc:	08012b38 	.word	0x08012b38
 8002dd0:	08012c40 	.word	0x08012c40
 8002dd4:	08002ae5 	.word	0x08002ae5
 8002dd8:	08012c48 	.word	0x08012c48
 8002ddc:	08012cc0 	.word	0x08012cc0
 8002de0:	080029e9 	.word	0x080029e9
 8002de4:	08012cc8 	.word	0x08012cc8
 8002de8:	08012d70 	.word	0x08012d70
 8002dec:	080026e9 	.word	0x080026e9
 8002df0:	08012d78 	.word	0x08012d78
 8002df4:	08012da4 	.word	0x08012da4
 8002df8:	080026f9 	.word	0x080026f9
 8002dfc:	08012dac 	.word	0x08012dac
 8002e00:	08012e00 	.word	0x08012e00
 8002e04:	08002b4d 	.word	0x08002b4d
 8002e08:	08012e08 	.word	0x08012e08
 8002e0c:	08012e14 	.word	0x08012e14
 8002e10:	08002721 	.word	0x08002721
 8002e14:	08012e1c 	.word	0x08012e1c
 8002e18:	08012e78 	.word	0x08012e78

08002e1c <CONSOLE_CreateInstance>:

// --------------------------------------------------------------------------------------------------------------------
ConsoleHandle_t CONSOLE_CreateInstance( unsigned int uxStackDepth, int xPrio )
// --------------------------------------------------------------------------------------------------------------------
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af02      	add	r7, sp, #8
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
#define ON_NULL_GOTO_ERROR(x) do { if ((x) == NULL) goto error; } while(0);
	struct ConsoleHandle* h = calloc(sizeof(struct ConsoleHandle), 1);
 8002e26:	2101      	movs	r1, #1
 8002e28:	f44f 6084 	mov.w	r0, #1056	@ 0x420
 8002e2c:	f00a f9a2 	bl	800d174 <calloc>
 8002e30:	4603      	mov	r3, r0
 8002e32:	60fb      	str	r3, [r7, #12]
	ON_NULL_GOTO_ERROR(h);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d051      	beq.n	8002ede <CONSOLE_CreateInstance+0xc2>

	h->cState.lockGuard = xSemaphoreCreateRecursiveMutex();
 8002e3a:	2004      	movs	r0, #4
 8002e3c:	f007 f991 	bl	800a162 <xQueueCreateMutex>
 8002e40:	4602      	mov	r2, r0
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	601a      	str	r2, [r3, #0]
	ON_NULL_GOTO_ERROR(h->cState.lockGuard);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d047      	beq.n	8002ede <CONSOLE_CreateInstance+0xc2>
	h->pState.state = ctrlpsIDLE_DETECT;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	721a      	strb	r2, [r3, #8]
	h->pState.length = 0;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2200      	movs	r2, #0
 8002e58:	611a      	str	r2, [r3, #16]
	h->pState.maxLength = CONSOLE_LINE_SIZE;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2278      	movs	r2, #120	@ 0x78
 8002e5e:	615a      	str	r2, [r3, #20]
	h->pState.type = ctrlUNKNOWN;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002e66:	815a      	strh	r2, [r3, #10]
	h->pState.buff = NULL;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	619a      	str	r2, [r3, #24]
	h->cancel = 0;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	621a      	str	r2, [r3, #32]
	h->pendingRedirect = 0;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
	h->pendingRdStream = NULL;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
	h->pendingWrStream = NULL;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f8c3 2414 	str.w	r2, [r3, #1044]	@ 0x414

	LIST_INIT(&h->cState.commands);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	605a      	str	r2, [r3, #4]
	ConsoleRegisterBasicCommands(h);
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f7ff ff20 	bl	8002cd8 <ConsoleRegisterBasicCommands>

	memset(h->history.lines, 0, sizeof(h->history.lines));
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	3324      	adds	r3, #36	@ 0x24
 8002e9c:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f00c fc42 	bl	800f72c <memset>
	h->history.linePtr = h->history.lineHead = 0;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

	xTaskCreate(ConsoleFunction, "console", uxStackDepth, h, xPrio, &h->tHandle);
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	321c      	adds	r2, #28
 8002ec2:	9201      	str	r2, [sp, #4]
 8002ec4:	9300      	str	r3, [sp, #0]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	4910      	ldr	r1, [pc, #64]	@ (8002f0c <CONSOLE_CreateInstance+0xf0>)
 8002ecc:	4810      	ldr	r0, [pc, #64]	@ (8002f10 <CONSOLE_CreateInstance+0xf4>)
 8002ece:	f007 feb5 	bl	800ac3c <xTaskCreate>
	ON_NULL_GOTO_ERROR(h->tHandle);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	69db      	ldr	r3, [r3, #28]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <CONSOLE_CreateInstance+0xc2>
	return h;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	e012      	b.n	8002f04 <CONSOLE_CreateInstance+0xe8>

error:
	if ( h != NULL )
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00e      	beq.n	8002f02 <CONSOLE_CreateInstance+0xe6>
	{
		if ( h->cState.lockGuard != NULL )
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d007      	beq.n	8002efc <CONSOLE_CreateInstance+0xe0>
		{
			vSemaphoreDelete(h->cState.lockGuard);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f007 fce7 	bl	800a8c4 <vQueueDelete>
			h->cState.lockGuard = NULL;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]
		}

		free(h);
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	f00a f9a5 	bl	800d24c <free>
	}

	return NULL;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3710      	adds	r7, #16
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	08012e80 	.word	0x08012e80
 8002f10:	08001c35 	.word	0x08001c35

08002f14 <CONSOLE_RegisterCommand>:

// --------------------------------------------------------------------------------------------------------------------
int CONSOLE_RegisterCommand( ConsoleHandle_t h, char* cmd, char* help, CONSOLE_CommandFunc func, void* context )
// --------------------------------------------------------------------------------------------------------------------
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b08c      	sub	sp, #48	@ 0x30
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
 8002f20:	603b      	str	r3, [r7, #0]
	int result = -1;
 8002f22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if ( cmd == NULL || help == NULL || func == NULL ) return result;
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d005      	beq.n	8002f3a <CONSOLE_RegisterCommand+0x26>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d002      	beq.n	8002f3a <CONSOLE_RegisterCommand+0x26>
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <CONSOLE_RegisterCommand+0x2a>
 8002f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f3c:	e0b5      	b.n	80030aa <CONSOLE_RegisterCommand+0x196>
	if ( *cmd == '\0' || *help == '\0' ) return result;
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d003      	beq.n	8002f4e <CONSOLE_RegisterCommand+0x3a>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d101      	bne.n	8002f52 <CONSOLE_RegisterCommand+0x3e>
 8002f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f50:	e0ab      	b.n	80030aa <CONSOLE_RegisterCommand+0x196>
	int cmdLen  = 0;
 8002f52:	2300      	movs	r3, #0
 8002f54:	623b      	str	r3, [r7, #32]
	int helpLen = 0;
 8002f56:	2300      	movs	r3, #0
 8002f58:	61fb      	str	r3, [r7, #28]
	if ( (cmdLen  = (int)strnlen(cmd, CONSOLE_COMMAND_MAX_LENGTH+1) )   > CONSOLE_COMMAND_MAX_LENGTH  ) return result;
 8002f5a:	2141      	movs	r1, #65	@ 0x41
 8002f5c:	68b8      	ldr	r0, [r7, #8]
 8002f5e:	f00c fc0c 	bl	800f77a <strnlen>
 8002f62:	4603      	mov	r3, r0
 8002f64:	623b      	str	r3, [r7, #32]
 8002f66:	6a3b      	ldr	r3, [r7, #32]
 8002f68:	2b40      	cmp	r3, #64	@ 0x40
 8002f6a:	dd01      	ble.n	8002f70 <CONSOLE_RegisterCommand+0x5c>
 8002f6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f6e:	e09c      	b.n	80030aa <CONSOLE_RegisterCommand+0x196>
	if ( (helpLen = (int)strnlen(help, CONSOLE_HELP_MAX_LENGTH+1) ) > CONSOLE_HELP_MAX_LENGTH ) return result;
 8002f70:	f240 2101 	movw	r1, #513	@ 0x201
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f00c fc00 	bl	800f77a <strnlen>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	61fb      	str	r3, [r7, #28]
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f84:	dd01      	ble.n	8002f8a <CONSOLE_RegisterCommand+0x76>
 8002f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f88:	e08f      	b.n	80030aa <CONSOLE_RegisterCommand+0x196>

	// could be called while the scheduler is not running or suspended, so we must not use to use the lock guard
	if ( taskSCHEDULER_RUNNING == xTaskGetSchedulerState() ) xSemaphoreTakeRecursive( h->cState.lockGuard, -1 );
 8002f8a:	f009 f903 	bl	800c194 <xTaskGetSchedulerState>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d106      	bne.n	8002fa2 <CONSOLE_RegisterCommand+0x8e>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f007 f935 	bl	800a20c <xQueueTakeMutexRecursive>

	cmdState_t* c = &h->cState;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	61bb      	str	r3, [r7, #24]
	int found = 0;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
	cmdEntry_t* pElement = c->commands.lh_first;
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	627b      	str	r3, [r7, #36]	@ 0x24
	while ( pElement != NULL )
 8002fb0:	e015      	b.n	8002fde <CONSOLE_RegisterCommand+0xca>
	{
		// if string compare result and determined length match, then this must be the function
		if ( strncmp(cmd, pElement->content.cmd, cmdLen) == 0 && cmdLen == pElement->content.cmdLen )
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb4:	3308      	adds	r3, #8
 8002fb6:	6a3a      	ldr	r2, [r7, #32]
 8002fb8:	4619      	mov	r1, r3
 8002fba:	68b8      	ldr	r0, [r7, #8]
 8002fbc:	f00c fbcb 	bl	800f756 <strncmp>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d107      	bne.n	8002fd6 <CONSOLE_RegisterCommand+0xc2>
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fca:	6a3a      	ldr	r2, [r7, #32]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d102      	bne.n	8002fd6 <CONSOLE_RegisterCommand+0xc2>
		{
			found = 1;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
			break;
 8002fd4:	e006      	b.n	8002fe4 <CONSOLE_RegisterCommand+0xd0>
		}
		pElement = pElement->navigate.le_next;
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd8:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
 8002fdc:	627b      	str	r3, [r7, #36]	@ 0x24
	while ( pElement != NULL )
 8002fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1e6      	bne.n	8002fb2 <CONSOLE_RegisterCommand+0x9e>
	}

	if ( found == 1 )
 8002fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d103      	bne.n	8002ff2 <CONSOLE_RegisterCommand+0xde>
	{
		result = -1;
 8002fea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ff0:	e050      	b.n	8003094 <CONSOLE_RegisterCommand+0x180>
	}
	else
	{
		struct cmdEntry *item = malloc(sizeof(struct cmdEntry));
 8002ff2:	f44f 7019 	mov.w	r0, #612	@ 0x264
 8002ff6:	f00a f921 	bl	800d23c <malloc>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	617b      	str	r3, [r7, #20]
		if (item == NULL) return result;
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d101      	bne.n	8003008 <CONSOLE_RegisterCommand+0xf4>
 8003004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003006:	e050      	b.n	80030aa <CONSOLE_RegisterCommand+0x196>
		item->content.isAlias = 0;
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	2200      	movs	r2, #0
 800300c:	f8c3 2258 	str.w	r2, [r3, #600]	@ 0x258
		item->content.cmdLen  = cmdLen;
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	6a3a      	ldr	r2, [r7, #32]
 8003014:	64da      	str	r2, [r3, #76]	@ 0x4c
		item->content.helpLen = helpLen;
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	69fa      	ldr	r2, [r7, #28]
 800301a:	f8c3 2254 	str.w	r2, [r3, #596]	@ 0x254
		item->content.func    = func;
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	683a      	ldr	r2, [r7, #0]
 8003022:	601a      	str	r2, [r3, #0]
		item->content.ctx     = context;
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003028:	605a      	str	r2, [r3, #4]
		memcpy(item->content.cmd, cmd, cmdLen);
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	3308      	adds	r3, #8
 800302e:	6a3a      	ldr	r2, [r7, #32]
 8003030:	68b9      	ldr	r1, [r7, #8]
 8003032:	4618      	mov	r0, r3
 8003034:	f00c fce0 	bl	800f9f8 <memcpy>
		item->content.cmd[cmdLen] = '\0';
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	6a3b      	ldr	r3, [r7, #32]
 800303c:	4413      	add	r3, r2
 800303e:	3308      	adds	r3, #8
 8003040:	2200      	movs	r2, #0
 8003042:	701a      	strb	r2, [r3, #0]
		memcpy(item->content.help, help, helpLen);
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	3350      	adds	r3, #80	@ 0x50
 8003048:	69fa      	ldr	r2, [r7, #28]
 800304a:	6879      	ldr	r1, [r7, #4]
 800304c:	4618      	mov	r0, r3
 800304e:	f00c fcd3 	bl	800f9f8 <memcpy>
		item->content.help[helpLen] = '\0';
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	4413      	add	r3, r2
 8003058:	3350      	adds	r3, #80	@ 0x50
 800305a:	2200      	movs	r2, #0
 800305c:	701a      	strb	r2, [r3, #0]
		LIST_INSERT_HEAD(&h->cState.commands, item, navigate);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	685a      	ldr	r2, [r3, #4]
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	f8c3 225c 	str.w	r2, [r3, #604]	@ 0x25c
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
 800306e:	2b00      	cmp	r3, #0
 8003070:	d006      	beq.n	8003080 <CONSOLE_RegisterCommand+0x16c>
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	f502 7217 	add.w	r2, r2, #604	@ 0x25c
 800307c:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	605a      	str	r2, [r3, #4]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	1d1a      	adds	r2, r3, #4
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260
		result = 0;
 8003090:	2300      	movs	r3, #0
 8003092:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}

	// could be called while the scheduler is not running or suspended, so we must not use to use the lock guard
	if ( taskSCHEDULER_RUNNING == xTaskGetSchedulerState() ) xSemaphoreGiveRecursive( h->cState.lockGuard );
 8003094:	f009 f87e 	bl	800c194 <xTaskGetSchedulerState>
 8003098:	4603      	mov	r3, r0
 800309a:	2b02      	cmp	r3, #2
 800309c:	d104      	bne.n	80030a8 <CONSOLE_RegisterCommand+0x194>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f007 f876 	bl	800a194 <xQueueGiveMutexRecursive>
	return result;
 80030a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3730      	adds	r7, #48	@ 0x30
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <CONSOLE_RegisterAlias>:


// --------------------------------------------------------------------------------------------------------------------
int CONSOLE_RegisterAlias( ConsoleHandle_t h, char* cmd, char* aliasCmd )
// --------------------------------------------------------------------------------------------------------------------
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b08c      	sub	sp, #48	@ 0x30
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	60f8      	str	r0, [r7, #12]
 80030ba:	60b9      	str	r1, [r7, #8]
 80030bc:	607a      	str	r2, [r7, #4]
	int result = -1;
 80030be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80030c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if ( cmd == NULL || aliasCmd == NULL ) return result;
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d002      	beq.n	80030d0 <CONSOLE_RegisterAlias+0x1e>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d101      	bne.n	80030d4 <CONSOLE_RegisterAlias+0x22>
 80030d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030d2:	e0b3      	b.n	800323c <CONSOLE_RegisterAlias+0x18a>
	if ( *cmd == '\0' || *aliasCmd == '\0' ) return result;
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d003      	beq.n	80030e4 <CONSOLE_RegisterAlias+0x32>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d101      	bne.n	80030e8 <CONSOLE_RegisterAlias+0x36>
 80030e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030e6:	e0a9      	b.n	800323c <CONSOLE_RegisterAlias+0x18a>
	int cmdLen  = 0;
 80030e8:	2300      	movs	r3, #0
 80030ea:	623b      	str	r3, [r7, #32]
	int aliasCmdLen = 0;
 80030ec:	2300      	movs	r3, #0
 80030ee:	61fb      	str	r3, [r7, #28]
	if ( (cmdLen      = (int)strnlen(cmd, CONSOLE_COMMAND_MAX_LENGTH+1) )      > CONSOLE_COMMAND_MAX_LENGTH ) return result;
 80030f0:	2141      	movs	r1, #65	@ 0x41
 80030f2:	68b8      	ldr	r0, [r7, #8]
 80030f4:	f00c fb41 	bl	800f77a <strnlen>
 80030f8:	4603      	mov	r3, r0
 80030fa:	623b      	str	r3, [r7, #32]
 80030fc:	6a3b      	ldr	r3, [r7, #32]
 80030fe:	2b40      	cmp	r3, #64	@ 0x40
 8003100:	dd01      	ble.n	8003106 <CONSOLE_RegisterAlias+0x54>
 8003102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003104:	e09a      	b.n	800323c <CONSOLE_RegisterAlias+0x18a>
	if ( (aliasCmdLen = (int)strnlen(aliasCmd, CONSOLE_COMMAND_MAX_LENGTH+1) ) > CONSOLE_COMMAND_MAX_LENGTH ) return result;
 8003106:	2141      	movs	r1, #65	@ 0x41
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f00c fb36 	bl	800f77a <strnlen>
 800310e:	4603      	mov	r3, r0
 8003110:	61fb      	str	r3, [r7, #28]
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	2b40      	cmp	r3, #64	@ 0x40
 8003116:	dd01      	ble.n	800311c <CONSOLE_RegisterAlias+0x6a>
 8003118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800311a:	e08f      	b.n	800323c <CONSOLE_RegisterAlias+0x18a>

	// could be called while the scheduler is not running or suspended, so we must not use to use the lock guard
	if ( taskSCHEDULER_RUNNING == xTaskGetSchedulerState() ) xSemaphoreTakeRecursive( h->cState.lockGuard, -1 );
 800311c:	f009 f83a 	bl	800c194 <xTaskGetSchedulerState>
 8003120:	4603      	mov	r3, r0
 8003122:	2b02      	cmp	r3, #2
 8003124:	d106      	bne.n	8003134 <CONSOLE_RegisterAlias+0x82>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800312e:	4618      	mov	r0, r3
 8003130:	f007 f86c 	bl	800a20c <xQueueTakeMutexRecursive>

	cmdState_t* c = &h->cState;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	61bb      	str	r3, [r7, #24]
	int found = 0;
 8003138:	2300      	movs	r3, #0
 800313a:	62bb      	str	r3, [r7, #40]	@ 0x28
	cmdEntry_t* pElement = c->commands.lh_first;
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	627b      	str	r3, [r7, #36]	@ 0x24
	while ( pElement != NULL )
 8003142:	e015      	b.n	8003170 <CONSOLE_RegisterAlias+0xbe>
	{
		// if string compare result and determined length match, then this must be the function
		if ( strncmp(cmd, pElement->content.cmd, cmdLen) == 0 && cmdLen == pElement->content.cmdLen )
 8003144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003146:	3308      	adds	r3, #8
 8003148:	6a3a      	ldr	r2, [r7, #32]
 800314a:	4619      	mov	r1, r3
 800314c:	68b8      	ldr	r0, [r7, #8]
 800314e:	f00c fb02 	bl	800f756 <strncmp>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d107      	bne.n	8003168 <CONSOLE_RegisterAlias+0xb6>
 8003158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800315a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800315c:	6a3a      	ldr	r2, [r7, #32]
 800315e:	429a      	cmp	r2, r3
 8003160:	d102      	bne.n	8003168 <CONSOLE_RegisterAlias+0xb6>
		{
			found = 1;
 8003162:	2301      	movs	r3, #1
 8003164:	62bb      	str	r3, [r7, #40]	@ 0x28
			break;
 8003166:	e006      	b.n	8003176 <CONSOLE_RegisterAlias+0xc4>
		}
		pElement = pElement->navigate.le_next;
 8003168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800316a:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
 800316e:	627b      	str	r3, [r7, #36]	@ 0x24
	while ( pElement != NULL )
 8003170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1e6      	bne.n	8003144 <CONSOLE_RegisterAlias+0x92>
	}

	if ( found == 1 )
 8003176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003178:	2b01      	cmp	r3, #1
 800317a:	d103      	bne.n	8003184 <CONSOLE_RegisterAlias+0xd2>
	{
		result = -1;
 800317c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003180:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003182:	e050      	b.n	8003226 <CONSOLE_RegisterAlias+0x174>
	}
	else
	{
		struct cmdEntry *item = malloc(sizeof(struct cmdEntry));
 8003184:	f44f 7019 	mov.w	r0, #612	@ 0x264
 8003188:	f00a f858 	bl	800d23c <malloc>
 800318c:	4603      	mov	r3, r0
 800318e:	617b      	str	r3, [r7, #20]
		if (item == NULL) return result;
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <CONSOLE_RegisterAlias+0xe8>
 8003196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003198:	e050      	b.n	800323c <CONSOLE_RegisterAlias+0x18a>
		item->content.isAlias = 1;
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	2201      	movs	r2, #1
 800319e:	f8c3 2258 	str.w	r2, [r3, #600]	@ 0x258
		item->content.cmdLen  = cmdLen;
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	6a3a      	ldr	r2, [r7, #32]
 80031a6:	64da      	str	r2, [r3, #76]	@ 0x4c
		item->content.helpLen = aliasCmdLen;
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	69fa      	ldr	r2, [r7, #28]
 80031ac:	f8c3 2254 	str.w	r2, [r3, #596]	@ 0x254
		item->content.func    = NULL;
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	2200      	movs	r2, #0
 80031b4:	601a      	str	r2, [r3, #0]
		item->content.ctx     = NULL;
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	2200      	movs	r2, #0
 80031ba:	605a      	str	r2, [r3, #4]
		memcpy(item->content.cmd, cmd, cmdLen);
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	3308      	adds	r3, #8
 80031c0:	6a3a      	ldr	r2, [r7, #32]
 80031c2:	68b9      	ldr	r1, [r7, #8]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f00c fc17 	bl	800f9f8 <memcpy>
		item->content.cmd[cmdLen] = '\0';
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	6a3b      	ldr	r3, [r7, #32]
 80031ce:	4413      	add	r3, r2
 80031d0:	3308      	adds	r3, #8
 80031d2:	2200      	movs	r2, #0
 80031d4:	701a      	strb	r2, [r3, #0]
		memcpy(item->content.help, aliasCmd, aliasCmdLen);
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	3350      	adds	r3, #80	@ 0x50
 80031da:	69fa      	ldr	r2, [r7, #28]
 80031dc:	6879      	ldr	r1, [r7, #4]
 80031de:	4618      	mov	r0, r3
 80031e0:	f00c fc0a 	bl	800f9f8 <memcpy>
		item->content.help[aliasCmdLen] = '\0';
 80031e4:	697a      	ldr	r2, [r7, #20]
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	4413      	add	r3, r2
 80031ea:	3350      	adds	r3, #80	@ 0x50
 80031ec:	2200      	movs	r2, #0
 80031ee:	701a      	strb	r2, [r3, #0]
		LIST_INSERT_HEAD(&h->cState.commands, item, navigate);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	685a      	ldr	r2, [r3, #4]
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	f8c3 225c 	str.w	r2, [r3, #604]	@ 0x25c
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
 8003200:	2b00      	cmp	r3, #0
 8003202:	d006      	beq.n	8003212 <CONSOLE_RegisterAlias+0x160>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	697a      	ldr	r2, [r7, #20]
 800320a:	f502 7217 	add.w	r2, r2, #604	@ 0x25c
 800320e:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	697a      	ldr	r2, [r7, #20]
 8003216:	605a      	str	r2, [r3, #4]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	1d1a      	adds	r2, r3, #4
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260
		result = 0;
 8003222:	2300      	movs	r3, #0
 8003224:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}

	// could be called while the scheduler is not running or suspended, so we must not use to use the lock guard
	if ( taskSCHEDULER_RUNNING == xTaskGetSchedulerState() ) xSemaphoreGiveRecursive( h->cState.lockGuard );
 8003226:	f008 ffb5 	bl	800c194 <xTaskGetSchedulerState>
 800322a:	4603      	mov	r3, r0
 800322c:	2b02      	cmp	r3, #2
 800322e:	d104      	bne.n	800323a <CONSOLE_RegisterAlias+0x188>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4618      	mov	r0, r3
 8003236:	f006 ffad 	bl	800a194 <xQueueGiveMutexRecursive>
	return result;
 800323a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800323c:	4618      	mov	r0, r3
 800323e:	3730      	adds	r7, #48	@ 0x30
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <CONSOLE_RemoveAliasOrCommand>:

// --------------------------------------------------------------------------------------------------------------------
int CONSOLE_RemoveAliasOrCommand( ConsoleHandle_t h, char* cmd)
// --------------------------------------------------------------------------------------------------------------------
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b088      	sub	sp, #32
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
	int result = -1;
 800324e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003252:	61fb      	str	r3, [r7, #28]
	if ( cmd == NULL ) return result;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <CONSOLE_RemoveAliasOrCommand+0x1a>
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	e066      	b.n	800332c <CONSOLE_RemoveAliasOrCommand+0xe8>
	if ( *cmd == '\0' ) return result;
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <CONSOLE_RemoveAliasOrCommand+0x26>
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	e060      	b.n	800332c <CONSOLE_RemoveAliasOrCommand+0xe8>
	int cmdLen  = 0;
 800326a:	2300      	movs	r3, #0
 800326c:	613b      	str	r3, [r7, #16]
	if ( (cmdLen      = (int)strnlen(cmd, CONSOLE_COMMAND_MAX_LENGTH+1) ) > CONSOLE_COMMAND_MAX_LENGTH ) return result;
 800326e:	2141      	movs	r1, #65	@ 0x41
 8003270:	6838      	ldr	r0, [r7, #0]
 8003272:	f00c fa82 	bl	800f77a <strnlen>
 8003276:	4603      	mov	r3, r0
 8003278:	613b      	str	r3, [r7, #16]
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	2b40      	cmp	r3, #64	@ 0x40
 800327e:	dd01      	ble.n	8003284 <CONSOLE_RemoveAliasOrCommand+0x40>
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	e053      	b.n	800332c <CONSOLE_RemoveAliasOrCommand+0xe8>

	// could be called while the scheduler is not running or suspended, so we must not use to use the lock guard
	if ( taskSCHEDULER_RUNNING == xTaskGetSchedulerState() ) xSemaphoreTakeRecursive( h->cState.lockGuard, -1 );
 8003284:	f008 ff86 	bl	800c194 <xTaskGetSchedulerState>
 8003288:	4603      	mov	r3, r0
 800328a:	2b02      	cmp	r3, #2
 800328c:	d106      	bne.n	800329c <CONSOLE_RemoveAliasOrCommand+0x58>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003296:	4618      	mov	r0, r3
 8003298:	f006 ffb8 	bl	800a20c <xQueueTakeMutexRecursive>

	cmdState_t* c = &h->cState;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	60fb      	str	r3, [r7, #12]
	int found = 0;
 80032a0:	2300      	movs	r3, #0
 80032a2:	61bb      	str	r3, [r7, #24]
	cmdEntry_t* pElement = c->commands.lh_first;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	617b      	str	r3, [r7, #20]
	while ( pElement != NULL )
 80032aa:	e015      	b.n	80032d8 <CONSOLE_RemoveAliasOrCommand+0x94>
	{
		// if string compare result and determined length match, then this must be the function
		if ( strncmp(cmd, pElement->content.cmd, cmdLen) == 0 && cmdLen == pElement->content.cmdLen )
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	3308      	adds	r3, #8
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	4619      	mov	r1, r3
 80032b4:	6838      	ldr	r0, [r7, #0]
 80032b6:	f00c fa4e 	bl	800f756 <strncmp>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d107      	bne.n	80032d0 <CONSOLE_RemoveAliasOrCommand+0x8c>
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d102      	bne.n	80032d0 <CONSOLE_RemoveAliasOrCommand+0x8c>
		{
			found = 1;
 80032ca:	2301      	movs	r3, #1
 80032cc:	61bb      	str	r3, [r7, #24]
			break;
 80032ce:	e006      	b.n	80032de <CONSOLE_RemoveAliasOrCommand+0x9a>
		}
		pElement = pElement->navigate.le_next;
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
 80032d6:	617b      	str	r3, [r7, #20]
	while ( pElement != NULL )
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1e6      	bne.n	80032ac <CONSOLE_RemoveAliasOrCommand+0x68>
	}

	if ( found == 1 )
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d118      	bne.n	8003316 <CONSOLE_RemoveAliasOrCommand+0xd2>
	{
		LIST_REMOVE(pElement, navigate);
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d007      	beq.n	80032fe <CONSOLE_RemoveAliasOrCommand+0xba>
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
 80032f4:	697a      	ldr	r2, [r7, #20]
 80032f6:	f8d2 2260 	ldr.w	r2, [r2, #608]	@ 0x260
 80032fa:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	f8d3 3260 	ldr.w	r3, [r3, #608]	@ 0x260
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	f8d2 225c 	ldr.w	r2, [r2, #604]	@ 0x25c
 800330a:	601a      	str	r2, [r3, #0]
		free(pElement);
 800330c:	6978      	ldr	r0, [r7, #20]
 800330e:	f009 ff9d 	bl	800d24c <free>
		result = 0;
 8003312:	2300      	movs	r3, #0
 8003314:	61fb      	str	r3, [r7, #28]
	}

	// could be called while the scheduler is not running or suspended, so we must not use to use the lock guard
	if ( taskSCHEDULER_RUNNING == xTaskGetSchedulerState() ) xSemaphoreGiveRecursive( h->cState.lockGuard );
 8003316:	f008 ff3d 	bl	800c194 <xTaskGetSchedulerState>
 800331a:	4603      	mov	r3, r0
 800331c:	2b02      	cmp	r3, #2
 800331e:	d104      	bne.n	800332a <CONSOLE_RemoveAliasOrCommand+0xe6>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4618      	mov	r0, r3
 8003326:	f006 ff35 	bl	800a194 <xQueueGiveMutexRecursive>
	return result;
 800332a:	69fb      	ldr	r3, [r7, #28]
}
 800332c:	4618      	mov	r0, r3
 800332e:	3720      	adds	r7, #32
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <GetCommandEvent>:
}

// --------------------------------------------------------------------------------------------------------------------
static SemaphoreHandle_t GetCommandEvent( SpindleHandle_t h )
// --------------------------------------------------------------------------------------------------------------------
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
	xSemaphoreTakeRecursive( h->syncEventPool.lockGuard, -1 );
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003340:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003344:	4618      	mov	r0, r3
 8003346:	f006 ff61 	bl	800a20c <xQueueTakeMutexRecursive>

	stepSyncEventElement_t* el = LIST_FIRST(&h->syncEventPool.pool);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800334e:	60fb      	str	r3, [r7, #12]
	while ( el != NULL )
 8003350:	e017      	b.n	8003382 <GetCommandEvent+0x4e>
	{
		if ( el->content.allocated == 0 )
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d110      	bne.n	800337c <GetCommandEvent+0x48>
		{
			el->content.allocated = 1;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2201      	movs	r2, #1
 800335e:	601a      	str	r2, [r3, #0]
			// make sure we the event is in held state
			xSemaphoreTake( el->content.event, 0 );
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	2100      	movs	r1, #0
 8003366:	4618      	mov	r0, r3
 8003368:	f007 f99a 	bl	800a6a0 <xQueueSemaphoreTake>
			xSemaphoreGiveRecursive( h->syncEventPool.lockGuard );
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003370:	4618      	mov	r0, r3
 8003372:	f006 ff0f 	bl	800a194 <xQueueGiveMutexRecursive>
			return el->content.event;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	e00b      	b.n	8003394 <GetCommandEvent+0x60>
		}
		el = LIST_NEXT(el, navigate);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	60fb      	str	r3, [r7, #12]
	while ( el != NULL )
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d1e4      	bne.n	8003352 <GetCommandEvent+0x1e>
	}

	xSemaphoreGiveRecursive( h->syncEventPool.lockGuard );
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800338c:	4618      	mov	r0, r3
 800338e:	f006 ff01 	bl	800a194 <xQueueGiveMutexRecursive>
	return 0;
 8003392:	2300      	movs	r3, #0
}
 8003394:	4618      	mov	r0, r3
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <ReleaseCommandEvent>:

// --------------------------------------------------------------------------------------------------------------------
static void ReleaseCommandEvent( SpindleHandle_t h, SemaphoreHandle_t s )
// --------------------------------------------------------------------------------------------------------------------
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
	xSemaphoreTakeRecursive( h->syncEventPool.lockGuard, -1 );
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033aa:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80033ae:	4618      	mov	r0, r3
 80033b0:	f006 ff2c 	bl	800a20c <xQueueTakeMutexRecursive>

	stepSyncEventElement_t* el = LIST_FIRST(&h->syncEventPool.pool);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033b8:	60fb      	str	r3, [r7, #12]
	while ( el != NULL )
 80033ba:	e014      	b.n	80033e6 <ReleaseCommandEvent+0x4a>
	{
		if ( el->content.allocated == 1 && el->content.event == s)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d10d      	bne.n	80033e0 <ReleaseCommandEvent+0x44>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	683a      	ldr	r2, [r7, #0]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d108      	bne.n	80033e0 <ReleaseCommandEvent+0x44>
		{
			el->content.allocated = 0;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	601a      	str	r2, [r3, #0]
			xSemaphoreGiveRecursive( h->syncEventPool.lockGuard );
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033d8:	4618      	mov	r0, r3
 80033da:	f006 fedb 	bl	800a194 <xQueueGiveMutexRecursive>
			return;
 80033de:	e00a      	b.n	80033f6 <ReleaseCommandEvent+0x5a>
		}
		el = LIST_NEXT(el, navigate);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	60fb      	str	r3, [r7, #12]
	while ( el != NULL )
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1e7      	bne.n	80033bc <ReleaseCommandEvent+0x20>
	}

	xSemaphoreGiveRecursive( h->syncEventPool.lockGuard );
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033f0:	4618      	mov	r0, r3
 80033f2:	f006 fecf 	bl	800a194 <xQueueGiveMutexRecursive>
}
 80033f6:	3710      	adds	r7, #16
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <SpindleConsoleFunction>:

// --------------------------------------------------------------------------------------------------------------------
int SpindleConsoleFunction( int argc, char** argv, void* ctx )
// --------------------------------------------------------------------------------------------------------------------
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b08e      	sub	sp, #56	@ 0x38
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	607a      	str	r2, [r7, #4]
	//possible commands are
	//(spindle) start 100
	//(spindle) stop
	//(spindle) status

	SpindleHandle_t h = (SpindleHandle_t)ctx;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	637b      	str	r3, [r7, #52]	@ 0x34
	StepCommandResponse_t response = { 0 };
 800340c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003410:	2200      	movs	r2, #0
 8003412:	601a      	str	r2, [r3, #0]
 8003414:	605a      	str	r2, [r3, #4]
 8003416:	609a      	str	r2, [r3, #8]
 8003418:	60da      	str	r2, [r3, #12]
	CtrlCommand_t cmd;

	cmd.response       = &response;
 800341a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800341e:	623b      	str	r3, [r7, #32]
	cmd.head.requestID = h->nextRequestID;
 8003420:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	613b      	str	r3, [r7, #16]
	h->nextRequestID += 1;
 8003426:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	1c5a      	adds	r2, r3, #1
 800342c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800342e:	601a      	str	r2, [r3, #0]

	// first decode the subcommand and all arguments
	if ( argc == 0 )
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d105      	bne.n	8003442 <SpindleConsoleFunction+0x46>
	{
		printf("invalid number of arguments\r\nFAIL");
 8003436:	484a      	ldr	r0, [pc, #296]	@ (8003560 <SpindleConsoleFunction+0x164>)
 8003438:	f00b ff22 	bl	800f280 <iprintf>
		return -1;
 800343c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003440:	e089      	b.n	8003556 <SpindleConsoleFunction+0x15a>
	}
	if ( strcmp(argv[0], "stop") == 0 )
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4947      	ldr	r1, [pc, #284]	@ (8003564 <SpindleConsoleFunction+0x168>)
 8003448:	4618      	mov	r0, r3
 800344a:	f7fc fee1 	bl	8000210 <strcmp>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d102      	bne.n	800345a <SpindleConsoleFunction+0x5e>
	{
		// no further arguments
		cmd.head.type = cctSTOP;
 8003454:	2302      	movs	r3, #2
 8003456:	753b      	strb	r3, [r7, #20]
 8003458:	e036      	b.n	80034c8 <SpindleConsoleFunction+0xcc>
	}
	else if ( strcmp(argv[0], "start") == 0 )
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4942      	ldr	r1, [pc, #264]	@ (8003568 <SpindleConsoleFunction+0x16c>)
 8003460:	4618      	mov	r0, r3
 8003462:	f7fc fed5 	bl	8000210 <strcmp>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d11b      	bne.n	80034a4 <SpindleConsoleFunction+0xa8>
	{
		// rpm value directly after start
		cmd.head.type = cctSTART;
 800346c:	2301      	movs	r3, #1
 800346e:	753b      	strb	r3, [r7, #20]
		cmd.request.args.asStart.speed    = 600.0f;
 8003470:	4b3e      	ldr	r3, [pc, #248]	@ (800356c <SpindleConsoleFunction+0x170>)
 8003472:	61bb      	str	r3, [r7, #24]
		if ( argc < 2 )
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2b01      	cmp	r3, #1
 8003478:	dc05      	bgt.n	8003486 <SpindleConsoleFunction+0x8a>
		{
			printf("missing RPM value for start command\r\nFAIL");
 800347a:	483d      	ldr	r0, [pc, #244]	@ (8003570 <SpindleConsoleFunction+0x174>)
 800347c:	f00b ff00 	bl	800f280 <iprintf>
			return -1;
 8003480:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003484:	e067      	b.n	8003556 <SpindleConsoleFunction+0x15a>
		}

		cmd.request.args.asStart.speed = (float)atof(argv[1]);
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	3304      	adds	r3, #4
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4618      	mov	r0, r3
 800348e:	f009 fe6d 	bl	800d16c <atof>
 8003492:	ec53 2b10 	vmov	r2, r3, d0
 8003496:	4610      	mov	r0, r2
 8003498:	4619      	mov	r1, r3
 800349a:	f7fd fbd5 	bl	8000c48 <__aeabi_d2f>
 800349e:	4603      	mov	r3, r0
 80034a0:	61bb      	str	r3, [r7, #24]
 80034a2:	e011      	b.n	80034c8 <SpindleConsoleFunction+0xcc>
	}
	else if ( strcmp(argv[0], "status") == 0 )
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4932      	ldr	r1, [pc, #200]	@ (8003574 <SpindleConsoleFunction+0x178>)
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7fc feb0 	bl	8000210 <strcmp>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d102      	bne.n	80034bc <SpindleConsoleFunction+0xc0>
	{
		// no further arguments, everything in result
		cmd.head.type = cctSTATUS;
 80034b6:	2304      	movs	r3, #4
 80034b8:	753b      	strb	r3, [r7, #20]
 80034ba:	e005      	b.n	80034c8 <SpindleConsoleFunction+0xcc>
	}
	else
	{
		printf("passed invalid sub command\r\nFAIL");
 80034bc:	482e      	ldr	r0, [pc, #184]	@ (8003578 <SpindleConsoleFunction+0x17c>)
 80034be:	f00b fedf 	bl	800f280 <iprintf>
		return -1;
 80034c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80034c6:	e046      	b.n	8003556 <SpindleConsoleFunction+0x15a>
	}

	// now pass the request to the controller
	cmd.request.syncEvent = GetCommandEvent(h);
 80034c8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80034ca:	f7ff ff33 	bl	8003334 <GetCommandEvent>
 80034ce:	4603      	mov	r3, r0
 80034d0:	61fb      	str	r3, [r7, #28]

	if ( pdPASS != xQueueSend( h->cmdQueue, &cmd, -1 ) )
 80034d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034d4:	68d8      	ldr	r0, [r3, #12]
 80034d6:	f107 0110 	add.w	r1, r7, #16
 80034da:	2300      	movs	r3, #0
 80034dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80034e0:	f006 fed2 	bl	800a288 <xQueueGenericSend>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d007      	beq.n	80034fa <SpindleConsoleFunction+0xfe>
	{
		ReleaseCommandEvent(h, cmd.request.syncEvent );
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	4619      	mov	r1, r3
 80034ee:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80034f0:	f7ff ff54 	bl	800339c <ReleaseCommandEvent>
		return -1;
 80034f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80034f8:	e02d      	b.n	8003556 <SpindleConsoleFunction+0x15a>
	}

	xSemaphoreTake( cmd.request.syncEvent, -1 );
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003500:	4618      	mov	r0, r3
 8003502:	f007 f8cd 	bl	800a6a0 <xQueueSemaphoreTake>
	ReleaseCommandEvent(h, cmd.request.syncEvent );
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	4619      	mov	r1, r3
 800350a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800350c:	f7ff ff46 	bl	800339c <ReleaseCommandEvent>

	// now decode the result in case there is one
	if ( response.code == 0 )
 8003510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003512:	2b00      	cmp	r3, #0
 8003514:	d11b      	bne.n	800354e <SpindleConsoleFunction+0x152>
	{
		if ( cmd.head.type == cctSTATUS )
 8003516:	7d3b      	ldrb	r3, [r7, #20]
 8003518:	2b04      	cmp	r3, #4
 800351a:	d114      	bne.n	8003546 <SpindleConsoleFunction+0x14a>
		{
			printf("%d\r\n", !!cmd.response->args.asStatus.running);
 800351c:	6a3b      	ldr	r3, [r7, #32]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	2b00      	cmp	r3, #0
 8003522:	bf14      	ite	ne
 8003524:	2301      	movne	r3, #1
 8003526:	2300      	moveq	r3, #0
 8003528:	b2db      	uxtb	r3, r3
 800352a:	4619      	mov	r1, r3
 800352c:	4813      	ldr	r0, [pc, #76]	@ (800357c <SpindleConsoleFunction+0x180>)
 800352e:	f00b fea7 	bl	800f280 <iprintf>
			printf("%d\r\n", (int)cmd.response->args.asStatus.speed);
 8003532:	6a3b      	ldr	r3, [r7, #32]
 8003534:	edd3 7a02 	vldr	s15, [r3, #8]
 8003538:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800353c:	ee17 1a90 	vmov	r1, s15
 8003540:	480e      	ldr	r0, [pc, #56]	@ (800357c <SpindleConsoleFunction+0x180>)
 8003542:	f00b fe9d 	bl	800f280 <iprintf>
		}
		printf("OK");
 8003546:	480e      	ldr	r0, [pc, #56]	@ (8003580 <SpindleConsoleFunction+0x184>)
 8003548:	f00b fe9a 	bl	800f280 <iprintf>
 800354c:	e002      	b.n	8003554 <SpindleConsoleFunction+0x158>
	}
	else
	{
		printf("error returned\r\nFAIL");
 800354e:	480d      	ldr	r0, [pc, #52]	@ (8003584 <SpindleConsoleFunction+0x188>)
 8003550:	f00b fe96 	bl	800f280 <iprintf>
	}

	// now back to console
	return response.code;
 8003554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003556:	4618      	mov	r0, r3
 8003558:	3738      	adds	r7, #56	@ 0x38
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	08012e88 	.word	0x08012e88
 8003564:	08012eac 	.word	0x08012eac
 8003568:	08012eb4 	.word	0x08012eb4
 800356c:	44160000 	.word	0x44160000
 8003570:	08012ebc 	.word	0x08012ebc
 8003574:	08012ee8 	.word	0x08012ee8
 8003578:	08012ef0 	.word	0x08012ef0
 800357c:	08012f14 	.word	0x08012f14
 8003580:	08012f1c 	.word	0x08012f1c
 8003584:	08012f20 	.word	0x08012f20

08003588 <CapabilityFunc>:
#include <console_inputs.h>

int CapabilityFunc(int argc, char** argv, void* ctx)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	607a      	str	r2, [r7, #4]
    printf("sdfndsjkfcndsjkcnksjd");
 8003594:	4803      	ldr	r0, [pc, #12]	@ (80035a4 <CapabilityFunc+0x1c>)
 8003596:	f00b fe73 	bl	800f280 <iprintf>
    return 0;
 800359a:	2300      	movs	r3, #0
}
 800359c:	4618      	mov	r0, r3
 800359e:	3710      	adds	r7, #16
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	08012fd4 	.word	0x08012fd4

080035a8 <ConsoleInputTask>:


void ConsoleInputTask(void *pvParameters)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b086      	sub	sp, #24
 80035ac:	af02      	add	r7, sp, #8
 80035ae:	6078      	str	r0, [r7, #4]
    // Allocate memory for the StepperTaskArgs_t structure
    ConsoleArg_t* ConsoleInputArgs = pvPortMalloc(sizeof(ConsoleArg_t));
 80035b0:	2088      	movs	r0, #136	@ 0x88
 80035b2:	f000 fe71 	bl	8004298 <pvPortMalloc>
 80035b6:	60f8      	str	r0, [r7, #12]
    if (!ConsoleInputArgs) {
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d105      	bne.n	80035ca <ConsoleInputTask+0x22>
        printf("Failed to allocate memory for ConsoleArg_t\r\n");
 80035be:	4815      	ldr	r0, [pc, #84]	@ (8003614 <ConsoleInputTask+0x6c>)
 80035c0:	f00b fece 	bl	800f360 <puts>
        Error_Handler();
 80035c4:	f000 fbaf 	bl	8003d26 <Error_Handler>
 80035c8:	e002      	b.n	80035d0 <ConsoleInputTask+0x28>
    }
    else {
        printf("console input instance created\r\n");
 80035ca:	4813      	ldr	r0, [pc, #76]	@ (8003618 <ConsoleInputTask+0x70>)
 80035cc:	f00b fec8 	bl	800f360 <puts>
    }

    ConsoleHandle_t c = CONSOLE_CreateInstance( 4*configMINIMAL_STACK_SIZE, configMAX_PRIORITIES - 5  );
 80035d0:	2102      	movs	r1, #2
 80035d2:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80035d6:	f7ff fc21 	bl	8002e1c <CONSOLE_CreateInstance>
 80035da:	60b8      	str	r0, [r7, #8]

    if (CONSOLE_RegisterCommand(c, "spindle", "Moves the spindle", SpindleConsoleFunction, NULL) == 0) {
 80035dc:	2300      	movs	r3, #0
 80035de:	9300      	str	r3, [sp, #0]
 80035e0:	4b0e      	ldr	r3, [pc, #56]	@ (800361c <ConsoleInputTask+0x74>)
 80035e2:	4a0f      	ldr	r2, [pc, #60]	@ (8003620 <ConsoleInputTask+0x78>)
 80035e4:	490f      	ldr	r1, [pc, #60]	@ (8003624 <ConsoleInputTask+0x7c>)
 80035e6:	68b8      	ldr	r0, [r7, #8]
 80035e8:	f7ff fc94 	bl	8002f14 <CONSOLE_RegisterCommand>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d103      	bne.n	80035fa <ConsoleInputTask+0x52>
      printf("Spindle command registered successfully.\n");
 80035f2:	480d      	ldr	r0, [pc, #52]	@ (8003628 <ConsoleInputTask+0x80>)
 80035f4:	f00b feb4 	bl	800f360 <puts>
 80035f8:	e002      	b.n	8003600 <ConsoleInputTask+0x58>
    } else {
      printf("Failed to register spindle command.\n");
 80035fa:	480c      	ldr	r0, [pc, #48]	@ (800362c <ConsoleInputTask+0x84>)
 80035fc:	f00b feb0 	bl	800f360 <puts>
    }

    CONSOLE_RegisterCommand(c, "capability", "prints a specified string of capability bits",
 8003600:	2300      	movs	r3, #0
 8003602:	9300      	str	r3, [sp, #0]
 8003604:	4b0a      	ldr	r3, [pc, #40]	@ (8003630 <ConsoleInputTask+0x88>)
 8003606:	4a0b      	ldr	r2, [pc, #44]	@ (8003634 <ConsoleInputTask+0x8c>)
 8003608:	490b      	ldr	r1, [pc, #44]	@ (8003638 <ConsoleInputTask+0x90>)
 800360a:	68b8      	ldr	r0, [r7, #8]
 800360c:	f7ff fc82 	bl	8002f14 <CONSOLE_RegisterCommand>
    CapabilityFunc, NULL);

    while(1) {
 8003610:	bf00      	nop
 8003612:	e7fd      	b.n	8003610 <ConsoleInputTask+0x68>
 8003614:	08012fec 	.word	0x08012fec
 8003618:	08013018 	.word	0x08013018
 800361c:	080033fd 	.word	0x080033fd
 8003620:	08013038 	.word	0x08013038
 8003624:	0801304c 	.word	0x0801304c
 8003628:	08013054 	.word	0x08013054
 800362c:	08013080 	.word	0x08013080
 8003630:	08003589 	.word	0x08003589
 8003634:	080130a4 	.word	0x080130a4
 8003638:	080130d4 	.word	0x080130d4

0800363c <vApplicationMallocFailedHook>:
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */
extern void initialise_stdlib_abstraction( void );

void vApplicationMallocFailedHook( void )
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8003642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003646:	b672      	cpsid	i
 8003648:	f383 8811 	msr	BASEPRI, r3
 800364c:	f3bf 8f6f 	isb	sy
 8003650:	f3bf 8f4f 	dsb	sy
 8003654:	b662      	cpsie	i
 8003656:	607b      	str	r3, [r7, #4]
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        "   cpsie i                                                 \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8003658:	bf00      	nop
  taskDISABLE_INTERRUPTS();
  __asm volatile( "bkpt #0" );
 800365a:	be00      	bkpt	0x0000
  for (;;) {;}
 800365c:	bf00      	nop
 800365e:	e7fd      	b.n	800365c <vApplicationMallocFailedHook+0x20>

08003660 <vApplicationStackOverflowHook>:
}
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
    __asm volatile
 800366a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800366e:	b672      	cpsid	i
 8003670:	f383 8811 	msr	BASEPRI, r3
 8003674:	f3bf 8f6f 	isb	sy
 8003678:	f3bf 8f4f 	dsb	sy
 800367c:	b662      	cpsie	i
 800367e:	60fb      	str	r3, [r7, #12]
}
 8003680:	bf00      	nop
  ( void ) pcTaskName;
  ( void ) pxTask;

  taskDISABLE_INTERRUPTS();
  __asm volatile( "bkpt #0" );
 8003682:	be00      	bkpt	0x0000
  for (;;) {;}
 8003684:	bf00      	nop
 8003686:	e7fd      	b.n	8003684 <vApplicationStackOverflowHook+0x24>

08003688 <main>:
    vTaskDelete(NULL);
}


int main(void)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */
  
  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800368e:	f000 fb0b 	bl	8003ca8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003692:	f000 ffcc 	bl	800462e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003696:	f000 f825 	bl	80036e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800369a:	f000 f979 	bl	8003990 <MX_GPIO_Init>
  MX_SPI1_Init();
 800369e:	f000 f887 	bl	80037b0 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 80036a2:	f000 f945 	bl	8003930 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80036a6:	f000 f8c1 	bl	800382c <MX_TIM2_Init>
  // Create stepper, and console input tasks
  //if (xTaskCreate(StepperTask, "StepperTask", 256, NULL, tskIDLE_PRIORITY + 2, NULL) != pdPASS) {
  //    printf("Failed to create StepperTask\r\n");
  //    Error_Handler();
  //}
  if (xTaskCreate(ConsoleInputTask, "ConsoleInputTask", 256, NULL, tskIDLE_PRIORITY + 1, NULL) != pdPASS) {
 80036aa:	2300      	movs	r3, #0
 80036ac:	9301      	str	r3, [sp, #4]
 80036ae:	2301      	movs	r3, #1
 80036b0:	9300      	str	r3, [sp, #0]
 80036b2:	2300      	movs	r3, #0
 80036b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80036b8:	4907      	ldr	r1, [pc, #28]	@ (80036d8 <main+0x50>)
 80036ba:	4808      	ldr	r0, [pc, #32]	@ (80036dc <main+0x54>)
 80036bc:	f007 fabe 	bl	800ac3c <xTaskCreate>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d004      	beq.n	80036d0 <main+0x48>
    printf("Failed to create ConsoleInputTask\r\n");
 80036c6:	4806      	ldr	r0, [pc, #24]	@ (80036e0 <main+0x58>)
 80036c8:	f00b fe4a 	bl	800f360 <puts>
    Error_Handler();
 80036cc:	f000 fb2b 	bl	8003d26 <Error_Handler>
  }

  (void)CapabilityFunc;
  
  vTaskStartScheduler();
 80036d0:	f007 fde6 	bl	800b2a0 <vTaskStartScheduler>
 
  //CONSOLE_RegisterCommand(c, "capability", "prints a specified string of capability bits", CapabilityFunc, NULL);

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80036d4:	bf00      	nop
 80036d6:	e7fd      	b.n	80036d4 <main+0x4c>
 80036d8:	08013228 	.word	0x08013228
 80036dc:	080035a9 	.word	0x080035a9
 80036e0:	0801323c 	.word	0x0801323c

080036e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b094      	sub	sp, #80	@ 0x50
 80036e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80036ea:	f107 0320 	add.w	r3, r7, #32
 80036ee:	2230      	movs	r2, #48	@ 0x30
 80036f0:	2100      	movs	r1, #0
 80036f2:	4618      	mov	r0, r3
 80036f4:	f00c f81a 	bl	800f72c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80036f8:	f107 030c 	add.w	r3, r7, #12
 80036fc:	2200      	movs	r2, #0
 80036fe:	601a      	str	r2, [r3, #0]
 8003700:	605a      	str	r2, [r3, #4]
 8003702:	609a      	str	r2, [r3, #8]
 8003704:	60da      	str	r2, [r3, #12]
 8003706:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003708:	4b27      	ldr	r3, [pc, #156]	@ (80037a8 <SystemClock_Config+0xc4>)
 800370a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800370c:	4a26      	ldr	r2, [pc, #152]	@ (80037a8 <SystemClock_Config+0xc4>)
 800370e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003712:	6413      	str	r3, [r2, #64]	@ 0x40
 8003714:	4b24      	ldr	r3, [pc, #144]	@ (80037a8 <SystemClock_Config+0xc4>)
 8003716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003718:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800371c:	60bb      	str	r3, [r7, #8]
 800371e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003720:	4b22      	ldr	r3, [pc, #136]	@ (80037ac <SystemClock_Config+0xc8>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a21      	ldr	r2, [pc, #132]	@ (80037ac <SystemClock_Config+0xc8>)
 8003726:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800372a:	6013      	str	r3, [r2, #0]
 800372c:	4b1f      	ldr	r3, [pc, #124]	@ (80037ac <SystemClock_Config+0xc8>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003734:	607b      	str	r3, [r7, #4]
 8003736:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003738:	2302      	movs	r3, #2
 800373a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800373c:	2301      	movs	r3, #1
 800373e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003740:	2310      	movs	r3, #16
 8003742:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003744:	2302      	movs	r3, #2
 8003746:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003748:	2300      	movs	r3, #0
 800374a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800374c:	2308      	movs	r3, #8
 800374e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8003750:	23b4      	movs	r3, #180	@ 0xb4
 8003752:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003754:	2302      	movs	r3, #2
 8003756:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003758:	2302      	movs	r3, #2
 800375a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800375c:	f107 0320 	add.w	r3, r7, #32
 8003760:	4618      	mov	r0, r3
 8003762:	f001 fe4d 	bl	8005400 <HAL_RCC_OscConfig>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d001      	beq.n	8003770 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800376c:	f000 fadb 	bl	8003d26 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003770:	230f      	movs	r3, #15
 8003772:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003774:	2302      	movs	r3, #2
 8003776:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003778:	2300      	movs	r3, #0
 800377a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800377c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003780:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003782:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003786:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003788:	f107 030c 	add.w	r3, r7, #12
 800378c:	2105      	movs	r1, #5
 800378e:	4618      	mov	r0, r3
 8003790:	f002 f990 	bl	8005ab4 <HAL_RCC_ClockConfig>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d001      	beq.n	800379e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800379a:	f000 fac4 	bl	8003d26 <Error_Handler>
  }
}
 800379e:	bf00      	nop
 80037a0:	3750      	adds	r7, #80	@ 0x50
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	40023800 	.word	0x40023800
 80037ac:	40007000 	.word	0x40007000

080037b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80037b4:	4b1b      	ldr	r3, [pc, #108]	@ (8003824 <MX_SPI1_Init+0x74>)
 80037b6:	4a1c      	ldr	r2, [pc, #112]	@ (8003828 <MX_SPI1_Init+0x78>)
 80037b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80037ba:	4b1a      	ldr	r3, [pc, #104]	@ (8003824 <MX_SPI1_Init+0x74>)
 80037bc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80037c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80037c2:	4b18      	ldr	r3, [pc, #96]	@ (8003824 <MX_SPI1_Init+0x74>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80037c8:	4b16      	ldr	r3, [pc, #88]	@ (8003824 <MX_SPI1_Init+0x74>)
 80037ca:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80037ce:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80037d0:	4b14      	ldr	r3, [pc, #80]	@ (8003824 <MX_SPI1_Init+0x74>)
 80037d2:	2202      	movs	r2, #2
 80037d4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80037d6:	4b13      	ldr	r3, [pc, #76]	@ (8003824 <MX_SPI1_Init+0x74>)
 80037d8:	2201      	movs	r2, #1
 80037da:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80037dc:	4b11      	ldr	r3, [pc, #68]	@ (8003824 <MX_SPI1_Init+0x74>)
 80037de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037e2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80037e4:	4b0f      	ldr	r3, [pc, #60]	@ (8003824 <MX_SPI1_Init+0x74>)
 80037e6:	2220      	movs	r2, #32
 80037e8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80037ea:	4b0e      	ldr	r3, [pc, #56]	@ (8003824 <MX_SPI1_Init+0x74>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80037f0:	4b0c      	ldr	r3, [pc, #48]	@ (8003824 <MX_SPI1_Init+0x74>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037f6:	4b0b      	ldr	r3, [pc, #44]	@ (8003824 <MX_SPI1_Init+0x74>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80037fc:	4b09      	ldr	r3, [pc, #36]	@ (8003824 <MX_SPI1_Init+0x74>)
 80037fe:	2207      	movs	r2, #7
 8003800:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003802:	4b08      	ldr	r3, [pc, #32]	@ (8003824 <MX_SPI1_Init+0x74>)
 8003804:	2200      	movs	r2, #0
 8003806:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003808:	4b06      	ldr	r3, [pc, #24]	@ (8003824 <MX_SPI1_Init+0x74>)
 800380a:	2200      	movs	r2, #0
 800380c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800380e:	4805      	ldr	r0, [pc, #20]	@ (8003824 <MX_SPI1_Init+0x74>)
 8003810:	f003 fbd6 	bl	8006fc0 <HAL_SPI_Init>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800381a:	f000 fa84 	bl	8003d26 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800381e:	bf00      	nop
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	2000022c 	.word	0x2000022c
 8003828:	40013000 	.word	0x40013000

0800382c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b08e      	sub	sp, #56	@ 0x38
 8003830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003832:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003836:	2200      	movs	r2, #0
 8003838:	601a      	str	r2, [r3, #0]
 800383a:	605a      	str	r2, [r3, #4]
 800383c:	609a      	str	r2, [r3, #8]
 800383e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003840:	f107 031c 	add.w	r3, r7, #28
 8003844:	2200      	movs	r2, #0
 8003846:	601a      	str	r2, [r3, #0]
 8003848:	605a      	str	r2, [r3, #4]
 800384a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800384c:	463b      	mov	r3, r7
 800384e:	2200      	movs	r2, #0
 8003850:	601a      	str	r2, [r3, #0]
 8003852:	605a      	str	r2, [r3, #4]
 8003854:	609a      	str	r2, [r3, #8]
 8003856:	60da      	str	r2, [r3, #12]
 8003858:	611a      	str	r2, [r3, #16]
 800385a:	615a      	str	r2, [r3, #20]
 800385c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800385e:	4b33      	ldr	r3, [pc, #204]	@ (800392c <MX_TIM2_Init+0x100>)
 8003860:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003864:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003866:	4b31      	ldr	r3, [pc, #196]	@ (800392c <MX_TIM2_Init+0x100>)
 8003868:	2200      	movs	r2, #0
 800386a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800386c:	4b2f      	ldr	r3, [pc, #188]	@ (800392c <MX_TIM2_Init+0x100>)
 800386e:	2200      	movs	r2, #0
 8003870:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4499;
 8003872:	4b2e      	ldr	r3, [pc, #184]	@ (800392c <MX_TIM2_Init+0x100>)
 8003874:	f241 1293 	movw	r2, #4499	@ 0x1193
 8003878:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800387a:	4b2c      	ldr	r3, [pc, #176]	@ (800392c <MX_TIM2_Init+0x100>)
 800387c:	2200      	movs	r2, #0
 800387e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003880:	4b2a      	ldr	r3, [pc, #168]	@ (800392c <MX_TIM2_Init+0x100>)
 8003882:	2200      	movs	r2, #0
 8003884:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003886:	4829      	ldr	r0, [pc, #164]	@ (800392c <MX_TIM2_Init+0x100>)
 8003888:	f003 fec6 	bl	8007618 <HAL_TIM_Base_Init>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003892:	f000 fa48 	bl	8003d26 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003896:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800389a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800389c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80038a0:	4619      	mov	r1, r3
 80038a2:	4822      	ldr	r0, [pc, #136]	@ (800392c <MX_TIM2_Init+0x100>)
 80038a4:	f004 fb6a 	bl	8007f7c <HAL_TIM_ConfigClockSource>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80038ae:	f000 fa3a 	bl	8003d26 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80038b2:	481e      	ldr	r0, [pc, #120]	@ (800392c <MX_TIM2_Init+0x100>)
 80038b4:	f003 ffd0 	bl	8007858 <HAL_TIM_PWM_Init>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80038be:	f000 fa32 	bl	8003d26 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038c2:	2300      	movs	r3, #0
 80038c4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038c6:	2300      	movs	r3, #0
 80038c8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80038ca:	f107 031c 	add.w	r3, r7, #28
 80038ce:	4619      	mov	r1, r3
 80038d0:	4816      	ldr	r0, [pc, #88]	@ (800392c <MX_TIM2_Init+0x100>)
 80038d2:	f005 fad3 	bl	8008e7c <HAL_TIMEx_MasterConfigSynchronization>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d001      	beq.n	80038e0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80038dc:	f000 fa23 	bl	8003d26 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80038e0:	2360      	movs	r3, #96	@ 0x60
 80038e2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80038e4:	2300      	movs	r3, #0
 80038e6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80038e8:	2300      	movs	r3, #0
 80038ea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80038ec:	2300      	movs	r3, #0
 80038ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80038f0:	463b      	mov	r3, r7
 80038f2:	2208      	movs	r2, #8
 80038f4:	4619      	mov	r1, r3
 80038f6:	480d      	ldr	r0, [pc, #52]	@ (800392c <MX_TIM2_Init+0x100>)
 80038f8:	f004 f8d8 	bl	8007aac <HAL_TIM_PWM_ConfigChannel>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8003902:	f000 fa10 	bl	8003d26 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003906:	463b      	mov	r3, r7
 8003908:	220c      	movs	r2, #12
 800390a:	4619      	mov	r1, r3
 800390c:	4807      	ldr	r0, [pc, #28]	@ (800392c <MX_TIM2_Init+0x100>)
 800390e:	f004 f8cd 	bl	8007aac <HAL_TIM_PWM_ConfigChannel>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d001      	beq.n	800391c <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8003918:	f000 fa05 	bl	8003d26 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800391c:	4803      	ldr	r0, [pc, #12]	@ (800392c <MX_TIM2_Init+0x100>)
 800391e:	f000 fd87 	bl	8004430 <HAL_TIM_MspPostInit>

}
 8003922:	bf00      	nop
 8003924:	3738      	adds	r7, #56	@ 0x38
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	20000290 	.word	0x20000290

08003930 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003934:	4b14      	ldr	r3, [pc, #80]	@ (8003988 <MX_USART3_UART_Init+0x58>)
 8003936:	4a15      	ldr	r2, [pc, #84]	@ (800398c <MX_USART3_UART_Init+0x5c>)
 8003938:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800393a:	4b13      	ldr	r3, [pc, #76]	@ (8003988 <MX_USART3_UART_Init+0x58>)
 800393c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003940:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003942:	4b11      	ldr	r3, [pc, #68]	@ (8003988 <MX_USART3_UART_Init+0x58>)
 8003944:	2200      	movs	r2, #0
 8003946:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003948:	4b0f      	ldr	r3, [pc, #60]	@ (8003988 <MX_USART3_UART_Init+0x58>)
 800394a:	2200      	movs	r2, #0
 800394c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800394e:	4b0e      	ldr	r3, [pc, #56]	@ (8003988 <MX_USART3_UART_Init+0x58>)
 8003950:	2200      	movs	r2, #0
 8003952:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003954:	4b0c      	ldr	r3, [pc, #48]	@ (8003988 <MX_USART3_UART_Init+0x58>)
 8003956:	220c      	movs	r2, #12
 8003958:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800395a:	4b0b      	ldr	r3, [pc, #44]	@ (8003988 <MX_USART3_UART_Init+0x58>)
 800395c:	2200      	movs	r2, #0
 800395e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003960:	4b09      	ldr	r3, [pc, #36]	@ (8003988 <MX_USART3_UART_Init+0x58>)
 8003962:	2200      	movs	r2, #0
 8003964:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003966:	4b08      	ldr	r3, [pc, #32]	@ (8003988 <MX_USART3_UART_Init+0x58>)
 8003968:	2200      	movs	r2, #0
 800396a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800396c:	4b06      	ldr	r3, [pc, #24]	@ (8003988 <MX_USART3_UART_Init+0x58>)
 800396e:	2200      	movs	r2, #0
 8003970:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003972:	4805      	ldr	r0, [pc, #20]	@ (8003988 <MX_USART3_UART_Init+0x58>)
 8003974:	f005 fbda 	bl	800912c <HAL_UART_Init>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d001      	beq.n	8003982 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800397e:	f000 f9d2 	bl	8003d26 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003982:	bf00      	nop
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	200002dc 	.word	0x200002dc
 800398c:	40004800 	.word	0x40004800

08003990 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b08c      	sub	sp, #48	@ 0x30
 8003994:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003996:	f107 031c 	add.w	r3, r7, #28
 800399a:	2200      	movs	r2, #0
 800399c:	601a      	str	r2, [r3, #0]
 800399e:	605a      	str	r2, [r3, #4]
 80039a0:	609a      	str	r2, [r3, #8]
 80039a2:	60da      	str	r2, [r3, #12]
 80039a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80039a6:	4b81      	ldr	r3, [pc, #516]	@ (8003bac <MX_GPIO_Init+0x21c>)
 80039a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039aa:	4a80      	ldr	r2, [pc, #512]	@ (8003bac <MX_GPIO_Init+0x21c>)
 80039ac:	f043 0304 	orr.w	r3, r3, #4
 80039b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80039b2:	4b7e      	ldr	r3, [pc, #504]	@ (8003bac <MX_GPIO_Init+0x21c>)
 80039b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039b6:	f003 0304 	and.w	r3, r3, #4
 80039ba:	61bb      	str	r3, [r7, #24]
 80039bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80039be:	4b7b      	ldr	r3, [pc, #492]	@ (8003bac <MX_GPIO_Init+0x21c>)
 80039c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039c2:	4a7a      	ldr	r2, [pc, #488]	@ (8003bac <MX_GPIO_Init+0x21c>)
 80039c4:	f043 0301 	orr.w	r3, r3, #1
 80039c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80039ca:	4b78      	ldr	r3, [pc, #480]	@ (8003bac <MX_GPIO_Init+0x21c>)
 80039cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	617b      	str	r3, [r7, #20]
 80039d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80039d6:	4b75      	ldr	r3, [pc, #468]	@ (8003bac <MX_GPIO_Init+0x21c>)
 80039d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039da:	4a74      	ldr	r2, [pc, #464]	@ (8003bac <MX_GPIO_Init+0x21c>)
 80039dc:	f043 0302 	orr.w	r3, r3, #2
 80039e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80039e2:	4b72      	ldr	r3, [pc, #456]	@ (8003bac <MX_GPIO_Init+0x21c>)
 80039e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039e6:	f003 0302 	and.w	r3, r3, #2
 80039ea:	613b      	str	r3, [r7, #16]
 80039ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80039ee:	4b6f      	ldr	r3, [pc, #444]	@ (8003bac <MX_GPIO_Init+0x21c>)
 80039f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039f2:	4a6e      	ldr	r2, [pc, #440]	@ (8003bac <MX_GPIO_Init+0x21c>)
 80039f4:	f043 0320 	orr.w	r3, r3, #32
 80039f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80039fa:	4b6c      	ldr	r3, [pc, #432]	@ (8003bac <MX_GPIO_Init+0x21c>)
 80039fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039fe:	f003 0320 	and.w	r3, r3, #32
 8003a02:	60fb      	str	r3, [r7, #12]
 8003a04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003a06:	4b69      	ldr	r3, [pc, #420]	@ (8003bac <MX_GPIO_Init+0x21c>)
 8003a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a0a:	4a68      	ldr	r2, [pc, #416]	@ (8003bac <MX_GPIO_Init+0x21c>)
 8003a0c:	f043 0310 	orr.w	r3, r3, #16
 8003a10:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a12:	4b66      	ldr	r3, [pc, #408]	@ (8003bac <MX_GPIO_Init+0x21c>)
 8003a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a16:	f003 0310 	and.w	r3, r3, #16
 8003a1a:	60bb      	str	r3, [r7, #8]
 8003a1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a1e:	4b63      	ldr	r3, [pc, #396]	@ (8003bac <MX_GPIO_Init+0x21c>)
 8003a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a22:	4a62      	ldr	r2, [pc, #392]	@ (8003bac <MX_GPIO_Init+0x21c>)
 8003a24:	f043 0308 	orr.w	r3, r3, #8
 8003a28:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a2a:	4b60      	ldr	r3, [pc, #384]	@ (8003bac <MX_GPIO_Init+0x21c>)
 8003a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a2e:	f003 0308 	and.w	r3, r3, #8
 8003a32:	607b      	str	r3, [r7, #4]
 8003a34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8003a36:	2200      	movs	r2, #0
 8003a38:	f244 0181 	movw	r1, #16513	@ 0x4081
 8003a3c:	485c      	ldr	r0, [pc, #368]	@ (8003bb0 <MX_GPIO_Init+0x220>)
 8003a3e:	f001 fcb3 	bl	80053a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, STEP_RSTN_Pin|STEP_DIR_Pin, GPIO_PIN_RESET);
 8003a42:	2200      	movs	r2, #0
 8003a44:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8003a48:	485a      	ldr	r0, [pc, #360]	@ (8003bb4 <MX_GPIO_Init+0x224>)
 8003a4a:	f001 fcad 	bl	80053a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPINDLE_ENA_L_Pin|SPINDLE_ENA_R_Pin, GPIO_PIN_RESET);
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8003a54:	4858      	ldr	r0, [pc, #352]	@ (8003bb8 <MX_GPIO_Init+0x228>)
 8003a56:	f001 fca7 	bl	80053a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STEP_SPI_CS_GPIO_Port, STEP_SPI_CS_Pin, GPIO_PIN_SET);
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003a60:	4856      	ldr	r0, [pc, #344]	@ (8003bbc <MX_GPIO_Init+0x22c>)
 8003a62:	f001 fca1 	bl	80053a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STEP_PULSE_GPIO_Port, STEP_PULSE_Pin, GPIO_PIN_RESET);
 8003a66:	2200      	movs	r2, #0
 8003a68:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003a6c:	4853      	ldr	r0, [pc, #332]	@ (8003bbc <MX_GPIO_Init+0x22c>)
 8003a6e:	f001 fc9b 	bl	80053a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USR_BUTTON_Pin */
  GPIO_InitStruct.Pin = USR_BUTTON_Pin;
 8003a72:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003a76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USR_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8003a80:	f107 031c 	add.w	r3, r7, #28
 8003a84:	4619      	mov	r1, r3
 8003a86:	484e      	ldr	r0, [pc, #312]	@ (8003bc0 <MX_GPIO_Init+0x230>)
 8003a88:	f001 f91e 	bl	8004cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPINDLE_SI_R_Pin */
  GPIO_InitStruct.Pin = SPINDLE_SI_R_Pin;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a90:	2300      	movs	r3, #0
 8003a92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a94:	2300      	movs	r3, #0
 8003a96:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SPINDLE_SI_R_GPIO_Port, &GPIO_InitStruct);
 8003a98:	f107 031c 	add.w	r3, r7, #28
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	4849      	ldr	r0, [pc, #292]	@ (8003bc4 <MX_GPIO_Init+0x234>)
 8003aa0:	f001 f912 	bl	8004cc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin;
 8003aa4:	f244 0381 	movw	r3, #16513	@ 0x4081
 8003aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ab6:	f107 031c 	add.w	r3, r7, #28
 8003aba:	4619      	mov	r1, r3
 8003abc:	483c      	ldr	r0, [pc, #240]	@ (8003bb0 <MX_GPIO_Init+0x220>)
 8003abe:	f001 f903 	bl	8004cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : STEP_RSTN_Pin */
  GPIO_InitStruct.Pin = STEP_RSTN_Pin;
 8003ac2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003ac6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003acc:	2300      	movs	r3, #0
 8003ace:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(STEP_RSTN_GPIO_Port, &GPIO_InitStruct);
 8003ad4:	f107 031c 	add.w	r3, r7, #28
 8003ad8:	4619      	mov	r1, r3
 8003ada:	4836      	ldr	r0, [pc, #216]	@ (8003bb4 <MX_GPIO_Init+0x224>)
 8003adc:	f001 f8f4 	bl	8004cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : STEP_DIR_Pin */
  GPIO_InitStruct.Pin = STEP_DIR_Pin;
 8003ae0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003ae4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aea:	2300      	movs	r3, #0
 8003aec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003aee:	2303      	movs	r3, #3
 8003af0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(STEP_DIR_GPIO_Port, &GPIO_InitStruct);
 8003af2:	f107 031c 	add.w	r3, r7, #28
 8003af6:	4619      	mov	r1, r3
 8003af8:	482e      	ldr	r0, [pc, #184]	@ (8003bb4 <MX_GPIO_Init+0x224>)
 8003afa:	f001 f8e5 	bl	8004cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : STEP_FLAG_Pin */
  GPIO_InitStruct.Pin = STEP_FLAG_Pin;
 8003afe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b04:	2300      	movs	r3, #0
 8003b06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(STEP_FLAG_GPIO_Port, &GPIO_InitStruct);
 8003b0c:	f107 031c 	add.w	r3, r7, #28
 8003b10:	4619      	mov	r1, r3
 8003b12:	4828      	ldr	r0, [pc, #160]	@ (8003bb4 <MX_GPIO_Init+0x224>)
 8003b14:	f001 f8d8 	bl	8004cc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPINDLE_ENA_L_Pin SPINDLE_ENA_R_Pin */
  GPIO_InitStruct.Pin = SPINDLE_ENA_L_Pin|SPINDLE_ENA_R_Pin;
 8003b18:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8003b1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b22:	2300      	movs	r3, #0
 8003b24:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b26:	2300      	movs	r3, #0
 8003b28:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003b2a:	f107 031c 	add.w	r3, r7, #28
 8003b2e:	4619      	mov	r1, r3
 8003b30:	4821      	ldr	r0, [pc, #132]	@ (8003bb8 <MX_GPIO_Init+0x228>)
 8003b32:	f001 f8c9 	bl	8004cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : STEP_SPI_CS_Pin */
  GPIO_InitStruct.Pin = STEP_SPI_CS_Pin;
 8003b36:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003b3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b40:	2300      	movs	r3, #0
 8003b42:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b44:	2303      	movs	r3, #3
 8003b46:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(STEP_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8003b48:	f107 031c 	add.w	r3, r7, #28
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	481b      	ldr	r0, [pc, #108]	@ (8003bbc <MX_GPIO_Init+0x22c>)
 8003b50:	f001 f8ba 	bl	8004cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : STEP_PULSE_Pin */
  GPIO_InitStruct.Pin = STEP_PULSE_Pin;
 8003b54:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b62:	2300      	movs	r3, #0
 8003b64:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(STEP_PULSE_GPIO_Port, &GPIO_InitStruct);
 8003b66:	f107 031c 	add.w	r3, r7, #28
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	4813      	ldr	r0, [pc, #76]	@ (8003bbc <MX_GPIO_Init+0x22c>)
 8003b6e:	f001 f8ab 	bl	8004cc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : REFERENCE_MARK_Pin LIMIT_SWITCH_Pin */
  GPIO_InitStruct.Pin = REFERENCE_MARK_Pin|LIMIT_SWITCH_Pin;
 8003b72:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003b76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b80:	f107 031c 	add.w	r3, r7, #28
 8003b84:	4619      	mov	r1, r3
 8003b86:	480a      	ldr	r0, [pc, #40]	@ (8003bb0 <MX_GPIO_Init+0x220>)
 8003b88:	f001 f89e 	bl	8004cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPINDLE_SI_L_Pin */
  GPIO_InitStruct.Pin = SPINDLE_SI_L_Pin;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b90:	2300      	movs	r3, #0
 8003b92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b94:	2300      	movs	r3, #0
 8003b96:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SPINDLE_SI_L_GPIO_Port, &GPIO_InitStruct);
 8003b98:	f107 031c 	add.w	r3, r7, #28
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	4806      	ldr	r0, [pc, #24]	@ (8003bb8 <MX_GPIO_Init+0x228>)
 8003ba0:	f001 f892 	bl	8004cc8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003ba4:	bf00      	nop
 8003ba6:	3730      	adds	r7, #48	@ 0x30
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	40023800 	.word	0x40023800
 8003bb0:	40020400 	.word	0x40020400
 8003bb4:	40021400 	.word	0x40021400
 8003bb8:	40021000 	.word	0x40021000
 8003bbc:	40020c00 	.word	0x40020c00
 8003bc0:	40020800 	.word	0x40020800
 8003bc4:	40020000 	.word	0x40020000

08003bc8 <vAssertCalled>:

/* USER CODE BEGIN 4 */
void vAssertCalled( const char * const pcFileName, unsigned long ulLine )
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
volatile uint32_t ulSetToNonZeroInDebuggerToContinue = 0;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	60fb      	str	r3, [r7, #12]

    /* Parameters are not used. */
    ( void ) ulLine;
    ( void ) pcFileName;

    taskENTER_CRITICAL();
 8003bd6:	f009 f9bb 	bl	800cf50 <vPortEnterCritical>
    {
        /* You can step out of this function to debug the assertion by using
        the debugger to set ulSetToNonZeroInDebuggerToContinue to a non-zero
        value. */
        while( ulSetToNonZeroInDebuggerToContinue == 0 )
 8003bda:	bf00      	nop
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d0fc      	beq.n	8003bdc <vAssertCalled+0x14>
        {
        }
    }
    taskEXIT_CRITICAL();
 8003be2:	f009 f9ed 	bl	800cfc0 <vPortExitCritical>
}
 8003be6:	bf00      	nop
 8003be8:	3710      	adds	r7, #16
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
	...

08003bf0 <__stdout_put_char>:

int __stdout_put_char(int ch)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
	uint8_t val = ch;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	73fb      	strb	r3, [r7, #15]
	while((huart3.Instance->ISR & UART_FLAG_TXE) == 0);
 8003bfc:	bf00      	nop
 8003bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8003c34 <__stdout_put_char+0x44>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	69db      	ldr	r3, [r3, #28]
 8003c04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d0f8      	beq.n	8003bfe <__stdout_put_char+0xe>
	huart3.Instance->TDR = val;
 8003c0c:	4b09      	ldr	r3, [pc, #36]	@ (8003c34 <__stdout_put_char+0x44>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	7bfa      	ldrb	r2, [r7, #15]
 8003c12:	629a      	str	r2, [r3, #40]	@ 0x28
	while((huart3.Instance->ISR & UART_FLAG_TC) == 0);
 8003c14:	bf00      	nop
 8003c16:	4b07      	ldr	r3, [pc, #28]	@ (8003c34 <__stdout_put_char+0x44>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	69db      	ldr	r3, [r3, #28]
 8003c1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d0f8      	beq.n	8003c16 <__stdout_put_char+0x26>
	return 0;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3714      	adds	r7, #20
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	200002dc 	.word	0x200002dc

08003c38 <__stdin_get_char>:

int __stdin_get_char(void)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	af00      	add	r7, sp, #0
	if (huart3.Instance->ISR & UART_FLAG_ORE)
 8003c3c:	4b19      	ldr	r3, [pc, #100]	@ (8003ca4 <__stdin_get_char+0x6c>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	69db      	ldr	r3, [r3, #28]
 8003c42:	f003 0308 	and.w	r3, r3, #8
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d003      	beq.n	8003c52 <__stdin_get_char+0x1a>
		huart3.Instance->ICR = UART_CLEAR_OREF;
 8003c4a:	4b16      	ldr	r3, [pc, #88]	@ (8003ca4 <__stdin_get_char+0x6c>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2208      	movs	r2, #8
 8003c50:	621a      	str	r2, [r3, #32]

	if (huart3.Instance->ISR & UART_FLAG_NE)
 8003c52:	4b14      	ldr	r3, [pc, #80]	@ (8003ca4 <__stdin_get_char+0x6c>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	69db      	ldr	r3, [r3, #28]
 8003c58:	f003 0304 	and.w	r3, r3, #4
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d003      	beq.n	8003c68 <__stdin_get_char+0x30>
		huart3.Instance->ICR = UART_CLEAR_NEF;
 8003c60:	4b10      	ldr	r3, [pc, #64]	@ (8003ca4 <__stdin_get_char+0x6c>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2204      	movs	r2, #4
 8003c66:	621a      	str	r2, [r3, #32]

	if (huart3.Instance->ISR & UART_FLAG_FE)
 8003c68:	4b0e      	ldr	r3, [pc, #56]	@ (8003ca4 <__stdin_get_char+0x6c>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	69db      	ldr	r3, [r3, #28]
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d003      	beq.n	8003c7e <__stdin_get_char+0x46>
		huart3.Instance->ICR = UART_CLEAR_FEF;
 8003c76:	4b0b      	ldr	r3, [pc, #44]	@ (8003ca4 <__stdin_get_char+0x6c>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2202      	movs	r2, #2
 8003c7c:	621a      	str	r2, [r3, #32]

	if ((huart3.Instance->ISR & UART_FLAG_RXNE) == 0) return -1;
 8003c7e:	4b09      	ldr	r3, [pc, #36]	@ (8003ca4 <__stdin_get_char+0x6c>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	69db      	ldr	r3, [r3, #28]
 8003c84:	f003 0320 	and.w	r3, r3, #32
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d102      	bne.n	8003c92 <__stdin_get_char+0x5a>
 8003c8c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003c90:	e002      	b.n	8003c98 <__stdin_get_char+0x60>
	return huart3.Instance->RDR;
 8003c92:	4b04      	ldr	r3, [pc, #16]	@ (8003ca4 <__stdin_get_char+0x6c>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	200002dc 	.word	0x200002dc

08003ca8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8003cae:	463b      	mov	r3, r7
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	601a      	str	r2, [r3, #0]
 8003cb4:	605a      	str	r2, [r3, #4]
 8003cb6:	609a      	str	r2, [r3, #8]
 8003cb8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8003cba:	f000 fe55 	bl	8004968 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8003cca:	230d      	movs	r3, #13
 8003ccc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RO_URO;
 8003cd6:	2306      	movs	r3, #6
 8003cd8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003cea:	463b      	mov	r3, r7
 8003cec:	4618      	mov	r0, r3
 8003cee:	f000 fe73 	bl	80049d8 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x60000000;
 8003cf6:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 8003cfa:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8003cfc:	231f      	movs	r3, #31
 8003cfe:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8003d00:	2387      	movs	r3, #135	@ 0x87
 8003d02:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8003d04:	2300      	movs	r3, #0
 8003d06:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003d10:	463b      	mov	r3, r7
 8003d12:	4618      	mov	r0, r3
 8003d14:	f000 fe60 	bl	80049d8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8003d18:	2004      	movs	r0, #4
 8003d1a:	f000 fe3d 	bl	8004998 <HAL_MPU_Enable>

}
 8003d1e:	bf00      	nop
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d26:	b480      	push	{r7}
 8003d28:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003d2a:	b672      	cpsid	i
}
 8003d2c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003d2e:	bf00      	nop
 8003d30:	e7fd      	b.n	8003d2e <Error_Handler+0x8>
	...

08003d34 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	portENTER_CRITICAL();
 8003d3e:	f009 f907 	bl	800cf50 <vPortEnterCritical>

	printf("HAL_ASSERT: %s:::%u\r\n", (char*)file, (unsigned int)line);
 8003d42:	683a      	ldr	r2, [r7, #0]
 8003d44:	6879      	ldr	r1, [r7, #4]
 8003d46:	4805      	ldr	r0, [pc, #20]	@ (8003d5c <assert_failed+0x28>)
 8003d48:	f00b fa9a 	bl	800f280 <iprintf>
	assert(0);
 8003d4c:	4b04      	ldr	r3, [pc, #16]	@ (8003d60 <assert_failed+0x2c>)
 8003d4e:	4a05      	ldr	r2, [pc, #20]	@ (8003d64 <assert_failed+0x30>)
 8003d50:	f240 3147 	movw	r1, #839	@ 0x347
 8003d54:	4804      	ldr	r0, [pc, #16]	@ (8003d68 <assert_failed+0x34>)
 8003d56:	f009 f9eb 	bl	800d130 <__assert_func>
 8003d5a:	bf00      	nop
 8003d5c:	08013260 	.word	0x08013260
 8003d60:	08013278 	.word	0x08013278
 8003d64:	08013b14 	.word	0x08013b14
 8003d68:	0801327c 	.word	0x0801327c

08003d6c <initialise_monitor_handles>:
 * is called. afterwards main would be called.
 */
// ----------------------------------------------------------------------------
void initialise_monitor_handles( void )
// ----------------------------------------------------------------------------
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	af00      	add	r7, sp, #0

}
 8003d70:	bf00      	nop
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
	...

08003d7c <initialise_stdlib_abstraction>:
 */
// ----------------------------------------------------------------------------
__attribute__((constructor))
void initialise_stdlib_abstraction( void )
// ----------------------------------------------------------------------------
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0
    initialise_monitor_handles();
 8003d80:	f7ff fff4 	bl	8003d6c <initialise_monitor_handles>

#if defined(INC_FREERTOS_H) && defined(MV_SYSCALL_USE_EXCLUSIVE_LOCK_FOR_STDOUT)
    stdioSemaphore = xSemaphoreCreateRecursiveMutex();
 8003d84:	2004      	movs	r0, #4
 8003d86:	f006 f9ec 	bl	800a162 <xQueueCreateMutex>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	4a15      	ldr	r2, [pc, #84]	@ (8003de4 <initialise_stdlib_abstraction+0x68>)
 8003d8e:	6013      	str	r3, [r2, #0]

    if ( stdioSemaphore == 0 )
 8003d90:	4b14      	ldr	r3, [pc, #80]	@ (8003de4 <initialise_stdlib_abstraction+0x68>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d104      	bne.n	8003da2 <initialise_stdlib_abstraction+0x26>
    {
        vAssertCalled( __FILE__, __LINE__ );
 8003d98:	f240 110b 	movw	r1, #267	@ 0x10b
 8003d9c:	4812      	ldr	r0, [pc, #72]	@ (8003de8 <initialise_stdlib_abstraction+0x6c>)
 8003d9e:	f7ff ff13 	bl	8003bc8 <vAssertCalled>
    }
#endif
#if defined(INC_FREERTOS_H) && defined(MV_SYSCALL_USE_EXCLUSIVE_LOCK_FOR_MALLOC)
    mallocSemaphore = xSemaphoreCreateRecursiveMutex();
 8003da2:	2004      	movs	r0, #4
 8003da4:	f006 f9dd 	bl	800a162 <xQueueCreateMutex>
 8003da8:	4603      	mov	r3, r0
 8003daa:	4a10      	ldr	r2, [pc, #64]	@ (8003dec <initialise_stdlib_abstraction+0x70>)
 8003dac:	6013      	str	r3, [r2, #0]

    if ( mallocSemaphore == 0 )
 8003dae:	4b0f      	ldr	r3, [pc, #60]	@ (8003dec <initialise_stdlib_abstraction+0x70>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d104      	bne.n	8003dc0 <initialise_stdlib_abstraction+0x44>
    {
        vAssertCalled( __FILE__, __LINE__ );
 8003db6:	f240 1113 	movw	r1, #275	@ 0x113
 8003dba:	480b      	ldr	r0, [pc, #44]	@ (8003de8 <initialise_stdlib_abstraction+0x6c>)
 8003dbc:	f7ff ff04 	bl	8003bc8 <vAssertCalled>
    }
#endif
#if defined(INC_FREERTOS_H) && defined(MV_SYSCALL_USE_EXCLUSIVE_LOCK_FOR_ENV)
    envSemaphore = xSemaphoreCreateRecursiveMutex();
 8003dc0:	2004      	movs	r0, #4
 8003dc2:	f006 f9ce 	bl	800a162 <xQueueCreateMutex>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	4a09      	ldr	r2, [pc, #36]	@ (8003df0 <initialise_stdlib_abstraction+0x74>)
 8003dca:	6013      	str	r3, [r2, #0]

    if ( envSemaphore == 0 )
 8003dcc:	4b08      	ldr	r3, [pc, #32]	@ (8003df0 <initialise_stdlib_abstraction+0x74>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d104      	bne.n	8003dde <initialise_stdlib_abstraction+0x62>
    {
        vAssertCalled( __FILE__, __LINE__ );
 8003dd4:	f240 111b 	movw	r1, #283	@ 0x11b
 8003dd8:	4803      	ldr	r0, [pc, #12]	@ (8003de8 <initialise_stdlib_abstraction+0x6c>)
 8003dda:	f7ff fef5 	bl	8003bc8 <vAssertCalled>
    }
#endif
}
 8003dde:	bf00      	nop
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	20000364 	.word	0x20000364
 8003de8:	08013354 	.word	0x08013354
 8003dec:	20000368 	.word	0x20000368
 8003df0:	2000036c 	.word	0x2000036c

08003df4 <_getpid>:
 * "machine mode"
 */
// ----------------------------------------------------------------------------
int _getpid( void )
// ----------------------------------------------------------------------------
{
 8003df4:	b480      	push	{r7}
 8003df6:	af00      	add	r7, sp, #0
    return 1;
 8003df8:	2301      	movs	r3, #1
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <_kill>:
 * process with PID 1
 */
// ----------------------------------------------------------------------------
int _kill( int pid, int sig )
// ----------------------------------------------------------------------------
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
    ( void )pid;
    ( void )sig;

    if ( _impure_ptr != 0 )
 8003e0e:	4b09      	ldr	r3, [pc, #36]	@ (8003e34 <_kill+0x30>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d003      	beq.n	8003e1e <_kill+0x1a>
    {
        _impure_ptr->_errno = EINVAL;
 8003e16:	4b07      	ldr	r3, [pc, #28]	@ (8003e34 <_kill+0x30>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2216      	movs	r2, #22
 8003e1c:	601a      	str	r2, [r3, #0]
    }
    errno = EINVAL;
 8003e1e:	f00b fdbd 	bl	800f99c <__errno>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2216      	movs	r2, #22
 8003e26:	601a      	str	r2, [r3, #0]
    return -1;
 8003e28:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3708      	adds	r7, #8
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	200001c0 	.word	0x200001c0

08003e38 <_exit>:
 */
// ----------------------------------------------------------------------------
__attribute__( ( noreturn ) )
void _exit ( int status )
// ----------------------------------------------------------------------------
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
    _kill( status, -1 );
 8003e40:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f7ff ffdd 	bl	8003e04 <_kill>
    while ( 1 ) {}
 8003e4a:	bf00      	nop
 8003e4c:	e7fd      	b.n	8003e4a <_exit+0x12>
	...

08003e50 <_read>:
 * An example can be seen in altera board support packages with the "dev" struct
 */
// ----------------------------------------------------------------------------
int _read( int file, char* ptr, int len )
// ----------------------------------------------------------------------------
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b088      	sub	sp, #32
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	607a      	str	r2, [r7, #4]
    ( void )file;

    int DataIdx;
    int resLen = 0;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	61bb      	str	r3, [r7, #24]

    if ( file == STDIN_FILENO )
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d121      	bne.n	8003eaa <_read+0x5a>
    {
        for ( DataIdx = 0; DataIdx < len; )
 8003e66:	2300      	movs	r3, #0
 8003e68:	61fb      	str	r3, [r7, #28]
 8003e6a:	e019      	b.n	8003ea0 <_read+0x50>
        {
            int result = __stdin_get_char();
 8003e6c:	f7ff fee4 	bl	8003c38 <__stdin_get_char>
 8003e70:	6178      	str	r0, [r7, #20]
            if ( result == EOF )
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e78:	d106      	bne.n	8003e88 <_read+0x38>
            {
                if ( resLen == 0 )
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d124      	bne.n	8003eca <_read+0x7a>
                {
                    resLen = EOF;
 8003e80:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003e84:	61bb      	str	r3, [r7, #24]
                }
                break;
 8003e86:	e020      	b.n	8003eca <_read+0x7a>
            }

            *ptr++ = ( char )result;
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	1c5a      	adds	r2, r3, #1
 8003e8c:	60ba      	str	r2, [r7, #8]
 8003e8e:	697a      	ldr	r2, [r7, #20]
 8003e90:	b2d2      	uxtb	r2, r2
 8003e92:	701a      	strb	r2, [r3, #0]
            resLen++;
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	3301      	adds	r3, #1
 8003e98:	61bb      	str	r3, [r7, #24]
            DataIdx++;
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	61fb      	str	r3, [r7, #28]
        for ( DataIdx = 0; DataIdx < len; )
 8003ea0:	69fa      	ldr	r2, [r7, #28]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	dbe1      	blt.n	8003e6c <_read+0x1c>
 8003ea8:	e010      	b.n	8003ecc <_read+0x7c>

        }
    }
    else
    {
        if ( _impure_ptr != 0 )
 8003eaa:	4b0b      	ldr	r3, [pc, #44]	@ (8003ed8 <_read+0x88>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d003      	beq.n	8003eba <_read+0x6a>
        {
            _impure_ptr->_errno = EBADF;
 8003eb2:	4b09      	ldr	r3, [pc, #36]	@ (8003ed8 <_read+0x88>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2209      	movs	r2, #9
 8003eb8:	601a      	str	r2, [r3, #0]
        }
        errno = EBADF;
 8003eba:	f00b fd6f 	bl	800f99c <__errno>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2209      	movs	r2, #9
 8003ec2:	601a      	str	r2, [r3, #0]
        return -1;
 8003ec4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003ec8:	e001      	b.n	8003ece <_read+0x7e>
                break;
 8003eca:	bf00      	nop
    }

    return resLen;
 8003ecc:	69bb      	ldr	r3, [r7, #24]
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3720      	adds	r7, #32
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	200001c0 	.word	0x200001c0

08003edc <_write>:
 * An example can be seen in altera board support packages with the "dev" struct
 */
// ----------------------------------------------------------------------------
int _write( int file, char* ptr, int len )
// ----------------------------------------------------------------------------
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b086      	sub	sp, #24
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	607a      	str	r2, [r7, #4]
    ( void )file;

    int DataIdx, locked = 0;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	613b      	str	r3, [r7, #16]

    if ( file == STDOUT_FILENO || file == STDERR_FILENO )
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d002      	beq.n	8003ef8 <_write+0x1c>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d149      	bne.n	8003f8c <_write+0xb0>
    {

#if  defined(INC_FREERTOS_H) && defined(MV_SYSCALL_USE_EXCLUSIVE_LOCK_FOR_STDOUT)
        if ( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003ef8:	f008 f94c 	bl	800c194 <xTaskGetSchedulerState>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d108      	bne.n	8003f14 <_write+0x38>
        {
            xSemaphoreTakeRecursive( stdioSemaphore, -1 );
 8003f02:	4b2c      	ldr	r3, [pc, #176]	@ (8003fb4 <_write+0xd8>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f006 f97e 	bl	800a20c <xQueueTakeMutexRecursive>
            locked = 1;
 8003f10:	2301      	movs	r3, #1
 8003f12:	613b      	str	r3, [r7, #16]
        }
#endif

        if (file == STDERR_FILENO)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d10e      	bne.n	8003f38 <_write+0x5c>
        {
        	__stdout_put_char('\033');
 8003f1a:	201b      	movs	r0, #27
 8003f1c:	f7ff fe68 	bl	8003bf0 <__stdout_put_char>
        	__stdout_put_char('[');
 8003f20:	205b      	movs	r0, #91	@ 0x5b
 8003f22:	f7ff fe65 	bl	8003bf0 <__stdout_put_char>
        	__stdout_put_char('3');
 8003f26:	2033      	movs	r0, #51	@ 0x33
 8003f28:	f7ff fe62 	bl	8003bf0 <__stdout_put_char>
        	__stdout_put_char('1');
 8003f2c:	2031      	movs	r0, #49	@ 0x31
 8003f2e:	f7ff fe5f 	bl	8003bf0 <__stdout_put_char>
        	__stdout_put_char('m');
 8003f32:	206d      	movs	r0, #109	@ 0x6d
 8003f34:	f7ff fe5c 	bl	8003bf0 <__stdout_put_char>
        }
        for ( DataIdx = 0; DataIdx < len; DataIdx++ )
 8003f38:	2300      	movs	r3, #0
 8003f3a:	617b      	str	r3, [r7, #20]
 8003f3c:	e009      	b.n	8003f52 <_write+0x76>
        {
            __stdout_put_char( ptr[DataIdx] );
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	68ba      	ldr	r2, [r7, #8]
 8003f42:	4413      	add	r3, r2
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7ff fe52 	bl	8003bf0 <__stdout_put_char>
        for ( DataIdx = 0; DataIdx < len; DataIdx++ )
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	3301      	adds	r3, #1
 8003f50:	617b      	str	r3, [r7, #20]
 8003f52:	697a      	ldr	r2, [r7, #20]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	dbf1      	blt.n	8003f3e <_write+0x62>
        }
        if (file == STDERR_FILENO)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d10b      	bne.n	8003f78 <_write+0x9c>
        {
        	__stdout_put_char('\033');
 8003f60:	201b      	movs	r0, #27
 8003f62:	f7ff fe45 	bl	8003bf0 <__stdout_put_char>
        	__stdout_put_char('[');
 8003f66:	205b      	movs	r0, #91	@ 0x5b
 8003f68:	f7ff fe42 	bl	8003bf0 <__stdout_put_char>
        	__stdout_put_char('0');
 8003f6c:	2030      	movs	r0, #48	@ 0x30
 8003f6e:	f7ff fe3f 	bl	8003bf0 <__stdout_put_char>
        	__stdout_put_char('m');
 8003f72:	206d      	movs	r0, #109	@ 0x6d
 8003f74:	f7ff fe3c 	bl	8003bf0 <__stdout_put_char>
        }

#if defined(INC_FREERTOS_H) && defined(MV_SYSCALL_USE_EXCLUSIVE_LOCK_FOR_STDOUT)
        if ( locked )
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d004      	beq.n	8003f88 <_write+0xac>
        {
            xSemaphoreGiveRecursive( stdioSemaphore );
 8003f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8003fb4 <_write+0xd8>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4618      	mov	r0, r3
 8003f84:	f006 f906 	bl	800a194 <xQueueGiveMutexRecursive>
        }
#endif

        return len;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	e00e      	b.n	8003faa <_write+0xce>
    }
    else
    {
        if ( _impure_ptr != 0 )
 8003f8c:	4b0a      	ldr	r3, [pc, #40]	@ (8003fb8 <_write+0xdc>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d003      	beq.n	8003f9c <_write+0xc0>
        {
            _impure_ptr->_errno = EBADF;
 8003f94:	4b08      	ldr	r3, [pc, #32]	@ (8003fb8 <_write+0xdc>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2209      	movs	r2, #9
 8003f9a:	601a      	str	r2, [r3, #0]
        }
        errno = EBADF;
 8003f9c:	f00b fcfe 	bl	800f99c <__errno>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2209      	movs	r2, #9
 8003fa4:	601a      	str	r2, [r3, #0]
        return -1;
 8003fa6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
    }
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3718      	adds	r7, #24
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	20000364 	.word	0x20000364
 8003fb8:	200001c0 	.word	0x200001c0

08003fbc <_close>:
 * An example can be seen in altera board support packages with the "dev" struct
 */
// ----------------------------------------------------------------------------
int _close( int file )
// ----------------------------------------------------------------------------
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
    ( void )file;

    return -1;
 8003fc4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <_fstat>:
 * An example can be seen in altera board support packages with the "dev" struct
 */
// ----------------------------------------------------------------------------
int _fstat( int file, struct stat* st )
// ----------------------------------------------------------------------------
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
    st->st_dev    = file;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	b21a      	sxth	r2, r3
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	801a      	strh	r2, [r3, #0]
    st->st_size   = 0;
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	611a      	str	r2, [r3, #16]
    st->st_blocks = 0;
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	64da      	str	r2, [r3, #76]	@ 0x4c

    if ( file >= 1 && file <= 3 )
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	dd08      	ble.n	800400a <_fstat+0x36>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2b03      	cmp	r3, #3
 8003ffc:	dc05      	bgt.n	800400a <_fstat+0x36>
    {
        st->st_mode = S_IFCHR;
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004004:	605a      	str	r2, [r3, #4]
        return 0;
 8004006:	2300      	movs	r3, #0
 8004008:	e005      	b.n	8004016 <_fstat+0x42>
    }
    else
    {
        st->st_mode = S_IFREG;
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004010:	605a      	str	r2, [r3, #4]
        return -1;
 8004012:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
    }
}
 8004016:	4618      	mov	r0, r3
 8004018:	370c      	adds	r7, #12
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr

08004022 <_isatty>:
 * An example can be seen in altera board support packages with the "dev" struct
 */
// ----------------------------------------------------------------------------
int _isatty( int file )
// ----------------------------------------------------------------------------
{
 8004022:	b480      	push	{r7}
 8004024:	b083      	sub	sp, #12
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
    // is stdin, stdout or stderror
    if ( file >= 0 && file <= 2 )
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2b00      	cmp	r3, #0
 800402e:	db04      	blt.n	800403a <_isatty+0x18>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2b02      	cmp	r3, #2
 8004034:	dc01      	bgt.n	800403a <_isatty+0x18>
    {
        return file;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	e000      	b.n	800403c <_isatty+0x1a>
    }
    return 0;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <_lseek>:

// ----------------------------------------------------------------------------
int _lseek( int file, int ptr, int dir )
// ----------------------------------------------------------------------------
{
 8004048:	b480      	push	{r7}
 800404a:	b085      	sub	sp, #20
 800404c:	af00      	add	r7, sp, #0
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	607a      	str	r2, [r7, #4]
    ( void )file;
    ( void )ptr;
    ( void )dir;

    return 0;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3714      	adds	r7, #20
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
	...

08004064 <_sbrk_r>:
static UBaseType_t malLock_uxSavedInterruptStatus;

// ----------------------------------------------------------------------------
void* _sbrk_r( struct _reent* pReent, int incr )
// ----------------------------------------------------------------------------
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b088      	sub	sp, #32
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
    ( void )pReent;
    ( void )incr;
    register char* stack_ptr asm( "sp" );

    // make sure to calculate the correct heap size and bytes remaining at the first call!
    if( TotalHeapSize == 0 )
 800406e:	4b37      	ldr	r3, [pc, #220]	@ (800414c <_sbrk_r+0xe8>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d113      	bne.n	800409e <_sbrk_r+0x3a>
    {
        TotalHeapSize = heapBytesRemaining = stickyHeapBytesRemaining
                                             = ( int )( ( &__HeapLimit ) - ( &__HeapBase ) )
 8004076:	4a36      	ldr	r2, [pc, #216]	@ (8004150 <_sbrk_r+0xec>)
 8004078:	4b36      	ldr	r3, [pc, #216]	@ (8004154 <_sbrk_r+0xf0>)
 800407a:	1ad3      	subs	r3, r2, r3
#ifdef configISR_STACK_SIZE_WORDS
                                               - ( configISR_STACK_SIZE_WORDS * 4 )
 800407c:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8004080:	461a      	mov	r2, r3
                                             = ( int )( ( &__HeapLimit ) - ( &__HeapBase ) )
 8004082:	4b35      	ldr	r3, [pc, #212]	@ (8004158 <_sbrk_r+0xf4>)
 8004084:	601a      	str	r2, [r3, #0]
 8004086:	4a32      	ldr	r2, [pc, #200]	@ (8004150 <_sbrk_r+0xec>)
 8004088:	4b32      	ldr	r3, [pc, #200]	@ (8004154 <_sbrk_r+0xf0>)
 800408a:	1ad3      	subs	r3, r2, r3
                                               - ( configISR_STACK_SIZE_WORDS * 4 )
 800408c:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
        TotalHeapSize = heapBytesRemaining = stickyHeapBytesRemaining
 8004090:	4a32      	ldr	r2, [pc, #200]	@ (800415c <_sbrk_r+0xf8>)
 8004092:	6013      	str	r3, [r2, #0]
 8004094:	4b31      	ldr	r3, [pc, #196]	@ (800415c <_sbrk_r+0xf8>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	461a      	mov	r2, r3
 800409a:	4b2c      	ldr	r3, [pc, #176]	@ (800414c <_sbrk_r+0xe8>)
 800409c:	601a      	str	r2, [r3, #0]
#endif
                                               ;
    };
    static char* currentHeapEnd = &__HeapBase;
    char* limit = ( xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED ) ?
 800409e:	f008 f879 	bl	800c194 <xTaskGetSchedulerState>
 80040a2:	4603      	mov	r3, r0
                  stack_ptr   :  // Before scheduler is started, limit is stack pointer (risky!)
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d101      	bne.n	80040ac <_sbrk_r+0x48>
 80040a8:	466b      	mov	r3, sp
 80040aa:	e000      	b.n	80040ae <_sbrk_r+0x4a>
 80040ac:	4b2c      	ldr	r3, [pc, #176]	@ (8004160 <_sbrk_r+0xfc>)
    char* limit = ( xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED ) ?
 80040ae:	61fb      	str	r3, [r7, #28]
    __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80040b0:	f3ef 8305 	mrs	r3, IPSR
 80040b4:	613b      	str	r3, [r7, #16]
    if( ulCurrentInterrupt == 0 )
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d102      	bne.n	80040c2 <_sbrk_r+0x5e>
        xReturn = pdFALSE;
 80040bc:	2300      	movs	r3, #0
 80040be:	60fb      	str	r3, [r7, #12]
 80040c0:	e001      	b.n	80040c6 <_sbrk_r+0x62>
        xReturn = pdTRUE;
 80040c2:	2301      	movs	r3, #1
 80040c4:	60fb      	str	r3, [r7, #12]
    return xReturn;
 80040c6:	68fb      	ldr	r3, [r7, #12]
                  &__HeapLimit
#ifdef configISR_STACK_SIZE_WORDS
                  - ( configISR_STACK_SIZE_WORDS * 4 )
#endif
                  ; // Once running, OK to reuse all remaining RAM except ISR stack (MSP) stack
    DRN_ENTER_CRITICAL_SECTION( malLock_uxSavedInterruptStatus );
 80040c8:	61bb      	str	r3, [r7, #24]
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d010      	beq.n	80040f2 <_sbrk_r+0x8e>
    __asm volatile
 80040d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040d4:	b672      	cpsid	i
 80040d6:	f383 8811 	msr	BASEPRI, r3
 80040da:	f3bf 8f6f 	isb	sy
 80040de:	f3bf 8f4f 	dsb	sy
 80040e2:	b662      	cpsie	i
 80040e4:	60bb      	str	r3, [r7, #8]
}
 80040e6:	bf00      	nop
 80040e8:	f240 21c1 	movw	r1, #705	@ 0x2c1
 80040ec:	481d      	ldr	r0, [pc, #116]	@ (8004164 <_sbrk_r+0x100>)
 80040ee:	f7ff fd6b 	bl	8003bc8 <vAssertCalled>
    if ( currentHeapEnd + incr > limit )
 80040f2:	4b1d      	ldr	r3, [pc, #116]	@ (8004168 <_sbrk_r+0x104>)
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	4413      	add	r3, r2
 80040fa:	69fa      	ldr	r2, [r7, #28]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d204      	bcs.n	800410a <_sbrk_r+0xa6>
        // Ooops, no more memory available...
#if( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            extern void vApplicationMallocFailedHook( void );
            DRN_EXIT_CRITICAL_SECTION( malLock_uxSavedInterruptStatus );
            vApplicationMallocFailedHook();
 8004100:	f7ff fa9c 	bl	800363c <vApplicationMallocFailedHook>
#else
        // Default, if you prefer to believe your application will gracefully trap out-of-memory...
        pReent->_errno = ENOMEM; // newlib's thread-specific errno
        DRN_EXIT_CRITICAL_SECTION( malLock_uxSavedInterruptStatus );
#endif
        return ( char* ) -1; // the malloc-family routine that called sbrk will return 0
 8004104:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004108:	e01b      	b.n	8004142 <_sbrk_r+0xde>
    }

    char* previousHeapEnd = currentHeapEnd;
 800410a:	4b17      	ldr	r3, [pc, #92]	@ (8004168 <_sbrk_r+0x104>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	617b      	str	r3, [r7, #20]
    currentHeapEnd += incr;
 8004110:	4b15      	ldr	r3, [pc, #84]	@ (8004168 <_sbrk_r+0x104>)
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	4413      	add	r3, r2
 8004118:	4a13      	ldr	r2, [pc, #76]	@ (8004168 <_sbrk_r+0x104>)
 800411a:	6013      	str	r3, [r2, #0]
    heapBytesRemaining -= incr;
 800411c:	4b0f      	ldr	r3, [pc, #60]	@ (800415c <_sbrk_r+0xf8>)
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	4a0d      	ldr	r2, [pc, #52]	@ (800415c <_sbrk_r+0xf8>)
 8004126:	6013      	str	r3, [r2, #0]

    // implement the statistical feature to provide the minimum free heap size feature
    // of FreeRTOS statistics
    if ( stickyHeapBytesRemaining > xPortGetFreeHeapSize() )
 8004128:	f000 f8d0 	bl	80042cc <xPortGetFreeHeapSize>
 800412c:	4602      	mov	r2, r0
 800412e:	4b0a      	ldr	r3, [pc, #40]	@ (8004158 <_sbrk_r+0xf4>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	429a      	cmp	r2, r3
 8004134:	d204      	bcs.n	8004140 <_sbrk_r+0xdc>
    {
        stickyHeapBytesRemaining = xPortGetFreeHeapSize();
 8004136:	f000 f8c9 	bl	80042cc <xPortGetFreeHeapSize>
 800413a:	4603      	mov	r3, r0
 800413c:	4a06      	ldr	r2, [pc, #24]	@ (8004158 <_sbrk_r+0xf4>)
 800413e:	6013      	str	r3, [r2, #0]
    }

    DRN_EXIT_CRITICAL_SECTION( malLock_uxSavedInterruptStatus );
    return ( char* ) previousHeapEnd;
 8004140:	697b      	ldr	r3, [r7, #20]
}
 8004142:	4618      	mov	r0, r3
 8004144:	3720      	adds	r7, #32
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	20000378 	.word	0x20000378
 8004150:	20050000 	.word	0x20050000
 8004154:	20000678 	.word	0x20000678
 8004158:	20000374 	.word	0x20000374
 800415c:	20000370 	.word	0x20000370
 8004160:	2004c000 	.word	0x2004c000
 8004164:	08013354 	.word	0x08013354
 8004168:	20000034 	.word	0x20000034

0800416c <__malloc_lock>:
}

// ----------------------------------------------------------------------------
__attribute__( ( weak ) ) void __malloc_lock( struct _reent* r )
// ----------------------------------------------------------------------------
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b086      	sub	sp, #24
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
    ( void )r;

#if  defined(INC_FREERTOS_H) && defined(MV_SYSCALL_USE_EXCLUSIVE_LOCK_FOR_MALLOC)
    if ( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING  )
 8004174:	f008 f80e 	bl	800c194 <xTaskGetSchedulerState>
 8004178:	4603      	mov	r3, r0
 800417a:	2b02      	cmp	r3, #2
 800417c:	d106      	bne.n	800418c <__malloc_lock+0x20>
    {
        xSemaphoreTakeRecursive( mallocSemaphore, -1 );
 800417e:	4b16      	ldr	r3, [pc, #88]	@ (80041d8 <__malloc_lock+0x6c>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004186:	4618      	mov	r0, r3
 8004188:	f006 f840 	bl	800a20c <xQueueTakeMutexRecursive>
    __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800418c:	f3ef 8305 	mrs	r3, IPSR
 8004190:	613b      	str	r3, [r7, #16]
    if( ulCurrentInterrupt == 0 )
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d102      	bne.n	800419e <__malloc_lock+0x32>
        xReturn = pdFALSE;
 8004198:	2300      	movs	r3, #0
 800419a:	60fb      	str	r3, [r7, #12]
 800419c:	e001      	b.n	80041a2 <__malloc_lock+0x36>
        xReturn = pdTRUE;
 800419e:	2301      	movs	r3, #1
 80041a0:	60fb      	str	r3, [r7, #12]
    return xReturn;
 80041a2:	68fb      	ldr	r3, [r7, #12]
    }
#endif

    DRN_ENTER_CRITICAL_SECTION( malLock_uxSavedInterruptStatus );
 80041a4:	617b      	str	r3, [r7, #20]
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d010      	beq.n	80041ce <__malloc_lock+0x62>
    __asm volatile
 80041ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041b0:	b672      	cpsid	i
 80041b2:	f383 8811 	msr	BASEPRI, r3
 80041b6:	f3bf 8f6f 	isb	sy
 80041ba:	f3bf 8f4f 	dsb	sy
 80041be:	b662      	cpsie	i
 80041c0:	60bb      	str	r3, [r7, #8]
}
 80041c2:	bf00      	nop
 80041c4:	f44f 7142 	mov.w	r1, #776	@ 0x308
 80041c8:	4804      	ldr	r0, [pc, #16]	@ (80041dc <__malloc_lock+0x70>)
 80041ca:	f7ff fcfd 	bl	8003bc8 <vAssertCalled>
}
 80041ce:	bf00      	nop
 80041d0:	3718      	adds	r7, #24
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	20000368 	.word	0x20000368
 80041dc:	08013354 	.word	0x08013354

080041e0 <__malloc_unlock>:

// ----------------------------------------------------------------------------
__attribute__( ( weak ) ) void __malloc_unlock( struct _reent* r )
// ----------------------------------------------------------------------------
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
    ( void )r;

#if  defined(INC_FREERTOS_H) && defined(MV_SYSCALL_USE_EXCLUSIVE_LOCK_FOR_MALLOC)
    if ( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80041e8:	f007 ffd4 	bl	800c194 <xTaskGetSchedulerState>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d104      	bne.n	80041fc <__malloc_unlock+0x1c>
    {
        xSemaphoreGiveRecursive( mallocSemaphore );
 80041f2:	4b04      	ldr	r3, [pc, #16]	@ (8004204 <__malloc_unlock+0x24>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4618      	mov	r0, r3
 80041f8:	f005 ffcc 	bl	800a194 <xQueueGiveMutexRecursive>
    }
#endif

    DRN_EXIT_CRITICAL_SECTION( malLock_uxSavedInterruptStatus );
}
 80041fc:	bf00      	nop
 80041fe:	3708      	adds	r7, #8
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	20000368 	.word	0x20000368

08004208 <__env_lock>:

// ----------------------------------------------------------------------------
__attribute__( ( weak ) ) void __env_lock( void )
// ----------------------------------------------------------------------------
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
#if  defined(INC_FREERTOS_H) && defined(MV_SYSCALL_USE_EXCLUSIVE_LOCK_FOR_ENV)
    if ( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800420e:	f007 ffc1 	bl	800c194 <xTaskGetSchedulerState>
 8004212:	4603      	mov	r3, r0
 8004214:	2b02      	cmp	r3, #2
 8004216:	d106      	bne.n	8004226 <__env_lock+0x1e>
    {
        xSemaphoreTakeRecursive( envSemaphore, -1 );
 8004218:	4b15      	ldr	r3, [pc, #84]	@ (8004270 <__env_lock+0x68>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004220:	4618      	mov	r0, r3
 8004222:	f005 fff3 	bl	800a20c <xQueueTakeMutexRecursive>
    __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004226:	f3ef 8305 	mrs	r3, IPSR
 800422a:	60bb      	str	r3, [r7, #8]
    if( ulCurrentInterrupt == 0 )
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d102      	bne.n	8004238 <__env_lock+0x30>
        xReturn = pdFALSE;
 8004232:	2300      	movs	r3, #0
 8004234:	607b      	str	r3, [r7, #4]
 8004236:	e001      	b.n	800423c <__env_lock+0x34>
        xReturn = pdTRUE;
 8004238:	2301      	movs	r3, #1
 800423a:	607b      	str	r3, [r7, #4]
    return xReturn;
 800423c:	687b      	ldr	r3, [r7, #4]
    }
#endif

    DRN_ENTER_CRITICAL_SECTION( malLock_uxSavedInterruptStatus );
 800423e:	60fb      	str	r3, [r7, #12]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d010      	beq.n	8004268 <__env_lock+0x60>
    __asm volatile
 8004246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800424a:	b672      	cpsid	i
 800424c:	f383 8811 	msr	BASEPRI, r3
 8004250:	f3bf 8f6f 	isb	sy
 8004254:	f3bf 8f4f 	dsb	sy
 8004258:	b662      	cpsie	i
 800425a:	603b      	str	r3, [r7, #0]
}
 800425c:	bf00      	nop
 800425e:	f240 3126 	movw	r1, #806	@ 0x326
 8004262:	4804      	ldr	r0, [pc, #16]	@ (8004274 <__env_lock+0x6c>)
 8004264:	f7ff fcb0 	bl	8003bc8 <vAssertCalled>
}
 8004268:	bf00      	nop
 800426a:	3710      	adds	r7, #16
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	2000036c 	.word	0x2000036c
 8004274:	08013354 	.word	0x08013354

08004278 <__env_unlock>:

// ----------------------------------------------------------------------------
__attribute__( ( weak ) ) void __env_unlock( void )
// ----------------------------------------------------------------------------
{
 8004278:	b580      	push	{r7, lr}
 800427a:	af00      	add	r7, sp, #0
#if  defined(INC_FREERTOS_H) && defined(MV_SYSCALL_USE_EXCLUSIVE_LOCK_FOR_ENV)
    if ( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800427c:	f007 ff8a 	bl	800c194 <xTaskGetSchedulerState>
 8004280:	4603      	mov	r3, r0
 8004282:	2b02      	cmp	r3, #2
 8004284:	d104      	bne.n	8004290 <__env_unlock+0x18>
    {
        xSemaphoreGiveRecursive( envSemaphore );
 8004286:	4b03      	ldr	r3, [pc, #12]	@ (8004294 <__env_unlock+0x1c>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4618      	mov	r0, r3
 800428c:	f005 ff82 	bl	800a194 <xQueueGiveMutexRecursive>
    }
#endif

    DRN_EXIT_CRITICAL_SECTION( malLock_uxSavedInterruptStatus );
}
 8004290:	bf00      	nop
 8004292:	bd80      	pop	{r7, pc}
 8004294:	2000036c 	.word	0x2000036c

08004298 <pvPortMalloc>:

// ----------------------------------------------------------------------------
void* pvPortMalloc( size_t xSize )
// ----------------------------------------------------------------------------
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
    void* p = malloc( xSize );
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f008 ffcb 	bl	800d23c <malloc>
 80042a6:	4603      	mov	r3, r0
 80042a8:	60fb      	str	r3, [r7, #12]
    return p;
 80042aa:	68fb      	ldr	r3, [r7, #12]
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <vPortFree>:

// ----------------------------------------------------------------------------
void vPortFree( void* pv )
// ----------------------------------------------------------------------------
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
    free( pv );
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f008 ffc5 	bl	800d24c <free>
}
 80042c2:	bf00      	nop
 80042c4:	3708      	adds	r7, #8
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
	...

080042cc <xPortGetFreeHeapSize>:

// ----------------------------------------------------------------------------
size_t xPortGetFreeHeapSize( void )
// ----------------------------------------------------------------------------
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b08c      	sub	sp, #48	@ 0x30
 80042d0:	af00      	add	r7, sp, #0
	static int lockGuard = 0;
	if ( lockGuard != 0 ) return stickyHeapBytesRemaining;
 80042d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004308 <xPortGetFreeHeapSize+0x3c>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d002      	beq.n	80042e0 <xPortGetFreeHeapSize+0x14>
 80042da:	4b0c      	ldr	r3, [pc, #48]	@ (800430c <xPortGetFreeHeapSize+0x40>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	e00f      	b.n	8004300 <xPortGetFreeHeapSize+0x34>
	lockGuard = 1;
 80042e0:	4b09      	ldr	r3, [pc, #36]	@ (8004308 <xPortGetFreeHeapSize+0x3c>)
 80042e2:	2201      	movs	r2, #1
 80042e4:	601a      	str	r2, [r3, #0]
    struct mallinfo mi = mallinfo();
 80042e6:	1d3b      	adds	r3, r7, #4
 80042e8:	4618      	mov	r0, r3
 80042ea:	f009 f859 	bl	800d3a0 <mallinfo>
    size_t result = mi.fordblks + heapBytesRemaining;
 80042ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f0:	4a07      	ldr	r2, [pc, #28]	@ (8004310 <xPortGetFreeHeapSize+0x44>)
 80042f2:	6812      	ldr	r2, [r2, #0]
 80042f4:	4413      	add	r3, r2
 80042f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    lockGuard = 0;
 80042f8:	4b03      	ldr	r3, [pc, #12]	@ (8004308 <xPortGetFreeHeapSize+0x3c>)
 80042fa:	2200      	movs	r2, #0
 80042fc:	601a      	str	r2, [r3, #0]
    return result;
 80042fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

}
 8004300:	4618      	mov	r0, r3
 8004302:	3730      	adds	r7, #48	@ 0x30
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	2000037c 	.word	0x2000037c
 800430c:	20000374 	.word	0x20000374
 8004310:	20000370 	.word	0x20000370

08004314 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800431a:	4b0f      	ldr	r3, [pc, #60]	@ (8004358 <HAL_MspInit+0x44>)
 800431c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800431e:	4a0e      	ldr	r2, [pc, #56]	@ (8004358 <HAL_MspInit+0x44>)
 8004320:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004324:	6413      	str	r3, [r2, #64]	@ 0x40
 8004326:	4b0c      	ldr	r3, [pc, #48]	@ (8004358 <HAL_MspInit+0x44>)
 8004328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800432a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800432e:	607b      	str	r3, [r7, #4]
 8004330:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004332:	4b09      	ldr	r3, [pc, #36]	@ (8004358 <HAL_MspInit+0x44>)
 8004334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004336:	4a08      	ldr	r2, [pc, #32]	@ (8004358 <HAL_MspInit+0x44>)
 8004338:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800433c:	6453      	str	r3, [r2, #68]	@ 0x44
 800433e:	4b06      	ldr	r3, [pc, #24]	@ (8004358 <HAL_MspInit+0x44>)
 8004340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004342:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004346:	603b      	str	r3, [r7, #0]
 8004348:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800434a:	bf00      	nop
 800434c:	370c      	adds	r7, #12
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	40023800 	.word	0x40023800

0800435c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b08a      	sub	sp, #40	@ 0x28
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004364:	f107 0314 	add.w	r3, r7, #20
 8004368:	2200      	movs	r2, #0
 800436a:	601a      	str	r2, [r3, #0]
 800436c:	605a      	str	r2, [r3, #4]
 800436e:	609a      	str	r2, [r3, #8]
 8004370:	60da      	str	r2, [r3, #12]
 8004372:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a1b      	ldr	r2, [pc, #108]	@ (80043e8 <HAL_SPI_MspInit+0x8c>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d12f      	bne.n	80043de <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800437e:	4b1b      	ldr	r3, [pc, #108]	@ (80043ec <HAL_SPI_MspInit+0x90>)
 8004380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004382:	4a1a      	ldr	r2, [pc, #104]	@ (80043ec <HAL_SPI_MspInit+0x90>)
 8004384:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004388:	6453      	str	r3, [r2, #68]	@ 0x44
 800438a:	4b18      	ldr	r3, [pc, #96]	@ (80043ec <HAL_SPI_MspInit+0x90>)
 800438c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800438e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004392:	613b      	str	r3, [r7, #16]
 8004394:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004396:	4b15      	ldr	r3, [pc, #84]	@ (80043ec <HAL_SPI_MspInit+0x90>)
 8004398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800439a:	4a14      	ldr	r2, [pc, #80]	@ (80043ec <HAL_SPI_MspInit+0x90>)
 800439c:	f043 0301 	orr.w	r3, r3, #1
 80043a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80043a2:	4b12      	ldr	r3, [pc, #72]	@ (80043ec <HAL_SPI_MspInit+0x90>)
 80043a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	60fb      	str	r3, [r7, #12]
 80043ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = STEP_SPI_SCK_Pin|STEP_SPI_MISO_Pin|STEP_SPI_MOSI_Pin;
 80043ae:	23e0      	movs	r3, #224	@ 0xe0
 80043b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043b2:	2302      	movs	r3, #2
 80043b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043b6:	2300      	movs	r3, #0
 80043b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043ba:	2303      	movs	r3, #3
 80043bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80043be:	2305      	movs	r3, #5
 80043c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043c2:	f107 0314 	add.w	r3, r7, #20
 80043c6:	4619      	mov	r1, r3
 80043c8:	4809      	ldr	r0, [pc, #36]	@ (80043f0 <HAL_SPI_MspInit+0x94>)
 80043ca:	f000 fc7d 	bl	8004cc8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80043ce:	2200      	movs	r2, #0
 80043d0:	2105      	movs	r1, #5
 80043d2:	2023      	movs	r0, #35	@ 0x23
 80043d4:	f000 fa78 	bl	80048c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80043d8:	2023      	movs	r0, #35	@ 0x23
 80043da:	f000 faa1 	bl	8004920 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80043de:	bf00      	nop
 80043e0:	3728      	adds	r7, #40	@ 0x28
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	40013000 	.word	0x40013000
 80043ec:	40023800 	.word	0x40023800
 80043f0:	40020000 	.word	0x40020000

080043f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b085      	sub	sp, #20
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004404:	d10b      	bne.n	800441e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004406:	4b09      	ldr	r3, [pc, #36]	@ (800442c <HAL_TIM_Base_MspInit+0x38>)
 8004408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800440a:	4a08      	ldr	r2, [pc, #32]	@ (800442c <HAL_TIM_Base_MspInit+0x38>)
 800440c:	f043 0301 	orr.w	r3, r3, #1
 8004410:	6413      	str	r3, [r2, #64]	@ 0x40
 8004412:	4b06      	ldr	r3, [pc, #24]	@ (800442c <HAL_TIM_Base_MspInit+0x38>)
 8004414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	60fb      	str	r3, [r7, #12]
 800441c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800441e:	bf00      	nop
 8004420:	3714      	adds	r7, #20
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	40023800 	.word	0x40023800

08004430 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b088      	sub	sp, #32
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004438:	f107 030c 	add.w	r3, r7, #12
 800443c:	2200      	movs	r2, #0
 800443e:	601a      	str	r2, [r3, #0]
 8004440:	605a      	str	r2, [r3, #4]
 8004442:	609a      	str	r2, [r3, #8]
 8004444:	60da      	str	r2, [r3, #12]
 8004446:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004450:	d11c      	bne.n	800448c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004452:	4b10      	ldr	r3, [pc, #64]	@ (8004494 <HAL_TIM_MspPostInit+0x64>)
 8004454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004456:	4a0f      	ldr	r2, [pc, #60]	@ (8004494 <HAL_TIM_MspPostInit+0x64>)
 8004458:	f043 0302 	orr.w	r3, r3, #2
 800445c:	6313      	str	r3, [r2, #48]	@ 0x30
 800445e:	4b0d      	ldr	r3, [pc, #52]	@ (8004494 <HAL_TIM_MspPostInit+0x64>)
 8004460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	60bb      	str	r3, [r7, #8]
 8004468:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = SPINDLE_PWM_L_Pin|SPINDLE_PWM_R_Pin;
 800446a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800446e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004470:	2302      	movs	r3, #2
 8004472:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004474:	2300      	movs	r3, #0
 8004476:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004478:	2300      	movs	r3, #0
 800447a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800447c:	2301      	movs	r3, #1
 800447e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004480:	f107 030c 	add.w	r3, r7, #12
 8004484:	4619      	mov	r1, r3
 8004486:	4804      	ldr	r0, [pc, #16]	@ (8004498 <HAL_TIM_MspPostInit+0x68>)
 8004488:	f000 fc1e 	bl	8004cc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800448c:	bf00      	nop
 800448e:	3720      	adds	r7, #32
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}
 8004494:	40023800 	.word	0x40023800
 8004498:	40020400 	.word	0x40020400

0800449c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b0aa      	sub	sp, #168	@ 0xa8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044a4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80044a8:	2200      	movs	r2, #0
 80044aa:	601a      	str	r2, [r3, #0]
 80044ac:	605a      	str	r2, [r3, #4]
 80044ae:	609a      	str	r2, [r3, #8]
 80044b0:	60da      	str	r2, [r3, #12]
 80044b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80044b4:	f107 0310 	add.w	r3, r7, #16
 80044b8:	2284      	movs	r2, #132	@ 0x84
 80044ba:	2100      	movs	r1, #0
 80044bc:	4618      	mov	r0, r3
 80044be:	f00b f935 	bl	800f72c <memset>
  if(huart->Instance==USART3)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a22      	ldr	r2, [pc, #136]	@ (8004550 <HAL_UART_MspInit+0xb4>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d13c      	bne.n	8004546 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80044cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80044d0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80044d2:	2300      	movs	r3, #0
 80044d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80044d6:	f107 0310 	add.w	r3, r7, #16
 80044da:	4618      	mov	r0, r3
 80044dc:	f001 fd8c 	bl	8005ff8 <HAL_RCCEx_PeriphCLKConfig>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d001      	beq.n	80044ea <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80044e6:	f7ff fc1e 	bl	8003d26 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80044ea:	4b1a      	ldr	r3, [pc, #104]	@ (8004554 <HAL_UART_MspInit+0xb8>)
 80044ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ee:	4a19      	ldr	r2, [pc, #100]	@ (8004554 <HAL_UART_MspInit+0xb8>)
 80044f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80044f6:	4b17      	ldr	r3, [pc, #92]	@ (8004554 <HAL_UART_MspInit+0xb8>)
 80044f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044fe:	60fb      	str	r3, [r7, #12]
 8004500:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004502:	4b14      	ldr	r3, [pc, #80]	@ (8004554 <HAL_UART_MspInit+0xb8>)
 8004504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004506:	4a13      	ldr	r2, [pc, #76]	@ (8004554 <HAL_UART_MspInit+0xb8>)
 8004508:	f043 0308 	orr.w	r3, r3, #8
 800450c:	6313      	str	r3, [r2, #48]	@ 0x30
 800450e:	4b11      	ldr	r3, [pc, #68]	@ (8004554 <HAL_UART_MspInit+0xb8>)
 8004510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004512:	f003 0308 	and.w	r3, r3, #8
 8004516:	60bb      	str	r3, [r7, #8]
 8004518:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = DEBUG_UART_TX_Pin|DEBUG_UART_RX_Pin;
 800451a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800451e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004522:	2302      	movs	r3, #2
 8004524:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004528:	2300      	movs	r3, #0
 800452a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800452e:	2303      	movs	r3, #3
 8004530:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004534:	2307      	movs	r3, #7
 8004536:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800453a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800453e:	4619      	mov	r1, r3
 8004540:	4805      	ldr	r0, [pc, #20]	@ (8004558 <HAL_UART_MspInit+0xbc>)
 8004542:	f000 fbc1 	bl	8004cc8 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8004546:	bf00      	nop
 8004548:	37a8      	adds	r7, #168	@ 0xa8
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	40004800 	.word	0x40004800
 8004554:	40023800 	.word	0x40023800
 8004558:	40020c00 	.word	0x40020c00

0800455c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800455c:	b480      	push	{r7}
 800455e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004560:	bf00      	nop
 8004562:	e7fd      	b.n	8004560 <NMI_Handler+0x4>

08004564 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004564:	b480      	push	{r7}
 8004566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004568:	bf00      	nop
 800456a:	e7fd      	b.n	8004568 <HardFault_Handler+0x4>

0800456c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800456c:	b480      	push	{r7}
 800456e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004570:	bf00      	nop
 8004572:	e7fd      	b.n	8004570 <MemManage_Handler+0x4>

08004574 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004574:	b480      	push	{r7}
 8004576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004578:	bf00      	nop
 800457a:	e7fd      	b.n	8004578 <BusFault_Handler+0x4>

0800457c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800457c:	b480      	push	{r7}
 800457e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004580:	bf00      	nop
 8004582:	e7fd      	b.n	8004580 <UsageFault_Handler+0x4>

08004584 <DebugMon_Handler>:
void DebugMon_Handler(void)
{
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
#endif
void DebugMon_Handler(void)
{
 8004584:	b480      	push	{r7}
 8004586:	af00      	add	r7, sp, #0
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */
}
 8004588:	bf00      	nop
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr

08004592 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */
#endif
void SysTick_Handler(void)
{
 8004592:	b580      	push	{r7, lr}
 8004594:	af00      	add	r7, sp, #0
  extern void xPortSysTickHandler( void );
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004596:	f000 f887 	bl	80046a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  xPortSysTickHandler();
 800459a:	f008 fd75 	bl	800d088 <xPortSysTickHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 800459e:	bf00      	nop
 80045a0:	bd80      	pop	{r7, pc}
	...

080045a4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80045a8:	4802      	ldr	r0, [pc, #8]	@ (80045b4 <SPI1_IRQHandler+0x10>)
 80045aa:	f002 ff15 	bl	80073d8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80045ae:	bf00      	nop
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	2000022c 	.word	0x2000022c

080045b8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80045b8:	b480      	push	{r7}
 80045ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80045bc:	4b06      	ldr	r3, [pc, #24]	@ (80045d8 <SystemInit+0x20>)
 80045be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045c2:	4a05      	ldr	r2, [pc, #20]	@ (80045d8 <SystemInit+0x20>)
 80045c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80045c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80045cc:	bf00      	nop
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	e000ed00 	.word	0xe000ed00

080045dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
	  ldr   sp, =_estack      /* set stack pointer */
 80045dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004614 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80045e0:	f7ff ffea 	bl	80045b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80045e4:	480c      	ldr	r0, [pc, #48]	@ (8004618 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80045e6:	490d      	ldr	r1, [pc, #52]	@ (800461c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80045e8:	4a0d      	ldr	r2, [pc, #52]	@ (8004620 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80045ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80045ec:	e002      	b.n	80045f4 <LoopCopyDataInit>

080045ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80045ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80045f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80045f2:	3304      	adds	r3, #4

080045f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80045f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80045f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80045f8:	d3f9      	bcc.n	80045ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80045fa:	4a0a      	ldr	r2, [pc, #40]	@ (8004624 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80045fc:	4c0a      	ldr	r4, [pc, #40]	@ (8004628 <LoopFillZerobss+0x22>)
  movs r3, #0
 80045fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004600:	e001      	b.n	8004606 <LoopFillZerobss>

08004602 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004602:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004604:	3204      	adds	r2, #4

08004606 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004606:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004608:	d3fb      	bcc.n	8004602 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800460a:	f00b f9cd 	bl	800f9a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800460e:	f7ff f83b 	bl	8003688 <main>
  bx  lr    
 8004612:	4770      	bx	lr
	  ldr   sp, =_estack      /* set stack pointer */
 8004614:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004618:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800461c:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8004620:	08013fd8 	.word	0x08013fd8
  ldr r2, =_sbss
 8004624:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8004628:	20000674 	.word	0x20000674

0800462c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800462c:	e7fe      	b.n	800462c <ADC_IRQHandler>

0800462e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800462e:	b580      	push	{r7, lr}
 8004630:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004632:	2003      	movs	r0, #3
 8004634:	f000 f928 	bl	8004888 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004638:	200f      	movs	r0, #15
 800463a:	f000 f805 	bl	8004648 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800463e:	f7ff fe69 	bl	8004314 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	bd80      	pop	{r7, pc}

08004648 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004650:	4b12      	ldr	r3, [pc, #72]	@ (800469c <HAL_InitTick+0x54>)
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	4b12      	ldr	r3, [pc, #72]	@ (80046a0 <HAL_InitTick+0x58>)
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	4619      	mov	r1, r3
 800465a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800465e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004662:	fbb2 f3f3 	udiv	r3, r2, r3
 8004666:	4618      	mov	r0, r3
 8004668:	f000 f972 	bl	8004950 <HAL_SYSTICK_Config>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e00e      	b.n	8004694 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2b0f      	cmp	r3, #15
 800467a:	d80a      	bhi.n	8004692 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800467c:	2200      	movs	r2, #0
 800467e:	6879      	ldr	r1, [r7, #4]
 8004680:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004684:	f000 f920 	bl	80048c8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004688:	4a06      	ldr	r2, [pc, #24]	@ (80046a4 <HAL_InitTick+0x5c>)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800468e:	2300      	movs	r3, #0
 8004690:	e000      	b.n	8004694 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
}
 8004694:	4618      	mov	r0, r3
 8004696:	3708      	adds	r7, #8
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}
 800469c:	20000038 	.word	0x20000038
 80046a0:	20000040 	.word	0x20000040
 80046a4:	2000003c 	.word	0x2000003c

080046a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80046a8:	b480      	push	{r7}
 80046aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80046ac:	4b06      	ldr	r3, [pc, #24]	@ (80046c8 <HAL_IncTick+0x20>)
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	461a      	mov	r2, r3
 80046b2:	4b06      	ldr	r3, [pc, #24]	@ (80046cc <HAL_IncTick+0x24>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4413      	add	r3, r2
 80046b8:	4a04      	ldr	r2, [pc, #16]	@ (80046cc <HAL_IncTick+0x24>)
 80046ba:	6013      	str	r3, [r2, #0]
}
 80046bc:	bf00      	nop
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	20000040 	.word	0x20000040
 80046cc:	20000380 	.word	0x20000380

080046d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80046d0:	b480      	push	{r7}
 80046d2:	af00      	add	r7, sp, #0
  return uwTick;
 80046d4:	4b03      	ldr	r3, [pc, #12]	@ (80046e4 <HAL_GetTick+0x14>)
 80046d6:	681b      	ldr	r3, [r3, #0]
}
 80046d8:	4618      	mov	r0, r3
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	20000380 	.word	0x20000380

080046e8 <__NVIC_SetPriorityGrouping>:
{
 80046e8:	b480      	push	{r7}
 80046ea:	b085      	sub	sp, #20
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f003 0307 	and.w	r3, r3, #7
 80046f6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004728 <__NVIC_SetPriorityGrouping+0x40>)
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004704:	4013      	ands	r3, r2
 8004706:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004710:	4b06      	ldr	r3, [pc, #24]	@ (800472c <__NVIC_SetPriorityGrouping+0x44>)
 8004712:	4313      	orrs	r3, r2
 8004714:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004716:	4a04      	ldr	r2, [pc, #16]	@ (8004728 <__NVIC_SetPriorityGrouping+0x40>)
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	60d3      	str	r3, [r2, #12]
}
 800471c:	bf00      	nop
 800471e:	3714      	adds	r7, #20
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr
 8004728:	e000ed00 	.word	0xe000ed00
 800472c:	05fa0000 	.word	0x05fa0000

08004730 <__NVIC_GetPriorityGrouping>:
{
 8004730:	b480      	push	{r7}
 8004732:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004734:	4b04      	ldr	r3, [pc, #16]	@ (8004748 <__NVIC_GetPriorityGrouping+0x18>)
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	0a1b      	lsrs	r3, r3, #8
 800473a:	f003 0307 	and.w	r3, r3, #7
}
 800473e:	4618      	mov	r0, r3
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr
 8004748:	e000ed00 	.word	0xe000ed00

0800474c <__NVIC_EnableIRQ>:
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	4603      	mov	r3, r0
 8004754:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800475a:	2b00      	cmp	r3, #0
 800475c:	db0b      	blt.n	8004776 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800475e:	79fb      	ldrb	r3, [r7, #7]
 8004760:	f003 021f 	and.w	r2, r3, #31
 8004764:	4907      	ldr	r1, [pc, #28]	@ (8004784 <__NVIC_EnableIRQ+0x38>)
 8004766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800476a:	095b      	lsrs	r3, r3, #5
 800476c:	2001      	movs	r0, #1
 800476e:	fa00 f202 	lsl.w	r2, r0, r2
 8004772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004776:	bf00      	nop
 8004778:	370c      	adds	r7, #12
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop
 8004784:	e000e100 	.word	0xe000e100

08004788 <__NVIC_SetPriority>:
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	4603      	mov	r3, r0
 8004790:	6039      	str	r1, [r7, #0]
 8004792:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004798:	2b00      	cmp	r3, #0
 800479a:	db0a      	blt.n	80047b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	b2da      	uxtb	r2, r3
 80047a0:	490c      	ldr	r1, [pc, #48]	@ (80047d4 <__NVIC_SetPriority+0x4c>)
 80047a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047a6:	0112      	lsls	r2, r2, #4
 80047a8:	b2d2      	uxtb	r2, r2
 80047aa:	440b      	add	r3, r1
 80047ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80047b0:	e00a      	b.n	80047c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	b2da      	uxtb	r2, r3
 80047b6:	4908      	ldr	r1, [pc, #32]	@ (80047d8 <__NVIC_SetPriority+0x50>)
 80047b8:	79fb      	ldrb	r3, [r7, #7]
 80047ba:	f003 030f 	and.w	r3, r3, #15
 80047be:	3b04      	subs	r3, #4
 80047c0:	0112      	lsls	r2, r2, #4
 80047c2:	b2d2      	uxtb	r2, r2
 80047c4:	440b      	add	r3, r1
 80047c6:	761a      	strb	r2, [r3, #24]
}
 80047c8:	bf00      	nop
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr
 80047d4:	e000e100 	.word	0xe000e100
 80047d8:	e000ed00 	.word	0xe000ed00

080047dc <NVIC_EncodePriority>:
{
 80047dc:	b480      	push	{r7}
 80047de:	b089      	sub	sp, #36	@ 0x24
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f003 0307 	and.w	r3, r3, #7
 80047ee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	f1c3 0307 	rsb	r3, r3, #7
 80047f6:	2b04      	cmp	r3, #4
 80047f8:	bf28      	it	cs
 80047fa:	2304      	movcs	r3, #4
 80047fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	3304      	adds	r3, #4
 8004802:	2b06      	cmp	r3, #6
 8004804:	d902      	bls.n	800480c <NVIC_EncodePriority+0x30>
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	3b03      	subs	r3, #3
 800480a:	e000      	b.n	800480e <NVIC_EncodePriority+0x32>
 800480c:	2300      	movs	r3, #0
 800480e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004810:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	fa02 f303 	lsl.w	r3, r2, r3
 800481a:	43da      	mvns	r2, r3
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	401a      	ands	r2, r3
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004824:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	fa01 f303 	lsl.w	r3, r1, r3
 800482e:	43d9      	mvns	r1, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004834:	4313      	orrs	r3, r2
}
 8004836:	4618      	mov	r0, r3
 8004838:	3724      	adds	r7, #36	@ 0x24
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
	...

08004844 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	3b01      	subs	r3, #1
 8004850:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004854:	d301      	bcc.n	800485a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004856:	2301      	movs	r3, #1
 8004858:	e00f      	b.n	800487a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800485a:	4a0a      	ldr	r2, [pc, #40]	@ (8004884 <SysTick_Config+0x40>)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	3b01      	subs	r3, #1
 8004860:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004862:	210f      	movs	r1, #15
 8004864:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004868:	f7ff ff8e 	bl	8004788 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800486c:	4b05      	ldr	r3, [pc, #20]	@ (8004884 <SysTick_Config+0x40>)
 800486e:	2200      	movs	r2, #0
 8004870:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004872:	4b04      	ldr	r3, [pc, #16]	@ (8004884 <SysTick_Config+0x40>)
 8004874:	2207      	movs	r2, #7
 8004876:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3708      	adds	r7, #8
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	e000e010 	.word	0xe000e010

08004888 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2b07      	cmp	r3, #7
 8004894:	d00f      	beq.n	80048b6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2b06      	cmp	r3, #6
 800489a:	d00c      	beq.n	80048b6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2b05      	cmp	r3, #5
 80048a0:	d009      	beq.n	80048b6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2b04      	cmp	r3, #4
 80048a6:	d006      	beq.n	80048b6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2b03      	cmp	r3, #3
 80048ac:	d003      	beq.n	80048b6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80048ae:	2191      	movs	r1, #145	@ 0x91
 80048b0:	4804      	ldr	r0, [pc, #16]	@ (80048c4 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80048b2:	f7ff fa3f 	bl	8003d34 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f7ff ff16 	bl	80046e8 <__NVIC_SetPriorityGrouping>
}
 80048bc:	bf00      	nop
 80048be:	3708      	adds	r7, #8
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	08013370 	.word	0x08013370

080048c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b086      	sub	sp, #24
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	4603      	mov	r3, r0
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	607a      	str	r2, [r7, #4]
 80048d4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80048d6:	2300      	movs	r3, #0
 80048d8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2b0f      	cmp	r3, #15
 80048de:	d903      	bls.n	80048e8 <HAL_NVIC_SetPriority+0x20>
 80048e0:	21a9      	movs	r1, #169	@ 0xa9
 80048e2:	480e      	ldr	r0, [pc, #56]	@ (800491c <HAL_NVIC_SetPriority+0x54>)
 80048e4:	f7ff fa26 	bl	8003d34 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	2b0f      	cmp	r3, #15
 80048ec:	d903      	bls.n	80048f6 <HAL_NVIC_SetPriority+0x2e>
 80048ee:	21aa      	movs	r1, #170	@ 0xaa
 80048f0:	480a      	ldr	r0, [pc, #40]	@ (800491c <HAL_NVIC_SetPriority+0x54>)
 80048f2:	f7ff fa1f 	bl	8003d34 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80048f6:	f7ff ff1b 	bl	8004730 <__NVIC_GetPriorityGrouping>
 80048fa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	68b9      	ldr	r1, [r7, #8]
 8004900:	6978      	ldr	r0, [r7, #20]
 8004902:	f7ff ff6b 	bl	80047dc <NVIC_EncodePriority>
 8004906:	4602      	mov	r2, r0
 8004908:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800490c:	4611      	mov	r1, r2
 800490e:	4618      	mov	r0, r3
 8004910:	f7ff ff3a 	bl	8004788 <__NVIC_SetPriority>
}
 8004914:	bf00      	nop
 8004916:	3718      	adds	r7, #24
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}
 800491c:	08013370 	.word	0x08013370

08004920 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
 8004926:	4603      	mov	r3, r0
 8004928:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800492a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800492e:	2b00      	cmp	r3, #0
 8004930:	da03      	bge.n	800493a <HAL_NVIC_EnableIRQ+0x1a>
 8004932:	21bd      	movs	r1, #189	@ 0xbd
 8004934:	4805      	ldr	r0, [pc, #20]	@ (800494c <HAL_NVIC_EnableIRQ+0x2c>)
 8004936:	f7ff f9fd 	bl	8003d34 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800493a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800493e:	4618      	mov	r0, r3
 8004940:	f7ff ff04 	bl	800474c <__NVIC_EnableIRQ>
}
 8004944:	bf00      	nop
 8004946:	3708      	adds	r7, #8
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}
 800494c:	08013370 	.word	0x08013370

08004950 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b082      	sub	sp, #8
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f7ff ff73 	bl	8004844 <SysTick_Config>
 800495e:	4603      	mov	r3, r0
}
 8004960:	4618      	mov	r0, r3
 8004962:	3708      	adds	r7, #8
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8004968:	b480      	push	{r7}
 800496a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800496c:	f3bf 8f5f 	dmb	sy
}
 8004970:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8004972:	4b07      	ldr	r3, [pc, #28]	@ (8004990 <HAL_MPU_Disable+0x28>)
 8004974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004976:	4a06      	ldr	r2, [pc, #24]	@ (8004990 <HAL_MPU_Disable+0x28>)
 8004978:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800497c:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800497e:	4b05      	ldr	r3, [pc, #20]	@ (8004994 <HAL_MPU_Disable+0x2c>)
 8004980:	2200      	movs	r2, #0
 8004982:	605a      	str	r2, [r3, #4]
}
 8004984:	bf00      	nop
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	e000ed00 	.word	0xe000ed00
 8004994:	e000ed90 	.word	0xe000ed90

08004998 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80049a0:	4a0b      	ldr	r2, [pc, #44]	@ (80049d0 <HAL_MPU_Enable+0x38>)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f043 0301 	orr.w	r3, r3, #1
 80049a8:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80049aa:	4b0a      	ldr	r3, [pc, #40]	@ (80049d4 <HAL_MPU_Enable+0x3c>)
 80049ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ae:	4a09      	ldr	r2, [pc, #36]	@ (80049d4 <HAL_MPU_Enable+0x3c>)
 80049b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049b4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80049b6:	f3bf 8f4f 	dsb	sy
}
 80049ba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80049bc:	f3bf 8f6f 	isb	sy
}
 80049c0:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80049c2:	bf00      	nop
 80049c4:	370c      	adds	r7, #12
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	e000ed90 	.word	0xe000ed90
 80049d4:	e000ed00 	.word	0xe000ed00

080049d8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	785b      	ldrb	r3, [r3, #1]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d020      	beq.n	8004a2a <HAL_MPU_ConfigRegion+0x52>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	785b      	ldrb	r3, [r3, #1]
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d01c      	beq.n	8004a2a <HAL_MPU_ConfigRegion+0x52>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	785b      	ldrb	r3, [r3, #1]
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d018      	beq.n	8004a2a <HAL_MPU_ConfigRegion+0x52>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	785b      	ldrb	r3, [r3, #1]
 80049fc:	2b03      	cmp	r3, #3
 80049fe:	d014      	beq.n	8004a2a <HAL_MPU_ConfigRegion+0x52>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	785b      	ldrb	r3, [r3, #1]
 8004a04:	2b04      	cmp	r3, #4
 8004a06:	d010      	beq.n	8004a2a <HAL_MPU_ConfigRegion+0x52>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	785b      	ldrb	r3, [r3, #1]
 8004a0c:	2b05      	cmp	r3, #5
 8004a0e:	d00c      	beq.n	8004a2a <HAL_MPU_ConfigRegion+0x52>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	785b      	ldrb	r3, [r3, #1]
 8004a14:	2b06      	cmp	r3, #6
 8004a16:	d008      	beq.n	8004a2a <HAL_MPU_ConfigRegion+0x52>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	785b      	ldrb	r3, [r3, #1]
 8004a1c:	2b07      	cmp	r3, #7
 8004a1e:	d004      	beq.n	8004a2a <HAL_MPU_ConfigRegion+0x52>
 8004a20:	f44f 71a7 	mov.w	r1, #334	@ 0x14e
 8004a24:	488c      	ldr	r0, [pc, #560]	@ (8004c58 <HAL_MPU_ConfigRegion+0x280>)
 8004a26:	f7ff f985 	bl	8003d34 <assert_failed>
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d008      	beq.n	8004a44 <HAL_MPU_ConfigRegion+0x6c>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d004      	beq.n	8004a44 <HAL_MPU_ConfigRegion+0x6c>
 8004a3a:	f240 114f 	movw	r1, #335	@ 0x14f
 8004a3e:	4886      	ldr	r0, [pc, #536]	@ (8004c58 <HAL_MPU_ConfigRegion+0x280>)
 8004a40:	f7ff f978 	bl	8003d34 <assert_failed>
  assert_param(IS_MPU_INSTRUCTION_ACCESS(MPU_Init->DisableExec));
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	7b1b      	ldrb	r3, [r3, #12]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d008      	beq.n	8004a5e <HAL_MPU_ConfigRegion+0x86>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	7b1b      	ldrb	r3, [r3, #12]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d004      	beq.n	8004a5e <HAL_MPU_ConfigRegion+0x86>
 8004a54:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 8004a58:	487f      	ldr	r0, [pc, #508]	@ (8004c58 <HAL_MPU_ConfigRegion+0x280>)
 8004a5a:	f7ff f96b 	bl	8003d34 <assert_failed>
  assert_param(IS_MPU_REGION_PERMISSION_ATTRIBUTE(MPU_Init->AccessPermission));
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	7adb      	ldrb	r3, [r3, #11]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d018      	beq.n	8004a98 <HAL_MPU_ConfigRegion+0xc0>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	7adb      	ldrb	r3, [r3, #11]
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d014      	beq.n	8004a98 <HAL_MPU_ConfigRegion+0xc0>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	7adb      	ldrb	r3, [r3, #11]
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d010      	beq.n	8004a98 <HAL_MPU_ConfigRegion+0xc0>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	7adb      	ldrb	r3, [r3, #11]
 8004a7a:	2b03      	cmp	r3, #3
 8004a7c:	d00c      	beq.n	8004a98 <HAL_MPU_ConfigRegion+0xc0>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	7adb      	ldrb	r3, [r3, #11]
 8004a82:	2b05      	cmp	r3, #5
 8004a84:	d008      	beq.n	8004a98 <HAL_MPU_ConfigRegion+0xc0>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	7adb      	ldrb	r3, [r3, #11]
 8004a8a:	2b06      	cmp	r3, #6
 8004a8c:	d004      	beq.n	8004a98 <HAL_MPU_ConfigRegion+0xc0>
 8004a8e:	f240 1151 	movw	r1, #337	@ 0x151
 8004a92:	4871      	ldr	r0, [pc, #452]	@ (8004c58 <HAL_MPU_ConfigRegion+0x280>)
 8004a94:	f7ff f94e 	bl	8003d34 <assert_failed>
  assert_param(IS_MPU_TEX_LEVEL(MPU_Init->TypeExtField));
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	7a9b      	ldrb	r3, [r3, #10]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d00c      	beq.n	8004aba <HAL_MPU_ConfigRegion+0xe2>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	7a9b      	ldrb	r3, [r3, #10]
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d008      	beq.n	8004aba <HAL_MPU_ConfigRegion+0xe2>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	7a9b      	ldrb	r3, [r3, #10]
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d004      	beq.n	8004aba <HAL_MPU_ConfigRegion+0xe2>
 8004ab0:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 8004ab4:	4868      	ldr	r0, [pc, #416]	@ (8004c58 <HAL_MPU_ConfigRegion+0x280>)
 8004ab6:	f7ff f93d 	bl	8003d34 <assert_failed>
  assert_param(IS_MPU_ACCESS_SHAREABLE(MPU_Init->IsShareable));
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	7b5b      	ldrb	r3, [r3, #13]
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d008      	beq.n	8004ad4 <HAL_MPU_ConfigRegion+0xfc>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	7b5b      	ldrb	r3, [r3, #13]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d004      	beq.n	8004ad4 <HAL_MPU_ConfigRegion+0xfc>
 8004aca:	f240 1153 	movw	r1, #339	@ 0x153
 8004ace:	4862      	ldr	r0, [pc, #392]	@ (8004c58 <HAL_MPU_ConfigRegion+0x280>)
 8004ad0:	f7ff f930 	bl	8003d34 <assert_failed>
  assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	7b9b      	ldrb	r3, [r3, #14]
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d008      	beq.n	8004aee <HAL_MPU_ConfigRegion+0x116>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	7b9b      	ldrb	r3, [r3, #14]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d004      	beq.n	8004aee <HAL_MPU_ConfigRegion+0x116>
 8004ae4:	f44f 71aa 	mov.w	r1, #340	@ 0x154
 8004ae8:	485b      	ldr	r0, [pc, #364]	@ (8004c58 <HAL_MPU_ConfigRegion+0x280>)
 8004aea:	f7ff f923 	bl	8003d34 <assert_failed>
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	7bdb      	ldrb	r3, [r3, #15]
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d008      	beq.n	8004b08 <HAL_MPU_ConfigRegion+0x130>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	7bdb      	ldrb	r3, [r3, #15]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d004      	beq.n	8004b08 <HAL_MPU_ConfigRegion+0x130>
 8004afe:	f240 1155 	movw	r1, #341	@ 0x155
 8004b02:	4855      	ldr	r0, [pc, #340]	@ (8004c58 <HAL_MPU_ConfigRegion+0x280>)
 8004b04:	f7ff f916 	bl	8003d34 <assert_failed>
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	7a5b      	ldrb	r3, [r3, #9]
 8004b0c:	2bff      	cmp	r3, #255	@ 0xff
 8004b0e:	d104      	bne.n	8004b1a <HAL_MPU_ConfigRegion+0x142>
 8004b10:	f44f 71ab 	mov.w	r1, #342	@ 0x156
 8004b14:	4850      	ldr	r0, [pc, #320]	@ (8004c58 <HAL_MPU_ConfigRegion+0x280>)
 8004b16:	f7ff f90d 	bl	8003d34 <assert_failed>
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	7a1b      	ldrb	r3, [r3, #8]
 8004b1e:	2b04      	cmp	r3, #4
 8004b20:	d070      	beq.n	8004c04 <HAL_MPU_ConfigRegion+0x22c>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	7a1b      	ldrb	r3, [r3, #8]
 8004b26:	2b05      	cmp	r3, #5
 8004b28:	d06c      	beq.n	8004c04 <HAL_MPU_ConfigRegion+0x22c>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	7a1b      	ldrb	r3, [r3, #8]
 8004b2e:	2b06      	cmp	r3, #6
 8004b30:	d068      	beq.n	8004c04 <HAL_MPU_ConfigRegion+0x22c>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	7a1b      	ldrb	r3, [r3, #8]
 8004b36:	2b07      	cmp	r3, #7
 8004b38:	d064      	beq.n	8004c04 <HAL_MPU_ConfigRegion+0x22c>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	7a1b      	ldrb	r3, [r3, #8]
 8004b3e:	2b08      	cmp	r3, #8
 8004b40:	d060      	beq.n	8004c04 <HAL_MPU_ConfigRegion+0x22c>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	7a1b      	ldrb	r3, [r3, #8]
 8004b46:	2b09      	cmp	r3, #9
 8004b48:	d05c      	beq.n	8004c04 <HAL_MPU_ConfigRegion+0x22c>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	7a1b      	ldrb	r3, [r3, #8]
 8004b4e:	2b0a      	cmp	r3, #10
 8004b50:	d058      	beq.n	8004c04 <HAL_MPU_ConfigRegion+0x22c>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	7a1b      	ldrb	r3, [r3, #8]
 8004b56:	2b0b      	cmp	r3, #11
 8004b58:	d054      	beq.n	8004c04 <HAL_MPU_ConfigRegion+0x22c>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	7a1b      	ldrb	r3, [r3, #8]
 8004b5e:	2b0c      	cmp	r3, #12
 8004b60:	d050      	beq.n	8004c04 <HAL_MPU_ConfigRegion+0x22c>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	7a1b      	ldrb	r3, [r3, #8]
 8004b66:	2b0d      	cmp	r3, #13
 8004b68:	d04c      	beq.n	8004c04 <HAL_MPU_ConfigRegion+0x22c>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	7a1b      	ldrb	r3, [r3, #8]
 8004b6e:	2b0e      	cmp	r3, #14
 8004b70:	d048      	beq.n	8004c04 <HAL_MPU_ConfigRegion+0x22c>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	7a1b      	ldrb	r3, [r3, #8]
 8004b76:	2b0f      	cmp	r3, #15
 8004b78:	d044      	beq.n	8004c04 <HAL_MPU_ConfigRegion+0x22c>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	7a1b      	ldrb	r3, [r3, #8]
 8004b7e:	2b10      	cmp	r3, #16
 8004b80:	d040      	beq.n	8004c04 <HAL_MPU_ConfigRegion+0x22c>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	7a1b      	ldrb	r3, [r3, #8]
 8004b86:	2b11      	cmp	r3, #17
 8004b88:	d03c      	beq.n	8004c04 <HAL_MPU_ConfigRegion+0x22c>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	7a1b      	ldrb	r3, [r3, #8]
 8004b8e:	2b12      	cmp	r3, #18
 8004b90:	d038      	beq.n	8004c04 <HAL_MPU_ConfigRegion+0x22c>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	7a1b      	ldrb	r3, [r3, #8]
 8004b96:	2b13      	cmp	r3, #19
 8004b98:	d034      	beq.n	8004c04 <HAL_MPU_ConfigRegion+0x22c>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	7a1b      	ldrb	r3, [r3, #8]
 8004b9e:	2b14      	cmp	r3, #20
 8004ba0:	d030      	beq.n	8004c04 <HAL_MPU_ConfigRegion+0x22c>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	7a1b      	ldrb	r3, [r3, #8]
 8004ba6:	2b15      	cmp	r3, #21
 8004ba8:	d02c      	beq.n	8004c04 <HAL_MPU_ConfigRegion+0x22c>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	7a1b      	ldrb	r3, [r3, #8]
 8004bae:	2b16      	cmp	r3, #22
 8004bb0:	d028      	beq.n	8004c04 <HAL_MPU_ConfigRegion+0x22c>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	7a1b      	ldrb	r3, [r3, #8]
 8004bb6:	2b17      	cmp	r3, #23
 8004bb8:	d024      	beq.n	8004c04 <HAL_MPU_ConfigRegion+0x22c>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	7a1b      	ldrb	r3, [r3, #8]
 8004bbe:	2b18      	cmp	r3, #24
 8004bc0:	d020      	beq.n	8004c04 <HAL_MPU_ConfigRegion+0x22c>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	7a1b      	ldrb	r3, [r3, #8]
 8004bc6:	2b19      	cmp	r3, #25
 8004bc8:	d01c      	beq.n	8004c04 <HAL_MPU_ConfigRegion+0x22c>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	7a1b      	ldrb	r3, [r3, #8]
 8004bce:	2b1a      	cmp	r3, #26
 8004bd0:	d018      	beq.n	8004c04 <HAL_MPU_ConfigRegion+0x22c>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	7a1b      	ldrb	r3, [r3, #8]
 8004bd6:	2b1b      	cmp	r3, #27
 8004bd8:	d014      	beq.n	8004c04 <HAL_MPU_ConfigRegion+0x22c>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	7a1b      	ldrb	r3, [r3, #8]
 8004bde:	2b1c      	cmp	r3, #28
 8004be0:	d010      	beq.n	8004c04 <HAL_MPU_ConfigRegion+0x22c>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	7a1b      	ldrb	r3, [r3, #8]
 8004be6:	2b1d      	cmp	r3, #29
 8004be8:	d00c      	beq.n	8004c04 <HAL_MPU_ConfigRegion+0x22c>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	7a1b      	ldrb	r3, [r3, #8]
 8004bee:	2b1e      	cmp	r3, #30
 8004bf0:	d008      	beq.n	8004c04 <HAL_MPU_ConfigRegion+0x22c>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	7a1b      	ldrb	r3, [r3, #8]
 8004bf6:	2b1f      	cmp	r3, #31
 8004bf8:	d004      	beq.n	8004c04 <HAL_MPU_ConfigRegion+0x22c>
 8004bfa:	f240 1157 	movw	r1, #343	@ 0x157
 8004bfe:	4816      	ldr	r0, [pc, #88]	@ (8004c58 <HAL_MPU_ConfigRegion+0x280>)
 8004c00:	f7ff f898 	bl	8003d34 <assert_failed>

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	785a      	ldrb	r2, [r3, #1]
 8004c08:	4b14      	ldr	r3, [pc, #80]	@ (8004c5c <HAL_MPU_ConfigRegion+0x284>)
 8004c0a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8004c0c:	4b13      	ldr	r3, [pc, #76]	@ (8004c5c <HAL_MPU_ConfigRegion+0x284>)
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	4a12      	ldr	r2, [pc, #72]	@ (8004c5c <HAL_MPU_ConfigRegion+0x284>)
 8004c12:	f023 0301 	bic.w	r3, r3, #1
 8004c16:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8004c18:	4a10      	ldr	r2, [pc, #64]	@ (8004c5c <HAL_MPU_ConfigRegion+0x284>)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	7b1b      	ldrb	r3, [r3, #12]
 8004c24:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	7adb      	ldrb	r3, [r3, #11]
 8004c2a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004c2c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	7a9b      	ldrb	r3, [r3, #10]
 8004c32:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004c34:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	7b5b      	ldrb	r3, [r3, #13]
 8004c3a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004c3c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	7b9b      	ldrb	r3, [r3, #14]
 8004c42:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004c44:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	7bdb      	ldrb	r3, [r3, #15]
 8004c4a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004c4c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	7a5b      	ldrb	r3, [r3, #9]
 8004c52:	021b      	lsls	r3, r3, #8
 8004c54:	e004      	b.n	8004c60 <HAL_MPU_ConfigRegion+0x288>
 8004c56:	bf00      	nop
 8004c58:	08013370 	.word	0x08013370
 8004c5c:	e000ed90 	.word	0xe000ed90
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004c60:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	7a1b      	ldrb	r3, [r3, #8]
 8004c66:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004c68:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	7812      	ldrb	r2, [r2, #0]
 8004c6e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004c70:	4a03      	ldr	r2, [pc, #12]	@ (8004c80 <HAL_MPU_ConfigRegion+0x2a8>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004c72:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004c74:	6113      	str	r3, [r2, #16]
}
 8004c76:	bf00      	nop
 8004c78:	3708      	adds	r7, #8
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	e000ed90 	.word	0xe000ed90

08004c84 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d004      	beq.n	8004ca2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2280      	movs	r2, #128	@ 0x80
 8004c9c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e00c      	b.n	8004cbc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2205      	movs	r2, #5
 8004ca6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f022 0201 	bic.w	r2, r2, #1
 8004cb8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	370c      	adds	r7, #12
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b088      	sub	sp, #32
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a3a      	ldr	r2, [pc, #232]	@ (8004dd0 <HAL_GPIO_Init+0x108>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d02b      	beq.n	8004d42 <HAL_GPIO_Init+0x7a>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a39      	ldr	r2, [pc, #228]	@ (8004dd4 <HAL_GPIO_Init+0x10c>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d027      	beq.n	8004d42 <HAL_GPIO_Init+0x7a>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a38      	ldr	r2, [pc, #224]	@ (8004dd8 <HAL_GPIO_Init+0x110>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d023      	beq.n	8004d42 <HAL_GPIO_Init+0x7a>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a37      	ldr	r2, [pc, #220]	@ (8004ddc <HAL_GPIO_Init+0x114>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d01f      	beq.n	8004d42 <HAL_GPIO_Init+0x7a>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a36      	ldr	r2, [pc, #216]	@ (8004de0 <HAL_GPIO_Init+0x118>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d01b      	beq.n	8004d42 <HAL_GPIO_Init+0x7a>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a35      	ldr	r2, [pc, #212]	@ (8004de4 <HAL_GPIO_Init+0x11c>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d017      	beq.n	8004d42 <HAL_GPIO_Init+0x7a>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a34      	ldr	r2, [pc, #208]	@ (8004de8 <HAL_GPIO_Init+0x120>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d013      	beq.n	8004d42 <HAL_GPIO_Init+0x7a>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a33      	ldr	r2, [pc, #204]	@ (8004dec <HAL_GPIO_Init+0x124>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d00f      	beq.n	8004d42 <HAL_GPIO_Init+0x7a>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4a32      	ldr	r2, [pc, #200]	@ (8004df0 <HAL_GPIO_Init+0x128>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d00b      	beq.n	8004d42 <HAL_GPIO_Init+0x7a>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a31      	ldr	r2, [pc, #196]	@ (8004df4 <HAL_GPIO_Init+0x12c>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d007      	beq.n	8004d42 <HAL_GPIO_Init+0x7a>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a30      	ldr	r2, [pc, #192]	@ (8004df8 <HAL_GPIO_Init+0x130>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d003      	beq.n	8004d42 <HAL_GPIO_Init+0x7a>
 8004d3a:	21aa      	movs	r1, #170	@ 0xaa
 8004d3c:	482f      	ldr	r0, [pc, #188]	@ (8004dfc <HAL_GPIO_Init+0x134>)
 8004d3e:	f7fe fff9 	bl	8003d34 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d103      	bne.n	8004d54 <HAL_GPIO_Init+0x8c>
 8004d4c:	21ab      	movs	r1, #171	@ 0xab
 8004d4e:	482b      	ldr	r0, [pc, #172]	@ (8004dfc <HAL_GPIO_Init+0x134>)
 8004d50:	f7fe fff0 	bl	8003d34 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d035      	beq.n	8004dc8 <HAL_GPIO_Init+0x100>
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d031      	beq.n	8004dc8 <HAL_GPIO_Init+0x100>
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	2b11      	cmp	r3, #17
 8004d6a:	d02d      	beq.n	8004dc8 <HAL_GPIO_Init+0x100>
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d029      	beq.n	8004dc8 <HAL_GPIO_Init+0x100>
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	2b12      	cmp	r3, #18
 8004d7a:	d025      	beq.n	8004dc8 <HAL_GPIO_Init+0x100>
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8004d84:	d020      	beq.n	8004dc8 <HAL_GPIO_Init+0x100>
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8004d8e:	d01b      	beq.n	8004dc8 <HAL_GPIO_Init+0x100>
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 8004d98:	d016      	beq.n	8004dc8 <HAL_GPIO_Init+0x100>
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 8004da2:	d011      	beq.n	8004dc8 <HAL_GPIO_Init+0x100>
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 8004dac:	d00c      	beq.n	8004dc8 <HAL_GPIO_Init+0x100>
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 8004db6:	d007      	beq.n	8004dc8 <HAL_GPIO_Init+0x100>
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	2b03      	cmp	r3, #3
 8004dbe:	d003      	beq.n	8004dc8 <HAL_GPIO_Init+0x100>
 8004dc0:	21ac      	movs	r1, #172	@ 0xac
 8004dc2:	480e      	ldr	r0, [pc, #56]	@ (8004dfc <HAL_GPIO_Init+0x134>)
 8004dc4:	f7fe ffb6 	bl	8003d34 <assert_failed>

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8004dc8:	2300      	movs	r3, #0
 8004dca:	61fb      	str	r3, [r7, #28]
 8004dcc:	e2c7      	b.n	800535e <HAL_GPIO_Init+0x696>
 8004dce:	bf00      	nop
 8004dd0:	40020000 	.word	0x40020000
 8004dd4:	40020400 	.word	0x40020400
 8004dd8:	40020800 	.word	0x40020800
 8004ddc:	40020c00 	.word	0x40020c00
 8004de0:	40021000 	.word	0x40021000
 8004de4:	40021400 	.word	0x40021400
 8004de8:	40021800 	.word	0x40021800
 8004dec:	40021c00 	.word	0x40021c00
 8004df0:	40022000 	.word	0x40022000
 8004df4:	40022400 	.word	0x40022400
 8004df8:	40022800 	.word	0x40022800
 8004dfc:	080133ac 	.word	0x080133ac
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004e00:	2201      	movs	r2, #1
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	fa02 f303 	lsl.w	r3, r2, r3
 8004e08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	697a      	ldr	r2, [r7, #20]
 8004e10:	4013      	ands	r3, r2
 8004e12:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8004e14:	693a      	ldr	r2, [r7, #16]
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	f040 829d 	bne.w	8005358 <HAL_GPIO_Init+0x690>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	f003 0303 	and.w	r3, r3, #3
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d005      	beq.n	8004e36 <HAL_GPIO_Init+0x16e>
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	f003 0303 	and.w	r3, r3, #3
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d144      	bne.n	8004ec0 <HAL_GPIO_Init+0x1f8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00f      	beq.n	8004e5e <HAL_GPIO_Init+0x196>
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d00b      	beq.n	8004e5e <HAL_GPIO_Init+0x196>
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d007      	beq.n	8004e5e <HAL_GPIO_Init+0x196>
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	2b03      	cmp	r3, #3
 8004e54:	d003      	beq.n	8004e5e <HAL_GPIO_Init+0x196>
 8004e56:	21bd      	movs	r1, #189	@ 0xbd
 8004e58:	4831      	ldr	r0, [pc, #196]	@ (8004f20 <HAL_GPIO_Init+0x258>)
 8004e5a:	f7fe ff6b 	bl	8003d34 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	005b      	lsls	r3, r3, #1
 8004e68:	2203      	movs	r2, #3
 8004e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6e:	43db      	mvns	r3, r3
 8004e70:	69ba      	ldr	r2, [r7, #24]
 8004e72:	4013      	ands	r3, r2
 8004e74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	68da      	ldr	r2, [r3, #12]
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	005b      	lsls	r3, r3, #1
 8004e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e82:	69ba      	ldr	r2, [r7, #24]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	69ba      	ldr	r2, [r7, #24]
 8004e8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e94:	2201      	movs	r2, #1
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9c:	43db      	mvns	r3, r3
 8004e9e:	69ba      	ldr	r2, [r7, #24]
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	091b      	lsrs	r3, r3, #4
 8004eaa:	f003 0201 	and.w	r2, r3, #1
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb4:	69ba      	ldr	r2, [r7, #24]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	69ba      	ldr	r2, [r7, #24]
 8004ebe:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f003 0303 	and.w	r3, r3, #3
 8004ec8:	2b03      	cmp	r3, #3
 8004eca:	d02b      	beq.n	8004f24 <HAL_GPIO_Init+0x25c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00b      	beq.n	8004eec <HAL_GPIO_Init+0x224>
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d007      	beq.n	8004eec <HAL_GPIO_Init+0x224>
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d003      	beq.n	8004eec <HAL_GPIO_Init+0x224>
 8004ee4:	21ce      	movs	r1, #206	@ 0xce
 8004ee6:	480e      	ldr	r0, [pc, #56]	@ (8004f20 <HAL_GPIO_Init+0x258>)
 8004ee8:	f7fe ff24 	bl	8003d34 <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	005b      	lsls	r3, r3, #1
 8004ef6:	2203      	movs	r2, #3
 8004ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8004efc:	43db      	mvns	r3, r3
 8004efe:	69ba      	ldr	r2, [r7, #24]
 8004f00:	4013      	ands	r3, r2
 8004f02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	689a      	ldr	r2, [r3, #8]
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	005b      	lsls	r3, r3, #1
 8004f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f10:	69ba      	ldr	r2, [r7, #24]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	69ba      	ldr	r2, [r7, #24]
 8004f1a:	60da      	str	r2, [r3, #12]
 8004f1c:	e002      	b.n	8004f24 <HAL_GPIO_Init+0x25c>
 8004f1e:	bf00      	nop
 8004f20:	080133ac 	.word	0x080133ac
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	f003 0303 	and.w	r3, r3, #3
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	f040 8134 	bne.w	800519a <HAL_GPIO_Init+0x4d2>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	f000 810b 	beq.w	8005152 <HAL_GPIO_Init+0x48a>
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	f000 8106 	beq.w	8005152 <HAL_GPIO_Init+0x48a>
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	f000 8101 	beq.w	8005152 <HAL_GPIO_Init+0x48a>
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f000 80fc 	beq.w	8005152 <HAL_GPIO_Init+0x48a>
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	f000 80f7 	beq.w	8005152 <HAL_GPIO_Init+0x48a>
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	691b      	ldr	r3, [r3, #16]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	f000 80f2 	beq.w	8005152 <HAL_GPIO_Init+0x48a>
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	f000 80ed 	beq.w	8005152 <HAL_GPIO_Init+0x48a>
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	f000 80e8 	beq.w	8005152 <HAL_GPIO_Init+0x48a>
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	f000 80e3 	beq.w	8005152 <HAL_GPIO_Init+0x48a>
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	2b03      	cmp	r3, #3
 8004f92:	f000 80de 	beq.w	8005152 <HAL_GPIO_Init+0x48a>
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	2b03      	cmp	r3, #3
 8004f9c:	f000 80d9 	beq.w	8005152 <HAL_GPIO_Init+0x48a>
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	2b03      	cmp	r3, #3
 8004fa6:	f000 80d4 	beq.w	8005152 <HAL_GPIO_Init+0x48a>
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	2b03      	cmp	r3, #3
 8004fb0:	f000 80cf 	beq.w	8005152 <HAL_GPIO_Init+0x48a>
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	691b      	ldr	r3, [r3, #16]
 8004fb8:	2b03      	cmp	r3, #3
 8004fba:	f000 80ca 	beq.w	8005152 <HAL_GPIO_Init+0x48a>
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	2b03      	cmp	r3, #3
 8004fc4:	f000 80c5 	beq.w	8005152 <HAL_GPIO_Init+0x48a>
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	691b      	ldr	r3, [r3, #16]
 8004fcc:	2b04      	cmp	r3, #4
 8004fce:	f000 80c0 	beq.w	8005152 <HAL_GPIO_Init+0x48a>
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	2b04      	cmp	r3, #4
 8004fd8:	f000 80bb 	beq.w	8005152 <HAL_GPIO_Init+0x48a>
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	691b      	ldr	r3, [r3, #16]
 8004fe0:	2b04      	cmp	r3, #4
 8004fe2:	f000 80b6 	beq.w	8005152 <HAL_GPIO_Init+0x48a>
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	2b04      	cmp	r3, #4
 8004fec:	f000 80b1 	beq.w	8005152 <HAL_GPIO_Init+0x48a>
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	691b      	ldr	r3, [r3, #16]
 8004ff4:	2b04      	cmp	r3, #4
 8004ff6:	f000 80ac 	beq.w	8005152 <HAL_GPIO_Init+0x48a>
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	2b05      	cmp	r3, #5
 8005000:	f000 80a7 	beq.w	8005152 <HAL_GPIO_Init+0x48a>
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	2b05      	cmp	r3, #5
 800500a:	f000 80a2 	beq.w	8005152 <HAL_GPIO_Init+0x48a>
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	2b05      	cmp	r3, #5
 8005014:	f000 809d 	beq.w	8005152 <HAL_GPIO_Init+0x48a>
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	2b05      	cmp	r3, #5
 800501e:	f000 8098 	beq.w	8005152 <HAL_GPIO_Init+0x48a>
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	2b05      	cmp	r3, #5
 8005028:	f000 8093 	beq.w	8005152 <HAL_GPIO_Init+0x48a>
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	2b05      	cmp	r3, #5
 8005032:	f000 808e 	beq.w	8005152 <HAL_GPIO_Init+0x48a>
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	2b06      	cmp	r3, #6
 800503c:	f000 8089 	beq.w	8005152 <HAL_GPIO_Init+0x48a>
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	2b06      	cmp	r3, #6
 8005046:	f000 8084 	beq.w	8005152 <HAL_GPIO_Init+0x48a>
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	2b07      	cmp	r3, #7
 8005050:	d07f      	beq.n	8005152 <HAL_GPIO_Init+0x48a>
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	2b07      	cmp	r3, #7
 8005058:	d07b      	beq.n	8005152 <HAL_GPIO_Init+0x48a>
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	2b07      	cmp	r3, #7
 8005060:	d077      	beq.n	8005152 <HAL_GPIO_Init+0x48a>
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	2b07      	cmp	r3, #7
 8005068:	d073      	beq.n	8005152 <HAL_GPIO_Init+0x48a>
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	2b07      	cmp	r3, #7
 8005070:	d06f      	beq.n	8005152 <HAL_GPIO_Init+0x48a>
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	2b07      	cmp	r3, #7
 8005078:	d06b      	beq.n	8005152 <HAL_GPIO_Init+0x48a>
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	2b07      	cmp	r3, #7
 8005080:	d067      	beq.n	8005152 <HAL_GPIO_Init+0x48a>
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	2b08      	cmp	r3, #8
 8005088:	d063      	beq.n	8005152 <HAL_GPIO_Init+0x48a>
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	2b08      	cmp	r3, #8
 8005090:	d05f      	beq.n	8005152 <HAL_GPIO_Init+0x48a>
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	2b08      	cmp	r3, #8
 8005098:	d05b      	beq.n	8005152 <HAL_GPIO_Init+0x48a>
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	2b08      	cmp	r3, #8
 80050a0:	d057      	beq.n	8005152 <HAL_GPIO_Init+0x48a>
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	2b08      	cmp	r3, #8
 80050a8:	d053      	beq.n	8005152 <HAL_GPIO_Init+0x48a>
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	2b08      	cmp	r3, #8
 80050b0:	d04f      	beq.n	8005152 <HAL_GPIO_Init+0x48a>
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	2b08      	cmp	r3, #8
 80050b8:	d04b      	beq.n	8005152 <HAL_GPIO_Init+0x48a>
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	2b09      	cmp	r3, #9
 80050c0:	d047      	beq.n	8005152 <HAL_GPIO_Init+0x48a>
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	2b09      	cmp	r3, #9
 80050c8:	d043      	beq.n	8005152 <HAL_GPIO_Init+0x48a>
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	2b09      	cmp	r3, #9
 80050d0:	d03f      	beq.n	8005152 <HAL_GPIO_Init+0x48a>
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	2b09      	cmp	r3, #9
 80050d8:	d03b      	beq.n	8005152 <HAL_GPIO_Init+0x48a>
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	2b09      	cmp	r3, #9
 80050e0:	d037      	beq.n	8005152 <HAL_GPIO_Init+0x48a>
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	2b09      	cmp	r3, #9
 80050e8:	d033      	beq.n	8005152 <HAL_GPIO_Init+0x48a>
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	2b09      	cmp	r3, #9
 80050f0:	d02f      	beq.n	8005152 <HAL_GPIO_Init+0x48a>
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	2b0a      	cmp	r3, #10
 80050f8:	d02b      	beq.n	8005152 <HAL_GPIO_Init+0x48a>
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	2b0a      	cmp	r3, #10
 8005100:	d027      	beq.n	8005152 <HAL_GPIO_Init+0x48a>
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	2b0a      	cmp	r3, #10
 8005108:	d023      	beq.n	8005152 <HAL_GPIO_Init+0x48a>
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	2b0a      	cmp	r3, #10
 8005110:	d01f      	beq.n	8005152 <HAL_GPIO_Init+0x48a>
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	2b0b      	cmp	r3, #11
 8005118:	d01b      	beq.n	8005152 <HAL_GPIO_Init+0x48a>
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	2b0c      	cmp	r3, #12
 8005120:	d017      	beq.n	8005152 <HAL_GPIO_Init+0x48a>
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	2b0c      	cmp	r3, #12
 8005128:	d013      	beq.n	8005152 <HAL_GPIO_Init+0x48a>
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	2b0c      	cmp	r3, #12
 8005130:	d00f      	beq.n	8005152 <HAL_GPIO_Init+0x48a>
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	2b0f      	cmp	r3, #15
 8005138:	d00b      	beq.n	8005152 <HAL_GPIO_Init+0x48a>
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	2b0d      	cmp	r3, #13
 8005140:	d007      	beq.n	8005152 <HAL_GPIO_Init+0x48a>
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	2b0e      	cmp	r3, #14
 8005148:	d003      	beq.n	8005152 <HAL_GPIO_Init+0x48a>
 800514a:	21db      	movs	r1, #219	@ 0xdb
 800514c:	4888      	ldr	r0, [pc, #544]	@ (8005370 <HAL_GPIO_Init+0x6a8>)
 800514e:	f7fe fdf1 	bl	8003d34 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	08da      	lsrs	r2, r3, #3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	3208      	adds	r2, #8
 800515a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800515e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	f003 0307 	and.w	r3, r3, #7
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	220f      	movs	r2, #15
 800516a:	fa02 f303 	lsl.w	r3, r2, r3
 800516e:	43db      	mvns	r3, r3
 8005170:	69ba      	ldr	r2, [r7, #24]
 8005172:	4013      	ands	r3, r2
 8005174:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	691a      	ldr	r2, [r3, #16]
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	f003 0307 	and.w	r3, r3, #7
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	fa02 f303 	lsl.w	r3, r2, r3
 8005186:	69ba      	ldr	r2, [r7, #24]
 8005188:	4313      	orrs	r3, r2
 800518a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	08da      	lsrs	r2, r3, #3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	3208      	adds	r2, #8
 8005194:	69b9      	ldr	r1, [r7, #24]
 8005196:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	005b      	lsls	r3, r3, #1
 80051a4:	2203      	movs	r2, #3
 80051a6:	fa02 f303 	lsl.w	r3, r2, r3
 80051aa:	43db      	mvns	r3, r3
 80051ac:	69ba      	ldr	r2, [r7, #24]
 80051ae:	4013      	ands	r3, r2
 80051b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	f003 0203 	and.w	r2, r3, #3
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	005b      	lsls	r3, r3, #1
 80051be:	fa02 f303 	lsl.w	r3, r2, r3
 80051c2:	69ba      	ldr	r2, [r7, #24]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	69ba      	ldr	r2, [r7, #24]
 80051cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	f000 80be 	beq.w	8005358 <HAL_GPIO_Init+0x690>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051dc:	4b65      	ldr	r3, [pc, #404]	@ (8005374 <HAL_GPIO_Init+0x6ac>)
 80051de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051e0:	4a64      	ldr	r2, [pc, #400]	@ (8005374 <HAL_GPIO_Init+0x6ac>)
 80051e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80051e6:	6453      	str	r3, [r2, #68]	@ 0x44
 80051e8:	4b62      	ldr	r3, [pc, #392]	@ (8005374 <HAL_GPIO_Init+0x6ac>)
 80051ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80051f0:	60fb      	str	r3, [r7, #12]
 80051f2:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80051f4:	4a60      	ldr	r2, [pc, #384]	@ (8005378 <HAL_GPIO_Init+0x6b0>)
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	089b      	lsrs	r3, r3, #2
 80051fa:	3302      	adds	r3, #2
 80051fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005200:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	f003 0303 	and.w	r3, r3, #3
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	220f      	movs	r2, #15
 800520c:	fa02 f303 	lsl.w	r3, r2, r3
 8005210:	43db      	mvns	r3, r3
 8005212:	69ba      	ldr	r2, [r7, #24]
 8005214:	4013      	ands	r3, r2
 8005216:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a58      	ldr	r2, [pc, #352]	@ (800537c <HAL_GPIO_Init+0x6b4>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d037      	beq.n	8005290 <HAL_GPIO_Init+0x5c8>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a57      	ldr	r2, [pc, #348]	@ (8005380 <HAL_GPIO_Init+0x6b8>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d031      	beq.n	800528c <HAL_GPIO_Init+0x5c4>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a56      	ldr	r2, [pc, #344]	@ (8005384 <HAL_GPIO_Init+0x6bc>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d02b      	beq.n	8005288 <HAL_GPIO_Init+0x5c0>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a55      	ldr	r2, [pc, #340]	@ (8005388 <HAL_GPIO_Init+0x6c0>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d025      	beq.n	8005284 <HAL_GPIO_Init+0x5bc>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a54      	ldr	r2, [pc, #336]	@ (800538c <HAL_GPIO_Init+0x6c4>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d01f      	beq.n	8005280 <HAL_GPIO_Init+0x5b8>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4a53      	ldr	r2, [pc, #332]	@ (8005390 <HAL_GPIO_Init+0x6c8>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d019      	beq.n	800527c <HAL_GPIO_Init+0x5b4>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a52      	ldr	r2, [pc, #328]	@ (8005394 <HAL_GPIO_Init+0x6cc>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d013      	beq.n	8005278 <HAL_GPIO_Init+0x5b0>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a51      	ldr	r2, [pc, #324]	@ (8005398 <HAL_GPIO_Init+0x6d0>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d00d      	beq.n	8005274 <HAL_GPIO_Init+0x5ac>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a50      	ldr	r2, [pc, #320]	@ (800539c <HAL_GPIO_Init+0x6d4>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d007      	beq.n	8005270 <HAL_GPIO_Init+0x5a8>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a4f      	ldr	r2, [pc, #316]	@ (80053a0 <HAL_GPIO_Init+0x6d8>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d101      	bne.n	800526c <HAL_GPIO_Init+0x5a4>
 8005268:	2309      	movs	r3, #9
 800526a:	e012      	b.n	8005292 <HAL_GPIO_Init+0x5ca>
 800526c:	230a      	movs	r3, #10
 800526e:	e010      	b.n	8005292 <HAL_GPIO_Init+0x5ca>
 8005270:	2308      	movs	r3, #8
 8005272:	e00e      	b.n	8005292 <HAL_GPIO_Init+0x5ca>
 8005274:	2307      	movs	r3, #7
 8005276:	e00c      	b.n	8005292 <HAL_GPIO_Init+0x5ca>
 8005278:	2306      	movs	r3, #6
 800527a:	e00a      	b.n	8005292 <HAL_GPIO_Init+0x5ca>
 800527c:	2305      	movs	r3, #5
 800527e:	e008      	b.n	8005292 <HAL_GPIO_Init+0x5ca>
 8005280:	2304      	movs	r3, #4
 8005282:	e006      	b.n	8005292 <HAL_GPIO_Init+0x5ca>
 8005284:	2303      	movs	r3, #3
 8005286:	e004      	b.n	8005292 <HAL_GPIO_Init+0x5ca>
 8005288:	2302      	movs	r3, #2
 800528a:	e002      	b.n	8005292 <HAL_GPIO_Init+0x5ca>
 800528c:	2301      	movs	r3, #1
 800528e:	e000      	b.n	8005292 <HAL_GPIO_Init+0x5ca>
 8005290:	2300      	movs	r3, #0
 8005292:	69fa      	ldr	r2, [r7, #28]
 8005294:	f002 0203 	and.w	r2, r2, #3
 8005298:	0092      	lsls	r2, r2, #2
 800529a:	4093      	lsls	r3, r2
 800529c:	69ba      	ldr	r2, [r7, #24]
 800529e:	4313      	orrs	r3, r2
 80052a0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80052a2:	4935      	ldr	r1, [pc, #212]	@ (8005378 <HAL_GPIO_Init+0x6b0>)
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	089b      	lsrs	r3, r3, #2
 80052a8:	3302      	adds	r3, #2
 80052aa:	69ba      	ldr	r2, [r7, #24]
 80052ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80052b0:	4b3c      	ldr	r3, [pc, #240]	@ (80053a4 <HAL_GPIO_Init+0x6dc>)
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	43db      	mvns	r3, r3
 80052ba:	69ba      	ldr	r2, [r7, #24]
 80052bc:	4013      	ands	r3, r2
 80052be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d003      	beq.n	80052d4 <HAL_GPIO_Init+0x60c>
        {
          temp |= iocurrent;
 80052cc:	69ba      	ldr	r2, [r7, #24]
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80052d4:	4a33      	ldr	r2, [pc, #204]	@ (80053a4 <HAL_GPIO_Init+0x6dc>)
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80052da:	4b32      	ldr	r3, [pc, #200]	@ (80053a4 <HAL_GPIO_Init+0x6dc>)
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	43db      	mvns	r3, r3
 80052e4:	69ba      	ldr	r2, [r7, #24]
 80052e6:	4013      	ands	r3, r2
 80052e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d003      	beq.n	80052fe <HAL_GPIO_Init+0x636>
        {
          temp |= iocurrent;
 80052f6:	69ba      	ldr	r2, [r7, #24]
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80052fe:	4a29      	ldr	r2, [pc, #164]	@ (80053a4 <HAL_GPIO_Init+0x6dc>)
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005304:	4b27      	ldr	r3, [pc, #156]	@ (80053a4 <HAL_GPIO_Init+0x6dc>)
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	43db      	mvns	r3, r3
 800530e:	69ba      	ldr	r2, [r7, #24]
 8005310:	4013      	ands	r3, r2
 8005312:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800531c:	2b00      	cmp	r3, #0
 800531e:	d003      	beq.n	8005328 <HAL_GPIO_Init+0x660>
        {
          temp |= iocurrent;
 8005320:	69ba      	ldr	r2, [r7, #24]
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	4313      	orrs	r3, r2
 8005326:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005328:	4a1e      	ldr	r2, [pc, #120]	@ (80053a4 <HAL_GPIO_Init+0x6dc>)
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800532e:	4b1d      	ldr	r3, [pc, #116]	@ (80053a4 <HAL_GPIO_Init+0x6dc>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	43db      	mvns	r3, r3
 8005338:	69ba      	ldr	r2, [r7, #24]
 800533a:	4013      	ands	r3, r2
 800533c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d003      	beq.n	8005352 <HAL_GPIO_Init+0x68a>
        {
          temp |= iocurrent;
 800534a:	69ba      	ldr	r2, [r7, #24]
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	4313      	orrs	r3, r2
 8005350:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005352:	4a14      	ldr	r2, [pc, #80]	@ (80053a4 <HAL_GPIO_Init+0x6dc>)
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	3301      	adds	r3, #1
 800535c:	61fb      	str	r3, [r7, #28]
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	2b0f      	cmp	r3, #15
 8005362:	f67f ad4d 	bls.w	8004e00 <HAL_GPIO_Init+0x138>
      }
    }
  }
}
 8005366:	bf00      	nop
 8005368:	bf00      	nop
 800536a:	3720      	adds	r7, #32
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}
 8005370:	080133ac 	.word	0x080133ac
 8005374:	40023800 	.word	0x40023800
 8005378:	40013800 	.word	0x40013800
 800537c:	40020000 	.word	0x40020000
 8005380:	40020400 	.word	0x40020400
 8005384:	40020800 	.word	0x40020800
 8005388:	40020c00 	.word	0x40020c00
 800538c:	40021000 	.word	0x40021000
 8005390:	40021400 	.word	0x40021400
 8005394:	40021800 	.word	0x40021800
 8005398:	40021c00 	.word	0x40021c00
 800539c:	40022000 	.word	0x40022000
 80053a0:	40022400 	.word	0x40022400
 80053a4:	40013c00 	.word	0x40013c00

080053a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b082      	sub	sp, #8
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	460b      	mov	r3, r1
 80053b2:	807b      	strh	r3, [r7, #2]
 80053b4:	4613      	mov	r3, r2
 80053b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80053b8:	887b      	ldrh	r3, [r7, #2]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d104      	bne.n	80053c8 <HAL_GPIO_WritePin+0x20>
 80053be:	f240 1197 	movw	r1, #407	@ 0x197
 80053c2:	480e      	ldr	r0, [pc, #56]	@ (80053fc <HAL_GPIO_WritePin+0x54>)
 80053c4:	f7fe fcb6 	bl	8003d34 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80053c8:	787b      	ldrb	r3, [r7, #1]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d007      	beq.n	80053de <HAL_GPIO_WritePin+0x36>
 80053ce:	787b      	ldrb	r3, [r7, #1]
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d004      	beq.n	80053de <HAL_GPIO_WritePin+0x36>
 80053d4:	f44f 71cc 	mov.w	r1, #408	@ 0x198
 80053d8:	4808      	ldr	r0, [pc, #32]	@ (80053fc <HAL_GPIO_WritePin+0x54>)
 80053da:	f7fe fcab 	bl	8003d34 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 80053de:	787b      	ldrb	r3, [r7, #1]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d003      	beq.n	80053ec <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 80053e4:	887a      	ldrh	r2, [r7, #2]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80053ea:	e003      	b.n	80053f4 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80053ec:	887b      	ldrh	r3, [r7, #2]
 80053ee:	041a      	lsls	r2, r3, #16
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	619a      	str	r2, [r3, #24]
}
 80053f4:	bf00      	nop
 80053f6:	3708      	adds	r7, #8
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	080133ac 	.word	0x080133ac

08005400 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b086      	sub	sp, #24
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005408:	2300      	movs	r3, #0
 800540a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d101      	bne.n	8005416 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e345      	b.n	8005aa2 <HAL_RCC_OscConfig+0x6a2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2b0f      	cmp	r3, #15
 800541c:	d904      	bls.n	8005428 <HAL_RCC_OscConfig+0x28>
 800541e:	f240 1163 	movw	r1, #355	@ 0x163
 8005422:	4892      	ldr	r0, [pc, #584]	@ (800566c <HAL_RCC_OscConfig+0x26c>)
 8005424:	f7fe fc86 	bl	8003d34 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0301 	and.w	r3, r3, #1
 8005430:	2b00      	cmp	r3, #0
 8005432:	f000 809a 	beq.w	800556a <HAL_RCC_OscConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00e      	beq.n	800545c <HAL_RCC_OscConfig+0x5c>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005446:	d009      	beq.n	800545c <HAL_RCC_OscConfig+0x5c>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005450:	d004      	beq.n	800545c <HAL_RCC_OscConfig+0x5c>
 8005452:	f240 1169 	movw	r1, #361	@ 0x169
 8005456:	4885      	ldr	r0, [pc, #532]	@ (800566c <HAL_RCC_OscConfig+0x26c>)
 8005458:	f7fe fc6c 	bl	8003d34 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800545c:	4b84      	ldr	r3, [pc, #528]	@ (8005670 <HAL_RCC_OscConfig+0x270>)
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	f003 030c 	and.w	r3, r3, #12
 8005464:	2b04      	cmp	r3, #4
 8005466:	d00c      	beq.n	8005482 <HAL_RCC_OscConfig+0x82>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005468:	4b81      	ldr	r3, [pc, #516]	@ (8005670 <HAL_RCC_OscConfig+0x270>)
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	f003 030c 	and.w	r3, r3, #12
 8005470:	2b08      	cmp	r3, #8
 8005472:	d112      	bne.n	800549a <HAL_RCC_OscConfig+0x9a>
 8005474:	4b7e      	ldr	r3, [pc, #504]	@ (8005670 <HAL_RCC_OscConfig+0x270>)
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800547c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005480:	d10b      	bne.n	800549a <HAL_RCC_OscConfig+0x9a>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005482:	4b7b      	ldr	r3, [pc, #492]	@ (8005670 <HAL_RCC_OscConfig+0x270>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800548a:	2b00      	cmp	r3, #0
 800548c:	d06c      	beq.n	8005568 <HAL_RCC_OscConfig+0x168>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d168      	bne.n	8005568 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e303      	b.n	8005aa2 <HAL_RCC_OscConfig+0x6a2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054a2:	d106      	bne.n	80054b2 <HAL_RCC_OscConfig+0xb2>
 80054a4:	4b72      	ldr	r3, [pc, #456]	@ (8005670 <HAL_RCC_OscConfig+0x270>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a71      	ldr	r2, [pc, #452]	@ (8005670 <HAL_RCC_OscConfig+0x270>)
 80054aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054ae:	6013      	str	r3, [r2, #0]
 80054b0:	e02e      	b.n	8005510 <HAL_RCC_OscConfig+0x110>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d10c      	bne.n	80054d4 <HAL_RCC_OscConfig+0xd4>
 80054ba:	4b6d      	ldr	r3, [pc, #436]	@ (8005670 <HAL_RCC_OscConfig+0x270>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a6c      	ldr	r2, [pc, #432]	@ (8005670 <HAL_RCC_OscConfig+0x270>)
 80054c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054c4:	6013      	str	r3, [r2, #0]
 80054c6:	4b6a      	ldr	r3, [pc, #424]	@ (8005670 <HAL_RCC_OscConfig+0x270>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a69      	ldr	r2, [pc, #420]	@ (8005670 <HAL_RCC_OscConfig+0x270>)
 80054cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80054d0:	6013      	str	r3, [r2, #0]
 80054d2:	e01d      	b.n	8005510 <HAL_RCC_OscConfig+0x110>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80054dc:	d10c      	bne.n	80054f8 <HAL_RCC_OscConfig+0xf8>
 80054de:	4b64      	ldr	r3, [pc, #400]	@ (8005670 <HAL_RCC_OscConfig+0x270>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a63      	ldr	r2, [pc, #396]	@ (8005670 <HAL_RCC_OscConfig+0x270>)
 80054e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80054e8:	6013      	str	r3, [r2, #0]
 80054ea:	4b61      	ldr	r3, [pc, #388]	@ (8005670 <HAL_RCC_OscConfig+0x270>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a60      	ldr	r2, [pc, #384]	@ (8005670 <HAL_RCC_OscConfig+0x270>)
 80054f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054f4:	6013      	str	r3, [r2, #0]
 80054f6:	e00b      	b.n	8005510 <HAL_RCC_OscConfig+0x110>
 80054f8:	4b5d      	ldr	r3, [pc, #372]	@ (8005670 <HAL_RCC_OscConfig+0x270>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a5c      	ldr	r2, [pc, #368]	@ (8005670 <HAL_RCC_OscConfig+0x270>)
 80054fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005502:	6013      	str	r3, [r2, #0]
 8005504:	4b5a      	ldr	r3, [pc, #360]	@ (8005670 <HAL_RCC_OscConfig+0x270>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a59      	ldr	r2, [pc, #356]	@ (8005670 <HAL_RCC_OscConfig+0x270>)
 800550a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800550e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d013      	beq.n	8005540 <HAL_RCC_OscConfig+0x140>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005518:	f7ff f8da 	bl	80046d0 <HAL_GetTick>
 800551c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800551e:	e008      	b.n	8005532 <HAL_RCC_OscConfig+0x132>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005520:	f7ff f8d6 	bl	80046d0 <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	2b64      	cmp	r3, #100	@ 0x64
 800552c:	d901      	bls.n	8005532 <HAL_RCC_OscConfig+0x132>
          {
            return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e2b7      	b.n	8005aa2 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005532:	4b4f      	ldr	r3, [pc, #316]	@ (8005670 <HAL_RCC_OscConfig+0x270>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d0f0      	beq.n	8005520 <HAL_RCC_OscConfig+0x120>
 800553e:	e014      	b.n	800556a <HAL_RCC_OscConfig+0x16a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005540:	f7ff f8c6 	bl	80046d0 <HAL_GetTick>
 8005544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005546:	e008      	b.n	800555a <HAL_RCC_OscConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005548:	f7ff f8c2 	bl	80046d0 <HAL_GetTick>
 800554c:	4602      	mov	r2, r0
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	2b64      	cmp	r3, #100	@ 0x64
 8005554:	d901      	bls.n	800555a <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e2a3      	b.n	8005aa2 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800555a:	4b45      	ldr	r3, [pc, #276]	@ (8005670 <HAL_RCC_OscConfig+0x270>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d1f0      	bne.n	8005548 <HAL_RCC_OscConfig+0x148>
 8005566:	e000      	b.n	800556a <HAL_RCC_OscConfig+0x16a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005568:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 0302 	and.w	r3, r3, #2
 8005572:	2b00      	cmp	r3, #0
 8005574:	f000 8084 	beq.w	8005680 <HAL_RCC_OscConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d008      	beq.n	8005592 <HAL_RCC_OscConfig+0x192>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	2b01      	cmp	r3, #1
 8005586:	d004      	beq.n	8005592 <HAL_RCC_OscConfig+0x192>
 8005588:	f240 119b 	movw	r1, #411	@ 0x19b
 800558c:	4837      	ldr	r0, [pc, #220]	@ (800566c <HAL_RCC_OscConfig+0x26c>)
 800558e:	f7fe fbd1 	bl	8003d34 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	2b1f      	cmp	r3, #31
 8005598:	d904      	bls.n	80055a4 <HAL_RCC_OscConfig+0x1a4>
 800559a:	f44f 71ce 	mov.w	r1, #412	@ 0x19c
 800559e:	4833      	ldr	r0, [pc, #204]	@ (800566c <HAL_RCC_OscConfig+0x26c>)
 80055a0:	f7fe fbc8 	bl	8003d34 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80055a4:	4b32      	ldr	r3, [pc, #200]	@ (8005670 <HAL_RCC_OscConfig+0x270>)
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	f003 030c 	and.w	r3, r3, #12
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d00b      	beq.n	80055c8 <HAL_RCC_OscConfig+0x1c8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055b0:	4b2f      	ldr	r3, [pc, #188]	@ (8005670 <HAL_RCC_OscConfig+0x270>)
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	f003 030c 	and.w	r3, r3, #12
 80055b8:	2b08      	cmp	r3, #8
 80055ba:	d11c      	bne.n	80055f6 <HAL_RCC_OscConfig+0x1f6>
 80055bc:	4b2c      	ldr	r3, [pc, #176]	@ (8005670 <HAL_RCC_OscConfig+0x270>)
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d116      	bne.n	80055f6 <HAL_RCC_OscConfig+0x1f6>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055c8:	4b29      	ldr	r3, [pc, #164]	@ (8005670 <HAL_RCC_OscConfig+0x270>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 0302 	and.w	r3, r3, #2
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d005      	beq.n	80055e0 <HAL_RCC_OscConfig+0x1e0>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d001      	beq.n	80055e0 <HAL_RCC_OscConfig+0x1e0>
      {
        return HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	e260      	b.n	8005aa2 <HAL_RCC_OscConfig+0x6a2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055e0:	4b23      	ldr	r3, [pc, #140]	@ (8005670 <HAL_RCC_OscConfig+0x270>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	691b      	ldr	r3, [r3, #16]
 80055ec:	00db      	lsls	r3, r3, #3
 80055ee:	4920      	ldr	r1, [pc, #128]	@ (8005670 <HAL_RCC_OscConfig+0x270>)
 80055f0:	4313      	orrs	r3, r2
 80055f2:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055f4:	e044      	b.n	8005680 <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d023      	beq.n	8005646 <HAL_RCC_OscConfig+0x246>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055fe:	4b1c      	ldr	r3, [pc, #112]	@ (8005670 <HAL_RCC_OscConfig+0x270>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a1b      	ldr	r2, [pc, #108]	@ (8005670 <HAL_RCC_OscConfig+0x270>)
 8005604:	f043 0301 	orr.w	r3, r3, #1
 8005608:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800560a:	f7ff f861 	bl	80046d0 <HAL_GetTick>
 800560e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005610:	e008      	b.n	8005624 <HAL_RCC_OscConfig+0x224>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005612:	f7ff f85d 	bl	80046d0 <HAL_GetTick>
 8005616:	4602      	mov	r2, r0
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	1ad3      	subs	r3, r2, r3
 800561c:	2b02      	cmp	r3, #2
 800561e:	d901      	bls.n	8005624 <HAL_RCC_OscConfig+0x224>
          {
            return HAL_TIMEOUT;
 8005620:	2303      	movs	r3, #3
 8005622:	e23e      	b.n	8005aa2 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005624:	4b12      	ldr	r3, [pc, #72]	@ (8005670 <HAL_RCC_OscConfig+0x270>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0302 	and.w	r3, r3, #2
 800562c:	2b00      	cmp	r3, #0
 800562e:	d0f0      	beq.n	8005612 <HAL_RCC_OscConfig+0x212>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005630:	4b0f      	ldr	r3, [pc, #60]	@ (8005670 <HAL_RCC_OscConfig+0x270>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	00db      	lsls	r3, r3, #3
 800563e:	490c      	ldr	r1, [pc, #48]	@ (8005670 <HAL_RCC_OscConfig+0x270>)
 8005640:	4313      	orrs	r3, r2
 8005642:	600b      	str	r3, [r1, #0]
 8005644:	e01c      	b.n	8005680 <HAL_RCC_OscConfig+0x280>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005646:	4b0a      	ldr	r3, [pc, #40]	@ (8005670 <HAL_RCC_OscConfig+0x270>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a09      	ldr	r2, [pc, #36]	@ (8005670 <HAL_RCC_OscConfig+0x270>)
 800564c:	f023 0301 	bic.w	r3, r3, #1
 8005650:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005652:	f7ff f83d 	bl	80046d0 <HAL_GetTick>
 8005656:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005658:	e00c      	b.n	8005674 <HAL_RCC_OscConfig+0x274>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800565a:	f7ff f839 	bl	80046d0 <HAL_GetTick>
 800565e:	4602      	mov	r2, r0
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	2b02      	cmp	r3, #2
 8005666:	d905      	bls.n	8005674 <HAL_RCC_OscConfig+0x274>
          {
            return HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	e21a      	b.n	8005aa2 <HAL_RCC_OscConfig+0x6a2>
 800566c:	080133e8 	.word	0x080133e8
 8005670:	40023800 	.word	0x40023800
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005674:	4b7e      	ldr	r3, [pc, #504]	@ (8005870 <HAL_RCC_OscConfig+0x470>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 0302 	and.w	r3, r3, #2
 800567c:	2b00      	cmp	r3, #0
 800567e:	d1ec      	bne.n	800565a <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 0308 	and.w	r3, r3, #8
 8005688:	2b00      	cmp	r3, #0
 800568a:	d043      	beq.n	8005714 <HAL_RCC_OscConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	695b      	ldr	r3, [r3, #20]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d008      	beq.n	80056a6 <HAL_RCC_OscConfig+0x2a6>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	695b      	ldr	r3, [r3, #20]
 8005698:	2b01      	cmp	r3, #1
 800569a:	d004      	beq.n	80056a6 <HAL_RCC_OscConfig+0x2a6>
 800569c:	f44f 71ee 	mov.w	r1, #476	@ 0x1dc
 80056a0:	4874      	ldr	r0, [pc, #464]	@ (8005874 <HAL_RCC_OscConfig+0x474>)
 80056a2:	f7fe fb47 	bl	8003d34 <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	695b      	ldr	r3, [r3, #20]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d019      	beq.n	80056e2 <HAL_RCC_OscConfig+0x2e2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056ae:	4b70      	ldr	r3, [pc, #448]	@ (8005870 <HAL_RCC_OscConfig+0x470>)
 80056b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056b2:	4a6f      	ldr	r2, [pc, #444]	@ (8005870 <HAL_RCC_OscConfig+0x470>)
 80056b4:	f043 0301 	orr.w	r3, r3, #1
 80056b8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056ba:	f7ff f809 	bl	80046d0 <HAL_GetTick>
 80056be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056c0:	e008      	b.n	80056d4 <HAL_RCC_OscConfig+0x2d4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056c2:	f7ff f805 	bl	80046d0 <HAL_GetTick>
 80056c6:	4602      	mov	r2, r0
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	1ad3      	subs	r3, r2, r3
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	d901      	bls.n	80056d4 <HAL_RCC_OscConfig+0x2d4>
        {
          return HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	e1e6      	b.n	8005aa2 <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056d4:	4b66      	ldr	r3, [pc, #408]	@ (8005870 <HAL_RCC_OscConfig+0x470>)
 80056d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056d8:	f003 0302 	and.w	r3, r3, #2
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d0f0      	beq.n	80056c2 <HAL_RCC_OscConfig+0x2c2>
 80056e0:	e018      	b.n	8005714 <HAL_RCC_OscConfig+0x314>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056e2:	4b63      	ldr	r3, [pc, #396]	@ (8005870 <HAL_RCC_OscConfig+0x470>)
 80056e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056e6:	4a62      	ldr	r2, [pc, #392]	@ (8005870 <HAL_RCC_OscConfig+0x470>)
 80056e8:	f023 0301 	bic.w	r3, r3, #1
 80056ec:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056ee:	f7fe ffef 	bl	80046d0 <HAL_GetTick>
 80056f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056f4:	e008      	b.n	8005708 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056f6:	f7fe ffeb 	bl	80046d0 <HAL_GetTick>
 80056fa:	4602      	mov	r2, r0
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	2b02      	cmp	r3, #2
 8005702:	d901      	bls.n	8005708 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	e1cc      	b.n	8005aa2 <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005708:	4b59      	ldr	r3, [pc, #356]	@ (8005870 <HAL_RCC_OscConfig+0x470>)
 800570a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800570c:	f003 0302 	and.w	r3, r3, #2
 8005710:	2b00      	cmp	r3, #0
 8005712:	d1f0      	bne.n	80056f6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 0304 	and.w	r3, r3, #4
 800571c:	2b00      	cmp	r3, #0
 800571e:	f000 80bc 	beq.w	800589a <HAL_RCC_OscConfig+0x49a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00c      	beq.n	8005744 <HAL_RCC_OscConfig+0x344>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	2b01      	cmp	r3, #1
 8005730:	d008      	beq.n	8005744 <HAL_RCC_OscConfig+0x344>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	2b05      	cmp	r3, #5
 8005738:	d004      	beq.n	8005744 <HAL_RCC_OscConfig+0x344>
 800573a:	f240 2106 	movw	r1, #518	@ 0x206
 800573e:	484d      	ldr	r0, [pc, #308]	@ (8005874 <HAL_RCC_OscConfig+0x474>)
 8005740:	f7fe faf8 	bl	8003d34 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005744:	4b4a      	ldr	r3, [pc, #296]	@ (8005870 <HAL_RCC_OscConfig+0x470>)
 8005746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005748:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800574c:	2b00      	cmp	r3, #0
 800574e:	d10d      	bne.n	800576c <HAL_RCC_OscConfig+0x36c>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005750:	4b47      	ldr	r3, [pc, #284]	@ (8005870 <HAL_RCC_OscConfig+0x470>)
 8005752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005754:	4a46      	ldr	r2, [pc, #280]	@ (8005870 <HAL_RCC_OscConfig+0x470>)
 8005756:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800575a:	6413      	str	r3, [r2, #64]	@ 0x40
 800575c:	4b44      	ldr	r3, [pc, #272]	@ (8005870 <HAL_RCC_OscConfig+0x470>)
 800575e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005760:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005764:	60bb      	str	r3, [r7, #8]
 8005766:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005768:	2301      	movs	r3, #1
 800576a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800576c:	4b42      	ldr	r3, [pc, #264]	@ (8005878 <HAL_RCC_OscConfig+0x478>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005774:	2b00      	cmp	r3, #0
 8005776:	d118      	bne.n	80057aa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005778:	4b3f      	ldr	r3, [pc, #252]	@ (8005878 <HAL_RCC_OscConfig+0x478>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a3e      	ldr	r2, [pc, #248]	@ (8005878 <HAL_RCC_OscConfig+0x478>)
 800577e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005782:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005784:	f7fe ffa4 	bl	80046d0 <HAL_GetTick>
 8005788:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800578a:	e008      	b.n	800579e <HAL_RCC_OscConfig+0x39e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800578c:	f7fe ffa0 	bl	80046d0 <HAL_GetTick>
 8005790:	4602      	mov	r2, r0
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	2b64      	cmp	r3, #100	@ 0x64
 8005798:	d901      	bls.n	800579e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	e181      	b.n	8005aa2 <HAL_RCC_OscConfig+0x6a2>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800579e:	4b36      	ldr	r3, [pc, #216]	@ (8005878 <HAL_RCC_OscConfig+0x478>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d0f0      	beq.n	800578c <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d106      	bne.n	80057c0 <HAL_RCC_OscConfig+0x3c0>
 80057b2:	4b2f      	ldr	r3, [pc, #188]	@ (8005870 <HAL_RCC_OscConfig+0x470>)
 80057b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057b6:	4a2e      	ldr	r2, [pc, #184]	@ (8005870 <HAL_RCC_OscConfig+0x470>)
 80057b8:	f043 0301 	orr.w	r3, r3, #1
 80057bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80057be:	e02d      	b.n	800581c <HAL_RCC_OscConfig+0x41c>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d10c      	bne.n	80057e2 <HAL_RCC_OscConfig+0x3e2>
 80057c8:	4b29      	ldr	r3, [pc, #164]	@ (8005870 <HAL_RCC_OscConfig+0x470>)
 80057ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057cc:	4a28      	ldr	r2, [pc, #160]	@ (8005870 <HAL_RCC_OscConfig+0x470>)
 80057ce:	f023 0301 	bic.w	r3, r3, #1
 80057d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80057d4:	4b26      	ldr	r3, [pc, #152]	@ (8005870 <HAL_RCC_OscConfig+0x470>)
 80057d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057d8:	4a25      	ldr	r2, [pc, #148]	@ (8005870 <HAL_RCC_OscConfig+0x470>)
 80057da:	f023 0304 	bic.w	r3, r3, #4
 80057de:	6713      	str	r3, [r2, #112]	@ 0x70
 80057e0:	e01c      	b.n	800581c <HAL_RCC_OscConfig+0x41c>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	2b05      	cmp	r3, #5
 80057e8:	d10c      	bne.n	8005804 <HAL_RCC_OscConfig+0x404>
 80057ea:	4b21      	ldr	r3, [pc, #132]	@ (8005870 <HAL_RCC_OscConfig+0x470>)
 80057ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057ee:	4a20      	ldr	r2, [pc, #128]	@ (8005870 <HAL_RCC_OscConfig+0x470>)
 80057f0:	f043 0304 	orr.w	r3, r3, #4
 80057f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80057f6:	4b1e      	ldr	r3, [pc, #120]	@ (8005870 <HAL_RCC_OscConfig+0x470>)
 80057f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057fa:	4a1d      	ldr	r2, [pc, #116]	@ (8005870 <HAL_RCC_OscConfig+0x470>)
 80057fc:	f043 0301 	orr.w	r3, r3, #1
 8005800:	6713      	str	r3, [r2, #112]	@ 0x70
 8005802:	e00b      	b.n	800581c <HAL_RCC_OscConfig+0x41c>
 8005804:	4b1a      	ldr	r3, [pc, #104]	@ (8005870 <HAL_RCC_OscConfig+0x470>)
 8005806:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005808:	4a19      	ldr	r2, [pc, #100]	@ (8005870 <HAL_RCC_OscConfig+0x470>)
 800580a:	f023 0301 	bic.w	r3, r3, #1
 800580e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005810:	4b17      	ldr	r3, [pc, #92]	@ (8005870 <HAL_RCC_OscConfig+0x470>)
 8005812:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005814:	4a16      	ldr	r2, [pc, #88]	@ (8005870 <HAL_RCC_OscConfig+0x470>)
 8005816:	f023 0304 	bic.w	r3, r3, #4
 800581a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d015      	beq.n	8005850 <HAL_RCC_OscConfig+0x450>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005824:	f7fe ff54 	bl	80046d0 <HAL_GetTick>
 8005828:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800582a:	e00a      	b.n	8005842 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800582c:	f7fe ff50 	bl	80046d0 <HAL_GetTick>
 8005830:	4602      	mov	r2, r0
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	f241 3288 	movw	r2, #5000	@ 0x1388
 800583a:	4293      	cmp	r3, r2
 800583c:	d901      	bls.n	8005842 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	e12f      	b.n	8005aa2 <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005842:	4b0b      	ldr	r3, [pc, #44]	@ (8005870 <HAL_RCC_OscConfig+0x470>)
 8005844:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005846:	f003 0302 	and.w	r3, r3, #2
 800584a:	2b00      	cmp	r3, #0
 800584c:	d0ee      	beq.n	800582c <HAL_RCC_OscConfig+0x42c>
 800584e:	e01b      	b.n	8005888 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005850:	f7fe ff3e 	bl	80046d0 <HAL_GetTick>
 8005854:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005856:	e011      	b.n	800587c <HAL_RCC_OscConfig+0x47c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005858:	f7fe ff3a 	bl	80046d0 <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005866:	4293      	cmp	r3, r2
 8005868:	d908      	bls.n	800587c <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 800586a:	2303      	movs	r3, #3
 800586c:	e119      	b.n	8005aa2 <HAL_RCC_OscConfig+0x6a2>
 800586e:	bf00      	nop
 8005870:	40023800 	.word	0x40023800
 8005874:	080133e8 	.word	0x080133e8
 8005878:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800587c:	4b8b      	ldr	r3, [pc, #556]	@ (8005aac <HAL_RCC_OscConfig+0x6ac>)
 800587e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005880:	f003 0302 	and.w	r3, r3, #2
 8005884:	2b00      	cmp	r3, #0
 8005886:	d1e7      	bne.n	8005858 <HAL_RCC_OscConfig+0x458>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005888:	7dfb      	ldrb	r3, [r7, #23]
 800588a:	2b01      	cmp	r3, #1
 800588c:	d105      	bne.n	800589a <HAL_RCC_OscConfig+0x49a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800588e:	4b87      	ldr	r3, [pc, #540]	@ (8005aac <HAL_RCC_OscConfig+0x6ac>)
 8005890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005892:	4a86      	ldr	r2, [pc, #536]	@ (8005aac <HAL_RCC_OscConfig+0x6ac>)
 8005894:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005898:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	699b      	ldr	r3, [r3, #24]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d00c      	beq.n	80058bc <HAL_RCC_OscConfig+0x4bc>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	699b      	ldr	r3, [r3, #24]
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d008      	beq.n	80058bc <HAL_RCC_OscConfig+0x4bc>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	699b      	ldr	r3, [r3, #24]
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d004      	beq.n	80058bc <HAL_RCC_OscConfig+0x4bc>
 80058b2:	f240 214a 	movw	r1, #586	@ 0x24a
 80058b6:	487e      	ldr	r0, [pc, #504]	@ (8005ab0 <HAL_RCC_OscConfig+0x6b0>)
 80058b8:	f7fe fa3c 	bl	8003d34 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	699b      	ldr	r3, [r3, #24]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	f000 80ed 	beq.w	8005aa0 <HAL_RCC_OscConfig+0x6a0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80058c6:	4b79      	ldr	r3, [pc, #484]	@ (8005aac <HAL_RCC_OscConfig+0x6ac>)
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	f003 030c 	and.w	r3, r3, #12
 80058ce:	2b08      	cmp	r3, #8
 80058d0:	f000 80b4 	beq.w	8005a3c <HAL_RCC_OscConfig+0x63c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	699b      	ldr	r3, [r3, #24]
 80058d8:	2b02      	cmp	r3, #2
 80058da:	f040 8095 	bne.w	8005a08 <HAL_RCC_OscConfig+0x608>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	69db      	ldr	r3, [r3, #28]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d009      	beq.n	80058fa <HAL_RCC_OscConfig+0x4fa>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	69db      	ldr	r3, [r3, #28]
 80058ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80058ee:	d004      	beq.n	80058fa <HAL_RCC_OscConfig+0x4fa>
 80058f0:	f240 2153 	movw	r1, #595	@ 0x253
 80058f4:	486e      	ldr	r0, [pc, #440]	@ (8005ab0 <HAL_RCC_OscConfig+0x6b0>)
 80058f6:	f7fe fa1d 	bl	8003d34 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a1b      	ldr	r3, [r3, #32]
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d903      	bls.n	800590a <HAL_RCC_OscConfig+0x50a>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a1b      	ldr	r3, [r3, #32]
 8005906:	2b3f      	cmp	r3, #63	@ 0x3f
 8005908:	d904      	bls.n	8005914 <HAL_RCC_OscConfig+0x514>
 800590a:	f44f 7115 	mov.w	r1, #596	@ 0x254
 800590e:	4868      	ldr	r0, [pc, #416]	@ (8005ab0 <HAL_RCC_OscConfig+0x6b0>)
 8005910:	f7fe fa10 	bl	8003d34 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005918:	2b31      	cmp	r3, #49	@ 0x31
 800591a:	d904      	bls.n	8005926 <HAL_RCC_OscConfig+0x526>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005920:	f5b3 7fd8 	cmp.w	r3, #432	@ 0x1b0
 8005924:	d904      	bls.n	8005930 <HAL_RCC_OscConfig+0x530>
 8005926:	f240 2155 	movw	r1, #597	@ 0x255
 800592a:	4861      	ldr	r0, [pc, #388]	@ (8005ab0 <HAL_RCC_OscConfig+0x6b0>)
 800592c:	f7fe fa02 	bl	8003d34 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005934:	2b02      	cmp	r3, #2
 8005936:	d010      	beq.n	800595a <HAL_RCC_OscConfig+0x55a>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800593c:	2b04      	cmp	r3, #4
 800593e:	d00c      	beq.n	800595a <HAL_RCC_OscConfig+0x55a>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005944:	2b06      	cmp	r3, #6
 8005946:	d008      	beq.n	800595a <HAL_RCC_OscConfig+0x55a>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800594c:	2b08      	cmp	r3, #8
 800594e:	d004      	beq.n	800595a <HAL_RCC_OscConfig+0x55a>
 8005950:	f240 2156 	movw	r1, #598	@ 0x256
 8005954:	4856      	ldr	r0, [pc, #344]	@ (8005ab0 <HAL_RCC_OscConfig+0x6b0>)
 8005956:	f7fe f9ed 	bl	8003d34 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800595e:	2b01      	cmp	r3, #1
 8005960:	d903      	bls.n	800596a <HAL_RCC_OscConfig+0x56a>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005966:	2b0f      	cmp	r3, #15
 8005968:	d904      	bls.n	8005974 <HAL_RCC_OscConfig+0x574>
 800596a:	f240 2157 	movw	r1, #599	@ 0x257
 800596e:	4850      	ldr	r0, [pc, #320]	@ (8005ab0 <HAL_RCC_OscConfig+0x6b0>)
 8005970:	f7fe f9e0 	bl	8003d34 <assert_failed>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005974:	4b4d      	ldr	r3, [pc, #308]	@ (8005aac <HAL_RCC_OscConfig+0x6ac>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a4c      	ldr	r2, [pc, #304]	@ (8005aac <HAL_RCC_OscConfig+0x6ac>)
 800597a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800597e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005980:	f7fe fea6 	bl	80046d0 <HAL_GetTick>
 8005984:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005986:	e008      	b.n	800599a <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005988:	f7fe fea2 	bl	80046d0 <HAL_GetTick>
 800598c:	4602      	mov	r2, r0
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	2b02      	cmp	r3, #2
 8005994:	d901      	bls.n	800599a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e083      	b.n	8005aa2 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800599a:	4b44      	ldr	r3, [pc, #272]	@ (8005aac <HAL_RCC_OscConfig+0x6ac>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d1f0      	bne.n	8005988 <HAL_RCC_OscConfig+0x588>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	69da      	ldr	r2, [r3, #28]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a1b      	ldr	r3, [r3, #32]
 80059ae:	431a      	orrs	r2, r3
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059b4:	019b      	lsls	r3, r3, #6
 80059b6:	431a      	orrs	r2, r3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059bc:	085b      	lsrs	r3, r3, #1
 80059be:	3b01      	subs	r3, #1
 80059c0:	041b      	lsls	r3, r3, #16
 80059c2:	431a      	orrs	r2, r3
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059c8:	061b      	lsls	r3, r3, #24
 80059ca:	4313      	orrs	r3, r2
 80059cc:	4a37      	ldr	r2, [pc, #220]	@ (8005aac <HAL_RCC_OscConfig+0x6ac>)
 80059ce:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80059d2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059d4:	4b35      	ldr	r3, [pc, #212]	@ (8005aac <HAL_RCC_OscConfig+0x6ac>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a34      	ldr	r2, [pc, #208]	@ (8005aac <HAL_RCC_OscConfig+0x6ac>)
 80059da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80059de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059e0:	f7fe fe76 	bl	80046d0 <HAL_GetTick>
 80059e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059e6:	e008      	b.n	80059fa <HAL_RCC_OscConfig+0x5fa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059e8:	f7fe fe72 	bl	80046d0 <HAL_GetTick>
 80059ec:	4602      	mov	r2, r0
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	1ad3      	subs	r3, r2, r3
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	d901      	bls.n	80059fa <HAL_RCC_OscConfig+0x5fa>
          {
            return HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	e053      	b.n	8005aa2 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059fa:	4b2c      	ldr	r3, [pc, #176]	@ (8005aac <HAL_RCC_OscConfig+0x6ac>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d0f0      	beq.n	80059e8 <HAL_RCC_OscConfig+0x5e8>
 8005a06:	e04b      	b.n	8005aa0 <HAL_RCC_OscConfig+0x6a0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a08:	4b28      	ldr	r3, [pc, #160]	@ (8005aac <HAL_RCC_OscConfig+0x6ac>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a27      	ldr	r2, [pc, #156]	@ (8005aac <HAL_RCC_OscConfig+0x6ac>)
 8005a0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a14:	f7fe fe5c 	bl	80046d0 <HAL_GetTick>
 8005a18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a1a:	e008      	b.n	8005a2e <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a1c:	f7fe fe58 	bl	80046d0 <HAL_GetTick>
 8005a20:	4602      	mov	r2, r0
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d901      	bls.n	8005a2e <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e039      	b.n	8005aa2 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a2e:	4b1f      	ldr	r3, [pc, #124]	@ (8005aac <HAL_RCC_OscConfig+0x6ac>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d1f0      	bne.n	8005a1c <HAL_RCC_OscConfig+0x61c>
 8005a3a:	e031      	b.n	8005aa0 <HAL_RCC_OscConfig+0x6a0>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005a3c:	4b1b      	ldr	r3, [pc, #108]	@ (8005aac <HAL_RCC_OscConfig+0x6ac>)
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	699b      	ldr	r3, [r3, #24]
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d028      	beq.n	8005a9c <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d121      	bne.n	8005a9c <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d11a      	bne.n	8005a9c <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005a72:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d111      	bne.n	8005a9c <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a82:	085b      	lsrs	r3, r3, #1
 8005a84:	3b01      	subs	r3, #1
 8005a86:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d107      	bne.n	8005a9c <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a96:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d001      	beq.n	8005aa0 <HAL_RCC_OscConfig+0x6a0>
#endif
      {
        return HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e000      	b.n	8005aa2 <HAL_RCC_OscConfig+0x6a2>
      }
    }
  }
  return HAL_OK;
 8005aa0:	2300      	movs	r3, #0
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3718      	adds	r7, #24
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
 8005aaa:	bf00      	nop
 8005aac:	40023800 	.word	0x40023800
 8005ab0:	080133e8 	.word	0x080133e8

08005ab4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d101      	bne.n	8005acc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e18c      	b.n	8005de6 <HAL_RCC_ClockConfig+0x332>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d003      	beq.n	8005adc <HAL_RCC_ClockConfig+0x28>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	2b0f      	cmp	r3, #15
 8005ada:	d904      	bls.n	8005ae6 <HAL_RCC_ClockConfig+0x32>
 8005adc:	f240 21dd 	movw	r1, #733	@ 0x2dd
 8005ae0:	4887      	ldr	r0, [pc, #540]	@ (8005d00 <HAL_RCC_ClockConfig+0x24c>)
 8005ae2:	f7fe f927 	bl	8003d34 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d031      	beq.n	8005b50 <HAL_RCC_ClockConfig+0x9c>
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d02e      	beq.n	8005b50 <HAL_RCC_ClockConfig+0x9c>
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	2b02      	cmp	r3, #2
 8005af6:	d02b      	beq.n	8005b50 <HAL_RCC_ClockConfig+0x9c>
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	2b03      	cmp	r3, #3
 8005afc:	d028      	beq.n	8005b50 <HAL_RCC_ClockConfig+0x9c>
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	2b04      	cmp	r3, #4
 8005b02:	d025      	beq.n	8005b50 <HAL_RCC_ClockConfig+0x9c>
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	2b05      	cmp	r3, #5
 8005b08:	d022      	beq.n	8005b50 <HAL_RCC_ClockConfig+0x9c>
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	2b06      	cmp	r3, #6
 8005b0e:	d01f      	beq.n	8005b50 <HAL_RCC_ClockConfig+0x9c>
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	2b07      	cmp	r3, #7
 8005b14:	d01c      	beq.n	8005b50 <HAL_RCC_ClockConfig+0x9c>
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	2b08      	cmp	r3, #8
 8005b1a:	d019      	beq.n	8005b50 <HAL_RCC_ClockConfig+0x9c>
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	2b09      	cmp	r3, #9
 8005b20:	d016      	beq.n	8005b50 <HAL_RCC_ClockConfig+0x9c>
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	2b0a      	cmp	r3, #10
 8005b26:	d013      	beq.n	8005b50 <HAL_RCC_ClockConfig+0x9c>
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	2b0b      	cmp	r3, #11
 8005b2c:	d010      	beq.n	8005b50 <HAL_RCC_ClockConfig+0x9c>
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	2b0c      	cmp	r3, #12
 8005b32:	d00d      	beq.n	8005b50 <HAL_RCC_ClockConfig+0x9c>
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	2b0d      	cmp	r3, #13
 8005b38:	d00a      	beq.n	8005b50 <HAL_RCC_ClockConfig+0x9c>
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	2b0e      	cmp	r3, #14
 8005b3e:	d007      	beq.n	8005b50 <HAL_RCC_ClockConfig+0x9c>
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	2b0f      	cmp	r3, #15
 8005b44:	d004      	beq.n	8005b50 <HAL_RCC_ClockConfig+0x9c>
 8005b46:	f240 21de 	movw	r1, #734	@ 0x2de
 8005b4a:	486d      	ldr	r0, [pc, #436]	@ (8005d00 <HAL_RCC_ClockConfig+0x24c>)
 8005b4c:	f7fe f8f2 	bl	8003d34 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b50:	4b6c      	ldr	r3, [pc, #432]	@ (8005d04 <HAL_RCC_ClockConfig+0x250>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 030f 	and.w	r3, r3, #15
 8005b58:	683a      	ldr	r2, [r7, #0]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d910      	bls.n	8005b80 <HAL_RCC_ClockConfig+0xcc>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b5e:	4b69      	ldr	r3, [pc, #420]	@ (8005d04 <HAL_RCC_ClockConfig+0x250>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f023 020f 	bic.w	r2, r3, #15
 8005b66:	4967      	ldr	r1, [pc, #412]	@ (8005d04 <HAL_RCC_ClockConfig+0x250>)
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b6e:	4b65      	ldr	r3, [pc, #404]	@ (8005d04 <HAL_RCC_ClockConfig+0x250>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 030f 	and.w	r3, r3, #15
 8005b76:	683a      	ldr	r2, [r7, #0]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d001      	beq.n	8005b80 <HAL_RCC_ClockConfig+0xcc>
    {
      return HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e132      	b.n	8005de6 <HAL_RCC_ClockConfig+0x332>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 0302 	and.w	r3, r3, #2
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d049      	beq.n	8005c20 <HAL_RCC_ClockConfig+0x16c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 0304 	and.w	r3, r3, #4
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d005      	beq.n	8005ba4 <HAL_RCC_ClockConfig+0xf0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b98:	4b5b      	ldr	r3, [pc, #364]	@ (8005d08 <HAL_RCC_ClockConfig+0x254>)
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	4a5a      	ldr	r2, [pc, #360]	@ (8005d08 <HAL_RCC_ClockConfig+0x254>)
 8005b9e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005ba2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 0308 	and.w	r3, r3, #8
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d005      	beq.n	8005bbc <HAL_RCC_ClockConfig+0x108>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005bb0:	4b55      	ldr	r3, [pc, #340]	@ (8005d08 <HAL_RCC_ClockConfig+0x254>)
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	4a54      	ldr	r2, [pc, #336]	@ (8005d08 <HAL_RCC_ClockConfig+0x254>)
 8005bb6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005bba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d024      	beq.n	8005c0e <HAL_RCC_ClockConfig+0x15a>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	2b80      	cmp	r3, #128	@ 0x80
 8005bca:	d020      	beq.n	8005c0e <HAL_RCC_ClockConfig+0x15a>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	2b90      	cmp	r3, #144	@ 0x90
 8005bd2:	d01c      	beq.n	8005c0e <HAL_RCC_ClockConfig+0x15a>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	2ba0      	cmp	r3, #160	@ 0xa0
 8005bda:	d018      	beq.n	8005c0e <HAL_RCC_ClockConfig+0x15a>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	2bb0      	cmp	r3, #176	@ 0xb0
 8005be2:	d014      	beq.n	8005c0e <HAL_RCC_ClockConfig+0x15a>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	2bc0      	cmp	r3, #192	@ 0xc0
 8005bea:	d010      	beq.n	8005c0e <HAL_RCC_ClockConfig+0x15a>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	2bd0      	cmp	r3, #208	@ 0xd0
 8005bf2:	d00c      	beq.n	8005c0e <HAL_RCC_ClockConfig+0x15a>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	2be0      	cmp	r3, #224	@ 0xe0
 8005bfa:	d008      	beq.n	8005c0e <HAL_RCC_ClockConfig+0x15a>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	2bf0      	cmp	r3, #240	@ 0xf0
 8005c02:	d004      	beq.n	8005c0e <HAL_RCC_ClockConfig+0x15a>
 8005c04:	f240 3102 	movw	r1, #770	@ 0x302
 8005c08:	483d      	ldr	r0, [pc, #244]	@ (8005d00 <HAL_RCC_ClockConfig+0x24c>)
 8005c0a:	f7fe f893 	bl	8003d34 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c0e:	4b3e      	ldr	r3, [pc, #248]	@ (8005d08 <HAL_RCC_ClockConfig+0x254>)
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	493b      	ldr	r1, [pc, #236]	@ (8005d08 <HAL_RCC_ClockConfig+0x254>)
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 0301 	and.w	r3, r3, #1
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d051      	beq.n	8005cd0 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d00c      	beq.n	8005c4e <HAL_RCC_ClockConfig+0x19a>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d008      	beq.n	8005c4e <HAL_RCC_ClockConfig+0x19a>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	2b02      	cmp	r3, #2
 8005c42:	d004      	beq.n	8005c4e <HAL_RCC_ClockConfig+0x19a>
 8005c44:	f240 3109 	movw	r1, #777	@ 0x309
 8005c48:	482d      	ldr	r0, [pc, #180]	@ (8005d00 <HAL_RCC_ClockConfig+0x24c>)
 8005c4a:	f7fe f873 	bl	8003d34 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d107      	bne.n	8005c66 <HAL_RCC_ClockConfig+0x1b2>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c56:	4b2c      	ldr	r3, [pc, #176]	@ (8005d08 <HAL_RCC_ClockConfig+0x254>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d115      	bne.n	8005c8e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	e0bf      	b.n	8005de6 <HAL_RCC_ClockConfig+0x332>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	2b02      	cmp	r3, #2
 8005c6c:	d107      	bne.n	8005c7e <HAL_RCC_ClockConfig+0x1ca>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c6e:	4b26      	ldr	r3, [pc, #152]	@ (8005d08 <HAL_RCC_ClockConfig+0x254>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d109      	bne.n	8005c8e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e0b3      	b.n	8005de6 <HAL_RCC_ClockConfig+0x332>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c7e:	4b22      	ldr	r3, [pc, #136]	@ (8005d08 <HAL_RCC_ClockConfig+0x254>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 0302 	and.w	r3, r3, #2
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d101      	bne.n	8005c8e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e0ab      	b.n	8005de6 <HAL_RCC_ClockConfig+0x332>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c8e:	4b1e      	ldr	r3, [pc, #120]	@ (8005d08 <HAL_RCC_ClockConfig+0x254>)
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	f023 0203 	bic.w	r2, r3, #3
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	491b      	ldr	r1, [pc, #108]	@ (8005d08 <HAL_RCC_ClockConfig+0x254>)
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ca0:	f7fe fd16 	bl	80046d0 <HAL_GetTick>
 8005ca4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ca6:	e00a      	b.n	8005cbe <HAL_RCC_ClockConfig+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ca8:	f7fe fd12 	bl	80046d0 <HAL_GetTick>
 8005cac:	4602      	mov	r2, r0
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d901      	bls.n	8005cbe <HAL_RCC_ClockConfig+0x20a>
      {
        return HAL_TIMEOUT;
 8005cba:	2303      	movs	r3, #3
 8005cbc:	e093      	b.n	8005de6 <HAL_RCC_ClockConfig+0x332>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cbe:	4b12      	ldr	r3, [pc, #72]	@ (8005d08 <HAL_RCC_ClockConfig+0x254>)
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	f003 020c 	and.w	r2, r3, #12
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d1eb      	bne.n	8005ca8 <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005cd0:	4b0c      	ldr	r3, [pc, #48]	@ (8005d04 <HAL_RCC_ClockConfig+0x250>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 030f 	and.w	r3, r3, #15
 8005cd8:	683a      	ldr	r2, [r7, #0]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d216      	bcs.n	8005d0c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cde:	4b09      	ldr	r3, [pc, #36]	@ (8005d04 <HAL_RCC_ClockConfig+0x250>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f023 020f 	bic.w	r2, r3, #15
 8005ce6:	4907      	ldr	r1, [pc, #28]	@ (8005d04 <HAL_RCC_ClockConfig+0x250>)
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cee:	4b05      	ldr	r3, [pc, #20]	@ (8005d04 <HAL_RCC_ClockConfig+0x250>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 030f 	and.w	r3, r3, #15
 8005cf6:	683a      	ldr	r2, [r7, #0]
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d007      	beq.n	8005d0c <HAL_RCC_ClockConfig+0x258>
    {
      return HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e072      	b.n	8005de6 <HAL_RCC_ClockConfig+0x332>
 8005d00:	080133e8 	.word	0x080133e8
 8005d04:	40023c00 	.word	0x40023c00
 8005d08:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 0304 	and.w	r3, r3, #4
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d025      	beq.n	8005d64 <HAL_RCC_ClockConfig+0x2b0>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d018      	beq.n	8005d52 <HAL_RCC_ClockConfig+0x29e>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d28:	d013      	beq.n	8005d52 <HAL_RCC_ClockConfig+0x29e>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005d32:	d00e      	beq.n	8005d52 <HAL_RCC_ClockConfig+0x29e>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8005d3c:	d009      	beq.n	8005d52 <HAL_RCC_ClockConfig+0x29e>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	68db      	ldr	r3, [r3, #12]
 8005d42:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 8005d46:	d004      	beq.n	8005d52 <HAL_RCC_ClockConfig+0x29e>
 8005d48:	f240 3146 	movw	r1, #838	@ 0x346
 8005d4c:	4828      	ldr	r0, [pc, #160]	@ (8005df0 <HAL_RCC_ClockConfig+0x33c>)
 8005d4e:	f7fd fff1 	bl	8003d34 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d52:	4b28      	ldr	r3, [pc, #160]	@ (8005df4 <HAL_RCC_ClockConfig+0x340>)
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	4925      	ldr	r1, [pc, #148]	@ (8005df4 <HAL_RCC_ClockConfig+0x340>)
 8005d60:	4313      	orrs	r3, r2
 8005d62:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 0308 	and.w	r3, r3, #8
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d026      	beq.n	8005dbe <HAL_RCC_ClockConfig+0x30a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d018      	beq.n	8005daa <HAL_RCC_ClockConfig+0x2f6>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d80:	d013      	beq.n	8005daa <HAL_RCC_ClockConfig+0x2f6>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005d8a:	d00e      	beq.n	8005daa <HAL_RCC_ClockConfig+0x2f6>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	691b      	ldr	r3, [r3, #16]
 8005d90:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8005d94:	d009      	beq.n	8005daa <HAL_RCC_ClockConfig+0x2f6>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 8005d9e:	d004      	beq.n	8005daa <HAL_RCC_ClockConfig+0x2f6>
 8005da0:	f240 314d 	movw	r1, #845	@ 0x34d
 8005da4:	4812      	ldr	r0, [pc, #72]	@ (8005df0 <HAL_RCC_ClockConfig+0x33c>)
 8005da6:	f7fd ffc5 	bl	8003d34 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005daa:	4b12      	ldr	r3, [pc, #72]	@ (8005df4 <HAL_RCC_ClockConfig+0x340>)
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	00db      	lsls	r3, r3, #3
 8005db8:	490e      	ldr	r1, [pc, #56]	@ (8005df4 <HAL_RCC_ClockConfig+0x340>)
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005dbe:	f000 f821 	bl	8005e04 <HAL_RCC_GetSysClockFreq>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	4b0b      	ldr	r3, [pc, #44]	@ (8005df4 <HAL_RCC_ClockConfig+0x340>)
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	091b      	lsrs	r3, r3, #4
 8005dca:	f003 030f 	and.w	r3, r3, #15
 8005dce:	490a      	ldr	r1, [pc, #40]	@ (8005df8 <HAL_RCC_ClockConfig+0x344>)
 8005dd0:	5ccb      	ldrb	r3, [r1, r3]
 8005dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8005dd6:	4a09      	ldr	r2, [pc, #36]	@ (8005dfc <HAL_RCC_ClockConfig+0x348>)
 8005dd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005dda:	4b09      	ldr	r3, [pc, #36]	@ (8005e00 <HAL_RCC_ClockConfig+0x34c>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4618      	mov	r0, r3
 8005de0:	f7fe fc32 	bl	8004648 <HAL_InitTick>

  return HAL_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3710      	adds	r7, #16
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop
 8005df0:	080133e8 	.word	0x080133e8
 8005df4:	40023800 	.word	0x40023800
 8005df8:	08013b24 	.word	0x08013b24
 8005dfc:	20000038 	.word	0x20000038
 8005e00:	2000003c 	.word	0x2000003c

08005e04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e08:	b090      	sub	sp, #64	@ 0x40
 8005e0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e10:	2300      	movs	r3, #0
 8005e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e14:	2300      	movs	r3, #0
 8005e16:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e1c:	4b59      	ldr	r3, [pc, #356]	@ (8005f84 <HAL_RCC_GetSysClockFreq+0x180>)
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	f003 030c 	and.w	r3, r3, #12
 8005e24:	2b08      	cmp	r3, #8
 8005e26:	d00d      	beq.n	8005e44 <HAL_RCC_GetSysClockFreq+0x40>
 8005e28:	2b08      	cmp	r3, #8
 8005e2a:	f200 80a1 	bhi.w	8005f70 <HAL_RCC_GetSysClockFreq+0x16c>
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d002      	beq.n	8005e38 <HAL_RCC_GetSysClockFreq+0x34>
 8005e32:	2b04      	cmp	r3, #4
 8005e34:	d003      	beq.n	8005e3e <HAL_RCC_GetSysClockFreq+0x3a>
 8005e36:	e09b      	b.n	8005f70 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005e38:	4b53      	ldr	r3, [pc, #332]	@ (8005f88 <HAL_RCC_GetSysClockFreq+0x184>)
 8005e3a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005e3c:	e09b      	b.n	8005f76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005e3e:	4b53      	ldr	r3, [pc, #332]	@ (8005f8c <HAL_RCC_GetSysClockFreq+0x188>)
 8005e40:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005e42:	e098      	b.n	8005f76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e44:	4b4f      	ldr	r3, [pc, #316]	@ (8005f84 <HAL_RCC_GetSysClockFreq+0x180>)
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005e4c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005e4e:	4b4d      	ldr	r3, [pc, #308]	@ (8005f84 <HAL_RCC_GetSysClockFreq+0x180>)
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d028      	beq.n	8005eac <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e5a:	4b4a      	ldr	r3, [pc, #296]	@ (8005f84 <HAL_RCC_GetSysClockFreq+0x180>)
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	099b      	lsrs	r3, r3, #6
 8005e60:	2200      	movs	r2, #0
 8005e62:	623b      	str	r3, [r7, #32]
 8005e64:	627a      	str	r2, [r7, #36]	@ 0x24
 8005e66:	6a3b      	ldr	r3, [r7, #32]
 8005e68:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005e6c:	2100      	movs	r1, #0
 8005e6e:	4b47      	ldr	r3, [pc, #284]	@ (8005f8c <HAL_RCC_GetSysClockFreq+0x188>)
 8005e70:	fb03 f201 	mul.w	r2, r3, r1
 8005e74:	2300      	movs	r3, #0
 8005e76:	fb00 f303 	mul.w	r3, r0, r3
 8005e7a:	4413      	add	r3, r2
 8005e7c:	4a43      	ldr	r2, [pc, #268]	@ (8005f8c <HAL_RCC_GetSysClockFreq+0x188>)
 8005e7e:	fba0 1202 	umull	r1, r2, r0, r2
 8005e82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e84:	460a      	mov	r2, r1
 8005e86:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005e88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e8a:	4413      	add	r3, r2
 8005e8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e90:	2200      	movs	r2, #0
 8005e92:	61bb      	str	r3, [r7, #24]
 8005e94:	61fa      	str	r2, [r7, #28]
 8005e96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e9a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005e9e:	f7fa ff23 	bl	8000ce8 <__aeabi_uldivmod>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	4613      	mov	r3, r2
 8005ea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005eaa:	e053      	b.n	8005f54 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005eac:	4b35      	ldr	r3, [pc, #212]	@ (8005f84 <HAL_RCC_GetSysClockFreq+0x180>)
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	099b      	lsrs	r3, r3, #6
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	613b      	str	r3, [r7, #16]
 8005eb6:	617a      	str	r2, [r7, #20]
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005ebe:	f04f 0b00 	mov.w	fp, #0
 8005ec2:	4652      	mov	r2, sl
 8005ec4:	465b      	mov	r3, fp
 8005ec6:	f04f 0000 	mov.w	r0, #0
 8005eca:	f04f 0100 	mov.w	r1, #0
 8005ece:	0159      	lsls	r1, r3, #5
 8005ed0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ed4:	0150      	lsls	r0, r2, #5
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	460b      	mov	r3, r1
 8005eda:	ebb2 080a 	subs.w	r8, r2, sl
 8005ede:	eb63 090b 	sbc.w	r9, r3, fp
 8005ee2:	f04f 0200 	mov.w	r2, #0
 8005ee6:	f04f 0300 	mov.w	r3, #0
 8005eea:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005eee:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005ef2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005ef6:	ebb2 0408 	subs.w	r4, r2, r8
 8005efa:	eb63 0509 	sbc.w	r5, r3, r9
 8005efe:	f04f 0200 	mov.w	r2, #0
 8005f02:	f04f 0300 	mov.w	r3, #0
 8005f06:	00eb      	lsls	r3, r5, #3
 8005f08:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f0c:	00e2      	lsls	r2, r4, #3
 8005f0e:	4614      	mov	r4, r2
 8005f10:	461d      	mov	r5, r3
 8005f12:	eb14 030a 	adds.w	r3, r4, sl
 8005f16:	603b      	str	r3, [r7, #0]
 8005f18:	eb45 030b 	adc.w	r3, r5, fp
 8005f1c:	607b      	str	r3, [r7, #4]
 8005f1e:	f04f 0200 	mov.w	r2, #0
 8005f22:	f04f 0300 	mov.w	r3, #0
 8005f26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005f2a:	4629      	mov	r1, r5
 8005f2c:	028b      	lsls	r3, r1, #10
 8005f2e:	4621      	mov	r1, r4
 8005f30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005f34:	4621      	mov	r1, r4
 8005f36:	028a      	lsls	r2, r1, #10
 8005f38:	4610      	mov	r0, r2
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f3e:	2200      	movs	r2, #0
 8005f40:	60bb      	str	r3, [r7, #8]
 8005f42:	60fa      	str	r2, [r7, #12]
 8005f44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f48:	f7fa fece 	bl	8000ce8 <__aeabi_uldivmod>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	460b      	mov	r3, r1
 8005f50:	4613      	mov	r3, r2
 8005f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005f54:	4b0b      	ldr	r3, [pc, #44]	@ (8005f84 <HAL_RCC_GetSysClockFreq+0x180>)
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	0c1b      	lsrs	r3, r3, #16
 8005f5a:	f003 0303 	and.w	r3, r3, #3
 8005f5e:	3301      	adds	r3, #1
 8005f60:	005b      	lsls	r3, r3, #1
 8005f62:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005f64:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f6c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005f6e:	e002      	b.n	8005f76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005f70:	4b05      	ldr	r3, [pc, #20]	@ (8005f88 <HAL_RCC_GetSysClockFreq+0x184>)
 8005f72:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005f74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3740      	adds	r7, #64	@ 0x40
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f82:	bf00      	nop
 8005f84:	40023800 	.word	0x40023800
 8005f88:	00f42400 	.word	0x00f42400
 8005f8c:	017d7840 	.word	0x017d7840

08005f90 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f90:	b480      	push	{r7}
 8005f92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f94:	4b03      	ldr	r3, [pc, #12]	@ (8005fa4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f96:	681b      	ldr	r3, [r3, #0]
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr
 8005fa2:	bf00      	nop
 8005fa4:	20000038 	.word	0x20000038

08005fa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005fac:	f7ff fff0 	bl	8005f90 <HAL_RCC_GetHCLKFreq>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	4b05      	ldr	r3, [pc, #20]	@ (8005fc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	0a9b      	lsrs	r3, r3, #10
 8005fb8:	f003 0307 	and.w	r3, r3, #7
 8005fbc:	4903      	ldr	r1, [pc, #12]	@ (8005fcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fbe:	5ccb      	ldrb	r3, [r1, r3]
 8005fc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	bd80      	pop	{r7, pc}
 8005fc8:	40023800 	.word	0x40023800
 8005fcc:	08013b34 	.word	0x08013b34

08005fd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005fd4:	f7ff ffdc 	bl	8005f90 <HAL_RCC_GetHCLKFreq>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	4b05      	ldr	r3, [pc, #20]	@ (8005ff0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	0b5b      	lsrs	r3, r3, #13
 8005fe0:	f003 0307 	and.w	r3, r3, #7
 8005fe4:	4903      	ldr	r1, [pc, #12]	@ (8005ff4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005fe6:	5ccb      	ldrb	r3, [r1, r3]
 8005fe8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	40023800 	.word	0x40023800
 8005ff4:	08013b34 	.word	0x08013b34

08005ff8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b088      	sub	sp, #32
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006000:	2300      	movs	r3, #0
 8006002:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006004:	2300      	movs	r3, #0
 8006006:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006008:	2300      	movs	r3, #0
 800600a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800600c:	2300      	movs	r3, #0
 800600e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006010:	2300      	movs	r3, #0
 8006012:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f003 0301 	and.w	r3, r3, #1
 800601c:	2b00      	cmp	r3, #0
 800601e:	f040 8089 	bne.w	8006134 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 0308 	and.w	r3, r3, #8
 800602a:	2b00      	cmp	r3, #0
 800602c:	f040 8082 	bne.w	8006134 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f003 0310 	and.w	r3, r3, #16
 8006038:	2b00      	cmp	r3, #0
 800603a:	d17b      	bne.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006044:	2b00      	cmp	r3, #0
 8006046:	d175      	bne.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006050:	2b00      	cmp	r3, #0
 8006052:	d16f      	bne.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800605c:	2b00      	cmp	r3, #0
 800605e:	d169      	bne.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006068:	2b00      	cmp	r3, #0
 800606a:	d163      	bne.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006074:	2b00      	cmp	r3, #0
 8006076:	d15d      	bne.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006080:	2b00      	cmp	r3, #0
 8006082:	d157      	bne.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800608c:	2b00      	cmp	r3, #0
 800608e:	d151      	bne.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006098:	2b00      	cmp	r3, #0
 800609a:	d14b      	bne.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d145      	bne.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d13f      	bne.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d139      	bne.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d133      	bne.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d12d      	bne.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d127      	bne.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d121      	bne.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d11b      	bne.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006104:	2b00      	cmp	r3, #0
 8006106:	d115      	bne.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006110:	2b00      	cmp	r3, #0
 8006112:	d10f      	bne.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800611c:	2b00      	cmp	r3, #0
 800611e:	d109      	bne.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f003 0320 	and.w	r3, r3, #32
 8006128:	2b00      	cmp	r3, #0
 800612a:	d103      	bne.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800612c:	2172      	movs	r1, #114	@ 0x72
 800612e:	4895      	ldr	r0, [pc, #596]	@ (8006384 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8006130:	f7fd fe00 	bl	8003d34 <assert_failed>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f003 0301 	and.w	r3, r3, #1
 800613c:	2b00      	cmp	r3, #0
 800613e:	d01f      	beq.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006144:	2b00      	cmp	r3, #0
 8006146:	d008      	beq.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x162>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800614c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006150:	d003      	beq.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x162>
 8006152:	2178      	movs	r1, #120	@ 0x78
 8006154:	488b      	ldr	r0, [pc, #556]	@ (8006384 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8006156:	f7fd fded 	bl	8003d34 <assert_failed>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800615a:	4b8b      	ldr	r3, [pc, #556]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	4a8a      	ldr	r2, [pc, #552]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8006160:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006164:	6093      	str	r3, [r2, #8]
 8006166:	4b88      	ldr	r3, [pc, #544]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8006168:	689a      	ldr	r2, [r3, #8]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800616e:	4986      	ldr	r1, [pc, #536]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8006170:	4313      	orrs	r3, r2
 8006172:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006178:	2b00      	cmp	r3, #0
 800617a:	d101      	bne.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x188>
    {
      plli2sused = 1;
 800617c:	2301      	movs	r3, #1
 800617e:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006188:	2b00      	cmp	r3, #0
 800618a:	d029      	beq.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006190:	2b00      	cmp	r3, #0
 8006192:	d00d      	beq.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006198:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800619c:	d008      	beq.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80061a6:	d003      	beq.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80061a8:	2188      	movs	r1, #136	@ 0x88
 80061aa:	4876      	ldr	r0, [pc, #472]	@ (8006384 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80061ac:	f7fd fdc2 	bl	8003d34 <assert_failed>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80061b0:	4b75      	ldr	r3, [pc, #468]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80061b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80061b6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061be:	4972      	ldr	r1, [pc, #456]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80061c0:	4313      	orrs	r3, r2
 80061c2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80061ce:	d101      	bne.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      plli2sused = 1;
 80061d0:	2301      	movs	r3, #1
 80061d2:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d101      	bne.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    {
      pllsaiused = 1;
 80061dc:	2301      	movs	r3, #1
 80061de:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d029      	beq.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d00d      	beq.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80061fc:	d008      	beq.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006202:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006206:	d003      	beq.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8006208:	219c      	movs	r1, #156	@ 0x9c
 800620a:	485e      	ldr	r0, [pc, #376]	@ (8006384 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 800620c:	f7fd fd92 	bl	8003d34 <assert_failed>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006210:	4b5d      	ldr	r3, [pc, #372]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8006212:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006216:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800621e:	495a      	ldr	r1, [pc, #360]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8006220:	4313      	orrs	r3, r2
 8006222:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800622a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800622e:	d101      	bne.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      plli2sused = 1;
 8006230:	2301      	movs	r3, #1
 8006232:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006238:	2b00      	cmp	r3, #0
 800623a:	d101      	bne.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      pllsaiused = 1;
 800623c:	2301      	movs	r3, #1
 800623e:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006248:	2b00      	cmp	r3, #0
 800624a:	d001      	beq.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
      plli2sused = 1;
 800624c:	2301      	movs	r3, #1
 800624e:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f003 0320 	and.w	r3, r3, #32
 8006258:	2b00      	cmp	r3, #0
 800625a:	f000 8186 	beq.w	800656a <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006262:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006266:	f000 80e4 	beq.w	8006432 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800626e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006272:	f000 80de 	beq.w	8006432 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800627a:	4a44      	ldr	r2, [pc, #272]	@ (800638c <HAL_RCCEx_PeriphCLKConfig+0x394>)
 800627c:	4293      	cmp	r3, r2
 800627e:	f000 80d8 	beq.w	8006432 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006286:	4a42      	ldr	r2, [pc, #264]	@ (8006390 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8006288:	4293      	cmp	r3, r2
 800628a:	f000 80d2 	beq.w	8006432 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006292:	4a40      	ldr	r2, [pc, #256]	@ (8006394 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8006294:	4293      	cmp	r3, r2
 8006296:	f000 80cc 	beq.w	8006432 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800629e:	4a3e      	ldr	r2, [pc, #248]	@ (8006398 <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	f000 80c6 	beq.w	8006432 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062aa:	4a3c      	ldr	r2, [pc, #240]	@ (800639c <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	f000 80c0 	beq.w	8006432 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062b6:	4a3a      	ldr	r2, [pc, #232]	@ (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	f000 80ba 	beq.w	8006432 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062c2:	4a38      	ldr	r2, [pc, #224]	@ (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	f000 80b4 	beq.w	8006432 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062ce:	4a36      	ldr	r2, [pc, #216]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	f000 80ae 	beq.w	8006432 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062da:	4a34      	ldr	r2, [pc, #208]	@ (80063ac <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	f000 80a8 	beq.w	8006432 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062e6:	4a32      	ldr	r2, [pc, #200]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	f000 80a2 	beq.w	8006432 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062f2:	4a30      	ldr	r2, [pc, #192]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	f000 809c 	beq.w	8006432 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062fe:	4a2e      	ldr	r2, [pc, #184]	@ (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>)
 8006300:	4293      	cmp	r3, r2
 8006302:	f000 8096 	beq.w	8006432 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800630a:	4a2c      	ldr	r2, [pc, #176]	@ (80063bc <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 800630c:	4293      	cmp	r3, r2
 800630e:	f000 8090 	beq.w	8006432 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006316:	4a2a      	ldr	r2, [pc, #168]	@ (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 8006318:	4293      	cmp	r3, r2
 800631a:	f000 808a 	beq.w	8006432 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006322:	4a28      	ldr	r2, [pc, #160]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8006324:	4293      	cmp	r3, r2
 8006326:	f000 8084 	beq.w	8006432 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800632e:	4a26      	ldr	r2, [pc, #152]	@ (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d07e      	beq.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006338:	4a24      	ldr	r2, [pc, #144]	@ (80063cc <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d079      	beq.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006342:	4a23      	ldr	r2, [pc, #140]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d074      	beq.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800634c:	4a21      	ldr	r2, [pc, #132]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d06f      	beq.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006356:	4a20      	ldr	r2, [pc, #128]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d06a      	beq.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006360:	4a1e      	ldr	r2, [pc, #120]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d065      	beq.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800636a:	4a1d      	ldr	r2, [pc, #116]	@ (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d060      	beq.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006374:	4a1b      	ldr	r2, [pc, #108]	@ (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d05b      	beq.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800637e:	4a1a      	ldr	r2, [pc, #104]	@ (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8006380:	4293      	cmp	r3, r2
 8006382:	e033      	b.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8006384:	08013420 	.word	0x08013420
 8006388:	40023800 	.word	0x40023800
 800638c:	00020300 	.word	0x00020300
 8006390:	00030300 	.word	0x00030300
 8006394:	00040300 	.word	0x00040300
 8006398:	00050300 	.word	0x00050300
 800639c:	00060300 	.word	0x00060300
 80063a0:	00070300 	.word	0x00070300
 80063a4:	00080300 	.word	0x00080300
 80063a8:	00090300 	.word	0x00090300
 80063ac:	000a0300 	.word	0x000a0300
 80063b0:	000b0300 	.word	0x000b0300
 80063b4:	000c0300 	.word	0x000c0300
 80063b8:	000d0300 	.word	0x000d0300
 80063bc:	000e0300 	.word	0x000e0300
 80063c0:	000f0300 	.word	0x000f0300
 80063c4:	00100300 	.word	0x00100300
 80063c8:	00110300 	.word	0x00110300
 80063cc:	00120300 	.word	0x00120300
 80063d0:	00130300 	.word	0x00130300
 80063d4:	00140300 	.word	0x00140300
 80063d8:	00150300 	.word	0x00150300
 80063dc:	00160300 	.word	0x00160300
 80063e0:	00170300 	.word	0x00170300
 80063e4:	00180300 	.word	0x00180300
 80063e8:	00190300 	.word	0x00190300
 80063ec:	d021      	beq.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063f2:	4a4c      	ldr	r2, [pc, #304]	@ (8006524 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d01c      	beq.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063fc:	4a4a      	ldr	r2, [pc, #296]	@ (8006528 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d017      	beq.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006406:	4a49      	ldr	r2, [pc, #292]	@ (800652c <HAL_RCCEx_PeriphCLKConfig+0x534>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d012      	beq.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006410:	4a47      	ldr	r2, [pc, #284]	@ (8006530 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d00d      	beq.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800641a:	4a46      	ldr	r2, [pc, #280]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d008      	beq.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006424:	4a44      	ldr	r2, [pc, #272]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d003      	beq.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800642a:	21b7      	movs	r1, #183	@ 0xb7
 800642c:	4843      	ldr	r0, [pc, #268]	@ (800653c <HAL_RCCEx_PeriphCLKConfig+0x544>)
 800642e:	f7fd fc81 	bl	8003d34 <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006432:	4b43      	ldr	r3, [pc, #268]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006436:	4a42      	ldr	r2, [pc, #264]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006438:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800643c:	6413      	str	r3, [r2, #64]	@ 0x40
 800643e:	4b40      	ldr	r3, [pc, #256]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006442:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006446:	60bb      	str	r3, [r7, #8]
 8006448:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800644a:	4b3e      	ldr	r3, [pc, #248]	@ (8006544 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a3d      	ldr	r2, [pc, #244]	@ (8006544 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8006450:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006454:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006456:	f7fe f93b 	bl	80046d0 <HAL_GetTick>
 800645a:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800645c:	e009      	b.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x47a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800645e:	f7fe f937 	bl	80046d0 <HAL_GetTick>
 8006462:	4602      	mov	r2, r0
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	1ad3      	subs	r3, r2, r3
 8006468:	2b64      	cmp	r3, #100	@ 0x64
 800646a:	d902      	bls.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x47a>
      {
        return HAL_TIMEOUT;
 800646c:	2303      	movs	r3, #3
 800646e:	f000 bd9f 	b.w	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006472:	4b34      	ldr	r3, [pc, #208]	@ (8006544 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800647a:	2b00      	cmp	r3, #0
 800647c:	d0ef      	beq.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x466>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800647e:	4b30      	ldr	r3, [pc, #192]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006480:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006482:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006486:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d036      	beq.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x504>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006492:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006496:	693a      	ldr	r2, [r7, #16]
 8006498:	429a      	cmp	r2, r3
 800649a:	d02f      	beq.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800649c:	4b28      	ldr	r3, [pc, #160]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800649e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064a4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80064a6:	4b26      	ldr	r3, [pc, #152]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80064a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064aa:	4a25      	ldr	r2, [pc, #148]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80064ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064b0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80064b2:	4b23      	ldr	r3, [pc, #140]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80064b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064b6:	4a22      	ldr	r2, [pc, #136]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80064b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064bc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80064be:	4a20      	ldr	r2, [pc, #128]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80064c4:	4b1e      	ldr	r3, [pc, #120]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80064c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064c8:	f003 0301 	and.w	r3, r3, #1
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d115      	bne.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x504>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064d0:	f7fe f8fe 	bl	80046d0 <HAL_GetTick>
 80064d4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064d6:	e00b      	b.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064d8:	f7fe f8fa 	bl	80046d0 <HAL_GetTick>
 80064dc:	4602      	mov	r2, r0
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	1ad3      	subs	r3, r2, r3
 80064e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d902      	bls.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 80064ea:	2303      	movs	r3, #3
 80064ec:	f000 bd60 	b.w	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064f0:	4b13      	ldr	r3, [pc, #76]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80064f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064f4:	f003 0302 	and.w	r3, r3, #2
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d0ed      	beq.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006500:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006504:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006508:	d120      	bne.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x554>
 800650a:	4b0d      	ldr	r3, [pc, #52]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006516:	4b0c      	ldr	r3, [pc, #48]	@ (8006548 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8006518:	400b      	ands	r3, r1
 800651a:	4909      	ldr	r1, [pc, #36]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800651c:	4313      	orrs	r3, r2
 800651e:	608b      	str	r3, [r1, #8]
 8006520:	e01a      	b.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x560>
 8006522:	bf00      	nop
 8006524:	001a0300 	.word	0x001a0300
 8006528:	001b0300 	.word	0x001b0300
 800652c:	001c0300 	.word	0x001c0300
 8006530:	001d0300 	.word	0x001d0300
 8006534:	001e0300 	.word	0x001e0300
 8006538:	001f0300 	.word	0x001f0300
 800653c:	08013420 	.word	0x08013420
 8006540:	40023800 	.word	0x40023800
 8006544:	40007000 	.word	0x40007000
 8006548:	0ffffcff 	.word	0x0ffffcff
 800654c:	4b9a      	ldr	r3, [pc, #616]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	4a99      	ldr	r2, [pc, #612]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006552:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006556:	6093      	str	r3, [r2, #8]
 8006558:	4b97      	ldr	r3, [pc, #604]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800655a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006560:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006564:	4994      	ldr	r1, [pc, #592]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006566:	4313      	orrs	r3, r2
 8006568:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f003 0310 	and.w	r3, r3, #16
 8006572:	2b00      	cmp	r3, #0
 8006574:	d01d      	beq.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800657a:	2b00      	cmp	r3, #0
 800657c:	d008      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006582:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006586:	d003      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8006588:	21f1      	movs	r1, #241	@ 0xf1
 800658a:	488c      	ldr	r0, [pc, #560]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 800658c:	f7fd fbd2 	bl	8003d34 <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006590:	4b89      	ldr	r3, [pc, #548]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006592:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006596:	4a88      	ldr	r2, [pc, #544]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006598:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800659c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80065a0:	4b85      	ldr	r3, [pc, #532]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80065a2:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065aa:	4983      	ldr	r1, [pc, #524]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80065ac:	4313      	orrs	r3, r2
 80065ae:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d01c      	beq.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x600>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d00d      	beq.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065ce:	d008      	beq.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80065d8:	d003      	beq.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 80065da:	21fb      	movs	r1, #251	@ 0xfb
 80065dc:	4877      	ldr	r0, [pc, #476]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 80065de:	f7fd fba9 	bl	8003d34 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80065e2:	4b75      	ldr	r3, [pc, #468]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80065e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065e8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065f0:	4971      	ldr	r1, [pc, #452]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80065f2:	4313      	orrs	r3, r2
 80065f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006600:	2b00      	cmp	r3, #0
 8006602:	d01d      	beq.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x648>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006608:	2b00      	cmp	r3, #0
 800660a:	d00e      	beq.n	800662a <HAL_RCCEx_PeriphCLKConfig+0x632>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006610:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006614:	d009      	beq.n	800662a <HAL_RCCEx_PeriphCLKConfig+0x632>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800661a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800661e:	d004      	beq.n	800662a <HAL_RCCEx_PeriphCLKConfig+0x632>
 8006620:	f240 1105 	movw	r1, #261	@ 0x105
 8006624:	4865      	ldr	r0, [pc, #404]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8006626:	f7fd fb85 	bl	8003d34 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800662a:	4b63      	ldr	r3, [pc, #396]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800662c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006630:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006638:	495f      	ldr	r1, [pc, #380]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800663a:	4313      	orrs	r3, r2
 800663c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006648:	2b00      	cmp	r3, #0
 800664a:	d01d      	beq.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x690>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006650:	2b00      	cmp	r3, #0
 8006652:	d00e      	beq.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006658:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800665c:	d009      	beq.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x67a>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006662:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006666:	d004      	beq.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8006668:	f240 110f 	movw	r1, #271	@ 0x10f
 800666c:	4853      	ldr	r0, [pc, #332]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 800666e:	f7fd fb61 	bl	8003d34 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006672:	4b51      	ldr	r3, [pc, #324]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006674:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006678:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006680:	494d      	ldr	r1, [pc, #308]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006682:	4313      	orrs	r3, r2
 8006684:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006690:	2b00      	cmp	r3, #0
 8006692:	d01d      	beq.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006698:	2b00      	cmp	r3, #0
 800669a:	d00e      	beq.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80066a4:	d009      	beq.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066aa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80066ae:	d004      	beq.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 80066b0:	f240 1119 	movw	r1, #281	@ 0x119
 80066b4:	4841      	ldr	r0, [pc, #260]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 80066b6:	f7fd fb3d 	bl	8003d34 <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80066ba:	4b3f      	ldr	r3, [pc, #252]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80066bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066c0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066c8:	493b      	ldr	r1, [pc, #236]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80066ca:	4313      	orrs	r3, r2
 80066cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d01f      	beq.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x724>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d010      	beq.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d00c      	beq.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066f0:	2b03      	cmp	r3, #3
 80066f2:	d008      	beq.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066f8:	2b02      	cmp	r3, #2
 80066fa:	d004      	beq.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 80066fc:	f240 1123 	movw	r1, #291	@ 0x123
 8006700:	482e      	ldr	r0, [pc, #184]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8006702:	f7fd fb17 	bl	8003d34 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006706:	4b2c      	ldr	r3, [pc, #176]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006708:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800670c:	f023 0203 	bic.w	r2, r3, #3
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006714:	4928      	ldr	r1, [pc, #160]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006716:	4313      	orrs	r3, r2
 8006718:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006724:	2b00      	cmp	r3, #0
 8006726:	d01f      	beq.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x770>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800672c:	2b00      	cmp	r3, #0
 800672e:	d010      	beq.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006734:	2b04      	cmp	r3, #4
 8006736:	d00c      	beq.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800673c:	2b0c      	cmp	r3, #12
 800673e:	d008      	beq.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006744:	2b08      	cmp	r3, #8
 8006746:	d004      	beq.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8006748:	f240 112d 	movw	r1, #301	@ 0x12d
 800674c:	481b      	ldr	r0, [pc, #108]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 800674e:	f7fd faf1 	bl	8003d34 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006752:	4b19      	ldr	r3, [pc, #100]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006754:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006758:	f023 020c 	bic.w	r2, r3, #12
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006760:	4915      	ldr	r1, [pc, #84]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006762:	4313      	orrs	r3, r2
 8006764:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006770:	2b00      	cmp	r3, #0
 8006772:	d025      	beq.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006778:	2b00      	cmp	r3, #0
 800677a:	d010      	beq.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006780:	2b10      	cmp	r3, #16
 8006782:	d00c      	beq.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006788:	2b30      	cmp	r3, #48	@ 0x30
 800678a:	d008      	beq.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006790:	2b20      	cmp	r3, #32
 8006792:	d004      	beq.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8006794:	f240 1137 	movw	r1, #311	@ 0x137
 8006798:	4808      	ldr	r0, [pc, #32]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 800679a:	f7fd facb 	bl	8003d34 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800679e:	4b06      	ldr	r3, [pc, #24]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80067a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067a4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067ac:	4902      	ldr	r1, [pc, #8]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80067ae:	4313      	orrs	r3, r2
 80067b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80067b4:	e004      	b.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
 80067b6:	bf00      	nop
 80067b8:	40023800 	.word	0x40023800
 80067bc:	08013420 	.word	0x08013420
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d01f      	beq.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x814>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d010      	beq.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067d8:	2b40      	cmp	r3, #64	@ 0x40
 80067da:	d00c      	beq.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067e0:	2bc0      	cmp	r3, #192	@ 0xc0
 80067e2:	d008      	beq.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067e8:	2b80      	cmp	r3, #128	@ 0x80
 80067ea:	d004      	beq.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 80067ec:	f240 1141 	movw	r1, #321	@ 0x141
 80067f0:	48a0      	ldr	r0, [pc, #640]	@ (8006a74 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 80067f2:	f7fd fa9f 	bl	8003d34 <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80067f6:	4ba0      	ldr	r3, [pc, #640]	@ (8006a78 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80067f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067fc:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006804:	499c      	ldr	r1, [pc, #624]	@ (8006a78 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006806:	4313      	orrs	r3, r2
 8006808:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006814:	2b00      	cmp	r3, #0
 8006816:	d022      	beq.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x866>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800681c:	2b00      	cmp	r3, #0
 800681e:	d013      	beq.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006824:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006828:	d00e      	beq.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x850>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800682e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006832:	d009      	beq.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006838:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800683c:	d004      	beq.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x850>
 800683e:	f240 114b 	movw	r1, #331	@ 0x14b
 8006842:	488c      	ldr	r0, [pc, #560]	@ (8006a74 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8006844:	f7fd fa76 	bl	8003d34 <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006848:	4b8b      	ldr	r3, [pc, #556]	@ (8006a78 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800684a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800684e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006856:	4988      	ldr	r1, [pc, #544]	@ (8006a78 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006858:	4313      	orrs	r3, r2
 800685a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006866:	2b00      	cmp	r3, #0
 8006868:	d022      	beq.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800686e:	2b00      	cmp	r3, #0
 8006870:	d013      	beq.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006876:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800687a:	d00e      	beq.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006880:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006884:	d009      	beq.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800688a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800688e:	d004      	beq.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8006890:	f240 1155 	movw	r1, #341	@ 0x155
 8006894:	4877      	ldr	r0, [pc, #476]	@ (8006a74 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8006896:	f7fd fa4d 	bl	8003d34 <assert_failed>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800689a:	4b77      	ldr	r3, [pc, #476]	@ (8006a78 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800689c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068a0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068a8:	4973      	ldr	r1, [pc, #460]	@ (8006a78 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80068aa:	4313      	orrs	r3, r2
 80068ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d022      	beq.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x90a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d013      	beq.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068cc:	d00e      	beq.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068d2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80068d6:	d009      	beq.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068e0:	d004      	beq.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 80068e2:	f240 115f 	movw	r1, #351	@ 0x15f
 80068e6:	4863      	ldr	r0, [pc, #396]	@ (8006a74 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 80068e8:	f7fd fa24 	bl	8003d34 <assert_failed>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80068ec:	4b62      	ldr	r3, [pc, #392]	@ (8006a78 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80068ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068f2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068fa:	495f      	ldr	r1, [pc, #380]	@ (8006a78 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80068fc:	4313      	orrs	r3, r2
 80068fe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800690a:	2b00      	cmp	r3, #0
 800690c:	d022      	beq.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006912:	2b00      	cmp	r3, #0
 8006914:	d013      	beq.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x946>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800691a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800691e:	d00e      	beq.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x946>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006924:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006928:	d009      	beq.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x946>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800692e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006932:	d004      	beq.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x946>
 8006934:	f240 1169 	movw	r1, #361	@ 0x169
 8006938:	484e      	ldr	r0, [pc, #312]	@ (8006a74 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 800693a:	f7fd f9fb 	bl	8003d34 <assert_failed>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800693e:	4b4e      	ldr	r3, [pc, #312]	@ (8006a78 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006940:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006944:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800694c:	494a      	ldr	r1, [pc, #296]	@ (8006a78 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800694e:	4313      	orrs	r3, r2
 8006950:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800695c:	2b00      	cmp	r3, #0
 800695e:	d018      	beq.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x99a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006964:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006968:	d008      	beq.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x984>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800696e:	2b00      	cmp	r3, #0
 8006970:	d004      	beq.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x984>
 8006972:	f240 1173 	movw	r1, #371	@ 0x173
 8006976:	483f      	ldr	r0, [pc, #252]	@ (8006a74 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8006978:	f7fd f9dc 	bl	8003d34 <assert_failed>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800697c:	4b3e      	ldr	r3, [pc, #248]	@ (8006a78 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800697e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006982:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800698a:	493b      	ldr	r1, [pc, #236]	@ (8006a78 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800698c:	4313      	orrs	r3, r2
 800698e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800699a:	2b00      	cmp	r3, #0
 800699c:	d01f      	beq.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80069a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80069a6:	d008      	beq.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d004      	beq.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 80069b0:	f240 117d 	movw	r1, #381	@ 0x17d
 80069b4:	482f      	ldr	r0, [pc, #188]	@ (8006a74 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 80069b6:	f7fd f9bd 	bl	8003d34 <assert_failed>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80069ba:	4b2f      	ldr	r3, [pc, #188]	@ (8006a78 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80069bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069c0:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80069c8:	492b      	ldr	r1, [pc, #172]	@ (8006a78 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80069ca:	4313      	orrs	r3, r2
 80069cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80069d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80069d8:	d101      	bne.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    {
      pllsaiused = 1;
 80069da:	2301      	movs	r3, #1
 80069dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 0308 	and.w	r3, r3, #8
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d001      	beq.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x9f6>
  {
    pllsaiused = 1;
 80069ea:	2301      	movs	r3, #1
 80069ec:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d022      	beq.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0xa48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d013      	beq.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a06:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006a0a:	d00e      	beq.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a10:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a14:	d009      	beq.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a1a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006a1e:	d004      	beq.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8006a20:	f240 1195 	movw	r1, #405	@ 0x195
 8006a24:	4813      	ldr	r0, [pc, #76]	@ (8006a74 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8006a26:	f7fd f985 	bl	8003d34 <assert_failed>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006a2a:	4b13      	ldr	r3, [pc, #76]	@ (8006a78 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a30:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a38:	490f      	ldr	r1, [pc, #60]	@ (8006a78 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d020      	beq.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0xa96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a56:	d009      	beq.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d004      	beq.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006a62:	f240 119f 	movw	r1, #415	@ 0x19f
 8006a66:	4803      	ldr	r0, [pc, #12]	@ (8006a74 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8006a68:	f7fd f964 	bl	8003d34 <assert_failed>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006a6c:	4b02      	ldr	r3, [pc, #8]	@ (8006a78 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a72:	e003      	b.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0xa84>
 8006a74:	08013420 	.word	0x08013420
 8006a78:	40023800 	.word	0x40023800
 8006a7c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a86:	4910      	ldr	r1, [pc, #64]	@ (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006a8e:	69fb      	ldr	r3, [r7, #28]
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d006      	beq.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	f000 8155 	beq.w	8006d4c <HAL_RCCEx_PeriphCLKConfig+0xd54>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006aa2:	4b09      	ldr	r3, [pc, #36]	@ (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a08      	ldr	r2, [pc, #32]	@ (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 8006aa8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006aac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006aae:	f7fd fe0f 	bl	80046d0 <HAL_GetTick>
 8006ab2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006ab4:	e00a      	b.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0xad4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006ab6:	f7fd fe0b 	bl	80046d0 <HAL_GetTick>
 8006aba:	4602      	mov	r2, r0
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	1ad3      	subs	r3, r2, r3
 8006ac0:	2b64      	cmp	r3, #100	@ 0x64
 8006ac2:	d903      	bls.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0xad4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ac4:	2303      	movs	r3, #3
 8006ac6:	e273      	b.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 8006ac8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006acc:	4b9a      	ldr	r3, [pc, #616]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d1ee      	bne.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0xabe>
      }
    }

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	2b31      	cmp	r3, #49	@ 0x31
 8006ade:	d904      	bls.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	f5b3 7fd8 	cmp.w	r3, #432	@ 0x1b0
 8006ae8:	d904      	bls.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
 8006aea:	f44f 71ed 	mov.w	r1, #474	@ 0x1da
 8006aee:	4893      	ldr	r0, [pc, #588]	@ (8006d3c <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8006af0:	f7fd f920 	bl	8003d34 <assert_failed>

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f003 0301 	and.w	r3, r3, #1
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d02e      	beq.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0xb66>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d12a      	bne.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0xb66>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d903      	bls.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0xb20>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	2b07      	cmp	r3, #7
 8006b16:	d904      	bls.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8006b18:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8006b1c:	4887      	ldr	r0, [pc, #540]	@ (8006d3c <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8006b1e:	f7fd f909 	bl	8003d34 <assert_failed>

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006b22:	4b85      	ldr	r3, [pc, #532]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8006b24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b28:	0c1b      	lsrs	r3, r3, #16
 8006b2a:	f003 0303 	and.w	r3, r3, #3
 8006b2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006b30:	4b81      	ldr	r3, [pc, #516]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8006b32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b36:	0e1b      	lsrs	r3, r3, #24
 8006b38:	f003 030f 	and.w	r3, r3, #15
 8006b3c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	019a      	lsls	r2, r3, #6
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	041b      	lsls	r3, r3, #16
 8006b48:	431a      	orrs	r2, r3
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	061b      	lsls	r3, r3, #24
 8006b4e:	431a      	orrs	r2, r3
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	071b      	lsls	r3, r3, #28
 8006b56:	4978      	ldr	r1, [pc, #480]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d004      	beq.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b72:	d00a      	beq.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0xb92>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d048      	beq.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b84:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006b88:	d143      	bne.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {
      /* Check for PLLI2S Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	68db      	ldr	r3, [r3, #12]
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d903      	bls.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0xba2>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	2b0f      	cmp	r3, #15
 8006b98:	d904      	bls.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006b9a:	f44f 71f8 	mov.w	r1, #496	@ 0x1f0
 8006b9e:	4867      	ldr	r0, [pc, #412]	@ (8006d3c <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8006ba0:	f7fd f8c8 	bl	8003d34 <assert_failed>
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d003      	beq.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0xbbc>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bb0:	2b20      	cmp	r3, #32
 8006bb2:	d904      	bls.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0xbc6>
 8006bb4:	f44f 71f9 	mov.w	r1, #498	@ 0x1f2
 8006bb8:	4860      	ldr	r0, [pc, #384]	@ (8006d3c <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8006bba:	f7fd f8bb 	bl	8003d34 <assert_failed>

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006bbe:	4b5e      	ldr	r3, [pc, #376]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8006bc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006bc4:	0c1b      	lsrs	r3, r3, #16
 8006bc6:	f003 0303 	and.w	r3, r3, #3
 8006bca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006bcc:	4b5a      	ldr	r3, [pc, #360]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8006bce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006bd2:	0f1b      	lsrs	r3, r3, #28
 8006bd4:	f003 0307 	and.w	r3, r3, #7
 8006bd8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	019a      	lsls	r2, r3, #6
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	041b      	lsls	r3, r3, #16
 8006be4:	431a      	orrs	r2, r3
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	68db      	ldr	r3, [r3, #12]
 8006bea:	061b      	lsls	r3, r3, #24
 8006bec:	431a      	orrs	r2, r3
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	071b      	lsls	r3, r3, #28
 8006bf2:	4951      	ldr	r1, [pc, #324]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006bfa:	4b4f      	ldr	r3, [pc, #316]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8006bfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c00:	f023 021f 	bic.w	r2, r3, #31
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c08:	3b01      	subs	r3, #1
 8006c0a:	494b      	ldr	r1, [pc, #300]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d032      	beq.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	691b      	ldr	r3, [r3, #16]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d010      	beq.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	691b      	ldr	r3, [r3, #16]
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d00c      	beq.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	691b      	ldr	r3, [r3, #16]
 8006c32:	2b02      	cmp	r3, #2
 8006c34:	d008      	beq.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	691b      	ldr	r3, [r3, #16]
 8006c3a:	2b03      	cmp	r3, #3
 8006c3c:	d004      	beq.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8006c3e:	f240 2105 	movw	r1, #517	@ 0x205
 8006c42:	483e      	ldr	r0, [pc, #248]	@ (8006d3c <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8006c44:	f7fd f876 	bl	8003d34 <assert_failed>

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006c48:	4b3b      	ldr	r3, [pc, #236]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8006c4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c4e:	0e1b      	lsrs	r3, r3, #24
 8006c50:	f003 030f 	and.w	r3, r3, #15
 8006c54:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006c56:	4b38      	ldr	r3, [pc, #224]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8006c58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c5c:	0f1b      	lsrs	r3, r3, #28
 8006c5e:	f003 0307 	and.w	r3, r3, #7
 8006c62:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	019a      	lsls	r2, r3, #6
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	691b      	ldr	r3, [r3, #16]
 8006c6e:	041b      	lsls	r3, r3, #16
 8006c70:	431a      	orrs	r2, r3
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	061b      	lsls	r3, r3, #24
 8006c76:	431a      	orrs	r2, r3
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	071b      	lsls	r3, r3, #28
 8006c7c:	492e      	ldr	r1, [pc, #184]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d040      	beq.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	691b      	ldr	r3, [r3, #16]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d010      	beq.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	691b      	ldr	r3, [r3, #16]
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d00c      	beq.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	691b      	ldr	r3, [r3, #16]
 8006ca4:	2b02      	cmp	r3, #2
 8006ca6:	d008      	beq.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	691b      	ldr	r3, [r3, #16]
 8006cac:	2b03      	cmp	r3, #3
 8006cae:	d004      	beq.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8006cb0:	f44f 7105 	mov.w	r1, #532	@ 0x214
 8006cb4:	4821      	ldr	r0, [pc, #132]	@ (8006d3c <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8006cb6:	f7fd f83d 	bl	8003d34 <assert_failed>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d903      	bls.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0xcd2>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	2b07      	cmp	r3, #7
 8006cc8:	d904      	bls.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8006cca:	f240 2115 	movw	r1, #533	@ 0x215
 8006cce:	481b      	ldr	r0, [pc, #108]	@ (8006d3c <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8006cd0:	f7fd f830 	bl	8003d34 <assert_failed>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d903      	bls.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0xcec>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	2b0f      	cmp	r3, #15
 8006ce2:	d904      	bls.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0xcf6>
 8006ce4:	f240 2116 	movw	r1, #534	@ 0x216
 8006ce8:	4814      	ldr	r0, [pc, #80]	@ (8006d3c <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8006cea:	f7fd f823 	bl	8003d34 <assert_failed>

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	019a      	lsls	r2, r3, #6
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	691b      	ldr	r3, [r3, #16]
 8006cf8:	041b      	lsls	r3, r3, #16
 8006cfa:	431a      	orrs	r2, r3
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	68db      	ldr	r3, [r3, #12]
 8006d00:	061b      	lsls	r3, r3, #24
 8006d02:	431a      	orrs	r2, r3
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	071b      	lsls	r3, r3, #28
 8006d0a:	490b      	ldr	r1, [pc, #44]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006d12:	4b09      	ldr	r3, [pc, #36]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a08      	ldr	r2, [pc, #32]	@ (8006d38 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8006d18:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006d1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d1e:	f7fd fcd7 	bl	80046d0 <HAL_GetTick>
 8006d22:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006d24:	e00c      	b.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0xd48>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006d26:	f7fd fcd3 	bl	80046d0 <HAL_GetTick>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	1ad3      	subs	r3, r2, r3
 8006d30:	2b64      	cmp	r3, #100	@ 0x64
 8006d32:	d905      	bls.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0xd48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d34:	2303      	movs	r3, #3
 8006d36:	e13b      	b.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 8006d38:	40023800 	.word	0x40023800
 8006d3c:	08013420 	.word	0x08013420
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006d40:	4b9d      	ldr	r3, [pc, #628]	@ (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d0ec      	beq.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006d4c:	69bb      	ldr	r3, [r7, #24]
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	f040 812d 	bne.w	8006fae <HAL_RCCEx_PeriphCLKConfig+0xfb6>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006d54:	4b98      	ldr	r3, [pc, #608]	@ (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a97      	ldr	r2, [pc, #604]	@ (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8006d5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d60:	f7fd fcb6 	bl	80046d0 <HAL_GetTick>
 8006d64:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006d66:	e008      	b.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0xd82>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006d68:	f7fd fcb2 	bl	80046d0 <HAL_GetTick>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	1ad3      	subs	r3, r2, r3
 8006d72:	2b64      	cmp	r3, #100	@ 0x64
 8006d74:	d901      	bls.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0xd82>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d76:	2303      	movs	r3, #3
 8006d78:	e11a      	b.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006d7a:	4b8f      	ldr	r3, [pc, #572]	@ (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006d82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d86:	d0ef      	beq.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0xd70>
      }
    }

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	695b      	ldr	r3, [r3, #20]
 8006d8c:	2b31      	cmp	r3, #49	@ 0x31
 8006d8e:	d904      	bls.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0xda2>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	695b      	ldr	r3, [r3, #20]
 8006d94:	f5b3 7fd8 	cmp.w	r3, #432	@ 0x1b0
 8006d98:	d904      	bls.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0xdac>
 8006d9a:	f44f 7111 	mov.w	r1, #580	@ 0x244
 8006d9e:	4887      	ldr	r0, [pc, #540]	@ (8006fbc <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8006da0:	f7fc ffc8 	bl	8003d34 <assert_failed>

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d003      	beq.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d009      	beq.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0xdd4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d048      	beq.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0xe5e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d144      	bne.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0xe5e>
    {
      /* check for PLLSAIQ Parameter */
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	699b      	ldr	r3, [r3, #24]
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d903      	bls.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0xde4>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	699b      	ldr	r3, [r3, #24]
 8006dd8:	2b0f      	cmp	r3, #15
 8006dda:	d904      	bls.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0xdee>
 8006ddc:	f240 214b 	movw	r1, #587	@ 0x24b
 8006de0:	4876      	ldr	r0, [pc, #472]	@ (8006fbc <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8006de2:	f7fc ffa7 	bl	8003d34 <assert_failed>
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d003      	beq.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0xdfe>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006df2:	2b20      	cmp	r3, #32
 8006df4:	d904      	bls.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0xe08>
 8006df6:	f240 214d 	movw	r1, #589	@ 0x24d
 8006dfa:	4870      	ldr	r0, [pc, #448]	@ (8006fbc <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8006dfc:	f7fc ff9a 	bl	8003d34 <assert_failed>

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006e00:	4b6d      	ldr	r3, [pc, #436]	@ (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8006e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e06:	0c1b      	lsrs	r3, r3, #16
 8006e08:	f003 0303 	and.w	r3, r3, #3
 8006e0c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006e0e:	4b6a      	ldr	r3, [pc, #424]	@ (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8006e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e14:	0f1b      	lsrs	r3, r3, #28
 8006e16:	f003 0307 	and.w	r3, r3, #7
 8006e1a:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	695b      	ldr	r3, [r3, #20]
 8006e20:	019a      	lsls	r2, r3, #6
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	041b      	lsls	r3, r3, #16
 8006e26:	431a      	orrs	r2, r3
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	699b      	ldr	r3, [r3, #24]
 8006e2c:	061b      	lsls	r3, r3, #24
 8006e2e:	431a      	orrs	r2, r3
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	071b      	lsls	r3, r3, #28
 8006e34:	4960      	ldr	r1, [pc, #384]	@ (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8006e36:	4313      	orrs	r3, r2
 8006e38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006e3c:	4b5e      	ldr	r3, [pc, #376]	@ (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8006e3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006e42:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e4a:	3b01      	subs	r3, #1
 8006e4c:	021b      	lsls	r3, r3, #8
 8006e4e:	495a      	ldr	r1, [pc, #360]	@ (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8006e50:	4313      	orrs	r3, r2
 8006e52:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d037      	beq.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0xeda>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006e66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e6a:	d132      	bne.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0xeda>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6a1b      	ldr	r3, [r3, #32]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d010      	beq.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6a1b      	ldr	r3, [r3, #32]
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d00c      	beq.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6a1b      	ldr	r3, [r3, #32]
 8006e80:	2b02      	cmp	r3, #2
 8006e82:	d008      	beq.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6a1b      	ldr	r3, [r3, #32]
 8006e88:	2b03      	cmp	r3, #3
 8006e8a:	d004      	beq.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8006e8c:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8006e90:	484a      	ldr	r0, [pc, #296]	@ (8006fbc <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8006e92:	f7fc ff4f 	bl	8003d34 <assert_failed>
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006e96:	4b48      	ldr	r3, [pc, #288]	@ (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8006e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e9c:	0e1b      	lsrs	r3, r3, #24
 8006e9e:	f003 030f 	and.w	r3, r3, #15
 8006ea2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006ea4:	4b44      	ldr	r3, [pc, #272]	@ (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8006ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006eaa:	0f1b      	lsrs	r3, r3, #28
 8006eac:	f003 0307 	and.w	r3, r3, #7
 8006eb0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	695b      	ldr	r3, [r3, #20]
 8006eb6:	019a      	lsls	r2, r3, #6
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6a1b      	ldr	r3, [r3, #32]
 8006ebc:	041b      	lsls	r3, r3, #16
 8006ebe:	431a      	orrs	r2, r3
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	061b      	lsls	r3, r3, #24
 8006ec4:	431a      	orrs	r2, r3
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	071b      	lsls	r3, r3, #28
 8006eca:	493b      	ldr	r1, [pc, #236]	@ (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f003 0308 	and.w	r3, r3, #8
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d04d      	beq.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0xf82>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	69db      	ldr	r3, [r3, #28]
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d903      	bls.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0xef6>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	69db      	ldr	r3, [r3, #28]
 8006eea:	2b07      	cmp	r3, #7
 8006eec:	d904      	bls.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0xf00>
 8006eee:	f240 216f 	movw	r1, #623	@ 0x26f
 8006ef2:	4832      	ldr	r0, [pc, #200]	@ (8006fbc <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8006ef4:	f7fc ff1e 	bl	8003d34 <assert_failed>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d013      	beq.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f08:	d00e      	beq.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f0e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f12:	d009      	beq.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f18:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006f1c:	d004      	beq.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 8006f1e:	f44f 711c 	mov.w	r1, #624	@ 0x270
 8006f22:	4826      	ldr	r0, [pc, #152]	@ (8006fbc <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8006f24:	f7fc ff06 	bl	8003d34 <assert_failed>

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006f28:	4b23      	ldr	r3, [pc, #140]	@ (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8006f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f2e:	0e1b      	lsrs	r3, r3, #24
 8006f30:	f003 030f 	and.w	r3, r3, #15
 8006f34:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006f36:	4b20      	ldr	r3, [pc, #128]	@ (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8006f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f3c:	0c1b      	lsrs	r3, r3, #16
 8006f3e:	f003 0303 	and.w	r3, r3, #3
 8006f42:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	695b      	ldr	r3, [r3, #20]
 8006f48:	019a      	lsls	r2, r3, #6
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	041b      	lsls	r3, r3, #16
 8006f4e:	431a      	orrs	r2, r3
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	061b      	lsls	r3, r3, #24
 8006f54:	431a      	orrs	r2, r3
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	69db      	ldr	r3, [r3, #28]
 8006f5a:	071b      	lsls	r3, r3, #28
 8006f5c:	4916      	ldr	r1, [pc, #88]	@ (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006f64:	4b14      	ldr	r3, [pc, #80]	@ (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8006f66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f6a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f72:	4911      	ldr	r1, [pc, #68]	@ (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8006f74:	4313      	orrs	r3, r2
 8006f76:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006f7a:	4b0f      	ldr	r3, [pc, #60]	@ (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a0e      	ldr	r2, [pc, #56]	@ (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8006f80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f86:	f7fd fba3 	bl	80046d0 <HAL_GetTick>
 8006f8a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006f8c:	e008      	b.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006f8e:	f7fd fb9f 	bl	80046d0 <HAL_GetTick>
 8006f92:	4602      	mov	r2, r0
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	1ad3      	subs	r3, r2, r3
 8006f98:	2b64      	cmp	r3, #100	@ 0x64
 8006f9a:	d901      	bls.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006f9c:	2303      	movs	r3, #3
 8006f9e:	e007      	b.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006fa0:	4b05      	ldr	r3, [pc, #20]	@ (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006fa8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006fac:	d1ef      	bne.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0xf96>
      }
    }
  }
  return HAL_OK;
 8006fae:	2300      	movs	r3, #0
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3720      	adds	r7, #32
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}
 8006fb8:	40023800 	.word	0x40023800
 8006fbc:	08013420 	.word	0x08013420

08006fc0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d101      	bne.n	8006fd2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	e1fb      	b.n	80073ca <HAL_SPI_Init+0x40a>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a83      	ldr	r2, [pc, #524]	@ (80071e4 <HAL_SPI_Init+0x224>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d01d      	beq.n	8007018 <HAL_SPI_Init+0x58>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a81      	ldr	r2, [pc, #516]	@ (80071e8 <HAL_SPI_Init+0x228>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d018      	beq.n	8007018 <HAL_SPI_Init+0x58>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a80      	ldr	r2, [pc, #512]	@ (80071ec <HAL_SPI_Init+0x22c>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d013      	beq.n	8007018 <HAL_SPI_Init+0x58>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a7e      	ldr	r2, [pc, #504]	@ (80071f0 <HAL_SPI_Init+0x230>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d00e      	beq.n	8007018 <HAL_SPI_Init+0x58>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a7d      	ldr	r2, [pc, #500]	@ (80071f4 <HAL_SPI_Init+0x234>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d009      	beq.n	8007018 <HAL_SPI_Init+0x58>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a7b      	ldr	r2, [pc, #492]	@ (80071f8 <HAL_SPI_Init+0x238>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d004      	beq.n	8007018 <HAL_SPI_Init+0x58>
 800700e:	f44f 71a3 	mov.w	r1, #326	@ 0x146
 8007012:	487a      	ldr	r0, [pc, #488]	@ (80071fc <HAL_SPI_Init+0x23c>)
 8007014:	f7fc fe8e 	bl	8003d34 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d009      	beq.n	8007034 <HAL_SPI_Init+0x74>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007028:	d004      	beq.n	8007034 <HAL_SPI_Init+0x74>
 800702a:	f240 1147 	movw	r1, #327	@ 0x147
 800702e:	4873      	ldr	r0, [pc, #460]	@ (80071fc <HAL_SPI_Init+0x23c>)
 8007030:	f7fc fe80 	bl	8003d34 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	689b      	ldr	r3, [r3, #8]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d00e      	beq.n	800705a <HAL_SPI_Init+0x9a>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007044:	d009      	beq.n	800705a <HAL_SPI_Init+0x9a>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800704e:	d004      	beq.n	800705a <HAL_SPI_Init+0x9a>
 8007050:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 8007054:	4869      	ldr	r0, [pc, #420]	@ (80071fc <HAL_SPI_Init+0x23c>)
 8007056:	f7fc fe6d 	bl	8003d34 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	68db      	ldr	r3, [r3, #12]
 800705e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007062:	d040      	beq.n	80070e6 <HAL_SPI_Init+0x126>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	68db      	ldr	r3, [r3, #12]
 8007068:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 800706c:	d03b      	beq.n	80070e6 <HAL_SPI_Init+0x126>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	68db      	ldr	r3, [r3, #12]
 8007072:	f5b3 6f50 	cmp.w	r3, #3328	@ 0xd00
 8007076:	d036      	beq.n	80070e6 <HAL_SPI_Init+0x126>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007080:	d031      	beq.n	80070e6 <HAL_SPI_Init+0x126>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	68db      	ldr	r3, [r3, #12]
 8007086:	f5b3 6f30 	cmp.w	r3, #2816	@ 0xb00
 800708a:	d02c      	beq.n	80070e6 <HAL_SPI_Init+0x126>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007094:	d027      	beq.n	80070e6 <HAL_SPI_Init+0x126>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	f5b3 6f10 	cmp.w	r3, #2304	@ 0x900
 800709e:	d022      	beq.n	80070e6 <HAL_SPI_Init+0x126>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	68db      	ldr	r3, [r3, #12]
 80070a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80070a8:	d01d      	beq.n	80070e6 <HAL_SPI_Init+0x126>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	68db      	ldr	r3, [r3, #12]
 80070ae:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80070b2:	d018      	beq.n	80070e6 <HAL_SPI_Init+0x126>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80070bc:	d013      	beq.n	80070e6 <HAL_SPI_Init+0x126>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	68db      	ldr	r3, [r3, #12]
 80070c2:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80070c6:	d00e      	beq.n	80070e6 <HAL_SPI_Init+0x126>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	68db      	ldr	r3, [r3, #12]
 80070cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070d0:	d009      	beq.n	80070e6 <HAL_SPI_Init+0x126>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	68db      	ldr	r3, [r3, #12]
 80070d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80070da:	d004      	beq.n	80070e6 <HAL_SPI_Init+0x126>
 80070dc:	f240 1149 	movw	r1, #329	@ 0x149
 80070e0:	4846      	ldr	r0, [pc, #280]	@ (80071fc <HAL_SPI_Init+0x23c>)
 80070e2:	f7fc fe27 	bl	8003d34 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	699b      	ldr	r3, [r3, #24]
 80070ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070ee:	d00d      	beq.n	800710c <HAL_SPI_Init+0x14c>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	699b      	ldr	r3, [r3, #24]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d009      	beq.n	800710c <HAL_SPI_Init+0x14c>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	699b      	ldr	r3, [r3, #24]
 80070fc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007100:	d004      	beq.n	800710c <HAL_SPI_Init+0x14c>
 8007102:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 8007106:	483d      	ldr	r0, [pc, #244]	@ (80071fc <HAL_SPI_Init+0x23c>)
 8007108:	f7fc fe14 	bl	8003d34 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007110:	2b08      	cmp	r3, #8
 8007112:	d008      	beq.n	8007126 <HAL_SPI_Init+0x166>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007118:	2b00      	cmp	r3, #0
 800711a:	d004      	beq.n	8007126 <HAL_SPI_Init+0x166>
 800711c:	f240 114b 	movw	r1, #331	@ 0x14b
 8007120:	4836      	ldr	r0, [pc, #216]	@ (80071fc <HAL_SPI_Init+0x23c>)
 8007122:	f7fc fe07 	bl	8003d34 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	69db      	ldr	r3, [r3, #28]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d020      	beq.n	8007170 <HAL_SPI_Init+0x1b0>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	69db      	ldr	r3, [r3, #28]
 8007132:	2b08      	cmp	r3, #8
 8007134:	d01c      	beq.n	8007170 <HAL_SPI_Init+0x1b0>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	69db      	ldr	r3, [r3, #28]
 800713a:	2b10      	cmp	r3, #16
 800713c:	d018      	beq.n	8007170 <HAL_SPI_Init+0x1b0>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	69db      	ldr	r3, [r3, #28]
 8007142:	2b18      	cmp	r3, #24
 8007144:	d014      	beq.n	8007170 <HAL_SPI_Init+0x1b0>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	69db      	ldr	r3, [r3, #28]
 800714a:	2b20      	cmp	r3, #32
 800714c:	d010      	beq.n	8007170 <HAL_SPI_Init+0x1b0>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	69db      	ldr	r3, [r3, #28]
 8007152:	2b28      	cmp	r3, #40	@ 0x28
 8007154:	d00c      	beq.n	8007170 <HAL_SPI_Init+0x1b0>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	69db      	ldr	r3, [r3, #28]
 800715a:	2b30      	cmp	r3, #48	@ 0x30
 800715c:	d008      	beq.n	8007170 <HAL_SPI_Init+0x1b0>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	69db      	ldr	r3, [r3, #28]
 8007162:	2b38      	cmp	r3, #56	@ 0x38
 8007164:	d004      	beq.n	8007170 <HAL_SPI_Init+0x1b0>
 8007166:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 800716a:	4824      	ldr	r0, [pc, #144]	@ (80071fc <HAL_SPI_Init+0x23c>)
 800716c:	f7fc fde2 	bl	8003d34 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6a1b      	ldr	r3, [r3, #32]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d008      	beq.n	800718a <HAL_SPI_Init+0x1ca>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6a1b      	ldr	r3, [r3, #32]
 800717c:	2b80      	cmp	r3, #128	@ 0x80
 800717e:	d004      	beq.n	800718a <HAL_SPI_Init+0x1ca>
 8007180:	f240 114d 	movw	r1, #333	@ 0x14d
 8007184:	481d      	ldr	r0, [pc, #116]	@ (80071fc <HAL_SPI_Init+0x23c>)
 8007186:	f7fc fdd5 	bl	8003d34 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800718e:	2b00      	cmp	r3, #0
 8007190:	d008      	beq.n	80071a4 <HAL_SPI_Init+0x1e4>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007196:	2b10      	cmp	r3, #16
 8007198:	d004      	beq.n	80071a4 <HAL_SPI_Init+0x1e4>
 800719a:	f44f 71a7 	mov.w	r1, #334	@ 0x14e
 800719e:	4817      	ldr	r0, [pc, #92]	@ (80071fc <HAL_SPI_Init+0x23c>)
 80071a0:	f7fc fdc8 	bl	8003d34 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d158      	bne.n	800725e <HAL_SPI_Init+0x29e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	691b      	ldr	r3, [r3, #16]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d008      	beq.n	80071c6 <HAL_SPI_Init+0x206>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	691b      	ldr	r3, [r3, #16]
 80071b8:	2b02      	cmp	r3, #2
 80071ba:	d004      	beq.n	80071c6 <HAL_SPI_Init+0x206>
 80071bc:	f240 1151 	movw	r1, #337	@ 0x151
 80071c0:	480e      	ldr	r0, [pc, #56]	@ (80071fc <HAL_SPI_Init+0x23c>)
 80071c2:	f7fc fdb7 	bl	8003d34 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	695b      	ldr	r3, [r3, #20]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d018      	beq.n	8007200 <HAL_SPI_Init+0x240>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	695b      	ldr	r3, [r3, #20]
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d014      	beq.n	8007200 <HAL_SPI_Init+0x240>
 80071d6:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 80071da:	4808      	ldr	r0, [pc, #32]	@ (80071fc <HAL_SPI_Init+0x23c>)
 80071dc:	f7fc fdaa 	bl	8003d34 <assert_failed>
 80071e0:	e00e      	b.n	8007200 <HAL_SPI_Init+0x240>
 80071e2:	bf00      	nop
 80071e4:	40013000 	.word	0x40013000
 80071e8:	40003800 	.word	0x40003800
 80071ec:	40003c00 	.word	0x40003c00
 80071f0:	40013400 	.word	0x40013400
 80071f4:	40015000 	.word	0x40015000
 80071f8:	40015400 	.word	0x40015400
 80071fc:	0801345c 	.word	0x0801345c

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007208:	d125      	bne.n	8007256 <HAL_SPI_Init+0x296>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	69db      	ldr	r3, [r3, #28]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d050      	beq.n	80072b4 <HAL_SPI_Init+0x2f4>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	69db      	ldr	r3, [r3, #28]
 8007216:	2b08      	cmp	r3, #8
 8007218:	d04c      	beq.n	80072b4 <HAL_SPI_Init+0x2f4>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	69db      	ldr	r3, [r3, #28]
 800721e:	2b10      	cmp	r3, #16
 8007220:	d048      	beq.n	80072b4 <HAL_SPI_Init+0x2f4>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	69db      	ldr	r3, [r3, #28]
 8007226:	2b18      	cmp	r3, #24
 8007228:	d044      	beq.n	80072b4 <HAL_SPI_Init+0x2f4>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	69db      	ldr	r3, [r3, #28]
 800722e:	2b20      	cmp	r3, #32
 8007230:	d040      	beq.n	80072b4 <HAL_SPI_Init+0x2f4>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	69db      	ldr	r3, [r3, #28]
 8007236:	2b28      	cmp	r3, #40	@ 0x28
 8007238:	d03c      	beq.n	80072b4 <HAL_SPI_Init+0x2f4>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	69db      	ldr	r3, [r3, #28]
 800723e:	2b30      	cmp	r3, #48	@ 0x30
 8007240:	d038      	beq.n	80072b4 <HAL_SPI_Init+0x2f4>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	69db      	ldr	r3, [r3, #28]
 8007246:	2b38      	cmp	r3, #56	@ 0x38
 8007248:	d034      	beq.n	80072b4 <HAL_SPI_Init+0x2f4>
 800724a:	f44f 71ab 	mov.w	r1, #342	@ 0x156
 800724e:	4861      	ldr	r0, [pc, #388]	@ (80073d4 <HAL_SPI_Init+0x414>)
 8007250:	f7fc fd70 	bl	8003d34 <assert_failed>
 8007254:	e02e      	b.n	80072b4 <HAL_SPI_Init+0x2f4>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	61da      	str	r2, [r3, #28]
 800725c:	e02a      	b.n	80072b4 <HAL_SPI_Init+0x2f4>
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	69db      	ldr	r3, [r3, #28]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d020      	beq.n	80072a8 <HAL_SPI_Init+0x2e8>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	69db      	ldr	r3, [r3, #28]
 800726a:	2b08      	cmp	r3, #8
 800726c:	d01c      	beq.n	80072a8 <HAL_SPI_Init+0x2e8>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	69db      	ldr	r3, [r3, #28]
 8007272:	2b10      	cmp	r3, #16
 8007274:	d018      	beq.n	80072a8 <HAL_SPI_Init+0x2e8>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	69db      	ldr	r3, [r3, #28]
 800727a:	2b18      	cmp	r3, #24
 800727c:	d014      	beq.n	80072a8 <HAL_SPI_Init+0x2e8>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	69db      	ldr	r3, [r3, #28]
 8007282:	2b20      	cmp	r3, #32
 8007284:	d010      	beq.n	80072a8 <HAL_SPI_Init+0x2e8>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	69db      	ldr	r3, [r3, #28]
 800728a:	2b28      	cmp	r3, #40	@ 0x28
 800728c:	d00c      	beq.n	80072a8 <HAL_SPI_Init+0x2e8>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	69db      	ldr	r3, [r3, #28]
 8007292:	2b30      	cmp	r3, #48	@ 0x30
 8007294:	d008      	beq.n	80072a8 <HAL_SPI_Init+0x2e8>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	69db      	ldr	r3, [r3, #28]
 800729a:	2b38      	cmp	r3, #56	@ 0x38
 800729c:	d004      	beq.n	80072a8 <HAL_SPI_Init+0x2e8>
 800729e:	f44f 71b0 	mov.w	r1, #352	@ 0x160
 80072a2:	484c      	ldr	r0, [pc, #304]	@ (80073d4 <HAL_SPI_Init+0x414>)
 80072a4:	f7fc fd46 	bl	8003d34 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2200      	movs	r2, #0
 80072ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2200      	movs	r2, #0
 80072b8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80072c0:	b2db      	uxtb	r3, r3
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d106      	bne.n	80072d4 <HAL_SPI_Init+0x314>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f7fd f844 	bl	800435c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2202      	movs	r2, #2
 80072d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80072ea:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	68db      	ldr	r3, [r3, #12]
 80072f0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80072f4:	d902      	bls.n	80072fc <HAL_SPI_Init+0x33c>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80072f6:	2300      	movs	r3, #0
 80072f8:	60fb      	str	r3, [r7, #12]
 80072fa:	e002      	b.n	8007302 <HAL_SPI_Init+0x342>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80072fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007300:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	68db      	ldr	r3, [r3, #12]
 8007306:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800730a:	d007      	beq.n	800731c <HAL_SPI_Init+0x35c>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007314:	d002      	beq.n	800731c <HAL_SPI_Init+0x35c>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800732c:	431a      	orrs	r2, r3
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	691b      	ldr	r3, [r3, #16]
 8007332:	f003 0302 	and.w	r3, r3, #2
 8007336:	431a      	orrs	r2, r3
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	695b      	ldr	r3, [r3, #20]
 800733c:	f003 0301 	and.w	r3, r3, #1
 8007340:	431a      	orrs	r2, r3
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	699b      	ldr	r3, [r3, #24]
 8007346:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800734a:	431a      	orrs	r2, r3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	69db      	ldr	r3, [r3, #28]
 8007350:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007354:	431a      	orrs	r2, r3
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6a1b      	ldr	r3, [r3, #32]
 800735a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800735e:	ea42 0103 	orr.w	r1, r2, r3
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007366:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	430a      	orrs	r2, r1
 8007370:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	699b      	ldr	r3, [r3, #24]
 8007376:	0c1b      	lsrs	r3, r3, #16
 8007378:	f003 0204 	and.w	r2, r3, #4
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007380:	f003 0310 	and.w	r3, r3, #16
 8007384:	431a      	orrs	r2, r3
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800738a:	f003 0308 	and.w	r3, r3, #8
 800738e:	431a      	orrs	r2, r3
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	68db      	ldr	r3, [r3, #12]
 8007394:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007398:	ea42 0103 	orr.w	r1, r2, r3
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	430a      	orrs	r2, r1
 80073a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	69da      	ldr	r2, [r3, #28]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80073b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2201      	movs	r2, #1
 80073c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80073c8:	2300      	movs	r3, #0
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3710      	adds	r7, #16
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	bf00      	nop
 80073d4:	0801345c 	.word	0x0801345c

080073d8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b088      	sub	sp, #32
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80073f0:	69bb      	ldr	r3, [r7, #24]
 80073f2:	099b      	lsrs	r3, r3, #6
 80073f4:	f003 0301 	and.w	r3, r3, #1
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d10f      	bne.n	800741c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80073fc:	69bb      	ldr	r3, [r7, #24]
 80073fe:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007402:	2b00      	cmp	r3, #0
 8007404:	d00a      	beq.n	800741c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	099b      	lsrs	r3, r3, #6
 800740a:	f003 0301 	and.w	r3, r3, #1
 800740e:	2b00      	cmp	r3, #0
 8007410:	d004      	beq.n	800741c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	4798      	blx	r3
    return;
 800741a:	e0d7      	b.n	80075cc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800741c:	69bb      	ldr	r3, [r7, #24]
 800741e:	085b      	lsrs	r3, r3, #1
 8007420:	f003 0301 	and.w	r3, r3, #1
 8007424:	2b00      	cmp	r3, #0
 8007426:	d00a      	beq.n	800743e <HAL_SPI_IRQHandler+0x66>
 8007428:	69fb      	ldr	r3, [r7, #28]
 800742a:	09db      	lsrs	r3, r3, #7
 800742c:	f003 0301 	and.w	r3, r3, #1
 8007430:	2b00      	cmp	r3, #0
 8007432:	d004      	beq.n	800743e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	4798      	blx	r3
    return;
 800743c:	e0c6      	b.n	80075cc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800743e:	69bb      	ldr	r3, [r7, #24]
 8007440:	095b      	lsrs	r3, r3, #5
 8007442:	f003 0301 	and.w	r3, r3, #1
 8007446:	2b00      	cmp	r3, #0
 8007448:	d10c      	bne.n	8007464 <HAL_SPI_IRQHandler+0x8c>
 800744a:	69bb      	ldr	r3, [r7, #24]
 800744c:	099b      	lsrs	r3, r3, #6
 800744e:	f003 0301 	and.w	r3, r3, #1
 8007452:	2b00      	cmp	r3, #0
 8007454:	d106      	bne.n	8007464 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007456:	69bb      	ldr	r3, [r7, #24]
 8007458:	0a1b      	lsrs	r3, r3, #8
 800745a:	f003 0301 	and.w	r3, r3, #1
 800745e:	2b00      	cmp	r3, #0
 8007460:	f000 80b4 	beq.w	80075cc <HAL_SPI_IRQHandler+0x1f4>
 8007464:	69fb      	ldr	r3, [r7, #28]
 8007466:	095b      	lsrs	r3, r3, #5
 8007468:	f003 0301 	and.w	r3, r3, #1
 800746c:	2b00      	cmp	r3, #0
 800746e:	f000 80ad 	beq.w	80075cc <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007472:	69bb      	ldr	r3, [r7, #24]
 8007474:	099b      	lsrs	r3, r3, #6
 8007476:	f003 0301 	and.w	r3, r3, #1
 800747a:	2b00      	cmp	r3, #0
 800747c:	d023      	beq.n	80074c6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007484:	b2db      	uxtb	r3, r3
 8007486:	2b03      	cmp	r3, #3
 8007488:	d011      	beq.n	80074ae <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800748e:	f043 0204 	orr.w	r2, r3, #4
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007496:	2300      	movs	r3, #0
 8007498:	617b      	str	r3, [r7, #20]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	68db      	ldr	r3, [r3, #12]
 80074a0:	617b      	str	r3, [r7, #20]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	617b      	str	r3, [r7, #20]
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	e00b      	b.n	80074c6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80074ae:	2300      	movs	r3, #0
 80074b0:	613b      	str	r3, [r7, #16]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	613b      	str	r3, [r7, #16]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	613b      	str	r3, [r7, #16]
 80074c2:	693b      	ldr	r3, [r7, #16]
        return;
 80074c4:	e082      	b.n	80075cc <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80074c6:	69bb      	ldr	r3, [r7, #24]
 80074c8:	095b      	lsrs	r3, r3, #5
 80074ca:	f003 0301 	and.w	r3, r3, #1
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d014      	beq.n	80074fc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074d6:	f043 0201 	orr.w	r2, r3, #1
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80074de:	2300      	movs	r3, #0
 80074e0:	60fb      	str	r3, [r7, #12]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	60fb      	str	r3, [r7, #12]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80074f8:	601a      	str	r2, [r3, #0]
 80074fa:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80074fc:	69bb      	ldr	r3, [r7, #24]
 80074fe:	0a1b      	lsrs	r3, r3, #8
 8007500:	f003 0301 	and.w	r3, r3, #1
 8007504:	2b00      	cmp	r3, #0
 8007506:	d00c      	beq.n	8007522 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800750c:	f043 0208 	orr.w	r2, r3, #8
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007514:	2300      	movs	r3, #0
 8007516:	60bb      	str	r3, [r7, #8]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	60bb      	str	r3, [r7, #8]
 8007520:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007526:	2b00      	cmp	r3, #0
 8007528:	d04f      	beq.n	80075ca <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	685a      	ldr	r2, [r3, #4]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007538:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2201      	movs	r2, #1
 800753e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	f003 0302 	and.w	r3, r3, #2
 8007548:	2b00      	cmp	r3, #0
 800754a:	d104      	bne.n	8007556 <HAL_SPI_IRQHandler+0x17e>
 800754c:	69fb      	ldr	r3, [r7, #28]
 800754e:	f003 0301 	and.w	r3, r3, #1
 8007552:	2b00      	cmp	r3, #0
 8007554:	d034      	beq.n	80075c0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	685a      	ldr	r2, [r3, #4]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f022 0203 	bic.w	r2, r2, #3
 8007564:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800756a:	2b00      	cmp	r3, #0
 800756c:	d011      	beq.n	8007592 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007572:	4a18      	ldr	r2, [pc, #96]	@ (80075d4 <HAL_SPI_IRQHandler+0x1fc>)
 8007574:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800757a:	4618      	mov	r0, r3
 800757c:	f7fd fb82 	bl	8004c84 <HAL_DMA_Abort_IT>
 8007580:	4603      	mov	r3, r0
 8007582:	2b00      	cmp	r3, #0
 8007584:	d005      	beq.n	8007592 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800758a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007596:	2b00      	cmp	r3, #0
 8007598:	d016      	beq.n	80075c8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800759e:	4a0d      	ldr	r2, [pc, #52]	@ (80075d4 <HAL_SPI_IRQHandler+0x1fc>)
 80075a0:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075a6:	4618      	mov	r0, r3
 80075a8:	f7fd fb6c 	bl	8004c84 <HAL_DMA_Abort_IT>
 80075ac:	4603      	mov	r3, r0
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d00a      	beq.n	80075c8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075b6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 80075be:	e003      	b.n	80075c8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f000 f809 	bl	80075d8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80075c6:	e000      	b.n	80075ca <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80075c8:	bf00      	nop
    return;
 80075ca:	bf00      	nop
  }
}
 80075cc:	3720      	adds	r7, #32
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}
 80075d2:	bf00      	nop
 80075d4:	080075ed 	.word	0x080075ed

080075d8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80075e0:	bf00      	nop
 80075e2:	370c      	adds	r7, #12
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr

080075ec <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075f8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2200      	movs	r2, #0
 80075fe:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2200      	movs	r2, #0
 8007606:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007608:	68f8      	ldr	r0, [r7, #12]
 800760a:	f7ff ffe5 	bl	80075d8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800760e:	bf00      	nop
 8007610:	3710      	adds	r7, #16
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}
	...

08007618 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b082      	sub	sp, #8
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d101      	bne.n	800762a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007626:	2301      	movs	r3, #1
 8007628:	e0f5      	b.n	8007816 <HAL_TIM_Base_Init+0x1fe>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a7c      	ldr	r2, [pc, #496]	@ (8007820 <HAL_TIM_Base_Init+0x208>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d045      	beq.n	80076c0 <HAL_TIM_Base_Init+0xa8>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800763c:	d040      	beq.n	80076c0 <HAL_TIM_Base_Init+0xa8>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a78      	ldr	r2, [pc, #480]	@ (8007824 <HAL_TIM_Base_Init+0x20c>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d03b      	beq.n	80076c0 <HAL_TIM_Base_Init+0xa8>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a76      	ldr	r2, [pc, #472]	@ (8007828 <HAL_TIM_Base_Init+0x210>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d036      	beq.n	80076c0 <HAL_TIM_Base_Init+0xa8>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a75      	ldr	r2, [pc, #468]	@ (800782c <HAL_TIM_Base_Init+0x214>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d031      	beq.n	80076c0 <HAL_TIM_Base_Init+0xa8>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a73      	ldr	r2, [pc, #460]	@ (8007830 <HAL_TIM_Base_Init+0x218>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d02c      	beq.n	80076c0 <HAL_TIM_Base_Init+0xa8>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a72      	ldr	r2, [pc, #456]	@ (8007834 <HAL_TIM_Base_Init+0x21c>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d027      	beq.n	80076c0 <HAL_TIM_Base_Init+0xa8>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a70      	ldr	r2, [pc, #448]	@ (8007838 <HAL_TIM_Base_Init+0x220>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d022      	beq.n	80076c0 <HAL_TIM_Base_Init+0xa8>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a6f      	ldr	r2, [pc, #444]	@ (800783c <HAL_TIM_Base_Init+0x224>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d01d      	beq.n	80076c0 <HAL_TIM_Base_Init+0xa8>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a6d      	ldr	r2, [pc, #436]	@ (8007840 <HAL_TIM_Base_Init+0x228>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d018      	beq.n	80076c0 <HAL_TIM_Base_Init+0xa8>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a6c      	ldr	r2, [pc, #432]	@ (8007844 <HAL_TIM_Base_Init+0x22c>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d013      	beq.n	80076c0 <HAL_TIM_Base_Init+0xa8>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a6a      	ldr	r2, [pc, #424]	@ (8007848 <HAL_TIM_Base_Init+0x230>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d00e      	beq.n	80076c0 <HAL_TIM_Base_Init+0xa8>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a69      	ldr	r2, [pc, #420]	@ (800784c <HAL_TIM_Base_Init+0x234>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d009      	beq.n	80076c0 <HAL_TIM_Base_Init+0xa8>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a67      	ldr	r2, [pc, #412]	@ (8007850 <HAL_TIM_Base_Init+0x238>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d004      	beq.n	80076c0 <HAL_TIM_Base_Init+0xa8>
 80076b6:	f44f 718b 	mov.w	r1, #278	@ 0x116
 80076ba:	4866      	ldr	r0, [pc, #408]	@ (8007854 <HAL_TIM_Base_Init+0x23c>)
 80076bc:	f7fc fb3a 	bl	8003d34 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d014      	beq.n	80076f2 <HAL_TIM_Base_Init+0xda>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	2b10      	cmp	r3, #16
 80076ce:	d010      	beq.n	80076f2 <HAL_TIM_Base_Init+0xda>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	689b      	ldr	r3, [r3, #8]
 80076d4:	2b20      	cmp	r3, #32
 80076d6:	d00c      	beq.n	80076f2 <HAL_TIM_Base_Init+0xda>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	689b      	ldr	r3, [r3, #8]
 80076dc:	2b40      	cmp	r3, #64	@ 0x40
 80076de:	d008      	beq.n	80076f2 <HAL_TIM_Base_Init+0xda>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	2b60      	cmp	r3, #96	@ 0x60
 80076e6:	d004      	beq.n	80076f2 <HAL_TIM_Base_Init+0xda>
 80076e8:	f240 1117 	movw	r1, #279	@ 0x117
 80076ec:	4859      	ldr	r0, [pc, #356]	@ (8007854 <HAL_TIM_Base_Init+0x23c>)
 80076ee:	f7fc fb21 	bl	8003d34 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	691b      	ldr	r3, [r3, #16]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d00e      	beq.n	8007718 <HAL_TIM_Base_Init+0x100>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	691b      	ldr	r3, [r3, #16]
 80076fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007702:	d009      	beq.n	8007718 <HAL_TIM_Base_Init+0x100>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	691b      	ldr	r3, [r3, #16]
 8007708:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800770c:	d004      	beq.n	8007718 <HAL_TIM_Base_Init+0x100>
 800770e:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8007712:	4850      	ldr	r0, [pc, #320]	@ (8007854 <HAL_TIM_Base_Init+0x23c>)
 8007714:	f7fc fb0e 	bl	8003d34 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007720:	d004      	beq.n	800772c <HAL_TIM_Base_Init+0x114>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a41      	ldr	r2, [pc, #260]	@ (800782c <HAL_TIM_Base_Init+0x214>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d107      	bne.n	800773c <HAL_TIM_Base_Init+0x124>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	68db      	ldr	r3, [r3, #12]
 8007730:	2b00      	cmp	r3, #0
 8007732:	bf14      	ite	ne
 8007734:	2301      	movne	r3, #1
 8007736:	2300      	moveq	r3, #0
 8007738:	b2db      	uxtb	r3, r3
 800773a:	e00e      	b.n	800775a <HAL_TIM_Base_Init+0x142>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	68db      	ldr	r3, [r3, #12]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d006      	beq.n	8007752 <HAL_TIM_Base_Init+0x13a>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	68db      	ldr	r3, [r3, #12]
 8007748:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800774c:	d201      	bcs.n	8007752 <HAL_TIM_Base_Init+0x13a>
 800774e:	2301      	movs	r3, #1
 8007750:	e000      	b.n	8007754 <HAL_TIM_Base_Init+0x13c>
 8007752:	2300      	movs	r3, #0
 8007754:	f003 0301 	and.w	r3, r3, #1
 8007758:	b2db      	uxtb	r3, r3
 800775a:	2b00      	cmp	r3, #0
 800775c:	d104      	bne.n	8007768 <HAL_TIM_Base_Init+0x150>
 800775e:	f240 1119 	movw	r1, #281	@ 0x119
 8007762:	483c      	ldr	r0, [pc, #240]	@ (8007854 <HAL_TIM_Base_Init+0x23c>)
 8007764:	f7fc fae6 	bl	8003d34 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	699b      	ldr	r3, [r3, #24]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d008      	beq.n	8007782 <HAL_TIM_Base_Init+0x16a>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	699b      	ldr	r3, [r3, #24]
 8007774:	2b80      	cmp	r3, #128	@ 0x80
 8007776:	d004      	beq.n	8007782 <HAL_TIM_Base_Init+0x16a>
 8007778:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 800777c:	4835      	ldr	r0, [pc, #212]	@ (8007854 <HAL_TIM_Base_Init+0x23c>)
 800777e:	f7fc fad9 	bl	8003d34 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007788:	b2db      	uxtb	r3, r3
 800778a:	2b00      	cmp	r3, #0
 800778c:	d106      	bne.n	800779c <HAL_TIM_Base_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2200      	movs	r2, #0
 8007792:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f7fc fe2c 	bl	80043f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2202      	movs	r2, #2
 80077a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	3304      	adds	r3, #4
 80077ac:	4619      	mov	r1, r3
 80077ae:	4610      	mov	r0, r2
 80077b0:	f000 ff36 	bl	8008620 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2201      	movs	r2, #1
 80077b8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2201      	movs	r2, #1
 80077c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2201      	movs	r2, #1
 80077c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2201      	movs	r2, #1
 80077d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2201      	movs	r2, #1
 80077d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2201      	movs	r2, #1
 80077e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2201      	movs	r2, #1
 80077e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2201      	movs	r2, #1
 80077f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2201      	movs	r2, #1
 80077f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2201      	movs	r2, #1
 8007800:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2201      	movs	r2, #1
 8007808:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2201      	movs	r2, #1
 8007810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007814:	2300      	movs	r3, #0
}
 8007816:	4618      	mov	r0, r3
 8007818:	3708      	adds	r7, #8
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
 800781e:	bf00      	nop
 8007820:	40010000 	.word	0x40010000
 8007824:	40000400 	.word	0x40000400
 8007828:	40000800 	.word	0x40000800
 800782c:	40000c00 	.word	0x40000c00
 8007830:	40001000 	.word	0x40001000
 8007834:	40001400 	.word	0x40001400
 8007838:	40010400 	.word	0x40010400
 800783c:	40014000 	.word	0x40014000
 8007840:	40014400 	.word	0x40014400
 8007844:	40014800 	.word	0x40014800
 8007848:	40001800 	.word	0x40001800
 800784c:	40001c00 	.word	0x40001c00
 8007850:	40002000 	.word	0x40002000
 8007854:	08013494 	.word	0x08013494

08007858 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b082      	sub	sp, #8
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d101      	bne.n	800786a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	e0f5      	b.n	8007a56 <HAL_TIM_PWM_Init+0x1fe>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a7c      	ldr	r2, [pc, #496]	@ (8007a60 <HAL_TIM_PWM_Init+0x208>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d045      	beq.n	8007900 <HAL_TIM_PWM_Init+0xa8>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800787c:	d040      	beq.n	8007900 <HAL_TIM_PWM_Init+0xa8>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a78      	ldr	r2, [pc, #480]	@ (8007a64 <HAL_TIM_PWM_Init+0x20c>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d03b      	beq.n	8007900 <HAL_TIM_PWM_Init+0xa8>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a76      	ldr	r2, [pc, #472]	@ (8007a68 <HAL_TIM_PWM_Init+0x210>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d036      	beq.n	8007900 <HAL_TIM_PWM_Init+0xa8>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a75      	ldr	r2, [pc, #468]	@ (8007a6c <HAL_TIM_PWM_Init+0x214>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d031      	beq.n	8007900 <HAL_TIM_PWM_Init+0xa8>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a73      	ldr	r2, [pc, #460]	@ (8007a70 <HAL_TIM_PWM_Init+0x218>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d02c      	beq.n	8007900 <HAL_TIM_PWM_Init+0xa8>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a72      	ldr	r2, [pc, #456]	@ (8007a74 <HAL_TIM_PWM_Init+0x21c>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d027      	beq.n	8007900 <HAL_TIM_PWM_Init+0xa8>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a70      	ldr	r2, [pc, #448]	@ (8007a78 <HAL_TIM_PWM_Init+0x220>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d022      	beq.n	8007900 <HAL_TIM_PWM_Init+0xa8>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a6f      	ldr	r2, [pc, #444]	@ (8007a7c <HAL_TIM_PWM_Init+0x224>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d01d      	beq.n	8007900 <HAL_TIM_PWM_Init+0xa8>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a6d      	ldr	r2, [pc, #436]	@ (8007a80 <HAL_TIM_PWM_Init+0x228>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d018      	beq.n	8007900 <HAL_TIM_PWM_Init+0xa8>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a6c      	ldr	r2, [pc, #432]	@ (8007a84 <HAL_TIM_PWM_Init+0x22c>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d013      	beq.n	8007900 <HAL_TIM_PWM_Init+0xa8>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a6a      	ldr	r2, [pc, #424]	@ (8007a88 <HAL_TIM_PWM_Init+0x230>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d00e      	beq.n	8007900 <HAL_TIM_PWM_Init+0xa8>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a69      	ldr	r2, [pc, #420]	@ (8007a8c <HAL_TIM_PWM_Init+0x234>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d009      	beq.n	8007900 <HAL_TIM_PWM_Init+0xa8>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a67      	ldr	r2, [pc, #412]	@ (8007a90 <HAL_TIM_PWM_Init+0x238>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d004      	beq.n	8007900 <HAL_TIM_PWM_Init+0xa8>
 80078f6:	f240 5133 	movw	r1, #1331	@ 0x533
 80078fa:	4866      	ldr	r0, [pc, #408]	@ (8007a94 <HAL_TIM_PWM_Init+0x23c>)
 80078fc:	f7fc fa1a 	bl	8003d34 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d014      	beq.n	8007932 <HAL_TIM_PWM_Init+0xda>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	2b10      	cmp	r3, #16
 800790e:	d010      	beq.n	8007932 <HAL_TIM_PWM_Init+0xda>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	689b      	ldr	r3, [r3, #8]
 8007914:	2b20      	cmp	r3, #32
 8007916:	d00c      	beq.n	8007932 <HAL_TIM_PWM_Init+0xda>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	2b40      	cmp	r3, #64	@ 0x40
 800791e:	d008      	beq.n	8007932 <HAL_TIM_PWM_Init+0xda>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	2b60      	cmp	r3, #96	@ 0x60
 8007926:	d004      	beq.n	8007932 <HAL_TIM_PWM_Init+0xda>
 8007928:	f240 5134 	movw	r1, #1332	@ 0x534
 800792c:	4859      	ldr	r0, [pc, #356]	@ (8007a94 <HAL_TIM_PWM_Init+0x23c>)
 800792e:	f7fc fa01 	bl	8003d34 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	691b      	ldr	r3, [r3, #16]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d00e      	beq.n	8007958 <HAL_TIM_PWM_Init+0x100>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	691b      	ldr	r3, [r3, #16]
 800793e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007942:	d009      	beq.n	8007958 <HAL_TIM_PWM_Init+0x100>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	691b      	ldr	r3, [r3, #16]
 8007948:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800794c:	d004      	beq.n	8007958 <HAL_TIM_PWM_Init+0x100>
 800794e:	f240 5135 	movw	r1, #1333	@ 0x535
 8007952:	4850      	ldr	r0, [pc, #320]	@ (8007a94 <HAL_TIM_PWM_Init+0x23c>)
 8007954:	f7fc f9ee 	bl	8003d34 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007960:	d004      	beq.n	800796c <HAL_TIM_PWM_Init+0x114>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a41      	ldr	r2, [pc, #260]	@ (8007a6c <HAL_TIM_PWM_Init+0x214>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d107      	bne.n	800797c <HAL_TIM_PWM_Init+0x124>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	68db      	ldr	r3, [r3, #12]
 8007970:	2b00      	cmp	r3, #0
 8007972:	bf14      	ite	ne
 8007974:	2301      	movne	r3, #1
 8007976:	2300      	moveq	r3, #0
 8007978:	b2db      	uxtb	r3, r3
 800797a:	e00e      	b.n	800799a <HAL_TIM_PWM_Init+0x142>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	68db      	ldr	r3, [r3, #12]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d006      	beq.n	8007992 <HAL_TIM_PWM_Init+0x13a>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	68db      	ldr	r3, [r3, #12]
 8007988:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800798c:	d201      	bcs.n	8007992 <HAL_TIM_PWM_Init+0x13a>
 800798e:	2301      	movs	r3, #1
 8007990:	e000      	b.n	8007994 <HAL_TIM_PWM_Init+0x13c>
 8007992:	2300      	movs	r3, #0
 8007994:	f003 0301 	and.w	r3, r3, #1
 8007998:	b2db      	uxtb	r3, r3
 800799a:	2b00      	cmp	r3, #0
 800799c:	d104      	bne.n	80079a8 <HAL_TIM_PWM_Init+0x150>
 800799e:	f240 5136 	movw	r1, #1334	@ 0x536
 80079a2:	483c      	ldr	r0, [pc, #240]	@ (8007a94 <HAL_TIM_PWM_Init+0x23c>)
 80079a4:	f7fc f9c6 	bl	8003d34 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	699b      	ldr	r3, [r3, #24]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d008      	beq.n	80079c2 <HAL_TIM_PWM_Init+0x16a>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	699b      	ldr	r3, [r3, #24]
 80079b4:	2b80      	cmp	r3, #128	@ 0x80
 80079b6:	d004      	beq.n	80079c2 <HAL_TIM_PWM_Init+0x16a>
 80079b8:	f240 5137 	movw	r1, #1335	@ 0x537
 80079bc:	4835      	ldr	r0, [pc, #212]	@ (8007a94 <HAL_TIM_PWM_Init+0x23c>)
 80079be:	f7fc f9b9 	bl	8003d34 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d106      	bne.n	80079dc <HAL_TIM_PWM_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 f85e 	bl	8007a98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2202      	movs	r2, #2
 80079e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	3304      	adds	r3, #4
 80079ec:	4619      	mov	r1, r3
 80079ee:	4610      	mov	r0, r2
 80079f0:	f000 fe16 	bl	8008620 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2201      	movs	r2, #1
 80079f8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2201      	movs	r2, #1
 8007a00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2201      	movs	r2, #1
 8007a08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2201      	movs	r2, #1
 8007a10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2201      	movs	r2, #1
 8007a18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2201      	movs	r2, #1
 8007a28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2201      	movs	r2, #1
 8007a38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2201      	movs	r2, #1
 8007a48:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007a54:	2300      	movs	r3, #0
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3708      	adds	r7, #8
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
 8007a5e:	bf00      	nop
 8007a60:	40010000 	.word	0x40010000
 8007a64:	40000400 	.word	0x40000400
 8007a68:	40000800 	.word	0x40000800
 8007a6c:	40000c00 	.word	0x40000c00
 8007a70:	40001000 	.word	0x40001000
 8007a74:	40001400 	.word	0x40001400
 8007a78:	40010400 	.word	0x40010400
 8007a7c:	40014000 	.word	0x40014000
 8007a80:	40014400 	.word	0x40014400
 8007a84:	40014800 	.word	0x40014800
 8007a88:	40001800 	.word	0x40001800
 8007a8c:	40001c00 	.word	0x40001c00
 8007a90:	40002000 	.word	0x40002000
 8007a94:	08013494 	.word	0x08013494

08007a98 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b083      	sub	sp, #12
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007aa0:	bf00      	nop
 8007aa2:	370c      	adds	r7, #12
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr

08007aac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b086      	sub	sp, #24
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	60f8      	str	r0, [r7, #12]
 8007ab4:	60b9      	str	r1, [r7, #8]
 8007ab6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d016      	beq.n	8007af0 <HAL_TIM_PWM_ConfigChannel+0x44>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2b04      	cmp	r3, #4
 8007ac6:	d013      	beq.n	8007af0 <HAL_TIM_PWM_ConfigChannel+0x44>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2b08      	cmp	r3, #8
 8007acc:	d010      	beq.n	8007af0 <HAL_TIM_PWM_ConfigChannel+0x44>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2b0c      	cmp	r3, #12
 8007ad2:	d00d      	beq.n	8007af0 <HAL_TIM_PWM_ConfigChannel+0x44>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2b10      	cmp	r3, #16
 8007ad8:	d00a      	beq.n	8007af0 <HAL_TIM_PWM_ConfigChannel+0x44>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2b14      	cmp	r3, #20
 8007ade:	d007      	beq.n	8007af0 <HAL_TIM_PWM_ConfigChannel+0x44>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2b3c      	cmp	r3, #60	@ 0x3c
 8007ae4:	d004      	beq.n	8007af0 <HAL_TIM_PWM_ConfigChannel+0x44>
 8007ae6:	f241 01b3 	movw	r1, #4275	@ 0x10b3
 8007aea:	4895      	ldr	r0, [pc, #596]	@ (8007d40 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8007aec:	f7fc f922 	bl	8003d34 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	2b60      	cmp	r3, #96	@ 0x60
 8007af6:	d01c      	beq.n	8007b32 <HAL_TIM_PWM_ConfigChannel+0x86>
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	2b70      	cmp	r3, #112	@ 0x70
 8007afe:	d018      	beq.n	8007b32 <HAL_TIM_PWM_ConfigChannel+0x86>
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a8f      	ldr	r2, [pc, #572]	@ (8007d44 <HAL_TIM_PWM_ConfigChannel+0x298>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d013      	beq.n	8007b32 <HAL_TIM_PWM_ConfigChannel+0x86>
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a8e      	ldr	r2, [pc, #568]	@ (8007d48 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d00e      	beq.n	8007b32 <HAL_TIM_PWM_ConfigChannel+0x86>
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a8c      	ldr	r2, [pc, #560]	@ (8007d4c <HAL_TIM_PWM_ConfigChannel+0x2a0>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d009      	beq.n	8007b32 <HAL_TIM_PWM_ConfigChannel+0x86>
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a8b      	ldr	r2, [pc, #556]	@ (8007d50 <HAL_TIM_PWM_ConfigChannel+0x2a4>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d004      	beq.n	8007b32 <HAL_TIM_PWM_ConfigChannel+0x86>
 8007b28:	f241 01b4 	movw	r1, #4276	@ 0x10b4
 8007b2c:	4884      	ldr	r0, [pc, #528]	@ (8007d40 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8007b2e:	f7fc f901 	bl	8003d34 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	689b      	ldr	r3, [r3, #8]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d008      	beq.n	8007b4c <HAL_TIM_PWM_ConfigChannel+0xa0>
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	689b      	ldr	r3, [r3, #8]
 8007b3e:	2b02      	cmp	r3, #2
 8007b40:	d004      	beq.n	8007b4c <HAL_TIM_PWM_ConfigChannel+0xa0>
 8007b42:	f241 01b5 	movw	r1, #4277	@ 0x10b5
 8007b46:	487e      	ldr	r0, [pc, #504]	@ (8007d40 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8007b48:	f7fc f8f4 	bl	8003d34 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	691b      	ldr	r3, [r3, #16]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d008      	beq.n	8007b66 <HAL_TIM_PWM_ConfigChannel+0xba>
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	691b      	ldr	r3, [r3, #16]
 8007b58:	2b04      	cmp	r3, #4
 8007b5a:	d004      	beq.n	8007b66 <HAL_TIM_PWM_ConfigChannel+0xba>
 8007b5c:	f241 01b6 	movw	r1, #4278	@ 0x10b6
 8007b60:	4877      	ldr	r0, [pc, #476]	@ (8007d40 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8007b62:	f7fc f8e7 	bl	8003d34 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b6c:	2b01      	cmp	r3, #1
 8007b6e:	d101      	bne.n	8007b74 <HAL_TIM_PWM_ConfigChannel+0xc8>
 8007b70:	2302      	movs	r3, #2
 8007b72:	e1f3      	b.n	8007f5c <HAL_TIM_PWM_ConfigChannel+0x4b0>
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2201      	movs	r2, #1
 8007b78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2b14      	cmp	r3, #20
 8007b80:	f200 81e4 	bhi.w	8007f4c <HAL_TIM_PWM_ConfigChannel+0x4a0>
 8007b84:	a201      	add	r2, pc, #4	@ (adr r2, 8007b8c <HAL_TIM_PWM_ConfigChannel+0xe0>)
 8007b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b8a:	bf00      	nop
 8007b8c:	08007be1 	.word	0x08007be1
 8007b90:	08007f4d 	.word	0x08007f4d
 8007b94:	08007f4d 	.word	0x08007f4d
 8007b98:	08007f4d 	.word	0x08007f4d
 8007b9c:	08007ca3 	.word	0x08007ca3
 8007ba0:	08007f4d 	.word	0x08007f4d
 8007ba4:	08007f4d 	.word	0x08007f4d
 8007ba8:	08007f4d 	.word	0x08007f4d
 8007bac:	08007d81 	.word	0x08007d81
 8007bb0:	08007f4d 	.word	0x08007f4d
 8007bb4:	08007f4d 	.word	0x08007f4d
 8007bb8:	08007f4d 	.word	0x08007f4d
 8007bbc:	08007e07 	.word	0x08007e07
 8007bc0:	08007f4d 	.word	0x08007f4d
 8007bc4:	08007f4d 	.word	0x08007f4d
 8007bc8:	08007f4d 	.word	0x08007f4d
 8007bcc:	08007e8f 	.word	0x08007e8f
 8007bd0:	08007f4d 	.word	0x08007f4d
 8007bd4:	08007f4d 	.word	0x08007f4d
 8007bd8:	08007f4d 	.word	0x08007f4d
 8007bdc:	08007eed 	.word	0x08007eed
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a5b      	ldr	r2, [pc, #364]	@ (8007d54 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d03b      	beq.n	8007c62 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bf2:	d036      	beq.n	8007c62 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a57      	ldr	r2, [pc, #348]	@ (8007d58 <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d031      	beq.n	8007c62 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a56      	ldr	r2, [pc, #344]	@ (8007d5c <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d02c      	beq.n	8007c62 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a54      	ldr	r2, [pc, #336]	@ (8007d60 <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d027      	beq.n	8007c62 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a53      	ldr	r2, [pc, #332]	@ (8007d64 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d022      	beq.n	8007c62 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a51      	ldr	r2, [pc, #324]	@ (8007d68 <HAL_TIM_PWM_ConfigChannel+0x2bc>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d01d      	beq.n	8007c62 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a50      	ldr	r2, [pc, #320]	@ (8007d6c <HAL_TIM_PWM_ConfigChannel+0x2c0>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d018      	beq.n	8007c62 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a4e      	ldr	r2, [pc, #312]	@ (8007d70 <HAL_TIM_PWM_ConfigChannel+0x2c4>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d013      	beq.n	8007c62 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a4d      	ldr	r2, [pc, #308]	@ (8007d74 <HAL_TIM_PWM_ConfigChannel+0x2c8>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d00e      	beq.n	8007c62 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4a4b      	ldr	r2, [pc, #300]	@ (8007d78 <HAL_TIM_PWM_ConfigChannel+0x2cc>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d009      	beq.n	8007c62 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4a4a      	ldr	r2, [pc, #296]	@ (8007d7c <HAL_TIM_PWM_ConfigChannel+0x2d0>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d004      	beq.n	8007c62 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8007c58:	f44f 5186 	mov.w	r1, #4288	@ 0x10c0
 8007c5c:	4838      	ldr	r0, [pc, #224]	@ (8007d40 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8007c5e:	f7fc f869 	bl	8003d34 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	68b9      	ldr	r1, [r7, #8]
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f000 fd85 	bl	8008778 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	699a      	ldr	r2, [r3, #24]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f042 0208 	orr.w	r2, r2, #8
 8007c7c:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	699a      	ldr	r2, [r3, #24]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f022 0204 	bic.w	r2, r2, #4
 8007c8c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	6999      	ldr	r1, [r3, #24]
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	691a      	ldr	r2, [r3, #16]
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	430a      	orrs	r2, r1
 8007c9e:	619a      	str	r2, [r3, #24]
      break;
 8007ca0:	e157      	b.n	8007f52 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4a2b      	ldr	r2, [pc, #172]	@ (8007d54 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d027      	beq.n	8007cfc <HAL_TIM_PWM_ConfigChannel+0x250>
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cb4:	d022      	beq.n	8007cfc <HAL_TIM_PWM_ConfigChannel+0x250>
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a27      	ldr	r2, [pc, #156]	@ (8007d58 <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d01d      	beq.n	8007cfc <HAL_TIM_PWM_ConfigChannel+0x250>
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a25      	ldr	r2, [pc, #148]	@ (8007d5c <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d018      	beq.n	8007cfc <HAL_TIM_PWM_ConfigChannel+0x250>
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4a24      	ldr	r2, [pc, #144]	@ (8007d60 <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d013      	beq.n	8007cfc <HAL_TIM_PWM_ConfigChannel+0x250>
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4a22      	ldr	r2, [pc, #136]	@ (8007d64 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d00e      	beq.n	8007cfc <HAL_TIM_PWM_ConfigChannel+0x250>
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a21      	ldr	r2, [pc, #132]	@ (8007d68 <HAL_TIM_PWM_ConfigChannel+0x2bc>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d009      	beq.n	8007cfc <HAL_TIM_PWM_ConfigChannel+0x250>
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a21      	ldr	r2, [pc, #132]	@ (8007d74 <HAL_TIM_PWM_ConfigChannel+0x2c8>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d004      	beq.n	8007cfc <HAL_TIM_PWM_ConfigChannel+0x250>
 8007cf2:	f241 01d1 	movw	r1, #4305	@ 0x10d1
 8007cf6:	4812      	ldr	r0, [pc, #72]	@ (8007d40 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8007cf8:	f7fc f81c 	bl	8003d34 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	68b9      	ldr	r1, [r7, #8]
 8007d02:	4618      	mov	r0, r3
 8007d04:	f000 fdd4 	bl	80088b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	699a      	ldr	r2, [r3, #24]
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007d16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	699a      	ldr	r2, [r3, #24]
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007d26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	6999      	ldr	r1, [r3, #24]
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	691b      	ldr	r3, [r3, #16]
 8007d32:	021a      	lsls	r2, r3, #8
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	430a      	orrs	r2, r1
 8007d3a:	619a      	str	r2, [r3, #24]
      break;
 8007d3c:	e109      	b.n	8007f52 <HAL_TIM_PWM_ConfigChannel+0x4a6>
 8007d3e:	bf00      	nop
 8007d40:	08013494 	.word	0x08013494
 8007d44:	00010040 	.word	0x00010040
 8007d48:	00010050 	.word	0x00010050
 8007d4c:	00010060 	.word	0x00010060
 8007d50:	00010070 	.word	0x00010070
 8007d54:	40010000 	.word	0x40010000
 8007d58:	40000400 	.word	0x40000400
 8007d5c:	40000800 	.word	0x40000800
 8007d60:	40000c00 	.word	0x40000c00
 8007d64:	40010400 	.word	0x40010400
 8007d68:	40014000 	.word	0x40014000
 8007d6c:	40014400 	.word	0x40014400
 8007d70:	40014800 	.word	0x40014800
 8007d74:	40001800 	.word	0x40001800
 8007d78:	40001c00 	.word	0x40001c00
 8007d7c:	40002000 	.word	0x40002000
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a77      	ldr	r2, [pc, #476]	@ (8007f64 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d01d      	beq.n	8007dc6 <HAL_TIM_PWM_ConfigChannel+0x31a>
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d92:	d018      	beq.n	8007dc6 <HAL_TIM_PWM_ConfigChannel+0x31a>
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a73      	ldr	r2, [pc, #460]	@ (8007f68 <HAL_TIM_PWM_ConfigChannel+0x4bc>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d013      	beq.n	8007dc6 <HAL_TIM_PWM_ConfigChannel+0x31a>
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a72      	ldr	r2, [pc, #456]	@ (8007f6c <HAL_TIM_PWM_ConfigChannel+0x4c0>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d00e      	beq.n	8007dc6 <HAL_TIM_PWM_ConfigChannel+0x31a>
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a70      	ldr	r2, [pc, #448]	@ (8007f70 <HAL_TIM_PWM_ConfigChannel+0x4c4>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d009      	beq.n	8007dc6 <HAL_TIM_PWM_ConfigChannel+0x31a>
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a6f      	ldr	r2, [pc, #444]	@ (8007f74 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d004      	beq.n	8007dc6 <HAL_TIM_PWM_ConfigChannel+0x31a>
 8007dbc:	f241 01e2 	movw	r1, #4322	@ 0x10e2
 8007dc0:	486d      	ldr	r0, [pc, #436]	@ (8007f78 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 8007dc2:	f7fb ffb7 	bl	8003d34 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	68b9      	ldr	r1, [r7, #8]
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f000 fe0f 	bl	80089f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	69da      	ldr	r2, [r3, #28]
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f042 0208 	orr.w	r2, r2, #8
 8007de0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	69da      	ldr	r2, [r3, #28]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f022 0204 	bic.w	r2, r2, #4
 8007df0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	69d9      	ldr	r1, [r3, #28]
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	691a      	ldr	r2, [r3, #16]
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	430a      	orrs	r2, r1
 8007e02:	61da      	str	r2, [r3, #28]
      break;
 8007e04:	e0a5      	b.n	8007f52 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a56      	ldr	r2, [pc, #344]	@ (8007f64 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d01d      	beq.n	8007e4c <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e18:	d018      	beq.n	8007e4c <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a52      	ldr	r2, [pc, #328]	@ (8007f68 <HAL_TIM_PWM_ConfigChannel+0x4bc>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d013      	beq.n	8007e4c <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a50      	ldr	r2, [pc, #320]	@ (8007f6c <HAL_TIM_PWM_ConfigChannel+0x4c0>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d00e      	beq.n	8007e4c <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a4f      	ldr	r2, [pc, #316]	@ (8007f70 <HAL_TIM_PWM_ConfigChannel+0x4c4>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d009      	beq.n	8007e4c <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a4d      	ldr	r2, [pc, #308]	@ (8007f74 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d004      	beq.n	8007e4c <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8007e42:	f241 01f3 	movw	r1, #4339	@ 0x10f3
 8007e46:	484c      	ldr	r0, [pc, #304]	@ (8007f78 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 8007e48:	f7fb ff74 	bl	8003d34 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	68b9      	ldr	r1, [r7, #8]
 8007e52:	4618      	mov	r0, r3
 8007e54:	f000 fe6c 	bl	8008b30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	69da      	ldr	r2, [r3, #28]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e66:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	69da      	ldr	r2, [r3, #28]
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e76:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	69d9      	ldr	r1, [r3, #28]
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	691b      	ldr	r3, [r3, #16]
 8007e82:	021a      	lsls	r2, r3, #8
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	430a      	orrs	r2, r1
 8007e8a:	61da      	str	r2, [r3, #28]
      break;
 8007e8c:	e061      	b.n	8007f52 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a34      	ldr	r2, [pc, #208]	@ (8007f64 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d009      	beq.n	8007eac <HAL_TIM_PWM_ConfigChannel+0x400>
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a35      	ldr	r2, [pc, #212]	@ (8007f74 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d004      	beq.n	8007eac <HAL_TIM_PWM_ConfigChannel+0x400>
 8007ea2:	f241 1104 	movw	r1, #4356	@ 0x1104
 8007ea6:	4834      	ldr	r0, [pc, #208]	@ (8007f78 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 8007ea8:	f7fb ff44 	bl	8003d34 <assert_failed>

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	68b9      	ldr	r1, [r7, #8]
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f000 fea2 	bl	8008bfc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f042 0208 	orr.w	r2, r2, #8
 8007ec6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f022 0204 	bic.w	r2, r2, #4
 8007ed6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	691a      	ldr	r2, [r3, #16]
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	430a      	orrs	r2, r1
 8007ee8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007eea:	e032      	b.n	8007f52 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a1c      	ldr	r2, [pc, #112]	@ (8007f64 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d009      	beq.n	8007f0a <HAL_TIM_PWM_ConfigChannel+0x45e>
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a1e      	ldr	r2, [pc, #120]	@ (8007f74 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d004      	beq.n	8007f0a <HAL_TIM_PWM_ConfigChannel+0x45e>
 8007f00:	f241 1115 	movw	r1, #4373	@ 0x1115
 8007f04:	481c      	ldr	r0, [pc, #112]	@ (8007f78 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 8007f06:	f7fb ff15 	bl	8003d34 <assert_failed>

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	68b9      	ldr	r1, [r7, #8]
 8007f10:	4618      	mov	r0, r3
 8007f12:	f000 fec5 	bl	8008ca0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007f24:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f34:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	691b      	ldr	r3, [r3, #16]
 8007f40:	021a      	lsls	r2, r3, #8
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	430a      	orrs	r2, r1
 8007f48:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007f4a:	e002      	b.n	8007f52 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    default:
      status = HAL_ERROR;
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	75fb      	strb	r3, [r7, #23]
      break;
 8007f50:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2200      	movs	r2, #0
 8007f56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007f5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3718      	adds	r7, #24
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}
 8007f64:	40010000 	.word	0x40010000
 8007f68:	40000400 	.word	0x40000400
 8007f6c:	40000800 	.word	0x40000800
 8007f70:	40000c00 	.word	0x40000c00
 8007f74:	40010400 	.word	0x40010400
 8007f78:	08013494 	.word	0x08013494

08007f7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b084      	sub	sp, #16
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f86:	2300      	movs	r3, #0
 8007f88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f90:	2b01      	cmp	r3, #1
 8007f92:	d101      	bne.n	8007f98 <HAL_TIM_ConfigClockSource+0x1c>
 8007f94:	2302      	movs	r3, #2
 8007f96:	e332      	b.n	80085fe <HAL_TIM_ConfigClockSource+0x682>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2202      	movs	r2, #2
 8007fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fb0:	d029      	beq.n	8008006 <HAL_TIM_ConfigClockSource+0x8a>
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	2b70      	cmp	r3, #112	@ 0x70
 8007fb8:	d025      	beq.n	8008006 <HAL_TIM_ConfigClockSource+0x8a>
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007fc2:	d020      	beq.n	8008006 <HAL_TIM_ConfigClockSource+0x8a>
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	2b40      	cmp	r3, #64	@ 0x40
 8007fca:	d01c      	beq.n	8008006 <HAL_TIM_ConfigClockSource+0x8a>
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	2b50      	cmp	r3, #80	@ 0x50
 8007fd2:	d018      	beq.n	8008006 <HAL_TIM_ConfigClockSource+0x8a>
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	2b60      	cmp	r3, #96	@ 0x60
 8007fda:	d014      	beq.n	8008006 <HAL_TIM_ConfigClockSource+0x8a>
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d010      	beq.n	8008006 <HAL_TIM_ConfigClockSource+0x8a>
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	2b10      	cmp	r3, #16
 8007fea:	d00c      	beq.n	8008006 <HAL_TIM_ConfigClockSource+0x8a>
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	2b20      	cmp	r3, #32
 8007ff2:	d008      	beq.n	8008006 <HAL_TIM_ConfigClockSource+0x8a>
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	2b30      	cmp	r3, #48	@ 0x30
 8007ffa:	d004      	beq.n	8008006 <HAL_TIM_ConfigClockSource+0x8a>
 8007ffc:	f241 5151 	movw	r1, #5457	@ 0x1551
 8008000:	4893      	ldr	r0, [pc, #588]	@ (8008250 <HAL_TIM_ConfigClockSource+0x2d4>)
 8008002:	f7fb fe97 	bl	8003d34 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	689b      	ldr	r3, [r3, #8]
 800800c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800800e:	68ba      	ldr	r2, [r7, #8]
 8008010:	4b90      	ldr	r3, [pc, #576]	@ (8008254 <HAL_TIM_ConfigClockSource+0x2d8>)
 8008012:	4013      	ands	r3, r2
 8008014:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800801c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	68ba      	ldr	r2, [r7, #8]
 8008024:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800802e:	f000 812d 	beq.w	800828c <HAL_TIM_ConfigClockSource+0x310>
 8008032:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008036:	f200 82d5 	bhi.w	80085e4 <HAL_TIM_ConfigClockSource+0x668>
 800803a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800803e:	d02e      	beq.n	800809e <HAL_TIM_ConfigClockSource+0x122>
 8008040:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008044:	f200 82ce 	bhi.w	80085e4 <HAL_TIM_ConfigClockSource+0x668>
 8008048:	2b70      	cmp	r3, #112	@ 0x70
 800804a:	f000 8082 	beq.w	8008152 <HAL_TIM_ConfigClockSource+0x1d6>
 800804e:	2b70      	cmp	r3, #112	@ 0x70
 8008050:	f200 82c8 	bhi.w	80085e4 <HAL_TIM_ConfigClockSource+0x668>
 8008054:	2b60      	cmp	r3, #96	@ 0x60
 8008056:	f000 81e0 	beq.w	800841a <HAL_TIM_ConfigClockSource+0x49e>
 800805a:	2b60      	cmp	r3, #96	@ 0x60
 800805c:	f200 82c2 	bhi.w	80085e4 <HAL_TIM_ConfigClockSource+0x668>
 8008060:	2b50      	cmp	r3, #80	@ 0x50
 8008062:	f000 8184 	beq.w	800836e <HAL_TIM_ConfigClockSource+0x3f2>
 8008066:	2b50      	cmp	r3, #80	@ 0x50
 8008068:	f200 82bc 	bhi.w	80085e4 <HAL_TIM_ConfigClockSource+0x668>
 800806c:	2b40      	cmp	r3, #64	@ 0x40
 800806e:	f000 8237 	beq.w	80084e0 <HAL_TIM_ConfigClockSource+0x564>
 8008072:	2b40      	cmp	r3, #64	@ 0x40
 8008074:	f200 82b6 	bhi.w	80085e4 <HAL_TIM_ConfigClockSource+0x668>
 8008078:	2b30      	cmp	r3, #48	@ 0x30
 800807a:	f000 8287 	beq.w	800858c <HAL_TIM_ConfigClockSource+0x610>
 800807e:	2b30      	cmp	r3, #48	@ 0x30
 8008080:	f200 82b0 	bhi.w	80085e4 <HAL_TIM_ConfigClockSource+0x668>
 8008084:	2b20      	cmp	r3, #32
 8008086:	f000 8281 	beq.w	800858c <HAL_TIM_ConfigClockSource+0x610>
 800808a:	2b20      	cmp	r3, #32
 800808c:	f200 82aa 	bhi.w	80085e4 <HAL_TIM_ConfigClockSource+0x668>
 8008090:	2b00      	cmp	r3, #0
 8008092:	f000 827b 	beq.w	800858c <HAL_TIM_ConfigClockSource+0x610>
 8008096:	2b10      	cmp	r3, #16
 8008098:	f000 8278 	beq.w	800858c <HAL_TIM_ConfigClockSource+0x610>
 800809c:	e2a2      	b.n	80085e4 <HAL_TIM_ConfigClockSource+0x668>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a6d      	ldr	r2, [pc, #436]	@ (8008258 <HAL_TIM_ConfigClockSource+0x2dc>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	f000 82a0 	beq.w	80085ea <HAL_TIM_ConfigClockSource+0x66e>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080b2:	f000 829a 	beq.w	80085ea <HAL_TIM_ConfigClockSource+0x66e>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4a68      	ldr	r2, [pc, #416]	@ (800825c <HAL_TIM_ConfigClockSource+0x2e0>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	f000 8294 	beq.w	80085ea <HAL_TIM_ConfigClockSource+0x66e>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a66      	ldr	r2, [pc, #408]	@ (8008260 <HAL_TIM_ConfigClockSource+0x2e4>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	f000 828e 	beq.w	80085ea <HAL_TIM_ConfigClockSource+0x66e>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4a64      	ldr	r2, [pc, #400]	@ (8008264 <HAL_TIM_ConfigClockSource+0x2e8>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	f000 8288 	beq.w	80085ea <HAL_TIM_ConfigClockSource+0x66e>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4a62      	ldr	r2, [pc, #392]	@ (8008268 <HAL_TIM_ConfigClockSource+0x2ec>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	f000 8282 	beq.w	80085ea <HAL_TIM_ConfigClockSource+0x66e>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a60      	ldr	r2, [pc, #384]	@ (800826c <HAL_TIM_ConfigClockSource+0x2f0>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	f000 827c 	beq.w	80085ea <HAL_TIM_ConfigClockSource+0x66e>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a5e      	ldr	r2, [pc, #376]	@ (8008270 <HAL_TIM_ConfigClockSource+0x2f4>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	f000 8276 	beq.w	80085ea <HAL_TIM_ConfigClockSource+0x66e>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a5c      	ldr	r2, [pc, #368]	@ (8008274 <HAL_TIM_ConfigClockSource+0x2f8>)
 8008104:	4293      	cmp	r3, r2
 8008106:	f000 8270 	beq.w	80085ea <HAL_TIM_ConfigClockSource+0x66e>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a5a      	ldr	r2, [pc, #360]	@ (8008278 <HAL_TIM_ConfigClockSource+0x2fc>)
 8008110:	4293      	cmp	r3, r2
 8008112:	f000 826a 	beq.w	80085ea <HAL_TIM_ConfigClockSource+0x66e>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a58      	ldr	r2, [pc, #352]	@ (800827c <HAL_TIM_ConfigClockSource+0x300>)
 800811c:	4293      	cmp	r3, r2
 800811e:	f000 8264 	beq.w	80085ea <HAL_TIM_ConfigClockSource+0x66e>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a56      	ldr	r2, [pc, #344]	@ (8008280 <HAL_TIM_ConfigClockSource+0x304>)
 8008128:	4293      	cmp	r3, r2
 800812a:	f000 825e 	beq.w	80085ea <HAL_TIM_ConfigClockSource+0x66e>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a54      	ldr	r2, [pc, #336]	@ (8008284 <HAL_TIM_ConfigClockSource+0x308>)
 8008134:	4293      	cmp	r3, r2
 8008136:	f000 8258 	beq.w	80085ea <HAL_TIM_ConfigClockSource+0x66e>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a52      	ldr	r2, [pc, #328]	@ (8008288 <HAL_TIM_ConfigClockSource+0x30c>)
 8008140:	4293      	cmp	r3, r2
 8008142:	f000 8252 	beq.w	80085ea <HAL_TIM_ConfigClockSource+0x66e>
 8008146:	f241 515d 	movw	r1, #5469	@ 0x155d
 800814a:	4841      	ldr	r0, [pc, #260]	@ (8008250 <HAL_TIM_ConfigClockSource+0x2d4>)
 800814c:	f7fb fdf2 	bl	8003d34 <assert_failed>
      break;
 8008150:	e24b      	b.n	80085ea <HAL_TIM_ConfigClockSource+0x66e>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4a40      	ldr	r2, [pc, #256]	@ (8008258 <HAL_TIM_ConfigClockSource+0x2dc>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d027      	beq.n	80081ac <HAL_TIM_ConfigClockSource+0x230>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008164:	d022      	beq.n	80081ac <HAL_TIM_ConfigClockSource+0x230>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4a3c      	ldr	r2, [pc, #240]	@ (800825c <HAL_TIM_ConfigClockSource+0x2e0>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d01d      	beq.n	80081ac <HAL_TIM_ConfigClockSource+0x230>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a3a      	ldr	r2, [pc, #232]	@ (8008260 <HAL_TIM_ConfigClockSource+0x2e4>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d018      	beq.n	80081ac <HAL_TIM_ConfigClockSource+0x230>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4a39      	ldr	r2, [pc, #228]	@ (8008264 <HAL_TIM_ConfigClockSource+0x2e8>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d013      	beq.n	80081ac <HAL_TIM_ConfigClockSource+0x230>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a39      	ldr	r2, [pc, #228]	@ (8008270 <HAL_TIM_ConfigClockSource+0x2f4>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d00e      	beq.n	80081ac <HAL_TIM_ConfigClockSource+0x230>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a38      	ldr	r2, [pc, #224]	@ (8008274 <HAL_TIM_ConfigClockSource+0x2f8>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d009      	beq.n	80081ac <HAL_TIM_ConfigClockSource+0x230>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a38      	ldr	r2, [pc, #224]	@ (8008280 <HAL_TIM_ConfigClockSource+0x304>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d004      	beq.n	80081ac <HAL_TIM_ConfigClockSource+0x230>
 80081a2:	f241 5164 	movw	r1, #5476	@ 0x1564
 80081a6:	482a      	ldr	r0, [pc, #168]	@ (8008250 <HAL_TIM_ConfigClockSource+0x2d4>)
 80081a8:	f7fb fdc4 	bl	8003d34 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	689b      	ldr	r3, [r3, #8]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d013      	beq.n	80081dc <HAL_TIM_ConfigClockSource+0x260>
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	689b      	ldr	r3, [r3, #8]
 80081b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081bc:	d00e      	beq.n	80081dc <HAL_TIM_ConfigClockSource+0x260>
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081c6:	d009      	beq.n	80081dc <HAL_TIM_ConfigClockSource+0x260>
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80081d0:	d004      	beq.n	80081dc <HAL_TIM_ConfigClockSource+0x260>
 80081d2:	f241 5167 	movw	r1, #5479	@ 0x1567
 80081d6:	481e      	ldr	r0, [pc, #120]	@ (8008250 <HAL_TIM_ConfigClockSource+0x2d4>)
 80081d8:	f7fb fdac 	bl	8003d34 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80081e4:	d014      	beq.n	8008210 <HAL_TIM_ConfigClockSource+0x294>
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d010      	beq.n	8008210 <HAL_TIM_ConfigClockSource+0x294>
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d00c      	beq.n	8008210 <HAL_TIM_ConfigClockSource+0x294>
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	2b02      	cmp	r3, #2
 80081fc:	d008      	beq.n	8008210 <HAL_TIM_ConfigClockSource+0x294>
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	2b0a      	cmp	r3, #10
 8008204:	d004      	beq.n	8008210 <HAL_TIM_ConfigClockSource+0x294>
 8008206:	f241 5168 	movw	r1, #5480	@ 0x1568
 800820a:	4811      	ldr	r0, [pc, #68]	@ (8008250 <HAL_TIM_ConfigClockSource+0x2d4>)
 800820c:	f7fb fd92 	bl	8003d34 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	68db      	ldr	r3, [r3, #12]
 8008214:	2b0f      	cmp	r3, #15
 8008216:	d904      	bls.n	8008222 <HAL_TIM_ConfigClockSource+0x2a6>
 8008218:	f241 5169 	movw	r1, #5481	@ 0x1569
 800821c:	480c      	ldr	r0, [pc, #48]	@ (8008250 <HAL_TIM_ConfigClockSource+0x2d4>)
 800821e:	f7fb fd89 	bl	8003d34 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008232:	f000 fe03 	bl	8008e3c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	689b      	ldr	r3, [r3, #8]
 800823c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008244:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	68ba      	ldr	r2, [r7, #8]
 800824c:	609a      	str	r2, [r3, #8]
      break;
 800824e:	e1cd      	b.n	80085ec <HAL_TIM_ConfigClockSource+0x670>
 8008250:	08013494 	.word	0x08013494
 8008254:	fffeff88 	.word	0xfffeff88
 8008258:	40010000 	.word	0x40010000
 800825c:	40000400 	.word	0x40000400
 8008260:	40000800 	.word	0x40000800
 8008264:	40000c00 	.word	0x40000c00
 8008268:	40001000 	.word	0x40001000
 800826c:	40001400 	.word	0x40001400
 8008270:	40010400 	.word	0x40010400
 8008274:	40014000 	.word	0x40014000
 8008278:	40014400 	.word	0x40014400
 800827c:	40014800 	.word	0x40014800
 8008280:	40001800 	.word	0x40001800
 8008284:	40001c00 	.word	0x40001c00
 8008288:	40002000 	.word	0x40002000
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a8d      	ldr	r2, [pc, #564]	@ (80084c8 <HAL_TIM_ConfigClockSource+0x54c>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d01d      	beq.n	80082d2 <HAL_TIM_ConfigClockSource+0x356>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800829e:	d018      	beq.n	80082d2 <HAL_TIM_ConfigClockSource+0x356>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a89      	ldr	r2, [pc, #548]	@ (80084cc <HAL_TIM_ConfigClockSource+0x550>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d013      	beq.n	80082d2 <HAL_TIM_ConfigClockSource+0x356>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a88      	ldr	r2, [pc, #544]	@ (80084d0 <HAL_TIM_ConfigClockSource+0x554>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d00e      	beq.n	80082d2 <HAL_TIM_ConfigClockSource+0x356>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a86      	ldr	r2, [pc, #536]	@ (80084d4 <HAL_TIM_ConfigClockSource+0x558>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d009      	beq.n	80082d2 <HAL_TIM_ConfigClockSource+0x356>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4a85      	ldr	r2, [pc, #532]	@ (80084d8 <HAL_TIM_ConfigClockSource+0x55c>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d004      	beq.n	80082d2 <HAL_TIM_ConfigClockSource+0x356>
 80082c8:	f241 517c 	movw	r1, #5500	@ 0x157c
 80082cc:	4883      	ldr	r0, [pc, #524]	@ (80084dc <HAL_TIM_ConfigClockSource+0x560>)
 80082ce:	f7fb fd31 	bl	8003d34 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	689b      	ldr	r3, [r3, #8]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d013      	beq.n	8008302 <HAL_TIM_ConfigClockSource+0x386>
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	689b      	ldr	r3, [r3, #8]
 80082de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082e2:	d00e      	beq.n	8008302 <HAL_TIM_ConfigClockSource+0x386>
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	689b      	ldr	r3, [r3, #8]
 80082e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80082ec:	d009      	beq.n	8008302 <HAL_TIM_ConfigClockSource+0x386>
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	689b      	ldr	r3, [r3, #8]
 80082f2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80082f6:	d004      	beq.n	8008302 <HAL_TIM_ConfigClockSource+0x386>
 80082f8:	f241 517f 	movw	r1, #5503	@ 0x157f
 80082fc:	4877      	ldr	r0, [pc, #476]	@ (80084dc <HAL_TIM_ConfigClockSource+0x560>)
 80082fe:	f7fb fd19 	bl	8003d34 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800830a:	d014      	beq.n	8008336 <HAL_TIM_ConfigClockSource+0x3ba>
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d010      	beq.n	8008336 <HAL_TIM_ConfigClockSource+0x3ba>
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d00c      	beq.n	8008336 <HAL_TIM_ConfigClockSource+0x3ba>
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	2b02      	cmp	r3, #2
 8008322:	d008      	beq.n	8008336 <HAL_TIM_ConfigClockSource+0x3ba>
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	2b0a      	cmp	r3, #10
 800832a:	d004      	beq.n	8008336 <HAL_TIM_ConfigClockSource+0x3ba>
 800832c:	f44f 51ac 	mov.w	r1, #5504	@ 0x1580
 8008330:	486a      	ldr	r0, [pc, #424]	@ (80084dc <HAL_TIM_ConfigClockSource+0x560>)
 8008332:	f7fb fcff 	bl	8003d34 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	68db      	ldr	r3, [r3, #12]
 800833a:	2b0f      	cmp	r3, #15
 800833c:	d904      	bls.n	8008348 <HAL_TIM_ConfigClockSource+0x3cc>
 800833e:	f241 5181 	movw	r1, #5505	@ 0x1581
 8008342:	4866      	ldr	r0, [pc, #408]	@ (80084dc <HAL_TIM_ConfigClockSource+0x560>)
 8008344:	f7fb fcf6 	bl	8003d34 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008358:	f000 fd70 	bl	8008e3c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	689a      	ldr	r2, [r3, #8]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800836a:	609a      	str	r2, [r3, #8]
      break;
 800836c:	e13e      	b.n	80085ec <HAL_TIM_ConfigClockSource+0x670>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a55      	ldr	r2, [pc, #340]	@ (80084c8 <HAL_TIM_ConfigClockSource+0x54c>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d01d      	beq.n	80083b4 <HAL_TIM_ConfigClockSource+0x438>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008380:	d018      	beq.n	80083b4 <HAL_TIM_ConfigClockSource+0x438>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a51      	ldr	r2, [pc, #324]	@ (80084cc <HAL_TIM_ConfigClockSource+0x550>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d013      	beq.n	80083b4 <HAL_TIM_ConfigClockSource+0x438>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a4f      	ldr	r2, [pc, #316]	@ (80084d0 <HAL_TIM_ConfigClockSource+0x554>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d00e      	beq.n	80083b4 <HAL_TIM_ConfigClockSource+0x438>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a4e      	ldr	r2, [pc, #312]	@ (80084d4 <HAL_TIM_ConfigClockSource+0x558>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d009      	beq.n	80083b4 <HAL_TIM_ConfigClockSource+0x438>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a4c      	ldr	r2, [pc, #304]	@ (80084d8 <HAL_TIM_ConfigClockSource+0x55c>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d004      	beq.n	80083b4 <HAL_TIM_ConfigClockSource+0x438>
 80083aa:	f241 5190 	movw	r1, #5520	@ 0x1590
 80083ae:	484b      	ldr	r0, [pc, #300]	@ (80084dc <HAL_TIM_ConfigClockSource+0x560>)
 80083b0:	f7fb fcc0 	bl	8003d34 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80083bc:	d014      	beq.n	80083e8 <HAL_TIM_ConfigClockSource+0x46c>
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d010      	beq.n	80083e8 <HAL_TIM_ConfigClockSource+0x46c>
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	685b      	ldr	r3, [r3, #4]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d00c      	beq.n	80083e8 <HAL_TIM_ConfigClockSource+0x46c>
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	2b02      	cmp	r3, #2
 80083d4:	d008      	beq.n	80083e8 <HAL_TIM_ConfigClockSource+0x46c>
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	2b0a      	cmp	r3, #10
 80083dc:	d004      	beq.n	80083e8 <HAL_TIM_ConfigClockSource+0x46c>
 80083de:	f241 5193 	movw	r1, #5523	@ 0x1593
 80083e2:	483e      	ldr	r0, [pc, #248]	@ (80084dc <HAL_TIM_ConfigClockSource+0x560>)
 80083e4:	f7fb fca6 	bl	8003d34 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	68db      	ldr	r3, [r3, #12]
 80083ec:	2b0f      	cmp	r3, #15
 80083ee:	d904      	bls.n	80083fa <HAL_TIM_ConfigClockSource+0x47e>
 80083f0:	f241 5194 	movw	r1, #5524	@ 0x1594
 80083f4:	4839      	ldr	r0, [pc, #228]	@ (80084dc <HAL_TIM_ConfigClockSource+0x560>)
 80083f6:	f7fb fc9d 	bl	8003d34 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008406:	461a      	mov	r2, r3
 8008408:	f000 fc9e 	bl	8008d48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	2150      	movs	r1, #80	@ 0x50
 8008412:	4618      	mov	r0, r3
 8008414:	f000 fcf7 	bl	8008e06 <TIM_ITRx_SetConfig>
      break;
 8008418:	e0e8      	b.n	80085ec <HAL_TIM_ConfigClockSource+0x670>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4a2a      	ldr	r2, [pc, #168]	@ (80084c8 <HAL_TIM_ConfigClockSource+0x54c>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d01d      	beq.n	8008460 <HAL_TIM_ConfigClockSource+0x4e4>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800842c:	d018      	beq.n	8008460 <HAL_TIM_ConfigClockSource+0x4e4>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4a26      	ldr	r2, [pc, #152]	@ (80084cc <HAL_TIM_ConfigClockSource+0x550>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d013      	beq.n	8008460 <HAL_TIM_ConfigClockSource+0x4e4>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a24      	ldr	r2, [pc, #144]	@ (80084d0 <HAL_TIM_ConfigClockSource+0x554>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d00e      	beq.n	8008460 <HAL_TIM_ConfigClockSource+0x4e4>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4a23      	ldr	r2, [pc, #140]	@ (80084d4 <HAL_TIM_ConfigClockSource+0x558>)
 8008448:	4293      	cmp	r3, r2
 800844a:	d009      	beq.n	8008460 <HAL_TIM_ConfigClockSource+0x4e4>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4a21      	ldr	r2, [pc, #132]	@ (80084d8 <HAL_TIM_ConfigClockSource+0x55c>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d004      	beq.n	8008460 <HAL_TIM_ConfigClockSource+0x4e4>
 8008456:	f44f 51ad 	mov.w	r1, #5536	@ 0x15a0
 800845a:	4820      	ldr	r0, [pc, #128]	@ (80084dc <HAL_TIM_ConfigClockSource+0x560>)
 800845c:	f7fb fc6a 	bl	8003d34 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008468:	d014      	beq.n	8008494 <HAL_TIM_ConfigClockSource+0x518>
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d010      	beq.n	8008494 <HAL_TIM_ConfigClockSource+0x518>
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d00c      	beq.n	8008494 <HAL_TIM_ConfigClockSource+0x518>
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	2b02      	cmp	r3, #2
 8008480:	d008      	beq.n	8008494 <HAL_TIM_ConfigClockSource+0x518>
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	2b0a      	cmp	r3, #10
 8008488:	d004      	beq.n	8008494 <HAL_TIM_ConfigClockSource+0x518>
 800848a:	f241 51a3 	movw	r1, #5539	@ 0x15a3
 800848e:	4813      	ldr	r0, [pc, #76]	@ (80084dc <HAL_TIM_ConfigClockSource+0x560>)
 8008490:	f7fb fc50 	bl	8003d34 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	68db      	ldr	r3, [r3, #12]
 8008498:	2b0f      	cmp	r3, #15
 800849a:	d904      	bls.n	80084a6 <HAL_TIM_ConfigClockSource+0x52a>
 800849c:	f241 51a4 	movw	r1, #5540	@ 0x15a4
 80084a0:	480e      	ldr	r0, [pc, #56]	@ (80084dc <HAL_TIM_ConfigClockSource+0x560>)
 80084a2:	f7fb fc47 	bl	8003d34 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80084b2:	461a      	mov	r2, r3
 80084b4:	f000 fc77 	bl	8008da6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	2160      	movs	r1, #96	@ 0x60
 80084be:	4618      	mov	r0, r3
 80084c0:	f000 fca1 	bl	8008e06 <TIM_ITRx_SetConfig>
      break;
 80084c4:	e092      	b.n	80085ec <HAL_TIM_ConfigClockSource+0x670>
 80084c6:	bf00      	nop
 80084c8:	40010000 	.word	0x40010000
 80084cc:	40000400 	.word	0x40000400
 80084d0:	40000800 	.word	0x40000800
 80084d4:	40000c00 	.word	0x40000c00
 80084d8:	40010400 	.word	0x40010400
 80084dc:	08013494 	.word	0x08013494
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a48      	ldr	r2, [pc, #288]	@ (8008608 <HAL_TIM_ConfigClockSource+0x68c>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d01d      	beq.n	8008526 <HAL_TIM_ConfigClockSource+0x5aa>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084f2:	d018      	beq.n	8008526 <HAL_TIM_ConfigClockSource+0x5aa>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a44      	ldr	r2, [pc, #272]	@ (800860c <HAL_TIM_ConfigClockSource+0x690>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d013      	beq.n	8008526 <HAL_TIM_ConfigClockSource+0x5aa>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4a43      	ldr	r2, [pc, #268]	@ (8008610 <HAL_TIM_ConfigClockSource+0x694>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d00e      	beq.n	8008526 <HAL_TIM_ConfigClockSource+0x5aa>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a41      	ldr	r2, [pc, #260]	@ (8008614 <HAL_TIM_ConfigClockSource+0x698>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d009      	beq.n	8008526 <HAL_TIM_ConfigClockSource+0x5aa>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4a40      	ldr	r2, [pc, #256]	@ (8008618 <HAL_TIM_ConfigClockSource+0x69c>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d004      	beq.n	8008526 <HAL_TIM_ConfigClockSource+0x5aa>
 800851c:	f241 51b0 	movw	r1, #5552	@ 0x15b0
 8008520:	483e      	ldr	r0, [pc, #248]	@ (800861c <HAL_TIM_ConfigClockSource+0x6a0>)
 8008522:	f7fb fc07 	bl	8003d34 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800852e:	d014      	beq.n	800855a <HAL_TIM_ConfigClockSource+0x5de>
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d010      	beq.n	800855a <HAL_TIM_ConfigClockSource+0x5de>
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	685b      	ldr	r3, [r3, #4]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d00c      	beq.n	800855a <HAL_TIM_ConfigClockSource+0x5de>
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	685b      	ldr	r3, [r3, #4]
 8008544:	2b02      	cmp	r3, #2
 8008546:	d008      	beq.n	800855a <HAL_TIM_ConfigClockSource+0x5de>
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	2b0a      	cmp	r3, #10
 800854e:	d004      	beq.n	800855a <HAL_TIM_ConfigClockSource+0x5de>
 8008550:	f241 51b3 	movw	r1, #5555	@ 0x15b3
 8008554:	4831      	ldr	r0, [pc, #196]	@ (800861c <HAL_TIM_ConfigClockSource+0x6a0>)
 8008556:	f7fb fbed 	bl	8003d34 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	68db      	ldr	r3, [r3, #12]
 800855e:	2b0f      	cmp	r3, #15
 8008560:	d904      	bls.n	800856c <HAL_TIM_ConfigClockSource+0x5f0>
 8008562:	f241 51b4 	movw	r1, #5556	@ 0x15b4
 8008566:	482d      	ldr	r0, [pc, #180]	@ (800861c <HAL_TIM_ConfigClockSource+0x6a0>)
 8008568:	f7fb fbe4 	bl	8003d34 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008578:	461a      	mov	r2, r3
 800857a:	f000 fbe5 	bl	8008d48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	2140      	movs	r1, #64	@ 0x40
 8008584:	4618      	mov	r0, r3
 8008586:	f000 fc3e 	bl	8008e06 <TIM_ITRx_SetConfig>
      break;
 800858a:	e02f      	b.n	80085ec <HAL_TIM_ConfigClockSource+0x670>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a1d      	ldr	r2, [pc, #116]	@ (8008608 <HAL_TIM_ConfigClockSource+0x68c>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d01d      	beq.n	80085d2 <HAL_TIM_ConfigClockSource+0x656>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800859e:	d018      	beq.n	80085d2 <HAL_TIM_ConfigClockSource+0x656>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a19      	ldr	r2, [pc, #100]	@ (800860c <HAL_TIM_ConfigClockSource+0x690>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d013      	beq.n	80085d2 <HAL_TIM_ConfigClockSource+0x656>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4a18      	ldr	r2, [pc, #96]	@ (8008610 <HAL_TIM_ConfigClockSource+0x694>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d00e      	beq.n	80085d2 <HAL_TIM_ConfigClockSource+0x656>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a16      	ldr	r2, [pc, #88]	@ (8008614 <HAL_TIM_ConfigClockSource+0x698>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d009      	beq.n	80085d2 <HAL_TIM_ConfigClockSource+0x656>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4a15      	ldr	r2, [pc, #84]	@ (8008618 <HAL_TIM_ConfigClockSource+0x69c>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d004      	beq.n	80085d2 <HAL_TIM_ConfigClockSource+0x656>
 80085c8:	f241 51c3 	movw	r1, #5571	@ 0x15c3
 80085cc:	4813      	ldr	r0, [pc, #76]	@ (800861c <HAL_TIM_ConfigClockSource+0x6a0>)
 80085ce:	f7fb fbb1 	bl	8003d34 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681a      	ldr	r2, [r3, #0]
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4619      	mov	r1, r3
 80085dc:	4610      	mov	r0, r2
 80085de:	f000 fc12 	bl	8008e06 <TIM_ITRx_SetConfig>
      break;
 80085e2:	e003      	b.n	80085ec <HAL_TIM_ConfigClockSource+0x670>
    }

    default:
      status = HAL_ERROR;
 80085e4:	2301      	movs	r3, #1
 80085e6:	73fb      	strb	r3, [r7, #15]
      break;
 80085e8:	e000      	b.n	80085ec <HAL_TIM_ConfigClockSource+0x670>
      break;
 80085ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2201      	movs	r2, #1
 80085f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2200      	movs	r2, #0
 80085f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80085fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3710      	adds	r7, #16
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}
 8008606:	bf00      	nop
 8008608:	40010000 	.word	0x40010000
 800860c:	40000400 	.word	0x40000400
 8008610:	40000800 	.word	0x40000800
 8008614:	40000c00 	.word	0x40000c00
 8008618:	40010400 	.word	0x40010400
 800861c:	08013494 	.word	0x08013494

08008620 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008620:	b480      	push	{r7}
 8008622:	b085      	sub	sp, #20
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	4a46      	ldr	r2, [pc, #280]	@ (800874c <TIM_Base_SetConfig+0x12c>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d013      	beq.n	8008660 <TIM_Base_SetConfig+0x40>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800863e:	d00f      	beq.n	8008660 <TIM_Base_SetConfig+0x40>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	4a43      	ldr	r2, [pc, #268]	@ (8008750 <TIM_Base_SetConfig+0x130>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d00b      	beq.n	8008660 <TIM_Base_SetConfig+0x40>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	4a42      	ldr	r2, [pc, #264]	@ (8008754 <TIM_Base_SetConfig+0x134>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d007      	beq.n	8008660 <TIM_Base_SetConfig+0x40>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	4a41      	ldr	r2, [pc, #260]	@ (8008758 <TIM_Base_SetConfig+0x138>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d003      	beq.n	8008660 <TIM_Base_SetConfig+0x40>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	4a40      	ldr	r2, [pc, #256]	@ (800875c <TIM_Base_SetConfig+0x13c>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d108      	bne.n	8008672 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008666:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	68fa      	ldr	r2, [r7, #12]
 800866e:	4313      	orrs	r3, r2
 8008670:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	4a35      	ldr	r2, [pc, #212]	@ (800874c <TIM_Base_SetConfig+0x12c>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d02b      	beq.n	80086d2 <TIM_Base_SetConfig+0xb2>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008680:	d027      	beq.n	80086d2 <TIM_Base_SetConfig+0xb2>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	4a32      	ldr	r2, [pc, #200]	@ (8008750 <TIM_Base_SetConfig+0x130>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d023      	beq.n	80086d2 <TIM_Base_SetConfig+0xb2>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	4a31      	ldr	r2, [pc, #196]	@ (8008754 <TIM_Base_SetConfig+0x134>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d01f      	beq.n	80086d2 <TIM_Base_SetConfig+0xb2>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	4a30      	ldr	r2, [pc, #192]	@ (8008758 <TIM_Base_SetConfig+0x138>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d01b      	beq.n	80086d2 <TIM_Base_SetConfig+0xb2>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	4a2f      	ldr	r2, [pc, #188]	@ (800875c <TIM_Base_SetConfig+0x13c>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d017      	beq.n	80086d2 <TIM_Base_SetConfig+0xb2>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	4a2e      	ldr	r2, [pc, #184]	@ (8008760 <TIM_Base_SetConfig+0x140>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d013      	beq.n	80086d2 <TIM_Base_SetConfig+0xb2>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	4a2d      	ldr	r2, [pc, #180]	@ (8008764 <TIM_Base_SetConfig+0x144>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d00f      	beq.n	80086d2 <TIM_Base_SetConfig+0xb2>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	4a2c      	ldr	r2, [pc, #176]	@ (8008768 <TIM_Base_SetConfig+0x148>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d00b      	beq.n	80086d2 <TIM_Base_SetConfig+0xb2>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	4a2b      	ldr	r2, [pc, #172]	@ (800876c <TIM_Base_SetConfig+0x14c>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d007      	beq.n	80086d2 <TIM_Base_SetConfig+0xb2>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	4a2a      	ldr	r2, [pc, #168]	@ (8008770 <TIM_Base_SetConfig+0x150>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d003      	beq.n	80086d2 <TIM_Base_SetConfig+0xb2>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	4a29      	ldr	r2, [pc, #164]	@ (8008774 <TIM_Base_SetConfig+0x154>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d108      	bne.n	80086e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80086d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	68db      	ldr	r3, [r3, #12]
 80086de:	68fa      	ldr	r2, [r7, #12]
 80086e0:	4313      	orrs	r3, r2
 80086e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	695b      	ldr	r3, [r3, #20]
 80086ee:	4313      	orrs	r3, r2
 80086f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	68fa      	ldr	r2, [r7, #12]
 80086f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	689a      	ldr	r2, [r3, #8]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	681a      	ldr	r2, [r3, #0]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	4a10      	ldr	r2, [pc, #64]	@ (800874c <TIM_Base_SetConfig+0x12c>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d003      	beq.n	8008718 <TIM_Base_SetConfig+0xf8>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	4a12      	ldr	r2, [pc, #72]	@ (800875c <TIM_Base_SetConfig+0x13c>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d103      	bne.n	8008720 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	691a      	ldr	r2, [r3, #16]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2201      	movs	r2, #1
 8008724:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	691b      	ldr	r3, [r3, #16]
 800872a:	f003 0301 	and.w	r3, r3, #1
 800872e:	2b01      	cmp	r3, #1
 8008730:	d105      	bne.n	800873e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	691b      	ldr	r3, [r3, #16]
 8008736:	f023 0201 	bic.w	r2, r3, #1
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	611a      	str	r2, [r3, #16]
  }
}
 800873e:	bf00      	nop
 8008740:	3714      	adds	r7, #20
 8008742:	46bd      	mov	sp, r7
 8008744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008748:	4770      	bx	lr
 800874a:	bf00      	nop
 800874c:	40010000 	.word	0x40010000
 8008750:	40000400 	.word	0x40000400
 8008754:	40000800 	.word	0x40000800
 8008758:	40000c00 	.word	0x40000c00
 800875c:	40010400 	.word	0x40010400
 8008760:	40014000 	.word	0x40014000
 8008764:	40014400 	.word	0x40014400
 8008768:	40014800 	.word	0x40014800
 800876c:	40001800 	.word	0x40001800
 8008770:	40001c00 	.word	0x40001c00
 8008774:	40002000 	.word	0x40002000

08008778 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b086      	sub	sp, #24
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
 8008780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6a1b      	ldr	r3, [r3, #32]
 8008786:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6a1b      	ldr	r3, [r3, #32]
 800878c:	f023 0201 	bic.w	r2, r3, #1
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	699b      	ldr	r3, [r3, #24]
 800879e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80087a0:	68fa      	ldr	r2, [r7, #12]
 80087a2:	4b3f      	ldr	r3, [pc, #252]	@ (80088a0 <TIM_OC1_SetConfig+0x128>)
 80087a4:	4013      	ands	r3, r2
 80087a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f023 0303 	bic.w	r3, r3, #3
 80087ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	68fa      	ldr	r2, [r7, #12]
 80087b6:	4313      	orrs	r3, r2
 80087b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	f023 0302 	bic.w	r3, r3, #2
 80087c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	689b      	ldr	r3, [r3, #8]
 80087c6:	697a      	ldr	r2, [r7, #20]
 80087c8:	4313      	orrs	r3, r2
 80087ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	4a35      	ldr	r2, [pc, #212]	@ (80088a4 <TIM_OC1_SetConfig+0x12c>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d003      	beq.n	80087dc <TIM_OC1_SetConfig+0x64>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	4a34      	ldr	r2, [pc, #208]	@ (80088a8 <TIM_OC1_SetConfig+0x130>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d119      	bne.n	8008810 <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	68db      	ldr	r3, [r3, #12]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d008      	beq.n	80087f6 <TIM_OC1_SetConfig+0x7e>
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	68db      	ldr	r3, [r3, #12]
 80087e8:	2b08      	cmp	r3, #8
 80087ea:	d004      	beq.n	80087f6 <TIM_OC1_SetConfig+0x7e>
 80087ec:	f641 3169 	movw	r1, #7017	@ 0x1b69
 80087f0:	482e      	ldr	r0, [pc, #184]	@ (80088ac <TIM_OC1_SetConfig+0x134>)
 80087f2:	f7fb fa9f 	bl	8003d34 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	f023 0308 	bic.w	r3, r3, #8
 80087fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	68db      	ldr	r3, [r3, #12]
 8008802:	697a      	ldr	r2, [r7, #20]
 8008804:	4313      	orrs	r3, r2
 8008806:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	f023 0304 	bic.w	r3, r3, #4
 800880e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	4a24      	ldr	r2, [pc, #144]	@ (80088a4 <TIM_OC1_SetConfig+0x12c>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d003      	beq.n	8008820 <TIM_OC1_SetConfig+0xa8>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	4a23      	ldr	r2, [pc, #140]	@ (80088a8 <TIM_OC1_SetConfig+0x130>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d12d      	bne.n	800887c <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	699b      	ldr	r3, [r3, #24]
 8008824:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008828:	d008      	beq.n	800883c <TIM_OC1_SetConfig+0xc4>
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	699b      	ldr	r3, [r3, #24]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d004      	beq.n	800883c <TIM_OC1_SetConfig+0xc4>
 8008832:	f641 3176 	movw	r1, #7030	@ 0x1b76
 8008836:	481d      	ldr	r0, [pc, #116]	@ (80088ac <TIM_OC1_SetConfig+0x134>)
 8008838:	f7fb fa7c 	bl	8003d34 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	695b      	ldr	r3, [r3, #20]
 8008840:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008844:	d008      	beq.n	8008858 <TIM_OC1_SetConfig+0xe0>
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	695b      	ldr	r3, [r3, #20]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d004      	beq.n	8008858 <TIM_OC1_SetConfig+0xe0>
 800884e:	f641 3177 	movw	r1, #7031	@ 0x1b77
 8008852:	4816      	ldr	r0, [pc, #88]	@ (80088ac <TIM_OC1_SetConfig+0x134>)
 8008854:	f7fb fa6e 	bl	8003d34 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800885e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008866:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	695b      	ldr	r3, [r3, #20]
 800886c:	693a      	ldr	r2, [r7, #16]
 800886e:	4313      	orrs	r3, r2
 8008870:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	699b      	ldr	r3, [r3, #24]
 8008876:	693a      	ldr	r2, [r7, #16]
 8008878:	4313      	orrs	r3, r2
 800887a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	693a      	ldr	r2, [r7, #16]
 8008880:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	68fa      	ldr	r2, [r7, #12]
 8008886:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	685a      	ldr	r2, [r3, #4]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	697a      	ldr	r2, [r7, #20]
 8008894:	621a      	str	r2, [r3, #32]
}
 8008896:	bf00      	nop
 8008898:	3718      	adds	r7, #24
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}
 800889e:	bf00      	nop
 80088a0:	fffeff8f 	.word	0xfffeff8f
 80088a4:	40010000 	.word	0x40010000
 80088a8:	40010400 	.word	0x40010400
 80088ac:	08013494 	.word	0x08013494

080088b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b086      	sub	sp, #24
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6a1b      	ldr	r3, [r3, #32]
 80088be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6a1b      	ldr	r3, [r3, #32]
 80088c4:	f023 0210 	bic.w	r2, r3, #16
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	699b      	ldr	r3, [r3, #24]
 80088d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80088d8:	68fa      	ldr	r2, [r7, #12]
 80088da:	4b41      	ldr	r3, [pc, #260]	@ (80089e0 <TIM_OC2_SetConfig+0x130>)
 80088dc:	4013      	ands	r3, r2
 80088de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80088e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	021b      	lsls	r3, r3, #8
 80088ee:	68fa      	ldr	r2, [r7, #12]
 80088f0:	4313      	orrs	r3, r2
 80088f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	f023 0320 	bic.w	r3, r3, #32
 80088fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	689b      	ldr	r3, [r3, #8]
 8008900:	011b      	lsls	r3, r3, #4
 8008902:	697a      	ldr	r2, [r7, #20]
 8008904:	4313      	orrs	r3, r2
 8008906:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	4a36      	ldr	r2, [pc, #216]	@ (80089e4 <TIM_OC2_SetConfig+0x134>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d003      	beq.n	8008918 <TIM_OC2_SetConfig+0x68>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	4a35      	ldr	r2, [pc, #212]	@ (80089e8 <TIM_OC2_SetConfig+0x138>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d11a      	bne.n	800894e <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	68db      	ldr	r3, [r3, #12]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d008      	beq.n	8008932 <TIM_OC2_SetConfig+0x82>
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	68db      	ldr	r3, [r3, #12]
 8008924:	2b08      	cmp	r3, #8
 8008926:	d004      	beq.n	8008932 <TIM_OC2_SetConfig+0x82>
 8008928:	f641 31b5 	movw	r1, #7093	@ 0x1bb5
 800892c:	482f      	ldr	r0, [pc, #188]	@ (80089ec <TIM_OC2_SetConfig+0x13c>)
 800892e:	f7fb fa01 	bl	8003d34 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008938:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	68db      	ldr	r3, [r3, #12]
 800893e:	011b      	lsls	r3, r3, #4
 8008940:	697a      	ldr	r2, [r7, #20]
 8008942:	4313      	orrs	r3, r2
 8008944:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800894c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	4a24      	ldr	r2, [pc, #144]	@ (80089e4 <TIM_OC2_SetConfig+0x134>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d003      	beq.n	800895e <TIM_OC2_SetConfig+0xae>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	4a23      	ldr	r2, [pc, #140]	@ (80089e8 <TIM_OC2_SetConfig+0x138>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d12f      	bne.n	80089be <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	699b      	ldr	r3, [r3, #24]
 8008962:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008966:	d008      	beq.n	800897a <TIM_OC2_SetConfig+0xca>
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	699b      	ldr	r3, [r3, #24]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d004      	beq.n	800897a <TIM_OC2_SetConfig+0xca>
 8008970:	f641 31c2 	movw	r1, #7106	@ 0x1bc2
 8008974:	481d      	ldr	r0, [pc, #116]	@ (80089ec <TIM_OC2_SetConfig+0x13c>)
 8008976:	f7fb f9dd 	bl	8003d34 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	695b      	ldr	r3, [r3, #20]
 800897e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008982:	d008      	beq.n	8008996 <TIM_OC2_SetConfig+0xe6>
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	695b      	ldr	r3, [r3, #20]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d004      	beq.n	8008996 <TIM_OC2_SetConfig+0xe6>
 800898c:	f641 31c3 	movw	r1, #7107	@ 0x1bc3
 8008990:	4816      	ldr	r0, [pc, #88]	@ (80089ec <TIM_OC2_SetConfig+0x13c>)
 8008992:	f7fb f9cf 	bl	8003d34 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800899c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80089a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	695b      	ldr	r3, [r3, #20]
 80089aa:	009b      	lsls	r3, r3, #2
 80089ac:	693a      	ldr	r2, [r7, #16]
 80089ae:	4313      	orrs	r3, r2
 80089b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	699b      	ldr	r3, [r3, #24]
 80089b6:	009b      	lsls	r3, r3, #2
 80089b8:	693a      	ldr	r2, [r7, #16]
 80089ba:	4313      	orrs	r3, r2
 80089bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	693a      	ldr	r2, [r7, #16]
 80089c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	68fa      	ldr	r2, [r7, #12]
 80089c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	685a      	ldr	r2, [r3, #4]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	697a      	ldr	r2, [r7, #20]
 80089d6:	621a      	str	r2, [r3, #32]
}
 80089d8:	bf00      	nop
 80089da:	3718      	adds	r7, #24
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}
 80089e0:	feff8fff 	.word	0xfeff8fff
 80089e4:	40010000 	.word	0x40010000
 80089e8:	40010400 	.word	0x40010400
 80089ec:	08013494 	.word	0x08013494

080089f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b086      	sub	sp, #24
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6a1b      	ldr	r3, [r3, #32]
 80089fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6a1b      	ldr	r3, [r3, #32]
 8008a04:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	69db      	ldr	r3, [r3, #28]
 8008a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008a18:	68fa      	ldr	r2, [r7, #12]
 8008a1a:	4b41      	ldr	r3, [pc, #260]	@ (8008b20 <TIM_OC3_SetConfig+0x130>)
 8008a1c:	4013      	ands	r3, r2
 8008a1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f023 0303 	bic.w	r3, r3, #3
 8008a26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	68fa      	ldr	r2, [r7, #12]
 8008a2e:	4313      	orrs	r3, r2
 8008a30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008a38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	689b      	ldr	r3, [r3, #8]
 8008a3e:	021b      	lsls	r3, r3, #8
 8008a40:	697a      	ldr	r2, [r7, #20]
 8008a42:	4313      	orrs	r3, r2
 8008a44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	4a36      	ldr	r2, [pc, #216]	@ (8008b24 <TIM_OC3_SetConfig+0x134>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d003      	beq.n	8008a56 <TIM_OC3_SetConfig+0x66>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	4a35      	ldr	r2, [pc, #212]	@ (8008b28 <TIM_OC3_SetConfig+0x138>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d11a      	bne.n	8008a8c <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	68db      	ldr	r3, [r3, #12]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d008      	beq.n	8008a70 <TIM_OC3_SetConfig+0x80>
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	68db      	ldr	r3, [r3, #12]
 8008a62:	2b08      	cmp	r3, #8
 8008a64:	d004      	beq.n	8008a70 <TIM_OC3_SetConfig+0x80>
 8008a66:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 8008a6a:	4830      	ldr	r0, [pc, #192]	@ (8008b2c <TIM_OC3_SetConfig+0x13c>)
 8008a6c:	f7fb f962 	bl	8003d34 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008a76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	68db      	ldr	r3, [r3, #12]
 8008a7c:	021b      	lsls	r3, r3, #8
 8008a7e:	697a      	ldr	r2, [r7, #20]
 8008a80:	4313      	orrs	r3, r2
 8008a82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008a8a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	4a25      	ldr	r2, [pc, #148]	@ (8008b24 <TIM_OC3_SetConfig+0x134>)
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d003      	beq.n	8008a9c <TIM_OC3_SetConfig+0xac>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	4a24      	ldr	r2, [pc, #144]	@ (8008b28 <TIM_OC3_SetConfig+0x138>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d12f      	bne.n	8008afc <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	699b      	ldr	r3, [r3, #24]
 8008aa0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008aa4:	d008      	beq.n	8008ab8 <TIM_OC3_SetConfig+0xc8>
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	699b      	ldr	r3, [r3, #24]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d004      	beq.n	8008ab8 <TIM_OC3_SetConfig+0xc8>
 8008aae:	f641 410d 	movw	r1, #7181	@ 0x1c0d
 8008ab2:	481e      	ldr	r0, [pc, #120]	@ (8008b2c <TIM_OC3_SetConfig+0x13c>)
 8008ab4:	f7fb f93e 	bl	8003d34 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	695b      	ldr	r3, [r3, #20]
 8008abc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ac0:	d008      	beq.n	8008ad4 <TIM_OC3_SetConfig+0xe4>
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	695b      	ldr	r3, [r3, #20]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d004      	beq.n	8008ad4 <TIM_OC3_SetConfig+0xe4>
 8008aca:	f641 410e 	movw	r1, #7182	@ 0x1c0e
 8008ace:	4817      	ldr	r0, [pc, #92]	@ (8008b2c <TIM_OC3_SetConfig+0x13c>)
 8008ad0:	f7fb f930 	bl	8003d34 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008ada:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008ae2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	695b      	ldr	r3, [r3, #20]
 8008ae8:	011b      	lsls	r3, r3, #4
 8008aea:	693a      	ldr	r2, [r7, #16]
 8008aec:	4313      	orrs	r3, r2
 8008aee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	699b      	ldr	r3, [r3, #24]
 8008af4:	011b      	lsls	r3, r3, #4
 8008af6:	693a      	ldr	r2, [r7, #16]
 8008af8:	4313      	orrs	r3, r2
 8008afa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	693a      	ldr	r2, [r7, #16]
 8008b00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	68fa      	ldr	r2, [r7, #12]
 8008b06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	685a      	ldr	r2, [r3, #4]
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	697a      	ldr	r2, [r7, #20]
 8008b14:	621a      	str	r2, [r3, #32]
}
 8008b16:	bf00      	nop
 8008b18:	3718      	adds	r7, #24
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
 8008b1e:	bf00      	nop
 8008b20:	fffeff8f 	.word	0xfffeff8f
 8008b24:	40010000 	.word	0x40010000
 8008b28:	40010400 	.word	0x40010400
 8008b2c:	08013494 	.word	0x08013494

08008b30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b086      	sub	sp, #24
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6a1b      	ldr	r3, [r3, #32]
 8008b3e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6a1b      	ldr	r3, [r3, #32]
 8008b44:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	69db      	ldr	r3, [r3, #28]
 8008b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008b58:	68fa      	ldr	r2, [r7, #12]
 8008b5a:	4b24      	ldr	r3, [pc, #144]	@ (8008bec <TIM_OC4_SetConfig+0xbc>)
 8008b5c:	4013      	ands	r3, r2
 8008b5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	021b      	lsls	r3, r3, #8
 8008b6e:	68fa      	ldr	r2, [r7, #12]
 8008b70:	4313      	orrs	r3, r2
 8008b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008b7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	689b      	ldr	r3, [r3, #8]
 8008b80:	031b      	lsls	r3, r3, #12
 8008b82:	693a      	ldr	r2, [r7, #16]
 8008b84:	4313      	orrs	r3, r2
 8008b86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	4a19      	ldr	r2, [pc, #100]	@ (8008bf0 <TIM_OC4_SetConfig+0xc0>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d003      	beq.n	8008b98 <TIM_OC4_SetConfig+0x68>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	4a18      	ldr	r2, [pc, #96]	@ (8008bf4 <TIM_OC4_SetConfig+0xc4>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d117      	bne.n	8008bc8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	695b      	ldr	r3, [r3, #20]
 8008b9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ba0:	d008      	beq.n	8008bb4 <TIM_OC4_SetConfig+0x84>
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	695b      	ldr	r3, [r3, #20]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d004      	beq.n	8008bb4 <TIM_OC4_SetConfig+0x84>
 8008baa:	f641 414d 	movw	r1, #7245	@ 0x1c4d
 8008bae:	4812      	ldr	r0, [pc, #72]	@ (8008bf8 <TIM_OC4_SetConfig+0xc8>)
 8008bb0:	f7fb f8c0 	bl	8003d34 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008bba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	695b      	ldr	r3, [r3, #20]
 8008bc0:	019b      	lsls	r3, r3, #6
 8008bc2:	697a      	ldr	r2, [r7, #20]
 8008bc4:	4313      	orrs	r3, r2
 8008bc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	697a      	ldr	r2, [r7, #20]
 8008bcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	68fa      	ldr	r2, [r7, #12]
 8008bd2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	685a      	ldr	r2, [r3, #4]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	693a      	ldr	r2, [r7, #16]
 8008be0:	621a      	str	r2, [r3, #32]
}
 8008be2:	bf00      	nop
 8008be4:	3718      	adds	r7, #24
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}
 8008bea:	bf00      	nop
 8008bec:	feff8fff 	.word	0xfeff8fff
 8008bf0:	40010000 	.word	0x40010000
 8008bf4:	40010400 	.word	0x40010400
 8008bf8:	08013494 	.word	0x08013494

08008bfc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b087      	sub	sp, #28
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6a1b      	ldr	r3, [r3, #32]
 8008c0a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6a1b      	ldr	r3, [r3, #32]
 8008c10:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	685b      	ldr	r3, [r3, #4]
 8008c1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008c24:	68fa      	ldr	r2, [r7, #12]
 8008c26:	4b1b      	ldr	r3, [pc, #108]	@ (8008c94 <TIM_OC5_SetConfig+0x98>)
 8008c28:	4013      	ands	r3, r2
 8008c2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	68fa      	ldr	r2, [r7, #12]
 8008c32:	4313      	orrs	r3, r2
 8008c34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008c3c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	689b      	ldr	r3, [r3, #8]
 8008c42:	041b      	lsls	r3, r3, #16
 8008c44:	693a      	ldr	r2, [r7, #16]
 8008c46:	4313      	orrs	r3, r2
 8008c48:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	4a12      	ldr	r2, [pc, #72]	@ (8008c98 <TIM_OC5_SetConfig+0x9c>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d003      	beq.n	8008c5a <TIM_OC5_SetConfig+0x5e>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	4a11      	ldr	r2, [pc, #68]	@ (8008c9c <TIM_OC5_SetConfig+0xa0>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d109      	bne.n	8008c6e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008c60:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	695b      	ldr	r3, [r3, #20]
 8008c66:	021b      	lsls	r3, r3, #8
 8008c68:	697a      	ldr	r2, [r7, #20]
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	697a      	ldr	r2, [r7, #20]
 8008c72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	68fa      	ldr	r2, [r7, #12]
 8008c78:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	685a      	ldr	r2, [r3, #4]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	693a      	ldr	r2, [r7, #16]
 8008c86:	621a      	str	r2, [r3, #32]
}
 8008c88:	bf00      	nop
 8008c8a:	371c      	adds	r7, #28
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr
 8008c94:	fffeff8f 	.word	0xfffeff8f
 8008c98:	40010000 	.word	0x40010000
 8008c9c:	40010400 	.word	0x40010400

08008ca0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b087      	sub	sp, #28
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6a1b      	ldr	r3, [r3, #32]
 8008cae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6a1b      	ldr	r3, [r3, #32]
 8008cb4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	685b      	ldr	r3, [r3, #4]
 8008cc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008cc8:	68fa      	ldr	r2, [r7, #12]
 8008cca:	4b1c      	ldr	r3, [pc, #112]	@ (8008d3c <TIM_OC6_SetConfig+0x9c>)
 8008ccc:	4013      	ands	r3, r2
 8008cce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	021b      	lsls	r3, r3, #8
 8008cd6:	68fa      	ldr	r2, [r7, #12]
 8008cd8:	4313      	orrs	r3, r2
 8008cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008ce2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	689b      	ldr	r3, [r3, #8]
 8008ce8:	051b      	lsls	r3, r3, #20
 8008cea:	693a      	ldr	r2, [r7, #16]
 8008cec:	4313      	orrs	r3, r2
 8008cee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	4a13      	ldr	r2, [pc, #76]	@ (8008d40 <TIM_OC6_SetConfig+0xa0>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d003      	beq.n	8008d00 <TIM_OC6_SetConfig+0x60>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	4a12      	ldr	r2, [pc, #72]	@ (8008d44 <TIM_OC6_SetConfig+0xa4>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d109      	bne.n	8008d14 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008d06:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	695b      	ldr	r3, [r3, #20]
 8008d0c:	029b      	lsls	r3, r3, #10
 8008d0e:	697a      	ldr	r2, [r7, #20]
 8008d10:	4313      	orrs	r3, r2
 8008d12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	697a      	ldr	r2, [r7, #20]
 8008d18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	68fa      	ldr	r2, [r7, #12]
 8008d1e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	685a      	ldr	r2, [r3, #4]
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	693a      	ldr	r2, [r7, #16]
 8008d2c:	621a      	str	r2, [r3, #32]
}
 8008d2e:	bf00      	nop
 8008d30:	371c      	adds	r7, #28
 8008d32:	46bd      	mov	sp, r7
 8008d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d38:	4770      	bx	lr
 8008d3a:	bf00      	nop
 8008d3c:	feff8fff 	.word	0xfeff8fff
 8008d40:	40010000 	.word	0x40010000
 8008d44:	40010400 	.word	0x40010400

08008d48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b087      	sub	sp, #28
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	60f8      	str	r0, [r7, #12]
 8008d50:	60b9      	str	r1, [r7, #8]
 8008d52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	6a1b      	ldr	r3, [r3, #32]
 8008d58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	6a1b      	ldr	r3, [r3, #32]
 8008d5e:	f023 0201 	bic.w	r2, r3, #1
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	699b      	ldr	r3, [r3, #24]
 8008d6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008d72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	011b      	lsls	r3, r3, #4
 8008d78:	693a      	ldr	r2, [r7, #16]
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	f023 030a 	bic.w	r3, r3, #10
 8008d84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008d86:	697a      	ldr	r2, [r7, #20]
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	4313      	orrs	r3, r2
 8008d8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	693a      	ldr	r2, [r7, #16]
 8008d92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	697a      	ldr	r2, [r7, #20]
 8008d98:	621a      	str	r2, [r3, #32]
}
 8008d9a:	bf00      	nop
 8008d9c:	371c      	adds	r7, #28
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da4:	4770      	bx	lr

08008da6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008da6:	b480      	push	{r7}
 8008da8:	b087      	sub	sp, #28
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	60f8      	str	r0, [r7, #12]
 8008dae:	60b9      	str	r1, [r7, #8]
 8008db0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	6a1b      	ldr	r3, [r3, #32]
 8008db6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	6a1b      	ldr	r3, [r3, #32]
 8008dbc:	f023 0210 	bic.w	r2, r3, #16
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	699b      	ldr	r3, [r3, #24]
 8008dc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008dd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	031b      	lsls	r3, r3, #12
 8008dd6:	693a      	ldr	r2, [r7, #16]
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008de2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	011b      	lsls	r3, r3, #4
 8008de8:	697a      	ldr	r2, [r7, #20]
 8008dea:	4313      	orrs	r3, r2
 8008dec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	693a      	ldr	r2, [r7, #16]
 8008df2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	697a      	ldr	r2, [r7, #20]
 8008df8:	621a      	str	r2, [r3, #32]
}
 8008dfa:	bf00      	nop
 8008dfc:	371c      	adds	r7, #28
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e04:	4770      	bx	lr

08008e06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008e06:	b480      	push	{r7}
 8008e08:	b085      	sub	sp, #20
 8008e0a:	af00      	add	r7, sp, #0
 8008e0c:	6078      	str	r0, [r7, #4]
 8008e0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	689b      	ldr	r3, [r3, #8]
 8008e14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008e1e:	683a      	ldr	r2, [r7, #0]
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	4313      	orrs	r3, r2
 8008e24:	f043 0307 	orr.w	r3, r3, #7
 8008e28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	68fa      	ldr	r2, [r7, #12]
 8008e2e:	609a      	str	r2, [r3, #8]
}
 8008e30:	bf00      	nop
 8008e32:	3714      	adds	r7, #20
 8008e34:	46bd      	mov	sp, r7
 8008e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3a:	4770      	bx	lr

08008e3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b087      	sub	sp, #28
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	60f8      	str	r0, [r7, #12]
 8008e44:	60b9      	str	r1, [r7, #8]
 8008e46:	607a      	str	r2, [r7, #4]
 8008e48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	689b      	ldr	r3, [r3, #8]
 8008e4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008e56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	021a      	lsls	r2, r3, #8
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	431a      	orrs	r2, r3
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	4313      	orrs	r3, r2
 8008e64:	697a      	ldr	r2, [r7, #20]
 8008e66:	4313      	orrs	r3, r2
 8008e68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	697a      	ldr	r2, [r7, #20]
 8008e6e:	609a      	str	r2, [r3, #8]
}
 8008e70:	bf00      	nop
 8008e72:	371c      	adds	r7, #28
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr

08008e7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b084      	sub	sp, #16
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4a32      	ldr	r2, [pc, #200]	@ (8008f54 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d027      	beq.n	8008ee0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e98:	d022      	beq.n	8008ee0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	4a2e      	ldr	r2, [pc, #184]	@ (8008f58 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d01d      	beq.n	8008ee0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4a2c      	ldr	r2, [pc, #176]	@ (8008f5c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d018      	beq.n	8008ee0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	4a2b      	ldr	r2, [pc, #172]	@ (8008f60 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d013      	beq.n	8008ee0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4a29      	ldr	r2, [pc, #164]	@ (8008f64 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d00e      	beq.n	8008ee0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	4a28      	ldr	r2, [pc, #160]	@ (8008f68 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d009      	beq.n	8008ee0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4a26      	ldr	r2, [pc, #152]	@ (8008f6c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d004      	beq.n	8008ee0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008ed6:	f240 71ab 	movw	r1, #1963	@ 0x7ab
 8008eda:	4825      	ldr	r0, [pc, #148]	@ (8008f70 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008edc:	f7fa ff2a 	bl	8003d34 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d020      	beq.n	8008f2a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	2b10      	cmp	r3, #16
 8008eee:	d01c      	beq.n	8008f2a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	2b20      	cmp	r3, #32
 8008ef6:	d018      	beq.n	8008f2a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	2b30      	cmp	r3, #48	@ 0x30
 8008efe:	d014      	beq.n	8008f2a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	2b40      	cmp	r3, #64	@ 0x40
 8008f06:	d010      	beq.n	8008f2a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	2b50      	cmp	r3, #80	@ 0x50
 8008f0e:	d00c      	beq.n	8008f2a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	2b60      	cmp	r3, #96	@ 0x60
 8008f16:	d008      	beq.n	8008f2a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	2b70      	cmp	r3, #112	@ 0x70
 8008f1e:	d004      	beq.n	8008f2a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008f20:	f240 71ac 	movw	r1, #1964	@ 0x7ac
 8008f24:	4812      	ldr	r0, [pc, #72]	@ (8008f70 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008f26:	f7fa ff05 	bl	8003d34 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	689b      	ldr	r3, [r3, #8]
 8008f2e:	2b80      	cmp	r3, #128	@ 0x80
 8008f30:	d008      	beq.n	8008f44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	689b      	ldr	r3, [r3, #8]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d004      	beq.n	8008f44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008f3a:	f240 71ad 	movw	r1, #1965	@ 0x7ad
 8008f3e:	480c      	ldr	r0, [pc, #48]	@ (8008f70 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008f40:	f7fa fef8 	bl	8003d34 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f4a:	2b01      	cmp	r3, #1
 8008f4c:	d112      	bne.n	8008f74 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8008f4e:	2302      	movs	r3, #2
 8008f50:	e0d7      	b.n	8009102 <HAL_TIMEx_MasterConfigSynchronization+0x286>
 8008f52:	bf00      	nop
 8008f54:	40010000 	.word	0x40010000
 8008f58:	40000400 	.word	0x40000400
 8008f5c:	40000800 	.word	0x40000800
 8008f60:	40000c00 	.word	0x40000c00
 8008f64:	40001000 	.word	0x40001000
 8008f68:	40001400 	.word	0x40001400
 8008f6c:	40010400 	.word	0x40010400
 8008f70:	080134cc 	.word	0x080134cc
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2201      	movs	r2, #1
 8008f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2202      	movs	r2, #2
 8008f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	685b      	ldr	r3, [r3, #4]
 8008f8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	689b      	ldr	r3, [r3, #8]
 8008f92:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	4a5c      	ldr	r2, [pc, #368]	@ (800910c <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d004      	beq.n	8008fa8 <HAL_TIMEx_MasterConfigSynchronization+0x12c>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4a5b      	ldr	r2, [pc, #364]	@ (8009110 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d161      	bne.n	800906c <HAL_TIMEx_MasterConfigSynchronization+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	685b      	ldr	r3, [r3, #4]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d054      	beq.n	800905a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	685b      	ldr	r3, [r3, #4]
 8008fb4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008fb8:	d04f      	beq.n	800905a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008fc2:	d04a      	beq.n	800905a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008fcc:	d045      	beq.n	800905a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	685b      	ldr	r3, [r3, #4]
 8008fd2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008fd6:	d040      	beq.n	800905a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	685b      	ldr	r3, [r3, #4]
 8008fdc:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8008fe0:	d03b      	beq.n	800905a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	685b      	ldr	r3, [r3, #4]
 8008fe6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008fea:	d036      	beq.n	800905a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008ff4:	d031      	beq.n	800905a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	685b      	ldr	r3, [r3, #4]
 8008ffa:	f5b3 0fe0 	cmp.w	r3, #7340032	@ 0x700000
 8008ffe:	d02c      	beq.n	800905a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009008:	d027      	beq.n	800905a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	685b      	ldr	r3, [r3, #4]
 800900e:	f5b3 0f10 	cmp.w	r3, #9437184	@ 0x900000
 8009012:	d022      	beq.n	800905a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	685b      	ldr	r3, [r3, #4]
 8009018:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800901c:	d01d      	beq.n	800905a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	685b      	ldr	r3, [r3, #4]
 8009022:	f5b3 0f30 	cmp.w	r3, #11534336	@ 0xb00000
 8009026:	d018      	beq.n	800905a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8009030:	d013      	beq.n	800905a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	685b      	ldr	r3, [r3, #4]
 8009036:	f5b3 0f50 	cmp.w	r3, #13631488	@ 0xd00000
 800903a:	d00e      	beq.n	800905a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	685b      	ldr	r3, [r3, #4]
 8009040:	f5b3 0f60 	cmp.w	r3, #14680064	@ 0xe00000
 8009044:	d009      	beq.n	800905a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	685b      	ldr	r3, [r3, #4]
 800904a:	f5b3 0f70 	cmp.w	r3, #15728640	@ 0xf00000
 800904e:	d004      	beq.n	800905a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009050:	f240 71bf 	movw	r1, #1983	@ 0x7bf
 8009054:	482f      	ldr	r0, [pc, #188]	@ (8009114 <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 8009056:	f7fa fe6d 	bl	8003d34 <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009060:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	685b      	ldr	r3, [r3, #4]
 8009066:	68fa      	ldr	r2, [r7, #12]
 8009068:	4313      	orrs	r3, r2
 800906a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009072:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	68fa      	ldr	r2, [r7, #12]
 800907a:	4313      	orrs	r3, r2
 800907c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	68fa      	ldr	r2, [r7, #12]
 8009084:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4a20      	ldr	r2, [pc, #128]	@ (800910c <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d022      	beq.n	80090d6 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009098:	d01d      	beq.n	80090d6 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	4a1e      	ldr	r2, [pc, #120]	@ (8009118 <HAL_TIMEx_MasterConfigSynchronization+0x29c>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d018      	beq.n	80090d6 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	4a1c      	ldr	r2, [pc, #112]	@ (800911c <HAL_TIMEx_MasterConfigSynchronization+0x2a0>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d013      	beq.n	80090d6 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	4a1b      	ldr	r2, [pc, #108]	@ (8009120 <HAL_TIMEx_MasterConfigSynchronization+0x2a4>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d00e      	beq.n	80090d6 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4a14      	ldr	r2, [pc, #80]	@ (8009110 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d009      	beq.n	80090d6 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	4a17      	ldr	r2, [pc, #92]	@ (8009124 <HAL_TIMEx_MasterConfigSynchronization+0x2a8>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d004      	beq.n	80090d6 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4a15      	ldr	r2, [pc, #84]	@ (8009128 <HAL_TIMEx_MasterConfigSynchronization+0x2ac>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d10c      	bne.n	80090f0 <HAL_TIMEx_MasterConfigSynchronization+0x274>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80090dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	689b      	ldr	r3, [r3, #8]
 80090e2:	68ba      	ldr	r2, [r7, #8]
 80090e4:	4313      	orrs	r3, r2
 80090e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	68ba      	ldr	r2, [r7, #8]
 80090ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2201      	movs	r2, #1
 80090f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2200      	movs	r2, #0
 80090fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009100:	2300      	movs	r3, #0
}
 8009102:	4618      	mov	r0, r3
 8009104:	3710      	adds	r7, #16
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}
 800910a:	bf00      	nop
 800910c:	40010000 	.word	0x40010000
 8009110:	40010400 	.word	0x40010400
 8009114:	080134cc 	.word	0x080134cc
 8009118:	40000400 	.word	0x40000400
 800911c:	40000800 	.word	0x40000800
 8009120:	40000c00 	.word	0x40000c00
 8009124:	40014000 	.word	0x40014000
 8009128:	40001800 	.word	0x40001800

0800912c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b082      	sub	sp, #8
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d101      	bne.n	800913e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800913a:	2301      	movs	r3, #1
 800913c:	e09f      	b.n	800927e <HAL_UART_Init+0x152>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	699b      	ldr	r3, [r3, #24]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d02d      	beq.n	80091a2 <HAL_UART_Init+0x76>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	4a4f      	ldr	r2, [pc, #316]	@ (8009288 <HAL_UART_Init+0x15c>)
 800914c:	4293      	cmp	r3, r2
 800914e:	d055      	beq.n	80091fc <HAL_UART_Init+0xd0>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4a4d      	ldr	r2, [pc, #308]	@ (800928c <HAL_UART_Init+0x160>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d050      	beq.n	80091fc <HAL_UART_Init+0xd0>
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	4a4c      	ldr	r2, [pc, #304]	@ (8009290 <HAL_UART_Init+0x164>)
 8009160:	4293      	cmp	r3, r2
 8009162:	d04b      	beq.n	80091fc <HAL_UART_Init+0xd0>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4a4a      	ldr	r2, [pc, #296]	@ (8009294 <HAL_UART_Init+0x168>)
 800916a:	4293      	cmp	r3, r2
 800916c:	d046      	beq.n	80091fc <HAL_UART_Init+0xd0>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	4a49      	ldr	r2, [pc, #292]	@ (8009298 <HAL_UART_Init+0x16c>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d041      	beq.n	80091fc <HAL_UART_Init+0xd0>
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	4a47      	ldr	r2, [pc, #284]	@ (800929c <HAL_UART_Init+0x170>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d03c      	beq.n	80091fc <HAL_UART_Init+0xd0>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	4a46      	ldr	r2, [pc, #280]	@ (80092a0 <HAL_UART_Init+0x174>)
 8009188:	4293      	cmp	r3, r2
 800918a:	d037      	beq.n	80091fc <HAL_UART_Init+0xd0>
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4a44      	ldr	r2, [pc, #272]	@ (80092a4 <HAL_UART_Init+0x178>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d032      	beq.n	80091fc <HAL_UART_Init+0xd0>
 8009196:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800919a:	4843      	ldr	r0, [pc, #268]	@ (80092a8 <HAL_UART_Init+0x17c>)
 800919c:	f7fa fdca 	bl	8003d34 <assert_failed>
 80091a0:	e02c      	b.n	80091fc <HAL_UART_Init+0xd0>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	4a38      	ldr	r2, [pc, #224]	@ (8009288 <HAL_UART_Init+0x15c>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d027      	beq.n	80091fc <HAL_UART_Init+0xd0>
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4a36      	ldr	r2, [pc, #216]	@ (800928c <HAL_UART_Init+0x160>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d022      	beq.n	80091fc <HAL_UART_Init+0xd0>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	4a35      	ldr	r2, [pc, #212]	@ (8009290 <HAL_UART_Init+0x164>)
 80091bc:	4293      	cmp	r3, r2
 80091be:	d01d      	beq.n	80091fc <HAL_UART_Init+0xd0>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4a33      	ldr	r2, [pc, #204]	@ (8009294 <HAL_UART_Init+0x168>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d018      	beq.n	80091fc <HAL_UART_Init+0xd0>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	4a32      	ldr	r2, [pc, #200]	@ (8009298 <HAL_UART_Init+0x16c>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d013      	beq.n	80091fc <HAL_UART_Init+0xd0>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	4a30      	ldr	r2, [pc, #192]	@ (800929c <HAL_UART_Init+0x170>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	d00e      	beq.n	80091fc <HAL_UART_Init+0xd0>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	4a2f      	ldr	r2, [pc, #188]	@ (80092a0 <HAL_UART_Init+0x174>)
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d009      	beq.n	80091fc <HAL_UART_Init+0xd0>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4a2d      	ldr	r2, [pc, #180]	@ (80092a4 <HAL_UART_Init+0x178>)
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d004      	beq.n	80091fc <HAL_UART_Init+0xd0>
 80091f2:	f240 1131 	movw	r1, #305	@ 0x131
 80091f6:	482c      	ldr	r0, [pc, #176]	@ (80092a8 <HAL_UART_Init+0x17c>)
 80091f8:	f7fa fd9c 	bl	8003d34 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009200:	2b00      	cmp	r3, #0
 8009202:	d106      	bne.n	8009212 <HAL_UART_Init+0xe6>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2200      	movs	r2, #0
 8009208:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f7fb f945 	bl	800449c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2224      	movs	r2, #36	@ 0x24
 8009216:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	681a      	ldr	r2, [r3, #0]
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f022 0201 	bic.w	r2, r2, #1
 8009226:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800922c:	2b00      	cmp	r3, #0
 800922e:	d002      	beq.n	8009236 <HAL_UART_Init+0x10a>
  {
    UART_AdvFeatureConfig(huart);
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f000 fb31 	bl	8009898 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f000 f838 	bl	80092ac <UART_SetConfig>
 800923c:	4603      	mov	r3, r0
 800923e:	2b01      	cmp	r3, #1
 8009240:	d101      	bne.n	8009246 <HAL_UART_Init+0x11a>
  {
    return HAL_ERROR;
 8009242:	2301      	movs	r3, #1
 8009244:	e01b      	b.n	800927e <HAL_UART_Init+0x152>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	685a      	ldr	r2, [r3, #4]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009254:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	689a      	ldr	r2, [r3, #8]
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009264:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	681a      	ldr	r2, [r3, #0]
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f042 0201 	orr.w	r2, r2, #1
 8009274:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f000 fc66 	bl	8009b48 <UART_CheckIdleState>
 800927c:	4603      	mov	r3, r0
}
 800927e:	4618      	mov	r0, r3
 8009280:	3708      	adds	r7, #8
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}
 8009286:	bf00      	nop
 8009288:	40011000 	.word	0x40011000
 800928c:	40004400 	.word	0x40004400
 8009290:	40004800 	.word	0x40004800
 8009294:	40004c00 	.word	0x40004c00
 8009298:	40005000 	.word	0x40005000
 800929c:	40011400 	.word	0x40011400
 80092a0:	40007800 	.word	0x40007800
 80092a4:	40007c00 	.word	0x40007c00
 80092a8:	08013508 	.word	0x08013508

080092ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b088      	sub	sp, #32
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80092b4:	2300      	movs	r3, #0
 80092b6:	77bb      	strb	r3, [r7, #30]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	685b      	ldr	r3, [r3, #4]
 80092bc:	4aa0      	ldr	r2, [pc, #640]	@ (8009540 <UART_SetConfig+0x294>)
 80092be:	4293      	cmp	r3, r2
 80092c0:	d904      	bls.n	80092cc <UART_SetConfig+0x20>
 80092c2:	f640 315f 	movw	r1, #2911	@ 0xb5f
 80092c6:	489f      	ldr	r0, [pc, #636]	@ (8009544 <UART_SetConfig+0x298>)
 80092c8:	f7fa fd34 	bl	8003d34 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	689b      	ldr	r3, [r3, #8]
 80092d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80092d4:	d00d      	beq.n	80092f2 <UART_SetConfig+0x46>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	689b      	ldr	r3, [r3, #8]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d009      	beq.n	80092f2 <UART_SetConfig+0x46>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	689b      	ldr	r3, [r3, #8]
 80092e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092e6:	d004      	beq.n	80092f2 <UART_SetConfig+0x46>
 80092e8:	f44f 6136 	mov.w	r1, #2912	@ 0xb60
 80092ec:	4895      	ldr	r0, [pc, #596]	@ (8009544 <UART_SetConfig+0x298>)
 80092ee:	f7fa fd21 	bl	8003d34 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	68db      	ldr	r3, [r3, #12]
 80092f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092fa:	d012      	beq.n	8009322 <UART_SetConfig+0x76>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	68db      	ldr	r3, [r3, #12]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d00e      	beq.n	8009322 <UART_SetConfig+0x76>
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	68db      	ldr	r3, [r3, #12]
 8009308:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800930c:	d009      	beq.n	8009322 <UART_SetConfig+0x76>
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	68db      	ldr	r3, [r3, #12]
 8009312:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009316:	d004      	beq.n	8009322 <UART_SetConfig+0x76>
 8009318:	f640 3161 	movw	r1, #2913	@ 0xb61
 800931c:	4889      	ldr	r0, [pc, #548]	@ (8009544 <UART_SetConfig+0x298>)
 800931e:	f7fa fd09 	bl	8003d34 <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6a1b      	ldr	r3, [r3, #32]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d009      	beq.n	800933e <UART_SetConfig+0x92>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6a1b      	ldr	r3, [r3, #32]
 800932e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009332:	d004      	beq.n	800933e <UART_SetConfig+0x92>
 8009334:	f640 3162 	movw	r1, #2914	@ 0xb62
 8009338:	4882      	ldr	r0, [pc, #520]	@ (8009544 <UART_SetConfig+0x298>)
 800933a:	f7fa fcfb 	bl	8003d34 <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	691b      	ldr	r3, [r3, #16]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d00e      	beq.n	8009364 <UART_SetConfig+0xb8>
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	691b      	ldr	r3, [r3, #16]
 800934a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800934e:	d009      	beq.n	8009364 <UART_SetConfig+0xb8>
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	691b      	ldr	r3, [r3, #16]
 8009354:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009358:	d004      	beq.n	8009364 <UART_SetConfig+0xb8>
 800935a:	f640 3164 	movw	r1, #2916	@ 0xb64
 800935e:	4879      	ldr	r0, [pc, #484]	@ (8009544 <UART_SetConfig+0x298>)
 8009360:	f7fa fce8 	bl	8003d34 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	695b      	ldr	r3, [r3, #20]
 8009368:	f023 030c 	bic.w	r3, r3, #12
 800936c:	2b00      	cmp	r3, #0
 800936e:	d103      	bne.n	8009378 <UART_SetConfig+0xcc>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	695b      	ldr	r3, [r3, #20]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d104      	bne.n	8009382 <UART_SetConfig+0xd6>
 8009378:	f640 3165 	movw	r1, #2917	@ 0xb65
 800937c:	4871      	ldr	r0, [pc, #452]	@ (8009544 <UART_SetConfig+0x298>)
 800937e:	f7fa fcd9 	bl	8003d34 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	699b      	ldr	r3, [r3, #24]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d013      	beq.n	80093b2 <UART_SetConfig+0x106>
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	699b      	ldr	r3, [r3, #24]
 800938e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009392:	d00e      	beq.n	80093b2 <UART_SetConfig+0x106>
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	699b      	ldr	r3, [r3, #24]
 8009398:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800939c:	d009      	beq.n	80093b2 <UART_SetConfig+0x106>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	699b      	ldr	r3, [r3, #24]
 80093a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80093a6:	d004      	beq.n	80093b2 <UART_SetConfig+0x106>
 80093a8:	f640 3166 	movw	r1, #2918	@ 0xb66
 80093ac:	4865      	ldr	r0, [pc, #404]	@ (8009544 <UART_SetConfig+0x298>)
 80093ae:	f7fa fcc1 	bl	8003d34 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	69db      	ldr	r3, [r3, #28]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d009      	beq.n	80093ce <UART_SetConfig+0x122>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	69db      	ldr	r3, [r3, #28]
 80093be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80093c2:	d004      	beq.n	80093ce <UART_SetConfig+0x122>
 80093c4:	f640 3167 	movw	r1, #2919	@ 0xb67
 80093c8:	485e      	ldr	r0, [pc, #376]	@ (8009544 <UART_SetConfig+0x298>)
 80093ca:	f7fa fcb3 	bl	8003d34 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	689a      	ldr	r2, [r3, #8]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	691b      	ldr	r3, [r3, #16]
 80093d6:	431a      	orrs	r2, r3
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	695b      	ldr	r3, [r3, #20]
 80093dc:	431a      	orrs	r2, r3
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	69db      	ldr	r3, [r3, #28]
 80093e2:	4313      	orrs	r3, r2
 80093e4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	681a      	ldr	r2, [r3, #0]
 80093ec:	4b56      	ldr	r3, [pc, #344]	@ (8009548 <UART_SetConfig+0x29c>)
 80093ee:	4013      	ands	r3, r2
 80093f0:	687a      	ldr	r2, [r7, #4]
 80093f2:	6812      	ldr	r2, [r2, #0]
 80093f4:	6979      	ldr	r1, [r7, #20]
 80093f6:	430b      	orrs	r3, r1
 80093f8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	685b      	ldr	r3, [r3, #4]
 8009400:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	68da      	ldr	r2, [r3, #12]
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	430a      	orrs	r2, r1
 800940e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	699b      	ldr	r3, [r3, #24]
 8009414:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6a1b      	ldr	r3, [r3, #32]
 800941a:	697a      	ldr	r2, [r7, #20]
 800941c:	4313      	orrs	r3, r2
 800941e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	689b      	ldr	r3, [r3, #8]
 8009426:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	697a      	ldr	r2, [r7, #20]
 8009430:	430a      	orrs	r2, r1
 8009432:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	4a44      	ldr	r2, [pc, #272]	@ (800954c <UART_SetConfig+0x2a0>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d121      	bne.n	8009482 <UART_SetConfig+0x1d6>
 800943e:	4b44      	ldr	r3, [pc, #272]	@ (8009550 <UART_SetConfig+0x2a4>)
 8009440:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009444:	f003 0303 	and.w	r3, r3, #3
 8009448:	2b03      	cmp	r3, #3
 800944a:	d817      	bhi.n	800947c <UART_SetConfig+0x1d0>
 800944c:	a201      	add	r2, pc, #4	@ (adr r2, 8009454 <UART_SetConfig+0x1a8>)
 800944e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009452:	bf00      	nop
 8009454:	08009465 	.word	0x08009465
 8009458:	08009471 	.word	0x08009471
 800945c:	0800946b 	.word	0x0800946b
 8009460:	08009477 	.word	0x08009477
 8009464:	2301      	movs	r3, #1
 8009466:	77fb      	strb	r3, [r7, #31]
 8009468:	e14c      	b.n	8009704 <UART_SetConfig+0x458>
 800946a:	2302      	movs	r3, #2
 800946c:	77fb      	strb	r3, [r7, #31]
 800946e:	e149      	b.n	8009704 <UART_SetConfig+0x458>
 8009470:	2304      	movs	r3, #4
 8009472:	77fb      	strb	r3, [r7, #31]
 8009474:	e146      	b.n	8009704 <UART_SetConfig+0x458>
 8009476:	2308      	movs	r3, #8
 8009478:	77fb      	strb	r3, [r7, #31]
 800947a:	e143      	b.n	8009704 <UART_SetConfig+0x458>
 800947c:	2310      	movs	r3, #16
 800947e:	77fb      	strb	r3, [r7, #31]
 8009480:	e140      	b.n	8009704 <UART_SetConfig+0x458>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4a33      	ldr	r2, [pc, #204]	@ (8009554 <UART_SetConfig+0x2a8>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d132      	bne.n	80094f2 <UART_SetConfig+0x246>
 800948c:	4b30      	ldr	r3, [pc, #192]	@ (8009550 <UART_SetConfig+0x2a4>)
 800948e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009492:	f003 030c 	and.w	r3, r3, #12
 8009496:	2b0c      	cmp	r3, #12
 8009498:	d828      	bhi.n	80094ec <UART_SetConfig+0x240>
 800949a:	a201      	add	r2, pc, #4	@ (adr r2, 80094a0 <UART_SetConfig+0x1f4>)
 800949c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094a0:	080094d5 	.word	0x080094d5
 80094a4:	080094ed 	.word	0x080094ed
 80094a8:	080094ed 	.word	0x080094ed
 80094ac:	080094ed 	.word	0x080094ed
 80094b0:	080094e1 	.word	0x080094e1
 80094b4:	080094ed 	.word	0x080094ed
 80094b8:	080094ed 	.word	0x080094ed
 80094bc:	080094ed 	.word	0x080094ed
 80094c0:	080094db 	.word	0x080094db
 80094c4:	080094ed 	.word	0x080094ed
 80094c8:	080094ed 	.word	0x080094ed
 80094cc:	080094ed 	.word	0x080094ed
 80094d0:	080094e7 	.word	0x080094e7
 80094d4:	2300      	movs	r3, #0
 80094d6:	77fb      	strb	r3, [r7, #31]
 80094d8:	e114      	b.n	8009704 <UART_SetConfig+0x458>
 80094da:	2302      	movs	r3, #2
 80094dc:	77fb      	strb	r3, [r7, #31]
 80094de:	e111      	b.n	8009704 <UART_SetConfig+0x458>
 80094e0:	2304      	movs	r3, #4
 80094e2:	77fb      	strb	r3, [r7, #31]
 80094e4:	e10e      	b.n	8009704 <UART_SetConfig+0x458>
 80094e6:	2308      	movs	r3, #8
 80094e8:	77fb      	strb	r3, [r7, #31]
 80094ea:	e10b      	b.n	8009704 <UART_SetConfig+0x458>
 80094ec:	2310      	movs	r3, #16
 80094ee:	77fb      	strb	r3, [r7, #31]
 80094f0:	e108      	b.n	8009704 <UART_SetConfig+0x458>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	4a18      	ldr	r2, [pc, #96]	@ (8009558 <UART_SetConfig+0x2ac>)
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d12f      	bne.n	800955c <UART_SetConfig+0x2b0>
 80094fc:	4b14      	ldr	r3, [pc, #80]	@ (8009550 <UART_SetConfig+0x2a4>)
 80094fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009502:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009506:	2b30      	cmp	r3, #48	@ 0x30
 8009508:	d013      	beq.n	8009532 <UART_SetConfig+0x286>
 800950a:	2b30      	cmp	r3, #48	@ 0x30
 800950c:	d814      	bhi.n	8009538 <UART_SetConfig+0x28c>
 800950e:	2b20      	cmp	r3, #32
 8009510:	d009      	beq.n	8009526 <UART_SetConfig+0x27a>
 8009512:	2b20      	cmp	r3, #32
 8009514:	d810      	bhi.n	8009538 <UART_SetConfig+0x28c>
 8009516:	2b00      	cmp	r3, #0
 8009518:	d002      	beq.n	8009520 <UART_SetConfig+0x274>
 800951a:	2b10      	cmp	r3, #16
 800951c:	d006      	beq.n	800952c <UART_SetConfig+0x280>
 800951e:	e00b      	b.n	8009538 <UART_SetConfig+0x28c>
 8009520:	2300      	movs	r3, #0
 8009522:	77fb      	strb	r3, [r7, #31]
 8009524:	e0ee      	b.n	8009704 <UART_SetConfig+0x458>
 8009526:	2302      	movs	r3, #2
 8009528:	77fb      	strb	r3, [r7, #31]
 800952a:	e0eb      	b.n	8009704 <UART_SetConfig+0x458>
 800952c:	2304      	movs	r3, #4
 800952e:	77fb      	strb	r3, [r7, #31]
 8009530:	e0e8      	b.n	8009704 <UART_SetConfig+0x458>
 8009532:	2308      	movs	r3, #8
 8009534:	77fb      	strb	r3, [r7, #31]
 8009536:	e0e5      	b.n	8009704 <UART_SetConfig+0x458>
 8009538:	2310      	movs	r3, #16
 800953a:	77fb      	strb	r3, [r7, #31]
 800953c:	e0e2      	b.n	8009704 <UART_SetConfig+0x458>
 800953e:	bf00      	nop
 8009540:	019bfcc0 	.word	0x019bfcc0
 8009544:	08013508 	.word	0x08013508
 8009548:	efff69f3 	.word	0xefff69f3
 800954c:	40011000 	.word	0x40011000
 8009550:	40023800 	.word	0x40023800
 8009554:	40004400 	.word	0x40004400
 8009558:	40004800 	.word	0x40004800
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	4aa5      	ldr	r2, [pc, #660]	@ (80097f8 <UART_SetConfig+0x54c>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d120      	bne.n	80095a8 <UART_SetConfig+0x2fc>
 8009566:	4ba5      	ldr	r3, [pc, #660]	@ (80097fc <UART_SetConfig+0x550>)
 8009568:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800956c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009570:	2bc0      	cmp	r3, #192	@ 0xc0
 8009572:	d013      	beq.n	800959c <UART_SetConfig+0x2f0>
 8009574:	2bc0      	cmp	r3, #192	@ 0xc0
 8009576:	d814      	bhi.n	80095a2 <UART_SetConfig+0x2f6>
 8009578:	2b80      	cmp	r3, #128	@ 0x80
 800957a:	d009      	beq.n	8009590 <UART_SetConfig+0x2e4>
 800957c:	2b80      	cmp	r3, #128	@ 0x80
 800957e:	d810      	bhi.n	80095a2 <UART_SetConfig+0x2f6>
 8009580:	2b00      	cmp	r3, #0
 8009582:	d002      	beq.n	800958a <UART_SetConfig+0x2de>
 8009584:	2b40      	cmp	r3, #64	@ 0x40
 8009586:	d006      	beq.n	8009596 <UART_SetConfig+0x2ea>
 8009588:	e00b      	b.n	80095a2 <UART_SetConfig+0x2f6>
 800958a:	2300      	movs	r3, #0
 800958c:	77fb      	strb	r3, [r7, #31]
 800958e:	e0b9      	b.n	8009704 <UART_SetConfig+0x458>
 8009590:	2302      	movs	r3, #2
 8009592:	77fb      	strb	r3, [r7, #31]
 8009594:	e0b6      	b.n	8009704 <UART_SetConfig+0x458>
 8009596:	2304      	movs	r3, #4
 8009598:	77fb      	strb	r3, [r7, #31]
 800959a:	e0b3      	b.n	8009704 <UART_SetConfig+0x458>
 800959c:	2308      	movs	r3, #8
 800959e:	77fb      	strb	r3, [r7, #31]
 80095a0:	e0b0      	b.n	8009704 <UART_SetConfig+0x458>
 80095a2:	2310      	movs	r3, #16
 80095a4:	77fb      	strb	r3, [r7, #31]
 80095a6:	e0ad      	b.n	8009704 <UART_SetConfig+0x458>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4a94      	ldr	r2, [pc, #592]	@ (8009800 <UART_SetConfig+0x554>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d125      	bne.n	80095fe <UART_SetConfig+0x352>
 80095b2:	4b92      	ldr	r3, [pc, #584]	@ (80097fc <UART_SetConfig+0x550>)
 80095b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80095bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80095c0:	d017      	beq.n	80095f2 <UART_SetConfig+0x346>
 80095c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80095c6:	d817      	bhi.n	80095f8 <UART_SetConfig+0x34c>
 80095c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80095cc:	d00b      	beq.n	80095e6 <UART_SetConfig+0x33a>
 80095ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80095d2:	d811      	bhi.n	80095f8 <UART_SetConfig+0x34c>
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d003      	beq.n	80095e0 <UART_SetConfig+0x334>
 80095d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80095dc:	d006      	beq.n	80095ec <UART_SetConfig+0x340>
 80095de:	e00b      	b.n	80095f8 <UART_SetConfig+0x34c>
 80095e0:	2300      	movs	r3, #0
 80095e2:	77fb      	strb	r3, [r7, #31]
 80095e4:	e08e      	b.n	8009704 <UART_SetConfig+0x458>
 80095e6:	2302      	movs	r3, #2
 80095e8:	77fb      	strb	r3, [r7, #31]
 80095ea:	e08b      	b.n	8009704 <UART_SetConfig+0x458>
 80095ec:	2304      	movs	r3, #4
 80095ee:	77fb      	strb	r3, [r7, #31]
 80095f0:	e088      	b.n	8009704 <UART_SetConfig+0x458>
 80095f2:	2308      	movs	r3, #8
 80095f4:	77fb      	strb	r3, [r7, #31]
 80095f6:	e085      	b.n	8009704 <UART_SetConfig+0x458>
 80095f8:	2310      	movs	r3, #16
 80095fa:	77fb      	strb	r3, [r7, #31]
 80095fc:	e082      	b.n	8009704 <UART_SetConfig+0x458>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	4a80      	ldr	r2, [pc, #512]	@ (8009804 <UART_SetConfig+0x558>)
 8009604:	4293      	cmp	r3, r2
 8009606:	d125      	bne.n	8009654 <UART_SetConfig+0x3a8>
 8009608:	4b7c      	ldr	r3, [pc, #496]	@ (80097fc <UART_SetConfig+0x550>)
 800960a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800960e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009612:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009616:	d017      	beq.n	8009648 <UART_SetConfig+0x39c>
 8009618:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800961c:	d817      	bhi.n	800964e <UART_SetConfig+0x3a2>
 800961e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009622:	d00b      	beq.n	800963c <UART_SetConfig+0x390>
 8009624:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009628:	d811      	bhi.n	800964e <UART_SetConfig+0x3a2>
 800962a:	2b00      	cmp	r3, #0
 800962c:	d003      	beq.n	8009636 <UART_SetConfig+0x38a>
 800962e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009632:	d006      	beq.n	8009642 <UART_SetConfig+0x396>
 8009634:	e00b      	b.n	800964e <UART_SetConfig+0x3a2>
 8009636:	2301      	movs	r3, #1
 8009638:	77fb      	strb	r3, [r7, #31]
 800963a:	e063      	b.n	8009704 <UART_SetConfig+0x458>
 800963c:	2302      	movs	r3, #2
 800963e:	77fb      	strb	r3, [r7, #31]
 8009640:	e060      	b.n	8009704 <UART_SetConfig+0x458>
 8009642:	2304      	movs	r3, #4
 8009644:	77fb      	strb	r3, [r7, #31]
 8009646:	e05d      	b.n	8009704 <UART_SetConfig+0x458>
 8009648:	2308      	movs	r3, #8
 800964a:	77fb      	strb	r3, [r7, #31]
 800964c:	e05a      	b.n	8009704 <UART_SetConfig+0x458>
 800964e:	2310      	movs	r3, #16
 8009650:	77fb      	strb	r3, [r7, #31]
 8009652:	e057      	b.n	8009704 <UART_SetConfig+0x458>
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	4a6b      	ldr	r2, [pc, #428]	@ (8009808 <UART_SetConfig+0x55c>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d125      	bne.n	80096aa <UART_SetConfig+0x3fe>
 800965e:	4b67      	ldr	r3, [pc, #412]	@ (80097fc <UART_SetConfig+0x550>)
 8009660:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009664:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8009668:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800966c:	d017      	beq.n	800969e <UART_SetConfig+0x3f2>
 800966e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009672:	d817      	bhi.n	80096a4 <UART_SetConfig+0x3f8>
 8009674:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009678:	d00b      	beq.n	8009692 <UART_SetConfig+0x3e6>
 800967a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800967e:	d811      	bhi.n	80096a4 <UART_SetConfig+0x3f8>
 8009680:	2b00      	cmp	r3, #0
 8009682:	d003      	beq.n	800968c <UART_SetConfig+0x3e0>
 8009684:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009688:	d006      	beq.n	8009698 <UART_SetConfig+0x3ec>
 800968a:	e00b      	b.n	80096a4 <UART_SetConfig+0x3f8>
 800968c:	2300      	movs	r3, #0
 800968e:	77fb      	strb	r3, [r7, #31]
 8009690:	e038      	b.n	8009704 <UART_SetConfig+0x458>
 8009692:	2302      	movs	r3, #2
 8009694:	77fb      	strb	r3, [r7, #31]
 8009696:	e035      	b.n	8009704 <UART_SetConfig+0x458>
 8009698:	2304      	movs	r3, #4
 800969a:	77fb      	strb	r3, [r7, #31]
 800969c:	e032      	b.n	8009704 <UART_SetConfig+0x458>
 800969e:	2308      	movs	r3, #8
 80096a0:	77fb      	strb	r3, [r7, #31]
 80096a2:	e02f      	b.n	8009704 <UART_SetConfig+0x458>
 80096a4:	2310      	movs	r3, #16
 80096a6:	77fb      	strb	r3, [r7, #31]
 80096a8:	e02c      	b.n	8009704 <UART_SetConfig+0x458>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	4a57      	ldr	r2, [pc, #348]	@ (800980c <UART_SetConfig+0x560>)
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d125      	bne.n	8009700 <UART_SetConfig+0x454>
 80096b4:	4b51      	ldr	r3, [pc, #324]	@ (80097fc <UART_SetConfig+0x550>)
 80096b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096ba:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80096be:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80096c2:	d017      	beq.n	80096f4 <UART_SetConfig+0x448>
 80096c4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80096c8:	d817      	bhi.n	80096fa <UART_SetConfig+0x44e>
 80096ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80096ce:	d00b      	beq.n	80096e8 <UART_SetConfig+0x43c>
 80096d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80096d4:	d811      	bhi.n	80096fa <UART_SetConfig+0x44e>
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d003      	beq.n	80096e2 <UART_SetConfig+0x436>
 80096da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80096de:	d006      	beq.n	80096ee <UART_SetConfig+0x442>
 80096e0:	e00b      	b.n	80096fa <UART_SetConfig+0x44e>
 80096e2:	2300      	movs	r3, #0
 80096e4:	77fb      	strb	r3, [r7, #31]
 80096e6:	e00d      	b.n	8009704 <UART_SetConfig+0x458>
 80096e8:	2302      	movs	r3, #2
 80096ea:	77fb      	strb	r3, [r7, #31]
 80096ec:	e00a      	b.n	8009704 <UART_SetConfig+0x458>
 80096ee:	2304      	movs	r3, #4
 80096f0:	77fb      	strb	r3, [r7, #31]
 80096f2:	e007      	b.n	8009704 <UART_SetConfig+0x458>
 80096f4:	2308      	movs	r3, #8
 80096f6:	77fb      	strb	r3, [r7, #31]
 80096f8:	e004      	b.n	8009704 <UART_SetConfig+0x458>
 80096fa:	2310      	movs	r3, #16
 80096fc:	77fb      	strb	r3, [r7, #31]
 80096fe:	e001      	b.n	8009704 <UART_SetConfig+0x458>
 8009700:	2310      	movs	r3, #16
 8009702:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	69db      	ldr	r3, [r3, #28]
 8009708:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800970c:	d15c      	bne.n	80097c8 <UART_SetConfig+0x51c>
  {
    switch (clocksource)
 800970e:	7ffb      	ldrb	r3, [r7, #31]
 8009710:	2b08      	cmp	r3, #8
 8009712:	d828      	bhi.n	8009766 <UART_SetConfig+0x4ba>
 8009714:	a201      	add	r2, pc, #4	@ (adr r2, 800971c <UART_SetConfig+0x470>)
 8009716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800971a:	bf00      	nop
 800971c:	08009741 	.word	0x08009741
 8009720:	08009749 	.word	0x08009749
 8009724:	08009751 	.word	0x08009751
 8009728:	08009767 	.word	0x08009767
 800972c:	08009757 	.word	0x08009757
 8009730:	08009767 	.word	0x08009767
 8009734:	08009767 	.word	0x08009767
 8009738:	08009767 	.word	0x08009767
 800973c:	0800975f 	.word	0x0800975f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009740:	f7fc fc32 	bl	8005fa8 <HAL_RCC_GetPCLK1Freq>
 8009744:	61b8      	str	r0, [r7, #24]
        break;
 8009746:	e013      	b.n	8009770 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009748:	f7fc fc42 	bl	8005fd0 <HAL_RCC_GetPCLK2Freq>
 800974c:	61b8      	str	r0, [r7, #24]
        break;
 800974e:	e00f      	b.n	8009770 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009750:	4b2f      	ldr	r3, [pc, #188]	@ (8009810 <UART_SetConfig+0x564>)
 8009752:	61bb      	str	r3, [r7, #24]
        break;
 8009754:	e00c      	b.n	8009770 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009756:	f7fc fb55 	bl	8005e04 <HAL_RCC_GetSysClockFreq>
 800975a:	61b8      	str	r0, [r7, #24]
        break;
 800975c:	e008      	b.n	8009770 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800975e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009762:	61bb      	str	r3, [r7, #24]
        break;
 8009764:	e004      	b.n	8009770 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 8009766:	2300      	movs	r3, #0
 8009768:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800976a:	2301      	movs	r3, #1
 800976c:	77bb      	strb	r3, [r7, #30]
        break;
 800976e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009770:	69bb      	ldr	r3, [r7, #24]
 8009772:	2b00      	cmp	r3, #0
 8009774:	f000 8082 	beq.w	800987c <UART_SetConfig+0x5d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009778:	69bb      	ldr	r3, [r7, #24]
 800977a:	005a      	lsls	r2, r3, #1
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	685b      	ldr	r3, [r3, #4]
 8009780:	085b      	lsrs	r3, r3, #1
 8009782:	441a      	add	r2, r3
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	685b      	ldr	r3, [r3, #4]
 8009788:	fbb2 f3f3 	udiv	r3, r2, r3
 800978c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800978e:	693b      	ldr	r3, [r7, #16]
 8009790:	2b0f      	cmp	r3, #15
 8009792:	d916      	bls.n	80097c2 <UART_SetConfig+0x516>
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800979a:	d212      	bcs.n	80097c2 <UART_SetConfig+0x516>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800979c:	693b      	ldr	r3, [r7, #16]
 800979e:	b29b      	uxth	r3, r3
 80097a0:	f023 030f 	bic.w	r3, r3, #15
 80097a4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	085b      	lsrs	r3, r3, #1
 80097aa:	b29b      	uxth	r3, r3
 80097ac:	f003 0307 	and.w	r3, r3, #7
 80097b0:	b29a      	uxth	r2, r3
 80097b2:	89fb      	ldrh	r3, [r7, #14]
 80097b4:	4313      	orrs	r3, r2
 80097b6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	89fa      	ldrh	r2, [r7, #14]
 80097be:	60da      	str	r2, [r3, #12]
 80097c0:	e05c      	b.n	800987c <UART_SetConfig+0x5d0>
      }
      else
      {
        ret = HAL_ERROR;
 80097c2:	2301      	movs	r3, #1
 80097c4:	77bb      	strb	r3, [r7, #30]
 80097c6:	e059      	b.n	800987c <UART_SetConfig+0x5d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80097c8:	7ffb      	ldrb	r3, [r7, #31]
 80097ca:	2b08      	cmp	r3, #8
 80097cc:	d835      	bhi.n	800983a <UART_SetConfig+0x58e>
 80097ce:	a201      	add	r2, pc, #4	@ (adr r2, 80097d4 <UART_SetConfig+0x528>)
 80097d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097d4:	08009815 	.word	0x08009815
 80097d8:	0800981d 	.word	0x0800981d
 80097dc:	08009825 	.word	0x08009825
 80097e0:	0800983b 	.word	0x0800983b
 80097e4:	0800982b 	.word	0x0800982b
 80097e8:	0800983b 	.word	0x0800983b
 80097ec:	0800983b 	.word	0x0800983b
 80097f0:	0800983b 	.word	0x0800983b
 80097f4:	08009833 	.word	0x08009833
 80097f8:	40004c00 	.word	0x40004c00
 80097fc:	40023800 	.word	0x40023800
 8009800:	40005000 	.word	0x40005000
 8009804:	40011400 	.word	0x40011400
 8009808:	40007800 	.word	0x40007800
 800980c:	40007c00 	.word	0x40007c00
 8009810:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009814:	f7fc fbc8 	bl	8005fa8 <HAL_RCC_GetPCLK1Freq>
 8009818:	61b8      	str	r0, [r7, #24]
        break;
 800981a:	e013      	b.n	8009844 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800981c:	f7fc fbd8 	bl	8005fd0 <HAL_RCC_GetPCLK2Freq>
 8009820:	61b8      	str	r0, [r7, #24]
        break;
 8009822:	e00f      	b.n	8009844 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009824:	4b1b      	ldr	r3, [pc, #108]	@ (8009894 <UART_SetConfig+0x5e8>)
 8009826:	61bb      	str	r3, [r7, #24]
        break;
 8009828:	e00c      	b.n	8009844 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800982a:	f7fc faeb 	bl	8005e04 <HAL_RCC_GetSysClockFreq>
 800982e:	61b8      	str	r0, [r7, #24]
        break;
 8009830:	e008      	b.n	8009844 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009832:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009836:	61bb      	str	r3, [r7, #24]
        break;
 8009838:	e004      	b.n	8009844 <UART_SetConfig+0x598>
      default:
        pclk = 0U;
 800983a:	2300      	movs	r3, #0
 800983c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800983e:	2301      	movs	r3, #1
 8009840:	77bb      	strb	r3, [r7, #30]
        break;
 8009842:	bf00      	nop
    }

    if (pclk != 0U)
 8009844:	69bb      	ldr	r3, [r7, #24]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d018      	beq.n	800987c <UART_SetConfig+0x5d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	685b      	ldr	r3, [r3, #4]
 800984e:	085a      	lsrs	r2, r3, #1
 8009850:	69bb      	ldr	r3, [r7, #24]
 8009852:	441a      	add	r2, r3
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	685b      	ldr	r3, [r3, #4]
 8009858:	fbb2 f3f3 	udiv	r3, r2, r3
 800985c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	2b0f      	cmp	r3, #15
 8009862:	d909      	bls.n	8009878 <UART_SetConfig+0x5cc>
 8009864:	693b      	ldr	r3, [r7, #16]
 8009866:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800986a:	d205      	bcs.n	8009878 <UART_SetConfig+0x5cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800986c:	693b      	ldr	r3, [r7, #16]
 800986e:	b29a      	uxth	r2, r3
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	60da      	str	r2, [r3, #12]
 8009876:	e001      	b.n	800987c <UART_SetConfig+0x5d0>
      }
      else
      {
        ret = HAL_ERROR;
 8009878:	2301      	movs	r3, #1
 800987a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2200      	movs	r2, #0
 8009880:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2200      	movs	r2, #0
 8009886:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8009888:	7fbb      	ldrb	r3, [r7, #30]
}
 800988a:	4618      	mov	r0, r3
 800988c:	3720      	adds	r7, #32
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}
 8009892:	bf00      	nop
 8009894:	00f42400 	.word	0x00f42400

08009898 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b082      	sub	sp, #8
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098a4:	2bff      	cmp	r3, #255	@ 0xff
 80098a6:	d904      	bls.n	80098b2 <UART_AdvFeatureConfig+0x1a>
 80098a8:	f640 31e8 	movw	r1, #3048	@ 0xbe8
 80098ac:	488e      	ldr	r0, [pc, #568]	@ (8009ae8 <UART_AdvFeatureConfig+0x250>)
 80098ae:	f7fa fa41 	bl	8003d34 <assert_failed>

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098b6:	f003 0308 	and.w	r3, r3, #8
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d018      	beq.n	80098f0 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d009      	beq.n	80098da <UART_AdvFeatureConfig+0x42>
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80098ce:	d004      	beq.n	80098da <UART_AdvFeatureConfig+0x42>
 80098d0:	f640 31ed 	movw	r1, #3053	@ 0xbed
 80098d4:	4884      	ldr	r0, [pc, #528]	@ (8009ae8 <UART_AdvFeatureConfig+0x250>)
 80098d6:	f7fa fa2d 	bl	8003d34 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	685b      	ldr	r3, [r3, #4]
 80098e0:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	430a      	orrs	r2, r1
 80098ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098f4:	f003 0301 	and.w	r3, r3, #1
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d018      	beq.n	800992e <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009900:	2b00      	cmp	r3, #0
 8009902:	d009      	beq.n	8009918 <UART_AdvFeatureConfig+0x80>
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009908:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800990c:	d004      	beq.n	8009918 <UART_AdvFeatureConfig+0x80>
 800990e:	f640 31f4 	movw	r1, #3060	@ 0xbf4
 8009912:	4875      	ldr	r0, [pc, #468]	@ (8009ae8 <UART_AdvFeatureConfig+0x250>)
 8009914:	f7fa fa0e 	bl	8003d34 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	685b      	ldr	r3, [r3, #4]
 800991e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	430a      	orrs	r2, r1
 800992c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009932:	f003 0302 	and.w	r3, r3, #2
 8009936:	2b00      	cmp	r3, #0
 8009938:	d018      	beq.n	800996c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800993e:	2b00      	cmp	r3, #0
 8009940:	d009      	beq.n	8009956 <UART_AdvFeatureConfig+0xbe>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009946:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800994a:	d004      	beq.n	8009956 <UART_AdvFeatureConfig+0xbe>
 800994c:	f640 31fb 	movw	r1, #3067	@ 0xbfb
 8009950:	4865      	ldr	r0, [pc, #404]	@ (8009ae8 <UART_AdvFeatureConfig+0x250>)
 8009952:	f7fa f9ef 	bl	8003d34 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	685b      	ldr	r3, [r3, #4]
 800995c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	430a      	orrs	r2, r1
 800996a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009970:	f003 0304 	and.w	r3, r3, #4
 8009974:	2b00      	cmp	r3, #0
 8009976:	d018      	beq.n	80099aa <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800997c:	2b00      	cmp	r3, #0
 800997e:	d009      	beq.n	8009994 <UART_AdvFeatureConfig+0xfc>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009984:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009988:	d004      	beq.n	8009994 <UART_AdvFeatureConfig+0xfc>
 800998a:	f640 4102 	movw	r1, #3074	@ 0xc02
 800998e:	4856      	ldr	r0, [pc, #344]	@ (8009ae8 <UART_AdvFeatureConfig+0x250>)
 8009990:	f7fa f9d0 	bl	8003d34 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	685b      	ldr	r3, [r3, #4]
 800999a:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	430a      	orrs	r2, r1
 80099a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099ae:	f003 0310 	and.w	r3, r3, #16
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d018      	beq.n	80099e8 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d009      	beq.n	80099d2 <UART_AdvFeatureConfig+0x13a>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099c6:	d004      	beq.n	80099d2 <UART_AdvFeatureConfig+0x13a>
 80099c8:	f640 4109 	movw	r1, #3081	@ 0xc09
 80099cc:	4846      	ldr	r0, [pc, #280]	@ (8009ae8 <UART_AdvFeatureConfig+0x250>)
 80099ce:	f7fa f9b1 	bl	8003d34 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	689b      	ldr	r3, [r3, #8]
 80099d8:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	430a      	orrs	r2, r1
 80099e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099ec:	f003 0320 	and.w	r3, r3, #32
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d018      	beq.n	8009a26 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d009      	beq.n	8009a10 <UART_AdvFeatureConfig+0x178>
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009a04:	d004      	beq.n	8009a10 <UART_AdvFeatureConfig+0x178>
 8009a06:	f44f 6141 	mov.w	r1, #3088	@ 0xc10
 8009a0a:	4837      	ldr	r0, [pc, #220]	@ (8009ae8 <UART_AdvFeatureConfig+0x250>)
 8009a0c:	f7fa f992 	bl	8003d34 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	689b      	ldr	r3, [r3, #8]
 8009a16:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	430a      	orrs	r2, r1
 8009a24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d064      	beq.n	8009afc <UART_AdvFeatureConfig+0x264>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	4a2d      	ldr	r2, [pc, #180]	@ (8009aec <UART_AdvFeatureConfig+0x254>)
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	d013      	beq.n	8009a64 <UART_AdvFeatureConfig+0x1cc>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	4a2b      	ldr	r2, [pc, #172]	@ (8009af0 <UART_AdvFeatureConfig+0x258>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d00e      	beq.n	8009a64 <UART_AdvFeatureConfig+0x1cc>
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	4a2a      	ldr	r2, [pc, #168]	@ (8009af4 <UART_AdvFeatureConfig+0x25c>)
 8009a4c:	4293      	cmp	r3, r2
 8009a4e:	d009      	beq.n	8009a64 <UART_AdvFeatureConfig+0x1cc>
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	4a28      	ldr	r2, [pc, #160]	@ (8009af8 <UART_AdvFeatureConfig+0x260>)
 8009a56:	4293      	cmp	r3, r2
 8009a58:	d004      	beq.n	8009a64 <UART_AdvFeatureConfig+0x1cc>
 8009a5a:	f640 4117 	movw	r1, #3095	@ 0xc17
 8009a5e:	4822      	ldr	r0, [pc, #136]	@ (8009ae8 <UART_AdvFeatureConfig+0x250>)
 8009a60:	f7fa f968 	bl	8003d34 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d009      	beq.n	8009a80 <UART_AdvFeatureConfig+0x1e8>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a70:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009a74:	d004      	beq.n	8009a80 <UART_AdvFeatureConfig+0x1e8>
 8009a76:	f640 4118 	movw	r1, #3096	@ 0xc18
 8009a7a:	481b      	ldr	r0, [pc, #108]	@ (8009ae8 <UART_AdvFeatureConfig+0x250>)
 8009a7c:	f7fa f95a 	bl	8003d34 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	685b      	ldr	r3, [r3, #4]
 8009a86:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	430a      	orrs	r2, r1
 8009a94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009a9e:	d12d      	bne.n	8009afc <UART_AdvFeatureConfig+0x264>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d013      	beq.n	8009ad0 <UART_AdvFeatureConfig+0x238>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009aac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009ab0:	d00e      	beq.n	8009ad0 <UART_AdvFeatureConfig+0x238>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ab6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009aba:	d009      	beq.n	8009ad0 <UART_AdvFeatureConfig+0x238>
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ac0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009ac4:	d004      	beq.n	8009ad0 <UART_AdvFeatureConfig+0x238>
 8009ac6:	f640 411d 	movw	r1, #3101	@ 0xc1d
 8009aca:	4807      	ldr	r0, [pc, #28]	@ (8009ae8 <UART_AdvFeatureConfig+0x250>)
 8009acc:	f7fa f932 	bl	8003d34 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	685b      	ldr	r3, [r3, #4]
 8009ad6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	430a      	orrs	r2, r1
 8009ae4:	605a      	str	r2, [r3, #4]
 8009ae6:	e009      	b.n	8009afc <UART_AdvFeatureConfig+0x264>
 8009ae8:	08013508 	.word	0x08013508
 8009aec:	40011000 	.word	0x40011000
 8009af0:	40004400 	.word	0x40004400
 8009af4:	40004800 	.word	0x40004800
 8009af8:	40011400 	.word	0x40011400
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d018      	beq.n	8009b3a <UART_AdvFeatureConfig+0x2a2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d009      	beq.n	8009b24 <UART_AdvFeatureConfig+0x28c>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009b14:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009b18:	d004      	beq.n	8009b24 <UART_AdvFeatureConfig+0x28c>
 8009b1a:	f640 4125 	movw	r1, #3109	@ 0xc25
 8009b1e:	4809      	ldr	r0, [pc, #36]	@ (8009b44 <UART_AdvFeatureConfig+0x2ac>)
 8009b20:	f7fa f908 	bl	8003d34 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	685b      	ldr	r3, [r3, #4]
 8009b2a:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	430a      	orrs	r2, r1
 8009b38:	605a      	str	r2, [r3, #4]
  }
}
 8009b3a:	bf00      	nop
 8009b3c:	3708      	adds	r7, #8
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}
 8009b42:	bf00      	nop
 8009b44:	08013508 	.word	0x08013508

08009b48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b08c      	sub	sp, #48	@ 0x30
 8009b4c:	af02      	add	r7, sp, #8
 8009b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2200      	movs	r2, #0
 8009b54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009b58:	f7fa fdba 	bl	80046d0 <HAL_GetTick>
 8009b5c:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f003 0308 	and.w	r3, r3, #8
 8009b68:	2b08      	cmp	r3, #8
 8009b6a:	d12e      	bne.n	8009bca <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009b6c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009b70:	9300      	str	r3, [sp, #0]
 8009b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b74:	2200      	movs	r2, #0
 8009b76:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f000 f83b 	bl	8009bf6 <UART_WaitOnFlagUntilTimeout>
 8009b80:	4603      	mov	r3, r0
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d021      	beq.n	8009bca <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	e853 3f00 	ldrex	r3, [r3]
 8009b92:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009b9a:	623b      	str	r3, [r7, #32]
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	461a      	mov	r2, r3
 8009ba2:	6a3b      	ldr	r3, [r7, #32]
 8009ba4:	61fb      	str	r3, [r7, #28]
 8009ba6:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ba8:	69b9      	ldr	r1, [r7, #24]
 8009baa:	69fa      	ldr	r2, [r7, #28]
 8009bac:	e841 2300 	strex	r3, r2, [r1]
 8009bb0:	617b      	str	r3, [r7, #20]
   return(result);
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d1e6      	bne.n	8009b86 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2220      	movs	r2, #32
 8009bbc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009bc6:	2303      	movs	r3, #3
 8009bc8:	e011      	b.n	8009bee <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2220      	movs	r2, #32
 8009bce:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2220      	movs	r2, #32
 8009bd4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2200      	movs	r2, #0
 8009be2:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2200      	movs	r2, #0
 8009be8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8009bec:	2300      	movs	r3, #0
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	3728      	adds	r7, #40	@ 0x28
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}

08009bf6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009bf6:	b580      	push	{r7, lr}
 8009bf8:	b084      	sub	sp, #16
 8009bfa:	af00      	add	r7, sp, #0
 8009bfc:	60f8      	str	r0, [r7, #12]
 8009bfe:	60b9      	str	r1, [r7, #8]
 8009c00:	603b      	str	r3, [r7, #0]
 8009c02:	4613      	mov	r3, r2
 8009c04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c06:	e04f      	b.n	8009ca8 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c08:	69bb      	ldr	r3, [r7, #24]
 8009c0a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009c0e:	d04b      	beq.n	8009ca8 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c10:	f7fa fd5e 	bl	80046d0 <HAL_GetTick>
 8009c14:	4602      	mov	r2, r0
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	1ad3      	subs	r3, r2, r3
 8009c1a:	69ba      	ldr	r2, [r7, #24]
 8009c1c:	429a      	cmp	r2, r3
 8009c1e:	d302      	bcc.n	8009c26 <UART_WaitOnFlagUntilTimeout+0x30>
 8009c20:	69bb      	ldr	r3, [r7, #24]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d101      	bne.n	8009c2a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009c26:	2303      	movs	r3, #3
 8009c28:	e04e      	b.n	8009cc8 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f003 0304 	and.w	r3, r3, #4
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d037      	beq.n	8009ca8 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	2b80      	cmp	r3, #128	@ 0x80
 8009c3c:	d034      	beq.n	8009ca8 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	2b40      	cmp	r3, #64	@ 0x40
 8009c42:	d031      	beq.n	8009ca8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	69db      	ldr	r3, [r3, #28]
 8009c4a:	f003 0308 	and.w	r3, r3, #8
 8009c4e:	2b08      	cmp	r3, #8
 8009c50:	d110      	bne.n	8009c74 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	2208      	movs	r2, #8
 8009c58:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009c5a:	68f8      	ldr	r0, [r7, #12]
 8009c5c:	f000 f838 	bl	8009cd0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	2208      	movs	r2, #8
 8009c64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8009c70:	2301      	movs	r3, #1
 8009c72:	e029      	b.n	8009cc8 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	69db      	ldr	r3, [r3, #28]
 8009c7a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009c7e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009c82:	d111      	bne.n	8009ca8 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009c8c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009c8e:	68f8      	ldr	r0, [r7, #12]
 8009c90:	f000 f81e 	bl	8009cd0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	2220      	movs	r2, #32
 8009c98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8009ca4:	2303      	movs	r3, #3
 8009ca6:	e00f      	b.n	8009cc8 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	69da      	ldr	r2, [r3, #28]
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	4013      	ands	r3, r2
 8009cb2:	68ba      	ldr	r2, [r7, #8]
 8009cb4:	429a      	cmp	r2, r3
 8009cb6:	bf0c      	ite	eq
 8009cb8:	2301      	moveq	r3, #1
 8009cba:	2300      	movne	r3, #0
 8009cbc:	b2db      	uxtb	r3, r3
 8009cbe:	461a      	mov	r2, r3
 8009cc0:	79fb      	ldrb	r3, [r7, #7]
 8009cc2:	429a      	cmp	r2, r3
 8009cc4:	d0a0      	beq.n	8009c08 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009cc6:	2300      	movs	r3, #0
}
 8009cc8:	4618      	mov	r0, r3
 8009cca:	3710      	adds	r7, #16
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	bd80      	pop	{r7, pc}

08009cd0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009cd0:	b480      	push	{r7}
 8009cd2:	b095      	sub	sp, #84	@ 0x54
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ce0:	e853 3f00 	ldrex	r3, [r3]
 8009ce4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ce8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009cec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	461a      	mov	r2, r3
 8009cf4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009cf6:	643b      	str	r3, [r7, #64]	@ 0x40
 8009cf8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cfa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009cfc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009cfe:	e841 2300 	strex	r3, r2, [r1]
 8009d02:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d1e6      	bne.n	8009cd8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	3308      	adds	r3, #8
 8009d10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d12:	6a3b      	ldr	r3, [r7, #32]
 8009d14:	e853 3f00 	ldrex	r3, [r3]
 8009d18:	61fb      	str	r3, [r7, #28]
   return(result);
 8009d1a:	69fb      	ldr	r3, [r7, #28]
 8009d1c:	f023 0301 	bic.w	r3, r3, #1
 8009d20:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	3308      	adds	r3, #8
 8009d28:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009d2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009d2c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d2e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009d30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d32:	e841 2300 	strex	r3, r2, [r1]
 8009d36:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d1e5      	bne.n	8009d0a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009d42:	2b01      	cmp	r3, #1
 8009d44:	d118      	bne.n	8009d78 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	e853 3f00 	ldrex	r3, [r3]
 8009d52:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	f023 0310 	bic.w	r3, r3, #16
 8009d5a:	647b      	str	r3, [r7, #68]	@ 0x44
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	461a      	mov	r2, r3
 8009d62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d64:	61bb      	str	r3, [r7, #24]
 8009d66:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d68:	6979      	ldr	r1, [r7, #20]
 8009d6a:	69ba      	ldr	r2, [r7, #24]
 8009d6c:	e841 2300 	strex	r3, r2, [r1]
 8009d70:	613b      	str	r3, [r7, #16]
   return(result);
 8009d72:	693b      	ldr	r3, [r7, #16]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d1e6      	bne.n	8009d46 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2220      	movs	r2, #32
 8009d7c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2200      	movs	r2, #0
 8009d84:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009d8c:	bf00      	nop
 8009d8e:	3754      	adds	r7, #84	@ 0x54
 8009d90:	46bd      	mov	sp, r7
 8009d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d96:	4770      	bx	lr

08009d98 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b083      	sub	sp, #12
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f103 0208 	add.w	r2, r3, #8
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009db0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f103 0208 	add.w	r2, r3, #8
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f103 0208 	add.w	r2, r3, #8
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2200      	movs	r2, #0
 8009dca:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 8009dcc:	bf00      	nop
 8009dce:	370c      	adds	r7, #12
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd6:	4770      	bx	lr

08009dd8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009dd8:	b480      	push	{r7}
 8009dda:	b083      	sub	sp, #12
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2200      	movs	r2, #0
 8009de4:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 8009de6:	bf00      	nop
 8009de8:	370c      	adds	r7, #12
 8009dea:	46bd      	mov	sp, r7
 8009dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df0:	4770      	bx	lr

08009df2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8009df2:	b480      	push	{r7}
 8009df4:	b085      	sub	sp, #20
 8009df6:	af00      	add	r7, sp, #0
 8009df8:	6078      	str	r0, [r7, #4]
 8009dfa:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	685b      	ldr	r3, [r3, #4]
 8009e00:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	68fa      	ldr	r2, [r7, #12]
 8009e06:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	689a      	ldr	r2, [r3, #8]
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	689b      	ldr	r3, [r3, #8]
 8009e14:	683a      	ldr	r2, [r7, #0]
 8009e16:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	683a      	ldr	r2, [r7, #0]
 8009e1c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	687a      	ldr	r2, [r7, #4]
 8009e22:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	1c5a      	adds	r2, r3, #1
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsertEnd();
}
 8009e2e:	bf00      	nop
 8009e30:	3714      	adds	r7, #20
 8009e32:	46bd      	mov	sp, r7
 8009e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e38:	4770      	bx	lr

08009e3a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8009e3a:	b480      	push	{r7}
 8009e3c:	b085      	sub	sp, #20
 8009e3e:	af00      	add	r7, sp, #0
 8009e40:	6078      	str	r0, [r7, #4]
 8009e42:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009e50:	d103      	bne.n	8009e5a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	691b      	ldr	r3, [r3, #16]
 8009e56:	60fb      	str	r3, [r7, #12]
 8009e58:	e00c      	b.n	8009e74 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	3308      	adds	r3, #8
 8009e5e:	60fb      	str	r3, [r7, #12]
 8009e60:	e002      	b.n	8009e68 <vListInsert+0x2e>
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	685b      	ldr	r3, [r3, #4]
 8009e66:	60fb      	str	r3, [r7, #12]
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	685b      	ldr	r3, [r3, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	68ba      	ldr	r2, [r7, #8]
 8009e70:	429a      	cmp	r2, r3
 8009e72:	d2f6      	bcs.n	8009e62 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	685a      	ldr	r2, [r3, #4]
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	685b      	ldr	r3, [r3, #4]
 8009e80:	683a      	ldr	r2, [r7, #0]
 8009e82:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	68fa      	ldr	r2, [r7, #12]
 8009e88:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	683a      	ldr	r2, [r7, #0]
 8009e8e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	687a      	ldr	r2, [r7, #4]
 8009e94:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	1c5a      	adds	r2, r3, #1
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 8009ea0:	bf00      	nop
 8009ea2:	3714      	adds	r7, #20
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eaa:	4770      	bx	lr

08009eac <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009eac:	b480      	push	{r7}
 8009eae:	b085      	sub	sp, #20
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	691b      	ldr	r3, [r3, #16]
 8009eb8:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	685b      	ldr	r3, [r3, #4]
 8009ebe:	687a      	ldr	r2, [r7, #4]
 8009ec0:	6892      	ldr	r2, [r2, #8]
 8009ec2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	689b      	ldr	r3, [r3, #8]
 8009ec8:	687a      	ldr	r2, [r7, #4]
 8009eca:	6852      	ldr	r2, [r2, #4]
 8009ecc:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	685b      	ldr	r3, [r3, #4]
 8009ed2:	687a      	ldr	r2, [r7, #4]
 8009ed4:	429a      	cmp	r2, r3
 8009ed6:	d103      	bne.n	8009ee0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	689a      	ldr	r2, [r3, #8]
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	1e5a      	subs	r2, r3, #1
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	681b      	ldr	r3, [r3, #0]
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	3714      	adds	r7, #20
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efe:	4770      	bx	lr

08009f00 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b086      	sub	sp, #24
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
 8009f08:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 8009f12:	693b      	ldr	r3, [r7, #16]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d110      	bne.n	8009f3a <xQueueGenericReset+0x3a>
    __asm volatile
 8009f18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f1c:	b672      	cpsid	i
 8009f1e:	f383 8811 	msr	BASEPRI, r3
 8009f22:	f3bf 8f6f 	isb	sy
 8009f26:	f3bf 8f4f 	dsb	sy
 8009f2a:	b662      	cpsie	i
 8009f2c:	60fb      	str	r3, [r7, #12]
}
 8009f2e:	bf00      	nop
 8009f30:	f240 1137 	movw	r1, #311	@ 0x137
 8009f34:	483f      	ldr	r0, [pc, #252]	@ (800a034 <xQueueGenericReset+0x134>)
 8009f36:	f7f9 fe47 	bl	8003bc8 <vAssertCalled>

    if( ( pxQueue != NULL ) &&
 8009f3a:	693b      	ldr	r3, [r7, #16]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d05d      	beq.n	8009ffc <xQueueGenericReset+0xfc>
        ( pxQueue->uxLength >= 1U ) &&
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d059      	beq.n	8009ffc <xQueueGenericReset+0xfc>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009f4c:	693b      	ldr	r3, [r7, #16]
 8009f4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f50:	2100      	movs	r1, #0
 8009f52:	fba3 2302 	umull	r2, r3, r3, r2
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d000      	beq.n	8009f5c <xQueueGenericReset+0x5c>
 8009f5a:	2101      	movs	r1, #1
 8009f5c:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d14c      	bne.n	8009ffc <xQueueGenericReset+0xfc>
    {
        taskENTER_CRITICAL();
 8009f62:	f002 fff5 	bl	800cf50 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8009f66:	693b      	ldr	r3, [r7, #16]
 8009f68:	681a      	ldr	r2, [r3, #0]
 8009f6a:	693b      	ldr	r3, [r7, #16]
 8009f6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f6e:	6939      	ldr	r1, [r7, #16]
 8009f70:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009f72:	fb01 f303 	mul.w	r3, r1, r3
 8009f76:	441a      	add	r2, r3
 8009f78:	693b      	ldr	r3, [r7, #16]
 8009f7a:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009f7c:	693b      	ldr	r3, [r7, #16]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	681a      	ldr	r2, [r3, #0]
 8009f86:	693b      	ldr	r3, [r7, #16]
 8009f88:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8009f8a:	693b      	ldr	r3, [r7, #16]
 8009f8c:	681a      	ldr	r2, [r3, #0]
 8009f8e:	693b      	ldr	r3, [r7, #16]
 8009f90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f92:	3b01      	subs	r3, #1
 8009f94:	6939      	ldr	r1, [r7, #16]
 8009f96:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009f98:	fb01 f303 	mul.w	r3, r1, r3
 8009f9c:	441a      	add	r2, r3
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	22ff      	movs	r2, #255	@ 0xff
 8009fa6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8009faa:	693b      	ldr	r3, [r7, #16]
 8009fac:	22ff      	movs	r2, #255	@ 0xff
 8009fae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d114      	bne.n	8009fe2 <xQueueGenericReset+0xe2>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009fb8:	693b      	ldr	r3, [r7, #16]
 8009fba:	691b      	ldr	r3, [r3, #16]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d01a      	beq.n	8009ff6 <xQueueGenericReset+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009fc0:	693b      	ldr	r3, [r7, #16]
 8009fc2:	3310      	adds	r3, #16
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	f001 fdc9 	bl	800bb5c <xTaskRemoveFromEventList>
 8009fca:	4603      	mov	r3, r0
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d012      	beq.n	8009ff6 <xQueueGenericReset+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8009fd0:	4b19      	ldr	r3, [pc, #100]	@ (800a038 <xQueueGenericReset+0x138>)
 8009fd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009fd6:	601a      	str	r2, [r3, #0]
 8009fd8:	f3bf 8f4f 	dsb	sy
 8009fdc:	f3bf 8f6f 	isb	sy
 8009fe0:	e009      	b.n	8009ff6 <xQueueGenericReset+0xf6>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009fe2:	693b      	ldr	r3, [r7, #16]
 8009fe4:	3310      	adds	r3, #16
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f7ff fed6 	bl	8009d98 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009fec:	693b      	ldr	r3, [r7, #16]
 8009fee:	3324      	adds	r3, #36	@ 0x24
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	f7ff fed1 	bl	8009d98 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8009ff6:	f002 ffe3 	bl	800cfc0 <vPortExitCritical>
 8009ffa:	e001      	b.n	800a000 <xQueueGenericReset+0x100>
    }
    else
    {
        xReturn = pdFAIL;
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d110      	bne.n	800a028 <xQueueGenericReset+0x128>
    __asm volatile
 800a006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a00a:	b672      	cpsid	i
 800a00c:	f383 8811 	msr	BASEPRI, r3
 800a010:	f3bf 8f6f 	isb	sy
 800a014:	f3bf 8f4f 	dsb	sy
 800a018:	b662      	cpsie	i
 800a01a:	60bb      	str	r3, [r7, #8]
}
 800a01c:	bf00      	nop
 800a01e:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 800a022:	4804      	ldr	r0, [pc, #16]	@ (800a034 <xQueueGenericReset+0x134>)
 800a024:	f7f9 fdd0 	bl	8003bc8 <vAssertCalled>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 800a028:	697b      	ldr	r3, [r7, #20]
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	3718      	adds	r7, #24
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}
 800a032:	bf00      	nop
 800a034:	08013544 	.word	0x08013544
 800a038:	e000ed04 	.word	0xe000ed04

0800a03c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b08a      	sub	sp, #40	@ 0x28
 800a040:	af02      	add	r7, sp, #8
 800a042:	60f8      	str	r0, [r7, #12]
 800a044:	60b9      	str	r1, [r7, #8]
 800a046:	4613      	mov	r3, r2
 800a048:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800a04a:	2300      	movs	r3, #0
 800a04c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d02e      	beq.n	800a0b2 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800a054:	2100      	movs	r1, #0
 800a056:	68ba      	ldr	r2, [r7, #8]
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	fba3 2302 	umull	r2, r3, r3, r2
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d000      	beq.n	800a064 <xQueueGenericCreate+0x28>
 800a062:	2101      	movs	r1, #1
 800a064:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800a066:	2b00      	cmp	r3, #0
 800a068:	d123      	bne.n	800a0b2 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	68ba      	ldr	r2, [r7, #8]
 800a06e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800a072:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800a076:	d81c      	bhi.n	800a0b2 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	68ba      	ldr	r2, [r7, #8]
 800a07c:	fb02 f303 	mul.w	r3, r2, r3
 800a080:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800a082:	69bb      	ldr	r3, [r7, #24]
 800a084:	3350      	adds	r3, #80	@ 0x50
 800a086:	4618      	mov	r0, r3
 800a088:	f7fa f906 	bl	8004298 <pvPortMalloc>
 800a08c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800a08e:	69fb      	ldr	r3, [r7, #28]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d022      	beq.n	800a0da <xQueueGenericCreate+0x9e>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a094:	69fb      	ldr	r3, [r7, #28]
 800a096:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 800a098:	697b      	ldr	r3, [r7, #20]
 800a09a:	3350      	adds	r3, #80	@ 0x50
 800a09c:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a09e:	79fa      	ldrb	r2, [r7, #7]
 800a0a0:	69fb      	ldr	r3, [r7, #28]
 800a0a2:	9300      	str	r3, [sp, #0]
 800a0a4:	4613      	mov	r3, r2
 800a0a6:	697a      	ldr	r2, [r7, #20]
 800a0a8:	68b9      	ldr	r1, [r7, #8]
 800a0aa:	68f8      	ldr	r0, [r7, #12]
 800a0ac:	f000 f81c 	bl	800a0e8 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800a0b0:	e013      	b.n	800a0da <xQueueGenericCreate+0x9e>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800a0b2:	69fb      	ldr	r3, [r7, #28]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d110      	bne.n	800a0da <xQueueGenericCreate+0x9e>
    __asm volatile
 800a0b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0bc:	b672      	cpsid	i
 800a0be:	f383 8811 	msr	BASEPRI, r3
 800a0c2:	f3bf 8f6f 	isb	sy
 800a0c6:	f3bf 8f4f 	dsb	sy
 800a0ca:	b662      	cpsie	i
 800a0cc:	613b      	str	r3, [r7, #16]
}
 800a0ce:	bf00      	nop
 800a0d0:	f240 212a 	movw	r1, #554	@ 0x22a
 800a0d4:	4803      	ldr	r0, [pc, #12]	@ (800a0e4 <xQueueGenericCreate+0xa8>)
 800a0d6:	f7f9 fd77 	bl	8003bc8 <vAssertCalled>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
 800a0da:	69fb      	ldr	r3, [r7, #28]
    }
 800a0dc:	4618      	mov	r0, r3
 800a0de:	3720      	adds	r7, #32
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}
 800a0e4:	08013544 	.word	0x08013544

0800a0e8 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b084      	sub	sp, #16
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	60f8      	str	r0, [r7, #12]
 800a0f0:	60b9      	str	r1, [r7, #8]
 800a0f2:	607a      	str	r2, [r7, #4]
 800a0f4:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d103      	bne.n	800a104 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a0fc:	69bb      	ldr	r3, [r7, #24]
 800a0fe:	69ba      	ldr	r2, [r7, #24]
 800a100:	601a      	str	r2, [r3, #0]
 800a102:	e002      	b.n	800a10a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a104:	69bb      	ldr	r3, [r7, #24]
 800a106:	687a      	ldr	r2, [r7, #4]
 800a108:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800a10a:	69bb      	ldr	r3, [r7, #24]
 800a10c:	68fa      	ldr	r2, [r7, #12]
 800a10e:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800a110:	69bb      	ldr	r3, [r7, #24]
 800a112:	68ba      	ldr	r2, [r7, #8]
 800a114:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a116:	2101      	movs	r1, #1
 800a118:	69b8      	ldr	r0, [r7, #24]
 800a11a:	f7ff fef1 	bl	8009f00 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800a11e:	69bb      	ldr	r3, [r7, #24]
 800a120:	78fa      	ldrb	r2, [r7, #3]
 800a122:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800a126:	bf00      	nop
 800a128:	3710      	adds	r7, #16
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}

0800a12e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 800a12e:	b580      	push	{r7, lr}
 800a130:	b082      	sub	sp, #8
 800a132:	af00      	add	r7, sp, #0
 800a134:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d00e      	beq.n	800a15a <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2200      	movs	r2, #0
 800a140:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2200      	movs	r2, #0
 800a146:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2200      	movs	r2, #0
 800a14c:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a14e:	2300      	movs	r3, #0
 800a150:	2200      	movs	r2, #0
 800a152:	2100      	movs	r1, #0
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f000 f897 	bl	800a288 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 800a15a:	bf00      	nop
 800a15c:	3708      	adds	r7, #8
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}

0800a162 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 800a162:	b580      	push	{r7, lr}
 800a164:	b086      	sub	sp, #24
 800a166:	af00      	add	r7, sp, #0
 800a168:	4603      	mov	r3, r0
 800a16a:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a16c:	2301      	movs	r3, #1
 800a16e:	617b      	str	r3, [r7, #20]
 800a170:	2300      	movs	r3, #0
 800a172:	613b      	str	r3, [r7, #16]

        traceENTER_xQueueCreateMutex( ucQueueType );

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a174:	79fb      	ldrb	r3, [r7, #7]
 800a176:	461a      	mov	r2, r3
 800a178:	6939      	ldr	r1, [r7, #16]
 800a17a:	6978      	ldr	r0, [r7, #20]
 800a17c:	f7ff ff5e 	bl	800a03c <xQueueGenericCreate>
 800a180:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a182:	68f8      	ldr	r0, [r7, #12]
 800a184:	f7ff ffd3 	bl	800a12e <prvInitialiseMutex>

        traceRETURN_xQueueCreateMutex( xNewQueue );

        return xNewQueue;
 800a188:	68fb      	ldr	r3, [r7, #12]
    }
 800a18a:	4618      	mov	r0, r3
 800a18c:	3718      	adds	r7, #24
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}
	...

0800a194 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

    BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
    {
 800a194:	b590      	push	{r4, r7, lr}
 800a196:	b087      	sub	sp, #28
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	613b      	str	r3, [r7, #16]

        traceENTER_xQueueGiveMutexRecursive( xMutex );

        configASSERT( pxMutex );
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d110      	bne.n	800a1c8 <xQueueGiveMutexRecursive+0x34>
    __asm volatile
 800a1a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1aa:	b672      	cpsid	i
 800a1ac:	f383 8811 	msr	BASEPRI, r3
 800a1b0:	f3bf 8f6f 	isb	sy
 800a1b4:	f3bf 8f4f 	dsb	sy
 800a1b8:	b662      	cpsie	i
 800a1ba:	60fb      	str	r3, [r7, #12]
}
 800a1bc:	bf00      	nop
 800a1be:	f240 21fb 	movw	r1, #763	@ 0x2fb
 800a1c2:	4811      	ldr	r0, [pc, #68]	@ (800a208 <xQueueGiveMutexRecursive+0x74>)
 800a1c4:	f7f9 fd00 	bl	8003bc8 <vAssertCalled>
         * change outside of this task.  If this task does not hold the mutex then
         * pxMutexHolder can never coincidentally equal the tasks handle, and as
         * this is the only condition we are interested in it does not matter if
         * pxMutexHolder is accessed simultaneously by another task.  Therefore no
         * mutual exclusion is required to test the pxMutexHolder variable. */
        if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a1c8:	693b      	ldr	r3, [r7, #16]
 800a1ca:	689c      	ldr	r4, [r3, #8]
 800a1cc:	f001 ffd2 	bl	800c174 <xTaskGetCurrentTaskHandle>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	429c      	cmp	r4, r3
 800a1d4:	d111      	bne.n	800a1fa <xQueueGiveMutexRecursive+0x66>
            /* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
             * the task handle, therefore no underflow check is required.  Also,
             * uxRecursiveCallCount is only modified by the mutex holder, and as
             * there can only be one, no mutual exclusion is required to modify the
             * uxRecursiveCallCount member. */
            ( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800a1d6:	693b      	ldr	r3, [r7, #16]
 800a1d8:	68db      	ldr	r3, [r3, #12]
 800a1da:	1e5a      	subs	r2, r3, #1
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	60da      	str	r2, [r3, #12]

            /* Has the recursive call count unwound to 0? */
            if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800a1e0:	693b      	ldr	r3, [r7, #16]
 800a1e2:	68db      	ldr	r3, [r3, #12]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d105      	bne.n	800a1f4 <xQueueGiveMutexRecursive+0x60>
            {
                /* Return the mutex.  This will automatically unblock any other
                 * task that might be waiting to access the mutex. */
                ( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	2100      	movs	r1, #0
 800a1ee:	6938      	ldr	r0, [r7, #16]
 800a1f0:	f000 f84a 	bl	800a288 <xQueueGenericSend>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            xReturn = pdPASS;
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	617b      	str	r3, [r7, #20]
 800a1f8:	e001      	b.n	800a1fe <xQueueGiveMutexRecursive+0x6a>
        }
        else
        {
            /* The mutex cannot be given because the calling task is not the
             * holder. */
            xReturn = pdFAIL;
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	617b      	str	r3, [r7, #20]
            traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
        }

        traceRETURN_xQueueGiveMutexRecursive( xReturn );

        return xReturn;
 800a1fe:	697b      	ldr	r3, [r7, #20]
    }
 800a200:	4618      	mov	r0, r3
 800a202:	371c      	adds	r7, #28
 800a204:	46bd      	mov	sp, r7
 800a206:	bd90      	pop	{r4, r7, pc}
 800a208:	08013544 	.word	0x08013544

0800a20c <xQueueTakeMutexRecursive>:

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

    BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex,
                                         TickType_t xTicksToWait )
    {
 800a20c:	b590      	push	{r4, r7, lr}
 800a20e:	b087      	sub	sp, #28
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
 800a214:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn;
        Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	613b      	str	r3, [r7, #16]

        traceENTER_xQueueTakeMutexRecursive( xMutex, xTicksToWait );

        configASSERT( pxMutex );
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d110      	bne.n	800a242 <xQueueTakeMutexRecursive+0x36>
    __asm volatile
 800a220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a224:	b672      	cpsid	i
 800a226:	f383 8811 	msr	BASEPRI, r3
 800a22a:	f3bf 8f6f 	isb	sy
 800a22e:	f3bf 8f4f 	dsb	sy
 800a232:	b662      	cpsie	i
 800a234:	60fb      	str	r3, [r7, #12]
}
 800a236:	bf00      	nop
 800a238:	f240 3137 	movw	r1, #823	@ 0x337
 800a23c:	4811      	ldr	r0, [pc, #68]	@ (800a284 <xQueueTakeMutexRecursive+0x78>)
 800a23e:	f7f9 fcc3 	bl	8003bc8 <vAssertCalled>
        /* Comments regarding mutual exclusion as per those within
         * xQueueGiveMutexRecursive(). */

        traceTAKE_MUTEX_RECURSIVE( pxMutex );

        if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	689c      	ldr	r4, [r3, #8]
 800a246:	f001 ff95 	bl	800c174 <xTaskGetCurrentTaskHandle>
 800a24a:	4603      	mov	r3, r0
 800a24c:	429c      	cmp	r4, r3
 800a24e:	d107      	bne.n	800a260 <xQueueTakeMutexRecursive+0x54>
        {
            ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a250:	693b      	ldr	r3, [r7, #16]
 800a252:	68db      	ldr	r3, [r3, #12]
 800a254:	1c5a      	adds	r2, r3, #1
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	60da      	str	r2, [r3, #12]
            xReturn = pdPASS;
 800a25a:	2301      	movs	r3, #1
 800a25c:	617b      	str	r3, [r7, #20]
 800a25e:	e00c      	b.n	800a27a <xQueueTakeMutexRecursive+0x6e>
        }
        else
        {
            xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800a260:	6839      	ldr	r1, [r7, #0]
 800a262:	6938      	ldr	r0, [r7, #16]
 800a264:	f000 fa1c 	bl	800a6a0 <xQueueSemaphoreTake>
 800a268:	6178      	str	r0, [r7, #20]

            /* pdPASS will only be returned if the mutex was successfully
             * obtained.  The calling task may have entered the Blocked state
             * before reaching here. */
            if( xReturn != pdFAIL )
 800a26a:	697b      	ldr	r3, [r7, #20]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d004      	beq.n	800a27a <xQueueTakeMutexRecursive+0x6e>
            {
                ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	68db      	ldr	r3, [r3, #12]
 800a274:	1c5a      	adds	r2, r3, #1
 800a276:	693b      	ldr	r3, [r7, #16]
 800a278:	60da      	str	r2, [r3, #12]
            }
        }

        traceRETURN_xQueueTakeMutexRecursive( xReturn );

        return xReturn;
 800a27a:	697b      	ldr	r3, [r7, #20]
    }
 800a27c:	4618      	mov	r0, r3
 800a27e:	371c      	adds	r7, #28
 800a280:	46bd      	mov	sp, r7
 800a282:	bd90      	pop	{r4, r7, pc}
 800a284:	08013544 	.word	0x08013544

0800a288 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b08e      	sub	sp, #56	@ 0x38
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	60f8      	str	r0, [r7, #12]
 800a290:	60b9      	str	r1, [r7, #8]
 800a292:	607a      	str	r2, [r7, #4]
 800a294:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a296:	2300      	movs	r3, #0
 800a298:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	633b      	str	r3, [r7, #48]	@ 0x30

    traceENTER_xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );

    configASSERT( pxQueue );
 800a29e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d110      	bne.n	800a2c6 <xQueueGenericSend+0x3e>
    __asm volatile
 800a2a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2a8:	b672      	cpsid	i
 800a2aa:	f383 8811 	msr	BASEPRI, r3
 800a2ae:	f3bf 8f6f 	isb	sy
 800a2b2:	f3bf 8f4f 	dsb	sy
 800a2b6:	b662      	cpsie	i
 800a2b8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a2ba:	bf00      	nop
 800a2bc:	f240 31b6 	movw	r1, #950	@ 0x3b6
 800a2c0:	487b      	ldr	r0, [pc, #492]	@ (800a4b0 <xQueueGenericSend+0x228>)
 800a2c2:	f7f9 fc81 	bl	8003bc8 <vAssertCalled>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d103      	bne.n	800a2d4 <xQueueGenericSend+0x4c>
 800a2cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d101      	bne.n	800a2d8 <xQueueGenericSend+0x50>
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	e000      	b.n	800a2da <xQueueGenericSend+0x52>
 800a2d8:	2300      	movs	r3, #0
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d110      	bne.n	800a300 <xQueueGenericSend+0x78>
    __asm volatile
 800a2de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2e2:	b672      	cpsid	i
 800a2e4:	f383 8811 	msr	BASEPRI, r3
 800a2e8:	f3bf 8f6f 	isb	sy
 800a2ec:	f3bf 8f4f 	dsb	sy
 800a2f0:	b662      	cpsie	i
 800a2f2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a2f4:	bf00      	nop
 800a2f6:	f240 31b7 	movw	r1, #951	@ 0x3b7
 800a2fa:	486d      	ldr	r0, [pc, #436]	@ (800a4b0 <xQueueGenericSend+0x228>)
 800a2fc:	f7f9 fc64 	bl	8003bc8 <vAssertCalled>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	2b02      	cmp	r3, #2
 800a304:	d103      	bne.n	800a30e <xQueueGenericSend+0x86>
 800a306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a308:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a30a:	2b01      	cmp	r3, #1
 800a30c:	d101      	bne.n	800a312 <xQueueGenericSend+0x8a>
 800a30e:	2301      	movs	r3, #1
 800a310:	e000      	b.n	800a314 <xQueueGenericSend+0x8c>
 800a312:	2300      	movs	r3, #0
 800a314:	2b00      	cmp	r3, #0
 800a316:	d110      	bne.n	800a33a <xQueueGenericSend+0xb2>
    __asm volatile
 800a318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a31c:	b672      	cpsid	i
 800a31e:	f383 8811 	msr	BASEPRI, r3
 800a322:	f3bf 8f6f 	isb	sy
 800a326:	f3bf 8f4f 	dsb	sy
 800a32a:	b662      	cpsie	i
 800a32c:	623b      	str	r3, [r7, #32]
}
 800a32e:	bf00      	nop
 800a330:	f44f 716e 	mov.w	r1, #952	@ 0x3b8
 800a334:	485e      	ldr	r0, [pc, #376]	@ (800a4b0 <xQueueGenericSend+0x228>)
 800a336:	f7f9 fc47 	bl	8003bc8 <vAssertCalled>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a33a:	f001 ff2b 	bl	800c194 <xTaskGetSchedulerState>
 800a33e:	4603      	mov	r3, r0
 800a340:	2b00      	cmp	r3, #0
 800a342:	d102      	bne.n	800a34a <xQueueGenericSend+0xc2>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d101      	bne.n	800a34e <xQueueGenericSend+0xc6>
 800a34a:	2301      	movs	r3, #1
 800a34c:	e000      	b.n	800a350 <xQueueGenericSend+0xc8>
 800a34e:	2300      	movs	r3, #0
 800a350:	2b00      	cmp	r3, #0
 800a352:	d110      	bne.n	800a376 <xQueueGenericSend+0xee>
    __asm volatile
 800a354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a358:	b672      	cpsid	i
 800a35a:	f383 8811 	msr	BASEPRI, r3
 800a35e:	f3bf 8f6f 	isb	sy
 800a362:	f3bf 8f4f 	dsb	sy
 800a366:	b662      	cpsie	i
 800a368:	61fb      	str	r3, [r7, #28]
}
 800a36a:	bf00      	nop
 800a36c:	f240 31bb 	movw	r1, #955	@ 0x3bb
 800a370:	484f      	ldr	r0, [pc, #316]	@ (800a4b0 <xQueueGenericSend+0x228>)
 800a372:	f7f9 fc29 	bl	8003bc8 <vAssertCalled>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 800a376:	f002 fdeb 	bl	800cf50 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a37a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a37c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a37e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a380:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a382:	429a      	cmp	r2, r3
 800a384:	d302      	bcc.n	800a38c <xQueueGenericSend+0x104>
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	2b02      	cmp	r3, #2
 800a38a:	d129      	bne.n	800a3e0 <xQueueGenericSend+0x158>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a38c:	683a      	ldr	r2, [r7, #0]
 800a38e:	68b9      	ldr	r1, [r7, #8]
 800a390:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a392:	f000 fad3 	bl	800a93c <prvCopyDataToQueue>
 800a396:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a39a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d010      	beq.n	800a3c2 <xQueueGenericSend+0x13a>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a3a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3a2:	3324      	adds	r3, #36	@ 0x24
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f001 fbd9 	bl	800bb5c <xTaskRemoveFromEventList>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d013      	beq.n	800a3d8 <xQueueGenericSend+0x150>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 800a3b0:	4b40      	ldr	r3, [pc, #256]	@ (800a4b4 <xQueueGenericSend+0x22c>)
 800a3b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a3b6:	601a      	str	r2, [r3, #0]
 800a3b8:	f3bf 8f4f 	dsb	sy
 800a3bc:	f3bf 8f6f 	isb	sy
 800a3c0:	e00a      	b.n	800a3d8 <xQueueGenericSend+0x150>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 800a3c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d007      	beq.n	800a3d8 <xQueueGenericSend+0x150>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 800a3c8:	4b3a      	ldr	r3, [pc, #232]	@ (800a4b4 <xQueueGenericSend+0x22c>)
 800a3ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a3ce:	601a      	str	r2, [r3, #0]
 800a3d0:	f3bf 8f4f 	dsb	sy
 800a3d4:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800a3d8:	f002 fdf2 	bl	800cfc0 <vPortExitCritical>

                traceRETURN_xQueueGenericSend( pdPASS );

                return pdPASS;
 800a3dc:	2301      	movs	r3, #1
 800a3de:	e063      	b.n	800a4a8 <xQueueGenericSend+0x220>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d103      	bne.n	800a3ee <xQueueGenericSend+0x166>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800a3e6:	f002 fdeb 	bl	800cfc0 <vPortExitCritical>
                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );

                    return errQUEUE_FULL;
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	e05c      	b.n	800a4a8 <xQueueGenericSend+0x220>
                }
                else if( xEntryTimeSet == pdFALSE )
 800a3ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d106      	bne.n	800a402 <xQueueGenericSend+0x17a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800a3f4:	f107 0314 	add.w	r3, r7, #20
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	f001 fc8d 	bl	800bd18 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800a3fe:	2301      	movs	r3, #1
 800a400:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800a402:	f002 fddd 	bl	800cfc0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800a406:	f000 ffa1 	bl	800b34c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800a40a:	f002 fda1 	bl	800cf50 <vPortEnterCritical>
 800a40e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a410:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a414:	b25b      	sxtb	r3, r3
 800a416:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a41a:	d103      	bne.n	800a424 <xQueueGenericSend+0x19c>
 800a41c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a41e:	2200      	movs	r2, #0
 800a420:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a426:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a42a:	b25b      	sxtb	r3, r3
 800a42c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a430:	d103      	bne.n	800a43a <xQueueGenericSend+0x1b2>
 800a432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a434:	2200      	movs	r2, #0
 800a436:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a43a:	f002 fdc1 	bl	800cfc0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a43e:	1d3a      	adds	r2, r7, #4
 800a440:	f107 0314 	add.w	r3, r7, #20
 800a444:	4611      	mov	r1, r2
 800a446:	4618      	mov	r0, r3
 800a448:	f001 fc7c 	bl	800bd44 <xTaskCheckForTimeOut>
 800a44c:	4603      	mov	r3, r0
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d124      	bne.n	800a49c <xQueueGenericSend+0x214>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a452:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a454:	f000 fb6a 	bl	800ab2c <prvIsQueueFull>
 800a458:	4603      	mov	r3, r0
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d018      	beq.n	800a490 <xQueueGenericSend+0x208>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a45e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a460:	3310      	adds	r3, #16
 800a462:	687a      	ldr	r2, [r7, #4]
 800a464:	4611      	mov	r1, r2
 800a466:	4618      	mov	r0, r3
 800a468:	f001 fafe 	bl	800ba68 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800a46c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a46e:	f000 faf5 	bl	800aa5c <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800a472:	f000 ff79 	bl	800b368 <xTaskResumeAll>
 800a476:	4603      	mov	r3, r0
 800a478:	2b00      	cmp	r3, #0
 800a47a:	f47f af7c 	bne.w	800a376 <xQueueGenericSend+0xee>
                {
                    taskYIELD_WITHIN_API();
 800a47e:	4b0d      	ldr	r3, [pc, #52]	@ (800a4b4 <xQueueGenericSend+0x22c>)
 800a480:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a484:	601a      	str	r2, [r3, #0]
 800a486:	f3bf 8f4f 	dsb	sy
 800a48a:	f3bf 8f6f 	isb	sy
 800a48e:	e772      	b.n	800a376 <xQueueGenericSend+0xee>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800a490:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a492:	f000 fae3 	bl	800aa5c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800a496:	f000 ff67 	bl	800b368 <xTaskResumeAll>
 800a49a:	e76c      	b.n	800a376 <xQueueGenericSend+0xee>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800a49c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a49e:	f000 fadd 	bl	800aa5c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800a4a2:	f000 ff61 	bl	800b368 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );

            return errQUEUE_FULL;
 800a4a6:	2300      	movs	r3, #0
        }
    }
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	3738      	adds	r7, #56	@ 0x38
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bd80      	pop	{r7, pc}
 800a4b0:	08013544 	.word	0x08013544
 800a4b4:	e000ed04 	.word	0xe000ed04

0800a4b8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b08c      	sub	sp, #48	@ 0x30
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	60f8      	str	r0, [r7, #12]
 800a4c0:	60b9      	str	r1, [r7, #8]
 800a4c2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800a4cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d110      	bne.n	800a4f4 <xQueueReceive+0x3c>
    __asm volatile
 800a4d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4d6:	b672      	cpsid	i
 800a4d8:	f383 8811 	msr	BASEPRI, r3
 800a4dc:	f3bf 8f6f 	isb	sy
 800a4e0:	f3bf 8f4f 	dsb	sy
 800a4e4:	b662      	cpsie	i
 800a4e6:	623b      	str	r3, [r7, #32]
}
 800a4e8:	bf00      	nop
 800a4ea:	f240 51e9 	movw	r1, #1513	@ 0x5e9
 800a4ee:	486a      	ldr	r0, [pc, #424]	@ (800a698 <xQueueReceive+0x1e0>)
 800a4f0:	f7f9 fb6a 	bl	8003bc8 <vAssertCalled>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d103      	bne.n	800a502 <xQueueReceive+0x4a>
 800a4fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d101      	bne.n	800a506 <xQueueReceive+0x4e>
 800a502:	2301      	movs	r3, #1
 800a504:	e000      	b.n	800a508 <xQueueReceive+0x50>
 800a506:	2300      	movs	r3, #0
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d110      	bne.n	800a52e <xQueueReceive+0x76>
    __asm volatile
 800a50c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a510:	b672      	cpsid	i
 800a512:	f383 8811 	msr	BASEPRI, r3
 800a516:	f3bf 8f6f 	isb	sy
 800a51a:	f3bf 8f4f 	dsb	sy
 800a51e:	b662      	cpsie	i
 800a520:	61fb      	str	r3, [r7, #28]
}
 800a522:	bf00      	nop
 800a524:	f240 51ed 	movw	r1, #1517	@ 0x5ed
 800a528:	485b      	ldr	r0, [pc, #364]	@ (800a698 <xQueueReceive+0x1e0>)
 800a52a:	f7f9 fb4d 	bl	8003bc8 <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a52e:	f001 fe31 	bl	800c194 <xTaskGetSchedulerState>
 800a532:	4603      	mov	r3, r0
 800a534:	2b00      	cmp	r3, #0
 800a536:	d102      	bne.n	800a53e <xQueueReceive+0x86>
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d101      	bne.n	800a542 <xQueueReceive+0x8a>
 800a53e:	2301      	movs	r3, #1
 800a540:	e000      	b.n	800a544 <xQueueReceive+0x8c>
 800a542:	2300      	movs	r3, #0
 800a544:	2b00      	cmp	r3, #0
 800a546:	d110      	bne.n	800a56a <xQueueReceive+0xb2>
    __asm volatile
 800a548:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a54c:	b672      	cpsid	i
 800a54e:	f383 8811 	msr	BASEPRI, r3
 800a552:	f3bf 8f6f 	isb	sy
 800a556:	f3bf 8f4f 	dsb	sy
 800a55a:	b662      	cpsie	i
 800a55c:	61bb      	str	r3, [r7, #24]
}
 800a55e:	bf00      	nop
 800a560:	f240 51f2 	movw	r1, #1522	@ 0x5f2
 800a564:	484c      	ldr	r0, [pc, #304]	@ (800a698 <xQueueReceive+0x1e0>)
 800a566:	f7f9 fb2f 	bl	8003bc8 <vAssertCalled>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 800a56a:	f002 fcf1 	bl	800cf50 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a56e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a572:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a576:	2b00      	cmp	r3, #0
 800a578:	d01f      	beq.n	800a5ba <xQueueReceive+0x102>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a57a:	68b9      	ldr	r1, [r7, #8]
 800a57c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a57e:	f000 fa47 	bl	800aa10 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 800a582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a584:	1e5a      	subs	r2, r3, #1
 800a586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a588:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a58a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a58c:	691b      	ldr	r3, [r3, #16]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d00f      	beq.n	800a5b2 <xQueueReceive+0xfa>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a594:	3310      	adds	r3, #16
 800a596:	4618      	mov	r0, r3
 800a598:	f001 fae0 	bl	800bb5c <xTaskRemoveFromEventList>
 800a59c:	4603      	mov	r3, r0
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d007      	beq.n	800a5b2 <xQueueReceive+0xfa>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800a5a2:	4b3e      	ldr	r3, [pc, #248]	@ (800a69c <xQueueReceive+0x1e4>)
 800a5a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a5a8:	601a      	str	r2, [r3, #0]
 800a5aa:	f3bf 8f4f 	dsb	sy
 800a5ae:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800a5b2:	f002 fd05 	bl	800cfc0 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	e069      	b.n	800a68e <xQueueReceive+0x1d6>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d103      	bne.n	800a5c8 <xQueueReceive+0x110>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800a5c0:	f002 fcfe 	bl	800cfc0 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	e062      	b.n	800a68e <xQueueReceive+0x1d6>
                }
                else if( xEntryTimeSet == pdFALSE )
 800a5c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d106      	bne.n	800a5dc <xQueueReceive+0x124>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800a5ce:	f107 0310 	add.w	r3, r7, #16
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	f001 fba0 	bl	800bd18 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800a5d8:	2301      	movs	r3, #1
 800a5da:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800a5dc:	f002 fcf0 	bl	800cfc0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800a5e0:	f000 feb4 	bl	800b34c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800a5e4:	f002 fcb4 	bl	800cf50 <vPortEnterCritical>
 800a5e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5ea:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a5ee:	b25b      	sxtb	r3, r3
 800a5f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a5f4:	d103      	bne.n	800a5fe <xQueueReceive+0x146>
 800a5f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a5fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a600:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a604:	b25b      	sxtb	r3, r3
 800a606:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a60a:	d103      	bne.n	800a614 <xQueueReceive+0x15c>
 800a60c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a60e:	2200      	movs	r2, #0
 800a610:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a614:	f002 fcd4 	bl	800cfc0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a618:	1d3a      	adds	r2, r7, #4
 800a61a:	f107 0310 	add.w	r3, r7, #16
 800a61e:	4611      	mov	r1, r2
 800a620:	4618      	mov	r0, r3
 800a622:	f001 fb8f 	bl	800bd44 <xTaskCheckForTimeOut>
 800a626:	4603      	mov	r3, r0
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d123      	bne.n	800a674 <xQueueReceive+0x1bc>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a62c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a62e:	f000 fa67 	bl	800ab00 <prvIsQueueEmpty>
 800a632:	4603      	mov	r3, r0
 800a634:	2b00      	cmp	r3, #0
 800a636:	d017      	beq.n	800a668 <xQueueReceive+0x1b0>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a63a:	3324      	adds	r3, #36	@ 0x24
 800a63c:	687a      	ldr	r2, [r7, #4]
 800a63e:	4611      	mov	r1, r2
 800a640:	4618      	mov	r0, r3
 800a642:	f001 fa11 	bl	800ba68 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800a646:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a648:	f000 fa08 	bl	800aa5c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800a64c:	f000 fe8c 	bl	800b368 <xTaskResumeAll>
 800a650:	4603      	mov	r3, r0
 800a652:	2b00      	cmp	r3, #0
 800a654:	d189      	bne.n	800a56a <xQueueReceive+0xb2>
                {
                    taskYIELD_WITHIN_API();
 800a656:	4b11      	ldr	r3, [pc, #68]	@ (800a69c <xQueueReceive+0x1e4>)
 800a658:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a65c:	601a      	str	r2, [r3, #0]
 800a65e:	f3bf 8f4f 	dsb	sy
 800a662:	f3bf 8f6f 	isb	sy
 800a666:	e780      	b.n	800a56a <xQueueReceive+0xb2>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800a668:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a66a:	f000 f9f7 	bl	800aa5c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800a66e:	f000 fe7b 	bl	800b368 <xTaskResumeAll>
 800a672:	e77a      	b.n	800a56a <xQueueReceive+0xb2>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800a674:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a676:	f000 f9f1 	bl	800aa5c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800a67a:	f000 fe75 	bl	800b368 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a67e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a680:	f000 fa3e 	bl	800ab00 <prvIsQueueEmpty>
 800a684:	4603      	mov	r3, r0
 800a686:	2b00      	cmp	r3, #0
 800a688:	f43f af6f 	beq.w	800a56a <xQueueReceive+0xb2>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 800a68c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 800a68e:	4618      	mov	r0, r3
 800a690:	3730      	adds	r7, #48	@ 0x30
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}
 800a696:	bf00      	nop
 800a698:	08013544 	.word	0x08013544
 800a69c:	e000ed04 	.word	0xe000ed04

0800a6a0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b08c      	sub	sp, #48	@ 0x30
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
 800a6a8:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	627b      	str	r3, [r7, #36]	@ 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    #endif

    traceENTER_xQueueSemaphoreTake( xQueue, xTicksToWait );

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800a6b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d110      	bne.n	800a6de <xQueueSemaphoreTake+0x3e>
    __asm volatile
 800a6bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6c0:	b672      	cpsid	i
 800a6c2:	f383 8811 	msr	BASEPRI, r3
 800a6c6:	f3bf 8f6f 	isb	sy
 800a6ca:	f3bf 8f4f 	dsb	sy
 800a6ce:	b662      	cpsie	i
 800a6d0:	61bb      	str	r3, [r7, #24]
}
 800a6d2:	bf00      	nop
 800a6d4:	f240 6182 	movw	r1, #1666	@ 0x682
 800a6d8:	4878      	ldr	r0, [pc, #480]	@ (800a8bc <xQueueSemaphoreTake+0x21c>)
 800a6da:	f7f9 fa75 	bl	8003bc8 <vAssertCalled>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800a6de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d010      	beq.n	800a708 <xQueueSemaphoreTake+0x68>
    __asm volatile
 800a6e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6ea:	b672      	cpsid	i
 800a6ec:	f383 8811 	msr	BASEPRI, r3
 800a6f0:	f3bf 8f6f 	isb	sy
 800a6f4:	f3bf 8f4f 	dsb	sy
 800a6f8:	b662      	cpsie	i
 800a6fa:	617b      	str	r3, [r7, #20]
}
 800a6fc:	bf00      	nop
 800a6fe:	f240 6186 	movw	r1, #1670	@ 0x686
 800a702:	486e      	ldr	r0, [pc, #440]	@ (800a8bc <xQueueSemaphoreTake+0x21c>)
 800a704:	f7f9 fa60 	bl	8003bc8 <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a708:	f001 fd44 	bl	800c194 <xTaskGetSchedulerState>
 800a70c:	4603      	mov	r3, r0
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d102      	bne.n	800a718 <xQueueSemaphoreTake+0x78>
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d101      	bne.n	800a71c <xQueueSemaphoreTake+0x7c>
 800a718:	2301      	movs	r3, #1
 800a71a:	e000      	b.n	800a71e <xQueueSemaphoreTake+0x7e>
 800a71c:	2300      	movs	r3, #0
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d110      	bne.n	800a744 <xQueueSemaphoreTake+0xa4>
    __asm volatile
 800a722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a726:	b672      	cpsid	i
 800a728:	f383 8811 	msr	BASEPRI, r3
 800a72c:	f3bf 8f6f 	isb	sy
 800a730:	f3bf 8f4f 	dsb	sy
 800a734:	b662      	cpsie	i
 800a736:	613b      	str	r3, [r7, #16]
}
 800a738:	bf00      	nop
 800a73a:	f240 618b 	movw	r1, #1675	@ 0x68b
 800a73e:	485f      	ldr	r0, [pc, #380]	@ (800a8bc <xQueueSemaphoreTake+0x21c>)
 800a740:	f7f9 fa42 	bl	8003bc8 <vAssertCalled>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 800a744:	f002 fc04 	bl	800cf50 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a74a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a74c:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a74e:	6a3b      	ldr	r3, [r7, #32]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d024      	beq.n	800a79e <xQueueSemaphoreTake+0xfe>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxSemaphoreCount - ( UBaseType_t ) 1 );
 800a754:	6a3b      	ldr	r3, [r7, #32]
 800a756:	1e5a      	subs	r2, r3, #1
 800a758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a75a:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a75c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d104      	bne.n	800a76e <xQueueSemaphoreTake+0xce>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a764:	f001 ff52 	bl	800c60c <pvTaskIncrementMutexHeldCount>
 800a768:	4602      	mov	r2, r0
 800a76a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a76c:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a76e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a770:	691b      	ldr	r3, [r3, #16]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d00f      	beq.n	800a796 <xQueueSemaphoreTake+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a778:	3310      	adds	r3, #16
 800a77a:	4618      	mov	r0, r3
 800a77c:	f001 f9ee 	bl	800bb5c <xTaskRemoveFromEventList>
 800a780:	4603      	mov	r3, r0
 800a782:	2b00      	cmp	r3, #0
 800a784:	d007      	beq.n	800a796 <xQueueSemaphoreTake+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800a786:	4b4e      	ldr	r3, [pc, #312]	@ (800a8c0 <xQueueSemaphoreTake+0x220>)
 800a788:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a78c:	601a      	str	r2, [r3, #0]
 800a78e:	f3bf 8f4f 	dsb	sy
 800a792:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800a796:	f002 fc13 	bl	800cfc0 <vPortExitCritical>

                traceRETURN_xQueueSemaphoreTake( pdPASS );

                return pdPASS;
 800a79a:	2301      	movs	r3, #1
 800a79c:	e089      	b.n	800a8b2 <xQueueSemaphoreTake+0x212>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d103      	bne.n	800a7ac <xQueueSemaphoreTake+0x10c>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 800a7a4:	f002 fc0c 	bl	800cfc0 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	e082      	b.n	800a8b2 <xQueueSemaphoreTake+0x212>
                }
                else if( xEntryTimeSet == pdFALSE )
 800a7ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d106      	bne.n	800a7c0 <xQueueSemaphoreTake+0x120>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800a7b2:	f107 0308 	add.w	r3, r7, #8
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f001 faae 	bl	800bd18 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800a7bc:	2301      	movs	r3, #1
 800a7be:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800a7c0:	f002 fbfe 	bl	800cfc0 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800a7c4:	f000 fdc2 	bl	800b34c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800a7c8:	f002 fbc2 	bl	800cf50 <vPortEnterCritical>
 800a7cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7ce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a7d2:	b25b      	sxtb	r3, r3
 800a7d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a7d8:	d103      	bne.n	800a7e2 <xQueueSemaphoreTake+0x142>
 800a7da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7dc:	2200      	movs	r2, #0
 800a7de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a7e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a7e8:	b25b      	sxtb	r3, r3
 800a7ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a7ee:	d103      	bne.n	800a7f8 <xQueueSemaphoreTake+0x158>
 800a7f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a7f8:	f002 fbe2 	bl	800cfc0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a7fc:	463a      	mov	r2, r7
 800a7fe:	f107 0308 	add.w	r3, r7, #8
 800a802:	4611      	mov	r1, r2
 800a804:	4618      	mov	r0, r3
 800a806:	f001 fa9d 	bl	800bd44 <xTaskCheckForTimeOut>
 800a80a:	4603      	mov	r3, r0
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d132      	bne.n	800a876 <xQueueSemaphoreTake+0x1d6>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a810:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a812:	f000 f975 	bl	800ab00 <prvIsQueueEmpty>
 800a816:	4603      	mov	r3, r0
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d026      	beq.n	800a86a <xQueueSemaphoreTake+0x1ca>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a81c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d109      	bne.n	800a838 <xQueueSemaphoreTake+0x198>
                    {
                        taskENTER_CRITICAL();
 800a824:	f002 fb94 	bl	800cf50 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a82a:	689b      	ldr	r3, [r3, #8]
 800a82c:	4618      	mov	r0, r3
 800a82e:	f001 fccf 	bl	800c1d0 <xTaskPriorityInherit>
 800a832:	62b8      	str	r0, [r7, #40]	@ 0x28
                        }
                        taskEXIT_CRITICAL();
 800a834:	f002 fbc4 	bl	800cfc0 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a83a:	3324      	adds	r3, #36	@ 0x24
 800a83c:	683a      	ldr	r2, [r7, #0]
 800a83e:	4611      	mov	r1, r2
 800a840:	4618      	mov	r0, r3
 800a842:	f001 f911 	bl	800ba68 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800a846:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a848:	f000 f908 	bl	800aa5c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800a84c:	f000 fd8c 	bl	800b368 <xTaskResumeAll>
 800a850:	4603      	mov	r3, r0
 800a852:	2b00      	cmp	r3, #0
 800a854:	f47f af76 	bne.w	800a744 <xQueueSemaphoreTake+0xa4>
                {
                    taskYIELD_WITHIN_API();
 800a858:	4b19      	ldr	r3, [pc, #100]	@ (800a8c0 <xQueueSemaphoreTake+0x220>)
 800a85a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a85e:	601a      	str	r2, [r3, #0]
 800a860:	f3bf 8f4f 	dsb	sy
 800a864:	f3bf 8f6f 	isb	sy
 800a868:	e76c      	b.n	800a744 <xQueueSemaphoreTake+0xa4>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 800a86a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a86c:	f000 f8f6 	bl	800aa5c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800a870:	f000 fd7a 	bl	800b368 <xTaskResumeAll>
 800a874:	e766      	b.n	800a744 <xQueueSemaphoreTake+0xa4>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 800a876:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a878:	f000 f8f0 	bl	800aa5c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800a87c:	f000 fd74 	bl	800b368 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a880:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a882:	f000 f93d 	bl	800ab00 <prvIsQueueEmpty>
 800a886:	4603      	mov	r3, r0
 800a888:	2b00      	cmp	r3, #0
 800a88a:	f43f af5b 	beq.w	800a744 <xQueueSemaphoreTake+0xa4>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 800a88e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a890:	2b00      	cmp	r3, #0
 800a892:	d00d      	beq.n	800a8b0 <xQueueSemaphoreTake+0x210>
                    {
                        taskENTER_CRITICAL();
 800a894:	f002 fb5c 	bl	800cf50 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a898:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a89a:	f000 f837 	bl	800a90c <prvGetDisinheritPriorityAfterTimeout>
 800a89e:	61f8      	str	r0, [r7, #28]
                             * mutex to the ready list for its new priority. Coverity thinks that
                             * it can result in out-of-bounds access which is not true because
                             * uxHighestWaitingPriority, as returned by prvGetDisinheritPriorityAfterTimeout,
                             * is capped at ( configMAX_PRIORITIES - 1 ). */
                            /* coverity[overrun] */
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a8a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8a2:	689b      	ldr	r3, [r3, #8]
 800a8a4:	69f9      	ldr	r1, [r7, #28]
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	f001 fde6 	bl	800c478 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 800a8ac:	f002 fb88 	bl	800cfc0 <vPortExitCritical>
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 800a8b0:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	3730      	adds	r7, #48	@ 0x30
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bd80      	pop	{r7, pc}
 800a8ba:	bf00      	nop
 800a8bc:	08013544 	.word	0x08013544
 800a8c0:	e000ed04 	.word	0xe000ed04

0800a8c4 <vQueueDelete>:
    return uxReturn;
}
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b084      	sub	sp, #16
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	60fb      	str	r3, [r7, #12]

    traceENTER_vQueueDelete( xQueue );

    configASSERT( pxQueue );
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d110      	bne.n	800a8f8 <vQueueDelete+0x34>
    __asm volatile
 800a8d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8da:	b672      	cpsid	i
 800a8dc:	f383 8811 	msr	BASEPRI, r3
 800a8e0:	f3bf 8f6f 	isb	sy
 800a8e4:	f3bf 8f4f 	dsb	sy
 800a8e8:	b662      	cpsie	i
 800a8ea:	60bb      	str	r3, [r7, #8]
}
 800a8ec:	bf00      	nop
 800a8ee:	f640 01d4 	movw	r1, #2260	@ 0x8d4
 800a8f2:	4805      	ldr	r0, [pc, #20]	@ (800a908 <vQueueDelete+0x44>)
 800a8f4:	f7f9 f968 	bl	8003bc8 <vAssertCalled>

    #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
    {
        /* The queue can only have been allocated dynamically - free it
         * again. */
        vPortFree( pxQueue );
 800a8f8:	68f8      	ldr	r0, [r7, #12]
 800a8fa:	f7f9 fcdb 	bl	80042b4 <vPortFree>
        ( void ) pxQueue;
    }
    #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

    traceRETURN_vQueueDelete();
}
 800a8fe:	bf00      	nop
 800a900:	3710      	adds	r7, #16
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}
 800a906:	bf00      	nop
 800a908:	08013544 	.word	0x08013544

0800a90c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 800a90c:	b480      	push	{r7}
 800a90e:	b085      	sub	sp, #20
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d006      	beq.n	800a92a <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) ( ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) ) );
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f1c3 0307 	rsb	r3, r3, #7
 800a926:	60fb      	str	r3, [r7, #12]
 800a928:	e001      	b.n	800a92e <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a92a:	2300      	movs	r3, #0
 800a92c:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 800a92e:	68fb      	ldr	r3, [r7, #12]
    }
 800a930:	4618      	mov	r0, r3
 800a932:	3714      	adds	r7, #20
 800a934:	46bd      	mov	sp, r7
 800a936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93a:	4770      	bx	lr

0800a93c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b086      	sub	sp, #24
 800a940:	af00      	add	r7, sp, #0
 800a942:	60f8      	str	r0, [r7, #12]
 800a944:	60b9      	str	r1, [r7, #8]
 800a946:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800a948:	2300      	movs	r3, #0
 800a94a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a950:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a956:	2b00      	cmp	r3, #0
 800a958:	d10d      	bne.n	800a976 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d14d      	bne.n	800a9fe <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	689b      	ldr	r3, [r3, #8]
 800a966:	4618      	mov	r0, r3
 800a968:	f001 fcd2 	bl	800c310 <xTaskPriorityDisinherit>
 800a96c:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	2200      	movs	r2, #0
 800a972:	609a      	str	r2, [r3, #8]
 800a974:	e043      	b.n	800a9fe <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d119      	bne.n	800a9b0 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	6858      	ldr	r0, [r3, #4]
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a984:	461a      	mov	r2, r3
 800a986:	68b9      	ldr	r1, [r7, #8]
 800a988:	f005 f836 	bl	800f9f8 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	685a      	ldr	r2, [r3, #4]
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a994:	441a      	add	r2, r3
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	685a      	ldr	r2, [r3, #4]
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	689b      	ldr	r3, [r3, #8]
 800a9a2:	429a      	cmp	r2, r3
 800a9a4:	d32b      	bcc.n	800a9fe <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	681a      	ldr	r2, [r3, #0]
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	605a      	str	r2, [r3, #4]
 800a9ae:	e026      	b.n	800a9fe <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	68d8      	ldr	r0, [r3, #12]
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9b8:	461a      	mov	r2, r3
 800a9ba:	68b9      	ldr	r1, [r7, #8]
 800a9bc:	f005 f81c 	bl	800f9f8 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	68da      	ldr	r2, [r3, #12]
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9c8:	425b      	negs	r3, r3
 800a9ca:	441a      	add	r2, r3
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	68da      	ldr	r2, [r3, #12]
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	429a      	cmp	r2, r3
 800a9da:	d207      	bcs.n	800a9ec <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	689a      	ldr	r2, [r3, #8]
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9e4:	425b      	negs	r3, r3
 800a9e6:	441a      	add	r2, r3
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2b02      	cmp	r3, #2
 800a9f0:	d105      	bne.n	800a9fe <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a9f2:	693b      	ldr	r3, [r7, #16]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d002      	beq.n	800a9fe <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800a9f8:	693b      	ldr	r3, [r7, #16]
 800a9fa:	3b01      	subs	r3, #1
 800a9fc:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 800a9fe:	693b      	ldr	r3, [r7, #16]
 800aa00:	1c5a      	adds	r2, r3, #1
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 800aa06:	697b      	ldr	r3, [r7, #20]
}
 800aa08:	4618      	mov	r0, r3
 800aa0a:	3718      	adds	r7, #24
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bd80      	pop	{r7, pc}

0800aa10 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b082      	sub	sp, #8
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
 800aa18:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d018      	beq.n	800aa54 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	68da      	ldr	r2, [r3, #12]
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa2a:	441a      	add	r2, r3
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	68da      	ldr	r2, [r3, #12]
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	689b      	ldr	r3, [r3, #8]
 800aa38:	429a      	cmp	r2, r3
 800aa3a:	d303      	bcc.n	800aa44 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681a      	ldr	r2, [r3, #0]
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	68d9      	ldr	r1, [r3, #12]
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa4c:	461a      	mov	r2, r3
 800aa4e:	6838      	ldr	r0, [r7, #0]
 800aa50:	f004 ffd2 	bl	800f9f8 <memcpy>
    }
}
 800aa54:	bf00      	nop
 800aa56:	3708      	adds	r7, #8
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	bd80      	pop	{r7, pc}

0800aa5c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b084      	sub	sp, #16
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800aa64:	f002 fa74 	bl	800cf50 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aa6e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800aa70:	e011      	b.n	800aa96 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d012      	beq.n	800aaa0 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	3324      	adds	r3, #36	@ 0x24
 800aa7e:	4618      	mov	r0, r3
 800aa80:	f001 f86c 	bl	800bb5c <xTaskRemoveFromEventList>
 800aa84:	4603      	mov	r3, r0
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d001      	beq.n	800aa8e <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800aa8a:	f001 f9cf 	bl	800be2c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800aa8e:	7bfb      	ldrb	r3, [r7, #15]
 800aa90:	3b01      	subs	r3, #1
 800aa92:	b2db      	uxtb	r3, r3
 800aa94:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800aa96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	dce9      	bgt.n	800aa72 <prvUnlockQueue+0x16>
 800aa9e:	e000      	b.n	800aaa2 <prvUnlockQueue+0x46>
                    break;
 800aaa0:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	22ff      	movs	r2, #255	@ 0xff
 800aaa6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 800aaaa:	f002 fa89 	bl	800cfc0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800aaae:	f002 fa4f 	bl	800cf50 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aab8:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800aaba:	e011      	b.n	800aae0 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	691b      	ldr	r3, [r3, #16]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d012      	beq.n	800aaea <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	3310      	adds	r3, #16
 800aac8:	4618      	mov	r0, r3
 800aaca:	f001 f847 	bl	800bb5c <xTaskRemoveFromEventList>
 800aace:	4603      	mov	r3, r0
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d001      	beq.n	800aad8 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800aad4:	f001 f9aa 	bl	800be2c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800aad8:	7bbb      	ldrb	r3, [r7, #14]
 800aada:	3b01      	subs	r3, #1
 800aadc:	b2db      	uxtb	r3, r3
 800aade:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800aae0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	dce9      	bgt.n	800aabc <prvUnlockQueue+0x60>
 800aae8:	e000      	b.n	800aaec <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800aaea:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	22ff      	movs	r2, #255	@ 0xff
 800aaf0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 800aaf4:	f002 fa64 	bl	800cfc0 <vPortExitCritical>
}
 800aaf8:	bf00      	nop
 800aafa:	3710      	adds	r7, #16
 800aafc:	46bd      	mov	sp, r7
 800aafe:	bd80      	pop	{r7, pc}

0800ab00 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b084      	sub	sp, #16
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800ab08:	f002 fa22 	bl	800cf50 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d102      	bne.n	800ab1a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800ab14:	2301      	movs	r3, #1
 800ab16:	60fb      	str	r3, [r7, #12]
 800ab18:	e001      	b.n	800ab1e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800ab1e:	f002 fa4f 	bl	800cfc0 <vPortExitCritical>

    return xReturn;
 800ab22:	68fb      	ldr	r3, [r7, #12]
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3710      	adds	r7, #16
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}

0800ab2c <prvIsQueueFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b084      	sub	sp, #16
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800ab34:	f002 fa0c 	bl	800cf50 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab40:	429a      	cmp	r2, r3
 800ab42:	d102      	bne.n	800ab4a <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800ab44:	2301      	movs	r3, #1
 800ab46:	60fb      	str	r3, [r7, #12]
 800ab48:	e001      	b.n	800ab4e <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800ab4e:	f002 fa37 	bl	800cfc0 <vPortExitCritical>

    return xReturn;
 800ab52:	68fb      	ldr	r3, [r7, #12]
}
 800ab54:	4618      	mov	r0, r3
 800ab56:	3710      	adds	r7, #16
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	bd80      	pop	{r7, pc}

0800ab5c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b086      	sub	sp, #24
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	60f8      	str	r0, [r7, #12]
 800ab64:	60b9      	str	r1, [r7, #8]
 800ab66:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800ab6c:	f002 f9f0 	bl	800cf50 <vPortEnterCritical>
 800ab70:	697b      	ldr	r3, [r7, #20]
 800ab72:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ab76:	b25b      	sxtb	r3, r3
 800ab78:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ab7c:	d103      	bne.n	800ab86 <vQueueWaitForMessageRestricted+0x2a>
 800ab7e:	697b      	ldr	r3, [r7, #20]
 800ab80:	2200      	movs	r2, #0
 800ab82:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ab86:	697b      	ldr	r3, [r7, #20]
 800ab88:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ab8c:	b25b      	sxtb	r3, r3
 800ab8e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ab92:	d103      	bne.n	800ab9c <vQueueWaitForMessageRestricted+0x40>
 800ab94:	697b      	ldr	r3, [r7, #20]
 800ab96:	2200      	movs	r2, #0
 800ab98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ab9c:	f002 fa10 	bl	800cfc0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800aba0:	697b      	ldr	r3, [r7, #20]
 800aba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d106      	bne.n	800abb6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800aba8:	697b      	ldr	r3, [r7, #20]
 800abaa:	3324      	adds	r3, #36	@ 0x24
 800abac:	687a      	ldr	r2, [r7, #4]
 800abae:	68b9      	ldr	r1, [r7, #8]
 800abb0:	4618      	mov	r0, r3
 800abb2:	f000 ff85 	bl	800bac0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800abb6:	6978      	ldr	r0, [r7, #20]
 800abb8:	f7ff ff50 	bl	800aa5c <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
    }
 800abbc:	bf00      	nop
 800abbe:	3718      	adds	r7, #24
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd80      	pop	{r7, pc}

0800abc4 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b08a      	sub	sp, #40	@ 0x28
 800abc8:	af04      	add	r7, sp, #16
 800abca:	60f8      	str	r0, [r7, #12]
 800abcc:	60b9      	str	r1, [r7, #8]
 800abce:	607a      	str	r2, [r7, #4]
 800abd0:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	009b      	lsls	r3, r3, #2
 800abd6:	4618      	mov	r0, r3
 800abd8:	f7f9 fb5e 	bl	8004298 <pvPortMalloc>
 800abdc:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 800abde:	693b      	ldr	r3, [r7, #16]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d013      	beq.n	800ac0c <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800abe4:	20b0      	movs	r0, #176	@ 0xb0
 800abe6:	f7f9 fb57 	bl	8004298 <pvPortMalloc>
 800abea:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 800abec:	697b      	ldr	r3, [r7, #20]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d008      	beq.n	800ac04 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800abf2:	22b0      	movs	r2, #176	@ 0xb0
 800abf4:	2100      	movs	r1, #0
 800abf6:	6978      	ldr	r0, [r7, #20]
 800abf8:	f004 fd98 	bl	800f72c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800abfc:	697b      	ldr	r3, [r7, #20]
 800abfe:	693a      	ldr	r2, [r7, #16]
 800ac00:	631a      	str	r2, [r3, #48]	@ 0x30
 800ac02:	e005      	b.n	800ac10 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800ac04:	6938      	ldr	r0, [r7, #16]
 800ac06:	f7f9 fb55 	bl	80042b4 <vPortFree>
 800ac0a:	e001      	b.n	800ac10 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800ac10:	697b      	ldr	r3, [r7, #20]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d00d      	beq.n	800ac32 <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ac16:	2300      	movs	r3, #0
 800ac18:	9303      	str	r3, [sp, #12]
 800ac1a:	697b      	ldr	r3, [r7, #20]
 800ac1c:	9302      	str	r3, [sp, #8]
 800ac1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac20:	9301      	str	r3, [sp, #4]
 800ac22:	6a3b      	ldr	r3, [r7, #32]
 800ac24:	9300      	str	r3, [sp, #0]
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	687a      	ldr	r2, [r7, #4]
 800ac2a:	68b9      	ldr	r1, [r7, #8]
 800ac2c:	68f8      	ldr	r0, [r7, #12]
 800ac2e:	f000 f829 	bl	800ac84 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 800ac32:	697b      	ldr	r3, [r7, #20]
    }
 800ac34:	4618      	mov	r0, r3
 800ac36:	3718      	adds	r7, #24
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bd80      	pop	{r7, pc}

0800ac3c <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b088      	sub	sp, #32
 800ac40:	af02      	add	r7, sp, #8
 800ac42:	60f8      	str	r0, [r7, #12]
 800ac44:	60b9      	str	r1, [r7, #8]
 800ac46:	607a      	str	r2, [r7, #4]
 800ac48:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 800ac4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac4c:	9301      	str	r3, [sp, #4]
 800ac4e:	6a3b      	ldr	r3, [r7, #32]
 800ac50:	9300      	str	r3, [sp, #0]
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	687a      	ldr	r2, [r7, #4]
 800ac56:	68b9      	ldr	r1, [r7, #8]
 800ac58:	68f8      	ldr	r0, [r7, #12]
 800ac5a:	f7ff ffb3 	bl	800abc4 <prvCreateTask>
 800ac5e:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 800ac60:	693b      	ldr	r3, [r7, #16]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d005      	beq.n	800ac72 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 800ac66:	6938      	ldr	r0, [r7, #16]
 800ac68:	f000 f8c2 	bl	800adf0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	617b      	str	r3, [r7, #20]
 800ac70:	e002      	b.n	800ac78 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ac72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ac76:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 800ac78:	697b      	ldr	r3, [r7, #20]
    }
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	3718      	adds	r7, #24
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bd80      	pop	{r7, pc}
	...

0800ac84 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b088      	sub	sp, #32
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	60f8      	str	r0, [r7, #12]
 800ac8c:	60b9      	str	r1, [r7, #8]
 800ac8e:	607a      	str	r2, [r7, #4]
 800ac90:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 800ac92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac94:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	009b      	lsls	r3, r3, #2
 800ac9a:	461a      	mov	r2, r3
 800ac9c:	21a5      	movs	r1, #165	@ 0xa5
 800ac9e:	f004 fd45 	bl	800f72c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 800aca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aca4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aca6:	6879      	ldr	r1, [r7, #4]
 800aca8:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800acac:	440b      	add	r3, r1
 800acae:	009b      	lsls	r3, r3, #2
 800acb0:	4413      	add	r3, r2
 800acb2:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800acb4:	69bb      	ldr	r3, [r7, #24]
 800acb6:	f023 0307 	bic.w	r3, r3, #7
 800acba:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 800acbc:	69bb      	ldr	r3, [r7, #24]
 800acbe:	f003 0307 	and.w	r3, r3, #7
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d010      	beq.n	800ace8 <prvInitialiseNewTask+0x64>
    __asm volatile
 800acc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acca:	b672      	cpsid	i
 800accc:	f383 8811 	msr	BASEPRI, r3
 800acd0:	f3bf 8f6f 	isb	sy
 800acd4:	f3bf 8f4f 	dsb	sy
 800acd8:	b662      	cpsie	i
 800acda:	617b      	str	r3, [r7, #20]
}
 800acdc:	bf00      	nop
 800acde:	f240 712e 	movw	r1, #1838	@ 0x72e
 800ace2:	483f      	ldr	r0, [pc, #252]	@ (800ade0 <prvInitialiseNewTask+0x15c>)
 800ace4:	f7f8 ff70 	bl	8003bc8 <vAssertCalled>

        #if ( configRECORD_STACK_HIGH_ADDRESS == 1 )
        {
            /* Also record the stack's high address, which may assist
             * debugging. */
            pxNewTCB->pxEndOfStack = pxTopOfStack;
 800ace8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acea:	69ba      	ldr	r2, [r7, #24]
 800acec:	645a      	str	r2, [r3, #68]	@ 0x44
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800acee:	68bb      	ldr	r3, [r7, #8]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d01e      	beq.n	800ad32 <prvInitialiseNewTask+0xae>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800acf4:	2300      	movs	r3, #0
 800acf6:	61fb      	str	r3, [r7, #28]
 800acf8:	e012      	b.n	800ad20 <prvInitialiseNewTask+0x9c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800acfa:	68ba      	ldr	r2, [r7, #8]
 800acfc:	69fb      	ldr	r3, [r7, #28]
 800acfe:	4413      	add	r3, r2
 800ad00:	7819      	ldrb	r1, [r3, #0]
 800ad02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad04:	69fb      	ldr	r3, [r7, #28]
 800ad06:	4413      	add	r3, r2
 800ad08:	3334      	adds	r3, #52	@ 0x34
 800ad0a:	460a      	mov	r2, r1
 800ad0c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800ad0e:	68ba      	ldr	r2, [r7, #8]
 800ad10:	69fb      	ldr	r3, [r7, #28]
 800ad12:	4413      	add	r3, r2
 800ad14:	781b      	ldrb	r3, [r3, #0]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d006      	beq.n	800ad28 <prvInitialiseNewTask+0xa4>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ad1a:	69fb      	ldr	r3, [r7, #28]
 800ad1c:	3301      	adds	r3, #1
 800ad1e:	61fb      	str	r3, [r7, #28]
 800ad20:	69fb      	ldr	r3, [r7, #28]
 800ad22:	2b0f      	cmp	r3, #15
 800ad24:	d9e9      	bls.n	800acfa <prvInitialiseNewTask+0x76>
 800ad26:	e000      	b.n	800ad2a <prvInitialiseNewTask+0xa6>
            {
                break;
 800ad28:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 800ad2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800ad32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad34:	2b06      	cmp	r3, #6
 800ad36:	d910      	bls.n	800ad5a <prvInitialiseNewTask+0xd6>
    __asm volatile
 800ad38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad3c:	b672      	cpsid	i
 800ad3e:	f383 8811 	msr	BASEPRI, r3
 800ad42:	f3bf 8f6f 	isb	sy
 800ad46:	f3bf 8f4f 	dsb	sy
 800ad4a:	b662      	cpsie	i
 800ad4c:	613b      	str	r3, [r7, #16]
}
 800ad4e:	bf00      	nop
 800ad50:	f240 7164 	movw	r1, #1892	@ 0x764
 800ad54:	4822      	ldr	r0, [pc, #136]	@ (800ade0 <prvInitialiseNewTask+0x15c>)
 800ad56:	f7f8 ff37 	bl	8003bc8 <vAssertCalled>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ad5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad5c:	2b06      	cmp	r3, #6
 800ad5e:	d901      	bls.n	800ad64 <prvInitialiseNewTask+0xe0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ad60:	2306      	movs	r3, #6
 800ad62:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800ad64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ad68:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800ad6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ad6e:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ad70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad72:	3304      	adds	r3, #4
 800ad74:	4618      	mov	r0, r3
 800ad76:	f7ff f82f 	bl	8009dd8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ad7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad7c:	3318      	adds	r3, #24
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f7ff f82a 	bl	8009dd8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ad84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad88:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 800ad8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad8c:	f1c3 0207 	rsb	r2, r3, #7
 800ad90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad92:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ad94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad98:	625a      	str	r2, [r3, #36]	@ 0x24
    #endif

    #if ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 )
    {
        /* Allocate and initialize memory for the task's TLS Block. */
        configINIT_TLS_BLOCK( pxNewTCB->xTLSBlock, pxTopOfStack );
 800ad9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad9c:	335c      	adds	r3, #92	@ 0x5c
 800ad9e:	224c      	movs	r2, #76	@ 0x4c
 800ada0:	2100      	movs	r1, #0
 800ada2:	4618      	mov	r0, r3
 800ada4:	f004 fcc2 	bl	800f72c <memset>
 800ada8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adaa:	4a0e      	ldr	r2, [pc, #56]	@ (800ade4 <prvInitialiseNewTask+0x160>)
 800adac:	661a      	str	r2, [r3, #96]	@ 0x60
 800adae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adb0:	4a0d      	ldr	r2, [pc, #52]	@ (800ade8 <prvInitialiseNewTask+0x164>)
 800adb2:	665a      	str	r2, [r3, #100]	@ 0x64
 800adb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adb6:	4a0d      	ldr	r2, [pc, #52]	@ (800adec <prvInitialiseNewTask+0x168>)
 800adb8:	669a      	str	r2, [r3, #104]	@ 0x68
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800adba:	683a      	ldr	r2, [r7, #0]
 800adbc:	68f9      	ldr	r1, [r7, #12]
 800adbe:	69b8      	ldr	r0, [r7, #24]
 800adc0:	f001 ff50 	bl	800cc64 <pxPortInitialiseStack>
 800adc4:	4602      	mov	r2, r0
 800adc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adc8:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 800adca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d002      	beq.n	800add6 <prvInitialiseNewTask+0x152>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800add0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800add2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800add4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800add6:	bf00      	nop
 800add8:	3720      	adds	r7, #32
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}
 800adde:	bf00      	nop
 800ade0:	080135f8 	.word	0x080135f8
 800ade4:	20000508 	.word	0x20000508
 800ade8:	20000570 	.word	0x20000570
 800adec:	200005d8 	.word	0x200005d8

0800adf0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b084      	sub	sp, #16
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 800adf8:	f002 f8aa 	bl	800cf50 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 800adfc:	4b41      	ldr	r3, [pc, #260]	@ (800af04 <prvAddNewTaskToReadyList+0x114>)
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	3301      	adds	r3, #1
 800ae02:	4a40      	ldr	r2, [pc, #256]	@ (800af04 <prvAddNewTaskToReadyList+0x114>)
 800ae04:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 800ae06:	4b40      	ldr	r3, [pc, #256]	@ (800af08 <prvAddNewTaskToReadyList+0x118>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d109      	bne.n	800ae22 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 800ae0e:	4a3e      	ldr	r2, [pc, #248]	@ (800af08 <prvAddNewTaskToReadyList+0x118>)
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ae14:	4b3b      	ldr	r3, [pc, #236]	@ (800af04 <prvAddNewTaskToReadyList+0x114>)
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	2b01      	cmp	r3, #1
 800ae1a:	d110      	bne.n	800ae3e <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 800ae1c:	f001 f82a 	bl	800be74 <prvInitialiseTaskLists>
 800ae20:	e00d      	b.n	800ae3e <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 800ae22:	4b3a      	ldr	r3, [pc, #232]	@ (800af0c <prvAddNewTaskToReadyList+0x11c>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d109      	bne.n	800ae3e <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ae2a:	4b37      	ldr	r3, [pc, #220]	@ (800af08 <prvAddNewTaskToReadyList+0x118>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae34:	429a      	cmp	r2, r3
 800ae36:	d802      	bhi.n	800ae3e <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 800ae38:	4a33      	ldr	r2, [pc, #204]	@ (800af08 <prvAddNewTaskToReadyList+0x118>)
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 800ae3e:	4b34      	ldr	r3, [pc, #208]	@ (800af10 <prvAddNewTaskToReadyList+0x120>)
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	3301      	adds	r3, #1
 800ae44:	4a32      	ldr	r2, [pc, #200]	@ (800af10 <prvAddNewTaskToReadyList+0x120>)
 800ae46:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ae48:	4b31      	ldr	r3, [pc, #196]	@ (800af10 <prvAddNewTaskToReadyList+0x120>)
 800ae4a:	681a      	ldr	r2, [r3, #0]
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	649a      	str	r2, [r3, #72]	@ 0x48
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae54:	2201      	movs	r2, #1
 800ae56:	409a      	lsls	r2, r3
 800ae58:	4b2e      	ldr	r3, [pc, #184]	@ (800af14 <prvAddNewTaskToReadyList+0x124>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	4313      	orrs	r3, r2
 800ae5e:	4a2d      	ldr	r2, [pc, #180]	@ (800af14 <prvAddNewTaskToReadyList+0x124>)
 800ae60:	6013      	str	r3, [r2, #0]
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae66:	492c      	ldr	r1, [pc, #176]	@ (800af18 <prvAddNewTaskToReadyList+0x128>)
 800ae68:	4613      	mov	r3, r2
 800ae6a:	009b      	lsls	r3, r3, #2
 800ae6c:	4413      	add	r3, r2
 800ae6e:	009b      	lsls	r3, r3, #2
 800ae70:	440b      	add	r3, r1
 800ae72:	3304      	adds	r3, #4
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	60fb      	str	r3, [r7, #12]
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	68fa      	ldr	r2, [r7, #12]
 800ae7c:	609a      	str	r2, [r3, #8]
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	689a      	ldr	r2, [r3, #8]
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	60da      	str	r2, [r3, #12]
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	689b      	ldr	r3, [r3, #8]
 800ae8a:	687a      	ldr	r2, [r7, #4]
 800ae8c:	3204      	adds	r2, #4
 800ae8e:	605a      	str	r2, [r3, #4]
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	1d1a      	adds	r2, r3, #4
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	609a      	str	r2, [r3, #8]
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae9c:	4613      	mov	r3, r2
 800ae9e:	009b      	lsls	r3, r3, #2
 800aea0:	4413      	add	r3, r2
 800aea2:	009b      	lsls	r3, r3, #2
 800aea4:	4a1c      	ldr	r2, [pc, #112]	@ (800af18 <prvAddNewTaskToReadyList+0x128>)
 800aea6:	441a      	add	r2, r3
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	615a      	str	r2, [r3, #20]
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aeb0:	4919      	ldr	r1, [pc, #100]	@ (800af18 <prvAddNewTaskToReadyList+0x128>)
 800aeb2:	4613      	mov	r3, r2
 800aeb4:	009b      	lsls	r3, r3, #2
 800aeb6:	4413      	add	r3, r2
 800aeb8:	009b      	lsls	r3, r3, #2
 800aeba:	440b      	add	r3, r1
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	687a      	ldr	r2, [r7, #4]
 800aec0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800aec2:	1c59      	adds	r1, r3, #1
 800aec4:	4814      	ldr	r0, [pc, #80]	@ (800af18 <prvAddNewTaskToReadyList+0x128>)
 800aec6:	4613      	mov	r3, r2
 800aec8:	009b      	lsls	r3, r3, #2
 800aeca:	4413      	add	r3, r2
 800aecc:	009b      	lsls	r3, r3, #2
 800aece:	4403      	add	r3, r0
 800aed0:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 800aed2:	f002 f875 	bl	800cfc0 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 800aed6:	4b0d      	ldr	r3, [pc, #52]	@ (800af0c <prvAddNewTaskToReadyList+0x11c>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d00e      	beq.n	800aefc <prvAddNewTaskToReadyList+0x10c>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 800aede:	4b0a      	ldr	r3, [pc, #40]	@ (800af08 <prvAddNewTaskToReadyList+0x118>)
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aee8:	429a      	cmp	r2, r3
 800aeea:	d207      	bcs.n	800aefc <prvAddNewTaskToReadyList+0x10c>
 800aeec:	4b0b      	ldr	r3, [pc, #44]	@ (800af1c <prvAddNewTaskToReadyList+0x12c>)
 800aeee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aef2:	601a      	str	r2, [r3, #0]
 800aef4:	f3bf 8f4f 	dsb	sy
 800aef8:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800aefc:	bf00      	nop
 800aefe:	3710      	adds	r7, #16
 800af00:	46bd      	mov	sp, r7
 800af02:	bd80      	pop	{r7, pc}
 800af04:	20000484 	.word	0x20000484
 800af08:	20000384 	.word	0x20000384
 800af0c:	20000490 	.word	0x20000490
 800af10:	200004a0 	.word	0x200004a0
 800af14:	2000048c 	.word	0x2000048c
 800af18:	20000388 	.word	0x20000388
 800af1c:	e000ed04 	.word	0xe000ed04

0800af20 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 800af20:	b580      	push	{r7, lr}
 800af22:	b086      	sub	sp, #24
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        BaseType_t xDeleteTCBInIdleTask = pdFALSE;
 800af28:	2300      	movs	r3, #0
 800af2a:	617b      	str	r3, [r7, #20]
        BaseType_t xTaskIsRunningOrYielding;

        traceENTER_vTaskDelete( xTaskToDelete );

        taskENTER_CRITICAL();
 800af2c:	f002 f810 	bl	800cf50 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d102      	bne.n	800af3c <vTaskDelete+0x1c>
 800af36:	4b44      	ldr	r3, [pc, #272]	@ (800b048 <vTaskDelete+0x128>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	e000      	b.n	800af3e <vTaskDelete+0x1e>
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	613b      	str	r3, [r7, #16]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800af40:	693b      	ldr	r3, [r7, #16]
 800af42:	3304      	adds	r3, #4
 800af44:	4618      	mov	r0, r3
 800af46:	f7fe ffb1 	bl	8009eac <uxListRemove>
 800af4a:	4603      	mov	r3, r0
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d115      	bne.n	800af7c <vTaskDelete+0x5c>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800af50:	693b      	ldr	r3, [r7, #16]
 800af52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af54:	493d      	ldr	r1, [pc, #244]	@ (800b04c <vTaskDelete+0x12c>)
 800af56:	4613      	mov	r3, r2
 800af58:	009b      	lsls	r3, r3, #2
 800af5a:	4413      	add	r3, r2
 800af5c:	009b      	lsls	r3, r3, #2
 800af5e:	440b      	add	r3, r1
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d10a      	bne.n	800af7c <vTaskDelete+0x5c>
 800af66:	693b      	ldr	r3, [r7, #16]
 800af68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af6a:	2201      	movs	r2, #1
 800af6c:	fa02 f303 	lsl.w	r3, r2, r3
 800af70:	43da      	mvns	r2, r3
 800af72:	4b37      	ldr	r3, [pc, #220]	@ (800b050 <vTaskDelete+0x130>)
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	4013      	ands	r3, r2
 800af78:	4a35      	ldr	r2, [pc, #212]	@ (800b050 <vTaskDelete+0x130>)
 800af7a:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800af7c:	693b      	ldr	r3, [r7, #16]
 800af7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af80:	2b00      	cmp	r3, #0
 800af82:	d004      	beq.n	800af8e <vTaskDelete+0x6e>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800af84:	693b      	ldr	r3, [r7, #16]
 800af86:	3318      	adds	r3, #24
 800af88:	4618      	mov	r0, r3
 800af8a:	f7fe ff8f 	bl	8009eac <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 800af8e:	4b31      	ldr	r3, [pc, #196]	@ (800b054 <vTaskDelete+0x134>)
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	3301      	adds	r3, #1
 800af94:	4a2f      	ldr	r2, [pc, #188]	@ (800b054 <vTaskDelete+0x134>)
 800af96:	6013      	str	r3, [r2, #0]

            /* Use temp variable as distinct sequence points for reading volatile
             * variables prior to a logical operator to ensure compliance with
             * MISRA C 2012 Rule 13.5. */
            xTaskIsRunningOrYielding = taskTASK_IS_RUNNING_OR_SCHEDULED_TO_YIELD( pxTCB );
 800af98:	4b2b      	ldr	r3, [pc, #172]	@ (800b048 <vTaskDelete+0x128>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	693a      	ldr	r2, [r7, #16]
 800af9e:	429a      	cmp	r2, r3
 800afa0:	d101      	bne.n	800afa6 <vTaskDelete+0x86>
 800afa2:	2301      	movs	r3, #1
 800afa4:	e000      	b.n	800afa8 <vTaskDelete+0x88>
 800afa6:	2300      	movs	r3, #0
 800afa8:	60fb      	str	r3, [r7, #12]

            /* If the task is running (or yielding), we must add it to the
             * termination list so that an idle task can delete it when it is
             * no longer running. */
            if( ( xSchedulerRunning != pdFALSE ) && ( xTaskIsRunningOrYielding != pdFALSE ) )
 800afaa:	4b2b      	ldr	r3, [pc, #172]	@ (800b058 <vTaskDelete+0x138>)
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d010      	beq.n	800afd4 <vTaskDelete+0xb4>
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d00d      	beq.n	800afd4 <vTaskDelete+0xb4>
                 * deleted. This cannot complete when the task is still running
                 * on a core, as a context switch to another task is required.
                 * Place the task in the termination list. The idle task will check
                 * the termination list and free up any memory allocated by the
                 * scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800afb8:	693b      	ldr	r3, [r7, #16]
 800afba:	3304      	adds	r3, #4
 800afbc:	4619      	mov	r1, r3
 800afbe:	4827      	ldr	r0, [pc, #156]	@ (800b05c <vTaskDelete+0x13c>)
 800afc0:	f7fe ff17 	bl	8009df2 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 800afc4:	4b26      	ldr	r3, [pc, #152]	@ (800b060 <vTaskDelete+0x140>)
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	3301      	adds	r3, #1
 800afca:	4a25      	ldr	r2, [pc, #148]	@ (800b060 <vTaskDelete+0x140>)
 800afcc:	6013      	str	r3, [r2, #0]
                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );

                /* Delete the task TCB in idle task. */
                xDeleteTCBInIdleTask = pdTRUE;
 800afce:	2301      	movs	r3, #1
 800afd0:	617b      	str	r3, [r7, #20]
 800afd2:	e006      	b.n	800afe2 <vTaskDelete+0xc2>
                }
                #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
            }
            else
            {
                --uxCurrentNumberOfTasks;
 800afd4:	4b23      	ldr	r3, [pc, #140]	@ (800b064 <vTaskDelete+0x144>)
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	3b01      	subs	r3, #1
 800afda:	4a22      	ldr	r2, [pc, #136]	@ (800b064 <vTaskDelete+0x144>)
 800afdc:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 800afde:	f001 f8ad 	bl	800c13c <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 800afe2:	f001 ffed 	bl	800cfc0 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( xDeleteTCBInIdleTask != pdTRUE )
 800afe6:	697b      	ldr	r3, [r7, #20]
 800afe8:	2b01      	cmp	r3, #1
 800afea:	d002      	beq.n	800aff2 <vTaskDelete+0xd2>
        {
            prvDeleteTCB( pxTCB );
 800afec:	6938      	ldr	r0, [r7, #16]
 800afee:	f001 f88f 	bl	800c110 <prvDeleteTCB>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        #if ( configNUMBER_OF_CORES == 1 )
        {
            if( xSchedulerRunning != pdFALSE )
 800aff2:	4b19      	ldr	r3, [pc, #100]	@ (800b058 <vTaskDelete+0x138>)
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d021      	beq.n	800b03e <vTaskDelete+0x11e>
            {
                if( pxTCB == pxCurrentTCB )
 800affa:	4b13      	ldr	r3, [pc, #76]	@ (800b048 <vTaskDelete+0x128>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	693a      	ldr	r2, [r7, #16]
 800b000:	429a      	cmp	r2, r3
 800b002:	d11c      	bne.n	800b03e <vTaskDelete+0x11e>
                {
                    configASSERT( uxSchedulerSuspended == 0 );
 800b004:	4b18      	ldr	r3, [pc, #96]	@ (800b068 <vTaskDelete+0x148>)
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d010      	beq.n	800b02e <vTaskDelete+0x10e>
    __asm volatile
 800b00c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b010:	b672      	cpsid	i
 800b012:	f383 8811 	msr	BASEPRI, r3
 800b016:	f3bf 8f6f 	isb	sy
 800b01a:	f3bf 8f4f 	dsb	sy
 800b01e:	b662      	cpsie	i
 800b020:	60bb      	str	r3, [r7, #8]
}
 800b022:	bf00      	nop
 800b024:	f640 1114 	movw	r1, #2324	@ 0x914
 800b028:	4810      	ldr	r0, [pc, #64]	@ (800b06c <vTaskDelete+0x14c>)
 800b02a:	f7f8 fdcd 	bl	8003bc8 <vAssertCalled>
                    taskYIELD_WITHIN_API();
 800b02e:	4b10      	ldr	r3, [pc, #64]	@ (800b070 <vTaskDelete+0x150>)
 800b030:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b034:	601a      	str	r2, [r3, #0]
 800b036:	f3bf 8f4f 	dsb	sy
 800b03a:	f3bf 8f6f 	isb	sy
            }
        }
        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

        traceRETURN_vTaskDelete();
    }
 800b03e:	bf00      	nop
 800b040:	3718      	adds	r7, #24
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}
 800b046:	bf00      	nop
 800b048:	20000384 	.word	0x20000384
 800b04c:	20000388 	.word	0x20000388
 800b050:	2000048c 	.word	0x2000048c
 800b054:	200004a0 	.word	0x200004a0
 800b058:	20000490 	.word	0x20000490
 800b05c:	20000458 	.word	0x20000458
 800b060:	2000046c 	.word	0x2000046c
 800b064:	20000484 	.word	0x20000484
 800b068:	200004ac 	.word	0x200004ac
 800b06c:	080135f8 	.word	0x080135f8
 800b070:	e000ed04 	.word	0xe000ed04

0800b074 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800b074:	b580      	push	{r7, lr}
 800b076:	b084      	sub	sp, #16
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800b07c:	2300      	movs	r3, #0
 800b07e:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d01d      	beq.n	800b0c2 <vTaskDelay+0x4e>
        {
            vTaskSuspendAll();
 800b086:	f000 f961 	bl	800b34c <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 800b08a:	4b15      	ldr	r3, [pc, #84]	@ (800b0e0 <vTaskDelay+0x6c>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	2b01      	cmp	r3, #1
 800b090:	d010      	beq.n	800b0b4 <vTaskDelay+0x40>
    __asm volatile
 800b092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b096:	b672      	cpsid	i
 800b098:	f383 8811 	msr	BASEPRI, r3
 800b09c:	f3bf 8f6f 	isb	sy
 800b0a0:	f3bf 8f4f 	dsb	sy
 800b0a4:	b662      	cpsie	i
 800b0a6:	60bb      	str	r3, [r7, #8]
}
 800b0a8:	bf00      	nop
 800b0aa:	f640 118e 	movw	r1, #2446	@ 0x98e
 800b0ae:	480d      	ldr	r0, [pc, #52]	@ (800b0e4 <vTaskDelay+0x70>)
 800b0b0:	f7f8 fd8a 	bl	8003bc8 <vAssertCalled>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b0b4:	2100      	movs	r1, #0
 800b0b6:	6878      	ldr	r0, [r7, #4]
 800b0b8:	f001 fac0 	bl	800c63c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800b0bc:	f000 f954 	bl	800b368 <xTaskResumeAll>
 800b0c0:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d107      	bne.n	800b0d8 <vTaskDelay+0x64>
        {
            taskYIELD_WITHIN_API();
 800b0c8:	4b07      	ldr	r3, [pc, #28]	@ (800b0e8 <vTaskDelay+0x74>)
 800b0ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b0ce:	601a      	str	r2, [r3, #0]
 800b0d0:	f3bf 8f4f 	dsb	sy
 800b0d4:	f3bf 8f6f 	isb	sy
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
    }
 800b0d8:	bf00      	nop
 800b0da:	3710      	adds	r7, #16
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd80      	pop	{r7, pc}
 800b0e0:	200004ac 	.word	0x200004ac
 800b0e4:	080135f8 	.word	0x080135f8
 800b0e8:	e000ed04 	.word	0xe000ed04

0800b0ec <eTaskGetState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

    eTaskState eTaskGetState( TaskHandle_t xTask )
    {
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b08a      	sub	sp, #40	@ 0x28
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
        eTaskState eReturn;
        List_t const * pxStateList;
        List_t const * pxEventList;
        List_t const * pxDelayedList;
        List_t const * pxOverflowedDelayedList;
        const TCB_t * const pxTCB = xTask;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	61fb      	str	r3, [r7, #28]

        traceENTER_eTaskGetState( xTask );

        configASSERT( pxTCB );
 800b0f8:	69fb      	ldr	r3, [r7, #28]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d110      	bne.n	800b120 <eTaskGetState+0x34>
    __asm volatile
 800b0fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b102:	b672      	cpsid	i
 800b104:	f383 8811 	msr	BASEPRI, r3
 800b108:	f3bf 8f6f 	isb	sy
 800b10c:	f3bf 8f4f 	dsb	sy
 800b110:	b662      	cpsie	i
 800b112:	60bb      	str	r3, [r7, #8]
}
 800b114:	bf00      	nop
 800b116:	f44f 611c 	mov.w	r1, #2496	@ 0x9c0
 800b11a:	4834      	ldr	r0, [pc, #208]	@ (800b1ec <eTaskGetState+0x100>)
 800b11c:	f7f8 fd54 	bl	8003bc8 <vAssertCalled>

        #if ( configNUMBER_OF_CORES == 1 )
            if( pxTCB == pxCurrentTCB )
 800b120:	4b33      	ldr	r3, [pc, #204]	@ (800b1f0 <eTaskGetState+0x104>)
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	69fa      	ldr	r2, [r7, #28]
 800b126:	429a      	cmp	r2, r3
 800b128:	d103      	bne.n	800b132 <eTaskGetState+0x46>
            {
                /* The task calling this function is querying its own state. */
                eReturn = eRunning;
 800b12a:	2300      	movs	r3, #0
 800b12c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b130:	e056      	b.n	800b1e0 <eTaskGetState+0xf4>
            }
            else
        #endif
        {
            taskENTER_CRITICAL();
 800b132:	f001 ff0d 	bl	800cf50 <vPortEnterCritical>
            {
                pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800b136:	69fb      	ldr	r3, [r7, #28]
 800b138:	695b      	ldr	r3, [r3, #20]
 800b13a:	61bb      	str	r3, [r7, #24]
                pxEventList = listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) );
 800b13c:	69fb      	ldr	r3, [r7, #28]
 800b13e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b140:	617b      	str	r3, [r7, #20]
                pxDelayedList = pxDelayedTaskList;
 800b142:	4b2c      	ldr	r3, [pc, #176]	@ (800b1f4 <eTaskGetState+0x108>)
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	613b      	str	r3, [r7, #16]
                pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800b148:	4b2b      	ldr	r3, [pc, #172]	@ (800b1f8 <eTaskGetState+0x10c>)
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	60fb      	str	r3, [r7, #12]
            }
            taskEXIT_CRITICAL();
 800b14e:	f001 ff37 	bl	800cfc0 <vPortExitCritical>

            if( pxEventList == &xPendingReadyList )
 800b152:	697b      	ldr	r3, [r7, #20]
 800b154:	4a29      	ldr	r2, [pc, #164]	@ (800b1fc <eTaskGetState+0x110>)
 800b156:	4293      	cmp	r3, r2
 800b158:	d103      	bne.n	800b162 <eTaskGetState+0x76>
            {
                /* The task has been placed on the pending ready list, so its
                 * state is eReady regardless of what list the task's state list
                 * item is currently placed on. */
                eReturn = eReady;
 800b15a:	2301      	movs	r3, #1
 800b15c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b160:	e03e      	b.n	800b1e0 <eTaskGetState+0xf4>
            }
            else if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800b162:	69ba      	ldr	r2, [r7, #24]
 800b164:	693b      	ldr	r3, [r7, #16]
 800b166:	429a      	cmp	r2, r3
 800b168:	d003      	beq.n	800b172 <eTaskGetState+0x86>
 800b16a:	69ba      	ldr	r2, [r7, #24]
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	429a      	cmp	r2, r3
 800b170:	d103      	bne.n	800b17a <eTaskGetState+0x8e>
            {
                /* The task being queried is referenced from one of the Blocked
                 * lists. */
                eReturn = eBlocked;
 800b172:	2302      	movs	r3, #2
 800b174:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b178:	e032      	b.n	800b1e0 <eTaskGetState+0xf4>
            }

            #if ( INCLUDE_vTaskSuspend == 1 )
                else if( pxStateList == &xSuspendedTaskList )
 800b17a:	69bb      	ldr	r3, [r7, #24]
 800b17c:	4a20      	ldr	r2, [pc, #128]	@ (800b200 <eTaskGetState+0x114>)
 800b17e:	4293      	cmp	r3, r2
 800b180:	d120      	bne.n	800b1c4 <eTaskGetState+0xd8>
                {
                    /* The task being queried is referenced from the suspended
                     * list.  Is it genuinely suspended or is it blocked
                     * indefinitely? */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800b182:	69fb      	ldr	r3, [r7, #28]
 800b184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b186:	2b00      	cmp	r3, #0
 800b188:	d118      	bne.n	800b1bc <eTaskGetState+0xd0>
                            /* The task does not appear on the event list item of
                             * and of the RTOS objects, but could still be in the
                             * blocked state if it is waiting on its notification
                             * rather than waiting on an object.  If not, is
                             * suspended. */
                            eReturn = eSuspended;
 800b18a:	2303      	movs	r3, #3
 800b18c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

                            for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 800b190:	2300      	movs	r3, #0
 800b192:	623b      	str	r3, [r7, #32]
 800b194:	e00e      	b.n	800b1b4 <eTaskGetState+0xc8>
                            {
                                if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 800b196:	69fa      	ldr	r2, [r7, #28]
 800b198:	6a3b      	ldr	r3, [r7, #32]
 800b19a:	4413      	add	r3, r2
 800b19c:	33ac      	adds	r3, #172	@ 0xac
 800b19e:	781b      	ldrb	r3, [r3, #0]
 800b1a0:	b2db      	uxtb	r3, r3
 800b1a2:	2b01      	cmp	r3, #1
 800b1a4:	d103      	bne.n	800b1ae <eTaskGetState+0xc2>
                                {
                                    eReturn = eBlocked;
 800b1a6:	2302      	movs	r3, #2
 800b1a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                                    break;
 800b1ac:	e018      	b.n	800b1e0 <eTaskGetState+0xf4>
                            for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 800b1ae:	6a3b      	ldr	r3, [r7, #32]
 800b1b0:	3301      	adds	r3, #1
 800b1b2:	623b      	str	r3, [r7, #32]
 800b1b4:	6a3b      	ldr	r3, [r7, #32]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	dded      	ble.n	800b196 <eTaskGetState+0xaa>
 800b1ba:	e011      	b.n	800b1e0 <eTaskGetState+0xf4>
                        }
                        #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
                    }
                    else
                    {
                        eReturn = eBlocked;
 800b1bc:	2302      	movs	r3, #2
 800b1be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b1c2:	e00d      	b.n	800b1e0 <eTaskGetState+0xf4>
                    }
                }
            #endif /* if ( INCLUDE_vTaskSuspend == 1 ) */

            #if ( INCLUDE_vTaskDelete == 1 )
                else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800b1c4:	69bb      	ldr	r3, [r7, #24]
 800b1c6:	4a0f      	ldr	r2, [pc, #60]	@ (800b204 <eTaskGetState+0x118>)
 800b1c8:	4293      	cmp	r3, r2
 800b1ca:	d002      	beq.n	800b1d2 <eTaskGetState+0xe6>
 800b1cc:	69bb      	ldr	r3, [r7, #24]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d103      	bne.n	800b1da <eTaskGetState+0xee>
                {
                    /* The task being queried is referenced from the deleted
                     * tasks list, or it is not referenced from any lists at
                     * all. */
                    eReturn = eDeleted;
 800b1d2:	2304      	movs	r3, #4
 800b1d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b1d8:	e002      	b.n	800b1e0 <eTaskGetState+0xf4>
            {
                #if ( configNUMBER_OF_CORES == 1 )
                {
                    /* If the task is not in any other state, it must be in the
                     * Ready (including pending ready) state. */
                    eReturn = eReady;
 800b1da:	2301      	movs	r3, #1
 800b1dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
        }

        traceRETURN_eTaskGetState( eReturn );

        return eReturn;
 800b1e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
    }
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	3728      	adds	r7, #40	@ 0x28
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}
 800b1ec:	080135f8 	.word	0x080135f8
 800b1f0:	20000384 	.word	0x20000384
 800b1f4:	2000043c 	.word	0x2000043c
 800b1f8:	20000440 	.word	0x20000440
 800b1fc:	20000444 	.word	0x20000444
 800b200:	20000470 	.word	0x20000470
 800b204:	20000458 	.word	0x20000458

0800b208 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b08a      	sub	sp, #40	@ 0x28
 800b20c:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 800b20e:	2301      	movs	r3, #1
 800b210:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 800b212:	2300      	movs	r3, #0
 800b214:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 800b216:	2300      	movs	r3, #0
 800b218:	617b      	str	r3, [r7, #20]
 800b21a:	e011      	b.n	800b240 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 800b21c:	4a1d      	ldr	r2, [pc, #116]	@ (800b294 <prvCreateIdleTasks+0x8c>)
 800b21e:	697b      	ldr	r3, [r7, #20]
 800b220:	4413      	add	r3, r2
 800b222:	7819      	ldrb	r1, [r3, #0]
 800b224:	463a      	mov	r2, r7
 800b226:	697b      	ldr	r3, [r7, #20]
 800b228:	4413      	add	r3, r2
 800b22a:	460a      	mov	r2, r1
 800b22c:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 800b22e:	463a      	mov	r2, r7
 800b230:	697b      	ldr	r3, [r7, #20]
 800b232:	4413      	add	r3, r2
 800b234:	781b      	ldrb	r3, [r3, #0]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d006      	beq.n	800b248 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 800b23a:	697b      	ldr	r3, [r7, #20]
 800b23c:	3301      	adds	r3, #1
 800b23e:	617b      	str	r3, [r7, #20]
 800b240:	697b      	ldr	r3, [r7, #20]
 800b242:	2b0f      	cmp	r3, #15
 800b244:	ddea      	ble.n	800b21c <prvCreateIdleTasks+0x14>
 800b246:	e000      	b.n	800b24a <prvCreateIdleTasks+0x42>
        {
            break;
 800b248:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 800b24a:	2300      	movs	r3, #0
 800b24c:	61bb      	str	r3, [r7, #24]
 800b24e:	e016      	b.n	800b27e <prvCreateIdleTasks+0x76>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 800b250:	4b11      	ldr	r3, [pc, #68]	@ (800b298 <prvCreateIdleTasks+0x90>)
 800b252:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 800b254:	69bb      	ldr	r3, [r7, #24]
 800b256:	009b      	lsls	r3, r3, #2
 800b258:	4a10      	ldr	r2, [pc, #64]	@ (800b29c <prvCreateIdleTasks+0x94>)
 800b25a:	4413      	add	r3, r2
 800b25c:	4639      	mov	r1, r7
 800b25e:	9301      	str	r3, [sp, #4]
 800b260:	2300      	movs	r3, #0
 800b262:	9300      	str	r3, [sp, #0]
 800b264:	2300      	movs	r3, #0
 800b266:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b26a:	6938      	ldr	r0, [r7, #16]
 800b26c:	f7ff fce6 	bl	800ac3c <xTaskCreate>
 800b270:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 800b272:	69fb      	ldr	r3, [r7, #28]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d006      	beq.n	800b286 <prvCreateIdleTasks+0x7e>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 800b278:	69bb      	ldr	r3, [r7, #24]
 800b27a:	3301      	adds	r3, #1
 800b27c:	61bb      	str	r3, [r7, #24]
 800b27e:	69bb      	ldr	r3, [r7, #24]
 800b280:	2b00      	cmp	r3, #0
 800b282:	dde5      	ble.n	800b250 <prvCreateIdleTasks+0x48>
 800b284:	e000      	b.n	800b288 <prvCreateIdleTasks+0x80>
        {
            break;
 800b286:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 800b288:	69fb      	ldr	r3, [r7, #28]
}
 800b28a:	4618      	mov	r0, r3
 800b28c:	3720      	adds	r7, #32
 800b28e:	46bd      	mov	sp, r7
 800b290:	bd80      	pop	{r7, pc}
 800b292:	bf00      	nop
 800b294:	080136ac 	.word	0x080136ac
 800b298:	0800be45 	.word	0x0800be45
 800b29c:	200004a8 	.word	0x200004a8

0800b2a0 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b084      	sub	sp, #16
 800b2a4:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 800b2a6:	f7ff ffaf 	bl	800b208 <prvCreateIdleTasks>
 800b2aa:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	2b01      	cmp	r3, #1
 800b2b0:	d102      	bne.n	800b2b8 <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 800b2b2:	f001 fa45 	bl	800c740 <xTimerCreateTimerTask>
 800b2b6:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	2b01      	cmp	r3, #1
 800b2bc:	d11d      	bne.n	800b2fa <vTaskStartScheduler+0x5a>
    __asm volatile
 800b2be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2c2:	b672      	cpsid	i
 800b2c4:	f383 8811 	msr	BASEPRI, r3
 800b2c8:	f3bf 8f6f 	isb	sy
 800b2cc:	f3bf 8f4f 	dsb	sy
 800b2d0:	b662      	cpsie	i
 800b2d2:	60bb      	str	r3, [r7, #8]
}
 800b2d4:	bf00      	nop

        #if ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 )
        {
            /* Switch C-Runtime's TLS Block to point to the TLS
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 800b2d6:	4b16      	ldr	r3, [pc, #88]	@ (800b330 <vTaskStartScheduler+0x90>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	335c      	adds	r3, #92	@ 0x5c
 800b2dc:	4a15      	ldr	r2, [pc, #84]	@ (800b334 <vTaskStartScheduler+0x94>)
 800b2de:	6013      	str	r3, [r2, #0]
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800b2e0:	4b15      	ldr	r3, [pc, #84]	@ (800b338 <vTaskStartScheduler+0x98>)
 800b2e2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b2e6:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800b2e8:	4b14      	ldr	r3, [pc, #80]	@ (800b33c <vTaskStartScheduler+0x9c>)
 800b2ea:	2201      	movs	r2, #1
 800b2ec:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b2ee:	4b14      	ldr	r3, [pc, #80]	@ (800b340 <vTaskStartScheduler+0xa0>)
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 800b2f4:	f001 fd4e 	bl	800cd94 <xPortStartScheduler>
 800b2f8:	e014      	b.n	800b324 <vTaskStartScheduler+0x84>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b300:	d110      	bne.n	800b324 <vTaskStartScheduler+0x84>
    __asm volatile
 800b302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b306:	b672      	cpsid	i
 800b308:	f383 8811 	msr	BASEPRI, r3
 800b30c:	f3bf 8f6f 	isb	sy
 800b310:	f3bf 8f4f 	dsb	sy
 800b314:	b662      	cpsie	i
 800b316:	607b      	str	r3, [r7, #4]
}
 800b318:	bf00      	nop
 800b31a:	f640 61a9 	movw	r1, #3753	@ 0xea9
 800b31e:	4809      	ldr	r0, [pc, #36]	@ (800b344 <vTaskStartScheduler+0xa4>)
 800b320:	f7f8 fc52 	bl	8003bc8 <vAssertCalled>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800b324:	4b08      	ldr	r3, [pc, #32]	@ (800b348 <vTaskStartScheduler+0xa8>)
 800b326:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 800b328:	bf00      	nop
 800b32a:	3710      	adds	r7, #16
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd80      	pop	{r7, pc}
 800b330:	20000384 	.word	0x20000384
 800b334:	200001c0 	.word	0x200001c0
 800b338:	200004a4 	.word	0x200004a4
 800b33c:	20000490 	.word	0x20000490
 800b340:	20000488 	.word	0x20000488
 800b344:	080135f8 	.word	0x080135f8
 800b348:	08013b3c 	.word	0x08013b3c

0800b34c <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b34c:	b480      	push	{r7}
 800b34e:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 800b350:	4b04      	ldr	r3, [pc, #16]	@ (800b364 <vTaskSuspendAll+0x18>)
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	3301      	adds	r3, #1
 800b356:	4a03      	ldr	r2, [pc, #12]	@ (800b364 <vTaskSuspendAll+0x18>)
 800b358:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 800b35a:	bf00      	nop
 800b35c:	46bd      	mov	sp, r7
 800b35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b362:	4770      	bx	lr
 800b364:	200004ac 	.word	0x200004ac

0800b368 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b088      	sub	sp, #32
 800b36c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800b36e:	2300      	movs	r3, #0
 800b370:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800b372:	2300      	movs	r3, #0
 800b374:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 800b376:	f001 fdeb 	bl	800cf50 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 800b37a:	2300      	movs	r3, #0
 800b37c:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 800b37e:	4b78      	ldr	r3, [pc, #480]	@ (800b560 <xTaskResumeAll+0x1f8>)
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d110      	bne.n	800b3a8 <xTaskResumeAll+0x40>
    __asm volatile
 800b386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b38a:	b672      	cpsid	i
 800b38c:	f383 8811 	msr	BASEPRI, r3
 800b390:	f3bf 8f6f 	isb	sy
 800b394:	f3bf 8f4f 	dsb	sy
 800b398:	b662      	cpsie	i
 800b39a:	603b      	str	r3, [r7, #0]
}
 800b39c:	bf00      	nop
 800b39e:	f640 718b 	movw	r1, #3979	@ 0xf8b
 800b3a2:	4870      	ldr	r0, [pc, #448]	@ (800b564 <xTaskResumeAll+0x1fc>)
 800b3a4:	f7f8 fc10 	bl	8003bc8 <vAssertCalled>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 800b3a8:	4b6d      	ldr	r3, [pc, #436]	@ (800b560 <xTaskResumeAll+0x1f8>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	3b01      	subs	r3, #1
 800b3ae:	4a6c      	ldr	r2, [pc, #432]	@ (800b560 <xTaskResumeAll+0x1f8>)
 800b3b0:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800b3b2:	4b6b      	ldr	r3, [pc, #428]	@ (800b560 <xTaskResumeAll+0x1f8>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	f040 80ca 	bne.w	800b550 <xTaskResumeAll+0x1e8>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b3bc:	4b6a      	ldr	r3, [pc, #424]	@ (800b568 <xTaskResumeAll+0x200>)
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	f000 80c5 	beq.w	800b550 <xTaskResumeAll+0x1e8>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b3c6:	e08e      	b.n	800b4e6 <xTaskResumeAll+0x17e>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800b3c8:	4b68      	ldr	r3, [pc, #416]	@ (800b56c <xTaskResumeAll+0x204>)
 800b3ca:	68db      	ldr	r3, [r3, #12]
 800b3cc:	68db      	ldr	r3, [r3, #12]
 800b3ce:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800b3d0:	69fb      	ldr	r3, [r7, #28]
 800b3d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3d4:	60fb      	str	r3, [r7, #12]
 800b3d6:	69fb      	ldr	r3, [r7, #28]
 800b3d8:	69db      	ldr	r3, [r3, #28]
 800b3da:	69fa      	ldr	r2, [r7, #28]
 800b3dc:	6a12      	ldr	r2, [r2, #32]
 800b3de:	609a      	str	r2, [r3, #8]
 800b3e0:	69fb      	ldr	r3, [r7, #28]
 800b3e2:	6a1b      	ldr	r3, [r3, #32]
 800b3e4:	69fa      	ldr	r2, [r7, #28]
 800b3e6:	69d2      	ldr	r2, [r2, #28]
 800b3e8:	605a      	str	r2, [r3, #4]
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	685a      	ldr	r2, [r3, #4]
 800b3ee:	69fb      	ldr	r3, [r7, #28]
 800b3f0:	3318      	adds	r3, #24
 800b3f2:	429a      	cmp	r2, r3
 800b3f4:	d103      	bne.n	800b3fe <xTaskResumeAll+0x96>
 800b3f6:	69fb      	ldr	r3, [r7, #28]
 800b3f8:	6a1a      	ldr	r2, [r3, #32]
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	605a      	str	r2, [r3, #4]
 800b3fe:	69fb      	ldr	r3, [r7, #28]
 800b400:	2200      	movs	r2, #0
 800b402:	629a      	str	r2, [r3, #40]	@ 0x28
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	1e5a      	subs	r2, r3, #1
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800b40e:	69fb      	ldr	r3, [r7, #28]
 800b410:	695b      	ldr	r3, [r3, #20]
 800b412:	60bb      	str	r3, [r7, #8]
 800b414:	69fb      	ldr	r3, [r7, #28]
 800b416:	689b      	ldr	r3, [r3, #8]
 800b418:	69fa      	ldr	r2, [r7, #28]
 800b41a:	68d2      	ldr	r2, [r2, #12]
 800b41c:	609a      	str	r2, [r3, #8]
 800b41e:	69fb      	ldr	r3, [r7, #28]
 800b420:	68db      	ldr	r3, [r3, #12]
 800b422:	69fa      	ldr	r2, [r7, #28]
 800b424:	6892      	ldr	r2, [r2, #8]
 800b426:	605a      	str	r2, [r3, #4]
 800b428:	68bb      	ldr	r3, [r7, #8]
 800b42a:	685a      	ldr	r2, [r3, #4]
 800b42c:	69fb      	ldr	r3, [r7, #28]
 800b42e:	3304      	adds	r3, #4
 800b430:	429a      	cmp	r2, r3
 800b432:	d103      	bne.n	800b43c <xTaskResumeAll+0xd4>
 800b434:	69fb      	ldr	r3, [r7, #28]
 800b436:	68da      	ldr	r2, [r3, #12]
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	605a      	str	r2, [r3, #4]
 800b43c:	69fb      	ldr	r3, [r7, #28]
 800b43e:	2200      	movs	r2, #0
 800b440:	615a      	str	r2, [r3, #20]
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	1e5a      	subs	r2, r3, #1
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 800b44c:	69fb      	ldr	r3, [r7, #28]
 800b44e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b450:	2201      	movs	r2, #1
 800b452:	409a      	lsls	r2, r3
 800b454:	4b46      	ldr	r3, [pc, #280]	@ (800b570 <xTaskResumeAll+0x208>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	4313      	orrs	r3, r2
 800b45a:	4a45      	ldr	r2, [pc, #276]	@ (800b570 <xTaskResumeAll+0x208>)
 800b45c:	6013      	str	r3, [r2, #0]
 800b45e:	69fb      	ldr	r3, [r7, #28]
 800b460:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b462:	4944      	ldr	r1, [pc, #272]	@ (800b574 <xTaskResumeAll+0x20c>)
 800b464:	4613      	mov	r3, r2
 800b466:	009b      	lsls	r3, r3, #2
 800b468:	4413      	add	r3, r2
 800b46a:	009b      	lsls	r3, r3, #2
 800b46c:	440b      	add	r3, r1
 800b46e:	3304      	adds	r3, #4
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	607b      	str	r3, [r7, #4]
 800b474:	69fb      	ldr	r3, [r7, #28]
 800b476:	687a      	ldr	r2, [r7, #4]
 800b478:	609a      	str	r2, [r3, #8]
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	689a      	ldr	r2, [r3, #8]
 800b47e:	69fb      	ldr	r3, [r7, #28]
 800b480:	60da      	str	r2, [r3, #12]
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	689b      	ldr	r3, [r3, #8]
 800b486:	69fa      	ldr	r2, [r7, #28]
 800b488:	3204      	adds	r2, #4
 800b48a:	605a      	str	r2, [r3, #4]
 800b48c:	69fb      	ldr	r3, [r7, #28]
 800b48e:	1d1a      	adds	r2, r3, #4
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	609a      	str	r2, [r3, #8]
 800b494:	69fb      	ldr	r3, [r7, #28]
 800b496:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b498:	4613      	mov	r3, r2
 800b49a:	009b      	lsls	r3, r3, #2
 800b49c:	4413      	add	r3, r2
 800b49e:	009b      	lsls	r3, r3, #2
 800b4a0:	4a34      	ldr	r2, [pc, #208]	@ (800b574 <xTaskResumeAll+0x20c>)
 800b4a2:	441a      	add	r2, r3
 800b4a4:	69fb      	ldr	r3, [r7, #28]
 800b4a6:	615a      	str	r2, [r3, #20]
 800b4a8:	69fb      	ldr	r3, [r7, #28]
 800b4aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4ac:	4931      	ldr	r1, [pc, #196]	@ (800b574 <xTaskResumeAll+0x20c>)
 800b4ae:	4613      	mov	r3, r2
 800b4b0:	009b      	lsls	r3, r3, #2
 800b4b2:	4413      	add	r3, r2
 800b4b4:	009b      	lsls	r3, r3, #2
 800b4b6:	440b      	add	r3, r1
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	69fa      	ldr	r2, [r7, #28]
 800b4bc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800b4be:	1c59      	adds	r1, r3, #1
 800b4c0:	482c      	ldr	r0, [pc, #176]	@ (800b574 <xTaskResumeAll+0x20c>)
 800b4c2:	4613      	mov	r3, r2
 800b4c4:	009b      	lsls	r3, r3, #2
 800b4c6:	4413      	add	r3, r2
 800b4c8:	009b      	lsls	r3, r3, #2
 800b4ca:	4403      	add	r3, r0
 800b4cc:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b4ce:	69fb      	ldr	r3, [r7, #28]
 800b4d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4d2:	4b29      	ldr	r3, [pc, #164]	@ (800b578 <xTaskResumeAll+0x210>)
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4d8:	429a      	cmp	r2, r3
 800b4da:	d904      	bls.n	800b4e6 <xTaskResumeAll+0x17e>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 800b4dc:	4a27      	ldr	r2, [pc, #156]	@ (800b57c <xTaskResumeAll+0x214>)
 800b4de:	693b      	ldr	r3, [r7, #16]
 800b4e0:	2101      	movs	r1, #1
 800b4e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b4e6:	4b21      	ldr	r3, [pc, #132]	@ (800b56c <xTaskResumeAll+0x204>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	f47f af6c 	bne.w	800b3c8 <xTaskResumeAll+0x60>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 800b4f0:	69fb      	ldr	r3, [r7, #28]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d001      	beq.n	800b4fa <xTaskResumeAll+0x192>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 800b4f6:	f000 fe21 	bl	800c13c <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b4fa:	4b21      	ldr	r3, [pc, #132]	@ (800b580 <xTaskResumeAll+0x218>)
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 800b500:	697b      	ldr	r3, [r7, #20]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d012      	beq.n	800b52c <xTaskResumeAll+0x1c4>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 800b506:	f000 f8e1 	bl	800b6cc <xTaskIncrementTick>
 800b50a:	4603      	mov	r3, r0
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d004      	beq.n	800b51a <xTaskResumeAll+0x1b2>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 800b510:	4a1a      	ldr	r2, [pc, #104]	@ (800b57c <xTaskResumeAll+0x214>)
 800b512:	693b      	ldr	r3, [r7, #16]
 800b514:	2101      	movs	r1, #1
 800b516:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 800b51a:	697b      	ldr	r3, [r7, #20]
 800b51c:	3b01      	subs	r3, #1
 800b51e:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 800b520:	697b      	ldr	r3, [r7, #20]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d1ef      	bne.n	800b506 <xTaskResumeAll+0x19e>

                            xPendedTicks = 0;
 800b526:	4b16      	ldr	r3, [pc, #88]	@ (800b580 <xTaskResumeAll+0x218>)
 800b528:	2200      	movs	r2, #0
 800b52a:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 800b52c:	4a13      	ldr	r2, [pc, #76]	@ (800b57c <xTaskResumeAll+0x214>)
 800b52e:	693b      	ldr	r3, [r7, #16]
 800b530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d00b      	beq.n	800b550 <xTaskResumeAll+0x1e8>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800b538:	2301      	movs	r3, #1
 800b53a:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 800b53c:	4b0e      	ldr	r3, [pc, #56]	@ (800b578 <xTaskResumeAll+0x210>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	4b10      	ldr	r3, [pc, #64]	@ (800b584 <xTaskResumeAll+0x21c>)
 800b542:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b546:	601a      	str	r2, [r3, #0]
 800b548:	f3bf 8f4f 	dsb	sy
 800b54c:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800b550:	f001 fd36 	bl	800cfc0 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 800b554:	69bb      	ldr	r3, [r7, #24]
}
 800b556:	4618      	mov	r0, r3
 800b558:	3720      	adds	r7, #32
 800b55a:	46bd      	mov	sp, r7
 800b55c:	bd80      	pop	{r7, pc}
 800b55e:	bf00      	nop
 800b560:	200004ac 	.word	0x200004ac
 800b564:	080135f8 	.word	0x080135f8
 800b568:	20000484 	.word	0x20000484
 800b56c:	20000444 	.word	0x20000444
 800b570:	2000048c 	.word	0x2000048c
 800b574:	20000388 	.word	0x20000388
 800b578:	20000384 	.word	0x20000384
 800b57c:	20000498 	.word	0x20000498
 800b580:	20000494 	.word	0x20000494
 800b584:	e000ed04 	.word	0xe000ed04

0800b588 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b588:	b480      	push	{r7}
 800b58a:	b083      	sub	sp, #12
 800b58c:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800b58e:	4b05      	ldr	r3, [pc, #20]	@ (800b5a4 <xTaskGetTickCount+0x1c>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );

    return xTicks;
 800b594:	687b      	ldr	r3, [r7, #4]
}
 800b596:	4618      	mov	r0, r3
 800b598:	370c      	adds	r7, #12
 800b59a:	46bd      	mov	sp, r7
 800b59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a0:	4770      	bx	lr
 800b5a2:	bf00      	nop
 800b5a4:	20000488 	.word	0x20000488

0800b5a8 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 800b5a8:	b480      	push	{r7}
 800b5aa:	af00      	add	r7, sp, #0

    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    traceRETURN_uxTaskGetNumberOfTasks( uxCurrentNumberOfTasks );

    return uxCurrentNumberOfTasks;
 800b5ac:	4b03      	ldr	r3, [pc, #12]	@ (800b5bc <uxTaskGetNumberOfTasks+0x14>)
 800b5ae:	681b      	ldr	r3, [r3, #0]
}
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b8:	4770      	bx	lr
 800b5ba:	bf00      	nop
 800b5bc:	20000484 	.word	0x20000484

0800b5c0 <uxTaskGetSystemState>:
#if ( configUSE_TRACE_FACILITY == 1 )

    UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray,
                                      const UBaseType_t uxArraySize,
                                      configRUN_TIME_COUNTER_TYPE * const pulTotalRunTime )
    {
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b086      	sub	sp, #24
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	60f8      	str	r0, [r7, #12]
 800b5c8:	60b9      	str	r1, [r7, #8]
 800b5ca:	607a      	str	r2, [r7, #4]
        UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	617b      	str	r3, [r7, #20]
 800b5d0:	2307      	movs	r3, #7
 800b5d2:	613b      	str	r3, [r7, #16]

        traceENTER_uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, pulTotalRunTime );

        vTaskSuspendAll();
 800b5d4:	f7ff feba 	bl	800b34c <vTaskSuspendAll>
        {
            /* Is there a space in the array for each task in the system? */
            if( uxArraySize >= uxCurrentNumberOfTasks )
 800b5d8:	4b36      	ldr	r3, [pc, #216]	@ (800b6b4 <uxTaskGetSystemState+0xf4>)
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	68ba      	ldr	r2, [r7, #8]
 800b5de:	429a      	cmp	r2, r3
 800b5e0:	d360      	bcc.n	800b6a4 <uxTaskGetSystemState+0xe4>
            {
                /* Fill in an TaskStatus_t structure with information on each
                 * task in the Ready state. */
                do
                {
                    uxQueue--;
 800b5e2:	693b      	ldr	r3, [r7, #16]
 800b5e4:	3b01      	subs	r3, #1
 800b5e6:	613b      	str	r3, [r7, #16]
                    uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady ) );
 800b5e8:	697b      	ldr	r3, [r7, #20]
 800b5ea:	222c      	movs	r2, #44	@ 0x2c
 800b5ec:	fb02 f303 	mul.w	r3, r2, r3
 800b5f0:	68fa      	ldr	r2, [r7, #12]
 800b5f2:	18d0      	adds	r0, r2, r3
 800b5f4:	693a      	ldr	r2, [r7, #16]
 800b5f6:	4613      	mov	r3, r2
 800b5f8:	009b      	lsls	r3, r3, #2
 800b5fa:	4413      	add	r3, r2
 800b5fc:	009b      	lsls	r3, r3, #2
 800b5fe:	4a2e      	ldr	r2, [pc, #184]	@ (800b6b8 <uxTaskGetSystemState+0xf8>)
 800b600:	4413      	add	r3, r2
 800b602:	2201      	movs	r2, #1
 800b604:	4619      	mov	r1, r3
 800b606:	f000 fd35 	bl	800c074 <prvListTasksWithinSingleList>
 800b60a:	4602      	mov	r2, r0
 800b60c:	697b      	ldr	r3, [r7, #20]
 800b60e:	4413      	add	r3, r2
 800b610:	617b      	str	r3, [r7, #20]
                } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY );
 800b612:	693b      	ldr	r3, [r7, #16]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d1e4      	bne.n	800b5e2 <uxTaskGetSystemState+0x22>

                /* Fill in an TaskStatus_t structure with information on each
                 * task in the Blocked state. */
                uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked ) );
 800b618:	697b      	ldr	r3, [r7, #20]
 800b61a:	222c      	movs	r2, #44	@ 0x2c
 800b61c:	fb02 f303 	mul.w	r3, r2, r3
 800b620:	68fa      	ldr	r2, [r7, #12]
 800b622:	4413      	add	r3, r2
 800b624:	4a25      	ldr	r2, [pc, #148]	@ (800b6bc <uxTaskGetSystemState+0xfc>)
 800b626:	6811      	ldr	r1, [r2, #0]
 800b628:	2202      	movs	r2, #2
 800b62a:	4618      	mov	r0, r3
 800b62c:	f000 fd22 	bl	800c074 <prvListTasksWithinSingleList>
 800b630:	4602      	mov	r2, r0
 800b632:	697b      	ldr	r3, [r7, #20]
 800b634:	4413      	add	r3, r2
 800b636:	617b      	str	r3, [r7, #20]
                uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked ) );
 800b638:	697b      	ldr	r3, [r7, #20]
 800b63a:	222c      	movs	r2, #44	@ 0x2c
 800b63c:	fb02 f303 	mul.w	r3, r2, r3
 800b640:	68fa      	ldr	r2, [r7, #12]
 800b642:	4413      	add	r3, r2
 800b644:	4a1e      	ldr	r2, [pc, #120]	@ (800b6c0 <uxTaskGetSystemState+0x100>)
 800b646:	6811      	ldr	r1, [r2, #0]
 800b648:	2202      	movs	r2, #2
 800b64a:	4618      	mov	r0, r3
 800b64c:	f000 fd12 	bl	800c074 <prvListTasksWithinSingleList>
 800b650:	4602      	mov	r2, r0
 800b652:	697b      	ldr	r3, [r7, #20]
 800b654:	4413      	add	r3, r2
 800b656:	617b      	str	r3, [r7, #20]

                #if ( INCLUDE_vTaskDelete == 1 )
                {
                    /* Fill in an TaskStatus_t structure with information on
                     * each task that has been deleted but not yet cleaned up. */
                    uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted ) );
 800b658:	697b      	ldr	r3, [r7, #20]
 800b65a:	222c      	movs	r2, #44	@ 0x2c
 800b65c:	fb02 f303 	mul.w	r3, r2, r3
 800b660:	68fa      	ldr	r2, [r7, #12]
 800b662:	4413      	add	r3, r2
 800b664:	2204      	movs	r2, #4
 800b666:	4917      	ldr	r1, [pc, #92]	@ (800b6c4 <uxTaskGetSystemState+0x104>)
 800b668:	4618      	mov	r0, r3
 800b66a:	f000 fd03 	bl	800c074 <prvListTasksWithinSingleList>
 800b66e:	4602      	mov	r2, r0
 800b670:	697b      	ldr	r3, [r7, #20]
 800b672:	4413      	add	r3, r2
 800b674:	617b      	str	r3, [r7, #20]

                #if ( INCLUDE_vTaskSuspend == 1 )
                {
                    /* Fill in an TaskStatus_t structure with information on
                     * each task in the Suspended state. */
                    uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended ) );
 800b676:	697b      	ldr	r3, [r7, #20]
 800b678:	222c      	movs	r2, #44	@ 0x2c
 800b67a:	fb02 f303 	mul.w	r3, r2, r3
 800b67e:	68fa      	ldr	r2, [r7, #12]
 800b680:	4413      	add	r3, r2
 800b682:	2203      	movs	r2, #3
 800b684:	4910      	ldr	r1, [pc, #64]	@ (800b6c8 <uxTaskGetSystemState+0x108>)
 800b686:	4618      	mov	r0, r3
 800b688:	f000 fcf4 	bl	800c074 <prvListTasksWithinSingleList>
 800b68c:	4602      	mov	r2, r0
 800b68e:	697b      	ldr	r3, [r7, #20]
 800b690:	4413      	add	r3, r2
 800b692:	617b      	str	r3, [r7, #20]
                }
                #endif

                #if ( configGENERATE_RUN_TIME_STATS == 1 )
                {
                    if( pulTotalRunTime != NULL )
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d004      	beq.n	800b6a4 <uxTaskGetSystemState+0xe4>
                    {
                        #ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
                            portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
                        #else
                            *pulTotalRunTime = ( configRUN_TIME_COUNTER_TYPE ) portGET_RUN_TIME_COUNTER_VALUE();
 800b69a:	f7ff ff75 	bl	800b588 <xTaskGetTickCount>
 800b69e:	4602      	mov	r2, r0
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	601a      	str	r2, [r3, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        ( void ) xTaskResumeAll();
 800b6a4:	f7ff fe60 	bl	800b368 <xTaskResumeAll>

        traceRETURN_uxTaskGetSystemState( uxTask );

        return uxTask;
 800b6a8:	697b      	ldr	r3, [r7, #20]
    }
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	3718      	adds	r7, #24
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}
 800b6b2:	bf00      	nop
 800b6b4:	20000484 	.word	0x20000484
 800b6b8:	20000388 	.word	0x20000388
 800b6bc:	2000043c 	.word	0x2000043c
 800b6c0:	20000440 	.word	0x20000440
 800b6c4:	20000458 	.word	0x20000458
 800b6c8:	20000470 	.word	0x20000470

0800b6cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b08a      	sub	sp, #40	@ 0x28
 800b6d0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800b6d6:	4b81      	ldr	r3, [pc, #516]	@ (800b8dc <xTaskIncrementTick+0x210>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	f040 80f4 	bne.w	800b8c8 <xTaskIncrementTick+0x1fc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b6e0:	4b7f      	ldr	r3, [pc, #508]	@ (800b8e0 <xTaskIncrementTick+0x214>)
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	3301      	adds	r3, #1
 800b6e6:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800b6e8:	4a7d      	ldr	r2, [pc, #500]	@ (800b8e0 <xTaskIncrementTick+0x214>)
 800b6ea:	6a3b      	ldr	r3, [r7, #32]
 800b6ec:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 800b6ee:	6a3b      	ldr	r3, [r7, #32]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d126      	bne.n	800b742 <xTaskIncrementTick+0x76>
        {
            taskSWITCH_DELAYED_LISTS();
 800b6f4:	4b7b      	ldr	r3, [pc, #492]	@ (800b8e4 <xTaskIncrementTick+0x218>)
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d010      	beq.n	800b720 <xTaskIncrementTick+0x54>
    __asm volatile
 800b6fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b702:	b672      	cpsid	i
 800b704:	f383 8811 	msr	BASEPRI, r3
 800b708:	f3bf 8f6f 	isb	sy
 800b70c:	f3bf 8f4f 	dsb	sy
 800b710:	b662      	cpsie	i
 800b712:	607b      	str	r3, [r7, #4]
}
 800b714:	bf00      	nop
 800b716:	f241 215f 	movw	r1, #4703	@ 0x125f
 800b71a:	4873      	ldr	r0, [pc, #460]	@ (800b8e8 <xTaskIncrementTick+0x21c>)
 800b71c:	f7f8 fa54 	bl	8003bc8 <vAssertCalled>
 800b720:	4b70      	ldr	r3, [pc, #448]	@ (800b8e4 <xTaskIncrementTick+0x218>)
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	61fb      	str	r3, [r7, #28]
 800b726:	4b71      	ldr	r3, [pc, #452]	@ (800b8ec <xTaskIncrementTick+0x220>)
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	4a6e      	ldr	r2, [pc, #440]	@ (800b8e4 <xTaskIncrementTick+0x218>)
 800b72c:	6013      	str	r3, [r2, #0]
 800b72e:	4a6f      	ldr	r2, [pc, #444]	@ (800b8ec <xTaskIncrementTick+0x220>)
 800b730:	69fb      	ldr	r3, [r7, #28]
 800b732:	6013      	str	r3, [r2, #0]
 800b734:	4b6e      	ldr	r3, [pc, #440]	@ (800b8f0 <xTaskIncrementTick+0x224>)
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	3301      	adds	r3, #1
 800b73a:	4a6d      	ldr	r2, [pc, #436]	@ (800b8f0 <xTaskIncrementTick+0x224>)
 800b73c:	6013      	str	r3, [r2, #0]
 800b73e:	f000 fcfd 	bl	800c13c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800b742:	4b6c      	ldr	r3, [pc, #432]	@ (800b8f4 <xTaskIncrementTick+0x228>)
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	6a3a      	ldr	r2, [r7, #32]
 800b748:	429a      	cmp	r2, r3
 800b74a:	f0c0 80a8 	bcc.w	800b89e <xTaskIncrementTick+0x1d2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b74e:	4b65      	ldr	r3, [pc, #404]	@ (800b8e4 <xTaskIncrementTick+0x218>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d104      	bne.n	800b762 <xTaskIncrementTick+0x96>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 800b758:	4b66      	ldr	r3, [pc, #408]	@ (800b8f4 <xTaskIncrementTick+0x228>)
 800b75a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b75e:	601a      	str	r2, [r3, #0]
                    break;
 800b760:	e09d      	b.n	800b89e <xTaskIncrementTick+0x1d2>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b762:	4b60      	ldr	r3, [pc, #384]	@ (800b8e4 <xTaskIncrementTick+0x218>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	68db      	ldr	r3, [r3, #12]
 800b768:	68db      	ldr	r3, [r3, #12]
 800b76a:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b76c:	69bb      	ldr	r3, [r7, #24]
 800b76e:	685b      	ldr	r3, [r3, #4]
 800b770:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800b772:	6a3a      	ldr	r2, [r7, #32]
 800b774:	697b      	ldr	r3, [r7, #20]
 800b776:	429a      	cmp	r2, r3
 800b778:	d203      	bcs.n	800b782 <xTaskIncrementTick+0xb6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800b77a:	4a5e      	ldr	r2, [pc, #376]	@ (800b8f4 <xTaskIncrementTick+0x228>)
 800b77c:	697b      	ldr	r3, [r7, #20]
 800b77e:	6013      	str	r3, [r2, #0]
                        break;
 800b780:	e08d      	b.n	800b89e <xTaskIncrementTick+0x1d2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800b782:	69bb      	ldr	r3, [r7, #24]
 800b784:	695b      	ldr	r3, [r3, #20]
 800b786:	613b      	str	r3, [r7, #16]
 800b788:	69bb      	ldr	r3, [r7, #24]
 800b78a:	689b      	ldr	r3, [r3, #8]
 800b78c:	69ba      	ldr	r2, [r7, #24]
 800b78e:	68d2      	ldr	r2, [r2, #12]
 800b790:	609a      	str	r2, [r3, #8]
 800b792:	69bb      	ldr	r3, [r7, #24]
 800b794:	68db      	ldr	r3, [r3, #12]
 800b796:	69ba      	ldr	r2, [r7, #24]
 800b798:	6892      	ldr	r2, [r2, #8]
 800b79a:	605a      	str	r2, [r3, #4]
 800b79c:	693b      	ldr	r3, [r7, #16]
 800b79e:	685a      	ldr	r2, [r3, #4]
 800b7a0:	69bb      	ldr	r3, [r7, #24]
 800b7a2:	3304      	adds	r3, #4
 800b7a4:	429a      	cmp	r2, r3
 800b7a6:	d103      	bne.n	800b7b0 <xTaskIncrementTick+0xe4>
 800b7a8:	69bb      	ldr	r3, [r7, #24]
 800b7aa:	68da      	ldr	r2, [r3, #12]
 800b7ac:	693b      	ldr	r3, [r7, #16]
 800b7ae:	605a      	str	r2, [r3, #4]
 800b7b0:	69bb      	ldr	r3, [r7, #24]
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	615a      	str	r2, [r3, #20]
 800b7b6:	693b      	ldr	r3, [r7, #16]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	1e5a      	subs	r2, r3, #1
 800b7bc:	693b      	ldr	r3, [r7, #16]
 800b7be:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b7c0:	69bb      	ldr	r3, [r7, #24]
 800b7c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d01e      	beq.n	800b806 <xTaskIncrementTick+0x13a>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800b7c8:	69bb      	ldr	r3, [r7, #24]
 800b7ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7cc:	60fb      	str	r3, [r7, #12]
 800b7ce:	69bb      	ldr	r3, [r7, #24]
 800b7d0:	69db      	ldr	r3, [r3, #28]
 800b7d2:	69ba      	ldr	r2, [r7, #24]
 800b7d4:	6a12      	ldr	r2, [r2, #32]
 800b7d6:	609a      	str	r2, [r3, #8]
 800b7d8:	69bb      	ldr	r3, [r7, #24]
 800b7da:	6a1b      	ldr	r3, [r3, #32]
 800b7dc:	69ba      	ldr	r2, [r7, #24]
 800b7de:	69d2      	ldr	r2, [r2, #28]
 800b7e0:	605a      	str	r2, [r3, #4]
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	685a      	ldr	r2, [r3, #4]
 800b7e6:	69bb      	ldr	r3, [r7, #24]
 800b7e8:	3318      	adds	r3, #24
 800b7ea:	429a      	cmp	r2, r3
 800b7ec:	d103      	bne.n	800b7f6 <xTaskIncrementTick+0x12a>
 800b7ee:	69bb      	ldr	r3, [r7, #24]
 800b7f0:	6a1a      	ldr	r2, [r3, #32]
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	605a      	str	r2, [r3, #4]
 800b7f6:	69bb      	ldr	r3, [r7, #24]
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	629a      	str	r2, [r3, #40]	@ 0x28
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	1e5a      	subs	r2, r3, #1
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800b806:	69bb      	ldr	r3, [r7, #24]
 800b808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b80a:	2201      	movs	r2, #1
 800b80c:	409a      	lsls	r2, r3
 800b80e:	4b3a      	ldr	r3, [pc, #232]	@ (800b8f8 <xTaskIncrementTick+0x22c>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	4313      	orrs	r3, r2
 800b814:	4a38      	ldr	r2, [pc, #224]	@ (800b8f8 <xTaskIncrementTick+0x22c>)
 800b816:	6013      	str	r3, [r2, #0]
 800b818:	69bb      	ldr	r3, [r7, #24]
 800b81a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b81c:	4937      	ldr	r1, [pc, #220]	@ (800b8fc <xTaskIncrementTick+0x230>)
 800b81e:	4613      	mov	r3, r2
 800b820:	009b      	lsls	r3, r3, #2
 800b822:	4413      	add	r3, r2
 800b824:	009b      	lsls	r3, r3, #2
 800b826:	440b      	add	r3, r1
 800b828:	3304      	adds	r3, #4
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	60bb      	str	r3, [r7, #8]
 800b82e:	69bb      	ldr	r3, [r7, #24]
 800b830:	68ba      	ldr	r2, [r7, #8]
 800b832:	609a      	str	r2, [r3, #8]
 800b834:	68bb      	ldr	r3, [r7, #8]
 800b836:	689a      	ldr	r2, [r3, #8]
 800b838:	69bb      	ldr	r3, [r7, #24]
 800b83a:	60da      	str	r2, [r3, #12]
 800b83c:	68bb      	ldr	r3, [r7, #8]
 800b83e:	689b      	ldr	r3, [r3, #8]
 800b840:	69ba      	ldr	r2, [r7, #24]
 800b842:	3204      	adds	r2, #4
 800b844:	605a      	str	r2, [r3, #4]
 800b846:	69bb      	ldr	r3, [r7, #24]
 800b848:	1d1a      	adds	r2, r3, #4
 800b84a:	68bb      	ldr	r3, [r7, #8]
 800b84c:	609a      	str	r2, [r3, #8]
 800b84e:	69bb      	ldr	r3, [r7, #24]
 800b850:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b852:	4613      	mov	r3, r2
 800b854:	009b      	lsls	r3, r3, #2
 800b856:	4413      	add	r3, r2
 800b858:	009b      	lsls	r3, r3, #2
 800b85a:	4a28      	ldr	r2, [pc, #160]	@ (800b8fc <xTaskIncrementTick+0x230>)
 800b85c:	441a      	add	r2, r3
 800b85e:	69bb      	ldr	r3, [r7, #24]
 800b860:	615a      	str	r2, [r3, #20]
 800b862:	69bb      	ldr	r3, [r7, #24]
 800b864:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b866:	4925      	ldr	r1, [pc, #148]	@ (800b8fc <xTaskIncrementTick+0x230>)
 800b868:	4613      	mov	r3, r2
 800b86a:	009b      	lsls	r3, r3, #2
 800b86c:	4413      	add	r3, r2
 800b86e:	009b      	lsls	r3, r3, #2
 800b870:	440b      	add	r3, r1
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	69ba      	ldr	r2, [r7, #24]
 800b876:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800b878:	1c59      	adds	r1, r3, #1
 800b87a:	4820      	ldr	r0, [pc, #128]	@ (800b8fc <xTaskIncrementTick+0x230>)
 800b87c:	4613      	mov	r3, r2
 800b87e:	009b      	lsls	r3, r3, #2
 800b880:	4413      	add	r3, r2
 800b882:	009b      	lsls	r3, r3, #2
 800b884:	4403      	add	r3, r0
 800b886:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b888:	69bb      	ldr	r3, [r7, #24]
 800b88a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b88c:	4b1c      	ldr	r3, [pc, #112]	@ (800b900 <xTaskIncrementTick+0x234>)
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b892:	429a      	cmp	r2, r3
 800b894:	f67f af5b 	bls.w	800b74e <xTaskIncrementTick+0x82>
                            {
                                xSwitchRequired = pdTRUE;
 800b898:	2301      	movs	r3, #1
 800b89a:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b89c:	e757      	b.n	800b74e <xTaskIncrementTick+0x82>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 800b89e:	4b18      	ldr	r3, [pc, #96]	@ (800b900 <xTaskIncrementTick+0x234>)
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b8a4:	4915      	ldr	r1, [pc, #84]	@ (800b8fc <xTaskIncrementTick+0x230>)
 800b8a6:	4613      	mov	r3, r2
 800b8a8:	009b      	lsls	r3, r3, #2
 800b8aa:	4413      	add	r3, r2
 800b8ac:	009b      	lsls	r3, r3, #2
 800b8ae:	440b      	add	r3, r1
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	2b01      	cmp	r3, #1
 800b8b4:	d901      	bls.n	800b8ba <xTaskIncrementTick+0x1ee>
                {
                    xSwitchRequired = pdTRUE;
 800b8b6:	2301      	movs	r3, #1
 800b8b8:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 800b8ba:	4b12      	ldr	r3, [pc, #72]	@ (800b904 <xTaskIncrementTick+0x238>)
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d007      	beq.n	800b8d2 <xTaskIncrementTick+0x206>
                {
                    xSwitchRequired = pdTRUE;
 800b8c2:	2301      	movs	r3, #1
 800b8c4:	627b      	str	r3, [r7, #36]	@ 0x24
 800b8c6:	e004      	b.n	800b8d2 <xTaskIncrementTick+0x206>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 800b8c8:	4b0f      	ldr	r3, [pc, #60]	@ (800b908 <xTaskIncrementTick+0x23c>)
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	3301      	adds	r3, #1
 800b8ce:	4a0e      	ldr	r2, [pc, #56]	@ (800b908 <xTaskIncrementTick+0x23c>)
 800b8d0:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 800b8d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	3728      	adds	r7, #40	@ 0x28
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	bd80      	pop	{r7, pc}
 800b8dc:	200004ac 	.word	0x200004ac
 800b8e0:	20000488 	.word	0x20000488
 800b8e4:	2000043c 	.word	0x2000043c
 800b8e8:	080135f8 	.word	0x080135f8
 800b8ec:	20000440 	.word	0x20000440
 800b8f0:	2000049c 	.word	0x2000049c
 800b8f4:	200004a4 	.word	0x200004a4
 800b8f8:	2000048c 	.word	0x2000048c
 800b8fc:	20000388 	.word	0x20000388
 800b900:	20000384 	.word	0x20000384
 800b904:	20000498 	.word	0x20000498
 800b908:	20000494 	.word	0x20000494

0800b90c <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b088      	sub	sp, #32
 800b910:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 800b912:	4b4c      	ldr	r3, [pc, #304]	@ (800ba44 <vTaskSwitchContext+0x138>)
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d003      	beq.n	800b922 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 800b91a:	4b4b      	ldr	r3, [pc, #300]	@ (800ba48 <vTaskSwitchContext+0x13c>)
 800b91c:	2201      	movs	r2, #1
 800b91e:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 800b920:	e08c      	b.n	800ba3c <vTaskSwitchContext+0x130>
            xYieldPendings[ 0 ] = pdFALSE;
 800b922:	4b49      	ldr	r3, [pc, #292]	@ (800ba48 <vTaskSwitchContext+0x13c>)
 800b924:	2200      	movs	r2, #0
 800b926:	601a      	str	r2, [r3, #0]
                    ulTotalRunTime[ 0 ] = portGET_RUN_TIME_COUNTER_VALUE();
 800b928:	f7ff fe2e 	bl	800b588 <xTaskGetTickCount>
 800b92c:	4603      	mov	r3, r0
 800b92e:	4a47      	ldr	r2, [pc, #284]	@ (800ba4c <vTaskSwitchContext+0x140>)
 800b930:	6013      	str	r3, [r2, #0]
                if( ulTotalRunTime[ 0 ] > ulTaskSwitchedInTime[ 0 ] )
 800b932:	4b46      	ldr	r3, [pc, #280]	@ (800ba4c <vTaskSwitchContext+0x140>)
 800b934:	681a      	ldr	r2, [r3, #0]
 800b936:	4b46      	ldr	r3, [pc, #280]	@ (800ba50 <vTaskSwitchContext+0x144>)
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	429a      	cmp	r2, r3
 800b93c:	d909      	bls.n	800b952 <vTaskSwitchContext+0x46>
                    pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime[ 0 ] - ulTaskSwitchedInTime[ 0 ] );
 800b93e:	4b43      	ldr	r3, [pc, #268]	@ (800ba4c <vTaskSwitchContext+0x140>)
 800b940:	681a      	ldr	r2, [r3, #0]
 800b942:	4b43      	ldr	r3, [pc, #268]	@ (800ba50 <vTaskSwitchContext+0x144>)
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	1ad1      	subs	r1, r2, r3
 800b948:	4b42      	ldr	r3, [pc, #264]	@ (800ba54 <vTaskSwitchContext+0x148>)
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b94e:	440a      	add	r2, r1
 800b950:	659a      	str	r2, [r3, #88]	@ 0x58
                ulTaskSwitchedInTime[ 0 ] = ulTotalRunTime[ 0 ];
 800b952:	4b3e      	ldr	r3, [pc, #248]	@ (800ba4c <vTaskSwitchContext+0x140>)
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	4a3e      	ldr	r2, [pc, #248]	@ (800ba50 <vTaskSwitchContext+0x144>)
 800b958:	6013      	str	r3, [r2, #0]
            taskCHECK_FOR_STACK_OVERFLOW();
 800b95a:	4b3e      	ldr	r3, [pc, #248]	@ (800ba54 <vTaskSwitchContext+0x148>)
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b960:	61fb      	str	r3, [r7, #28]
 800b962:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 800b966:	61bb      	str	r3, [r7, #24]
 800b968:	69fb      	ldr	r3, [r7, #28]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	69ba      	ldr	r2, [r7, #24]
 800b96e:	429a      	cmp	r2, r3
 800b970:	d111      	bne.n	800b996 <vTaskSwitchContext+0x8a>
 800b972:	69fb      	ldr	r3, [r7, #28]
 800b974:	3304      	adds	r3, #4
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	69ba      	ldr	r2, [r7, #24]
 800b97a:	429a      	cmp	r2, r3
 800b97c:	d10b      	bne.n	800b996 <vTaskSwitchContext+0x8a>
 800b97e:	69fb      	ldr	r3, [r7, #28]
 800b980:	3308      	adds	r3, #8
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	69ba      	ldr	r2, [r7, #24]
 800b986:	429a      	cmp	r2, r3
 800b988:	d105      	bne.n	800b996 <vTaskSwitchContext+0x8a>
 800b98a:	69fb      	ldr	r3, [r7, #28]
 800b98c:	330c      	adds	r3, #12
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	69ba      	ldr	r2, [r7, #24]
 800b992:	429a      	cmp	r2, r3
 800b994:	d009      	beq.n	800b9aa <vTaskSwitchContext+0x9e>
 800b996:	4b2f      	ldr	r3, [pc, #188]	@ (800ba54 <vTaskSwitchContext+0x148>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	3334      	adds	r3, #52	@ 0x34
 800b99c:	617b      	str	r3, [r7, #20]
 800b99e:	4b2d      	ldr	r3, [pc, #180]	@ (800ba54 <vTaskSwitchContext+0x148>)
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	6979      	ldr	r1, [r7, #20]
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	f7f7 fe5b 	bl	8003660 <vApplicationStackOverflowHook>
            taskSELECT_HIGHEST_PRIORITY_TASK();
 800b9aa:	4b2b      	ldr	r3, [pc, #172]	@ (800ba58 <vTaskSwitchContext+0x14c>)
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	60bb      	str	r3, [r7, #8]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b9b0:	68bb      	ldr	r3, [r7, #8]
 800b9b2:	fab3 f383 	clz	r3, r3
 800b9b6:	71fb      	strb	r3, [r7, #7]
        return ucReturn;
 800b9b8:	79fb      	ldrb	r3, [r7, #7]
 800b9ba:	f1c3 031f 	rsb	r3, r3, #31
 800b9be:	613b      	str	r3, [r7, #16]
 800b9c0:	4926      	ldr	r1, [pc, #152]	@ (800ba5c <vTaskSwitchContext+0x150>)
 800b9c2:	693a      	ldr	r2, [r7, #16]
 800b9c4:	4613      	mov	r3, r2
 800b9c6:	009b      	lsls	r3, r3, #2
 800b9c8:	4413      	add	r3, r2
 800b9ca:	009b      	lsls	r3, r3, #2
 800b9cc:	440b      	add	r3, r1
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d110      	bne.n	800b9f6 <vTaskSwitchContext+0xea>
    __asm volatile
 800b9d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9d8:	b672      	cpsid	i
 800b9da:	f383 8811 	msr	BASEPRI, r3
 800b9de:	f3bf 8f6f 	isb	sy
 800b9e2:	f3bf 8f4f 	dsb	sy
 800b9e6:	b662      	cpsie	i
 800b9e8:	603b      	str	r3, [r7, #0]
}
 800b9ea:	bf00      	nop
 800b9ec:	f241 31fa 	movw	r1, #5114	@ 0x13fa
 800b9f0:	481b      	ldr	r0, [pc, #108]	@ (800ba60 <vTaskSwitchContext+0x154>)
 800b9f2:	f7f8 f8e9 	bl	8003bc8 <vAssertCalled>
 800b9f6:	693a      	ldr	r2, [r7, #16]
 800b9f8:	4613      	mov	r3, r2
 800b9fa:	009b      	lsls	r3, r3, #2
 800b9fc:	4413      	add	r3, r2
 800b9fe:	009b      	lsls	r3, r3, #2
 800ba00:	4a16      	ldr	r2, [pc, #88]	@ (800ba5c <vTaskSwitchContext+0x150>)
 800ba02:	4413      	add	r3, r2
 800ba04:	60fb      	str	r3, [r7, #12]
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	685b      	ldr	r3, [r3, #4]
 800ba0a:	685a      	ldr	r2, [r3, #4]
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	605a      	str	r2, [r3, #4]
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	685a      	ldr	r2, [r3, #4]
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	3308      	adds	r3, #8
 800ba18:	429a      	cmp	r2, r3
 800ba1a:	d103      	bne.n	800ba24 <vTaskSwitchContext+0x118>
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	68da      	ldr	r2, [r3, #12]
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	605a      	str	r2, [r3, #4]
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	685b      	ldr	r3, [r3, #4]
 800ba28:	68db      	ldr	r3, [r3, #12]
 800ba2a:	4a0a      	ldr	r2, [pc, #40]	@ (800ba54 <vTaskSwitchContext+0x148>)
 800ba2c:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 800ba2e:	4b09      	ldr	r3, [pc, #36]	@ (800ba54 <vTaskSwitchContext+0x148>)
 800ba30:	681b      	ldr	r3, [r3, #0]
                configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 800ba32:	4b08      	ldr	r3, [pc, #32]	@ (800ba54 <vTaskSwitchContext+0x148>)
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	335c      	adds	r3, #92	@ 0x5c
 800ba38:	4a0a      	ldr	r2, [pc, #40]	@ (800ba64 <vTaskSwitchContext+0x158>)
 800ba3a:	6013      	str	r3, [r2, #0]
    }
 800ba3c:	bf00      	nop
 800ba3e:	3720      	adds	r7, #32
 800ba40:	46bd      	mov	sp, r7
 800ba42:	bd80      	pop	{r7, pc}
 800ba44:	200004ac 	.word	0x200004ac
 800ba48:	20000498 	.word	0x20000498
 800ba4c:	200004b4 	.word	0x200004b4
 800ba50:	200004b0 	.word	0x200004b0
 800ba54:	20000384 	.word	0x20000384
 800ba58:	2000048c 	.word	0x2000048c
 800ba5c:	20000388 	.word	0x20000388
 800ba60:	080135f8 	.word	0x080135f8
 800ba64:	200001c0 	.word	0x200001c0

0800ba68 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b084      	sub	sp, #16
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
 800ba70:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d110      	bne.n	800ba9a <vTaskPlaceOnEventList+0x32>
    __asm volatile
 800ba78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba7c:	b672      	cpsid	i
 800ba7e:	f383 8811 	msr	BASEPRI, r3
 800ba82:	f3bf 8f6f 	isb	sy
 800ba86:	f3bf 8f4f 	dsb	sy
 800ba8a:	b662      	cpsie	i
 800ba8c:	60fb      	str	r3, [r7, #12]
}
 800ba8e:	bf00      	nop
 800ba90:	f44f 51a4 	mov.w	r1, #5248	@ 0x1480
 800ba94:	4808      	ldr	r0, [pc, #32]	@ (800bab8 <vTaskPlaceOnEventList+0x50>)
 800ba96:	f7f8 f897 	bl	8003bc8 <vAssertCalled>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ba9a:	4b08      	ldr	r3, [pc, #32]	@ (800babc <vTaskPlaceOnEventList+0x54>)
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	3318      	adds	r3, #24
 800baa0:	4619      	mov	r1, r3
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	f7fe f9c9 	bl	8009e3a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800baa8:	2101      	movs	r1, #1
 800baaa:	6838      	ldr	r0, [r7, #0]
 800baac:	f000 fdc6 	bl	800c63c <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 800bab0:	bf00      	nop
 800bab2:	3710      	adds	r7, #16
 800bab4:	46bd      	mov	sp, r7
 800bab6:	bd80      	pop	{r7, pc}
 800bab8:	080135f8 	.word	0x080135f8
 800babc:	20000384 	.word	0x20000384

0800bac0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b086      	sub	sp, #24
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	60f8      	str	r0, [r7, #12]
 800bac8:	60b9      	str	r1, [r7, #8]
 800baca:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d110      	bne.n	800baf4 <vTaskPlaceOnEventListRestricted+0x34>
    __asm volatile
 800bad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bad6:	b672      	cpsid	i
 800bad8:	f383 8811 	msr	BASEPRI, r3
 800badc:	f3bf 8f6f 	isb	sy
 800bae0:	f3bf 8f4f 	dsb	sy
 800bae4:	b662      	cpsie	i
 800bae6:	613b      	str	r3, [r7, #16]
}
 800bae8:	bf00      	nop
 800baea:	f241 41be 	movw	r1, #5310	@ 0x14be
 800baee:	4819      	ldr	r0, [pc, #100]	@ (800bb54 <vTaskPlaceOnEventListRestricted+0x94>)
 800baf0:	f7f8 f86a 	bl	8003bc8 <vAssertCalled>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	685b      	ldr	r3, [r3, #4]
 800baf8:	617b      	str	r3, [r7, #20]
 800bafa:	4b17      	ldr	r3, [pc, #92]	@ (800bb58 <vTaskPlaceOnEventListRestricted+0x98>)
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	697a      	ldr	r2, [r7, #20]
 800bb00:	61da      	str	r2, [r3, #28]
 800bb02:	4b15      	ldr	r3, [pc, #84]	@ (800bb58 <vTaskPlaceOnEventListRestricted+0x98>)
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	697a      	ldr	r2, [r7, #20]
 800bb08:	6892      	ldr	r2, [r2, #8]
 800bb0a:	621a      	str	r2, [r3, #32]
 800bb0c:	4b12      	ldr	r3, [pc, #72]	@ (800bb58 <vTaskPlaceOnEventListRestricted+0x98>)
 800bb0e:	681a      	ldr	r2, [r3, #0]
 800bb10:	697b      	ldr	r3, [r7, #20]
 800bb12:	689b      	ldr	r3, [r3, #8]
 800bb14:	3218      	adds	r2, #24
 800bb16:	605a      	str	r2, [r3, #4]
 800bb18:	4b0f      	ldr	r3, [pc, #60]	@ (800bb58 <vTaskPlaceOnEventListRestricted+0x98>)
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	f103 0218 	add.w	r2, r3, #24
 800bb20:	697b      	ldr	r3, [r7, #20]
 800bb22:	609a      	str	r2, [r3, #8]
 800bb24:	4b0c      	ldr	r3, [pc, #48]	@ (800bb58 <vTaskPlaceOnEventListRestricted+0x98>)
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	68fa      	ldr	r2, [r7, #12]
 800bb2a:	629a      	str	r2, [r3, #40]	@ 0x28
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	1c5a      	adds	r2, r3, #1
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d002      	beq.n	800bb42 <vTaskPlaceOnEventListRestricted+0x82>
        {
            xTicksToWait = portMAX_DELAY;
 800bb3c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bb40:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bb42:	6879      	ldr	r1, [r7, #4]
 800bb44:	68b8      	ldr	r0, [r7, #8]
 800bb46:	f000 fd79 	bl	800c63c <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
    }
 800bb4a:	bf00      	nop
 800bb4c:	3718      	adds	r7, #24
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	bd80      	pop	{r7, pc}
 800bb52:	bf00      	nop
 800bb54:	080135f8 	.word	0x080135f8
 800bb58:	20000384 	.word	0x20000384

0800bb5c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b08a      	sub	sp, #40	@ 0x28
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	68db      	ldr	r3, [r3, #12]
 800bb68:	68db      	ldr	r3, [r3, #12]
 800bb6a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 800bb6c:	6a3b      	ldr	r3, [r7, #32]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d110      	bne.n	800bb94 <xTaskRemoveFromEventList+0x38>
    __asm volatile
 800bb72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb76:	b672      	cpsid	i
 800bb78:	f383 8811 	msr	BASEPRI, r3
 800bb7c:	f3bf 8f6f 	isb	sy
 800bb80:	f3bf 8f4f 	dsb	sy
 800bb84:	b662      	cpsie	i
 800bb86:	60fb      	str	r3, [r7, #12]
}
 800bb88:	bf00      	nop
 800bb8a:	f241 41f5 	movw	r1, #5365	@ 0x14f5
 800bb8e:	485b      	ldr	r0, [pc, #364]	@ (800bcfc <xTaskRemoveFromEventList+0x1a0>)
 800bb90:	f7f8 f81a 	bl	8003bc8 <vAssertCalled>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800bb94:	6a3b      	ldr	r3, [r7, #32]
 800bb96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb98:	61fb      	str	r3, [r7, #28]
 800bb9a:	6a3b      	ldr	r3, [r7, #32]
 800bb9c:	69db      	ldr	r3, [r3, #28]
 800bb9e:	6a3a      	ldr	r2, [r7, #32]
 800bba0:	6a12      	ldr	r2, [r2, #32]
 800bba2:	609a      	str	r2, [r3, #8]
 800bba4:	6a3b      	ldr	r3, [r7, #32]
 800bba6:	6a1b      	ldr	r3, [r3, #32]
 800bba8:	6a3a      	ldr	r2, [r7, #32]
 800bbaa:	69d2      	ldr	r2, [r2, #28]
 800bbac:	605a      	str	r2, [r3, #4]
 800bbae:	69fb      	ldr	r3, [r7, #28]
 800bbb0:	685a      	ldr	r2, [r3, #4]
 800bbb2:	6a3b      	ldr	r3, [r7, #32]
 800bbb4:	3318      	adds	r3, #24
 800bbb6:	429a      	cmp	r2, r3
 800bbb8:	d103      	bne.n	800bbc2 <xTaskRemoveFromEventList+0x66>
 800bbba:	6a3b      	ldr	r3, [r7, #32]
 800bbbc:	6a1a      	ldr	r2, [r3, #32]
 800bbbe:	69fb      	ldr	r3, [r7, #28]
 800bbc0:	605a      	str	r2, [r3, #4]
 800bbc2:	6a3b      	ldr	r3, [r7, #32]
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	629a      	str	r2, [r3, #40]	@ 0x28
 800bbc8:	69fb      	ldr	r3, [r7, #28]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	1e5a      	subs	r2, r3, #1
 800bbce:	69fb      	ldr	r3, [r7, #28]
 800bbd0:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800bbd2:	4b4b      	ldr	r3, [pc, #300]	@ (800bd00 <xTaskRemoveFromEventList+0x1a4>)
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d160      	bne.n	800bc9c <xTaskRemoveFromEventList+0x140>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800bbda:	6a3b      	ldr	r3, [r7, #32]
 800bbdc:	695b      	ldr	r3, [r3, #20]
 800bbde:	617b      	str	r3, [r7, #20]
 800bbe0:	6a3b      	ldr	r3, [r7, #32]
 800bbe2:	689b      	ldr	r3, [r3, #8]
 800bbe4:	6a3a      	ldr	r2, [r7, #32]
 800bbe6:	68d2      	ldr	r2, [r2, #12]
 800bbe8:	609a      	str	r2, [r3, #8]
 800bbea:	6a3b      	ldr	r3, [r7, #32]
 800bbec:	68db      	ldr	r3, [r3, #12]
 800bbee:	6a3a      	ldr	r2, [r7, #32]
 800bbf0:	6892      	ldr	r2, [r2, #8]
 800bbf2:	605a      	str	r2, [r3, #4]
 800bbf4:	697b      	ldr	r3, [r7, #20]
 800bbf6:	685a      	ldr	r2, [r3, #4]
 800bbf8:	6a3b      	ldr	r3, [r7, #32]
 800bbfa:	3304      	adds	r3, #4
 800bbfc:	429a      	cmp	r2, r3
 800bbfe:	d103      	bne.n	800bc08 <xTaskRemoveFromEventList+0xac>
 800bc00:	6a3b      	ldr	r3, [r7, #32]
 800bc02:	68da      	ldr	r2, [r3, #12]
 800bc04:	697b      	ldr	r3, [r7, #20]
 800bc06:	605a      	str	r2, [r3, #4]
 800bc08:	6a3b      	ldr	r3, [r7, #32]
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	615a      	str	r2, [r3, #20]
 800bc0e:	697b      	ldr	r3, [r7, #20]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	1e5a      	subs	r2, r3, #1
 800bc14:	697b      	ldr	r3, [r7, #20]
 800bc16:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800bc18:	6a3b      	ldr	r3, [r7, #32]
 800bc1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc1c:	2201      	movs	r2, #1
 800bc1e:	409a      	lsls	r2, r3
 800bc20:	4b38      	ldr	r3, [pc, #224]	@ (800bd04 <xTaskRemoveFromEventList+0x1a8>)
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	4313      	orrs	r3, r2
 800bc26:	4a37      	ldr	r2, [pc, #220]	@ (800bd04 <xTaskRemoveFromEventList+0x1a8>)
 800bc28:	6013      	str	r3, [r2, #0]
 800bc2a:	6a3b      	ldr	r3, [r7, #32]
 800bc2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc2e:	4936      	ldr	r1, [pc, #216]	@ (800bd08 <xTaskRemoveFromEventList+0x1ac>)
 800bc30:	4613      	mov	r3, r2
 800bc32:	009b      	lsls	r3, r3, #2
 800bc34:	4413      	add	r3, r2
 800bc36:	009b      	lsls	r3, r3, #2
 800bc38:	440b      	add	r3, r1
 800bc3a:	3304      	adds	r3, #4
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	613b      	str	r3, [r7, #16]
 800bc40:	6a3b      	ldr	r3, [r7, #32]
 800bc42:	693a      	ldr	r2, [r7, #16]
 800bc44:	609a      	str	r2, [r3, #8]
 800bc46:	693b      	ldr	r3, [r7, #16]
 800bc48:	689a      	ldr	r2, [r3, #8]
 800bc4a:	6a3b      	ldr	r3, [r7, #32]
 800bc4c:	60da      	str	r2, [r3, #12]
 800bc4e:	693b      	ldr	r3, [r7, #16]
 800bc50:	689b      	ldr	r3, [r3, #8]
 800bc52:	6a3a      	ldr	r2, [r7, #32]
 800bc54:	3204      	adds	r2, #4
 800bc56:	605a      	str	r2, [r3, #4]
 800bc58:	6a3b      	ldr	r3, [r7, #32]
 800bc5a:	1d1a      	adds	r2, r3, #4
 800bc5c:	693b      	ldr	r3, [r7, #16]
 800bc5e:	609a      	str	r2, [r3, #8]
 800bc60:	6a3b      	ldr	r3, [r7, #32]
 800bc62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc64:	4613      	mov	r3, r2
 800bc66:	009b      	lsls	r3, r3, #2
 800bc68:	4413      	add	r3, r2
 800bc6a:	009b      	lsls	r3, r3, #2
 800bc6c:	4a26      	ldr	r2, [pc, #152]	@ (800bd08 <xTaskRemoveFromEventList+0x1ac>)
 800bc6e:	441a      	add	r2, r3
 800bc70:	6a3b      	ldr	r3, [r7, #32]
 800bc72:	615a      	str	r2, [r3, #20]
 800bc74:	6a3b      	ldr	r3, [r7, #32]
 800bc76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc78:	4923      	ldr	r1, [pc, #140]	@ (800bd08 <xTaskRemoveFromEventList+0x1ac>)
 800bc7a:	4613      	mov	r3, r2
 800bc7c:	009b      	lsls	r3, r3, #2
 800bc7e:	4413      	add	r3, r2
 800bc80:	009b      	lsls	r3, r3, #2
 800bc82:	440b      	add	r3, r1
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	6a3a      	ldr	r2, [r7, #32]
 800bc88:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800bc8a:	1c59      	adds	r1, r3, #1
 800bc8c:	481e      	ldr	r0, [pc, #120]	@ (800bd08 <xTaskRemoveFromEventList+0x1ac>)
 800bc8e:	4613      	mov	r3, r2
 800bc90:	009b      	lsls	r3, r3, #2
 800bc92:	4413      	add	r3, r2
 800bc94:	009b      	lsls	r3, r3, #2
 800bc96:	4403      	add	r3, r0
 800bc98:	6019      	str	r1, [r3, #0]
 800bc9a:	e01b      	b.n	800bcd4 <xTaskRemoveFromEventList+0x178>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bc9c:	4b1b      	ldr	r3, [pc, #108]	@ (800bd0c <xTaskRemoveFromEventList+0x1b0>)
 800bc9e:	685b      	ldr	r3, [r3, #4]
 800bca0:	61bb      	str	r3, [r7, #24]
 800bca2:	6a3b      	ldr	r3, [r7, #32]
 800bca4:	69ba      	ldr	r2, [r7, #24]
 800bca6:	61da      	str	r2, [r3, #28]
 800bca8:	69bb      	ldr	r3, [r7, #24]
 800bcaa:	689a      	ldr	r2, [r3, #8]
 800bcac:	6a3b      	ldr	r3, [r7, #32]
 800bcae:	621a      	str	r2, [r3, #32]
 800bcb0:	69bb      	ldr	r3, [r7, #24]
 800bcb2:	689b      	ldr	r3, [r3, #8]
 800bcb4:	6a3a      	ldr	r2, [r7, #32]
 800bcb6:	3218      	adds	r2, #24
 800bcb8:	605a      	str	r2, [r3, #4]
 800bcba:	6a3b      	ldr	r3, [r7, #32]
 800bcbc:	f103 0218 	add.w	r2, r3, #24
 800bcc0:	69bb      	ldr	r3, [r7, #24]
 800bcc2:	609a      	str	r2, [r3, #8]
 800bcc4:	6a3b      	ldr	r3, [r7, #32]
 800bcc6:	4a11      	ldr	r2, [pc, #68]	@ (800bd0c <xTaskRemoveFromEventList+0x1b0>)
 800bcc8:	629a      	str	r2, [r3, #40]	@ 0x28
 800bcca:	4b10      	ldr	r3, [pc, #64]	@ (800bd0c <xTaskRemoveFromEventList+0x1b0>)
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	3301      	adds	r3, #1
 800bcd0:	4a0e      	ldr	r2, [pc, #56]	@ (800bd0c <xTaskRemoveFromEventList+0x1b0>)
 800bcd2:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bcd4:	6a3b      	ldr	r3, [r7, #32]
 800bcd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bcd8:	4b0d      	ldr	r3, [pc, #52]	@ (800bd10 <xTaskRemoveFromEventList+0x1b4>)
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcde:	429a      	cmp	r2, r3
 800bce0:	d905      	bls.n	800bcee <xTaskRemoveFromEventList+0x192>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 800bce2:	2301      	movs	r3, #1
 800bce4:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 800bce6:	4b0b      	ldr	r3, [pc, #44]	@ (800bd14 <xTaskRemoveFromEventList+0x1b8>)
 800bce8:	2201      	movs	r2, #1
 800bcea:	601a      	str	r2, [r3, #0]
 800bcec:	e001      	b.n	800bcf2 <xTaskRemoveFromEventList+0x196>
        }
        else
        {
            xReturn = pdFALSE;
 800bcee:	2300      	movs	r3, #0
 800bcf0:	627b      	str	r3, [r7, #36]	@ 0x24
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 800bcf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	3728      	adds	r7, #40	@ 0x28
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	bd80      	pop	{r7, pc}
 800bcfc:	080135f8 	.word	0x080135f8
 800bd00:	200004ac 	.word	0x200004ac
 800bd04:	2000048c 	.word	0x2000048c
 800bd08:	20000388 	.word	0x20000388
 800bd0c:	20000444 	.word	0x20000444
 800bd10:	20000384 	.word	0x20000384
 800bd14:	20000498 	.word	0x20000498

0800bd18 <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bd18:	b480      	push	{r7}
 800bd1a:	b083      	sub	sp, #12
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bd20:	4b06      	ldr	r3, [pc, #24]	@ (800bd3c <vTaskInternalSetTimeOutState+0x24>)
 800bd22:	681a      	ldr	r2, [r3, #0]
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800bd28:	4b05      	ldr	r3, [pc, #20]	@ (800bd40 <vTaskInternalSetTimeOutState+0x28>)
 800bd2a:	681a      	ldr	r2, [r3, #0]
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 800bd30:	bf00      	nop
 800bd32:	370c      	adds	r7, #12
 800bd34:	46bd      	mov	sp, r7
 800bd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3a:	4770      	bx	lr
 800bd3c:	2000049c 	.word	0x2000049c
 800bd40:	20000488 	.word	0x20000488

0800bd44 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b088      	sub	sp, #32
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
 800bd4c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d110      	bne.n	800bd76 <xTaskCheckForTimeOut+0x32>
    __asm volatile
 800bd54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd58:	b672      	cpsid	i
 800bd5a:	f383 8811 	msr	BASEPRI, r3
 800bd5e:	f3bf 8f6f 	isb	sy
 800bd62:	f3bf 8f4f 	dsb	sy
 800bd66:	b662      	cpsie	i
 800bd68:	613b      	str	r3, [r7, #16]
}
 800bd6a:	bf00      	nop
 800bd6c:	f241 51a5 	movw	r1, #5541	@ 0x15a5
 800bd70:	482b      	ldr	r0, [pc, #172]	@ (800be20 <xTaskCheckForTimeOut+0xdc>)
 800bd72:	f7f7 ff29 	bl	8003bc8 <vAssertCalled>
    configASSERT( pxTicksToWait );
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d110      	bne.n	800bd9e <xTaskCheckForTimeOut+0x5a>
    __asm volatile
 800bd7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd80:	b672      	cpsid	i
 800bd82:	f383 8811 	msr	BASEPRI, r3
 800bd86:	f3bf 8f6f 	isb	sy
 800bd8a:	f3bf 8f4f 	dsb	sy
 800bd8e:	b662      	cpsie	i
 800bd90:	60fb      	str	r3, [r7, #12]
}
 800bd92:	bf00      	nop
 800bd94:	f241 51a6 	movw	r1, #5542	@ 0x15a6
 800bd98:	4821      	ldr	r0, [pc, #132]	@ (800be20 <xTaskCheckForTimeOut+0xdc>)
 800bd9a:	f7f7 ff15 	bl	8003bc8 <vAssertCalled>

    taskENTER_CRITICAL();
 800bd9e:	f001 f8d7 	bl	800cf50 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800bda2:	4b20      	ldr	r3, [pc, #128]	@ (800be24 <xTaskCheckForTimeOut+0xe0>)
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	685b      	ldr	r3, [r3, #4]
 800bdac:	69ba      	ldr	r2, [r7, #24]
 800bdae:	1ad3      	subs	r3, r2, r3
 800bdb0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bdba:	d102      	bne.n	800bdc2 <xTaskCheckForTimeOut+0x7e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	61fb      	str	r3, [r7, #28]
 800bdc0:	e026      	b.n	800be10 <xTaskCheckForTimeOut+0xcc>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681a      	ldr	r2, [r3, #0]
 800bdc6:	4b18      	ldr	r3, [pc, #96]	@ (800be28 <xTaskCheckForTimeOut+0xe4>)
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	429a      	cmp	r2, r3
 800bdcc:	d00a      	beq.n	800bde4 <xTaskCheckForTimeOut+0xa0>
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	685b      	ldr	r3, [r3, #4]
 800bdd2:	69ba      	ldr	r2, [r7, #24]
 800bdd4:	429a      	cmp	r2, r3
 800bdd6:	d305      	bcc.n	800bde4 <xTaskCheckForTimeOut+0xa0>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800bdd8:	2301      	movs	r3, #1
 800bdda:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800bddc:	683b      	ldr	r3, [r7, #0]
 800bdde:	2200      	movs	r2, #0
 800bde0:	601a      	str	r2, [r3, #0]
 800bde2:	e015      	b.n	800be10 <xTaskCheckForTimeOut+0xcc>
        }
        else if( xElapsedTime < *pxTicksToWait )
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	697a      	ldr	r2, [r7, #20]
 800bdea:	429a      	cmp	r2, r3
 800bdec:	d20b      	bcs.n	800be06 <xTaskCheckForTimeOut+0xc2>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	681a      	ldr	r2, [r3, #0]
 800bdf2:	697b      	ldr	r3, [r7, #20]
 800bdf4:	1ad2      	subs	r2, r2, r3
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	f7ff ff8c 	bl	800bd18 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800be00:	2300      	movs	r3, #0
 800be02:	61fb      	str	r3, [r7, #28]
 800be04:	e004      	b.n	800be10 <xTaskCheckForTimeOut+0xcc>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	2200      	movs	r2, #0
 800be0a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800be0c:	2301      	movs	r3, #1
 800be0e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800be10:	f001 f8d6 	bl	800cfc0 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 800be14:	69fb      	ldr	r3, [r7, #28]
}
 800be16:	4618      	mov	r0, r3
 800be18:	3720      	adds	r7, #32
 800be1a:	46bd      	mov	sp, r7
 800be1c:	bd80      	pop	{r7, pc}
 800be1e:	bf00      	nop
 800be20:	080135f8 	.word	0x080135f8
 800be24:	20000488 	.word	0x20000488
 800be28:	2000049c 	.word	0x2000049c

0800be2c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800be2c:	b480      	push	{r7}
 800be2e:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 800be30:	4b03      	ldr	r3, [pc, #12]	@ (800be40 <vTaskMissedYield+0x14>)
 800be32:	2201      	movs	r2, #1
 800be34:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 800be36:	bf00      	nop
 800be38:	46bd      	mov	sp, r7
 800be3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3e:	4770      	bx	lr
 800be40:	20000498 	.word	0x20000498

0800be44 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b082      	sub	sp, #8
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800be4c:	f000 f852 	bl	800bef4 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 800be50:	4b06      	ldr	r3, [pc, #24]	@ (800be6c <prvIdleTask+0x28>)
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	2b01      	cmp	r3, #1
 800be56:	d9f9      	bls.n	800be4c <prvIdleTask+0x8>
            {
                taskYIELD();
 800be58:	4b05      	ldr	r3, [pc, #20]	@ (800be70 <prvIdleTask+0x2c>)
 800be5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be5e:	601a      	str	r2, [r3, #0]
 800be60:	f3bf 8f4f 	dsb	sy
 800be64:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800be68:	e7f0      	b.n	800be4c <prvIdleTask+0x8>
 800be6a:	bf00      	nop
 800be6c:	20000388 	.word	0x20000388
 800be70:	e000ed04 	.word	0xe000ed04

0800be74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b082      	sub	sp, #8
 800be78:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800be7a:	2300      	movs	r3, #0
 800be7c:	607b      	str	r3, [r7, #4]
 800be7e:	e00c      	b.n	800be9a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800be80:	687a      	ldr	r2, [r7, #4]
 800be82:	4613      	mov	r3, r2
 800be84:	009b      	lsls	r3, r3, #2
 800be86:	4413      	add	r3, r2
 800be88:	009b      	lsls	r3, r3, #2
 800be8a:	4a12      	ldr	r2, [pc, #72]	@ (800bed4 <prvInitialiseTaskLists+0x60>)
 800be8c:	4413      	add	r3, r2
 800be8e:	4618      	mov	r0, r3
 800be90:	f7fd ff82 	bl	8009d98 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	3301      	adds	r3, #1
 800be98:	607b      	str	r3, [r7, #4]
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	2b06      	cmp	r3, #6
 800be9e:	d9ef      	bls.n	800be80 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800bea0:	480d      	ldr	r0, [pc, #52]	@ (800bed8 <prvInitialiseTaskLists+0x64>)
 800bea2:	f7fd ff79 	bl	8009d98 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800bea6:	480d      	ldr	r0, [pc, #52]	@ (800bedc <prvInitialiseTaskLists+0x68>)
 800bea8:	f7fd ff76 	bl	8009d98 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800beac:	480c      	ldr	r0, [pc, #48]	@ (800bee0 <prvInitialiseTaskLists+0x6c>)
 800beae:	f7fd ff73 	bl	8009d98 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800beb2:	480c      	ldr	r0, [pc, #48]	@ (800bee4 <prvInitialiseTaskLists+0x70>)
 800beb4:	f7fd ff70 	bl	8009d98 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800beb8:	480b      	ldr	r0, [pc, #44]	@ (800bee8 <prvInitialiseTaskLists+0x74>)
 800beba:	f7fd ff6d 	bl	8009d98 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800bebe:	4b0b      	ldr	r3, [pc, #44]	@ (800beec <prvInitialiseTaskLists+0x78>)
 800bec0:	4a05      	ldr	r2, [pc, #20]	@ (800bed8 <prvInitialiseTaskLists+0x64>)
 800bec2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bec4:	4b0a      	ldr	r3, [pc, #40]	@ (800bef0 <prvInitialiseTaskLists+0x7c>)
 800bec6:	4a05      	ldr	r2, [pc, #20]	@ (800bedc <prvInitialiseTaskLists+0x68>)
 800bec8:	601a      	str	r2, [r3, #0]
}
 800beca:	bf00      	nop
 800becc:	3708      	adds	r7, #8
 800bece:	46bd      	mov	sp, r7
 800bed0:	bd80      	pop	{r7, pc}
 800bed2:	bf00      	nop
 800bed4:	20000388 	.word	0x20000388
 800bed8:	20000414 	.word	0x20000414
 800bedc:	20000428 	.word	0x20000428
 800bee0:	20000444 	.word	0x20000444
 800bee4:	20000458 	.word	0x20000458
 800bee8:	20000470 	.word	0x20000470
 800beec:	2000043c 	.word	0x2000043c
 800bef0:	20000440 	.word	0x20000440

0800bef4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b082      	sub	sp, #8
 800bef8:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800befa:	e019      	b.n	800bf30 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 800befc:	f001 f828 	bl	800cf50 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800bf00:	4b10      	ldr	r3, [pc, #64]	@ (800bf44 <prvCheckTasksWaitingTermination+0x50>)
 800bf02:	68db      	ldr	r3, [r3, #12]
 800bf04:	68db      	ldr	r3, [r3, #12]
 800bf06:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	3304      	adds	r3, #4
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	f7fd ffcd 	bl	8009eac <uxListRemove>
                        --uxCurrentNumberOfTasks;
 800bf12:	4b0d      	ldr	r3, [pc, #52]	@ (800bf48 <prvCheckTasksWaitingTermination+0x54>)
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	3b01      	subs	r3, #1
 800bf18:	4a0b      	ldr	r2, [pc, #44]	@ (800bf48 <prvCheckTasksWaitingTermination+0x54>)
 800bf1a:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 800bf1c:	4b0b      	ldr	r3, [pc, #44]	@ (800bf4c <prvCheckTasksWaitingTermination+0x58>)
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	3b01      	subs	r3, #1
 800bf22:	4a0a      	ldr	r2, [pc, #40]	@ (800bf4c <prvCheckTasksWaitingTermination+0x58>)
 800bf24:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 800bf26:	f001 f84b 	bl	800cfc0 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800bf2a:	6878      	ldr	r0, [r7, #4]
 800bf2c:	f000 f8f0 	bl	800c110 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bf30:	4b06      	ldr	r3, [pc, #24]	@ (800bf4c <prvCheckTasksWaitingTermination+0x58>)
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d1e1      	bne.n	800befc <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800bf38:	bf00      	nop
 800bf3a:	bf00      	nop
 800bf3c:	3708      	adds	r7, #8
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bd80      	pop	{r7, pc}
 800bf42:	bf00      	nop
 800bf44:	20000458 	.word	0x20000458
 800bf48:	20000484 	.word	0x20000484
 800bf4c:	2000046c 	.word	0x2000046c

0800bf50 <vTaskGetInfo>:

    void vTaskGetInfo( TaskHandle_t xTask,
                       TaskStatus_t * pxTaskStatus,
                       BaseType_t xGetFreeStackSpace,
                       eTaskState eState )
    {
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b086      	sub	sp, #24
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	60f8      	str	r0, [r7, #12]
 800bf58:	60b9      	str	r1, [r7, #8]
 800bf5a:	607a      	str	r2, [r7, #4]
 800bf5c:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;

        traceENTER_vTaskGetInfo( xTask, pxTaskStatus, xGetFreeStackSpace, eState );

        /* xTask is NULL then get the state of the calling task. */
        pxTCB = prvGetTCBFromHandle( xTask );
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d102      	bne.n	800bf6a <vTaskGetInfo+0x1a>
 800bf64:	4b41      	ldr	r3, [pc, #260]	@ (800c06c <vTaskGetInfo+0x11c>)
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	e000      	b.n	800bf6c <vTaskGetInfo+0x1c>
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	613b      	str	r3, [r7, #16]

        pxTaskStatus->xHandle = pxTCB;
 800bf6e:	68bb      	ldr	r3, [r7, #8]
 800bf70:	693a      	ldr	r2, [r7, #16]
 800bf72:	601a      	str	r2, [r3, #0]
        pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName[ 0 ] );
 800bf74:	693b      	ldr	r3, [r7, #16]
 800bf76:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800bf7a:	68bb      	ldr	r3, [r7, #8]
 800bf7c:	605a      	str	r2, [r3, #4]
        pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800bf7e:	693b      	ldr	r3, [r7, #16]
 800bf80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf82:	68bb      	ldr	r3, [r7, #8]
 800bf84:	611a      	str	r2, [r3, #16]
        pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800bf86:	693b      	ldr	r3, [r7, #16]
 800bf88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bf8a:	68bb      	ldr	r3, [r7, #8]
 800bf8c:	61da      	str	r2, [r3, #28]
        #if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
            pxTaskStatus->pxTopOfStack = ( StackType_t * ) pxTCB->pxTopOfStack;
 800bf8e:	693b      	ldr	r3, [r7, #16]
 800bf90:	681a      	ldr	r2, [r3, #0]
 800bf92:	68bb      	ldr	r3, [r7, #8]
 800bf94:	621a      	str	r2, [r3, #32]
            pxTaskStatus->pxEndOfStack = pxTCB->pxEndOfStack;
 800bf96:	693b      	ldr	r3, [r7, #16]
 800bf98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bf9a:	68bb      	ldr	r3, [r7, #8]
 800bf9c:	625a      	str	r2, [r3, #36]	@ 0x24
        #endif
        pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800bf9e:	693b      	ldr	r3, [r7, #16]
 800bfa0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bfa2:	68bb      	ldr	r3, [r7, #8]
 800bfa4:	609a      	str	r2, [r3, #8]
        }
        #endif

        #if ( configUSE_MUTEXES == 1 )
        {
            pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800bfa6:	693b      	ldr	r3, [r7, #16]
 800bfa8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bfaa:	68bb      	ldr	r3, [r7, #8]
 800bfac:	615a      	str	r2, [r3, #20]
        }
        #endif

        #if ( configGENERATE_RUN_TIME_STATS == 1 )
        {
            pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 800bfae:	693b      	ldr	r3, [r7, #16]
 800bfb0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bfb2:	68bb      	ldr	r3, [r7, #8]
 800bfb4:	619a      	str	r2, [r3, #24]
        #endif

        /* Obtaining the task state is a little fiddly, so is only done if the
         * value of eState passed into this function is eInvalid - otherwise the
         * state is just set to whatever is passed in. */
        if( eState != eInvalid )
 800bfb6:	78fb      	ldrb	r3, [r7, #3]
 800bfb8:	2b05      	cmp	r3, #5
 800bfba:	d03c      	beq.n	800c036 <vTaskGetInfo+0xe6>
        {
            if( taskTASK_IS_RUNNING( pxTCB ) == pdTRUE )
 800bfbc:	4b2b      	ldr	r3, [pc, #172]	@ (800c06c <vTaskGetInfo+0x11c>)
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	693a      	ldr	r2, [r7, #16]
 800bfc2:	429a      	cmp	r2, r3
 800bfc4:	d103      	bne.n	800bfce <vTaskGetInfo+0x7e>
            {
                pxTaskStatus->eCurrentState = eRunning;
 800bfc6:	68bb      	ldr	r3, [r7, #8]
 800bfc8:	2200      	movs	r2, #0
 800bfca:	731a      	strb	r2, [r3, #12]
 800bfcc:	e03a      	b.n	800c044 <vTaskGetInfo+0xf4>
            }
            else
            {
                pxTaskStatus->eCurrentState = eState;
 800bfce:	68bb      	ldr	r3, [r7, #8]
 800bfd0:	78fa      	ldrb	r2, [r7, #3]
 800bfd2:	731a      	strb	r2, [r3, #12]
                #if ( INCLUDE_vTaskSuspend == 1 )
                {
                    /* If the task is in the suspended list then there is a
                     *  chance it is actually just blocked indefinitely - so really
                     *  it should be reported as being in the Blocked state. */
                    if( eState == eSuspended )
 800bfd4:	78fb      	ldrb	r3, [r7, #3]
 800bfd6:	2b03      	cmp	r3, #3
 800bfd8:	d120      	bne.n	800c01c <vTaskGetInfo+0xcc>
                    {
                        vTaskSuspendAll();
 800bfda:	f7ff f9b7 	bl	800b34c <vTaskSuspendAll>
                        {
                            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bfde:	693b      	ldr	r3, [r7, #16]
 800bfe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d003      	beq.n	800bfee <vTaskGetInfo+0x9e>
                            {
                                pxTaskStatus->eCurrentState = eBlocked;
 800bfe6:	68bb      	ldr	r3, [r7, #8]
 800bfe8:	2202      	movs	r2, #2
 800bfea:	731a      	strb	r2, [r3, #12]
 800bfec:	e014      	b.n	800c018 <vTaskGetInfo+0xc8>
                                    /* The task does not appear on the event list item of
                                     * and of the RTOS objects, but could still be in the
                                     * blocked state if it is waiting on its notification
                                     * rather than waiting on an object.  If not, is
                                     * suspended. */
                                    for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 800bfee:	2300      	movs	r3, #0
 800bff0:	617b      	str	r3, [r7, #20]
 800bff2:	e00e      	b.n	800c012 <vTaskGetInfo+0xc2>
                                    {
                                        if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 800bff4:	693a      	ldr	r2, [r7, #16]
 800bff6:	697b      	ldr	r3, [r7, #20]
 800bff8:	4413      	add	r3, r2
 800bffa:	33ac      	adds	r3, #172	@ 0xac
 800bffc:	781b      	ldrb	r3, [r3, #0]
 800bffe:	b2db      	uxtb	r3, r3
 800c000:	2b01      	cmp	r3, #1
 800c002:	d103      	bne.n	800c00c <vTaskGetInfo+0xbc>
                                        {
                                            pxTaskStatus->eCurrentState = eBlocked;
 800c004:	68bb      	ldr	r3, [r7, #8]
 800c006:	2202      	movs	r2, #2
 800c008:	731a      	strb	r2, [r3, #12]
                                            break;
 800c00a:	e005      	b.n	800c018 <vTaskGetInfo+0xc8>
                                    for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 800c00c:	697b      	ldr	r3, [r7, #20]
 800c00e:	3301      	adds	r3, #1
 800c010:	617b      	str	r3, [r7, #20]
 800c012:	697b      	ldr	r3, [r7, #20]
 800c014:	2b00      	cmp	r3, #0
 800c016:	dded      	ble.n	800bff4 <vTaskGetInfo+0xa4>
                                    }
                                }
                                #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
                            }
                        }
                        ( void ) xTaskResumeAll();
 800c018:	f7ff f9a6 	bl	800b368 <xTaskResumeAll>
                #endif /* INCLUDE_vTaskSuspend */

                /* Tasks can be in pending ready list and other state list at the
                 * same time. These tasks are in ready state no matter what state
                 * list the task is in. */
                taskENTER_CRITICAL();
 800c01c:	f000 ff98 	bl	800cf50 <vPortEnterCritical>
                {
                    if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdFALSE )
 800c020:	693b      	ldr	r3, [r7, #16]
 800c022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c024:	4a12      	ldr	r2, [pc, #72]	@ (800c070 <vTaskGetInfo+0x120>)
 800c026:	4293      	cmp	r3, r2
 800c028:	d102      	bne.n	800c030 <vTaskGetInfo+0xe0>
                    {
                        pxTaskStatus->eCurrentState = eReady;
 800c02a:	68bb      	ldr	r3, [r7, #8]
 800c02c:	2201      	movs	r2, #1
 800c02e:	731a      	strb	r2, [r3, #12]
                    }
                }
                taskEXIT_CRITICAL();
 800c030:	f000 ffc6 	bl	800cfc0 <vPortExitCritical>
 800c034:	e006      	b.n	800c044 <vTaskGetInfo+0xf4>
            }
        }
        else
        {
            pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800c036:	6938      	ldr	r0, [r7, #16]
 800c038:	f7ff f858 	bl	800b0ec <eTaskGetState>
 800c03c:	4603      	mov	r3, r0
 800c03e:	461a      	mov	r2, r3
 800c040:	68bb      	ldr	r3, [r7, #8]
 800c042:	731a      	strb	r2, [r3, #12]
        }

        /* Obtaining the stack space takes some time, so the xGetFreeStackSpace
         * parameter is provided to allow it to be skipped. */
        if( xGetFreeStackSpace != pdFALSE )
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d008      	beq.n	800c05c <vTaskGetInfo+0x10c>
            {
                pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
            }
            #else
            {
                pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800c04a:	693b      	ldr	r3, [r7, #16]
 800c04c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c04e:	4618      	mov	r0, r3
 800c050:	f000 f843 	bl	800c0da <prvTaskCheckFreeStackSpace>
 800c054:	4602      	mov	r2, r0
 800c056:	68bb      	ldr	r3, [r7, #8]
 800c058:	629a      	str	r2, [r3, #40]	@ 0x28
        {
            pxTaskStatus->usStackHighWaterMark = 0;
        }

        traceRETURN_vTaskGetInfo();
    }
 800c05a:	e002      	b.n	800c062 <vTaskGetInfo+0x112>
            pxTaskStatus->usStackHighWaterMark = 0;
 800c05c:	68bb      	ldr	r3, [r7, #8]
 800c05e:	2200      	movs	r2, #0
 800c060:	629a      	str	r2, [r3, #40]	@ 0x28
    }
 800c062:	bf00      	nop
 800c064:	3718      	adds	r7, #24
 800c066:	46bd      	mov	sp, r7
 800c068:	bd80      	pop	{r7, pc}
 800c06a:	bf00      	nop
 800c06c:	20000384 	.word	0x20000384
 800c070:	20000444 	.word	0x20000444

0800c074 <prvListTasksWithinSingleList>:
#if ( configUSE_TRACE_FACILITY == 1 )

    static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t * pxTaskStatusArray,
                                                     List_t * pxList,
                                                     eTaskState eState )
    {
 800c074:	b580      	push	{r7, lr}
 800c076:	b088      	sub	sp, #32
 800c078:	af00      	add	r7, sp, #0
 800c07a:	60f8      	str	r0, [r7, #12]
 800c07c:	60b9      	str	r1, [r7, #8]
 800c07e:	4613      	mov	r3, r2
 800c080:	71fb      	strb	r3, [r7, #7]
        UBaseType_t uxTask = 0;
 800c082:	2300      	movs	r3, #0
 800c084:	61fb      	str	r3, [r7, #28]
        const ListItem_t * pxEndMarker = listGET_END_MARKER( pxList );
 800c086:	68bb      	ldr	r3, [r7, #8]
 800c088:	3308      	adds	r3, #8
 800c08a:	617b      	str	r3, [r7, #20]
        ListItem_t * pxIterator;
        TCB_t * pxTCB = NULL;
 800c08c:	2300      	movs	r3, #0
 800c08e:	613b      	str	r3, [r7, #16]

        if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800c090:	68bb      	ldr	r3, [r7, #8]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d01b      	beq.n	800c0d0 <prvListTasksWithinSingleList+0x5c>
        {
            /* Populate an TaskStatus_t structure within the
             * pxTaskStatusArray array for each task that is referenced from
             * pxList.  See the definition of TaskStatus_t in task.h for the
             * meaning of each TaskStatus_t structure member. */
            for( pxIterator = listGET_HEAD_ENTRY( pxList ); pxIterator != pxEndMarker; pxIterator = listGET_NEXT( pxIterator ) )
 800c098:	68bb      	ldr	r3, [r7, #8]
 800c09a:	68db      	ldr	r3, [r3, #12]
 800c09c:	61bb      	str	r3, [r7, #24]
 800c09e:	e013      	b.n	800c0c8 <prvListTasksWithinSingleList+0x54>
            {
                /* MISRA Ref 11.5.3 [Void pointer assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxTCB = listGET_LIST_ITEM_OWNER( pxIterator );
 800c0a0:	69bb      	ldr	r3, [r7, #24]
 800c0a2:	68db      	ldr	r3, [r3, #12]
 800c0a4:	613b      	str	r3, [r7, #16]

                vTaskGetInfo( ( TaskHandle_t ) pxTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 800c0a6:	69fb      	ldr	r3, [r7, #28]
 800c0a8:	222c      	movs	r2, #44	@ 0x2c
 800c0aa:	fb02 f303 	mul.w	r3, r2, r3
 800c0ae:	68fa      	ldr	r2, [r7, #12]
 800c0b0:	18d1      	adds	r1, r2, r3
 800c0b2:	79fb      	ldrb	r3, [r7, #7]
 800c0b4:	2201      	movs	r2, #1
 800c0b6:	6938      	ldr	r0, [r7, #16]
 800c0b8:	f7ff ff4a 	bl	800bf50 <vTaskGetInfo>
                uxTask++;
 800c0bc:	69fb      	ldr	r3, [r7, #28]
 800c0be:	3301      	adds	r3, #1
 800c0c0:	61fb      	str	r3, [r7, #28]
            for( pxIterator = listGET_HEAD_ENTRY( pxList ); pxIterator != pxEndMarker; pxIterator = listGET_NEXT( pxIterator ) )
 800c0c2:	69bb      	ldr	r3, [r7, #24]
 800c0c4:	685b      	ldr	r3, [r3, #4]
 800c0c6:	61bb      	str	r3, [r7, #24]
 800c0c8:	69ba      	ldr	r2, [r7, #24]
 800c0ca:	697b      	ldr	r3, [r7, #20]
 800c0cc:	429a      	cmp	r2, r3
 800c0ce:	d1e7      	bne.n	800c0a0 <prvListTasksWithinSingleList+0x2c>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return uxTask;
 800c0d0:	69fb      	ldr	r3, [r7, #28]
    }
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	3720      	adds	r7, #32
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	bd80      	pop	{r7, pc}

0800c0da <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

    static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
    {
 800c0da:	b480      	push	{r7}
 800c0dc:	b085      	sub	sp, #20
 800c0de:	af00      	add	r7, sp, #0
 800c0e0:	6078      	str	r0, [r7, #4]
        configSTACK_DEPTH_TYPE uxCount = 0U;
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	60fb      	str	r3, [r7, #12]

        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800c0e6:	e005      	b.n	800c0f4 <prvTaskCheckFreeStackSpace+0x1a>
        {
            pucStackByte -= portSTACK_GROWTH;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	3301      	adds	r3, #1
 800c0ec:	607b      	str	r3, [r7, #4]
            uxCount++;
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	3301      	adds	r3, #1
 800c0f2:	60fb      	str	r3, [r7, #12]
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	781b      	ldrb	r3, [r3, #0]
 800c0f8:	2ba5      	cmp	r3, #165	@ 0xa5
 800c0fa:	d0f5      	beq.n	800c0e8 <prvTaskCheckFreeStackSpace+0xe>
        }

        uxCount /= ( configSTACK_DEPTH_TYPE ) sizeof( StackType_t );
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	089b      	lsrs	r3, r3, #2
 800c100:	60fb      	str	r3, [r7, #12]

        return uxCount;
 800c102:	68fb      	ldr	r3, [r7, #12]
    }
 800c104:	4618      	mov	r0, r3
 800c106:	3714      	adds	r7, #20
 800c108:	46bd      	mov	sp, r7
 800c10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10e:	4770      	bx	lr

0800c110 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800c110:	b580      	push	{r7, lr}
 800c112:	b082      	sub	sp, #8
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
        portCLEAN_UP_TCB( pxTCB );

        #if ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 )
        {
            /* Free up the memory allocated for the task's TLS Block. */
            configDEINIT_TLS_BLOCK( pxTCB->xTLSBlock );
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	335c      	adds	r3, #92	@ 0x5c
 800c11c:	4618      	mov	r0, r3
 800c11e:	f003 fba9 	bl	800f874 <_reclaim_reent>

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c126:	4618      	mov	r0, r3
 800c128:	f7f8 f8c4 	bl	80042b4 <vPortFree>
            vPortFree( pxTCB );
 800c12c:	6878      	ldr	r0, [r7, #4]
 800c12e:	f7f8 f8c1 	bl	80042b4 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800c132:	bf00      	nop
 800c134:	3708      	adds	r7, #8
 800c136:	46bd      	mov	sp, r7
 800c138:	bd80      	pop	{r7, pc}
	...

0800c13c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c13c:	b480      	push	{r7}
 800c13e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c140:	4b0a      	ldr	r3, [pc, #40]	@ (800c16c <prvResetNextTaskUnblockTime+0x30>)
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d104      	bne.n	800c154 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800c14a:	4b09      	ldr	r3, [pc, #36]	@ (800c170 <prvResetNextTaskUnblockTime+0x34>)
 800c14c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c150:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800c152:	e005      	b.n	800c160 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800c154:	4b05      	ldr	r3, [pc, #20]	@ (800c16c <prvResetNextTaskUnblockTime+0x30>)
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	68db      	ldr	r3, [r3, #12]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	4a04      	ldr	r2, [pc, #16]	@ (800c170 <prvResetNextTaskUnblockTime+0x34>)
 800c15e:	6013      	str	r3, [r2, #0]
}
 800c160:	bf00      	nop
 800c162:	46bd      	mov	sp, r7
 800c164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c168:	4770      	bx	lr
 800c16a:	bf00      	nop
 800c16c:	2000043c 	.word	0x2000043c
 800c170:	200004a4 	.word	0x200004a4

0800c174 <xTaskGetCurrentTaskHandle>:

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) || ( configNUMBER_OF_CORES > 1 )

    #if ( configNUMBER_OF_CORES == 1 )
        TaskHandle_t xTaskGetCurrentTaskHandle( void )
        {
 800c174:	b480      	push	{r7}
 800c176:	b083      	sub	sp, #12
 800c178:	af00      	add	r7, sp, #0
            traceENTER_xTaskGetCurrentTaskHandle();

            /* A critical section is not required as this is not called from
             * an interrupt and the current TCB will always be the same for any
             * individual execution thread. */
            xReturn = pxCurrentTCB;
 800c17a:	4b05      	ldr	r3, [pc, #20]	@ (800c190 <xTaskGetCurrentTaskHandle+0x1c>)
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	607b      	str	r3, [r7, #4]

            traceRETURN_xTaskGetCurrentTaskHandle( xReturn );

            return xReturn;
 800c180:	687b      	ldr	r3, [r7, #4]
        }
 800c182:	4618      	mov	r0, r3
 800c184:	370c      	adds	r7, #12
 800c186:	46bd      	mov	sp, r7
 800c188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18c:	4770      	bx	lr
 800c18e:	bf00      	nop
 800c190:	20000384 	.word	0x20000384

0800c194 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800c194:	b480      	push	{r7}
 800c196:	b083      	sub	sp, #12
 800c198:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 800c19a:	4b0b      	ldr	r3, [pc, #44]	@ (800c1c8 <xTaskGetSchedulerState+0x34>)
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d102      	bne.n	800c1a8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800c1a2:	2301      	movs	r3, #1
 800c1a4:	607b      	str	r3, [r7, #4]
 800c1a6:	e008      	b.n	800c1ba <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800c1a8:	4b08      	ldr	r3, [pc, #32]	@ (800c1cc <xTaskGetSchedulerState+0x38>)
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d102      	bne.n	800c1b6 <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 800c1b0:	2302      	movs	r3, #2
 800c1b2:	607b      	str	r3, [r7, #4]
 800c1b4:	e001      	b.n	800c1ba <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	607b      	str	r3, [r7, #4]
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );

        return xReturn;
 800c1ba:	687b      	ldr	r3, [r7, #4]
    }
 800c1bc:	4618      	mov	r0, r3
 800c1be:	370c      	adds	r7, #12
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c6:	4770      	bx	lr
 800c1c8:	20000490 	.word	0x20000490
 800c1cc:	200004ac 	.word	0x200004ac

0800c1d0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b086      	sub	sp, #24
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800c1dc:	2300      	movs	r3, #0
 800c1de:	617b      	str	r3, [r7, #20]

        traceENTER_xTaskPriorityInherit( pxMutexHolder );

        /* If the mutex is taken by an interrupt, the mutex holder is NULL. Priority
         * inheritance is not applied in this scenario. */
        if( pxMutexHolder != NULL )
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	f000 8089 	beq.w	800c2fa <xTaskPriorityInherit+0x12a>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c1e8:	693b      	ldr	r3, [r7, #16]
 800c1ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c1ec:	4b45      	ldr	r3, [pc, #276]	@ (800c304 <xTaskPriorityInherit+0x134>)
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1f2:	429a      	cmp	r2, r3
 800c1f4:	d278      	bcs.n	800c2e8 <xTaskPriorityInherit+0x118>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 800c1f6:	693b      	ldr	r3, [r7, #16]
 800c1f8:	699b      	ldr	r3, [r3, #24]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	db06      	blt.n	800c20c <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority );
 800c1fe:	4b41      	ldr	r3, [pc, #260]	@ (800c304 <xTaskPriorityInherit+0x134>)
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c204:	f1c3 0207 	rsb	r2, r3, #7
 800c208:	693b      	ldr	r3, [r7, #16]
 800c20a:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c20c:	693b      	ldr	r3, [r7, #16]
 800c20e:	6959      	ldr	r1, [r3, #20]
 800c210:	693b      	ldr	r3, [r7, #16]
 800c212:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c214:	4613      	mov	r3, r2
 800c216:	009b      	lsls	r3, r3, #2
 800c218:	4413      	add	r3, r2
 800c21a:	009b      	lsls	r3, r3, #2
 800c21c:	4a3a      	ldr	r2, [pc, #232]	@ (800c308 <xTaskPriorityInherit+0x138>)
 800c21e:	4413      	add	r3, r2
 800c220:	4299      	cmp	r1, r3
 800c222:	d159      	bne.n	800c2d8 <xTaskPriorityInherit+0x108>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c224:	693b      	ldr	r3, [r7, #16]
 800c226:	3304      	adds	r3, #4
 800c228:	4618      	mov	r0, r3
 800c22a:	f7fd fe3f 	bl	8009eac <uxListRemove>
 800c22e:	4603      	mov	r3, r0
 800c230:	2b00      	cmp	r3, #0
 800c232:	d10a      	bne.n	800c24a <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800c234:	693b      	ldr	r3, [r7, #16]
 800c236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c238:	2201      	movs	r2, #1
 800c23a:	fa02 f303 	lsl.w	r3, r2, r3
 800c23e:	43da      	mvns	r2, r3
 800c240:	4b32      	ldr	r3, [pc, #200]	@ (800c30c <xTaskPriorityInherit+0x13c>)
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	4013      	ands	r3, r2
 800c246:	4a31      	ldr	r2, [pc, #196]	@ (800c30c <xTaskPriorityInherit+0x13c>)
 800c248:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c24a:	4b2e      	ldr	r3, [pc, #184]	@ (800c304 <xTaskPriorityInherit+0x134>)
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c250:	693b      	ldr	r3, [r7, #16]
 800c252:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 800c254:	693b      	ldr	r3, [r7, #16]
 800c256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c258:	2201      	movs	r2, #1
 800c25a:	409a      	lsls	r2, r3
 800c25c:	4b2b      	ldr	r3, [pc, #172]	@ (800c30c <xTaskPriorityInherit+0x13c>)
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	4313      	orrs	r3, r2
 800c262:	4a2a      	ldr	r2, [pc, #168]	@ (800c30c <xTaskPriorityInherit+0x13c>)
 800c264:	6013      	str	r3, [r2, #0]
 800c266:	693b      	ldr	r3, [r7, #16]
 800c268:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c26a:	4927      	ldr	r1, [pc, #156]	@ (800c308 <xTaskPriorityInherit+0x138>)
 800c26c:	4613      	mov	r3, r2
 800c26e:	009b      	lsls	r3, r3, #2
 800c270:	4413      	add	r3, r2
 800c272:	009b      	lsls	r3, r3, #2
 800c274:	440b      	add	r3, r1
 800c276:	3304      	adds	r3, #4
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	60fb      	str	r3, [r7, #12]
 800c27c:	693b      	ldr	r3, [r7, #16]
 800c27e:	68fa      	ldr	r2, [r7, #12]
 800c280:	609a      	str	r2, [r3, #8]
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	689a      	ldr	r2, [r3, #8]
 800c286:	693b      	ldr	r3, [r7, #16]
 800c288:	60da      	str	r2, [r3, #12]
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	689b      	ldr	r3, [r3, #8]
 800c28e:	693a      	ldr	r2, [r7, #16]
 800c290:	3204      	adds	r2, #4
 800c292:	605a      	str	r2, [r3, #4]
 800c294:	693b      	ldr	r3, [r7, #16]
 800c296:	1d1a      	adds	r2, r3, #4
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	609a      	str	r2, [r3, #8]
 800c29c:	693b      	ldr	r3, [r7, #16]
 800c29e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c2a0:	4613      	mov	r3, r2
 800c2a2:	009b      	lsls	r3, r3, #2
 800c2a4:	4413      	add	r3, r2
 800c2a6:	009b      	lsls	r3, r3, #2
 800c2a8:	4a17      	ldr	r2, [pc, #92]	@ (800c308 <xTaskPriorityInherit+0x138>)
 800c2aa:	441a      	add	r2, r3
 800c2ac:	693b      	ldr	r3, [r7, #16]
 800c2ae:	615a      	str	r2, [r3, #20]
 800c2b0:	693b      	ldr	r3, [r7, #16]
 800c2b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c2b4:	4914      	ldr	r1, [pc, #80]	@ (800c308 <xTaskPriorityInherit+0x138>)
 800c2b6:	4613      	mov	r3, r2
 800c2b8:	009b      	lsls	r3, r3, #2
 800c2ba:	4413      	add	r3, r2
 800c2bc:	009b      	lsls	r3, r3, #2
 800c2be:	440b      	add	r3, r1
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	693a      	ldr	r2, [r7, #16]
 800c2c4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800c2c6:	1c59      	adds	r1, r3, #1
 800c2c8:	480f      	ldr	r0, [pc, #60]	@ (800c308 <xTaskPriorityInherit+0x138>)
 800c2ca:	4613      	mov	r3, r2
 800c2cc:	009b      	lsls	r3, r3, #2
 800c2ce:	4413      	add	r3, r2
 800c2d0:	009b      	lsls	r3, r3, #2
 800c2d2:	4403      	add	r3, r0
 800c2d4:	6019      	str	r1, [r3, #0]
 800c2d6:	e004      	b.n	800c2e2 <xTaskPriorityInherit+0x112>
                    #endif /* if ( configNUMBER_OF_CORES > 1 ) */
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c2d8:	4b0a      	ldr	r3, [pc, #40]	@ (800c304 <xTaskPriorityInherit+0x134>)
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c2de:	693b      	ldr	r3, [r7, #16]
 800c2e0:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 800c2e2:	2301      	movs	r3, #1
 800c2e4:	617b      	str	r3, [r7, #20]
 800c2e6:	e008      	b.n	800c2fa <xTaskPriorityInherit+0x12a>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c2e8:	693b      	ldr	r3, [r7, #16]
 800c2ea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c2ec:	4b05      	ldr	r3, [pc, #20]	@ (800c304 <xTaskPriorityInherit+0x134>)
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2f2:	429a      	cmp	r2, r3
 800c2f4:	d201      	bcs.n	800c2fa <xTaskPriorityInherit+0x12a>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 800c2f6:	2301      	movs	r3, #1
 800c2f8:	617b      	str	r3, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityInherit( xReturn );

        return xReturn;
 800c2fa:	697b      	ldr	r3, [r7, #20]
    }
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	3718      	adds	r7, #24
 800c300:	46bd      	mov	sp, r7
 800c302:	bd80      	pop	{r7, pc}
 800c304:	20000384 	.word	0x20000384
 800c308:	20000388 	.word	0x20000388
 800c30c:	2000048c 	.word	0x2000048c

0800c310 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800c310:	b580      	push	{r7, lr}
 800c312:	b088      	sub	sp, #32
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 800c31c:	2300      	movs	r3, #0
 800c31e:	61fb      	str	r3, [r7, #28]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2b00      	cmp	r3, #0
 800c324:	f000 809a 	beq.w	800c45c <xTaskPriorityDisinherit+0x14c>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800c328:	4b4f      	ldr	r3, [pc, #316]	@ (800c468 <xTaskPriorityDisinherit+0x158>)
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	69ba      	ldr	r2, [r7, #24]
 800c32e:	429a      	cmp	r2, r3
 800c330:	d010      	beq.n	800c354 <xTaskPriorityDisinherit+0x44>
    __asm volatile
 800c332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c336:	b672      	cpsid	i
 800c338:	f383 8811 	msr	BASEPRI, r3
 800c33c:	f3bf 8f6f 	isb	sy
 800c340:	f3bf 8f4f 	dsb	sy
 800c344:	b662      	cpsie	i
 800c346:	613b      	str	r3, [r7, #16]
}
 800c348:	bf00      	nop
 800c34a:	f641 2128 	movw	r1, #6696	@ 0x1a28
 800c34e:	4847      	ldr	r0, [pc, #284]	@ (800c46c <xTaskPriorityDisinherit+0x15c>)
 800c350:	f7f7 fc3a 	bl	8003bc8 <vAssertCalled>
            configASSERT( pxTCB->uxMutexesHeld );
 800c354:	69bb      	ldr	r3, [r7, #24]
 800c356:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d110      	bne.n	800c37e <xTaskPriorityDisinherit+0x6e>
    __asm volatile
 800c35c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c360:	b672      	cpsid	i
 800c362:	f383 8811 	msr	BASEPRI, r3
 800c366:	f3bf 8f6f 	isb	sy
 800c36a:	f3bf 8f4f 	dsb	sy
 800c36e:	b662      	cpsie	i
 800c370:	60fb      	str	r3, [r7, #12]
}
 800c372:	bf00      	nop
 800c374:	f641 2129 	movw	r1, #6697	@ 0x1a29
 800c378:	483c      	ldr	r0, [pc, #240]	@ (800c46c <xTaskPriorityDisinherit+0x15c>)
 800c37a:	f7f7 fc25 	bl	8003bc8 <vAssertCalled>
            ( pxTCB->uxMutexesHeld )--;
 800c37e:	69bb      	ldr	r3, [r7, #24]
 800c380:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c382:	1e5a      	subs	r2, r3, #1
 800c384:	69bb      	ldr	r3, [r7, #24]
 800c386:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c388:	69bb      	ldr	r3, [r7, #24]
 800c38a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c38c:	69bb      	ldr	r3, [r7, #24]
 800c38e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c390:	429a      	cmp	r2, r3
 800c392:	d063      	beq.n	800c45c <xTaskPriorityDisinherit+0x14c>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c394:	69bb      	ldr	r3, [r7, #24]
 800c396:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d15f      	bne.n	800c45c <xTaskPriorityDisinherit+0x14c>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c39c:	69bb      	ldr	r3, [r7, #24]
 800c39e:	3304      	adds	r3, #4
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	f7fd fd83 	bl	8009eac <uxListRemove>
 800c3a6:	4603      	mov	r3, r0
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d10a      	bne.n	800c3c2 <xTaskPriorityDisinherit+0xb2>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800c3ac:	69bb      	ldr	r3, [r7, #24]
 800c3ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3b0:	2201      	movs	r2, #1
 800c3b2:	fa02 f303 	lsl.w	r3, r2, r3
 800c3b6:	43da      	mvns	r2, r3
 800c3b8:	4b2d      	ldr	r3, [pc, #180]	@ (800c470 <xTaskPriorityDisinherit+0x160>)
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	4013      	ands	r3, r2
 800c3be:	4a2c      	ldr	r2, [pc, #176]	@ (800c470 <xTaskPriorityDisinherit+0x160>)
 800c3c0:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c3c2:	69bb      	ldr	r3, [r7, #24]
 800c3c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c3c6:	69bb      	ldr	r3, [r7, #24]
 800c3c8:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 800c3ca:	69bb      	ldr	r3, [r7, #24]
 800c3cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3ce:	f1c3 0207 	rsb	r2, r3, #7
 800c3d2:	69bb      	ldr	r3, [r7, #24]
 800c3d4:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800c3d6:	69bb      	ldr	r3, [r7, #24]
 800c3d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3da:	2201      	movs	r2, #1
 800c3dc:	409a      	lsls	r2, r3
 800c3de:	4b24      	ldr	r3, [pc, #144]	@ (800c470 <xTaskPriorityDisinherit+0x160>)
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	4313      	orrs	r3, r2
 800c3e4:	4a22      	ldr	r2, [pc, #136]	@ (800c470 <xTaskPriorityDisinherit+0x160>)
 800c3e6:	6013      	str	r3, [r2, #0]
 800c3e8:	69bb      	ldr	r3, [r7, #24]
 800c3ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3ec:	4921      	ldr	r1, [pc, #132]	@ (800c474 <xTaskPriorityDisinherit+0x164>)
 800c3ee:	4613      	mov	r3, r2
 800c3f0:	009b      	lsls	r3, r3, #2
 800c3f2:	4413      	add	r3, r2
 800c3f4:	009b      	lsls	r3, r3, #2
 800c3f6:	440b      	add	r3, r1
 800c3f8:	3304      	adds	r3, #4
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	617b      	str	r3, [r7, #20]
 800c3fe:	69bb      	ldr	r3, [r7, #24]
 800c400:	697a      	ldr	r2, [r7, #20]
 800c402:	609a      	str	r2, [r3, #8]
 800c404:	697b      	ldr	r3, [r7, #20]
 800c406:	689a      	ldr	r2, [r3, #8]
 800c408:	69bb      	ldr	r3, [r7, #24]
 800c40a:	60da      	str	r2, [r3, #12]
 800c40c:	697b      	ldr	r3, [r7, #20]
 800c40e:	689b      	ldr	r3, [r3, #8]
 800c410:	69ba      	ldr	r2, [r7, #24]
 800c412:	3204      	adds	r2, #4
 800c414:	605a      	str	r2, [r3, #4]
 800c416:	69bb      	ldr	r3, [r7, #24]
 800c418:	1d1a      	adds	r2, r3, #4
 800c41a:	697b      	ldr	r3, [r7, #20]
 800c41c:	609a      	str	r2, [r3, #8]
 800c41e:	69bb      	ldr	r3, [r7, #24]
 800c420:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c422:	4613      	mov	r3, r2
 800c424:	009b      	lsls	r3, r3, #2
 800c426:	4413      	add	r3, r2
 800c428:	009b      	lsls	r3, r3, #2
 800c42a:	4a12      	ldr	r2, [pc, #72]	@ (800c474 <xTaskPriorityDisinherit+0x164>)
 800c42c:	441a      	add	r2, r3
 800c42e:	69bb      	ldr	r3, [r7, #24]
 800c430:	615a      	str	r2, [r3, #20]
 800c432:	69bb      	ldr	r3, [r7, #24]
 800c434:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c436:	490f      	ldr	r1, [pc, #60]	@ (800c474 <xTaskPriorityDisinherit+0x164>)
 800c438:	4613      	mov	r3, r2
 800c43a:	009b      	lsls	r3, r3, #2
 800c43c:	4413      	add	r3, r2
 800c43e:	009b      	lsls	r3, r3, #2
 800c440:	440b      	add	r3, r1
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	69ba      	ldr	r2, [r7, #24]
 800c446:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800c448:	1c59      	adds	r1, r3, #1
 800c44a:	480a      	ldr	r0, [pc, #40]	@ (800c474 <xTaskPriorityDisinherit+0x164>)
 800c44c:	4613      	mov	r3, r2
 800c44e:	009b      	lsls	r3, r3, #2
 800c450:	4413      	add	r3, r2
 800c452:	009b      	lsls	r3, r3, #2
 800c454:	4403      	add	r3, r0
 800c456:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800c458:	2301      	movs	r3, #1
 800c45a:	61fb      	str	r3, [r7, #28]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );

        return xReturn;
 800c45c:	69fb      	ldr	r3, [r7, #28]
    }
 800c45e:	4618      	mov	r0, r3
 800c460:	3720      	adds	r7, #32
 800c462:	46bd      	mov	sp, r7
 800c464:	bd80      	pop	{r7, pc}
 800c466:	bf00      	nop
 800c468:	20000384 	.word	0x20000384
 800c46c:	080135f8 	.word	0x080135f8
 800c470:	2000048c 	.word	0x2000048c
 800c474:	20000388 	.word	0x20000388

0800c478 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 800c478:	b580      	push	{r7, lr}
 800c47a:	b08a      	sub	sp, #40	@ 0x28
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
 800c480:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c486:	2301      	movs	r3, #1
 800c488:	61fb      	str	r3, [r7, #28]

        traceENTER_vTaskPriorityDisinheritAfterTimeout( pxMutexHolder, uxHighestPriorityWaitingTask );

        if( pxMutexHolder != NULL )
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	f000 80b0 	beq.w	800c5f2 <vTaskPriorityDisinheritAfterTimeout+0x17a>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 800c492:	6a3b      	ldr	r3, [r7, #32]
 800c494:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c496:	2b00      	cmp	r3, #0
 800c498:	d110      	bne.n	800c4bc <vTaskPriorityDisinheritAfterTimeout+0x44>
    __asm volatile
 800c49a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c49e:	b672      	cpsid	i
 800c4a0:	f383 8811 	msr	BASEPRI, r3
 800c4a4:	f3bf 8f6f 	isb	sy
 800c4a8:	f3bf 8f4f 	dsb	sy
 800c4ac:	b662      	cpsie	i
 800c4ae:	613b      	str	r3, [r7, #16]
}
 800c4b0:	bf00      	nop
 800c4b2:	f641 2186 	movw	r1, #6790	@ 0x1a86
 800c4b6:	4851      	ldr	r0, [pc, #324]	@ (800c5fc <vTaskPriorityDisinheritAfterTimeout+0x184>)
 800c4b8:	f7f7 fb86 	bl	8003bc8 <vAssertCalled>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c4bc:	6a3b      	ldr	r3, [r7, #32]
 800c4be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c4c0:	683a      	ldr	r2, [r7, #0]
 800c4c2:	429a      	cmp	r2, r3
 800c4c4:	d902      	bls.n	800c4cc <vTaskPriorityDisinheritAfterTimeout+0x54>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	627b      	str	r3, [r7, #36]	@ 0x24
 800c4ca:	e002      	b.n	800c4d2 <vTaskPriorityDisinheritAfterTimeout+0x5a>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 800c4cc:	6a3b      	ldr	r3, [r7, #32]
 800c4ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c4d0:	627b      	str	r3, [r7, #36]	@ 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 800c4d2:	6a3b      	ldr	r3, [r7, #32]
 800c4d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c4d8:	429a      	cmp	r2, r3
 800c4da:	f000 808a 	beq.w	800c5f2 <vTaskPriorityDisinheritAfterTimeout+0x17a>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c4de:	6a3b      	ldr	r3, [r7, #32]
 800c4e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c4e2:	69fa      	ldr	r2, [r7, #28]
 800c4e4:	429a      	cmp	r2, r3
 800c4e6:	f040 8084 	bne.w	800c5f2 <vTaskPriorityDisinheritAfterTimeout+0x17a>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 800c4ea:	4b45      	ldr	r3, [pc, #276]	@ (800c600 <vTaskPriorityDisinheritAfterTimeout+0x188>)
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	6a3a      	ldr	r2, [r7, #32]
 800c4f0:	429a      	cmp	r2, r3
 800c4f2:	d110      	bne.n	800c516 <vTaskPriorityDisinheritAfterTimeout+0x9e>
    __asm volatile
 800c4f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4f8:	b672      	cpsid	i
 800c4fa:	f383 8811 	msr	BASEPRI, r3
 800c4fe:	f3bf 8f6f 	isb	sy
 800c502:	f3bf 8f4f 	dsb	sy
 800c506:	b662      	cpsie	i
 800c508:	60fb      	str	r3, [r7, #12]
}
 800c50a:	bf00      	nop
 800c50c:	f641 21a1 	movw	r1, #6817	@ 0x1aa1
 800c510:	483a      	ldr	r0, [pc, #232]	@ (800c5fc <vTaskPriorityDisinheritAfterTimeout+0x184>)
 800c512:	f7f7 fb59 	bl	8003bc8 <vAssertCalled>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c516:	6a3b      	ldr	r3, [r7, #32]
 800c518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c51a:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 800c51c:	6a3b      	ldr	r3, [r7, #32]
 800c51e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c520:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 800c522:	6a3b      	ldr	r3, [r7, #32]
 800c524:	699b      	ldr	r3, [r3, #24]
 800c526:	2b00      	cmp	r3, #0
 800c528:	db04      	blt.n	800c534 <vTaskPriorityDisinheritAfterTimeout+0xbc>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse );
 800c52a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c52c:	f1c3 0207 	rsb	r2, r3, #7
 800c530:	6a3b      	ldr	r3, [r7, #32]
 800c532:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c534:	6a3b      	ldr	r3, [r7, #32]
 800c536:	6959      	ldr	r1, [r3, #20]
 800c538:	69ba      	ldr	r2, [r7, #24]
 800c53a:	4613      	mov	r3, r2
 800c53c:	009b      	lsls	r3, r3, #2
 800c53e:	4413      	add	r3, r2
 800c540:	009b      	lsls	r3, r3, #2
 800c542:	4a30      	ldr	r2, [pc, #192]	@ (800c604 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
 800c544:	4413      	add	r3, r2
 800c546:	4299      	cmp	r1, r3
 800c548:	d153      	bne.n	800c5f2 <vTaskPriorityDisinheritAfterTimeout+0x17a>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c54a:	6a3b      	ldr	r3, [r7, #32]
 800c54c:	3304      	adds	r3, #4
 800c54e:	4618      	mov	r0, r3
 800c550:	f7fd fcac 	bl	8009eac <uxListRemove>
 800c554:	4603      	mov	r3, r0
 800c556:	2b00      	cmp	r3, #0
 800c558:	d10a      	bne.n	800c570 <vTaskPriorityDisinheritAfterTimeout+0xf8>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800c55a:	6a3b      	ldr	r3, [r7, #32]
 800c55c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c55e:	2201      	movs	r2, #1
 800c560:	fa02 f303 	lsl.w	r3, r2, r3
 800c564:	43da      	mvns	r2, r3
 800c566:	4b28      	ldr	r3, [pc, #160]	@ (800c608 <vTaskPriorityDisinheritAfterTimeout+0x190>)
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	4013      	ands	r3, r2
 800c56c:	4a26      	ldr	r2, [pc, #152]	@ (800c608 <vTaskPriorityDisinheritAfterTimeout+0x190>)
 800c56e:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 800c570:	6a3b      	ldr	r3, [r7, #32]
 800c572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c574:	2201      	movs	r2, #1
 800c576:	409a      	lsls	r2, r3
 800c578:	4b23      	ldr	r3, [pc, #140]	@ (800c608 <vTaskPriorityDisinheritAfterTimeout+0x190>)
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	4313      	orrs	r3, r2
 800c57e:	4a22      	ldr	r2, [pc, #136]	@ (800c608 <vTaskPriorityDisinheritAfterTimeout+0x190>)
 800c580:	6013      	str	r3, [r2, #0]
 800c582:	6a3b      	ldr	r3, [r7, #32]
 800c584:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c586:	491f      	ldr	r1, [pc, #124]	@ (800c604 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
 800c588:	4613      	mov	r3, r2
 800c58a:	009b      	lsls	r3, r3, #2
 800c58c:	4413      	add	r3, r2
 800c58e:	009b      	lsls	r3, r3, #2
 800c590:	440b      	add	r3, r1
 800c592:	3304      	adds	r3, #4
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	617b      	str	r3, [r7, #20]
 800c598:	6a3b      	ldr	r3, [r7, #32]
 800c59a:	697a      	ldr	r2, [r7, #20]
 800c59c:	609a      	str	r2, [r3, #8]
 800c59e:	697b      	ldr	r3, [r7, #20]
 800c5a0:	689a      	ldr	r2, [r3, #8]
 800c5a2:	6a3b      	ldr	r3, [r7, #32]
 800c5a4:	60da      	str	r2, [r3, #12]
 800c5a6:	697b      	ldr	r3, [r7, #20]
 800c5a8:	689b      	ldr	r3, [r3, #8]
 800c5aa:	6a3a      	ldr	r2, [r7, #32]
 800c5ac:	3204      	adds	r2, #4
 800c5ae:	605a      	str	r2, [r3, #4]
 800c5b0:	6a3b      	ldr	r3, [r7, #32]
 800c5b2:	1d1a      	adds	r2, r3, #4
 800c5b4:	697b      	ldr	r3, [r7, #20]
 800c5b6:	609a      	str	r2, [r3, #8]
 800c5b8:	6a3b      	ldr	r3, [r7, #32]
 800c5ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c5bc:	4613      	mov	r3, r2
 800c5be:	009b      	lsls	r3, r3, #2
 800c5c0:	4413      	add	r3, r2
 800c5c2:	009b      	lsls	r3, r3, #2
 800c5c4:	4a0f      	ldr	r2, [pc, #60]	@ (800c604 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
 800c5c6:	441a      	add	r2, r3
 800c5c8:	6a3b      	ldr	r3, [r7, #32]
 800c5ca:	615a      	str	r2, [r3, #20]
 800c5cc:	6a3b      	ldr	r3, [r7, #32]
 800c5ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c5d0:	490c      	ldr	r1, [pc, #48]	@ (800c604 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
 800c5d2:	4613      	mov	r3, r2
 800c5d4:	009b      	lsls	r3, r3, #2
 800c5d6:	4413      	add	r3, r2
 800c5d8:	009b      	lsls	r3, r3, #2
 800c5da:	440b      	add	r3, r1
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	6a3a      	ldr	r2, [r7, #32]
 800c5e0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800c5e2:	1c59      	adds	r1, r3, #1
 800c5e4:	4807      	ldr	r0, [pc, #28]	@ (800c604 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
 800c5e6:	4613      	mov	r3, r2
 800c5e8:	009b      	lsls	r3, r3, #2
 800c5ea:	4413      	add	r3, r2
 800c5ec:	009b      	lsls	r3, r3, #2
 800c5ee:	4403      	add	r3, r0
 800c5f0:	6019      	str	r1, [r3, #0]
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskPriorityDisinheritAfterTimeout();
    }
 800c5f2:	bf00      	nop
 800c5f4:	3728      	adds	r7, #40	@ 0x28
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bd80      	pop	{r7, pc}
 800c5fa:	bf00      	nop
 800c5fc:	080135f8 	.word	0x080135f8
 800c600:	20000384 	.word	0x20000384
 800c604:	20000388 	.word	0x20000388
 800c608:	2000048c 	.word	0x2000048c

0800c60c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 800c60c:	b480      	push	{r7}
 800c60e:	b083      	sub	sp, #12
 800c610:	af00      	add	r7, sp, #0
        TCB_t * pxTCB;

        traceENTER_pvTaskIncrementMutexHeldCount();

        pxTCB = pxCurrentTCB;
 800c612:	4b09      	ldr	r3, [pc, #36]	@ (800c638 <pvTaskIncrementMutexHeldCount+0x2c>)
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	607b      	str	r3, [r7, #4]

        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxTCB != NULL )
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d004      	beq.n	800c628 <pvTaskIncrementMutexHeldCount+0x1c>
        {
            ( pxTCB->uxMutexesHeld )++;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c622:	1c5a      	adds	r2, r3, #1
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        traceRETURN_pvTaskIncrementMutexHeldCount( pxTCB );

        return pxTCB;
 800c628:	687b      	ldr	r3, [r7, #4]
    }
 800c62a:	4618      	mov	r0, r3
 800c62c:	370c      	adds	r7, #12
 800c62e:	46bd      	mov	sp, r7
 800c630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c634:	4770      	bx	lr
 800c636:	bf00      	nop
 800c638:	20000384 	.word	0x20000384

0800c63c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b088      	sub	sp, #32
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
 800c644:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800c646:	4b37      	ldr	r3, [pc, #220]	@ (800c724 <prvAddCurrentTaskToDelayedList+0xe8>)
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 800c64c:	4b36      	ldr	r3, [pc, #216]	@ (800c728 <prvAddCurrentTaskToDelayedList+0xec>)
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 800c652:	4b36      	ldr	r3, [pc, #216]	@ (800c72c <prvAddCurrentTaskToDelayedList+0xf0>)
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c658:	4b35      	ldr	r3, [pc, #212]	@ (800c730 <prvAddCurrentTaskToDelayedList+0xf4>)
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	3304      	adds	r3, #4
 800c65e:	4618      	mov	r0, r3
 800c660:	f7fd fc24 	bl	8009eac <uxListRemove>
 800c664:	4603      	mov	r3, r0
 800c666:	2b00      	cmp	r3, #0
 800c668:	d10b      	bne.n	800c682 <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800c66a:	4b31      	ldr	r3, [pc, #196]	@ (800c730 <prvAddCurrentTaskToDelayedList+0xf4>)
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c670:	2201      	movs	r2, #1
 800c672:	fa02 f303 	lsl.w	r3, r2, r3
 800c676:	43da      	mvns	r2, r3
 800c678:	4b2e      	ldr	r3, [pc, #184]	@ (800c734 <prvAddCurrentTaskToDelayedList+0xf8>)
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	4013      	ands	r3, r2
 800c67e:	4a2d      	ldr	r2, [pc, #180]	@ (800c734 <prvAddCurrentTaskToDelayedList+0xf8>)
 800c680:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c688:	d124      	bne.n	800c6d4 <prvAddCurrentTaskToDelayedList+0x98>
 800c68a:	683b      	ldr	r3, [r7, #0]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d021      	beq.n	800c6d4 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c690:	4b29      	ldr	r3, [pc, #164]	@ (800c738 <prvAddCurrentTaskToDelayedList+0xfc>)
 800c692:	685b      	ldr	r3, [r3, #4]
 800c694:	613b      	str	r3, [r7, #16]
 800c696:	4b26      	ldr	r3, [pc, #152]	@ (800c730 <prvAddCurrentTaskToDelayedList+0xf4>)
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	693a      	ldr	r2, [r7, #16]
 800c69c:	609a      	str	r2, [r3, #8]
 800c69e:	4b24      	ldr	r3, [pc, #144]	@ (800c730 <prvAddCurrentTaskToDelayedList+0xf4>)
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	693a      	ldr	r2, [r7, #16]
 800c6a4:	6892      	ldr	r2, [r2, #8]
 800c6a6:	60da      	str	r2, [r3, #12]
 800c6a8:	4b21      	ldr	r3, [pc, #132]	@ (800c730 <prvAddCurrentTaskToDelayedList+0xf4>)
 800c6aa:	681a      	ldr	r2, [r3, #0]
 800c6ac:	693b      	ldr	r3, [r7, #16]
 800c6ae:	689b      	ldr	r3, [r3, #8]
 800c6b0:	3204      	adds	r2, #4
 800c6b2:	605a      	str	r2, [r3, #4]
 800c6b4:	4b1e      	ldr	r3, [pc, #120]	@ (800c730 <prvAddCurrentTaskToDelayedList+0xf4>)
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	1d1a      	adds	r2, r3, #4
 800c6ba:	693b      	ldr	r3, [r7, #16]
 800c6bc:	609a      	str	r2, [r3, #8]
 800c6be:	4b1c      	ldr	r3, [pc, #112]	@ (800c730 <prvAddCurrentTaskToDelayedList+0xf4>)
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	4a1d      	ldr	r2, [pc, #116]	@ (800c738 <prvAddCurrentTaskToDelayedList+0xfc>)
 800c6c4:	615a      	str	r2, [r3, #20]
 800c6c6:	4b1c      	ldr	r3, [pc, #112]	@ (800c738 <prvAddCurrentTaskToDelayedList+0xfc>)
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	3301      	adds	r3, #1
 800c6cc:	4a1a      	ldr	r2, [pc, #104]	@ (800c738 <prvAddCurrentTaskToDelayedList+0xfc>)
 800c6ce:	6013      	str	r3, [r2, #0]
 800c6d0:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800c6d2:	e022      	b.n	800c71a <prvAddCurrentTaskToDelayedList+0xde>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800c6d4:	69fa      	ldr	r2, [r7, #28]
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	4413      	add	r3, r2
 800c6da:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c6dc:	4b14      	ldr	r3, [pc, #80]	@ (800c730 <prvAddCurrentTaskToDelayedList+0xf4>)
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	68fa      	ldr	r2, [r7, #12]
 800c6e2:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800c6e4:	68fa      	ldr	r2, [r7, #12]
 800c6e6:	69fb      	ldr	r3, [r7, #28]
 800c6e8:	429a      	cmp	r2, r3
 800c6ea:	d207      	bcs.n	800c6fc <prvAddCurrentTaskToDelayedList+0xc0>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 800c6ec:	4b10      	ldr	r3, [pc, #64]	@ (800c730 <prvAddCurrentTaskToDelayedList+0xf4>)
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	3304      	adds	r3, #4
 800c6f2:	4619      	mov	r1, r3
 800c6f4:	6978      	ldr	r0, [r7, #20]
 800c6f6:	f7fd fba0 	bl	8009e3a <vListInsert>
}
 800c6fa:	e00e      	b.n	800c71a <prvAddCurrentTaskToDelayedList+0xde>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 800c6fc:	4b0c      	ldr	r3, [pc, #48]	@ (800c730 <prvAddCurrentTaskToDelayedList+0xf4>)
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	3304      	adds	r3, #4
 800c702:	4619      	mov	r1, r3
 800c704:	69b8      	ldr	r0, [r7, #24]
 800c706:	f7fd fb98 	bl	8009e3a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800c70a:	4b0c      	ldr	r3, [pc, #48]	@ (800c73c <prvAddCurrentTaskToDelayedList+0x100>)
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	68fa      	ldr	r2, [r7, #12]
 800c710:	429a      	cmp	r2, r3
 800c712:	d202      	bcs.n	800c71a <prvAddCurrentTaskToDelayedList+0xde>
                    xNextTaskUnblockTime = xTimeToWake;
 800c714:	4a09      	ldr	r2, [pc, #36]	@ (800c73c <prvAddCurrentTaskToDelayedList+0x100>)
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	6013      	str	r3, [r2, #0]
}
 800c71a:	bf00      	nop
 800c71c:	3720      	adds	r7, #32
 800c71e:	46bd      	mov	sp, r7
 800c720:	bd80      	pop	{r7, pc}
 800c722:	bf00      	nop
 800c724:	20000488 	.word	0x20000488
 800c728:	2000043c 	.word	0x2000043c
 800c72c:	20000440 	.word	0x20000440
 800c730:	20000384 	.word	0x20000384
 800c734:	2000048c 	.word	0x2000048c
 800c738:	20000470 	.word	0x20000470
 800c73c:	200004a4 	.word	0x200004a4

0800c740 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800c740:	b580      	push	{r7, lr}
 800c742:	b084      	sub	sp, #16
 800c744:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800c746:	2300      	movs	r3, #0
 800c748:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800c74a:	f000 fa61 	bl	800cc10 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800c74e:	4b14      	ldr	r3, [pc, #80]	@ (800c7a0 <xTimerCreateTimerTask+0x60>)
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d00b      	beq.n	800c76e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800c756:	4b13      	ldr	r3, [pc, #76]	@ (800c7a4 <xTimerCreateTimerTask+0x64>)
 800c758:	9301      	str	r3, [sp, #4]
 800c75a:	2306      	movs	r3, #6
 800c75c:	9300      	str	r3, [sp, #0]
 800c75e:	2300      	movs	r3, #0
 800c760:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800c764:	4910      	ldr	r1, [pc, #64]	@ (800c7a8 <xTimerCreateTimerTask+0x68>)
 800c766:	4811      	ldr	r0, [pc, #68]	@ (800c7ac <xTimerCreateTimerTask+0x6c>)
 800c768:	f7fe fa68 	bl	800ac3c <xTaskCreate>
 800c76c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d110      	bne.n	800c796 <xTimerCreateTimerTask+0x56>
    __asm volatile
 800c774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c778:	b672      	cpsid	i
 800c77a:	f383 8811 	msr	BASEPRI, r3
 800c77e:	f3bf 8f6f 	isb	sy
 800c782:	f3bf 8f4f 	dsb	sy
 800c786:	b662      	cpsie	i
 800c788:	603b      	str	r3, [r7, #0]
}
 800c78a:	bf00      	nop
 800c78c:	f44f 71a3 	mov.w	r1, #326	@ 0x146
 800c790:	4807      	ldr	r0, [pc, #28]	@ (800c7b0 <xTimerCreateTimerTask+0x70>)
 800c792:	f7f7 fa19 	bl	8003bc8 <vAssertCalled>

        traceRETURN_xTimerCreateTimerTask( xReturn );

        return xReturn;
 800c796:	687b      	ldr	r3, [r7, #4]
    }
 800c798:	4618      	mov	r0, r3
 800c79a:	3708      	adds	r7, #8
 800c79c:	46bd      	mov	sp, r7
 800c79e:	bd80      	pop	{r7, pc}
 800c7a0:	200004e8 	.word	0x200004e8
 800c7a4:	200004ec 	.word	0x200004ec
 800c7a8:	080136dc 	.word	0x080136dc
 800c7ac:	0800c859 	.word	0x0800c859
 800c7b0:	080136e4 	.word	0x080136e4

0800c7b4 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b084      	sub	sp, #16
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	60f8      	str	r0, [r7, #12]
 800c7bc:	60b9      	str	r1, [r7, #8]
 800c7be:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800c7c0:	e008      	b.n	800c7d4 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	699b      	ldr	r3, [r3, #24]
 800c7c6:	68ba      	ldr	r2, [r7, #8]
 800c7c8:	4413      	add	r3, r2
 800c7ca:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	6a1b      	ldr	r3, [r3, #32]
 800c7d0:	68f8      	ldr	r0, [r7, #12]
 800c7d2:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	699a      	ldr	r2, [r3, #24]
 800c7d8:	68bb      	ldr	r3, [r7, #8]
 800c7da:	18d1      	adds	r1, r2, r3
 800c7dc:	68bb      	ldr	r3, [r7, #8]
 800c7de:	687a      	ldr	r2, [r7, #4]
 800c7e0:	68f8      	ldr	r0, [r7, #12]
 800c7e2:	f000 f8df 	bl	800c9a4 <prvInsertTimerInActiveList>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d1ea      	bne.n	800c7c2 <prvReloadTimer+0xe>
        }
    }
 800c7ec:	bf00      	nop
 800c7ee:	bf00      	nop
 800c7f0:	3710      	adds	r7, #16
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bd80      	pop	{r7, pc}
	...

0800c7f8 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b084      	sub	sp, #16
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
 800c800:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c802:	4b14      	ldr	r3, [pc, #80]	@ (800c854 <prvProcessExpiredTimer+0x5c>)
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	68db      	ldr	r3, [r3, #12]
 800c808:	68db      	ldr	r3, [r3, #12]
 800c80a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	3304      	adds	r3, #4
 800c810:	4618      	mov	r0, r3
 800c812:	f7fd fb4b 	bl	8009eac <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c81c:	f003 0304 	and.w	r3, r3, #4
 800c820:	2b00      	cmp	r3, #0
 800c822:	d005      	beq.n	800c830 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800c824:	683a      	ldr	r2, [r7, #0]
 800c826:	6879      	ldr	r1, [r7, #4]
 800c828:	68f8      	ldr	r0, [r7, #12]
 800c82a:	f7ff ffc3 	bl	800c7b4 <prvReloadTimer>
 800c82e:	e008      	b.n	800c842 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c836:	f023 0301 	bic.w	r3, r3, #1
 800c83a:	b2da      	uxtb	r2, r3
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	6a1b      	ldr	r3, [r3, #32]
 800c846:	68f8      	ldr	r0, [r7, #12]
 800c848:	4798      	blx	r3
    }
 800c84a:	bf00      	nop
 800c84c:	3710      	adds	r7, #16
 800c84e:	46bd      	mov	sp, r7
 800c850:	bd80      	pop	{r7, pc}
 800c852:	bf00      	nop
 800c854:	200004e0 	.word	0x200004e0

0800c858 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800c858:	b580      	push	{r7, lr}
 800c85a:	b084      	sub	sp, #16
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c860:	f107 0308 	add.w	r3, r7, #8
 800c864:	4618      	mov	r0, r3
 800c866:	f000 f859 	bl	800c91c <prvGetNextExpireTime>
 800c86a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c86c:	68bb      	ldr	r3, [r7, #8]
 800c86e:	4619      	mov	r1, r3
 800c870:	68f8      	ldr	r0, [r7, #12]
 800c872:	f000 f805 	bl	800c880 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800c876:	f000 f8d7 	bl	800ca28 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c87a:	bf00      	nop
 800c87c:	e7f0      	b.n	800c860 <prvTimerTask+0x8>
	...

0800c880 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800c880:	b580      	push	{r7, lr}
 800c882:	b084      	sub	sp, #16
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
 800c888:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800c88a:	f7fe fd5f 	bl	800b34c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c88e:	f107 0308 	add.w	r3, r7, #8
 800c892:	4618      	mov	r0, r3
 800c894:	f000 f866 	bl	800c964 <prvSampleTimeNow>
 800c898:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800c89a:	68bb      	ldr	r3, [r7, #8]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d130      	bne.n	800c902 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c8a0:	683b      	ldr	r3, [r7, #0]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d10a      	bne.n	800c8bc <prvProcessTimerOrBlockTask+0x3c>
 800c8a6:	687a      	ldr	r2, [r7, #4]
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	429a      	cmp	r2, r3
 800c8ac:	d806      	bhi.n	800c8bc <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800c8ae:	f7fe fd5b 	bl	800b368 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c8b2:	68f9      	ldr	r1, [r7, #12]
 800c8b4:	6878      	ldr	r0, [r7, #4]
 800c8b6:	f7ff ff9f 	bl	800c7f8 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800c8ba:	e024      	b.n	800c906 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800c8bc:	683b      	ldr	r3, [r7, #0]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d008      	beq.n	800c8d4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c8c2:	4b13      	ldr	r3, [pc, #76]	@ (800c910 <prvProcessTimerOrBlockTask+0x90>)
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d101      	bne.n	800c8d0 <prvProcessTimerOrBlockTask+0x50>
 800c8cc:	2301      	movs	r3, #1
 800c8ce:	e000      	b.n	800c8d2 <prvProcessTimerOrBlockTask+0x52>
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c8d4:	4b0f      	ldr	r3, [pc, #60]	@ (800c914 <prvProcessTimerOrBlockTask+0x94>)
 800c8d6:	6818      	ldr	r0, [r3, #0]
 800c8d8:	687a      	ldr	r2, [r7, #4]
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	1ad3      	subs	r3, r2, r3
 800c8de:	683a      	ldr	r2, [r7, #0]
 800c8e0:	4619      	mov	r1, r3
 800c8e2:	f7fe f93b 	bl	800ab5c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800c8e6:	f7fe fd3f 	bl	800b368 <xTaskResumeAll>
 800c8ea:	4603      	mov	r3, r0
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d10a      	bne.n	800c906 <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 800c8f0:	4b09      	ldr	r3, [pc, #36]	@ (800c918 <prvProcessTimerOrBlockTask+0x98>)
 800c8f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c8f6:	601a      	str	r2, [r3, #0]
 800c8f8:	f3bf 8f4f 	dsb	sy
 800c8fc:	f3bf 8f6f 	isb	sy
    }
 800c900:	e001      	b.n	800c906 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800c902:	f7fe fd31 	bl	800b368 <xTaskResumeAll>
    }
 800c906:	bf00      	nop
 800c908:	3710      	adds	r7, #16
 800c90a:	46bd      	mov	sp, r7
 800c90c:	bd80      	pop	{r7, pc}
 800c90e:	bf00      	nop
 800c910:	200004e4 	.word	0x200004e4
 800c914:	200004e8 	.word	0x200004e8
 800c918:	e000ed04 	.word	0xe000ed04

0800c91c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800c91c:	b480      	push	{r7}
 800c91e:	b085      	sub	sp, #20
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c924:	4b0e      	ldr	r3, [pc, #56]	@ (800c960 <prvGetNextExpireTime+0x44>)
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d101      	bne.n	800c932 <prvGetNextExpireTime+0x16>
 800c92e:	2201      	movs	r2, #1
 800c930:	e000      	b.n	800c934 <prvGetNextExpireTime+0x18>
 800c932:	2200      	movs	r2, #0
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d105      	bne.n	800c94c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c940:	4b07      	ldr	r3, [pc, #28]	@ (800c960 <prvGetNextExpireTime+0x44>)
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	68db      	ldr	r3, [r3, #12]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	60fb      	str	r3, [r7, #12]
 800c94a:	e001      	b.n	800c950 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800c94c:	2300      	movs	r3, #0
 800c94e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800c950:	68fb      	ldr	r3, [r7, #12]
    }
 800c952:	4618      	mov	r0, r3
 800c954:	3714      	adds	r7, #20
 800c956:	46bd      	mov	sp, r7
 800c958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95c:	4770      	bx	lr
 800c95e:	bf00      	nop
 800c960:	200004e0 	.word	0x200004e0

0800c964 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800c964:	b580      	push	{r7, lr}
 800c966:	b084      	sub	sp, #16
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 800c96c:	f7fe fe0c 	bl	800b588 <xTaskGetTickCount>
 800c970:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800c972:	4b0b      	ldr	r3, [pc, #44]	@ (800c9a0 <prvSampleTimeNow+0x3c>)
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	68fa      	ldr	r2, [r7, #12]
 800c978:	429a      	cmp	r2, r3
 800c97a:	d205      	bcs.n	800c988 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800c97c:	f000 f922 	bl	800cbc4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	2201      	movs	r2, #1
 800c984:	601a      	str	r2, [r3, #0]
 800c986:	e002      	b.n	800c98e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2200      	movs	r2, #0
 800c98c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800c98e:	4a04      	ldr	r2, [pc, #16]	@ (800c9a0 <prvSampleTimeNow+0x3c>)
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800c994:	68fb      	ldr	r3, [r7, #12]
    }
 800c996:	4618      	mov	r0, r3
 800c998:	3710      	adds	r7, #16
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bd80      	pop	{r7, pc}
 800c99e:	bf00      	nop
 800c9a0:	200004f0 	.word	0x200004f0

0800c9a4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b086      	sub	sp, #24
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	60f8      	str	r0, [r7, #12]
 800c9ac:	60b9      	str	r1, [r7, #8]
 800c9ae:	607a      	str	r2, [r7, #4]
 800c9b0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	68ba      	ldr	r2, [r7, #8]
 800c9ba:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	68fa      	ldr	r2, [r7, #12]
 800c9c0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800c9c2:	68ba      	ldr	r2, [r7, #8]
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	429a      	cmp	r2, r3
 800c9c8:	d812      	bhi.n	800c9f0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 800c9ca:	687a      	ldr	r2, [r7, #4]
 800c9cc:	683b      	ldr	r3, [r7, #0]
 800c9ce:	1ad2      	subs	r2, r2, r3
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	699b      	ldr	r3, [r3, #24]
 800c9d4:	429a      	cmp	r2, r3
 800c9d6:	d302      	bcc.n	800c9de <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800c9d8:	2301      	movs	r3, #1
 800c9da:	617b      	str	r3, [r7, #20]
 800c9dc:	e01b      	b.n	800ca16 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c9de:	4b10      	ldr	r3, [pc, #64]	@ (800ca20 <prvInsertTimerInActiveList+0x7c>)
 800c9e0:	681a      	ldr	r2, [r3, #0]
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	3304      	adds	r3, #4
 800c9e6:	4619      	mov	r1, r3
 800c9e8:	4610      	mov	r0, r2
 800c9ea:	f7fd fa26 	bl	8009e3a <vListInsert>
 800c9ee:	e012      	b.n	800ca16 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c9f0:	687a      	ldr	r2, [r7, #4]
 800c9f2:	683b      	ldr	r3, [r7, #0]
 800c9f4:	429a      	cmp	r2, r3
 800c9f6:	d206      	bcs.n	800ca06 <prvInsertTimerInActiveList+0x62>
 800c9f8:	68ba      	ldr	r2, [r7, #8]
 800c9fa:	683b      	ldr	r3, [r7, #0]
 800c9fc:	429a      	cmp	r2, r3
 800c9fe:	d302      	bcc.n	800ca06 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800ca00:	2301      	movs	r3, #1
 800ca02:	617b      	str	r3, [r7, #20]
 800ca04:	e007      	b.n	800ca16 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ca06:	4b07      	ldr	r3, [pc, #28]	@ (800ca24 <prvInsertTimerInActiveList+0x80>)
 800ca08:	681a      	ldr	r2, [r3, #0]
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	3304      	adds	r3, #4
 800ca0e:	4619      	mov	r1, r3
 800ca10:	4610      	mov	r0, r2
 800ca12:	f7fd fa12 	bl	8009e3a <vListInsert>
            }
        }

        return xProcessTimerNow;
 800ca16:	697b      	ldr	r3, [r7, #20]
    }
 800ca18:	4618      	mov	r0, r3
 800ca1a:	3718      	adds	r7, #24
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bd80      	pop	{r7, pc}
 800ca20:	200004e4 	.word	0x200004e4
 800ca24:	200004e0 	.word	0x200004e0

0800ca28 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b088      	sub	sp, #32
 800ca2c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 800ca2e:	f107 0308 	add.w	r3, r7, #8
 800ca32:	2200      	movs	r2, #0
 800ca34:	601a      	str	r2, [r3, #0]
 800ca36:	605a      	str	r2, [r3, #4]
 800ca38:	609a      	str	r2, [r3, #8]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 800ca3a:	e0ae      	b.n	800cb9a <prvProcessReceivedCommands+0x172>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ca3c:	68bb      	ldr	r3, [r7, #8]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	f2c0 80ab 	blt.w	800cb9a <prvProcessReceivedCommands+0x172>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ca44:	693b      	ldr	r3, [r7, #16]
 800ca46:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800ca48:	69fb      	ldr	r3, [r7, #28]
 800ca4a:	695b      	ldr	r3, [r3, #20]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d004      	beq.n	800ca5a <prvProcessReceivedCommands+0x32>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ca50:	69fb      	ldr	r3, [r7, #28]
 800ca52:	3304      	adds	r3, #4
 800ca54:	4618      	mov	r0, r3
 800ca56:	f7fd fa29 	bl	8009eac <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ca5a:	1d3b      	adds	r3, r7, #4
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	f7ff ff81 	bl	800c964 <prvSampleTimeNow>
 800ca62:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 800ca64:	68bb      	ldr	r3, [r7, #8]
 800ca66:	3b01      	subs	r3, #1
 800ca68:	2b08      	cmp	r3, #8
 800ca6a:	f200 8093 	bhi.w	800cb94 <prvProcessReceivedCommands+0x16c>
 800ca6e:	a201      	add	r2, pc, #4	@ (adr r2, 800ca74 <prvProcessReceivedCommands+0x4c>)
 800ca70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca74:	0800ca99 	.word	0x0800ca99
 800ca78:	0800ca99 	.word	0x0800ca99
 800ca7c:	0800cb01 	.word	0x0800cb01
 800ca80:	0800cb15 	.word	0x0800cb15
 800ca84:	0800cb6b 	.word	0x0800cb6b
 800ca88:	0800ca99 	.word	0x0800ca99
 800ca8c:	0800ca99 	.word	0x0800ca99
 800ca90:	0800cb01 	.word	0x0800cb01
 800ca94:	0800cb15 	.word	0x0800cb15
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 800ca98:	69fb      	ldr	r3, [r7, #28]
 800ca9a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ca9e:	f043 0301 	orr.w	r3, r3, #1
 800caa2:	b2da      	uxtb	r2, r3
 800caa4:	69fb      	ldr	r3, [r7, #28]
 800caa6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800caaa:	68fa      	ldr	r2, [r7, #12]
 800caac:	69fb      	ldr	r3, [r7, #28]
 800caae:	699b      	ldr	r3, [r3, #24]
 800cab0:	18d1      	adds	r1, r2, r3
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	69ba      	ldr	r2, [r7, #24]
 800cab6:	69f8      	ldr	r0, [r7, #28]
 800cab8:	f7ff ff74 	bl	800c9a4 <prvInsertTimerInActiveList>
 800cabc:	4603      	mov	r3, r0
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d06a      	beq.n	800cb98 <prvProcessReceivedCommands+0x170>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 800cac2:	69fb      	ldr	r3, [r7, #28]
 800cac4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cac8:	f003 0304 	and.w	r3, r3, #4
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d009      	beq.n	800cae4 <prvProcessReceivedCommands+0xbc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800cad0:	68fa      	ldr	r2, [r7, #12]
 800cad2:	69fb      	ldr	r3, [r7, #28]
 800cad4:	699b      	ldr	r3, [r3, #24]
 800cad6:	4413      	add	r3, r2
 800cad8:	69ba      	ldr	r2, [r7, #24]
 800cada:	4619      	mov	r1, r3
 800cadc:	69f8      	ldr	r0, [r7, #28]
 800cade:	f7ff fe69 	bl	800c7b4 <prvReloadTimer>
 800cae2:	e008      	b.n	800caf6 <prvProcessReceivedCommands+0xce>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800cae4:	69fb      	ldr	r3, [r7, #28]
 800cae6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800caea:	f023 0301 	bic.w	r3, r3, #1
 800caee:	b2da      	uxtb	r2, r3
 800caf0:	69fb      	ldr	r3, [r7, #28]
 800caf2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800caf6:	69fb      	ldr	r3, [r7, #28]
 800caf8:	6a1b      	ldr	r3, [r3, #32]
 800cafa:	69f8      	ldr	r0, [r7, #28]
 800cafc:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800cafe:	e04b      	b.n	800cb98 <prvProcessReceivedCommands+0x170>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800cb00:	69fb      	ldr	r3, [r7, #28]
 800cb02:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cb06:	f023 0301 	bic.w	r3, r3, #1
 800cb0a:	b2da      	uxtb	r2, r3
 800cb0c:	69fb      	ldr	r3, [r7, #28]
 800cb0e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800cb12:	e042      	b.n	800cb9a <prvProcessReceivedCommands+0x172>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 800cb14:	69fb      	ldr	r3, [r7, #28]
 800cb16:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cb1a:	f043 0301 	orr.w	r3, r3, #1
 800cb1e:	b2da      	uxtb	r2, r3
 800cb20:	69fb      	ldr	r3, [r7, #28]
 800cb22:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800cb26:	68fa      	ldr	r2, [r7, #12]
 800cb28:	69fb      	ldr	r3, [r7, #28]
 800cb2a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800cb2c:	69fb      	ldr	r3, [r7, #28]
 800cb2e:	699b      	ldr	r3, [r3, #24]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d110      	bne.n	800cb56 <prvProcessReceivedCommands+0x12e>
    __asm volatile
 800cb34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb38:	b672      	cpsid	i
 800cb3a:	f383 8811 	msr	BASEPRI, r3
 800cb3e:	f3bf 8f6f 	isb	sy
 800cb42:	f3bf 8f4f 	dsb	sy
 800cb46:	b662      	cpsie	i
 800cb48:	617b      	str	r3, [r7, #20]
}
 800cb4a:	bf00      	nop
 800cb4c:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 800cb50:	481a      	ldr	r0, [pc, #104]	@ (800cbbc <prvProcessReceivedCommands+0x194>)
 800cb52:	f7f7 f839 	bl	8003bc8 <vAssertCalled>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cb56:	69fb      	ldr	r3, [r7, #28]
 800cb58:	699a      	ldr	r2, [r3, #24]
 800cb5a:	69bb      	ldr	r3, [r7, #24]
 800cb5c:	18d1      	adds	r1, r2, r3
 800cb5e:	69bb      	ldr	r3, [r7, #24]
 800cb60:	69ba      	ldr	r2, [r7, #24]
 800cb62:	69f8      	ldr	r0, [r7, #28]
 800cb64:	f7ff ff1e 	bl	800c9a4 <prvInsertTimerInActiveList>
                        break;
 800cb68:	e017      	b.n	800cb9a <prvProcessReceivedCommands+0x172>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800cb6a:	69fb      	ldr	r3, [r7, #28]
 800cb6c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cb70:	f003 0302 	and.w	r3, r3, #2
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d103      	bne.n	800cb80 <prvProcessReceivedCommands+0x158>
                            {
                                vPortFree( pxTimer );
 800cb78:	69f8      	ldr	r0, [r7, #28]
 800cb7a:	f7f7 fb9b 	bl	80042b4 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800cb7e:	e00c      	b.n	800cb9a <prvProcessReceivedCommands+0x172>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800cb80:	69fb      	ldr	r3, [r7, #28]
 800cb82:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cb86:	f023 0301 	bic.w	r3, r3, #1
 800cb8a:	b2da      	uxtb	r2, r3
 800cb8c:	69fb      	ldr	r3, [r7, #28]
 800cb8e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800cb92:	e002      	b.n	800cb9a <prvProcessReceivedCommands+0x172>

                    default:
                        /* Don't expect to get here. */
                        break;
 800cb94:	bf00      	nop
 800cb96:	e000      	b.n	800cb9a <prvProcessReceivedCommands+0x172>
                        break;
 800cb98:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 800cb9a:	4b09      	ldr	r3, [pc, #36]	@ (800cbc0 <prvProcessReceivedCommands+0x198>)
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	f107 0108 	add.w	r1, r7, #8
 800cba2:	2200      	movs	r2, #0
 800cba4:	4618      	mov	r0, r3
 800cba6:	f7fd fc87 	bl	800a4b8 <xQueueReceive>
 800cbaa:	4603      	mov	r3, r0
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	f47f af45 	bne.w	800ca3c <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 800cbb2:	bf00      	nop
 800cbb4:	bf00      	nop
 800cbb6:	3720      	adds	r7, #32
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	bd80      	pop	{r7, pc}
 800cbbc:	080136e4 	.word	0x080136e4
 800cbc0:	200004e8 	.word	0x200004e8

0800cbc4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b082      	sub	sp, #8
 800cbc8:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cbca:	e009      	b.n	800cbe0 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cbcc:	4b0e      	ldr	r3, [pc, #56]	@ (800cc08 <prvSwitchTimerLists+0x44>)
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	68db      	ldr	r3, [r3, #12]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800cbd6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800cbda:	6838      	ldr	r0, [r7, #0]
 800cbdc:	f7ff fe0c 	bl	800c7f8 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cbe0:	4b09      	ldr	r3, [pc, #36]	@ (800cc08 <prvSwitchTimerLists+0x44>)
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d1f0      	bne.n	800cbcc <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800cbea:	4b07      	ldr	r3, [pc, #28]	@ (800cc08 <prvSwitchTimerLists+0x44>)
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800cbf0:	4b06      	ldr	r3, [pc, #24]	@ (800cc0c <prvSwitchTimerLists+0x48>)
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	4a04      	ldr	r2, [pc, #16]	@ (800cc08 <prvSwitchTimerLists+0x44>)
 800cbf6:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800cbf8:	4a04      	ldr	r2, [pc, #16]	@ (800cc0c <prvSwitchTimerLists+0x48>)
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	6013      	str	r3, [r2, #0]
    }
 800cbfe:	bf00      	nop
 800cc00:	3708      	adds	r7, #8
 800cc02:	46bd      	mov	sp, r7
 800cc04:	bd80      	pop	{r7, pc}
 800cc06:	bf00      	nop
 800cc08:	200004e0 	.word	0x200004e0
 800cc0c:	200004e4 	.word	0x200004e4

0800cc10 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800cc10:	b580      	push	{r7, lr}
 800cc12:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800cc14:	f000 f99c 	bl	800cf50 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800cc18:	4b0d      	ldr	r3, [pc, #52]	@ (800cc50 <prvCheckForValidListAndQueue+0x40>)
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d113      	bne.n	800cc48 <prvCheckForValidListAndQueue+0x38>
            {
                vListInitialise( &xActiveTimerList1 );
 800cc20:	480c      	ldr	r0, [pc, #48]	@ (800cc54 <prvCheckForValidListAndQueue+0x44>)
 800cc22:	f7fd f8b9 	bl	8009d98 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800cc26:	480c      	ldr	r0, [pc, #48]	@ (800cc58 <prvCheckForValidListAndQueue+0x48>)
 800cc28:	f7fd f8b6 	bl	8009d98 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800cc2c:	4b0b      	ldr	r3, [pc, #44]	@ (800cc5c <prvCheckForValidListAndQueue+0x4c>)
 800cc2e:	4a09      	ldr	r2, [pc, #36]	@ (800cc54 <prvCheckForValidListAndQueue+0x44>)
 800cc30:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800cc32:	4b0b      	ldr	r3, [pc, #44]	@ (800cc60 <prvCheckForValidListAndQueue+0x50>)
 800cc34:	4a08      	ldr	r2, [pc, #32]	@ (800cc58 <prvCheckForValidListAndQueue+0x48>)
 800cc36:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 800cc38:	2200      	movs	r2, #0
 800cc3a:	210c      	movs	r1, #12
 800cc3c:	2008      	movs	r0, #8
 800cc3e:	f7fd f9fd 	bl	800a03c <xQueueGenericCreate>
 800cc42:	4603      	mov	r3, r0
 800cc44:	4a02      	ldr	r2, [pc, #8]	@ (800cc50 <prvCheckForValidListAndQueue+0x40>)
 800cc46:	6013      	str	r3, [r2, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800cc48:	f000 f9ba 	bl	800cfc0 <vPortExitCritical>
    }
 800cc4c:	bf00      	nop
 800cc4e:	bd80      	pop	{r7, pc}
 800cc50:	200004e8 	.word	0x200004e8
 800cc54:	200004b8 	.word	0x200004b8
 800cc58:	200004cc 	.word	0x200004cc
 800cc5c:	200004e0 	.word	0x200004e0
 800cc60:	200004e4 	.word	0x200004e4

0800cc64 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800cc64:	b480      	push	{r7}
 800cc66:	b085      	sub	sp, #20
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	60f8      	str	r0, [r7, #12]
 800cc6c:	60b9      	str	r1, [r7, #8]
 800cc6e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	3b04      	subs	r3, #4
 800cc74:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800cc7c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	3b04      	subs	r3, #4
 800cc82:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800cc84:	68bb      	ldr	r3, [r7, #8]
 800cc86:	f023 0201 	bic.w	r2, r3, #1
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	3b04      	subs	r3, #4
 800cc92:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800cc94:	4a0c      	ldr	r2, [pc, #48]	@ (800ccc8 <pxPortInitialiseStack+0x64>)
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	3b14      	subs	r3, #20
 800cc9e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800cca0:	687a      	ldr	r2, [r7, #4]
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	3b04      	subs	r3, #4
 800ccaa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	f06f 0202 	mvn.w	r2, #2
 800ccb2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	3b20      	subs	r3, #32
 800ccb8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800ccba:	68fb      	ldr	r3, [r7, #12]
}
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	3714      	adds	r7, #20
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc6:	4770      	bx	lr
 800ccc8:	0800cccd 	.word	0x0800cccd

0800cccc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b084      	sub	sp, #16
 800ccd0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800ccd6:	4b15      	ldr	r3, [pc, #84]	@ (800cd2c <prvTaskExitError+0x60>)
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ccde:	d00f      	beq.n	800cd00 <prvTaskExitError+0x34>
    __asm volatile
 800cce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cce4:	b672      	cpsid	i
 800cce6:	f383 8811 	msr	BASEPRI, r3
 800ccea:	f3bf 8f6f 	isb	sy
 800ccee:	f3bf 8f4f 	dsb	sy
 800ccf2:	b662      	cpsie	i
 800ccf4:	60fb      	str	r3, [r7, #12]
}
 800ccf6:	bf00      	nop
 800ccf8:	21ee      	movs	r1, #238	@ 0xee
 800ccfa:	480d      	ldr	r0, [pc, #52]	@ (800cd30 <prvTaskExitError+0x64>)
 800ccfc:	f7f6 ff64 	bl	8003bc8 <vAssertCalled>
    __asm volatile
 800cd00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd04:	b672      	cpsid	i
 800cd06:	f383 8811 	msr	BASEPRI, r3
 800cd0a:	f3bf 8f6f 	isb	sy
 800cd0e:	f3bf 8f4f 	dsb	sy
 800cd12:	b662      	cpsie	i
 800cd14:	60bb      	str	r3, [r7, #8]
}
 800cd16:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800cd18:	bf00      	nop
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d0fc      	beq.n	800cd1a <prvTaskExitError+0x4e>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800cd20:	bf00      	nop
 800cd22:	bf00      	nop
 800cd24:	3710      	adds	r7, #16
 800cd26:	46bd      	mov	sp, r7
 800cd28:	bd80      	pop	{r7, pc}
 800cd2a:	bf00      	nop
 800cd2c:	20000044 	.word	0x20000044
 800cd30:	08013798 	.word	0x08013798
	...

0800cd40 <SVC_Handler>:
/*-----------------------------------------------------------*/
void vPortSVCHandler( void )
{
	__asm volatile (
 800cd40:	4b07      	ldr	r3, [pc, #28]	@ (800cd60 <pxCurrentTCBConst2>)
 800cd42:	6819      	ldr	r1, [r3, #0]
 800cd44:	6808      	ldr	r0, [r1, #0]
 800cd46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd4a:	f380 8809 	msr	PSP, r0
 800cd4e:	f3bf 8f6f 	isb	sy
 800cd52:	f04f 0000 	mov.w	r0, #0
 800cd56:	f380 8811 	msr	BASEPRI, r0
 800cd5a:	4770      	bx	lr
 800cd5c:	f3af 8000 	nop.w

0800cd60 <pxCurrentTCBConst2>:
 800cd60:	20000384 	.word	0x20000384
	        "   bx r14                          \n"
	        "                                   \n"
	        "   .align 4                        \n"
	        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
	        );
}
 800cd64:	bf00      	nop
 800cd66:	bf00      	nop

0800cd68 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 800cd68:	4808      	ldr	r0, [pc, #32]	@ (800cd8c <prvPortStartFirstTask+0x24>)
 800cd6a:	6800      	ldr	r0, [r0, #0]
 800cd6c:	6800      	ldr	r0, [r0, #0]
 800cd6e:	f380 8808 	msr	MSP, r0
 800cd72:	f04f 0000 	mov.w	r0, #0
 800cd76:	f380 8814 	msr	CONTROL, r0
 800cd7a:	b662      	cpsie	i
 800cd7c:	b661      	cpsie	f
 800cd7e:	f3bf 8f4f 	dsb	sy
 800cd82:	f3bf 8f6f 	isb	sy
 800cd86:	df00      	svc	0
 800cd88:	bf00      	nop
 800cd8a:	0000      	.short	0x0000
 800cd8c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 800cd90:	bf00      	nop
 800cd92:	bf00      	nop

0800cd94 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b08a      	sub	sp, #40	@ 0x28
 800cd98:	af00      	add	r7, sp, #0
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 800cd9a:	4b62      	ldr	r3, [pc, #392]	@ (800cf24 <xPortStartScheduler+0x190>)
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	627b      	str	r3, [r7, #36]	@ 0x24
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 800cda0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cda2:	332c      	adds	r3, #44	@ 0x2c
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	4a60      	ldr	r2, [pc, #384]	@ (800cf28 <xPortStartScheduler+0x194>)
 800cda8:	4293      	cmp	r3, r2
 800cdaa:	d010      	beq.n	800cdce <xPortStartScheduler+0x3a>
    __asm volatile
 800cdac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdb0:	b672      	cpsid	i
 800cdb2:	f383 8811 	msr	BASEPRI, r3
 800cdb6:	f3bf 8f6f 	isb	sy
 800cdba:	f3bf 8f4f 	dsb	sy
 800cdbe:	b662      	cpsie	i
 800cdc0:	61bb      	str	r3, [r7, #24]
}
 800cdc2:	bf00      	nop
 800cdc4:	f240 114b 	movw	r1, #331	@ 0x14b
 800cdc8:	4858      	ldr	r0, [pc, #352]	@ (800cf2c <xPortStartScheduler+0x198>)
 800cdca:	f7f6 fefd 	bl	8003bc8 <vAssertCalled>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 800cdce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdd0:	3338      	adds	r3, #56	@ 0x38
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	4a56      	ldr	r2, [pc, #344]	@ (800cf30 <xPortStartScheduler+0x19c>)
 800cdd6:	4293      	cmp	r3, r2
 800cdd8:	d010      	beq.n	800cdfc <xPortStartScheduler+0x68>
    __asm volatile
 800cdda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdde:	b672      	cpsid	i
 800cde0:	f383 8811 	msr	BASEPRI, r3
 800cde4:	f3bf 8f6f 	isb	sy
 800cde8:	f3bf 8f4f 	dsb	sy
 800cdec:	b662      	cpsie	i
 800cdee:	61fb      	str	r3, [r7, #28]
}
 800cdf0:	bf00      	nop
 800cdf2:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 800cdf6:	484d      	ldr	r0, [pc, #308]	@ (800cf2c <xPortStartScheduler+0x198>)
 800cdf8:	f7f6 fee6 	bl	8003bc8 <vAssertCalled>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ce00:	4b4c      	ldr	r3, [pc, #304]	@ (800cf34 <xPortStartScheduler+0x1a0>)
 800ce02:	623b      	str	r3, [r7, #32]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 800ce04:	6a3b      	ldr	r3, [r7, #32]
 800ce06:	781b      	ldrb	r3, [r3, #0]
 800ce08:	b2db      	uxtb	r3, r3
 800ce0a:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ce0c:	6a3b      	ldr	r3, [r7, #32]
 800ce0e:	22ff      	movs	r2, #255	@ 0xff
 800ce10:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ce12:	6a3b      	ldr	r3, [r7, #32]
 800ce14:	781b      	ldrb	r3, [r3, #0]
 800ce16:	b2db      	uxtb	r3, r3
 800ce18:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ce1a:	79fb      	ldrb	r3, [r7, #7]
 800ce1c:	b2db      	uxtb	r3, r3
 800ce1e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ce22:	b2da      	uxtb	r2, r3
 800ce24:	4b44      	ldr	r3, [pc, #272]	@ (800cf38 <xPortStartScheduler+0x1a4>)
 800ce26:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 800ce28:	4b43      	ldr	r3, [pc, #268]	@ (800cf38 <xPortStartScheduler+0x1a4>)
 800ce2a:	781b      	ldrb	r3, [r3, #0]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d110      	bne.n	800ce52 <xPortStartScheduler+0xbe>
    __asm volatile
 800ce30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce34:	b672      	cpsid	i
 800ce36:	f383 8811 	msr	BASEPRI, r3
 800ce3a:	f3bf 8f6f 	isb	sy
 800ce3e:	f3bf 8f4f 	dsb	sy
 800ce42:	b662      	cpsie	i
 800ce44:	617b      	str	r3, [r7, #20]
}
 800ce46:	bf00      	nop
 800ce48:	f240 116f 	movw	r1, #367	@ 0x16f
 800ce4c:	4837      	ldr	r0, [pc, #220]	@ (800cf2c <xPortStartScheduler+0x198>)
 800ce4e:	f7f6 febb 	bl	8003bc8 <vAssertCalled>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 800ce52:	79fb      	ldrb	r3, [r7, #7]
 800ce54:	b2db      	uxtb	r3, r3
 800ce56:	43db      	mvns	r3, r3
 800ce58:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d019      	beq.n	800ce94 <xPortStartScheduler+0x100>
    __asm volatile
 800ce60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce64:	b672      	cpsid	i
 800ce66:	f383 8811 	msr	BASEPRI, r3
 800ce6a:	f3bf 8f6f 	isb	sy
 800ce6e:	f3bf 8f4f 	dsb	sy
 800ce72:	b662      	cpsie	i
 800ce74:	613b      	str	r3, [r7, #16]
}
 800ce76:	bf00      	nop
 800ce78:	f240 1173 	movw	r1, #371	@ 0x173
 800ce7c:	482b      	ldr	r0, [pc, #172]	@ (800cf2c <xPortStartScheduler+0x198>)
 800ce7e:	f7f6 fea3 	bl	8003bc8 <vAssertCalled>

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ce82:	e007      	b.n	800ce94 <xPortStartScheduler+0x100>
        {
            ulImplementedPrioBits++;
 800ce84:	68bb      	ldr	r3, [r7, #8]
 800ce86:	3301      	adds	r3, #1
 800ce88:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ce8a:	79fb      	ldrb	r3, [r7, #7]
 800ce8c:	b2db      	uxtb	r3, r3
 800ce8e:	005b      	lsls	r3, r3, #1
 800ce90:	b2db      	uxtb	r3, r3
 800ce92:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ce94:	79fb      	ldrb	r3, [r7, #7]
 800ce96:	b2db      	uxtb	r3, r3
 800ce98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ce9c:	2b80      	cmp	r3, #128	@ 0x80
 800ce9e:	d0f1      	beq.n	800ce84 <xPortStartScheduler+0xf0>
        }

        if( ulImplementedPrioBits == 8 )
 800cea0:	68bb      	ldr	r3, [r7, #8]
 800cea2:	2b08      	cmp	r3, #8
 800cea4:	d103      	bne.n	800ceae <xPortStartScheduler+0x11a>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 800cea6:	4b25      	ldr	r3, [pc, #148]	@ (800cf3c <xPortStartScheduler+0x1a8>)
 800cea8:	2200      	movs	r2, #0
 800ceaa:	601a      	str	r2, [r3, #0]
 800ceac:	e004      	b.n	800ceb8 <xPortStartScheduler+0x124>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 800ceae:	68bb      	ldr	r3, [r7, #8]
 800ceb0:	f1c3 0307 	rsb	r3, r3, #7
 800ceb4:	4a21      	ldr	r2, [pc, #132]	@ (800cf3c <xPortStartScheduler+0x1a8>)
 800ceb6:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ceb8:	4b20      	ldr	r3, [pc, #128]	@ (800cf3c <xPortStartScheduler+0x1a8>)
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	021b      	lsls	r3, r3, #8
 800cebe:	4a1f      	ldr	r2, [pc, #124]	@ (800cf3c <xPortStartScheduler+0x1a8>)
 800cec0:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cec2:	4b1e      	ldr	r3, [pc, #120]	@ (800cf3c <xPortStartScheduler+0x1a8>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ceca:	4a1c      	ldr	r2, [pc, #112]	@ (800cf3c <xPortStartScheduler+0x1a8>)
 800cecc:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 800cece:	7bfb      	ldrb	r3, [r7, #15]
 800ced0:	b2da      	uxtb	r2, r3
 800ced2:	6a3b      	ldr	r3, [r7, #32]
 800ced4:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800ced6:	4b1a      	ldr	r3, [pc, #104]	@ (800cf40 <xPortStartScheduler+0x1ac>)
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	4a19      	ldr	r2, [pc, #100]	@ (800cf40 <xPortStartScheduler+0x1ac>)
 800cedc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cee0:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800cee2:	4b17      	ldr	r3, [pc, #92]	@ (800cf40 <xPortStartScheduler+0x1ac>)
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	4a16      	ldr	r2, [pc, #88]	@ (800cf40 <xPortStartScheduler+0x1ac>)
 800cee8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ceec:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 800ceee:	4b15      	ldr	r3, [pc, #84]	@ (800cf44 <xPortStartScheduler+0x1b0>)
 800cef0:	2200      	movs	r2, #0
 800cef2:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800cef4:	f000 f8ec 	bl	800d0d0 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800cef8:	4b13      	ldr	r3, [pc, #76]	@ (800cf48 <xPortStartScheduler+0x1b4>)
 800cefa:	2200      	movs	r2, #0
 800cefc:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800cefe:	f000 f90b 	bl	800d118 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cf02:	4b12      	ldr	r3, [pc, #72]	@ (800cf4c <xPortStartScheduler+0x1b8>)
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	4a11      	ldr	r2, [pc, #68]	@ (800cf4c <xPortStartScheduler+0x1b8>)
 800cf08:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800cf0c:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800cf0e:	f7ff ff2b 	bl	800cd68 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800cf12:	f7fe fcfb 	bl	800b90c <vTaskSwitchContext>
    prvTaskExitError();
 800cf16:	f7ff fed9 	bl	800cccc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800cf1a:	2300      	movs	r3, #0
}
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	3728      	adds	r7, #40	@ 0x28
 800cf20:	46bd      	mov	sp, r7
 800cf22:	bd80      	pop	{r7, pc}
 800cf24:	e000ed08 	.word	0xe000ed08
 800cf28:	0800cd41 	.word	0x0800cd41
 800cf2c:	08013798 	.word	0x08013798
 800cf30:	0800d021 	.word	0x0800d021
 800cf34:	e000e400 	.word	0xe000e400
 800cf38:	200004f4 	.word	0x200004f4
 800cf3c:	200004f8 	.word	0x200004f8
 800cf40:	e000ed20 	.word	0xe000ed20
 800cf44:	e000ed1c 	.word	0xe000ed1c
 800cf48:	20000044 	.word	0x20000044
 800cf4c:	e000ef34 	.word	0xe000ef34

0800cf50 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b082      	sub	sp, #8
 800cf54:	af00      	add	r7, sp, #0
    __asm volatile
 800cf56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf5a:	b672      	cpsid	i
 800cf5c:	f383 8811 	msr	BASEPRI, r3
 800cf60:	f3bf 8f6f 	isb	sy
 800cf64:	f3bf 8f4f 	dsb	sy
 800cf68:	b662      	cpsie	i
 800cf6a:	607b      	str	r3, [r7, #4]
}
 800cf6c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800cf6e:	4b11      	ldr	r3, [pc, #68]	@ (800cfb4 <vPortEnterCritical+0x64>)
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	3301      	adds	r3, #1
 800cf74:	4a0f      	ldr	r2, [pc, #60]	@ (800cfb4 <vPortEnterCritical+0x64>)
 800cf76:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800cf78:	4b0e      	ldr	r3, [pc, #56]	@ (800cfb4 <vPortEnterCritical+0x64>)
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	2b01      	cmp	r3, #1
 800cf7e:	d115      	bne.n	800cfac <vPortEnterCritical+0x5c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cf80:	4b0d      	ldr	r3, [pc, #52]	@ (800cfb8 <vPortEnterCritical+0x68>)
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	b2db      	uxtb	r3, r3
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d010      	beq.n	800cfac <vPortEnterCritical+0x5c>
    __asm volatile
 800cf8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf8e:	b672      	cpsid	i
 800cf90:	f383 8811 	msr	BASEPRI, r3
 800cf94:	f3bf 8f6f 	isb	sy
 800cf98:	f3bf 8f4f 	dsb	sy
 800cf9c:	b662      	cpsie	i
 800cf9e:	603b      	str	r3, [r7, #0]
}
 800cfa0:	bf00      	nop
 800cfa2:	f44f 71ee 	mov.w	r1, #476	@ 0x1dc
 800cfa6:	4805      	ldr	r0, [pc, #20]	@ (800cfbc <vPortEnterCritical+0x6c>)
 800cfa8:	f7f6 fe0e 	bl	8003bc8 <vAssertCalled>
    }
}
 800cfac:	bf00      	nop
 800cfae:	3708      	adds	r7, #8
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	bd80      	pop	{r7, pc}
 800cfb4:	20000044 	.word	0x20000044
 800cfb8:	e000ed04 	.word	0xe000ed04
 800cfbc:	08013798 	.word	0x08013798

0800cfc0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b082      	sub	sp, #8
 800cfc4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800cfc6:	4b14      	ldr	r3, [pc, #80]	@ (800d018 <vPortExitCritical+0x58>)
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d110      	bne.n	800cff0 <vPortExitCritical+0x30>
    __asm volatile
 800cfce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfd2:	b672      	cpsid	i
 800cfd4:	f383 8811 	msr	BASEPRI, r3
 800cfd8:	f3bf 8f6f 	isb	sy
 800cfdc:	f3bf 8f4f 	dsb	sy
 800cfe0:	b662      	cpsie	i
 800cfe2:	607b      	str	r3, [r7, #4]
}
 800cfe4:	bf00      	nop
 800cfe6:	f240 11e3 	movw	r1, #483	@ 0x1e3
 800cfea:	480c      	ldr	r0, [pc, #48]	@ (800d01c <vPortExitCritical+0x5c>)
 800cfec:	f7f6 fdec 	bl	8003bc8 <vAssertCalled>
    uxCriticalNesting--;
 800cff0:	4b09      	ldr	r3, [pc, #36]	@ (800d018 <vPortExitCritical+0x58>)
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	3b01      	subs	r3, #1
 800cff6:	4a08      	ldr	r2, [pc, #32]	@ (800d018 <vPortExitCritical+0x58>)
 800cff8:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800cffa:	4b07      	ldr	r3, [pc, #28]	@ (800d018 <vPortExitCritical+0x58>)
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d105      	bne.n	800d00e <vPortExitCritical+0x4e>
 800d002:	2300      	movs	r3, #0
 800d004:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 800d006:	683b      	ldr	r3, [r7, #0]
 800d008:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 800d00c:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800d00e:	bf00      	nop
 800d010:	3708      	adds	r7, #8
 800d012:	46bd      	mov	sp, r7
 800d014:	bd80      	pop	{r7, pc}
 800d016:	bf00      	nop
 800d018:	20000044 	.word	0x20000044
 800d01c:	08013798 	.word	0x08013798

0800d020 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 800d020:	f3ef 8009 	mrs	r0, PSP
 800d024:	f3bf 8f6f 	isb	sy
 800d028:	4b15      	ldr	r3, [pc, #84]	@ (800d080 <pxCurrentTCBConst>)
 800d02a:	681a      	ldr	r2, [r3, #0]
 800d02c:	f01e 0f10 	tst.w	lr, #16
 800d030:	bf08      	it	eq
 800d032:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d036:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d03a:	6010      	str	r0, [r2, #0]
 800d03c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d040:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800d044:	b672      	cpsid	i
 800d046:	f380 8811 	msr	BASEPRI, r0
 800d04a:	f3bf 8f4f 	dsb	sy
 800d04e:	f3bf 8f6f 	isb	sy
 800d052:	b662      	cpsie	i
 800d054:	f7fe fc5a 	bl	800b90c <vTaskSwitchContext>
 800d058:	f04f 0000 	mov.w	r0, #0
 800d05c:	f380 8811 	msr	BASEPRI, r0
 800d060:	bc09      	pop	{r0, r3}
 800d062:	6819      	ldr	r1, [r3, #0]
 800d064:	6808      	ldr	r0, [r1, #0]
 800d066:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d06a:	f01e 0f10 	tst.w	lr, #16
 800d06e:	bf08      	it	eq
 800d070:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d074:	f380 8809 	msr	PSP, r0
 800d078:	f3bf 8f6f 	isb	sy
 800d07c:	4770      	bx	lr
 800d07e:	bf00      	nop

0800d080 <pxCurrentTCBConst>:
 800d080:	20000384 	.word	0x20000384
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 800d084:	bf00      	nop
 800d086:	bf00      	nop

0800d088 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b082      	sub	sp, #8
 800d08c:	af00      	add	r7, sp, #0
    __asm volatile
 800d08e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d092:	b672      	cpsid	i
 800d094:	f383 8811 	msr	BASEPRI, r3
 800d098:	f3bf 8f6f 	isb	sy
 800d09c:	f3bf 8f4f 	dsb	sy
 800d0a0:	b662      	cpsie	i
 800d0a2:	607b      	str	r3, [r7, #4]
}
 800d0a4:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800d0a6:	f7fe fb11 	bl	800b6cc <xTaskIncrementTick>
 800d0aa:	4603      	mov	r3, r0
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d003      	beq.n	800d0b8 <xPortSysTickHandler+0x30>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d0b0:	4b06      	ldr	r3, [pc, #24]	@ (800d0cc <xPortSysTickHandler+0x44>)
 800d0b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d0b6:	601a      	str	r2, [r3, #0]
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	603b      	str	r3, [r7, #0]
    __asm volatile
 800d0bc:	683b      	ldr	r3, [r7, #0]
 800d0be:	f383 8811 	msr	BASEPRI, r3
}
 800d0c2:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 800d0c4:	bf00      	nop
 800d0c6:	3708      	adds	r7, #8
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	bd80      	pop	{r7, pc}
 800d0cc:	e000ed04 	.word	0xe000ed04

0800d0d0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800d0d0:	b480      	push	{r7}
 800d0d2:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d0d4:	4b0b      	ldr	r3, [pc, #44]	@ (800d104 <vPortSetupTimerInterrupt+0x34>)
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d0da:	4b0b      	ldr	r3, [pc, #44]	@ (800d108 <vPortSetupTimerInterrupt+0x38>)
 800d0dc:	2200      	movs	r2, #0
 800d0de:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d0e0:	4b0a      	ldr	r3, [pc, #40]	@ (800d10c <vPortSetupTimerInterrupt+0x3c>)
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	4a0a      	ldr	r2, [pc, #40]	@ (800d110 <vPortSetupTimerInterrupt+0x40>)
 800d0e6:	fba2 2303 	umull	r2, r3, r2, r3
 800d0ea:	099b      	lsrs	r3, r3, #6
 800d0ec:	4a09      	ldr	r2, [pc, #36]	@ (800d114 <vPortSetupTimerInterrupt+0x44>)
 800d0ee:	3b01      	subs	r3, #1
 800d0f0:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d0f2:	4b04      	ldr	r3, [pc, #16]	@ (800d104 <vPortSetupTimerInterrupt+0x34>)
 800d0f4:	2207      	movs	r2, #7
 800d0f6:	601a      	str	r2, [r3, #0]
}
 800d0f8:	bf00      	nop
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d100:	4770      	bx	lr
 800d102:	bf00      	nop
 800d104:	e000e010 	.word	0xe000e010
 800d108:	e000e018 	.word	0xe000e018
 800d10c:	20000038 	.word	0x20000038
 800d110:	10624dd3 	.word	0x10624dd3
 800d114:	e000e014 	.word	0xe000e014

0800d118 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 800d118:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800d128 <vPortEnableVFP+0x10>
 800d11c:	6801      	ldr	r1, [r0, #0]
 800d11e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d122:	6001      	str	r1, [r0, #0]
 800d124:	4770      	bx	lr
 800d126:	0000      	.short	0x0000
 800d128:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 800d12c:	bf00      	nop
 800d12e:	bf00      	nop

0800d130 <__assert_func>:
 800d130:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d132:	4614      	mov	r4, r2
 800d134:	461a      	mov	r2, r3
 800d136:	4b09      	ldr	r3, [pc, #36]	@ (800d15c <__assert_func+0x2c>)
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	4605      	mov	r5, r0
 800d13c:	68d8      	ldr	r0, [r3, #12]
 800d13e:	b14c      	cbz	r4, 800d154 <__assert_func+0x24>
 800d140:	4b07      	ldr	r3, [pc, #28]	@ (800d160 <__assert_func+0x30>)
 800d142:	9100      	str	r1, [sp, #0]
 800d144:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d148:	4906      	ldr	r1, [pc, #24]	@ (800d164 <__assert_func+0x34>)
 800d14a:	462b      	mov	r3, r5
 800d14c:	f002 f860 	bl	800f210 <fiprintf>
 800d150:	f002 fc70 	bl	800fa34 <abort>
 800d154:	4b04      	ldr	r3, [pc, #16]	@ (800d168 <__assert_func+0x38>)
 800d156:	461c      	mov	r4, r3
 800d158:	e7f3      	b.n	800d142 <__assert_func+0x12>
 800d15a:	bf00      	nop
 800d15c:	200001c0 	.word	0x200001c0
 800d160:	08013b40 	.word	0x08013b40
 800d164:	08013b4d 	.word	0x08013b4d
 800d168:	08013b7b 	.word	0x08013b7b

0800d16c <atof>:
 800d16c:	2100      	movs	r1, #0
 800d16e:	f000 bf29 	b.w	800dfc4 <strtod>
	...

0800d174 <calloc>:
 800d174:	4b02      	ldr	r3, [pc, #8]	@ (800d180 <calloc+0xc>)
 800d176:	460a      	mov	r2, r1
 800d178:	4601      	mov	r1, r0
 800d17a:	6818      	ldr	r0, [r3, #0]
 800d17c:	f000 b802 	b.w	800d184 <_calloc_r>
 800d180:	200001c0 	.word	0x200001c0

0800d184 <_calloc_r>:
 800d184:	b570      	push	{r4, r5, r6, lr}
 800d186:	fba1 5402 	umull	r5, r4, r1, r2
 800d18a:	b934      	cbnz	r4, 800d19a <_calloc_r+0x16>
 800d18c:	4629      	mov	r1, r5
 800d18e:	f000 f887 	bl	800d2a0 <_malloc_r>
 800d192:	4606      	mov	r6, r0
 800d194:	b928      	cbnz	r0, 800d1a2 <_calloc_r+0x1e>
 800d196:	4630      	mov	r0, r6
 800d198:	bd70      	pop	{r4, r5, r6, pc}
 800d19a:	220c      	movs	r2, #12
 800d19c:	6002      	str	r2, [r0, #0]
 800d19e:	2600      	movs	r6, #0
 800d1a0:	e7f9      	b.n	800d196 <_calloc_r+0x12>
 800d1a2:	462a      	mov	r2, r5
 800d1a4:	4621      	mov	r1, r4
 800d1a6:	f002 fac1 	bl	800f72c <memset>
 800d1aa:	e7f4      	b.n	800d196 <_calloc_r+0x12>

0800d1ac <getenv>:
 800d1ac:	b507      	push	{r0, r1, r2, lr}
 800d1ae:	4b04      	ldr	r3, [pc, #16]	@ (800d1c0 <getenv+0x14>)
 800d1b0:	4601      	mov	r1, r0
 800d1b2:	aa01      	add	r2, sp, #4
 800d1b4:	6818      	ldr	r0, [r3, #0]
 800d1b6:	f000 f805 	bl	800d1c4 <_findenv_r>
 800d1ba:	b003      	add	sp, #12
 800d1bc:	f85d fb04 	ldr.w	pc, [sp], #4
 800d1c0:	200001c0 	.word	0x200001c0

0800d1c4 <_findenv_r>:
 800d1c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1c8:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 800d238 <_findenv_r+0x74>
 800d1cc:	4606      	mov	r6, r0
 800d1ce:	4689      	mov	r9, r1
 800d1d0:	4617      	mov	r7, r2
 800d1d2:	f7f7 f819 	bl	8004208 <__env_lock>
 800d1d6:	f8da 4000 	ldr.w	r4, [sl]
 800d1da:	b134      	cbz	r4, 800d1ea <_findenv_r+0x26>
 800d1dc:	464b      	mov	r3, r9
 800d1de:	4698      	mov	r8, r3
 800d1e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d1e4:	b13a      	cbz	r2, 800d1f6 <_findenv_r+0x32>
 800d1e6:	2a3d      	cmp	r2, #61	@ 0x3d
 800d1e8:	d1f9      	bne.n	800d1de <_findenv_r+0x1a>
 800d1ea:	4630      	mov	r0, r6
 800d1ec:	f7f7 f844 	bl	8004278 <__env_unlock>
 800d1f0:	2000      	movs	r0, #0
 800d1f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1f6:	eba8 0809 	sub.w	r8, r8, r9
 800d1fa:	46a3      	mov	fp, r4
 800d1fc:	f854 0b04 	ldr.w	r0, [r4], #4
 800d200:	2800      	cmp	r0, #0
 800d202:	d0f2      	beq.n	800d1ea <_findenv_r+0x26>
 800d204:	4642      	mov	r2, r8
 800d206:	4649      	mov	r1, r9
 800d208:	f002 faa5 	bl	800f756 <strncmp>
 800d20c:	2800      	cmp	r0, #0
 800d20e:	d1f4      	bne.n	800d1fa <_findenv_r+0x36>
 800d210:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800d214:	eb03 0508 	add.w	r5, r3, r8
 800d218:	f813 3008 	ldrb.w	r3, [r3, r8]
 800d21c:	2b3d      	cmp	r3, #61	@ 0x3d
 800d21e:	d1ec      	bne.n	800d1fa <_findenv_r+0x36>
 800d220:	f8da 3000 	ldr.w	r3, [sl]
 800d224:	ebab 0303 	sub.w	r3, fp, r3
 800d228:	109b      	asrs	r3, r3, #2
 800d22a:	4630      	mov	r0, r6
 800d22c:	603b      	str	r3, [r7, #0]
 800d22e:	f7f7 f823 	bl	8004278 <__env_unlock>
 800d232:	1c68      	adds	r0, r5, #1
 800d234:	e7dd      	b.n	800d1f2 <_findenv_r+0x2e>
 800d236:	bf00      	nop
 800d238:	20000030 	.word	0x20000030

0800d23c <malloc>:
 800d23c:	4b02      	ldr	r3, [pc, #8]	@ (800d248 <malloc+0xc>)
 800d23e:	4601      	mov	r1, r0
 800d240:	6818      	ldr	r0, [r3, #0]
 800d242:	f000 b82d 	b.w	800d2a0 <_malloc_r>
 800d246:	bf00      	nop
 800d248:	200001c0 	.word	0x200001c0

0800d24c <free>:
 800d24c:	4b02      	ldr	r3, [pc, #8]	@ (800d258 <free+0xc>)
 800d24e:	4601      	mov	r1, r0
 800d250:	6818      	ldr	r0, [r3, #0]
 800d252:	f003 ba51 	b.w	80106f8 <_free_r>
 800d256:	bf00      	nop
 800d258:	200001c0 	.word	0x200001c0

0800d25c <sbrk_aligned>:
 800d25c:	b570      	push	{r4, r5, r6, lr}
 800d25e:	4e0f      	ldr	r6, [pc, #60]	@ (800d29c <sbrk_aligned+0x40>)
 800d260:	460c      	mov	r4, r1
 800d262:	6831      	ldr	r1, [r6, #0]
 800d264:	4605      	mov	r5, r0
 800d266:	b911      	cbnz	r1, 800d26e <sbrk_aligned+0x12>
 800d268:	f7f6 fefc 	bl	8004064 <_sbrk_r>
 800d26c:	6030      	str	r0, [r6, #0]
 800d26e:	4621      	mov	r1, r4
 800d270:	4628      	mov	r0, r5
 800d272:	f7f6 fef7 	bl	8004064 <_sbrk_r>
 800d276:	1c43      	adds	r3, r0, #1
 800d278:	d103      	bne.n	800d282 <sbrk_aligned+0x26>
 800d27a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800d27e:	4620      	mov	r0, r4
 800d280:	bd70      	pop	{r4, r5, r6, pc}
 800d282:	1cc4      	adds	r4, r0, #3
 800d284:	f024 0403 	bic.w	r4, r4, #3
 800d288:	42a0      	cmp	r0, r4
 800d28a:	d0f8      	beq.n	800d27e <sbrk_aligned+0x22>
 800d28c:	1a21      	subs	r1, r4, r0
 800d28e:	4628      	mov	r0, r5
 800d290:	f7f6 fee8 	bl	8004064 <_sbrk_r>
 800d294:	3001      	adds	r0, #1
 800d296:	d1f2      	bne.n	800d27e <sbrk_aligned+0x22>
 800d298:	e7ef      	b.n	800d27a <sbrk_aligned+0x1e>
 800d29a:	bf00      	nop
 800d29c:	200004fc 	.word	0x200004fc

0800d2a0 <_malloc_r>:
 800d2a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d2a4:	1ccd      	adds	r5, r1, #3
 800d2a6:	f025 0503 	bic.w	r5, r5, #3
 800d2aa:	3508      	adds	r5, #8
 800d2ac:	2d0c      	cmp	r5, #12
 800d2ae:	bf38      	it	cc
 800d2b0:	250c      	movcc	r5, #12
 800d2b2:	2d00      	cmp	r5, #0
 800d2b4:	4606      	mov	r6, r0
 800d2b6:	db01      	blt.n	800d2bc <_malloc_r+0x1c>
 800d2b8:	42a9      	cmp	r1, r5
 800d2ba:	d904      	bls.n	800d2c6 <_malloc_r+0x26>
 800d2bc:	230c      	movs	r3, #12
 800d2be:	6033      	str	r3, [r6, #0]
 800d2c0:	2000      	movs	r0, #0
 800d2c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d39c <_malloc_r+0xfc>
 800d2ca:	f7f6 ff4f 	bl	800416c <__malloc_lock>
 800d2ce:	f8d8 3000 	ldr.w	r3, [r8]
 800d2d2:	461c      	mov	r4, r3
 800d2d4:	bb44      	cbnz	r4, 800d328 <_malloc_r+0x88>
 800d2d6:	4629      	mov	r1, r5
 800d2d8:	4630      	mov	r0, r6
 800d2da:	f7ff ffbf 	bl	800d25c <sbrk_aligned>
 800d2de:	1c43      	adds	r3, r0, #1
 800d2e0:	4604      	mov	r4, r0
 800d2e2:	d158      	bne.n	800d396 <_malloc_r+0xf6>
 800d2e4:	f8d8 4000 	ldr.w	r4, [r8]
 800d2e8:	4627      	mov	r7, r4
 800d2ea:	2f00      	cmp	r7, #0
 800d2ec:	d143      	bne.n	800d376 <_malloc_r+0xd6>
 800d2ee:	2c00      	cmp	r4, #0
 800d2f0:	d04b      	beq.n	800d38a <_malloc_r+0xea>
 800d2f2:	6823      	ldr	r3, [r4, #0]
 800d2f4:	4639      	mov	r1, r7
 800d2f6:	4630      	mov	r0, r6
 800d2f8:	eb04 0903 	add.w	r9, r4, r3
 800d2fc:	f7f6 feb2 	bl	8004064 <_sbrk_r>
 800d300:	4581      	cmp	r9, r0
 800d302:	d142      	bne.n	800d38a <_malloc_r+0xea>
 800d304:	6821      	ldr	r1, [r4, #0]
 800d306:	1a6d      	subs	r5, r5, r1
 800d308:	4629      	mov	r1, r5
 800d30a:	4630      	mov	r0, r6
 800d30c:	f7ff ffa6 	bl	800d25c <sbrk_aligned>
 800d310:	3001      	adds	r0, #1
 800d312:	d03a      	beq.n	800d38a <_malloc_r+0xea>
 800d314:	6823      	ldr	r3, [r4, #0]
 800d316:	442b      	add	r3, r5
 800d318:	6023      	str	r3, [r4, #0]
 800d31a:	f8d8 3000 	ldr.w	r3, [r8]
 800d31e:	685a      	ldr	r2, [r3, #4]
 800d320:	bb62      	cbnz	r2, 800d37c <_malloc_r+0xdc>
 800d322:	f8c8 7000 	str.w	r7, [r8]
 800d326:	e00f      	b.n	800d348 <_malloc_r+0xa8>
 800d328:	6822      	ldr	r2, [r4, #0]
 800d32a:	1b52      	subs	r2, r2, r5
 800d32c:	d420      	bmi.n	800d370 <_malloc_r+0xd0>
 800d32e:	2a0b      	cmp	r2, #11
 800d330:	d917      	bls.n	800d362 <_malloc_r+0xc2>
 800d332:	1961      	adds	r1, r4, r5
 800d334:	42a3      	cmp	r3, r4
 800d336:	6025      	str	r5, [r4, #0]
 800d338:	bf18      	it	ne
 800d33a:	6059      	strne	r1, [r3, #4]
 800d33c:	6863      	ldr	r3, [r4, #4]
 800d33e:	bf08      	it	eq
 800d340:	f8c8 1000 	streq.w	r1, [r8]
 800d344:	5162      	str	r2, [r4, r5]
 800d346:	604b      	str	r3, [r1, #4]
 800d348:	4630      	mov	r0, r6
 800d34a:	f7f6 ff49 	bl	80041e0 <__malloc_unlock>
 800d34e:	f104 000b 	add.w	r0, r4, #11
 800d352:	1d23      	adds	r3, r4, #4
 800d354:	f020 0007 	bic.w	r0, r0, #7
 800d358:	1ac2      	subs	r2, r0, r3
 800d35a:	bf1c      	itt	ne
 800d35c:	1a1b      	subne	r3, r3, r0
 800d35e:	50a3      	strne	r3, [r4, r2]
 800d360:	e7af      	b.n	800d2c2 <_malloc_r+0x22>
 800d362:	6862      	ldr	r2, [r4, #4]
 800d364:	42a3      	cmp	r3, r4
 800d366:	bf0c      	ite	eq
 800d368:	f8c8 2000 	streq.w	r2, [r8]
 800d36c:	605a      	strne	r2, [r3, #4]
 800d36e:	e7eb      	b.n	800d348 <_malloc_r+0xa8>
 800d370:	4623      	mov	r3, r4
 800d372:	6864      	ldr	r4, [r4, #4]
 800d374:	e7ae      	b.n	800d2d4 <_malloc_r+0x34>
 800d376:	463c      	mov	r4, r7
 800d378:	687f      	ldr	r7, [r7, #4]
 800d37a:	e7b6      	b.n	800d2ea <_malloc_r+0x4a>
 800d37c:	461a      	mov	r2, r3
 800d37e:	685b      	ldr	r3, [r3, #4]
 800d380:	42a3      	cmp	r3, r4
 800d382:	d1fb      	bne.n	800d37c <_malloc_r+0xdc>
 800d384:	2300      	movs	r3, #0
 800d386:	6053      	str	r3, [r2, #4]
 800d388:	e7de      	b.n	800d348 <_malloc_r+0xa8>
 800d38a:	230c      	movs	r3, #12
 800d38c:	6033      	str	r3, [r6, #0]
 800d38e:	4630      	mov	r0, r6
 800d390:	f7f6 ff26 	bl	80041e0 <__malloc_unlock>
 800d394:	e794      	b.n	800d2c0 <_malloc_r+0x20>
 800d396:	6005      	str	r5, [r0, #0]
 800d398:	e7d6      	b.n	800d348 <_malloc_r+0xa8>
 800d39a:	bf00      	nop
 800d39c:	20000500 	.word	0x20000500

0800d3a0 <mallinfo>:
 800d3a0:	b510      	push	{r4, lr}
 800d3a2:	4b03      	ldr	r3, [pc, #12]	@ (800d3b0 <mallinfo+0x10>)
 800d3a4:	4604      	mov	r4, r0
 800d3a6:	6819      	ldr	r1, [r3, #0]
 800d3a8:	f003 fd2a 	bl	8010e00 <_mallinfo_r>
 800d3ac:	4620      	mov	r0, r4
 800d3ae:	bd10      	pop	{r4, pc}
 800d3b0:	200001c0 	.word	0x200001c0

0800d3b4 <sulp>:
 800d3b4:	b570      	push	{r4, r5, r6, lr}
 800d3b6:	4604      	mov	r4, r0
 800d3b8:	460d      	mov	r5, r1
 800d3ba:	ec45 4b10 	vmov	d0, r4, r5
 800d3be:	4616      	mov	r6, r2
 800d3c0:	f004 f8d0 	bl	8011564 <__ulp>
 800d3c4:	ec51 0b10 	vmov	r0, r1, d0
 800d3c8:	b17e      	cbz	r6, 800d3ea <sulp+0x36>
 800d3ca:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d3ce:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	dd09      	ble.n	800d3ea <sulp+0x36>
 800d3d6:	051b      	lsls	r3, r3, #20
 800d3d8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800d3dc:	2400      	movs	r4, #0
 800d3de:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800d3e2:	4622      	mov	r2, r4
 800d3e4:	462b      	mov	r3, r5
 800d3e6:	f7f3 f937 	bl	8000658 <__aeabi_dmul>
 800d3ea:	ec41 0b10 	vmov	d0, r0, r1
 800d3ee:	bd70      	pop	{r4, r5, r6, pc}

0800d3f0 <_strtod_l>:
 800d3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3f4:	b09f      	sub	sp, #124	@ 0x7c
 800d3f6:	460c      	mov	r4, r1
 800d3f8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	921a      	str	r2, [sp, #104]	@ 0x68
 800d3fe:	9005      	str	r0, [sp, #20]
 800d400:	f04f 0a00 	mov.w	sl, #0
 800d404:	f04f 0b00 	mov.w	fp, #0
 800d408:	460a      	mov	r2, r1
 800d40a:	9219      	str	r2, [sp, #100]	@ 0x64
 800d40c:	7811      	ldrb	r1, [r2, #0]
 800d40e:	292b      	cmp	r1, #43	@ 0x2b
 800d410:	d04a      	beq.n	800d4a8 <_strtod_l+0xb8>
 800d412:	d838      	bhi.n	800d486 <_strtod_l+0x96>
 800d414:	290d      	cmp	r1, #13
 800d416:	d832      	bhi.n	800d47e <_strtod_l+0x8e>
 800d418:	2908      	cmp	r1, #8
 800d41a:	d832      	bhi.n	800d482 <_strtod_l+0x92>
 800d41c:	2900      	cmp	r1, #0
 800d41e:	d03b      	beq.n	800d498 <_strtod_l+0xa8>
 800d420:	2200      	movs	r2, #0
 800d422:	920e      	str	r2, [sp, #56]	@ 0x38
 800d424:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800d426:	782a      	ldrb	r2, [r5, #0]
 800d428:	2a30      	cmp	r2, #48	@ 0x30
 800d42a:	f040 80b2 	bne.w	800d592 <_strtod_l+0x1a2>
 800d42e:	786a      	ldrb	r2, [r5, #1]
 800d430:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d434:	2a58      	cmp	r2, #88	@ 0x58
 800d436:	d16e      	bne.n	800d516 <_strtod_l+0x126>
 800d438:	9302      	str	r3, [sp, #8]
 800d43a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d43c:	9301      	str	r3, [sp, #4]
 800d43e:	ab1a      	add	r3, sp, #104	@ 0x68
 800d440:	9300      	str	r3, [sp, #0]
 800d442:	4a8f      	ldr	r2, [pc, #572]	@ (800d680 <_strtod_l+0x290>)
 800d444:	9805      	ldr	r0, [sp, #20]
 800d446:	ab1b      	add	r3, sp, #108	@ 0x6c
 800d448:	a919      	add	r1, sp, #100	@ 0x64
 800d44a:	f003 fa07 	bl	801085c <__gethex>
 800d44e:	f010 060f 	ands.w	r6, r0, #15
 800d452:	4604      	mov	r4, r0
 800d454:	d005      	beq.n	800d462 <_strtod_l+0x72>
 800d456:	2e06      	cmp	r6, #6
 800d458:	d128      	bne.n	800d4ac <_strtod_l+0xbc>
 800d45a:	3501      	adds	r5, #1
 800d45c:	2300      	movs	r3, #0
 800d45e:	9519      	str	r5, [sp, #100]	@ 0x64
 800d460:	930e      	str	r3, [sp, #56]	@ 0x38
 800d462:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d464:	2b00      	cmp	r3, #0
 800d466:	f040 858e 	bne.w	800df86 <_strtod_l+0xb96>
 800d46a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d46c:	b1cb      	cbz	r3, 800d4a2 <_strtod_l+0xb2>
 800d46e:	4652      	mov	r2, sl
 800d470:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800d474:	ec43 2b10 	vmov	d0, r2, r3
 800d478:	b01f      	add	sp, #124	@ 0x7c
 800d47a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d47e:	2920      	cmp	r1, #32
 800d480:	d1ce      	bne.n	800d420 <_strtod_l+0x30>
 800d482:	3201      	adds	r2, #1
 800d484:	e7c1      	b.n	800d40a <_strtod_l+0x1a>
 800d486:	292d      	cmp	r1, #45	@ 0x2d
 800d488:	d1ca      	bne.n	800d420 <_strtod_l+0x30>
 800d48a:	2101      	movs	r1, #1
 800d48c:	910e      	str	r1, [sp, #56]	@ 0x38
 800d48e:	1c51      	adds	r1, r2, #1
 800d490:	9119      	str	r1, [sp, #100]	@ 0x64
 800d492:	7852      	ldrb	r2, [r2, #1]
 800d494:	2a00      	cmp	r2, #0
 800d496:	d1c5      	bne.n	800d424 <_strtod_l+0x34>
 800d498:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d49a:	9419      	str	r4, [sp, #100]	@ 0x64
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	f040 8570 	bne.w	800df82 <_strtod_l+0xb92>
 800d4a2:	4652      	mov	r2, sl
 800d4a4:	465b      	mov	r3, fp
 800d4a6:	e7e5      	b.n	800d474 <_strtod_l+0x84>
 800d4a8:	2100      	movs	r1, #0
 800d4aa:	e7ef      	b.n	800d48c <_strtod_l+0x9c>
 800d4ac:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d4ae:	b13a      	cbz	r2, 800d4c0 <_strtod_l+0xd0>
 800d4b0:	2135      	movs	r1, #53	@ 0x35
 800d4b2:	a81c      	add	r0, sp, #112	@ 0x70
 800d4b4:	f004 f950 	bl	8011758 <__copybits>
 800d4b8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d4ba:	9805      	ldr	r0, [sp, #20]
 800d4bc:	f003 fd26 	bl	8010f0c <_Bfree>
 800d4c0:	3e01      	subs	r6, #1
 800d4c2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800d4c4:	2e04      	cmp	r6, #4
 800d4c6:	d806      	bhi.n	800d4d6 <_strtod_l+0xe6>
 800d4c8:	e8df f006 	tbb	[pc, r6]
 800d4cc:	201d0314 	.word	0x201d0314
 800d4d0:	14          	.byte	0x14
 800d4d1:	00          	.byte	0x00
 800d4d2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800d4d6:	05e1      	lsls	r1, r4, #23
 800d4d8:	bf48      	it	mi
 800d4da:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d4de:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d4e2:	0d1b      	lsrs	r3, r3, #20
 800d4e4:	051b      	lsls	r3, r3, #20
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d1bb      	bne.n	800d462 <_strtod_l+0x72>
 800d4ea:	f002 fa57 	bl	800f99c <__errno>
 800d4ee:	2322      	movs	r3, #34	@ 0x22
 800d4f0:	6003      	str	r3, [r0, #0]
 800d4f2:	e7b6      	b.n	800d462 <_strtod_l+0x72>
 800d4f4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800d4f8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d4fc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d500:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d504:	e7e7      	b.n	800d4d6 <_strtod_l+0xe6>
 800d506:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800d688 <_strtod_l+0x298>
 800d50a:	e7e4      	b.n	800d4d6 <_strtod_l+0xe6>
 800d50c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d510:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800d514:	e7df      	b.n	800d4d6 <_strtod_l+0xe6>
 800d516:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d518:	1c5a      	adds	r2, r3, #1
 800d51a:	9219      	str	r2, [sp, #100]	@ 0x64
 800d51c:	785b      	ldrb	r3, [r3, #1]
 800d51e:	2b30      	cmp	r3, #48	@ 0x30
 800d520:	d0f9      	beq.n	800d516 <_strtod_l+0x126>
 800d522:	2b00      	cmp	r3, #0
 800d524:	d09d      	beq.n	800d462 <_strtod_l+0x72>
 800d526:	2301      	movs	r3, #1
 800d528:	2700      	movs	r7, #0
 800d52a:	9308      	str	r3, [sp, #32]
 800d52c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d52e:	930c      	str	r3, [sp, #48]	@ 0x30
 800d530:	970b      	str	r7, [sp, #44]	@ 0x2c
 800d532:	46b9      	mov	r9, r7
 800d534:	220a      	movs	r2, #10
 800d536:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800d538:	7805      	ldrb	r5, [r0, #0]
 800d53a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800d53e:	b2d9      	uxtb	r1, r3
 800d540:	2909      	cmp	r1, #9
 800d542:	d928      	bls.n	800d596 <_strtod_l+0x1a6>
 800d544:	494f      	ldr	r1, [pc, #316]	@ (800d684 <_strtod_l+0x294>)
 800d546:	2201      	movs	r2, #1
 800d548:	f002 f905 	bl	800f756 <strncmp>
 800d54c:	2800      	cmp	r0, #0
 800d54e:	d032      	beq.n	800d5b6 <_strtod_l+0x1c6>
 800d550:	2000      	movs	r0, #0
 800d552:	462a      	mov	r2, r5
 800d554:	900a      	str	r0, [sp, #40]	@ 0x28
 800d556:	464d      	mov	r5, r9
 800d558:	4603      	mov	r3, r0
 800d55a:	2a65      	cmp	r2, #101	@ 0x65
 800d55c:	d001      	beq.n	800d562 <_strtod_l+0x172>
 800d55e:	2a45      	cmp	r2, #69	@ 0x45
 800d560:	d114      	bne.n	800d58c <_strtod_l+0x19c>
 800d562:	b91d      	cbnz	r5, 800d56c <_strtod_l+0x17c>
 800d564:	9a08      	ldr	r2, [sp, #32]
 800d566:	4302      	orrs	r2, r0
 800d568:	d096      	beq.n	800d498 <_strtod_l+0xa8>
 800d56a:	2500      	movs	r5, #0
 800d56c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800d56e:	1c62      	adds	r2, r4, #1
 800d570:	9219      	str	r2, [sp, #100]	@ 0x64
 800d572:	7862      	ldrb	r2, [r4, #1]
 800d574:	2a2b      	cmp	r2, #43	@ 0x2b
 800d576:	d07a      	beq.n	800d66e <_strtod_l+0x27e>
 800d578:	2a2d      	cmp	r2, #45	@ 0x2d
 800d57a:	d07e      	beq.n	800d67a <_strtod_l+0x28a>
 800d57c:	f04f 0c00 	mov.w	ip, #0
 800d580:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d584:	2909      	cmp	r1, #9
 800d586:	f240 8085 	bls.w	800d694 <_strtod_l+0x2a4>
 800d58a:	9419      	str	r4, [sp, #100]	@ 0x64
 800d58c:	f04f 0800 	mov.w	r8, #0
 800d590:	e0a5      	b.n	800d6de <_strtod_l+0x2ee>
 800d592:	2300      	movs	r3, #0
 800d594:	e7c8      	b.n	800d528 <_strtod_l+0x138>
 800d596:	f1b9 0f08 	cmp.w	r9, #8
 800d59a:	bfd8      	it	le
 800d59c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800d59e:	f100 0001 	add.w	r0, r0, #1
 800d5a2:	bfda      	itte	le
 800d5a4:	fb02 3301 	mlale	r3, r2, r1, r3
 800d5a8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800d5aa:	fb02 3707 	mlagt	r7, r2, r7, r3
 800d5ae:	f109 0901 	add.w	r9, r9, #1
 800d5b2:	9019      	str	r0, [sp, #100]	@ 0x64
 800d5b4:	e7bf      	b.n	800d536 <_strtod_l+0x146>
 800d5b6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d5b8:	1c5a      	adds	r2, r3, #1
 800d5ba:	9219      	str	r2, [sp, #100]	@ 0x64
 800d5bc:	785a      	ldrb	r2, [r3, #1]
 800d5be:	f1b9 0f00 	cmp.w	r9, #0
 800d5c2:	d03b      	beq.n	800d63c <_strtod_l+0x24c>
 800d5c4:	900a      	str	r0, [sp, #40]	@ 0x28
 800d5c6:	464d      	mov	r5, r9
 800d5c8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800d5cc:	2b09      	cmp	r3, #9
 800d5ce:	d912      	bls.n	800d5f6 <_strtod_l+0x206>
 800d5d0:	2301      	movs	r3, #1
 800d5d2:	e7c2      	b.n	800d55a <_strtod_l+0x16a>
 800d5d4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d5d6:	1c5a      	adds	r2, r3, #1
 800d5d8:	9219      	str	r2, [sp, #100]	@ 0x64
 800d5da:	785a      	ldrb	r2, [r3, #1]
 800d5dc:	3001      	adds	r0, #1
 800d5de:	2a30      	cmp	r2, #48	@ 0x30
 800d5e0:	d0f8      	beq.n	800d5d4 <_strtod_l+0x1e4>
 800d5e2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800d5e6:	2b08      	cmp	r3, #8
 800d5e8:	f200 84d2 	bhi.w	800df90 <_strtod_l+0xba0>
 800d5ec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d5ee:	900a      	str	r0, [sp, #40]	@ 0x28
 800d5f0:	2000      	movs	r0, #0
 800d5f2:	930c      	str	r3, [sp, #48]	@ 0x30
 800d5f4:	4605      	mov	r5, r0
 800d5f6:	3a30      	subs	r2, #48	@ 0x30
 800d5f8:	f100 0301 	add.w	r3, r0, #1
 800d5fc:	d018      	beq.n	800d630 <_strtod_l+0x240>
 800d5fe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d600:	4419      	add	r1, r3
 800d602:	910a      	str	r1, [sp, #40]	@ 0x28
 800d604:	462e      	mov	r6, r5
 800d606:	f04f 0e0a 	mov.w	lr, #10
 800d60a:	1c71      	adds	r1, r6, #1
 800d60c:	eba1 0c05 	sub.w	ip, r1, r5
 800d610:	4563      	cmp	r3, ip
 800d612:	dc15      	bgt.n	800d640 <_strtod_l+0x250>
 800d614:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800d618:	182b      	adds	r3, r5, r0
 800d61a:	2b08      	cmp	r3, #8
 800d61c:	f105 0501 	add.w	r5, r5, #1
 800d620:	4405      	add	r5, r0
 800d622:	dc1a      	bgt.n	800d65a <_strtod_l+0x26a>
 800d624:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d626:	230a      	movs	r3, #10
 800d628:	fb03 2301 	mla	r3, r3, r1, r2
 800d62c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d62e:	2300      	movs	r3, #0
 800d630:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d632:	1c51      	adds	r1, r2, #1
 800d634:	9119      	str	r1, [sp, #100]	@ 0x64
 800d636:	7852      	ldrb	r2, [r2, #1]
 800d638:	4618      	mov	r0, r3
 800d63a:	e7c5      	b.n	800d5c8 <_strtod_l+0x1d8>
 800d63c:	4648      	mov	r0, r9
 800d63e:	e7ce      	b.n	800d5de <_strtod_l+0x1ee>
 800d640:	2e08      	cmp	r6, #8
 800d642:	dc05      	bgt.n	800d650 <_strtod_l+0x260>
 800d644:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d646:	fb0e f606 	mul.w	r6, lr, r6
 800d64a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800d64c:	460e      	mov	r6, r1
 800d64e:	e7dc      	b.n	800d60a <_strtod_l+0x21a>
 800d650:	2910      	cmp	r1, #16
 800d652:	bfd8      	it	le
 800d654:	fb0e f707 	mulle.w	r7, lr, r7
 800d658:	e7f8      	b.n	800d64c <_strtod_l+0x25c>
 800d65a:	2b0f      	cmp	r3, #15
 800d65c:	bfdc      	itt	le
 800d65e:	230a      	movle	r3, #10
 800d660:	fb03 2707 	mlale	r7, r3, r7, r2
 800d664:	e7e3      	b.n	800d62e <_strtod_l+0x23e>
 800d666:	2300      	movs	r3, #0
 800d668:	930a      	str	r3, [sp, #40]	@ 0x28
 800d66a:	2301      	movs	r3, #1
 800d66c:	e77a      	b.n	800d564 <_strtod_l+0x174>
 800d66e:	f04f 0c00 	mov.w	ip, #0
 800d672:	1ca2      	adds	r2, r4, #2
 800d674:	9219      	str	r2, [sp, #100]	@ 0x64
 800d676:	78a2      	ldrb	r2, [r4, #2]
 800d678:	e782      	b.n	800d580 <_strtod_l+0x190>
 800d67a:	f04f 0c01 	mov.w	ip, #1
 800d67e:	e7f8      	b.n	800d672 <_strtod_l+0x282>
 800d680:	08013d84 	.word	0x08013d84
 800d684:	08013b7c 	.word	0x08013b7c
 800d688:	7ff00000 	.word	0x7ff00000
 800d68c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d68e:	1c51      	adds	r1, r2, #1
 800d690:	9119      	str	r1, [sp, #100]	@ 0x64
 800d692:	7852      	ldrb	r2, [r2, #1]
 800d694:	2a30      	cmp	r2, #48	@ 0x30
 800d696:	d0f9      	beq.n	800d68c <_strtod_l+0x29c>
 800d698:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800d69c:	2908      	cmp	r1, #8
 800d69e:	f63f af75 	bhi.w	800d58c <_strtod_l+0x19c>
 800d6a2:	3a30      	subs	r2, #48	@ 0x30
 800d6a4:	9209      	str	r2, [sp, #36]	@ 0x24
 800d6a6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d6a8:	920f      	str	r2, [sp, #60]	@ 0x3c
 800d6aa:	f04f 080a 	mov.w	r8, #10
 800d6ae:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d6b0:	1c56      	adds	r6, r2, #1
 800d6b2:	9619      	str	r6, [sp, #100]	@ 0x64
 800d6b4:	7852      	ldrb	r2, [r2, #1]
 800d6b6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800d6ba:	f1be 0f09 	cmp.w	lr, #9
 800d6be:	d939      	bls.n	800d734 <_strtod_l+0x344>
 800d6c0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d6c2:	1a76      	subs	r6, r6, r1
 800d6c4:	2e08      	cmp	r6, #8
 800d6c6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800d6ca:	dc03      	bgt.n	800d6d4 <_strtod_l+0x2e4>
 800d6cc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d6ce:	4588      	cmp	r8, r1
 800d6d0:	bfa8      	it	ge
 800d6d2:	4688      	movge	r8, r1
 800d6d4:	f1bc 0f00 	cmp.w	ip, #0
 800d6d8:	d001      	beq.n	800d6de <_strtod_l+0x2ee>
 800d6da:	f1c8 0800 	rsb	r8, r8, #0
 800d6de:	2d00      	cmp	r5, #0
 800d6e0:	d14e      	bne.n	800d780 <_strtod_l+0x390>
 800d6e2:	9908      	ldr	r1, [sp, #32]
 800d6e4:	4308      	orrs	r0, r1
 800d6e6:	f47f aebc 	bne.w	800d462 <_strtod_l+0x72>
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	f47f aed4 	bne.w	800d498 <_strtod_l+0xa8>
 800d6f0:	2a69      	cmp	r2, #105	@ 0x69
 800d6f2:	d028      	beq.n	800d746 <_strtod_l+0x356>
 800d6f4:	dc25      	bgt.n	800d742 <_strtod_l+0x352>
 800d6f6:	2a49      	cmp	r2, #73	@ 0x49
 800d6f8:	d025      	beq.n	800d746 <_strtod_l+0x356>
 800d6fa:	2a4e      	cmp	r2, #78	@ 0x4e
 800d6fc:	f47f aecc 	bne.w	800d498 <_strtod_l+0xa8>
 800d700:	499a      	ldr	r1, [pc, #616]	@ (800d96c <_strtod_l+0x57c>)
 800d702:	a819      	add	r0, sp, #100	@ 0x64
 800d704:	f003 facc 	bl	8010ca0 <__match>
 800d708:	2800      	cmp	r0, #0
 800d70a:	f43f aec5 	beq.w	800d498 <_strtod_l+0xa8>
 800d70e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d710:	781b      	ldrb	r3, [r3, #0]
 800d712:	2b28      	cmp	r3, #40	@ 0x28
 800d714:	d12e      	bne.n	800d774 <_strtod_l+0x384>
 800d716:	4996      	ldr	r1, [pc, #600]	@ (800d970 <_strtod_l+0x580>)
 800d718:	aa1c      	add	r2, sp, #112	@ 0x70
 800d71a:	a819      	add	r0, sp, #100	@ 0x64
 800d71c:	f003 fad4 	bl	8010cc8 <__hexnan>
 800d720:	2805      	cmp	r0, #5
 800d722:	d127      	bne.n	800d774 <_strtod_l+0x384>
 800d724:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d726:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800d72a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800d72e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800d732:	e696      	b.n	800d462 <_strtod_l+0x72>
 800d734:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d736:	fb08 2101 	mla	r1, r8, r1, r2
 800d73a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800d73e:	9209      	str	r2, [sp, #36]	@ 0x24
 800d740:	e7b5      	b.n	800d6ae <_strtod_l+0x2be>
 800d742:	2a6e      	cmp	r2, #110	@ 0x6e
 800d744:	e7da      	b.n	800d6fc <_strtod_l+0x30c>
 800d746:	498b      	ldr	r1, [pc, #556]	@ (800d974 <_strtod_l+0x584>)
 800d748:	a819      	add	r0, sp, #100	@ 0x64
 800d74a:	f003 faa9 	bl	8010ca0 <__match>
 800d74e:	2800      	cmp	r0, #0
 800d750:	f43f aea2 	beq.w	800d498 <_strtod_l+0xa8>
 800d754:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d756:	4988      	ldr	r1, [pc, #544]	@ (800d978 <_strtod_l+0x588>)
 800d758:	3b01      	subs	r3, #1
 800d75a:	a819      	add	r0, sp, #100	@ 0x64
 800d75c:	9319      	str	r3, [sp, #100]	@ 0x64
 800d75e:	f003 fa9f 	bl	8010ca0 <__match>
 800d762:	b910      	cbnz	r0, 800d76a <_strtod_l+0x37a>
 800d764:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d766:	3301      	adds	r3, #1
 800d768:	9319      	str	r3, [sp, #100]	@ 0x64
 800d76a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800d988 <_strtod_l+0x598>
 800d76e:	f04f 0a00 	mov.w	sl, #0
 800d772:	e676      	b.n	800d462 <_strtod_l+0x72>
 800d774:	4881      	ldr	r0, [pc, #516]	@ (800d97c <_strtod_l+0x58c>)
 800d776:	f002 f94f 	bl	800fa18 <nan>
 800d77a:	ec5b ab10 	vmov	sl, fp, d0
 800d77e:	e670      	b.n	800d462 <_strtod_l+0x72>
 800d780:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d782:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800d784:	eba8 0303 	sub.w	r3, r8, r3
 800d788:	f1b9 0f00 	cmp.w	r9, #0
 800d78c:	bf08      	it	eq
 800d78e:	46a9      	moveq	r9, r5
 800d790:	2d10      	cmp	r5, #16
 800d792:	9309      	str	r3, [sp, #36]	@ 0x24
 800d794:	462c      	mov	r4, r5
 800d796:	bfa8      	it	ge
 800d798:	2410      	movge	r4, #16
 800d79a:	f7f2 fee3 	bl	8000564 <__aeabi_ui2d>
 800d79e:	2d09      	cmp	r5, #9
 800d7a0:	4682      	mov	sl, r0
 800d7a2:	468b      	mov	fp, r1
 800d7a4:	dc13      	bgt.n	800d7ce <_strtod_l+0x3de>
 800d7a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	f43f ae5a 	beq.w	800d462 <_strtod_l+0x72>
 800d7ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7b0:	dd78      	ble.n	800d8a4 <_strtod_l+0x4b4>
 800d7b2:	2b16      	cmp	r3, #22
 800d7b4:	dc5f      	bgt.n	800d876 <_strtod_l+0x486>
 800d7b6:	4972      	ldr	r1, [pc, #456]	@ (800d980 <_strtod_l+0x590>)
 800d7b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d7bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d7c0:	4652      	mov	r2, sl
 800d7c2:	465b      	mov	r3, fp
 800d7c4:	f7f2 ff48 	bl	8000658 <__aeabi_dmul>
 800d7c8:	4682      	mov	sl, r0
 800d7ca:	468b      	mov	fp, r1
 800d7cc:	e649      	b.n	800d462 <_strtod_l+0x72>
 800d7ce:	4b6c      	ldr	r3, [pc, #432]	@ (800d980 <_strtod_l+0x590>)
 800d7d0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d7d4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800d7d8:	f7f2 ff3e 	bl	8000658 <__aeabi_dmul>
 800d7dc:	4682      	mov	sl, r0
 800d7de:	4638      	mov	r0, r7
 800d7e0:	468b      	mov	fp, r1
 800d7e2:	f7f2 febf 	bl	8000564 <__aeabi_ui2d>
 800d7e6:	4602      	mov	r2, r0
 800d7e8:	460b      	mov	r3, r1
 800d7ea:	4650      	mov	r0, sl
 800d7ec:	4659      	mov	r1, fp
 800d7ee:	f7f2 fd7d 	bl	80002ec <__adddf3>
 800d7f2:	2d0f      	cmp	r5, #15
 800d7f4:	4682      	mov	sl, r0
 800d7f6:	468b      	mov	fp, r1
 800d7f8:	ddd5      	ble.n	800d7a6 <_strtod_l+0x3b6>
 800d7fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7fc:	1b2c      	subs	r4, r5, r4
 800d7fe:	441c      	add	r4, r3
 800d800:	2c00      	cmp	r4, #0
 800d802:	f340 8093 	ble.w	800d92c <_strtod_l+0x53c>
 800d806:	f014 030f 	ands.w	r3, r4, #15
 800d80a:	d00a      	beq.n	800d822 <_strtod_l+0x432>
 800d80c:	495c      	ldr	r1, [pc, #368]	@ (800d980 <_strtod_l+0x590>)
 800d80e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d812:	4652      	mov	r2, sl
 800d814:	465b      	mov	r3, fp
 800d816:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d81a:	f7f2 ff1d 	bl	8000658 <__aeabi_dmul>
 800d81e:	4682      	mov	sl, r0
 800d820:	468b      	mov	fp, r1
 800d822:	f034 040f 	bics.w	r4, r4, #15
 800d826:	d073      	beq.n	800d910 <_strtod_l+0x520>
 800d828:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800d82c:	dd49      	ble.n	800d8c2 <_strtod_l+0x4d2>
 800d82e:	2400      	movs	r4, #0
 800d830:	46a0      	mov	r8, r4
 800d832:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d834:	46a1      	mov	r9, r4
 800d836:	9a05      	ldr	r2, [sp, #20]
 800d838:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800d988 <_strtod_l+0x598>
 800d83c:	2322      	movs	r3, #34	@ 0x22
 800d83e:	6013      	str	r3, [r2, #0]
 800d840:	f04f 0a00 	mov.w	sl, #0
 800d844:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d846:	2b00      	cmp	r3, #0
 800d848:	f43f ae0b 	beq.w	800d462 <_strtod_l+0x72>
 800d84c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d84e:	9805      	ldr	r0, [sp, #20]
 800d850:	f003 fb5c 	bl	8010f0c <_Bfree>
 800d854:	9805      	ldr	r0, [sp, #20]
 800d856:	4649      	mov	r1, r9
 800d858:	f003 fb58 	bl	8010f0c <_Bfree>
 800d85c:	9805      	ldr	r0, [sp, #20]
 800d85e:	4641      	mov	r1, r8
 800d860:	f003 fb54 	bl	8010f0c <_Bfree>
 800d864:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d866:	9805      	ldr	r0, [sp, #20]
 800d868:	f003 fb50 	bl	8010f0c <_Bfree>
 800d86c:	9805      	ldr	r0, [sp, #20]
 800d86e:	4621      	mov	r1, r4
 800d870:	f003 fb4c 	bl	8010f0c <_Bfree>
 800d874:	e5f5      	b.n	800d462 <_strtod_l+0x72>
 800d876:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d878:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800d87c:	4293      	cmp	r3, r2
 800d87e:	dbbc      	blt.n	800d7fa <_strtod_l+0x40a>
 800d880:	4c3f      	ldr	r4, [pc, #252]	@ (800d980 <_strtod_l+0x590>)
 800d882:	f1c5 050f 	rsb	r5, r5, #15
 800d886:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d88a:	4652      	mov	r2, sl
 800d88c:	465b      	mov	r3, fp
 800d88e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d892:	f7f2 fee1 	bl	8000658 <__aeabi_dmul>
 800d896:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d898:	1b5d      	subs	r5, r3, r5
 800d89a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d89e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d8a2:	e78f      	b.n	800d7c4 <_strtod_l+0x3d4>
 800d8a4:	3316      	adds	r3, #22
 800d8a6:	dba8      	blt.n	800d7fa <_strtod_l+0x40a>
 800d8a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d8aa:	eba3 0808 	sub.w	r8, r3, r8
 800d8ae:	4b34      	ldr	r3, [pc, #208]	@ (800d980 <_strtod_l+0x590>)
 800d8b0:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800d8b4:	e9d8 2300 	ldrd	r2, r3, [r8]
 800d8b8:	4650      	mov	r0, sl
 800d8ba:	4659      	mov	r1, fp
 800d8bc:	f7f2 fff6 	bl	80008ac <__aeabi_ddiv>
 800d8c0:	e782      	b.n	800d7c8 <_strtod_l+0x3d8>
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	4f2f      	ldr	r7, [pc, #188]	@ (800d984 <_strtod_l+0x594>)
 800d8c6:	1124      	asrs	r4, r4, #4
 800d8c8:	4650      	mov	r0, sl
 800d8ca:	4659      	mov	r1, fp
 800d8cc:	461e      	mov	r6, r3
 800d8ce:	2c01      	cmp	r4, #1
 800d8d0:	dc21      	bgt.n	800d916 <_strtod_l+0x526>
 800d8d2:	b10b      	cbz	r3, 800d8d8 <_strtod_l+0x4e8>
 800d8d4:	4682      	mov	sl, r0
 800d8d6:	468b      	mov	fp, r1
 800d8d8:	492a      	ldr	r1, [pc, #168]	@ (800d984 <_strtod_l+0x594>)
 800d8da:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800d8de:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800d8e2:	4652      	mov	r2, sl
 800d8e4:	465b      	mov	r3, fp
 800d8e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d8ea:	f7f2 feb5 	bl	8000658 <__aeabi_dmul>
 800d8ee:	4b26      	ldr	r3, [pc, #152]	@ (800d988 <_strtod_l+0x598>)
 800d8f0:	460a      	mov	r2, r1
 800d8f2:	400b      	ands	r3, r1
 800d8f4:	4925      	ldr	r1, [pc, #148]	@ (800d98c <_strtod_l+0x59c>)
 800d8f6:	428b      	cmp	r3, r1
 800d8f8:	4682      	mov	sl, r0
 800d8fa:	d898      	bhi.n	800d82e <_strtod_l+0x43e>
 800d8fc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800d900:	428b      	cmp	r3, r1
 800d902:	bf86      	itte	hi
 800d904:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800d990 <_strtod_l+0x5a0>
 800d908:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800d90c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800d910:	2300      	movs	r3, #0
 800d912:	9308      	str	r3, [sp, #32]
 800d914:	e076      	b.n	800da04 <_strtod_l+0x614>
 800d916:	07e2      	lsls	r2, r4, #31
 800d918:	d504      	bpl.n	800d924 <_strtod_l+0x534>
 800d91a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d91e:	f7f2 fe9b 	bl	8000658 <__aeabi_dmul>
 800d922:	2301      	movs	r3, #1
 800d924:	3601      	adds	r6, #1
 800d926:	1064      	asrs	r4, r4, #1
 800d928:	3708      	adds	r7, #8
 800d92a:	e7d0      	b.n	800d8ce <_strtod_l+0x4de>
 800d92c:	d0f0      	beq.n	800d910 <_strtod_l+0x520>
 800d92e:	4264      	negs	r4, r4
 800d930:	f014 020f 	ands.w	r2, r4, #15
 800d934:	d00a      	beq.n	800d94c <_strtod_l+0x55c>
 800d936:	4b12      	ldr	r3, [pc, #72]	@ (800d980 <_strtod_l+0x590>)
 800d938:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d93c:	4650      	mov	r0, sl
 800d93e:	4659      	mov	r1, fp
 800d940:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d944:	f7f2 ffb2 	bl	80008ac <__aeabi_ddiv>
 800d948:	4682      	mov	sl, r0
 800d94a:	468b      	mov	fp, r1
 800d94c:	1124      	asrs	r4, r4, #4
 800d94e:	d0df      	beq.n	800d910 <_strtod_l+0x520>
 800d950:	2c1f      	cmp	r4, #31
 800d952:	dd1f      	ble.n	800d994 <_strtod_l+0x5a4>
 800d954:	2400      	movs	r4, #0
 800d956:	46a0      	mov	r8, r4
 800d958:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d95a:	46a1      	mov	r9, r4
 800d95c:	9a05      	ldr	r2, [sp, #20]
 800d95e:	2322      	movs	r3, #34	@ 0x22
 800d960:	f04f 0a00 	mov.w	sl, #0
 800d964:	f04f 0b00 	mov.w	fp, #0
 800d968:	6013      	str	r3, [r2, #0]
 800d96a:	e76b      	b.n	800d844 <_strtod_l+0x454>
 800d96c:	08013b8b 	.word	0x08013b8b
 800d970:	08013d70 	.word	0x08013d70
 800d974:	08013b83 	.word	0x08013b83
 800d978:	08013c33 	.word	0x08013c33
 800d97c:	08013b7b 	.word	0x08013b7b
 800d980:	08013df8 	.word	0x08013df8
 800d984:	08013dd0 	.word	0x08013dd0
 800d988:	7ff00000 	.word	0x7ff00000
 800d98c:	7ca00000 	.word	0x7ca00000
 800d990:	7fefffff 	.word	0x7fefffff
 800d994:	f014 0310 	ands.w	r3, r4, #16
 800d998:	bf18      	it	ne
 800d99a:	236a      	movne	r3, #106	@ 0x6a
 800d99c:	4ea9      	ldr	r6, [pc, #676]	@ (800dc44 <_strtod_l+0x854>)
 800d99e:	9308      	str	r3, [sp, #32]
 800d9a0:	4650      	mov	r0, sl
 800d9a2:	4659      	mov	r1, fp
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	07e7      	lsls	r7, r4, #31
 800d9a8:	d504      	bpl.n	800d9b4 <_strtod_l+0x5c4>
 800d9aa:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d9ae:	f7f2 fe53 	bl	8000658 <__aeabi_dmul>
 800d9b2:	2301      	movs	r3, #1
 800d9b4:	1064      	asrs	r4, r4, #1
 800d9b6:	f106 0608 	add.w	r6, r6, #8
 800d9ba:	d1f4      	bne.n	800d9a6 <_strtod_l+0x5b6>
 800d9bc:	b10b      	cbz	r3, 800d9c2 <_strtod_l+0x5d2>
 800d9be:	4682      	mov	sl, r0
 800d9c0:	468b      	mov	fp, r1
 800d9c2:	9b08      	ldr	r3, [sp, #32]
 800d9c4:	b1b3      	cbz	r3, 800d9f4 <_strtod_l+0x604>
 800d9c6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d9ca:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	4659      	mov	r1, fp
 800d9d2:	dd0f      	ble.n	800d9f4 <_strtod_l+0x604>
 800d9d4:	2b1f      	cmp	r3, #31
 800d9d6:	dd56      	ble.n	800da86 <_strtod_l+0x696>
 800d9d8:	2b34      	cmp	r3, #52	@ 0x34
 800d9da:	bfde      	ittt	le
 800d9dc:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800d9e0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800d9e4:	4093      	lslle	r3, r2
 800d9e6:	f04f 0a00 	mov.w	sl, #0
 800d9ea:	bfcc      	ite	gt
 800d9ec:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d9f0:	ea03 0b01 	andle.w	fp, r3, r1
 800d9f4:	2200      	movs	r2, #0
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	4650      	mov	r0, sl
 800d9fa:	4659      	mov	r1, fp
 800d9fc:	f7f3 f894 	bl	8000b28 <__aeabi_dcmpeq>
 800da00:	2800      	cmp	r0, #0
 800da02:	d1a7      	bne.n	800d954 <_strtod_l+0x564>
 800da04:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800da06:	9300      	str	r3, [sp, #0]
 800da08:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800da0a:	9805      	ldr	r0, [sp, #20]
 800da0c:	462b      	mov	r3, r5
 800da0e:	464a      	mov	r2, r9
 800da10:	f003 fae4 	bl	8010fdc <__s2b>
 800da14:	900b      	str	r0, [sp, #44]	@ 0x2c
 800da16:	2800      	cmp	r0, #0
 800da18:	f43f af09 	beq.w	800d82e <_strtod_l+0x43e>
 800da1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800da1e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800da20:	2a00      	cmp	r2, #0
 800da22:	eba3 0308 	sub.w	r3, r3, r8
 800da26:	bfa8      	it	ge
 800da28:	2300      	movge	r3, #0
 800da2a:	9312      	str	r3, [sp, #72]	@ 0x48
 800da2c:	2400      	movs	r4, #0
 800da2e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800da32:	9316      	str	r3, [sp, #88]	@ 0x58
 800da34:	46a0      	mov	r8, r4
 800da36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800da38:	9805      	ldr	r0, [sp, #20]
 800da3a:	6859      	ldr	r1, [r3, #4]
 800da3c:	f003 fa26 	bl	8010e8c <_Balloc>
 800da40:	4681      	mov	r9, r0
 800da42:	2800      	cmp	r0, #0
 800da44:	f43f aef7 	beq.w	800d836 <_strtod_l+0x446>
 800da48:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800da4a:	691a      	ldr	r2, [r3, #16]
 800da4c:	3202      	adds	r2, #2
 800da4e:	f103 010c 	add.w	r1, r3, #12
 800da52:	0092      	lsls	r2, r2, #2
 800da54:	300c      	adds	r0, #12
 800da56:	f001 ffcf 	bl	800f9f8 <memcpy>
 800da5a:	ec4b ab10 	vmov	d0, sl, fp
 800da5e:	9805      	ldr	r0, [sp, #20]
 800da60:	aa1c      	add	r2, sp, #112	@ 0x70
 800da62:	a91b      	add	r1, sp, #108	@ 0x6c
 800da64:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800da68:	f003 fdec 	bl	8011644 <__d2b>
 800da6c:	901a      	str	r0, [sp, #104]	@ 0x68
 800da6e:	2800      	cmp	r0, #0
 800da70:	f43f aee1 	beq.w	800d836 <_strtod_l+0x446>
 800da74:	9805      	ldr	r0, [sp, #20]
 800da76:	2101      	movs	r1, #1
 800da78:	f003 fb46 	bl	8011108 <__i2b>
 800da7c:	4680      	mov	r8, r0
 800da7e:	b948      	cbnz	r0, 800da94 <_strtod_l+0x6a4>
 800da80:	f04f 0800 	mov.w	r8, #0
 800da84:	e6d7      	b.n	800d836 <_strtod_l+0x446>
 800da86:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800da8a:	fa02 f303 	lsl.w	r3, r2, r3
 800da8e:	ea03 0a0a 	and.w	sl, r3, sl
 800da92:	e7af      	b.n	800d9f4 <_strtod_l+0x604>
 800da94:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800da96:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800da98:	2d00      	cmp	r5, #0
 800da9a:	bfab      	itete	ge
 800da9c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800da9e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800daa0:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800daa2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800daa4:	bfac      	ite	ge
 800daa6:	18ef      	addge	r7, r5, r3
 800daa8:	1b5e      	sublt	r6, r3, r5
 800daaa:	9b08      	ldr	r3, [sp, #32]
 800daac:	1aed      	subs	r5, r5, r3
 800daae:	4415      	add	r5, r2
 800dab0:	4b65      	ldr	r3, [pc, #404]	@ (800dc48 <_strtod_l+0x858>)
 800dab2:	3d01      	subs	r5, #1
 800dab4:	429d      	cmp	r5, r3
 800dab6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800daba:	da50      	bge.n	800db5e <_strtod_l+0x76e>
 800dabc:	1b5b      	subs	r3, r3, r5
 800dabe:	2b1f      	cmp	r3, #31
 800dac0:	eba2 0203 	sub.w	r2, r2, r3
 800dac4:	f04f 0101 	mov.w	r1, #1
 800dac8:	dc3d      	bgt.n	800db46 <_strtod_l+0x756>
 800daca:	fa01 f303 	lsl.w	r3, r1, r3
 800dace:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dad0:	2300      	movs	r3, #0
 800dad2:	9310      	str	r3, [sp, #64]	@ 0x40
 800dad4:	18bd      	adds	r5, r7, r2
 800dad6:	9b08      	ldr	r3, [sp, #32]
 800dad8:	42af      	cmp	r7, r5
 800dada:	4416      	add	r6, r2
 800dadc:	441e      	add	r6, r3
 800dade:	463b      	mov	r3, r7
 800dae0:	bfa8      	it	ge
 800dae2:	462b      	movge	r3, r5
 800dae4:	42b3      	cmp	r3, r6
 800dae6:	bfa8      	it	ge
 800dae8:	4633      	movge	r3, r6
 800daea:	2b00      	cmp	r3, #0
 800daec:	bfc2      	ittt	gt
 800daee:	1aed      	subgt	r5, r5, r3
 800daf0:	1af6      	subgt	r6, r6, r3
 800daf2:	1aff      	subgt	r7, r7, r3
 800daf4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	dd16      	ble.n	800db28 <_strtod_l+0x738>
 800dafa:	4641      	mov	r1, r8
 800dafc:	9805      	ldr	r0, [sp, #20]
 800dafe:	461a      	mov	r2, r3
 800db00:	f003 fbba 	bl	8011278 <__pow5mult>
 800db04:	4680      	mov	r8, r0
 800db06:	2800      	cmp	r0, #0
 800db08:	d0ba      	beq.n	800da80 <_strtod_l+0x690>
 800db0a:	4601      	mov	r1, r0
 800db0c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800db0e:	9805      	ldr	r0, [sp, #20]
 800db10:	f003 fb10 	bl	8011134 <__multiply>
 800db14:	900a      	str	r0, [sp, #40]	@ 0x28
 800db16:	2800      	cmp	r0, #0
 800db18:	f43f ae8d 	beq.w	800d836 <_strtod_l+0x446>
 800db1c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800db1e:	9805      	ldr	r0, [sp, #20]
 800db20:	f003 f9f4 	bl	8010f0c <_Bfree>
 800db24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db26:	931a      	str	r3, [sp, #104]	@ 0x68
 800db28:	2d00      	cmp	r5, #0
 800db2a:	dc1d      	bgt.n	800db68 <_strtod_l+0x778>
 800db2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db2e:	2b00      	cmp	r3, #0
 800db30:	dd23      	ble.n	800db7a <_strtod_l+0x78a>
 800db32:	4649      	mov	r1, r9
 800db34:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800db36:	9805      	ldr	r0, [sp, #20]
 800db38:	f003 fb9e 	bl	8011278 <__pow5mult>
 800db3c:	4681      	mov	r9, r0
 800db3e:	b9e0      	cbnz	r0, 800db7a <_strtod_l+0x78a>
 800db40:	f04f 0900 	mov.w	r9, #0
 800db44:	e677      	b.n	800d836 <_strtod_l+0x446>
 800db46:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800db4a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800db4e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800db52:	35e2      	adds	r5, #226	@ 0xe2
 800db54:	fa01 f305 	lsl.w	r3, r1, r5
 800db58:	9310      	str	r3, [sp, #64]	@ 0x40
 800db5a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800db5c:	e7ba      	b.n	800dad4 <_strtod_l+0x6e4>
 800db5e:	2300      	movs	r3, #0
 800db60:	9310      	str	r3, [sp, #64]	@ 0x40
 800db62:	2301      	movs	r3, #1
 800db64:	9313      	str	r3, [sp, #76]	@ 0x4c
 800db66:	e7b5      	b.n	800dad4 <_strtod_l+0x6e4>
 800db68:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800db6a:	9805      	ldr	r0, [sp, #20]
 800db6c:	462a      	mov	r2, r5
 800db6e:	f003 fbdd 	bl	801132c <__lshift>
 800db72:	901a      	str	r0, [sp, #104]	@ 0x68
 800db74:	2800      	cmp	r0, #0
 800db76:	d1d9      	bne.n	800db2c <_strtod_l+0x73c>
 800db78:	e65d      	b.n	800d836 <_strtod_l+0x446>
 800db7a:	2e00      	cmp	r6, #0
 800db7c:	dd07      	ble.n	800db8e <_strtod_l+0x79e>
 800db7e:	4649      	mov	r1, r9
 800db80:	9805      	ldr	r0, [sp, #20]
 800db82:	4632      	mov	r2, r6
 800db84:	f003 fbd2 	bl	801132c <__lshift>
 800db88:	4681      	mov	r9, r0
 800db8a:	2800      	cmp	r0, #0
 800db8c:	d0d8      	beq.n	800db40 <_strtod_l+0x750>
 800db8e:	2f00      	cmp	r7, #0
 800db90:	dd08      	ble.n	800dba4 <_strtod_l+0x7b4>
 800db92:	4641      	mov	r1, r8
 800db94:	9805      	ldr	r0, [sp, #20]
 800db96:	463a      	mov	r2, r7
 800db98:	f003 fbc8 	bl	801132c <__lshift>
 800db9c:	4680      	mov	r8, r0
 800db9e:	2800      	cmp	r0, #0
 800dba0:	f43f ae49 	beq.w	800d836 <_strtod_l+0x446>
 800dba4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dba6:	9805      	ldr	r0, [sp, #20]
 800dba8:	464a      	mov	r2, r9
 800dbaa:	f003 fc47 	bl	801143c <__mdiff>
 800dbae:	4604      	mov	r4, r0
 800dbb0:	2800      	cmp	r0, #0
 800dbb2:	f43f ae40 	beq.w	800d836 <_strtod_l+0x446>
 800dbb6:	68c3      	ldr	r3, [r0, #12]
 800dbb8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dbba:	2300      	movs	r3, #0
 800dbbc:	60c3      	str	r3, [r0, #12]
 800dbbe:	4641      	mov	r1, r8
 800dbc0:	f003 fc20 	bl	8011404 <__mcmp>
 800dbc4:	2800      	cmp	r0, #0
 800dbc6:	da45      	bge.n	800dc54 <_strtod_l+0x864>
 800dbc8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dbca:	ea53 030a 	orrs.w	r3, r3, sl
 800dbce:	d16b      	bne.n	800dca8 <_strtod_l+0x8b8>
 800dbd0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d167      	bne.n	800dca8 <_strtod_l+0x8b8>
 800dbd8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dbdc:	0d1b      	lsrs	r3, r3, #20
 800dbde:	051b      	lsls	r3, r3, #20
 800dbe0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800dbe4:	d960      	bls.n	800dca8 <_strtod_l+0x8b8>
 800dbe6:	6963      	ldr	r3, [r4, #20]
 800dbe8:	b913      	cbnz	r3, 800dbf0 <_strtod_l+0x800>
 800dbea:	6923      	ldr	r3, [r4, #16]
 800dbec:	2b01      	cmp	r3, #1
 800dbee:	dd5b      	ble.n	800dca8 <_strtod_l+0x8b8>
 800dbf0:	4621      	mov	r1, r4
 800dbf2:	2201      	movs	r2, #1
 800dbf4:	9805      	ldr	r0, [sp, #20]
 800dbf6:	f003 fb99 	bl	801132c <__lshift>
 800dbfa:	4641      	mov	r1, r8
 800dbfc:	4604      	mov	r4, r0
 800dbfe:	f003 fc01 	bl	8011404 <__mcmp>
 800dc02:	2800      	cmp	r0, #0
 800dc04:	dd50      	ble.n	800dca8 <_strtod_l+0x8b8>
 800dc06:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dc0a:	9a08      	ldr	r2, [sp, #32]
 800dc0c:	0d1b      	lsrs	r3, r3, #20
 800dc0e:	051b      	lsls	r3, r3, #20
 800dc10:	2a00      	cmp	r2, #0
 800dc12:	d06a      	beq.n	800dcea <_strtod_l+0x8fa>
 800dc14:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800dc18:	d867      	bhi.n	800dcea <_strtod_l+0x8fa>
 800dc1a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800dc1e:	f67f ae9d 	bls.w	800d95c <_strtod_l+0x56c>
 800dc22:	4b0a      	ldr	r3, [pc, #40]	@ (800dc4c <_strtod_l+0x85c>)
 800dc24:	4650      	mov	r0, sl
 800dc26:	4659      	mov	r1, fp
 800dc28:	2200      	movs	r2, #0
 800dc2a:	f7f2 fd15 	bl	8000658 <__aeabi_dmul>
 800dc2e:	4b08      	ldr	r3, [pc, #32]	@ (800dc50 <_strtod_l+0x860>)
 800dc30:	400b      	ands	r3, r1
 800dc32:	4682      	mov	sl, r0
 800dc34:	468b      	mov	fp, r1
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	f47f ae08 	bne.w	800d84c <_strtod_l+0x45c>
 800dc3c:	9a05      	ldr	r2, [sp, #20]
 800dc3e:	2322      	movs	r3, #34	@ 0x22
 800dc40:	6013      	str	r3, [r2, #0]
 800dc42:	e603      	b.n	800d84c <_strtod_l+0x45c>
 800dc44:	08013d98 	.word	0x08013d98
 800dc48:	fffffc02 	.word	0xfffffc02
 800dc4c:	39500000 	.word	0x39500000
 800dc50:	7ff00000 	.word	0x7ff00000
 800dc54:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800dc58:	d165      	bne.n	800dd26 <_strtod_l+0x936>
 800dc5a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800dc5c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dc60:	b35a      	cbz	r2, 800dcba <_strtod_l+0x8ca>
 800dc62:	4a9f      	ldr	r2, [pc, #636]	@ (800dee0 <_strtod_l+0xaf0>)
 800dc64:	4293      	cmp	r3, r2
 800dc66:	d12b      	bne.n	800dcc0 <_strtod_l+0x8d0>
 800dc68:	9b08      	ldr	r3, [sp, #32]
 800dc6a:	4651      	mov	r1, sl
 800dc6c:	b303      	cbz	r3, 800dcb0 <_strtod_l+0x8c0>
 800dc6e:	4b9d      	ldr	r3, [pc, #628]	@ (800dee4 <_strtod_l+0xaf4>)
 800dc70:	465a      	mov	r2, fp
 800dc72:	4013      	ands	r3, r2
 800dc74:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800dc78:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dc7c:	d81b      	bhi.n	800dcb6 <_strtod_l+0x8c6>
 800dc7e:	0d1b      	lsrs	r3, r3, #20
 800dc80:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800dc84:	fa02 f303 	lsl.w	r3, r2, r3
 800dc88:	4299      	cmp	r1, r3
 800dc8a:	d119      	bne.n	800dcc0 <_strtod_l+0x8d0>
 800dc8c:	4b96      	ldr	r3, [pc, #600]	@ (800dee8 <_strtod_l+0xaf8>)
 800dc8e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dc90:	429a      	cmp	r2, r3
 800dc92:	d102      	bne.n	800dc9a <_strtod_l+0x8aa>
 800dc94:	3101      	adds	r1, #1
 800dc96:	f43f adce 	beq.w	800d836 <_strtod_l+0x446>
 800dc9a:	4b92      	ldr	r3, [pc, #584]	@ (800dee4 <_strtod_l+0xaf4>)
 800dc9c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dc9e:	401a      	ands	r2, r3
 800dca0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800dca4:	f04f 0a00 	mov.w	sl, #0
 800dca8:	9b08      	ldr	r3, [sp, #32]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d1b9      	bne.n	800dc22 <_strtod_l+0x832>
 800dcae:	e5cd      	b.n	800d84c <_strtod_l+0x45c>
 800dcb0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dcb4:	e7e8      	b.n	800dc88 <_strtod_l+0x898>
 800dcb6:	4613      	mov	r3, r2
 800dcb8:	e7e6      	b.n	800dc88 <_strtod_l+0x898>
 800dcba:	ea53 030a 	orrs.w	r3, r3, sl
 800dcbe:	d0a2      	beq.n	800dc06 <_strtod_l+0x816>
 800dcc0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800dcc2:	b1db      	cbz	r3, 800dcfc <_strtod_l+0x90c>
 800dcc4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dcc6:	4213      	tst	r3, r2
 800dcc8:	d0ee      	beq.n	800dca8 <_strtod_l+0x8b8>
 800dcca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dccc:	9a08      	ldr	r2, [sp, #32]
 800dcce:	4650      	mov	r0, sl
 800dcd0:	4659      	mov	r1, fp
 800dcd2:	b1bb      	cbz	r3, 800dd04 <_strtod_l+0x914>
 800dcd4:	f7ff fb6e 	bl	800d3b4 <sulp>
 800dcd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dcdc:	ec53 2b10 	vmov	r2, r3, d0
 800dce0:	f7f2 fb04 	bl	80002ec <__adddf3>
 800dce4:	4682      	mov	sl, r0
 800dce6:	468b      	mov	fp, r1
 800dce8:	e7de      	b.n	800dca8 <_strtod_l+0x8b8>
 800dcea:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800dcee:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800dcf2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800dcf6:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800dcfa:	e7d5      	b.n	800dca8 <_strtod_l+0x8b8>
 800dcfc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800dcfe:	ea13 0f0a 	tst.w	r3, sl
 800dd02:	e7e1      	b.n	800dcc8 <_strtod_l+0x8d8>
 800dd04:	f7ff fb56 	bl	800d3b4 <sulp>
 800dd08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dd0c:	ec53 2b10 	vmov	r2, r3, d0
 800dd10:	f7f2 faea 	bl	80002e8 <__aeabi_dsub>
 800dd14:	2200      	movs	r2, #0
 800dd16:	2300      	movs	r3, #0
 800dd18:	4682      	mov	sl, r0
 800dd1a:	468b      	mov	fp, r1
 800dd1c:	f7f2 ff04 	bl	8000b28 <__aeabi_dcmpeq>
 800dd20:	2800      	cmp	r0, #0
 800dd22:	d0c1      	beq.n	800dca8 <_strtod_l+0x8b8>
 800dd24:	e61a      	b.n	800d95c <_strtod_l+0x56c>
 800dd26:	4641      	mov	r1, r8
 800dd28:	4620      	mov	r0, r4
 800dd2a:	f003 fce3 	bl	80116f4 <__ratio>
 800dd2e:	ec57 6b10 	vmov	r6, r7, d0
 800dd32:	2200      	movs	r2, #0
 800dd34:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800dd38:	4630      	mov	r0, r6
 800dd3a:	4639      	mov	r1, r7
 800dd3c:	f7f2 ff08 	bl	8000b50 <__aeabi_dcmple>
 800dd40:	2800      	cmp	r0, #0
 800dd42:	d06f      	beq.n	800de24 <_strtod_l+0xa34>
 800dd44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d17a      	bne.n	800de40 <_strtod_l+0xa50>
 800dd4a:	f1ba 0f00 	cmp.w	sl, #0
 800dd4e:	d158      	bne.n	800de02 <_strtod_l+0xa12>
 800dd50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dd52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d15a      	bne.n	800de10 <_strtod_l+0xa20>
 800dd5a:	4b64      	ldr	r3, [pc, #400]	@ (800deec <_strtod_l+0xafc>)
 800dd5c:	2200      	movs	r2, #0
 800dd5e:	4630      	mov	r0, r6
 800dd60:	4639      	mov	r1, r7
 800dd62:	f7f2 feeb 	bl	8000b3c <__aeabi_dcmplt>
 800dd66:	2800      	cmp	r0, #0
 800dd68:	d159      	bne.n	800de1e <_strtod_l+0xa2e>
 800dd6a:	4630      	mov	r0, r6
 800dd6c:	4639      	mov	r1, r7
 800dd6e:	4b60      	ldr	r3, [pc, #384]	@ (800def0 <_strtod_l+0xb00>)
 800dd70:	2200      	movs	r2, #0
 800dd72:	f7f2 fc71 	bl	8000658 <__aeabi_dmul>
 800dd76:	4606      	mov	r6, r0
 800dd78:	460f      	mov	r7, r1
 800dd7a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800dd7e:	9606      	str	r6, [sp, #24]
 800dd80:	9307      	str	r3, [sp, #28]
 800dd82:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dd86:	4d57      	ldr	r5, [pc, #348]	@ (800dee4 <_strtod_l+0xaf4>)
 800dd88:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800dd8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dd8e:	401d      	ands	r5, r3
 800dd90:	4b58      	ldr	r3, [pc, #352]	@ (800def4 <_strtod_l+0xb04>)
 800dd92:	429d      	cmp	r5, r3
 800dd94:	f040 80b2 	bne.w	800defc <_strtod_l+0xb0c>
 800dd98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dd9a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800dd9e:	ec4b ab10 	vmov	d0, sl, fp
 800dda2:	f003 fbdf 	bl	8011564 <__ulp>
 800dda6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ddaa:	ec51 0b10 	vmov	r0, r1, d0
 800ddae:	f7f2 fc53 	bl	8000658 <__aeabi_dmul>
 800ddb2:	4652      	mov	r2, sl
 800ddb4:	465b      	mov	r3, fp
 800ddb6:	f7f2 fa99 	bl	80002ec <__adddf3>
 800ddba:	460b      	mov	r3, r1
 800ddbc:	4949      	ldr	r1, [pc, #292]	@ (800dee4 <_strtod_l+0xaf4>)
 800ddbe:	4a4e      	ldr	r2, [pc, #312]	@ (800def8 <_strtod_l+0xb08>)
 800ddc0:	4019      	ands	r1, r3
 800ddc2:	4291      	cmp	r1, r2
 800ddc4:	4682      	mov	sl, r0
 800ddc6:	d942      	bls.n	800de4e <_strtod_l+0xa5e>
 800ddc8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ddca:	4b47      	ldr	r3, [pc, #284]	@ (800dee8 <_strtod_l+0xaf8>)
 800ddcc:	429a      	cmp	r2, r3
 800ddce:	d103      	bne.n	800ddd8 <_strtod_l+0x9e8>
 800ddd0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ddd2:	3301      	adds	r3, #1
 800ddd4:	f43f ad2f 	beq.w	800d836 <_strtod_l+0x446>
 800ddd8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800dee8 <_strtod_l+0xaf8>
 800dddc:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800dde0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dde2:	9805      	ldr	r0, [sp, #20]
 800dde4:	f003 f892 	bl	8010f0c <_Bfree>
 800dde8:	9805      	ldr	r0, [sp, #20]
 800ddea:	4649      	mov	r1, r9
 800ddec:	f003 f88e 	bl	8010f0c <_Bfree>
 800ddf0:	9805      	ldr	r0, [sp, #20]
 800ddf2:	4641      	mov	r1, r8
 800ddf4:	f003 f88a 	bl	8010f0c <_Bfree>
 800ddf8:	9805      	ldr	r0, [sp, #20]
 800ddfa:	4621      	mov	r1, r4
 800ddfc:	f003 f886 	bl	8010f0c <_Bfree>
 800de00:	e619      	b.n	800da36 <_strtod_l+0x646>
 800de02:	f1ba 0f01 	cmp.w	sl, #1
 800de06:	d103      	bne.n	800de10 <_strtod_l+0xa20>
 800de08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	f43f ada6 	beq.w	800d95c <_strtod_l+0x56c>
 800de10:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800dec0 <_strtod_l+0xad0>
 800de14:	4f35      	ldr	r7, [pc, #212]	@ (800deec <_strtod_l+0xafc>)
 800de16:	ed8d 7b06 	vstr	d7, [sp, #24]
 800de1a:	2600      	movs	r6, #0
 800de1c:	e7b1      	b.n	800dd82 <_strtod_l+0x992>
 800de1e:	4f34      	ldr	r7, [pc, #208]	@ (800def0 <_strtod_l+0xb00>)
 800de20:	2600      	movs	r6, #0
 800de22:	e7aa      	b.n	800dd7a <_strtod_l+0x98a>
 800de24:	4b32      	ldr	r3, [pc, #200]	@ (800def0 <_strtod_l+0xb00>)
 800de26:	4630      	mov	r0, r6
 800de28:	4639      	mov	r1, r7
 800de2a:	2200      	movs	r2, #0
 800de2c:	f7f2 fc14 	bl	8000658 <__aeabi_dmul>
 800de30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800de32:	4606      	mov	r6, r0
 800de34:	460f      	mov	r7, r1
 800de36:	2b00      	cmp	r3, #0
 800de38:	d09f      	beq.n	800dd7a <_strtod_l+0x98a>
 800de3a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800de3e:	e7a0      	b.n	800dd82 <_strtod_l+0x992>
 800de40:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800dec8 <_strtod_l+0xad8>
 800de44:	ed8d 7b06 	vstr	d7, [sp, #24]
 800de48:	ec57 6b17 	vmov	r6, r7, d7
 800de4c:	e799      	b.n	800dd82 <_strtod_l+0x992>
 800de4e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800de52:	9b08      	ldr	r3, [sp, #32]
 800de54:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d1c1      	bne.n	800dde0 <_strtod_l+0x9f0>
 800de5c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800de60:	0d1b      	lsrs	r3, r3, #20
 800de62:	051b      	lsls	r3, r3, #20
 800de64:	429d      	cmp	r5, r3
 800de66:	d1bb      	bne.n	800dde0 <_strtod_l+0x9f0>
 800de68:	4630      	mov	r0, r6
 800de6a:	4639      	mov	r1, r7
 800de6c:	f7f2 ff54 	bl	8000d18 <__aeabi_d2lz>
 800de70:	f7f2 fbc4 	bl	80005fc <__aeabi_l2d>
 800de74:	4602      	mov	r2, r0
 800de76:	460b      	mov	r3, r1
 800de78:	4630      	mov	r0, r6
 800de7a:	4639      	mov	r1, r7
 800de7c:	f7f2 fa34 	bl	80002e8 <__aeabi_dsub>
 800de80:	460b      	mov	r3, r1
 800de82:	4602      	mov	r2, r0
 800de84:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800de88:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800de8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800de8e:	ea46 060a 	orr.w	r6, r6, sl
 800de92:	431e      	orrs	r6, r3
 800de94:	d06f      	beq.n	800df76 <_strtod_l+0xb86>
 800de96:	a30e      	add	r3, pc, #56	@ (adr r3, 800ded0 <_strtod_l+0xae0>)
 800de98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de9c:	f7f2 fe4e 	bl	8000b3c <__aeabi_dcmplt>
 800dea0:	2800      	cmp	r0, #0
 800dea2:	f47f acd3 	bne.w	800d84c <_strtod_l+0x45c>
 800dea6:	a30c      	add	r3, pc, #48	@ (adr r3, 800ded8 <_strtod_l+0xae8>)
 800dea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800deb0:	f7f2 fe62 	bl	8000b78 <__aeabi_dcmpgt>
 800deb4:	2800      	cmp	r0, #0
 800deb6:	d093      	beq.n	800dde0 <_strtod_l+0x9f0>
 800deb8:	e4c8      	b.n	800d84c <_strtod_l+0x45c>
 800deba:	bf00      	nop
 800debc:	f3af 8000 	nop.w
 800dec0:	00000000 	.word	0x00000000
 800dec4:	bff00000 	.word	0xbff00000
 800dec8:	00000000 	.word	0x00000000
 800decc:	3ff00000 	.word	0x3ff00000
 800ded0:	94a03595 	.word	0x94a03595
 800ded4:	3fdfffff 	.word	0x3fdfffff
 800ded8:	35afe535 	.word	0x35afe535
 800dedc:	3fe00000 	.word	0x3fe00000
 800dee0:	000fffff 	.word	0x000fffff
 800dee4:	7ff00000 	.word	0x7ff00000
 800dee8:	7fefffff 	.word	0x7fefffff
 800deec:	3ff00000 	.word	0x3ff00000
 800def0:	3fe00000 	.word	0x3fe00000
 800def4:	7fe00000 	.word	0x7fe00000
 800def8:	7c9fffff 	.word	0x7c9fffff
 800defc:	9b08      	ldr	r3, [sp, #32]
 800defe:	b323      	cbz	r3, 800df4a <_strtod_l+0xb5a>
 800df00:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800df04:	d821      	bhi.n	800df4a <_strtod_l+0xb5a>
 800df06:	a328      	add	r3, pc, #160	@ (adr r3, 800dfa8 <_strtod_l+0xbb8>)
 800df08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df0c:	4630      	mov	r0, r6
 800df0e:	4639      	mov	r1, r7
 800df10:	f7f2 fe1e 	bl	8000b50 <__aeabi_dcmple>
 800df14:	b1a0      	cbz	r0, 800df40 <_strtod_l+0xb50>
 800df16:	4639      	mov	r1, r7
 800df18:	4630      	mov	r0, r6
 800df1a:	f7f2 fe75 	bl	8000c08 <__aeabi_d2uiz>
 800df1e:	2801      	cmp	r0, #1
 800df20:	bf38      	it	cc
 800df22:	2001      	movcc	r0, #1
 800df24:	f7f2 fb1e 	bl	8000564 <__aeabi_ui2d>
 800df28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800df2a:	4606      	mov	r6, r0
 800df2c:	460f      	mov	r7, r1
 800df2e:	b9fb      	cbnz	r3, 800df70 <_strtod_l+0xb80>
 800df30:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800df34:	9014      	str	r0, [sp, #80]	@ 0x50
 800df36:	9315      	str	r3, [sp, #84]	@ 0x54
 800df38:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800df3c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800df40:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800df42:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800df46:	1b5b      	subs	r3, r3, r5
 800df48:	9311      	str	r3, [sp, #68]	@ 0x44
 800df4a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800df4e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800df52:	f003 fb07 	bl	8011564 <__ulp>
 800df56:	4650      	mov	r0, sl
 800df58:	ec53 2b10 	vmov	r2, r3, d0
 800df5c:	4659      	mov	r1, fp
 800df5e:	f7f2 fb7b 	bl	8000658 <__aeabi_dmul>
 800df62:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800df66:	f7f2 f9c1 	bl	80002ec <__adddf3>
 800df6a:	4682      	mov	sl, r0
 800df6c:	468b      	mov	fp, r1
 800df6e:	e770      	b.n	800de52 <_strtod_l+0xa62>
 800df70:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800df74:	e7e0      	b.n	800df38 <_strtod_l+0xb48>
 800df76:	a30e      	add	r3, pc, #56	@ (adr r3, 800dfb0 <_strtod_l+0xbc0>)
 800df78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df7c:	f7f2 fdde 	bl	8000b3c <__aeabi_dcmplt>
 800df80:	e798      	b.n	800deb4 <_strtod_l+0xac4>
 800df82:	2300      	movs	r3, #0
 800df84:	930e      	str	r3, [sp, #56]	@ 0x38
 800df86:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800df88:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800df8a:	6013      	str	r3, [r2, #0]
 800df8c:	f7ff ba6d 	b.w	800d46a <_strtod_l+0x7a>
 800df90:	2a65      	cmp	r2, #101	@ 0x65
 800df92:	f43f ab68 	beq.w	800d666 <_strtod_l+0x276>
 800df96:	2a45      	cmp	r2, #69	@ 0x45
 800df98:	f43f ab65 	beq.w	800d666 <_strtod_l+0x276>
 800df9c:	2301      	movs	r3, #1
 800df9e:	f7ff bba0 	b.w	800d6e2 <_strtod_l+0x2f2>
 800dfa2:	bf00      	nop
 800dfa4:	f3af 8000 	nop.w
 800dfa8:	ffc00000 	.word	0xffc00000
 800dfac:	41dfffff 	.word	0x41dfffff
 800dfb0:	94a03595 	.word	0x94a03595
 800dfb4:	3fcfffff 	.word	0x3fcfffff

0800dfb8 <_strtod_r>:
 800dfb8:	4b01      	ldr	r3, [pc, #4]	@ (800dfc0 <_strtod_r+0x8>)
 800dfba:	f7ff ba19 	b.w	800d3f0 <_strtod_l>
 800dfbe:	bf00      	nop
 800dfc0:	20000054 	.word	0x20000054

0800dfc4 <strtod>:
 800dfc4:	460a      	mov	r2, r1
 800dfc6:	4601      	mov	r1, r0
 800dfc8:	4802      	ldr	r0, [pc, #8]	@ (800dfd4 <strtod+0x10>)
 800dfca:	4b03      	ldr	r3, [pc, #12]	@ (800dfd8 <strtod+0x14>)
 800dfcc:	6800      	ldr	r0, [r0, #0]
 800dfce:	f7ff ba0f 	b.w	800d3f0 <_strtod_l>
 800dfd2:	bf00      	nop
 800dfd4:	200001c0 	.word	0x200001c0
 800dfd8:	20000054 	.word	0x20000054

0800dfdc <setenv>:
 800dfdc:	4613      	mov	r3, r2
 800dfde:	460a      	mov	r2, r1
 800dfe0:	4601      	mov	r1, r0
 800dfe2:	4802      	ldr	r0, [pc, #8]	@ (800dfec <setenv+0x10>)
 800dfe4:	6800      	ldr	r0, [r0, #0]
 800dfe6:	f000 b803 	b.w	800dff0 <_setenv_r>
 800dfea:	bf00      	nop
 800dfec:	200001c0 	.word	0x200001c0

0800dff0 <_setenv_r>:
 800dff0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dff4:	460e      	mov	r6, r1
 800dff6:	4605      	mov	r5, r0
 800dff8:	213d      	movs	r1, #61	@ 0x3d
 800dffa:	4630      	mov	r0, r6
 800dffc:	4617      	mov	r7, r2
 800dffe:	4698      	mov	r8, r3
 800e000:	f001 fb9c 	bl	800f73c <strchr>
 800e004:	b130      	cbz	r0, 800e014 <_setenv_r+0x24>
 800e006:	f001 fcc9 	bl	800f99c <__errno>
 800e00a:	2316      	movs	r3, #22
 800e00c:	6003      	str	r3, [r0, #0]
 800e00e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e012:	e014      	b.n	800e03e <_setenv_r+0x4e>
 800e014:	4628      	mov	r0, r5
 800e016:	f7f6 f8f7 	bl	8004208 <__env_lock>
 800e01a:	4638      	mov	r0, r7
 800e01c:	f7f2 f958 	bl	80002d0 <strlen>
 800e020:	aa01      	add	r2, sp, #4
 800e022:	4681      	mov	r9, r0
 800e024:	4631      	mov	r1, r6
 800e026:	4628      	mov	r0, r5
 800e028:	f7ff f8cc 	bl	800d1c4 <_findenv_r>
 800e02c:	4604      	mov	r4, r0
 800e02e:	b1a8      	cbz	r0, 800e05c <_setenv_r+0x6c>
 800e030:	f1b8 0f00 	cmp.w	r8, #0
 800e034:	d106      	bne.n	800e044 <_setenv_r+0x54>
 800e036:	4628      	mov	r0, r5
 800e038:	f7f6 f91e 	bl	8004278 <__env_unlock>
 800e03c:	2000      	movs	r0, #0
 800e03e:	b003      	add	sp, #12
 800e040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e044:	f7f2 f944 	bl	80002d0 <strlen>
 800e048:	4581      	cmp	r9, r0
 800e04a:	d83a      	bhi.n	800e0c2 <_setenv_r+0xd2>
 800e04c:	3c01      	subs	r4, #1
 800e04e:	f817 3b01 	ldrb.w	r3, [r7], #1
 800e052:	f804 3f01 	strb.w	r3, [r4, #1]!
 800e056:	2b00      	cmp	r3, #0
 800e058:	d1f9      	bne.n	800e04e <_setenv_r+0x5e>
 800e05a:	e7ec      	b.n	800e036 <_setenv_r+0x46>
 800e05c:	f8df a0bc 	ldr.w	sl, [pc, #188]	@ 800e11c <_setenv_r+0x12c>
 800e060:	f8da 1000 	ldr.w	r1, [sl]
 800e064:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
 800e068:	b98b      	cbnz	r3, 800e08e <_setenv_r+0x9e>
 800e06a:	4b2b      	ldr	r3, [pc, #172]	@ (800e118 <_setenv_r+0x128>)
 800e06c:	681a      	ldr	r2, [r3, #0]
 800e06e:	f104 0802 	add.w	r8, r4, #2
 800e072:	ea4f 0888 	mov.w	r8, r8, lsl #2
 800e076:	b162      	cbz	r2, 800e092 <_setenv_r+0xa2>
 800e078:	4642      	mov	r2, r8
 800e07a:	4628      	mov	r0, r5
 800e07c:	f003 fbb0 	bl	80117e0 <_realloc_r>
 800e080:	f8ca 0000 	str.w	r0, [sl]
 800e084:	b9b0      	cbnz	r0, 800e0b4 <_setenv_r+0xc4>
 800e086:	4628      	mov	r0, r5
 800e088:	f7f6 f8f6 	bl	8004278 <__env_unlock>
 800e08c:	e7bf      	b.n	800e00e <_setenv_r+0x1e>
 800e08e:	3401      	adds	r4, #1
 800e090:	e7e8      	b.n	800e064 <_setenv_r+0x74>
 800e092:	2201      	movs	r2, #1
 800e094:	4641      	mov	r1, r8
 800e096:	4628      	mov	r0, r5
 800e098:	601a      	str	r2, [r3, #0]
 800e09a:	f7ff f901 	bl	800d2a0 <_malloc_r>
 800e09e:	4683      	mov	fp, r0
 800e0a0:	2800      	cmp	r0, #0
 800e0a2:	d0f0      	beq.n	800e086 <_setenv_r+0x96>
 800e0a4:	f8da 1000 	ldr.w	r1, [sl]
 800e0a8:	f1a8 0208 	sub.w	r2, r8, #8
 800e0ac:	f001 fca4 	bl	800f9f8 <memcpy>
 800e0b0:	f8ca b000 	str.w	fp, [sl]
 800e0b4:	f8da 3000 	ldr.w	r3, [sl]
 800e0b8:	4443      	add	r3, r8
 800e0ba:	2200      	movs	r2, #0
 800e0bc:	f843 2c04 	str.w	r2, [r3, #-4]
 800e0c0:	9401      	str	r4, [sp, #4]
 800e0c2:	4633      	mov	r3, r6
 800e0c4:	4619      	mov	r1, r3
 800e0c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e0ca:	b10a      	cbz	r2, 800e0d0 <_setenv_r+0xe0>
 800e0cc:	2a3d      	cmp	r2, #61	@ 0x3d
 800e0ce:	d1f9      	bne.n	800e0c4 <_setenv_r+0xd4>
 800e0d0:	1b89      	subs	r1, r1, r6
 800e0d2:	4c12      	ldr	r4, [pc, #72]	@ (800e11c <_setenv_r+0x12c>)
 800e0d4:	f8dd a004 	ldr.w	sl, [sp, #4]
 800e0d8:	f8d4 8000 	ldr.w	r8, [r4]
 800e0dc:	4449      	add	r1, r9
 800e0de:	3102      	adds	r1, #2
 800e0e0:	4628      	mov	r0, r5
 800e0e2:	f7ff f8dd 	bl	800d2a0 <_malloc_r>
 800e0e6:	f848 002a 	str.w	r0, [r8, sl, lsl #2]
 800e0ea:	2800      	cmp	r0, #0
 800e0ec:	d0cb      	beq.n	800e086 <_setenv_r+0x96>
 800e0ee:	6823      	ldr	r3, [r4, #0]
 800e0f0:	9a01      	ldr	r2, [sp, #4]
 800e0f2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e0f6:	f816 1b01 	ldrb.w	r1, [r6], #1
 800e0fa:	7011      	strb	r1, [r2, #0]
 800e0fc:	4613      	mov	r3, r2
 800e0fe:	3201      	adds	r2, #1
 800e100:	b109      	cbz	r1, 800e106 <_setenv_r+0x116>
 800e102:	293d      	cmp	r1, #61	@ 0x3d
 800e104:	d1f7      	bne.n	800e0f6 <_setenv_r+0x106>
 800e106:	223d      	movs	r2, #61	@ 0x3d
 800e108:	701a      	strb	r2, [r3, #0]
 800e10a:	f817 2b01 	ldrb.w	r2, [r7], #1
 800e10e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e112:	2a00      	cmp	r2, #0
 800e114:	d1f9      	bne.n	800e10a <_setenv_r+0x11a>
 800e116:	e78e      	b.n	800e036 <_setenv_r+0x46>
 800e118:	20000504 	.word	0x20000504
 800e11c:	20000030 	.word	0x20000030

0800e120 <__cvt>:
 800e120:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e124:	ec57 6b10 	vmov	r6, r7, d0
 800e128:	2f00      	cmp	r7, #0
 800e12a:	460c      	mov	r4, r1
 800e12c:	4619      	mov	r1, r3
 800e12e:	463b      	mov	r3, r7
 800e130:	bfbb      	ittet	lt
 800e132:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e136:	461f      	movlt	r7, r3
 800e138:	2300      	movge	r3, #0
 800e13a:	232d      	movlt	r3, #45	@ 0x2d
 800e13c:	700b      	strb	r3, [r1, #0]
 800e13e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e140:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e144:	4691      	mov	r9, r2
 800e146:	f023 0820 	bic.w	r8, r3, #32
 800e14a:	bfbc      	itt	lt
 800e14c:	4632      	movlt	r2, r6
 800e14e:	4616      	movlt	r6, r2
 800e150:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e154:	d005      	beq.n	800e162 <__cvt+0x42>
 800e156:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e15a:	d100      	bne.n	800e15e <__cvt+0x3e>
 800e15c:	3401      	adds	r4, #1
 800e15e:	2102      	movs	r1, #2
 800e160:	e000      	b.n	800e164 <__cvt+0x44>
 800e162:	2103      	movs	r1, #3
 800e164:	ab03      	add	r3, sp, #12
 800e166:	9301      	str	r3, [sp, #4]
 800e168:	ab02      	add	r3, sp, #8
 800e16a:	9300      	str	r3, [sp, #0]
 800e16c:	ec47 6b10 	vmov	d0, r6, r7
 800e170:	4653      	mov	r3, sl
 800e172:	4622      	mov	r2, r4
 800e174:	f001 fcf0 	bl	800fb58 <_dtoa_r>
 800e178:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e17c:	4605      	mov	r5, r0
 800e17e:	d119      	bne.n	800e1b4 <__cvt+0x94>
 800e180:	f019 0f01 	tst.w	r9, #1
 800e184:	d00e      	beq.n	800e1a4 <__cvt+0x84>
 800e186:	eb00 0904 	add.w	r9, r0, r4
 800e18a:	2200      	movs	r2, #0
 800e18c:	2300      	movs	r3, #0
 800e18e:	4630      	mov	r0, r6
 800e190:	4639      	mov	r1, r7
 800e192:	f7f2 fcc9 	bl	8000b28 <__aeabi_dcmpeq>
 800e196:	b108      	cbz	r0, 800e19c <__cvt+0x7c>
 800e198:	f8cd 900c 	str.w	r9, [sp, #12]
 800e19c:	2230      	movs	r2, #48	@ 0x30
 800e19e:	9b03      	ldr	r3, [sp, #12]
 800e1a0:	454b      	cmp	r3, r9
 800e1a2:	d31e      	bcc.n	800e1e2 <__cvt+0xc2>
 800e1a4:	9b03      	ldr	r3, [sp, #12]
 800e1a6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e1a8:	1b5b      	subs	r3, r3, r5
 800e1aa:	4628      	mov	r0, r5
 800e1ac:	6013      	str	r3, [r2, #0]
 800e1ae:	b004      	add	sp, #16
 800e1b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1b4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e1b8:	eb00 0904 	add.w	r9, r0, r4
 800e1bc:	d1e5      	bne.n	800e18a <__cvt+0x6a>
 800e1be:	7803      	ldrb	r3, [r0, #0]
 800e1c0:	2b30      	cmp	r3, #48	@ 0x30
 800e1c2:	d10a      	bne.n	800e1da <__cvt+0xba>
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	4630      	mov	r0, r6
 800e1ca:	4639      	mov	r1, r7
 800e1cc:	f7f2 fcac 	bl	8000b28 <__aeabi_dcmpeq>
 800e1d0:	b918      	cbnz	r0, 800e1da <__cvt+0xba>
 800e1d2:	f1c4 0401 	rsb	r4, r4, #1
 800e1d6:	f8ca 4000 	str.w	r4, [sl]
 800e1da:	f8da 3000 	ldr.w	r3, [sl]
 800e1de:	4499      	add	r9, r3
 800e1e0:	e7d3      	b.n	800e18a <__cvt+0x6a>
 800e1e2:	1c59      	adds	r1, r3, #1
 800e1e4:	9103      	str	r1, [sp, #12]
 800e1e6:	701a      	strb	r2, [r3, #0]
 800e1e8:	e7d9      	b.n	800e19e <__cvt+0x7e>

0800e1ea <__exponent>:
 800e1ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e1ec:	2900      	cmp	r1, #0
 800e1ee:	bfba      	itte	lt
 800e1f0:	4249      	neglt	r1, r1
 800e1f2:	232d      	movlt	r3, #45	@ 0x2d
 800e1f4:	232b      	movge	r3, #43	@ 0x2b
 800e1f6:	2909      	cmp	r1, #9
 800e1f8:	7002      	strb	r2, [r0, #0]
 800e1fa:	7043      	strb	r3, [r0, #1]
 800e1fc:	dd29      	ble.n	800e252 <__exponent+0x68>
 800e1fe:	f10d 0307 	add.w	r3, sp, #7
 800e202:	461d      	mov	r5, r3
 800e204:	270a      	movs	r7, #10
 800e206:	461a      	mov	r2, r3
 800e208:	fbb1 f6f7 	udiv	r6, r1, r7
 800e20c:	fb07 1416 	mls	r4, r7, r6, r1
 800e210:	3430      	adds	r4, #48	@ 0x30
 800e212:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e216:	460c      	mov	r4, r1
 800e218:	2c63      	cmp	r4, #99	@ 0x63
 800e21a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800e21e:	4631      	mov	r1, r6
 800e220:	dcf1      	bgt.n	800e206 <__exponent+0x1c>
 800e222:	3130      	adds	r1, #48	@ 0x30
 800e224:	1e94      	subs	r4, r2, #2
 800e226:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e22a:	1c41      	adds	r1, r0, #1
 800e22c:	4623      	mov	r3, r4
 800e22e:	42ab      	cmp	r3, r5
 800e230:	d30a      	bcc.n	800e248 <__exponent+0x5e>
 800e232:	f10d 0309 	add.w	r3, sp, #9
 800e236:	1a9b      	subs	r3, r3, r2
 800e238:	42ac      	cmp	r4, r5
 800e23a:	bf88      	it	hi
 800e23c:	2300      	movhi	r3, #0
 800e23e:	3302      	adds	r3, #2
 800e240:	4403      	add	r3, r0
 800e242:	1a18      	subs	r0, r3, r0
 800e244:	b003      	add	sp, #12
 800e246:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e248:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e24c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e250:	e7ed      	b.n	800e22e <__exponent+0x44>
 800e252:	2330      	movs	r3, #48	@ 0x30
 800e254:	3130      	adds	r1, #48	@ 0x30
 800e256:	7083      	strb	r3, [r0, #2]
 800e258:	70c1      	strb	r1, [r0, #3]
 800e25a:	1d03      	adds	r3, r0, #4
 800e25c:	e7f1      	b.n	800e242 <__exponent+0x58>
	...

0800e260 <_printf_float>:
 800e260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e264:	b08d      	sub	sp, #52	@ 0x34
 800e266:	460c      	mov	r4, r1
 800e268:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e26c:	4616      	mov	r6, r2
 800e26e:	461f      	mov	r7, r3
 800e270:	4605      	mov	r5, r0
 800e272:	f001 faeb 	bl	800f84c <_localeconv_r>
 800e276:	6803      	ldr	r3, [r0, #0]
 800e278:	9304      	str	r3, [sp, #16]
 800e27a:	4618      	mov	r0, r3
 800e27c:	f7f2 f828 	bl	80002d0 <strlen>
 800e280:	2300      	movs	r3, #0
 800e282:	930a      	str	r3, [sp, #40]	@ 0x28
 800e284:	f8d8 3000 	ldr.w	r3, [r8]
 800e288:	9005      	str	r0, [sp, #20]
 800e28a:	3307      	adds	r3, #7
 800e28c:	f023 0307 	bic.w	r3, r3, #7
 800e290:	f103 0208 	add.w	r2, r3, #8
 800e294:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e298:	f8d4 b000 	ldr.w	fp, [r4]
 800e29c:	f8c8 2000 	str.w	r2, [r8]
 800e2a0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e2a4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e2a8:	9307      	str	r3, [sp, #28]
 800e2aa:	f8cd 8018 	str.w	r8, [sp, #24]
 800e2ae:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e2b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e2b6:	4b9c      	ldr	r3, [pc, #624]	@ (800e528 <_printf_float+0x2c8>)
 800e2b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e2bc:	f7f2 fc66 	bl	8000b8c <__aeabi_dcmpun>
 800e2c0:	bb70      	cbnz	r0, 800e320 <_printf_float+0xc0>
 800e2c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e2c6:	4b98      	ldr	r3, [pc, #608]	@ (800e528 <_printf_float+0x2c8>)
 800e2c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e2cc:	f7f2 fc40 	bl	8000b50 <__aeabi_dcmple>
 800e2d0:	bb30      	cbnz	r0, 800e320 <_printf_float+0xc0>
 800e2d2:	2200      	movs	r2, #0
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	4640      	mov	r0, r8
 800e2d8:	4649      	mov	r1, r9
 800e2da:	f7f2 fc2f 	bl	8000b3c <__aeabi_dcmplt>
 800e2de:	b110      	cbz	r0, 800e2e6 <_printf_float+0x86>
 800e2e0:	232d      	movs	r3, #45	@ 0x2d
 800e2e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e2e6:	4a91      	ldr	r2, [pc, #580]	@ (800e52c <_printf_float+0x2cc>)
 800e2e8:	4b91      	ldr	r3, [pc, #580]	@ (800e530 <_printf_float+0x2d0>)
 800e2ea:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e2ee:	bf8c      	ite	hi
 800e2f0:	4690      	movhi	r8, r2
 800e2f2:	4698      	movls	r8, r3
 800e2f4:	2303      	movs	r3, #3
 800e2f6:	6123      	str	r3, [r4, #16]
 800e2f8:	f02b 0304 	bic.w	r3, fp, #4
 800e2fc:	6023      	str	r3, [r4, #0]
 800e2fe:	f04f 0900 	mov.w	r9, #0
 800e302:	9700      	str	r7, [sp, #0]
 800e304:	4633      	mov	r3, r6
 800e306:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e308:	4621      	mov	r1, r4
 800e30a:	4628      	mov	r0, r5
 800e30c:	f000 f9d2 	bl	800e6b4 <_printf_common>
 800e310:	3001      	adds	r0, #1
 800e312:	f040 808d 	bne.w	800e430 <_printf_float+0x1d0>
 800e316:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e31a:	b00d      	add	sp, #52	@ 0x34
 800e31c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e320:	4642      	mov	r2, r8
 800e322:	464b      	mov	r3, r9
 800e324:	4640      	mov	r0, r8
 800e326:	4649      	mov	r1, r9
 800e328:	f7f2 fc30 	bl	8000b8c <__aeabi_dcmpun>
 800e32c:	b140      	cbz	r0, 800e340 <_printf_float+0xe0>
 800e32e:	464b      	mov	r3, r9
 800e330:	2b00      	cmp	r3, #0
 800e332:	bfbc      	itt	lt
 800e334:	232d      	movlt	r3, #45	@ 0x2d
 800e336:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e33a:	4a7e      	ldr	r2, [pc, #504]	@ (800e534 <_printf_float+0x2d4>)
 800e33c:	4b7e      	ldr	r3, [pc, #504]	@ (800e538 <_printf_float+0x2d8>)
 800e33e:	e7d4      	b.n	800e2ea <_printf_float+0x8a>
 800e340:	6863      	ldr	r3, [r4, #4]
 800e342:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e346:	9206      	str	r2, [sp, #24]
 800e348:	1c5a      	adds	r2, r3, #1
 800e34a:	d13b      	bne.n	800e3c4 <_printf_float+0x164>
 800e34c:	2306      	movs	r3, #6
 800e34e:	6063      	str	r3, [r4, #4]
 800e350:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e354:	2300      	movs	r3, #0
 800e356:	6022      	str	r2, [r4, #0]
 800e358:	9303      	str	r3, [sp, #12]
 800e35a:	ab0a      	add	r3, sp, #40	@ 0x28
 800e35c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e360:	ab09      	add	r3, sp, #36	@ 0x24
 800e362:	9300      	str	r3, [sp, #0]
 800e364:	6861      	ldr	r1, [r4, #4]
 800e366:	ec49 8b10 	vmov	d0, r8, r9
 800e36a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e36e:	4628      	mov	r0, r5
 800e370:	f7ff fed6 	bl	800e120 <__cvt>
 800e374:	9b06      	ldr	r3, [sp, #24]
 800e376:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e378:	2b47      	cmp	r3, #71	@ 0x47
 800e37a:	4680      	mov	r8, r0
 800e37c:	d129      	bne.n	800e3d2 <_printf_float+0x172>
 800e37e:	1cc8      	adds	r0, r1, #3
 800e380:	db02      	blt.n	800e388 <_printf_float+0x128>
 800e382:	6863      	ldr	r3, [r4, #4]
 800e384:	4299      	cmp	r1, r3
 800e386:	dd41      	ble.n	800e40c <_printf_float+0x1ac>
 800e388:	f1aa 0a02 	sub.w	sl, sl, #2
 800e38c:	fa5f fa8a 	uxtb.w	sl, sl
 800e390:	3901      	subs	r1, #1
 800e392:	4652      	mov	r2, sl
 800e394:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e398:	9109      	str	r1, [sp, #36]	@ 0x24
 800e39a:	f7ff ff26 	bl	800e1ea <__exponent>
 800e39e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e3a0:	1813      	adds	r3, r2, r0
 800e3a2:	2a01      	cmp	r2, #1
 800e3a4:	4681      	mov	r9, r0
 800e3a6:	6123      	str	r3, [r4, #16]
 800e3a8:	dc02      	bgt.n	800e3b0 <_printf_float+0x150>
 800e3aa:	6822      	ldr	r2, [r4, #0]
 800e3ac:	07d2      	lsls	r2, r2, #31
 800e3ae:	d501      	bpl.n	800e3b4 <_printf_float+0x154>
 800e3b0:	3301      	adds	r3, #1
 800e3b2:	6123      	str	r3, [r4, #16]
 800e3b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d0a2      	beq.n	800e302 <_printf_float+0xa2>
 800e3bc:	232d      	movs	r3, #45	@ 0x2d
 800e3be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e3c2:	e79e      	b.n	800e302 <_printf_float+0xa2>
 800e3c4:	9a06      	ldr	r2, [sp, #24]
 800e3c6:	2a47      	cmp	r2, #71	@ 0x47
 800e3c8:	d1c2      	bne.n	800e350 <_printf_float+0xf0>
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d1c0      	bne.n	800e350 <_printf_float+0xf0>
 800e3ce:	2301      	movs	r3, #1
 800e3d0:	e7bd      	b.n	800e34e <_printf_float+0xee>
 800e3d2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e3d6:	d9db      	bls.n	800e390 <_printf_float+0x130>
 800e3d8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e3dc:	d118      	bne.n	800e410 <_printf_float+0x1b0>
 800e3de:	2900      	cmp	r1, #0
 800e3e0:	6863      	ldr	r3, [r4, #4]
 800e3e2:	dd0b      	ble.n	800e3fc <_printf_float+0x19c>
 800e3e4:	6121      	str	r1, [r4, #16]
 800e3e6:	b913      	cbnz	r3, 800e3ee <_printf_float+0x18e>
 800e3e8:	6822      	ldr	r2, [r4, #0]
 800e3ea:	07d0      	lsls	r0, r2, #31
 800e3ec:	d502      	bpl.n	800e3f4 <_printf_float+0x194>
 800e3ee:	3301      	adds	r3, #1
 800e3f0:	440b      	add	r3, r1
 800e3f2:	6123      	str	r3, [r4, #16]
 800e3f4:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e3f6:	f04f 0900 	mov.w	r9, #0
 800e3fa:	e7db      	b.n	800e3b4 <_printf_float+0x154>
 800e3fc:	b913      	cbnz	r3, 800e404 <_printf_float+0x1a4>
 800e3fe:	6822      	ldr	r2, [r4, #0]
 800e400:	07d2      	lsls	r2, r2, #31
 800e402:	d501      	bpl.n	800e408 <_printf_float+0x1a8>
 800e404:	3302      	adds	r3, #2
 800e406:	e7f4      	b.n	800e3f2 <_printf_float+0x192>
 800e408:	2301      	movs	r3, #1
 800e40a:	e7f2      	b.n	800e3f2 <_printf_float+0x192>
 800e40c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e410:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e412:	4299      	cmp	r1, r3
 800e414:	db05      	blt.n	800e422 <_printf_float+0x1c2>
 800e416:	6823      	ldr	r3, [r4, #0]
 800e418:	6121      	str	r1, [r4, #16]
 800e41a:	07d8      	lsls	r0, r3, #31
 800e41c:	d5ea      	bpl.n	800e3f4 <_printf_float+0x194>
 800e41e:	1c4b      	adds	r3, r1, #1
 800e420:	e7e7      	b.n	800e3f2 <_printf_float+0x192>
 800e422:	2900      	cmp	r1, #0
 800e424:	bfd4      	ite	le
 800e426:	f1c1 0202 	rsble	r2, r1, #2
 800e42a:	2201      	movgt	r2, #1
 800e42c:	4413      	add	r3, r2
 800e42e:	e7e0      	b.n	800e3f2 <_printf_float+0x192>
 800e430:	6823      	ldr	r3, [r4, #0]
 800e432:	055a      	lsls	r2, r3, #21
 800e434:	d407      	bmi.n	800e446 <_printf_float+0x1e6>
 800e436:	6923      	ldr	r3, [r4, #16]
 800e438:	4642      	mov	r2, r8
 800e43a:	4631      	mov	r1, r6
 800e43c:	4628      	mov	r0, r5
 800e43e:	47b8      	blx	r7
 800e440:	3001      	adds	r0, #1
 800e442:	d12b      	bne.n	800e49c <_printf_float+0x23c>
 800e444:	e767      	b.n	800e316 <_printf_float+0xb6>
 800e446:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e44a:	f240 80dd 	bls.w	800e608 <_printf_float+0x3a8>
 800e44e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e452:	2200      	movs	r2, #0
 800e454:	2300      	movs	r3, #0
 800e456:	f7f2 fb67 	bl	8000b28 <__aeabi_dcmpeq>
 800e45a:	2800      	cmp	r0, #0
 800e45c:	d033      	beq.n	800e4c6 <_printf_float+0x266>
 800e45e:	4a37      	ldr	r2, [pc, #220]	@ (800e53c <_printf_float+0x2dc>)
 800e460:	2301      	movs	r3, #1
 800e462:	4631      	mov	r1, r6
 800e464:	4628      	mov	r0, r5
 800e466:	47b8      	blx	r7
 800e468:	3001      	adds	r0, #1
 800e46a:	f43f af54 	beq.w	800e316 <_printf_float+0xb6>
 800e46e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e472:	4543      	cmp	r3, r8
 800e474:	db02      	blt.n	800e47c <_printf_float+0x21c>
 800e476:	6823      	ldr	r3, [r4, #0]
 800e478:	07d8      	lsls	r0, r3, #31
 800e47a:	d50f      	bpl.n	800e49c <_printf_float+0x23c>
 800e47c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e480:	4631      	mov	r1, r6
 800e482:	4628      	mov	r0, r5
 800e484:	47b8      	blx	r7
 800e486:	3001      	adds	r0, #1
 800e488:	f43f af45 	beq.w	800e316 <_printf_float+0xb6>
 800e48c:	f04f 0900 	mov.w	r9, #0
 800e490:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800e494:	f104 0a1a 	add.w	sl, r4, #26
 800e498:	45c8      	cmp	r8, r9
 800e49a:	dc09      	bgt.n	800e4b0 <_printf_float+0x250>
 800e49c:	6823      	ldr	r3, [r4, #0]
 800e49e:	079b      	lsls	r3, r3, #30
 800e4a0:	f100 8103 	bmi.w	800e6aa <_printf_float+0x44a>
 800e4a4:	68e0      	ldr	r0, [r4, #12]
 800e4a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e4a8:	4298      	cmp	r0, r3
 800e4aa:	bfb8      	it	lt
 800e4ac:	4618      	movlt	r0, r3
 800e4ae:	e734      	b.n	800e31a <_printf_float+0xba>
 800e4b0:	2301      	movs	r3, #1
 800e4b2:	4652      	mov	r2, sl
 800e4b4:	4631      	mov	r1, r6
 800e4b6:	4628      	mov	r0, r5
 800e4b8:	47b8      	blx	r7
 800e4ba:	3001      	adds	r0, #1
 800e4bc:	f43f af2b 	beq.w	800e316 <_printf_float+0xb6>
 800e4c0:	f109 0901 	add.w	r9, r9, #1
 800e4c4:	e7e8      	b.n	800e498 <_printf_float+0x238>
 800e4c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	dc39      	bgt.n	800e540 <_printf_float+0x2e0>
 800e4cc:	4a1b      	ldr	r2, [pc, #108]	@ (800e53c <_printf_float+0x2dc>)
 800e4ce:	2301      	movs	r3, #1
 800e4d0:	4631      	mov	r1, r6
 800e4d2:	4628      	mov	r0, r5
 800e4d4:	47b8      	blx	r7
 800e4d6:	3001      	adds	r0, #1
 800e4d8:	f43f af1d 	beq.w	800e316 <_printf_float+0xb6>
 800e4dc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e4e0:	ea59 0303 	orrs.w	r3, r9, r3
 800e4e4:	d102      	bne.n	800e4ec <_printf_float+0x28c>
 800e4e6:	6823      	ldr	r3, [r4, #0]
 800e4e8:	07d9      	lsls	r1, r3, #31
 800e4ea:	d5d7      	bpl.n	800e49c <_printf_float+0x23c>
 800e4ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e4f0:	4631      	mov	r1, r6
 800e4f2:	4628      	mov	r0, r5
 800e4f4:	47b8      	blx	r7
 800e4f6:	3001      	adds	r0, #1
 800e4f8:	f43f af0d 	beq.w	800e316 <_printf_float+0xb6>
 800e4fc:	f04f 0a00 	mov.w	sl, #0
 800e500:	f104 0b1a 	add.w	fp, r4, #26
 800e504:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e506:	425b      	negs	r3, r3
 800e508:	4553      	cmp	r3, sl
 800e50a:	dc01      	bgt.n	800e510 <_printf_float+0x2b0>
 800e50c:	464b      	mov	r3, r9
 800e50e:	e793      	b.n	800e438 <_printf_float+0x1d8>
 800e510:	2301      	movs	r3, #1
 800e512:	465a      	mov	r2, fp
 800e514:	4631      	mov	r1, r6
 800e516:	4628      	mov	r0, r5
 800e518:	47b8      	blx	r7
 800e51a:	3001      	adds	r0, #1
 800e51c:	f43f aefb 	beq.w	800e316 <_printf_float+0xb6>
 800e520:	f10a 0a01 	add.w	sl, sl, #1
 800e524:	e7ee      	b.n	800e504 <_printf_float+0x2a4>
 800e526:	bf00      	nop
 800e528:	7fefffff 	.word	0x7fefffff
 800e52c:	08013b82 	.word	0x08013b82
 800e530:	08013b7e 	.word	0x08013b7e
 800e534:	08013b8a 	.word	0x08013b8a
 800e538:	08013b86 	.word	0x08013b86
 800e53c:	08013b8e 	.word	0x08013b8e
 800e540:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e542:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e546:	4553      	cmp	r3, sl
 800e548:	bfa8      	it	ge
 800e54a:	4653      	movge	r3, sl
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	4699      	mov	r9, r3
 800e550:	dc36      	bgt.n	800e5c0 <_printf_float+0x360>
 800e552:	f04f 0b00 	mov.w	fp, #0
 800e556:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e55a:	f104 021a 	add.w	r2, r4, #26
 800e55e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e560:	9306      	str	r3, [sp, #24]
 800e562:	eba3 0309 	sub.w	r3, r3, r9
 800e566:	455b      	cmp	r3, fp
 800e568:	dc31      	bgt.n	800e5ce <_printf_float+0x36e>
 800e56a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e56c:	459a      	cmp	sl, r3
 800e56e:	dc3a      	bgt.n	800e5e6 <_printf_float+0x386>
 800e570:	6823      	ldr	r3, [r4, #0]
 800e572:	07da      	lsls	r2, r3, #31
 800e574:	d437      	bmi.n	800e5e6 <_printf_float+0x386>
 800e576:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e578:	ebaa 0903 	sub.w	r9, sl, r3
 800e57c:	9b06      	ldr	r3, [sp, #24]
 800e57e:	ebaa 0303 	sub.w	r3, sl, r3
 800e582:	4599      	cmp	r9, r3
 800e584:	bfa8      	it	ge
 800e586:	4699      	movge	r9, r3
 800e588:	f1b9 0f00 	cmp.w	r9, #0
 800e58c:	dc33      	bgt.n	800e5f6 <_printf_float+0x396>
 800e58e:	f04f 0800 	mov.w	r8, #0
 800e592:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e596:	f104 0b1a 	add.w	fp, r4, #26
 800e59a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e59c:	ebaa 0303 	sub.w	r3, sl, r3
 800e5a0:	eba3 0309 	sub.w	r3, r3, r9
 800e5a4:	4543      	cmp	r3, r8
 800e5a6:	f77f af79 	ble.w	800e49c <_printf_float+0x23c>
 800e5aa:	2301      	movs	r3, #1
 800e5ac:	465a      	mov	r2, fp
 800e5ae:	4631      	mov	r1, r6
 800e5b0:	4628      	mov	r0, r5
 800e5b2:	47b8      	blx	r7
 800e5b4:	3001      	adds	r0, #1
 800e5b6:	f43f aeae 	beq.w	800e316 <_printf_float+0xb6>
 800e5ba:	f108 0801 	add.w	r8, r8, #1
 800e5be:	e7ec      	b.n	800e59a <_printf_float+0x33a>
 800e5c0:	4642      	mov	r2, r8
 800e5c2:	4631      	mov	r1, r6
 800e5c4:	4628      	mov	r0, r5
 800e5c6:	47b8      	blx	r7
 800e5c8:	3001      	adds	r0, #1
 800e5ca:	d1c2      	bne.n	800e552 <_printf_float+0x2f2>
 800e5cc:	e6a3      	b.n	800e316 <_printf_float+0xb6>
 800e5ce:	2301      	movs	r3, #1
 800e5d0:	4631      	mov	r1, r6
 800e5d2:	4628      	mov	r0, r5
 800e5d4:	9206      	str	r2, [sp, #24]
 800e5d6:	47b8      	blx	r7
 800e5d8:	3001      	adds	r0, #1
 800e5da:	f43f ae9c 	beq.w	800e316 <_printf_float+0xb6>
 800e5de:	9a06      	ldr	r2, [sp, #24]
 800e5e0:	f10b 0b01 	add.w	fp, fp, #1
 800e5e4:	e7bb      	b.n	800e55e <_printf_float+0x2fe>
 800e5e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e5ea:	4631      	mov	r1, r6
 800e5ec:	4628      	mov	r0, r5
 800e5ee:	47b8      	blx	r7
 800e5f0:	3001      	adds	r0, #1
 800e5f2:	d1c0      	bne.n	800e576 <_printf_float+0x316>
 800e5f4:	e68f      	b.n	800e316 <_printf_float+0xb6>
 800e5f6:	9a06      	ldr	r2, [sp, #24]
 800e5f8:	464b      	mov	r3, r9
 800e5fa:	4442      	add	r2, r8
 800e5fc:	4631      	mov	r1, r6
 800e5fe:	4628      	mov	r0, r5
 800e600:	47b8      	blx	r7
 800e602:	3001      	adds	r0, #1
 800e604:	d1c3      	bne.n	800e58e <_printf_float+0x32e>
 800e606:	e686      	b.n	800e316 <_printf_float+0xb6>
 800e608:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e60c:	f1ba 0f01 	cmp.w	sl, #1
 800e610:	dc01      	bgt.n	800e616 <_printf_float+0x3b6>
 800e612:	07db      	lsls	r3, r3, #31
 800e614:	d536      	bpl.n	800e684 <_printf_float+0x424>
 800e616:	2301      	movs	r3, #1
 800e618:	4642      	mov	r2, r8
 800e61a:	4631      	mov	r1, r6
 800e61c:	4628      	mov	r0, r5
 800e61e:	47b8      	blx	r7
 800e620:	3001      	adds	r0, #1
 800e622:	f43f ae78 	beq.w	800e316 <_printf_float+0xb6>
 800e626:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e62a:	4631      	mov	r1, r6
 800e62c:	4628      	mov	r0, r5
 800e62e:	47b8      	blx	r7
 800e630:	3001      	adds	r0, #1
 800e632:	f43f ae70 	beq.w	800e316 <_printf_float+0xb6>
 800e636:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e63a:	2200      	movs	r2, #0
 800e63c:	2300      	movs	r3, #0
 800e63e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800e642:	f7f2 fa71 	bl	8000b28 <__aeabi_dcmpeq>
 800e646:	b9c0      	cbnz	r0, 800e67a <_printf_float+0x41a>
 800e648:	4653      	mov	r3, sl
 800e64a:	f108 0201 	add.w	r2, r8, #1
 800e64e:	4631      	mov	r1, r6
 800e650:	4628      	mov	r0, r5
 800e652:	47b8      	blx	r7
 800e654:	3001      	adds	r0, #1
 800e656:	d10c      	bne.n	800e672 <_printf_float+0x412>
 800e658:	e65d      	b.n	800e316 <_printf_float+0xb6>
 800e65a:	2301      	movs	r3, #1
 800e65c:	465a      	mov	r2, fp
 800e65e:	4631      	mov	r1, r6
 800e660:	4628      	mov	r0, r5
 800e662:	47b8      	blx	r7
 800e664:	3001      	adds	r0, #1
 800e666:	f43f ae56 	beq.w	800e316 <_printf_float+0xb6>
 800e66a:	f108 0801 	add.w	r8, r8, #1
 800e66e:	45d0      	cmp	r8, sl
 800e670:	dbf3      	blt.n	800e65a <_printf_float+0x3fa>
 800e672:	464b      	mov	r3, r9
 800e674:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e678:	e6df      	b.n	800e43a <_printf_float+0x1da>
 800e67a:	f04f 0800 	mov.w	r8, #0
 800e67e:	f104 0b1a 	add.w	fp, r4, #26
 800e682:	e7f4      	b.n	800e66e <_printf_float+0x40e>
 800e684:	2301      	movs	r3, #1
 800e686:	4642      	mov	r2, r8
 800e688:	e7e1      	b.n	800e64e <_printf_float+0x3ee>
 800e68a:	2301      	movs	r3, #1
 800e68c:	464a      	mov	r2, r9
 800e68e:	4631      	mov	r1, r6
 800e690:	4628      	mov	r0, r5
 800e692:	47b8      	blx	r7
 800e694:	3001      	adds	r0, #1
 800e696:	f43f ae3e 	beq.w	800e316 <_printf_float+0xb6>
 800e69a:	f108 0801 	add.w	r8, r8, #1
 800e69e:	68e3      	ldr	r3, [r4, #12]
 800e6a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e6a2:	1a5b      	subs	r3, r3, r1
 800e6a4:	4543      	cmp	r3, r8
 800e6a6:	dcf0      	bgt.n	800e68a <_printf_float+0x42a>
 800e6a8:	e6fc      	b.n	800e4a4 <_printf_float+0x244>
 800e6aa:	f04f 0800 	mov.w	r8, #0
 800e6ae:	f104 0919 	add.w	r9, r4, #25
 800e6b2:	e7f4      	b.n	800e69e <_printf_float+0x43e>

0800e6b4 <_printf_common>:
 800e6b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6b8:	4616      	mov	r6, r2
 800e6ba:	4698      	mov	r8, r3
 800e6bc:	688a      	ldr	r2, [r1, #8]
 800e6be:	690b      	ldr	r3, [r1, #16]
 800e6c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e6c4:	4293      	cmp	r3, r2
 800e6c6:	bfb8      	it	lt
 800e6c8:	4613      	movlt	r3, r2
 800e6ca:	6033      	str	r3, [r6, #0]
 800e6cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e6d0:	4607      	mov	r7, r0
 800e6d2:	460c      	mov	r4, r1
 800e6d4:	b10a      	cbz	r2, 800e6da <_printf_common+0x26>
 800e6d6:	3301      	adds	r3, #1
 800e6d8:	6033      	str	r3, [r6, #0]
 800e6da:	6823      	ldr	r3, [r4, #0]
 800e6dc:	0699      	lsls	r1, r3, #26
 800e6de:	bf42      	ittt	mi
 800e6e0:	6833      	ldrmi	r3, [r6, #0]
 800e6e2:	3302      	addmi	r3, #2
 800e6e4:	6033      	strmi	r3, [r6, #0]
 800e6e6:	6825      	ldr	r5, [r4, #0]
 800e6e8:	f015 0506 	ands.w	r5, r5, #6
 800e6ec:	d106      	bne.n	800e6fc <_printf_common+0x48>
 800e6ee:	f104 0a19 	add.w	sl, r4, #25
 800e6f2:	68e3      	ldr	r3, [r4, #12]
 800e6f4:	6832      	ldr	r2, [r6, #0]
 800e6f6:	1a9b      	subs	r3, r3, r2
 800e6f8:	42ab      	cmp	r3, r5
 800e6fa:	dc26      	bgt.n	800e74a <_printf_common+0x96>
 800e6fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e700:	6822      	ldr	r2, [r4, #0]
 800e702:	3b00      	subs	r3, #0
 800e704:	bf18      	it	ne
 800e706:	2301      	movne	r3, #1
 800e708:	0692      	lsls	r2, r2, #26
 800e70a:	d42b      	bmi.n	800e764 <_printf_common+0xb0>
 800e70c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e710:	4641      	mov	r1, r8
 800e712:	4638      	mov	r0, r7
 800e714:	47c8      	blx	r9
 800e716:	3001      	adds	r0, #1
 800e718:	d01e      	beq.n	800e758 <_printf_common+0xa4>
 800e71a:	6823      	ldr	r3, [r4, #0]
 800e71c:	6922      	ldr	r2, [r4, #16]
 800e71e:	f003 0306 	and.w	r3, r3, #6
 800e722:	2b04      	cmp	r3, #4
 800e724:	bf02      	ittt	eq
 800e726:	68e5      	ldreq	r5, [r4, #12]
 800e728:	6833      	ldreq	r3, [r6, #0]
 800e72a:	1aed      	subeq	r5, r5, r3
 800e72c:	68a3      	ldr	r3, [r4, #8]
 800e72e:	bf0c      	ite	eq
 800e730:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e734:	2500      	movne	r5, #0
 800e736:	4293      	cmp	r3, r2
 800e738:	bfc4      	itt	gt
 800e73a:	1a9b      	subgt	r3, r3, r2
 800e73c:	18ed      	addgt	r5, r5, r3
 800e73e:	2600      	movs	r6, #0
 800e740:	341a      	adds	r4, #26
 800e742:	42b5      	cmp	r5, r6
 800e744:	d11a      	bne.n	800e77c <_printf_common+0xc8>
 800e746:	2000      	movs	r0, #0
 800e748:	e008      	b.n	800e75c <_printf_common+0xa8>
 800e74a:	2301      	movs	r3, #1
 800e74c:	4652      	mov	r2, sl
 800e74e:	4641      	mov	r1, r8
 800e750:	4638      	mov	r0, r7
 800e752:	47c8      	blx	r9
 800e754:	3001      	adds	r0, #1
 800e756:	d103      	bne.n	800e760 <_printf_common+0xac>
 800e758:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e75c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e760:	3501      	adds	r5, #1
 800e762:	e7c6      	b.n	800e6f2 <_printf_common+0x3e>
 800e764:	18e1      	adds	r1, r4, r3
 800e766:	1c5a      	adds	r2, r3, #1
 800e768:	2030      	movs	r0, #48	@ 0x30
 800e76a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e76e:	4422      	add	r2, r4
 800e770:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e774:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e778:	3302      	adds	r3, #2
 800e77a:	e7c7      	b.n	800e70c <_printf_common+0x58>
 800e77c:	2301      	movs	r3, #1
 800e77e:	4622      	mov	r2, r4
 800e780:	4641      	mov	r1, r8
 800e782:	4638      	mov	r0, r7
 800e784:	47c8      	blx	r9
 800e786:	3001      	adds	r0, #1
 800e788:	d0e6      	beq.n	800e758 <_printf_common+0xa4>
 800e78a:	3601      	adds	r6, #1
 800e78c:	e7d9      	b.n	800e742 <_printf_common+0x8e>
	...

0800e790 <_printf_i>:
 800e790:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e794:	7e0f      	ldrb	r7, [r1, #24]
 800e796:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e798:	2f78      	cmp	r7, #120	@ 0x78
 800e79a:	4691      	mov	r9, r2
 800e79c:	4680      	mov	r8, r0
 800e79e:	460c      	mov	r4, r1
 800e7a0:	469a      	mov	sl, r3
 800e7a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e7a6:	d807      	bhi.n	800e7b8 <_printf_i+0x28>
 800e7a8:	2f62      	cmp	r7, #98	@ 0x62
 800e7aa:	d80a      	bhi.n	800e7c2 <_printf_i+0x32>
 800e7ac:	2f00      	cmp	r7, #0
 800e7ae:	f000 80d1 	beq.w	800e954 <_printf_i+0x1c4>
 800e7b2:	2f58      	cmp	r7, #88	@ 0x58
 800e7b4:	f000 80b8 	beq.w	800e928 <_printf_i+0x198>
 800e7b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e7bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e7c0:	e03a      	b.n	800e838 <_printf_i+0xa8>
 800e7c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e7c6:	2b15      	cmp	r3, #21
 800e7c8:	d8f6      	bhi.n	800e7b8 <_printf_i+0x28>
 800e7ca:	a101      	add	r1, pc, #4	@ (adr r1, 800e7d0 <_printf_i+0x40>)
 800e7cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e7d0:	0800e829 	.word	0x0800e829
 800e7d4:	0800e83d 	.word	0x0800e83d
 800e7d8:	0800e7b9 	.word	0x0800e7b9
 800e7dc:	0800e7b9 	.word	0x0800e7b9
 800e7e0:	0800e7b9 	.word	0x0800e7b9
 800e7e4:	0800e7b9 	.word	0x0800e7b9
 800e7e8:	0800e83d 	.word	0x0800e83d
 800e7ec:	0800e7b9 	.word	0x0800e7b9
 800e7f0:	0800e7b9 	.word	0x0800e7b9
 800e7f4:	0800e7b9 	.word	0x0800e7b9
 800e7f8:	0800e7b9 	.word	0x0800e7b9
 800e7fc:	0800e93b 	.word	0x0800e93b
 800e800:	0800e867 	.word	0x0800e867
 800e804:	0800e8f5 	.word	0x0800e8f5
 800e808:	0800e7b9 	.word	0x0800e7b9
 800e80c:	0800e7b9 	.word	0x0800e7b9
 800e810:	0800e95d 	.word	0x0800e95d
 800e814:	0800e7b9 	.word	0x0800e7b9
 800e818:	0800e867 	.word	0x0800e867
 800e81c:	0800e7b9 	.word	0x0800e7b9
 800e820:	0800e7b9 	.word	0x0800e7b9
 800e824:	0800e8fd 	.word	0x0800e8fd
 800e828:	6833      	ldr	r3, [r6, #0]
 800e82a:	1d1a      	adds	r2, r3, #4
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	6032      	str	r2, [r6, #0]
 800e830:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e834:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e838:	2301      	movs	r3, #1
 800e83a:	e09c      	b.n	800e976 <_printf_i+0x1e6>
 800e83c:	6833      	ldr	r3, [r6, #0]
 800e83e:	6820      	ldr	r0, [r4, #0]
 800e840:	1d19      	adds	r1, r3, #4
 800e842:	6031      	str	r1, [r6, #0]
 800e844:	0606      	lsls	r6, r0, #24
 800e846:	d501      	bpl.n	800e84c <_printf_i+0xbc>
 800e848:	681d      	ldr	r5, [r3, #0]
 800e84a:	e003      	b.n	800e854 <_printf_i+0xc4>
 800e84c:	0645      	lsls	r5, r0, #25
 800e84e:	d5fb      	bpl.n	800e848 <_printf_i+0xb8>
 800e850:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e854:	2d00      	cmp	r5, #0
 800e856:	da03      	bge.n	800e860 <_printf_i+0xd0>
 800e858:	232d      	movs	r3, #45	@ 0x2d
 800e85a:	426d      	negs	r5, r5
 800e85c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e860:	4858      	ldr	r0, [pc, #352]	@ (800e9c4 <_printf_i+0x234>)
 800e862:	230a      	movs	r3, #10
 800e864:	e011      	b.n	800e88a <_printf_i+0xfa>
 800e866:	6821      	ldr	r1, [r4, #0]
 800e868:	6833      	ldr	r3, [r6, #0]
 800e86a:	0608      	lsls	r0, r1, #24
 800e86c:	f853 5b04 	ldr.w	r5, [r3], #4
 800e870:	d402      	bmi.n	800e878 <_printf_i+0xe8>
 800e872:	0649      	lsls	r1, r1, #25
 800e874:	bf48      	it	mi
 800e876:	b2ad      	uxthmi	r5, r5
 800e878:	2f6f      	cmp	r7, #111	@ 0x6f
 800e87a:	4852      	ldr	r0, [pc, #328]	@ (800e9c4 <_printf_i+0x234>)
 800e87c:	6033      	str	r3, [r6, #0]
 800e87e:	bf14      	ite	ne
 800e880:	230a      	movne	r3, #10
 800e882:	2308      	moveq	r3, #8
 800e884:	2100      	movs	r1, #0
 800e886:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e88a:	6866      	ldr	r6, [r4, #4]
 800e88c:	60a6      	str	r6, [r4, #8]
 800e88e:	2e00      	cmp	r6, #0
 800e890:	db05      	blt.n	800e89e <_printf_i+0x10e>
 800e892:	6821      	ldr	r1, [r4, #0]
 800e894:	432e      	orrs	r6, r5
 800e896:	f021 0104 	bic.w	r1, r1, #4
 800e89a:	6021      	str	r1, [r4, #0]
 800e89c:	d04b      	beq.n	800e936 <_printf_i+0x1a6>
 800e89e:	4616      	mov	r6, r2
 800e8a0:	fbb5 f1f3 	udiv	r1, r5, r3
 800e8a4:	fb03 5711 	mls	r7, r3, r1, r5
 800e8a8:	5dc7      	ldrb	r7, [r0, r7]
 800e8aa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e8ae:	462f      	mov	r7, r5
 800e8b0:	42bb      	cmp	r3, r7
 800e8b2:	460d      	mov	r5, r1
 800e8b4:	d9f4      	bls.n	800e8a0 <_printf_i+0x110>
 800e8b6:	2b08      	cmp	r3, #8
 800e8b8:	d10b      	bne.n	800e8d2 <_printf_i+0x142>
 800e8ba:	6823      	ldr	r3, [r4, #0]
 800e8bc:	07df      	lsls	r7, r3, #31
 800e8be:	d508      	bpl.n	800e8d2 <_printf_i+0x142>
 800e8c0:	6923      	ldr	r3, [r4, #16]
 800e8c2:	6861      	ldr	r1, [r4, #4]
 800e8c4:	4299      	cmp	r1, r3
 800e8c6:	bfde      	ittt	le
 800e8c8:	2330      	movle	r3, #48	@ 0x30
 800e8ca:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e8ce:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800e8d2:	1b92      	subs	r2, r2, r6
 800e8d4:	6122      	str	r2, [r4, #16]
 800e8d6:	f8cd a000 	str.w	sl, [sp]
 800e8da:	464b      	mov	r3, r9
 800e8dc:	aa03      	add	r2, sp, #12
 800e8de:	4621      	mov	r1, r4
 800e8e0:	4640      	mov	r0, r8
 800e8e2:	f7ff fee7 	bl	800e6b4 <_printf_common>
 800e8e6:	3001      	adds	r0, #1
 800e8e8:	d14a      	bne.n	800e980 <_printf_i+0x1f0>
 800e8ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e8ee:	b004      	add	sp, #16
 800e8f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8f4:	6823      	ldr	r3, [r4, #0]
 800e8f6:	f043 0320 	orr.w	r3, r3, #32
 800e8fa:	6023      	str	r3, [r4, #0]
 800e8fc:	4832      	ldr	r0, [pc, #200]	@ (800e9c8 <_printf_i+0x238>)
 800e8fe:	2778      	movs	r7, #120	@ 0x78
 800e900:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e904:	6823      	ldr	r3, [r4, #0]
 800e906:	6831      	ldr	r1, [r6, #0]
 800e908:	061f      	lsls	r7, r3, #24
 800e90a:	f851 5b04 	ldr.w	r5, [r1], #4
 800e90e:	d402      	bmi.n	800e916 <_printf_i+0x186>
 800e910:	065f      	lsls	r7, r3, #25
 800e912:	bf48      	it	mi
 800e914:	b2ad      	uxthmi	r5, r5
 800e916:	6031      	str	r1, [r6, #0]
 800e918:	07d9      	lsls	r1, r3, #31
 800e91a:	bf44      	itt	mi
 800e91c:	f043 0320 	orrmi.w	r3, r3, #32
 800e920:	6023      	strmi	r3, [r4, #0]
 800e922:	b11d      	cbz	r5, 800e92c <_printf_i+0x19c>
 800e924:	2310      	movs	r3, #16
 800e926:	e7ad      	b.n	800e884 <_printf_i+0xf4>
 800e928:	4826      	ldr	r0, [pc, #152]	@ (800e9c4 <_printf_i+0x234>)
 800e92a:	e7e9      	b.n	800e900 <_printf_i+0x170>
 800e92c:	6823      	ldr	r3, [r4, #0]
 800e92e:	f023 0320 	bic.w	r3, r3, #32
 800e932:	6023      	str	r3, [r4, #0]
 800e934:	e7f6      	b.n	800e924 <_printf_i+0x194>
 800e936:	4616      	mov	r6, r2
 800e938:	e7bd      	b.n	800e8b6 <_printf_i+0x126>
 800e93a:	6833      	ldr	r3, [r6, #0]
 800e93c:	6825      	ldr	r5, [r4, #0]
 800e93e:	6961      	ldr	r1, [r4, #20]
 800e940:	1d18      	adds	r0, r3, #4
 800e942:	6030      	str	r0, [r6, #0]
 800e944:	062e      	lsls	r6, r5, #24
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	d501      	bpl.n	800e94e <_printf_i+0x1be>
 800e94a:	6019      	str	r1, [r3, #0]
 800e94c:	e002      	b.n	800e954 <_printf_i+0x1c4>
 800e94e:	0668      	lsls	r0, r5, #25
 800e950:	d5fb      	bpl.n	800e94a <_printf_i+0x1ba>
 800e952:	8019      	strh	r1, [r3, #0]
 800e954:	2300      	movs	r3, #0
 800e956:	6123      	str	r3, [r4, #16]
 800e958:	4616      	mov	r6, r2
 800e95a:	e7bc      	b.n	800e8d6 <_printf_i+0x146>
 800e95c:	6833      	ldr	r3, [r6, #0]
 800e95e:	1d1a      	adds	r2, r3, #4
 800e960:	6032      	str	r2, [r6, #0]
 800e962:	681e      	ldr	r6, [r3, #0]
 800e964:	6862      	ldr	r2, [r4, #4]
 800e966:	2100      	movs	r1, #0
 800e968:	4630      	mov	r0, r6
 800e96a:	f7f1 fc61 	bl	8000230 <memchr>
 800e96e:	b108      	cbz	r0, 800e974 <_printf_i+0x1e4>
 800e970:	1b80      	subs	r0, r0, r6
 800e972:	6060      	str	r0, [r4, #4]
 800e974:	6863      	ldr	r3, [r4, #4]
 800e976:	6123      	str	r3, [r4, #16]
 800e978:	2300      	movs	r3, #0
 800e97a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e97e:	e7aa      	b.n	800e8d6 <_printf_i+0x146>
 800e980:	6923      	ldr	r3, [r4, #16]
 800e982:	4632      	mov	r2, r6
 800e984:	4649      	mov	r1, r9
 800e986:	4640      	mov	r0, r8
 800e988:	47d0      	blx	sl
 800e98a:	3001      	adds	r0, #1
 800e98c:	d0ad      	beq.n	800e8ea <_printf_i+0x15a>
 800e98e:	6823      	ldr	r3, [r4, #0]
 800e990:	079b      	lsls	r3, r3, #30
 800e992:	d413      	bmi.n	800e9bc <_printf_i+0x22c>
 800e994:	68e0      	ldr	r0, [r4, #12]
 800e996:	9b03      	ldr	r3, [sp, #12]
 800e998:	4298      	cmp	r0, r3
 800e99a:	bfb8      	it	lt
 800e99c:	4618      	movlt	r0, r3
 800e99e:	e7a6      	b.n	800e8ee <_printf_i+0x15e>
 800e9a0:	2301      	movs	r3, #1
 800e9a2:	4632      	mov	r2, r6
 800e9a4:	4649      	mov	r1, r9
 800e9a6:	4640      	mov	r0, r8
 800e9a8:	47d0      	blx	sl
 800e9aa:	3001      	adds	r0, #1
 800e9ac:	d09d      	beq.n	800e8ea <_printf_i+0x15a>
 800e9ae:	3501      	adds	r5, #1
 800e9b0:	68e3      	ldr	r3, [r4, #12]
 800e9b2:	9903      	ldr	r1, [sp, #12]
 800e9b4:	1a5b      	subs	r3, r3, r1
 800e9b6:	42ab      	cmp	r3, r5
 800e9b8:	dcf2      	bgt.n	800e9a0 <_printf_i+0x210>
 800e9ba:	e7eb      	b.n	800e994 <_printf_i+0x204>
 800e9bc:	2500      	movs	r5, #0
 800e9be:	f104 0619 	add.w	r6, r4, #25
 800e9c2:	e7f5      	b.n	800e9b0 <_printf_i+0x220>
 800e9c4:	08013b90 	.word	0x08013b90
 800e9c8:	08013ba1 	.word	0x08013ba1

0800e9cc <_scanf_float>:
 800e9cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9d0:	b087      	sub	sp, #28
 800e9d2:	4691      	mov	r9, r2
 800e9d4:	9303      	str	r3, [sp, #12]
 800e9d6:	688b      	ldr	r3, [r1, #8]
 800e9d8:	1e5a      	subs	r2, r3, #1
 800e9da:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800e9de:	bf81      	itttt	hi
 800e9e0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800e9e4:	eb03 0b05 	addhi.w	fp, r3, r5
 800e9e8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800e9ec:	608b      	strhi	r3, [r1, #8]
 800e9ee:	680b      	ldr	r3, [r1, #0]
 800e9f0:	460a      	mov	r2, r1
 800e9f2:	f04f 0500 	mov.w	r5, #0
 800e9f6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800e9fa:	f842 3b1c 	str.w	r3, [r2], #28
 800e9fe:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ea02:	4680      	mov	r8, r0
 800ea04:	460c      	mov	r4, r1
 800ea06:	bf98      	it	ls
 800ea08:	f04f 0b00 	movls.w	fp, #0
 800ea0c:	9201      	str	r2, [sp, #4]
 800ea0e:	4616      	mov	r6, r2
 800ea10:	46aa      	mov	sl, r5
 800ea12:	462f      	mov	r7, r5
 800ea14:	9502      	str	r5, [sp, #8]
 800ea16:	68a2      	ldr	r2, [r4, #8]
 800ea18:	b15a      	cbz	r2, 800ea32 <_scanf_float+0x66>
 800ea1a:	f8d9 3000 	ldr.w	r3, [r9]
 800ea1e:	781b      	ldrb	r3, [r3, #0]
 800ea20:	2b4e      	cmp	r3, #78	@ 0x4e
 800ea22:	d863      	bhi.n	800eaec <_scanf_float+0x120>
 800ea24:	2b40      	cmp	r3, #64	@ 0x40
 800ea26:	d83b      	bhi.n	800eaa0 <_scanf_float+0xd4>
 800ea28:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800ea2c:	b2c8      	uxtb	r0, r1
 800ea2e:	280e      	cmp	r0, #14
 800ea30:	d939      	bls.n	800eaa6 <_scanf_float+0xda>
 800ea32:	b11f      	cbz	r7, 800ea3c <_scanf_float+0x70>
 800ea34:	6823      	ldr	r3, [r4, #0]
 800ea36:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ea3a:	6023      	str	r3, [r4, #0]
 800ea3c:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800ea40:	f1ba 0f01 	cmp.w	sl, #1
 800ea44:	f200 8114 	bhi.w	800ec70 <_scanf_float+0x2a4>
 800ea48:	9b01      	ldr	r3, [sp, #4]
 800ea4a:	429e      	cmp	r6, r3
 800ea4c:	f200 8105 	bhi.w	800ec5a <_scanf_float+0x28e>
 800ea50:	2001      	movs	r0, #1
 800ea52:	b007      	add	sp, #28
 800ea54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea58:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800ea5c:	2a0d      	cmp	r2, #13
 800ea5e:	d8e8      	bhi.n	800ea32 <_scanf_float+0x66>
 800ea60:	a101      	add	r1, pc, #4	@ (adr r1, 800ea68 <_scanf_float+0x9c>)
 800ea62:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ea66:	bf00      	nop
 800ea68:	0800ebb1 	.word	0x0800ebb1
 800ea6c:	0800ea33 	.word	0x0800ea33
 800ea70:	0800ea33 	.word	0x0800ea33
 800ea74:	0800ea33 	.word	0x0800ea33
 800ea78:	0800ec0d 	.word	0x0800ec0d
 800ea7c:	0800ebe7 	.word	0x0800ebe7
 800ea80:	0800ea33 	.word	0x0800ea33
 800ea84:	0800ea33 	.word	0x0800ea33
 800ea88:	0800ebbf 	.word	0x0800ebbf
 800ea8c:	0800ea33 	.word	0x0800ea33
 800ea90:	0800ea33 	.word	0x0800ea33
 800ea94:	0800ea33 	.word	0x0800ea33
 800ea98:	0800ea33 	.word	0x0800ea33
 800ea9c:	0800eb7b 	.word	0x0800eb7b
 800eaa0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800eaa4:	e7da      	b.n	800ea5c <_scanf_float+0x90>
 800eaa6:	290e      	cmp	r1, #14
 800eaa8:	d8c3      	bhi.n	800ea32 <_scanf_float+0x66>
 800eaaa:	a001      	add	r0, pc, #4	@ (adr r0, 800eab0 <_scanf_float+0xe4>)
 800eaac:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800eab0:	0800eb6b 	.word	0x0800eb6b
 800eab4:	0800ea33 	.word	0x0800ea33
 800eab8:	0800eb6b 	.word	0x0800eb6b
 800eabc:	0800ebfb 	.word	0x0800ebfb
 800eac0:	0800ea33 	.word	0x0800ea33
 800eac4:	0800eb0d 	.word	0x0800eb0d
 800eac8:	0800eb51 	.word	0x0800eb51
 800eacc:	0800eb51 	.word	0x0800eb51
 800ead0:	0800eb51 	.word	0x0800eb51
 800ead4:	0800eb51 	.word	0x0800eb51
 800ead8:	0800eb51 	.word	0x0800eb51
 800eadc:	0800eb51 	.word	0x0800eb51
 800eae0:	0800eb51 	.word	0x0800eb51
 800eae4:	0800eb51 	.word	0x0800eb51
 800eae8:	0800eb51 	.word	0x0800eb51
 800eaec:	2b6e      	cmp	r3, #110	@ 0x6e
 800eaee:	d809      	bhi.n	800eb04 <_scanf_float+0x138>
 800eaf0:	2b60      	cmp	r3, #96	@ 0x60
 800eaf2:	d8b1      	bhi.n	800ea58 <_scanf_float+0x8c>
 800eaf4:	2b54      	cmp	r3, #84	@ 0x54
 800eaf6:	d07b      	beq.n	800ebf0 <_scanf_float+0x224>
 800eaf8:	2b59      	cmp	r3, #89	@ 0x59
 800eafa:	d19a      	bne.n	800ea32 <_scanf_float+0x66>
 800eafc:	2d07      	cmp	r5, #7
 800eafe:	d198      	bne.n	800ea32 <_scanf_float+0x66>
 800eb00:	2508      	movs	r5, #8
 800eb02:	e02f      	b.n	800eb64 <_scanf_float+0x198>
 800eb04:	2b74      	cmp	r3, #116	@ 0x74
 800eb06:	d073      	beq.n	800ebf0 <_scanf_float+0x224>
 800eb08:	2b79      	cmp	r3, #121	@ 0x79
 800eb0a:	e7f6      	b.n	800eafa <_scanf_float+0x12e>
 800eb0c:	6821      	ldr	r1, [r4, #0]
 800eb0e:	05c8      	lsls	r0, r1, #23
 800eb10:	d51e      	bpl.n	800eb50 <_scanf_float+0x184>
 800eb12:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800eb16:	6021      	str	r1, [r4, #0]
 800eb18:	3701      	adds	r7, #1
 800eb1a:	f1bb 0f00 	cmp.w	fp, #0
 800eb1e:	d003      	beq.n	800eb28 <_scanf_float+0x15c>
 800eb20:	3201      	adds	r2, #1
 800eb22:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800eb26:	60a2      	str	r2, [r4, #8]
 800eb28:	68a3      	ldr	r3, [r4, #8]
 800eb2a:	3b01      	subs	r3, #1
 800eb2c:	60a3      	str	r3, [r4, #8]
 800eb2e:	6923      	ldr	r3, [r4, #16]
 800eb30:	3301      	adds	r3, #1
 800eb32:	6123      	str	r3, [r4, #16]
 800eb34:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800eb38:	3b01      	subs	r3, #1
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	f8c9 3004 	str.w	r3, [r9, #4]
 800eb40:	f340 8082 	ble.w	800ec48 <_scanf_float+0x27c>
 800eb44:	f8d9 3000 	ldr.w	r3, [r9]
 800eb48:	3301      	adds	r3, #1
 800eb4a:	f8c9 3000 	str.w	r3, [r9]
 800eb4e:	e762      	b.n	800ea16 <_scanf_float+0x4a>
 800eb50:	eb1a 0105 	adds.w	r1, sl, r5
 800eb54:	f47f af6d 	bne.w	800ea32 <_scanf_float+0x66>
 800eb58:	6822      	ldr	r2, [r4, #0]
 800eb5a:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800eb5e:	6022      	str	r2, [r4, #0]
 800eb60:	460d      	mov	r5, r1
 800eb62:	468a      	mov	sl, r1
 800eb64:	f806 3b01 	strb.w	r3, [r6], #1
 800eb68:	e7de      	b.n	800eb28 <_scanf_float+0x15c>
 800eb6a:	6822      	ldr	r2, [r4, #0]
 800eb6c:	0610      	lsls	r0, r2, #24
 800eb6e:	f57f af60 	bpl.w	800ea32 <_scanf_float+0x66>
 800eb72:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800eb76:	6022      	str	r2, [r4, #0]
 800eb78:	e7f4      	b.n	800eb64 <_scanf_float+0x198>
 800eb7a:	f1ba 0f00 	cmp.w	sl, #0
 800eb7e:	d10c      	bne.n	800eb9a <_scanf_float+0x1ce>
 800eb80:	b977      	cbnz	r7, 800eba0 <_scanf_float+0x1d4>
 800eb82:	6822      	ldr	r2, [r4, #0]
 800eb84:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800eb88:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800eb8c:	d108      	bne.n	800eba0 <_scanf_float+0x1d4>
 800eb8e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800eb92:	6022      	str	r2, [r4, #0]
 800eb94:	f04f 0a01 	mov.w	sl, #1
 800eb98:	e7e4      	b.n	800eb64 <_scanf_float+0x198>
 800eb9a:	f1ba 0f02 	cmp.w	sl, #2
 800eb9e:	d050      	beq.n	800ec42 <_scanf_float+0x276>
 800eba0:	2d01      	cmp	r5, #1
 800eba2:	d002      	beq.n	800ebaa <_scanf_float+0x1de>
 800eba4:	2d04      	cmp	r5, #4
 800eba6:	f47f af44 	bne.w	800ea32 <_scanf_float+0x66>
 800ebaa:	3501      	adds	r5, #1
 800ebac:	b2ed      	uxtb	r5, r5
 800ebae:	e7d9      	b.n	800eb64 <_scanf_float+0x198>
 800ebb0:	f1ba 0f01 	cmp.w	sl, #1
 800ebb4:	f47f af3d 	bne.w	800ea32 <_scanf_float+0x66>
 800ebb8:	f04f 0a02 	mov.w	sl, #2
 800ebbc:	e7d2      	b.n	800eb64 <_scanf_float+0x198>
 800ebbe:	b975      	cbnz	r5, 800ebde <_scanf_float+0x212>
 800ebc0:	2f00      	cmp	r7, #0
 800ebc2:	f47f af37 	bne.w	800ea34 <_scanf_float+0x68>
 800ebc6:	6822      	ldr	r2, [r4, #0]
 800ebc8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ebcc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ebd0:	f040 8103 	bne.w	800edda <_scanf_float+0x40e>
 800ebd4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ebd8:	6022      	str	r2, [r4, #0]
 800ebda:	2501      	movs	r5, #1
 800ebdc:	e7c2      	b.n	800eb64 <_scanf_float+0x198>
 800ebde:	2d03      	cmp	r5, #3
 800ebe0:	d0e3      	beq.n	800ebaa <_scanf_float+0x1de>
 800ebe2:	2d05      	cmp	r5, #5
 800ebe4:	e7df      	b.n	800eba6 <_scanf_float+0x1da>
 800ebe6:	2d02      	cmp	r5, #2
 800ebe8:	f47f af23 	bne.w	800ea32 <_scanf_float+0x66>
 800ebec:	2503      	movs	r5, #3
 800ebee:	e7b9      	b.n	800eb64 <_scanf_float+0x198>
 800ebf0:	2d06      	cmp	r5, #6
 800ebf2:	f47f af1e 	bne.w	800ea32 <_scanf_float+0x66>
 800ebf6:	2507      	movs	r5, #7
 800ebf8:	e7b4      	b.n	800eb64 <_scanf_float+0x198>
 800ebfa:	6822      	ldr	r2, [r4, #0]
 800ebfc:	0591      	lsls	r1, r2, #22
 800ebfe:	f57f af18 	bpl.w	800ea32 <_scanf_float+0x66>
 800ec02:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800ec06:	6022      	str	r2, [r4, #0]
 800ec08:	9702      	str	r7, [sp, #8]
 800ec0a:	e7ab      	b.n	800eb64 <_scanf_float+0x198>
 800ec0c:	6822      	ldr	r2, [r4, #0]
 800ec0e:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800ec12:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800ec16:	d005      	beq.n	800ec24 <_scanf_float+0x258>
 800ec18:	0550      	lsls	r0, r2, #21
 800ec1a:	f57f af0a 	bpl.w	800ea32 <_scanf_float+0x66>
 800ec1e:	2f00      	cmp	r7, #0
 800ec20:	f000 80db 	beq.w	800edda <_scanf_float+0x40e>
 800ec24:	0591      	lsls	r1, r2, #22
 800ec26:	bf58      	it	pl
 800ec28:	9902      	ldrpl	r1, [sp, #8]
 800ec2a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ec2e:	bf58      	it	pl
 800ec30:	1a79      	subpl	r1, r7, r1
 800ec32:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800ec36:	bf58      	it	pl
 800ec38:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ec3c:	6022      	str	r2, [r4, #0]
 800ec3e:	2700      	movs	r7, #0
 800ec40:	e790      	b.n	800eb64 <_scanf_float+0x198>
 800ec42:	f04f 0a03 	mov.w	sl, #3
 800ec46:	e78d      	b.n	800eb64 <_scanf_float+0x198>
 800ec48:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ec4c:	4649      	mov	r1, r9
 800ec4e:	4640      	mov	r0, r8
 800ec50:	4798      	blx	r3
 800ec52:	2800      	cmp	r0, #0
 800ec54:	f43f aedf 	beq.w	800ea16 <_scanf_float+0x4a>
 800ec58:	e6eb      	b.n	800ea32 <_scanf_float+0x66>
 800ec5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ec5e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ec62:	464a      	mov	r2, r9
 800ec64:	4640      	mov	r0, r8
 800ec66:	4798      	blx	r3
 800ec68:	6923      	ldr	r3, [r4, #16]
 800ec6a:	3b01      	subs	r3, #1
 800ec6c:	6123      	str	r3, [r4, #16]
 800ec6e:	e6eb      	b.n	800ea48 <_scanf_float+0x7c>
 800ec70:	1e6b      	subs	r3, r5, #1
 800ec72:	2b06      	cmp	r3, #6
 800ec74:	d824      	bhi.n	800ecc0 <_scanf_float+0x2f4>
 800ec76:	2d02      	cmp	r5, #2
 800ec78:	d836      	bhi.n	800ece8 <_scanf_float+0x31c>
 800ec7a:	9b01      	ldr	r3, [sp, #4]
 800ec7c:	429e      	cmp	r6, r3
 800ec7e:	f67f aee7 	bls.w	800ea50 <_scanf_float+0x84>
 800ec82:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ec86:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ec8a:	464a      	mov	r2, r9
 800ec8c:	4640      	mov	r0, r8
 800ec8e:	4798      	blx	r3
 800ec90:	6923      	ldr	r3, [r4, #16]
 800ec92:	3b01      	subs	r3, #1
 800ec94:	6123      	str	r3, [r4, #16]
 800ec96:	e7f0      	b.n	800ec7a <_scanf_float+0x2ae>
 800ec98:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ec9c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800eca0:	464a      	mov	r2, r9
 800eca2:	4640      	mov	r0, r8
 800eca4:	4798      	blx	r3
 800eca6:	6923      	ldr	r3, [r4, #16]
 800eca8:	3b01      	subs	r3, #1
 800ecaa:	6123      	str	r3, [r4, #16]
 800ecac:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800ecb0:	fa5f fa8a 	uxtb.w	sl, sl
 800ecb4:	f1ba 0f02 	cmp.w	sl, #2
 800ecb8:	d1ee      	bne.n	800ec98 <_scanf_float+0x2cc>
 800ecba:	3d03      	subs	r5, #3
 800ecbc:	b2ed      	uxtb	r5, r5
 800ecbe:	1b76      	subs	r6, r6, r5
 800ecc0:	6823      	ldr	r3, [r4, #0]
 800ecc2:	05da      	lsls	r2, r3, #23
 800ecc4:	d530      	bpl.n	800ed28 <_scanf_float+0x35c>
 800ecc6:	055b      	lsls	r3, r3, #21
 800ecc8:	d511      	bpl.n	800ecee <_scanf_float+0x322>
 800ecca:	9b01      	ldr	r3, [sp, #4]
 800eccc:	429e      	cmp	r6, r3
 800ecce:	f67f aebf 	bls.w	800ea50 <_scanf_float+0x84>
 800ecd2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ecd6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ecda:	464a      	mov	r2, r9
 800ecdc:	4640      	mov	r0, r8
 800ecde:	4798      	blx	r3
 800ece0:	6923      	ldr	r3, [r4, #16]
 800ece2:	3b01      	subs	r3, #1
 800ece4:	6123      	str	r3, [r4, #16]
 800ece6:	e7f0      	b.n	800ecca <_scanf_float+0x2fe>
 800ece8:	46aa      	mov	sl, r5
 800ecea:	46b3      	mov	fp, r6
 800ecec:	e7de      	b.n	800ecac <_scanf_float+0x2e0>
 800ecee:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ecf2:	6923      	ldr	r3, [r4, #16]
 800ecf4:	2965      	cmp	r1, #101	@ 0x65
 800ecf6:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800ecfa:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800ecfe:	6123      	str	r3, [r4, #16]
 800ed00:	d00c      	beq.n	800ed1c <_scanf_float+0x350>
 800ed02:	2945      	cmp	r1, #69	@ 0x45
 800ed04:	d00a      	beq.n	800ed1c <_scanf_float+0x350>
 800ed06:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ed0a:	464a      	mov	r2, r9
 800ed0c:	4640      	mov	r0, r8
 800ed0e:	4798      	blx	r3
 800ed10:	6923      	ldr	r3, [r4, #16]
 800ed12:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ed16:	3b01      	subs	r3, #1
 800ed18:	1eb5      	subs	r5, r6, #2
 800ed1a:	6123      	str	r3, [r4, #16]
 800ed1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ed20:	464a      	mov	r2, r9
 800ed22:	4640      	mov	r0, r8
 800ed24:	4798      	blx	r3
 800ed26:	462e      	mov	r6, r5
 800ed28:	6822      	ldr	r2, [r4, #0]
 800ed2a:	f012 0210 	ands.w	r2, r2, #16
 800ed2e:	d001      	beq.n	800ed34 <_scanf_float+0x368>
 800ed30:	2000      	movs	r0, #0
 800ed32:	e68e      	b.n	800ea52 <_scanf_float+0x86>
 800ed34:	7032      	strb	r2, [r6, #0]
 800ed36:	6823      	ldr	r3, [r4, #0]
 800ed38:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800ed3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ed40:	d125      	bne.n	800ed8e <_scanf_float+0x3c2>
 800ed42:	9b02      	ldr	r3, [sp, #8]
 800ed44:	429f      	cmp	r7, r3
 800ed46:	d00a      	beq.n	800ed5e <_scanf_float+0x392>
 800ed48:	1bda      	subs	r2, r3, r7
 800ed4a:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800ed4e:	429e      	cmp	r6, r3
 800ed50:	bf28      	it	cs
 800ed52:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800ed56:	4922      	ldr	r1, [pc, #136]	@ (800ede0 <_scanf_float+0x414>)
 800ed58:	4630      	mov	r0, r6
 800ed5a:	f000 fb09 	bl	800f370 <siprintf>
 800ed5e:	9901      	ldr	r1, [sp, #4]
 800ed60:	2200      	movs	r2, #0
 800ed62:	4640      	mov	r0, r8
 800ed64:	f7ff f928 	bl	800dfb8 <_strtod_r>
 800ed68:	9b03      	ldr	r3, [sp, #12]
 800ed6a:	6821      	ldr	r1, [r4, #0]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	f011 0f02 	tst.w	r1, #2
 800ed72:	ec57 6b10 	vmov	r6, r7, d0
 800ed76:	f103 0204 	add.w	r2, r3, #4
 800ed7a:	d015      	beq.n	800eda8 <_scanf_float+0x3dc>
 800ed7c:	9903      	ldr	r1, [sp, #12]
 800ed7e:	600a      	str	r2, [r1, #0]
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	e9c3 6700 	strd	r6, r7, [r3]
 800ed86:	68e3      	ldr	r3, [r4, #12]
 800ed88:	3301      	adds	r3, #1
 800ed8a:	60e3      	str	r3, [r4, #12]
 800ed8c:	e7d0      	b.n	800ed30 <_scanf_float+0x364>
 800ed8e:	9b04      	ldr	r3, [sp, #16]
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d0e4      	beq.n	800ed5e <_scanf_float+0x392>
 800ed94:	9905      	ldr	r1, [sp, #20]
 800ed96:	230a      	movs	r3, #10
 800ed98:	3101      	adds	r1, #1
 800ed9a:	4640      	mov	r0, r8
 800ed9c:	f002 fdc8 	bl	8011930 <_strtol_r>
 800eda0:	9b04      	ldr	r3, [sp, #16]
 800eda2:	9e05      	ldr	r6, [sp, #20]
 800eda4:	1ac2      	subs	r2, r0, r3
 800eda6:	e7d0      	b.n	800ed4a <_scanf_float+0x37e>
 800eda8:	f011 0f04 	tst.w	r1, #4
 800edac:	9903      	ldr	r1, [sp, #12]
 800edae:	600a      	str	r2, [r1, #0]
 800edb0:	d1e6      	bne.n	800ed80 <_scanf_float+0x3b4>
 800edb2:	681d      	ldr	r5, [r3, #0]
 800edb4:	4632      	mov	r2, r6
 800edb6:	463b      	mov	r3, r7
 800edb8:	4630      	mov	r0, r6
 800edba:	4639      	mov	r1, r7
 800edbc:	f7f1 fee6 	bl	8000b8c <__aeabi_dcmpun>
 800edc0:	b128      	cbz	r0, 800edce <_scanf_float+0x402>
 800edc2:	4808      	ldr	r0, [pc, #32]	@ (800ede4 <_scanf_float+0x418>)
 800edc4:	f000 fe30 	bl	800fa28 <nanf>
 800edc8:	ed85 0a00 	vstr	s0, [r5]
 800edcc:	e7db      	b.n	800ed86 <_scanf_float+0x3ba>
 800edce:	4630      	mov	r0, r6
 800edd0:	4639      	mov	r1, r7
 800edd2:	f7f1 ff39 	bl	8000c48 <__aeabi_d2f>
 800edd6:	6028      	str	r0, [r5, #0]
 800edd8:	e7d5      	b.n	800ed86 <_scanf_float+0x3ba>
 800edda:	2700      	movs	r7, #0
 800eddc:	e62e      	b.n	800ea3c <_scanf_float+0x70>
 800edde:	bf00      	nop
 800ede0:	08013bb2 	.word	0x08013bb2
 800ede4:	08013b7b 	.word	0x08013b7b

0800ede8 <_fclose_r>:
 800ede8:	b570      	push	{r4, r5, r6, lr}
 800edea:	4605      	mov	r5, r0
 800edec:	460c      	mov	r4, r1
 800edee:	b1b9      	cbz	r1, 800ee20 <_fclose_r+0x38>
 800edf0:	b118      	cbz	r0, 800edfa <_fclose_r+0x12>
 800edf2:	6a03      	ldr	r3, [r0, #32]
 800edf4:	b90b      	cbnz	r3, 800edfa <_fclose_r+0x12>
 800edf6:	f000 f9f3 	bl	800f1e0 <__sinit>
 800edfa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800edfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee00:	07d6      	lsls	r6, r2, #31
 800ee02:	d404      	bmi.n	800ee0e <_fclose_r+0x26>
 800ee04:	0598      	lsls	r0, r3, #22
 800ee06:	d40e      	bmi.n	800ee26 <_fclose_r+0x3e>
 800ee08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ee0a:	f000 fdf3 	bl	800f9f4 <__retarget_lock_acquire_recursive>
 800ee0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee12:	b943      	cbnz	r3, 800ee26 <_fclose_r+0x3e>
 800ee14:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ee16:	07d9      	lsls	r1, r3, #31
 800ee18:	d402      	bmi.n	800ee20 <_fclose_r+0x38>
 800ee1a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ee1c:	f000 fdeb 	bl	800f9f6 <__retarget_lock_release_recursive>
 800ee20:	2600      	movs	r6, #0
 800ee22:	4630      	mov	r0, r6
 800ee24:	bd70      	pop	{r4, r5, r6, pc}
 800ee26:	4621      	mov	r1, r4
 800ee28:	4628      	mov	r0, r5
 800ee2a:	f000 f83b 	bl	800eea4 <__sflush_r>
 800ee2e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ee30:	4606      	mov	r6, r0
 800ee32:	b133      	cbz	r3, 800ee42 <_fclose_r+0x5a>
 800ee34:	6a21      	ldr	r1, [r4, #32]
 800ee36:	4628      	mov	r0, r5
 800ee38:	4798      	blx	r3
 800ee3a:	2800      	cmp	r0, #0
 800ee3c:	bfb8      	it	lt
 800ee3e:	f04f 36ff 	movlt.w	r6, #4294967295	@ 0xffffffff
 800ee42:	89a3      	ldrh	r3, [r4, #12]
 800ee44:	061a      	lsls	r2, r3, #24
 800ee46:	d503      	bpl.n	800ee50 <_fclose_r+0x68>
 800ee48:	6921      	ldr	r1, [r4, #16]
 800ee4a:	4628      	mov	r0, r5
 800ee4c:	f001 fc54 	bl	80106f8 <_free_r>
 800ee50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ee52:	b141      	cbz	r1, 800ee66 <_fclose_r+0x7e>
 800ee54:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ee58:	4299      	cmp	r1, r3
 800ee5a:	d002      	beq.n	800ee62 <_fclose_r+0x7a>
 800ee5c:	4628      	mov	r0, r5
 800ee5e:	f001 fc4b 	bl	80106f8 <_free_r>
 800ee62:	2300      	movs	r3, #0
 800ee64:	6363      	str	r3, [r4, #52]	@ 0x34
 800ee66:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ee68:	b121      	cbz	r1, 800ee74 <_fclose_r+0x8c>
 800ee6a:	4628      	mov	r0, r5
 800ee6c:	f001 fc44 	bl	80106f8 <_free_r>
 800ee70:	2300      	movs	r3, #0
 800ee72:	64a3      	str	r3, [r4, #72]	@ 0x48
 800ee74:	f000 f956 	bl	800f124 <__sfp_lock_acquire>
 800ee78:	2300      	movs	r3, #0
 800ee7a:	81a3      	strh	r3, [r4, #12]
 800ee7c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ee7e:	07db      	lsls	r3, r3, #31
 800ee80:	d402      	bmi.n	800ee88 <_fclose_r+0xa0>
 800ee82:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ee84:	f000 fdb7 	bl	800f9f6 <__retarget_lock_release_recursive>
 800ee88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ee8a:	f000 fdb2 	bl	800f9f2 <__retarget_lock_close_recursive>
 800ee8e:	f000 f94f 	bl	800f130 <__sfp_lock_release>
 800ee92:	e7c6      	b.n	800ee22 <_fclose_r+0x3a>

0800ee94 <fclose>:
 800ee94:	4b02      	ldr	r3, [pc, #8]	@ (800eea0 <fclose+0xc>)
 800ee96:	4601      	mov	r1, r0
 800ee98:	6818      	ldr	r0, [r3, #0]
 800ee9a:	f7ff bfa5 	b.w	800ede8 <_fclose_r>
 800ee9e:	bf00      	nop
 800eea0:	200001c0 	.word	0x200001c0

0800eea4 <__sflush_r>:
 800eea4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800eea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eeac:	0716      	lsls	r6, r2, #28
 800eeae:	4605      	mov	r5, r0
 800eeb0:	460c      	mov	r4, r1
 800eeb2:	d454      	bmi.n	800ef5e <__sflush_r+0xba>
 800eeb4:	684b      	ldr	r3, [r1, #4]
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	dc02      	bgt.n	800eec0 <__sflush_r+0x1c>
 800eeba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	dd48      	ble.n	800ef52 <__sflush_r+0xae>
 800eec0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800eec2:	2e00      	cmp	r6, #0
 800eec4:	d045      	beq.n	800ef52 <__sflush_r+0xae>
 800eec6:	2300      	movs	r3, #0
 800eec8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800eecc:	682f      	ldr	r7, [r5, #0]
 800eece:	6a21      	ldr	r1, [r4, #32]
 800eed0:	602b      	str	r3, [r5, #0]
 800eed2:	d030      	beq.n	800ef36 <__sflush_r+0x92>
 800eed4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800eed6:	89a3      	ldrh	r3, [r4, #12]
 800eed8:	0759      	lsls	r1, r3, #29
 800eeda:	d505      	bpl.n	800eee8 <__sflush_r+0x44>
 800eedc:	6863      	ldr	r3, [r4, #4]
 800eede:	1ad2      	subs	r2, r2, r3
 800eee0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800eee2:	b10b      	cbz	r3, 800eee8 <__sflush_r+0x44>
 800eee4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800eee6:	1ad2      	subs	r2, r2, r3
 800eee8:	2300      	movs	r3, #0
 800eeea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800eeec:	6a21      	ldr	r1, [r4, #32]
 800eeee:	4628      	mov	r0, r5
 800eef0:	47b0      	blx	r6
 800eef2:	1c43      	adds	r3, r0, #1
 800eef4:	89a3      	ldrh	r3, [r4, #12]
 800eef6:	d106      	bne.n	800ef06 <__sflush_r+0x62>
 800eef8:	6829      	ldr	r1, [r5, #0]
 800eefa:	291d      	cmp	r1, #29
 800eefc:	d82b      	bhi.n	800ef56 <__sflush_r+0xb2>
 800eefe:	4a2a      	ldr	r2, [pc, #168]	@ (800efa8 <__sflush_r+0x104>)
 800ef00:	40ca      	lsrs	r2, r1
 800ef02:	07d6      	lsls	r6, r2, #31
 800ef04:	d527      	bpl.n	800ef56 <__sflush_r+0xb2>
 800ef06:	2200      	movs	r2, #0
 800ef08:	6062      	str	r2, [r4, #4]
 800ef0a:	04d9      	lsls	r1, r3, #19
 800ef0c:	6922      	ldr	r2, [r4, #16]
 800ef0e:	6022      	str	r2, [r4, #0]
 800ef10:	d504      	bpl.n	800ef1c <__sflush_r+0x78>
 800ef12:	1c42      	adds	r2, r0, #1
 800ef14:	d101      	bne.n	800ef1a <__sflush_r+0x76>
 800ef16:	682b      	ldr	r3, [r5, #0]
 800ef18:	b903      	cbnz	r3, 800ef1c <__sflush_r+0x78>
 800ef1a:	6560      	str	r0, [r4, #84]	@ 0x54
 800ef1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ef1e:	602f      	str	r7, [r5, #0]
 800ef20:	b1b9      	cbz	r1, 800ef52 <__sflush_r+0xae>
 800ef22:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ef26:	4299      	cmp	r1, r3
 800ef28:	d002      	beq.n	800ef30 <__sflush_r+0x8c>
 800ef2a:	4628      	mov	r0, r5
 800ef2c:	f001 fbe4 	bl	80106f8 <_free_r>
 800ef30:	2300      	movs	r3, #0
 800ef32:	6363      	str	r3, [r4, #52]	@ 0x34
 800ef34:	e00d      	b.n	800ef52 <__sflush_r+0xae>
 800ef36:	2301      	movs	r3, #1
 800ef38:	4628      	mov	r0, r5
 800ef3a:	47b0      	blx	r6
 800ef3c:	4602      	mov	r2, r0
 800ef3e:	1c50      	adds	r0, r2, #1
 800ef40:	d1c9      	bne.n	800eed6 <__sflush_r+0x32>
 800ef42:	682b      	ldr	r3, [r5, #0]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d0c6      	beq.n	800eed6 <__sflush_r+0x32>
 800ef48:	2b1d      	cmp	r3, #29
 800ef4a:	d001      	beq.n	800ef50 <__sflush_r+0xac>
 800ef4c:	2b16      	cmp	r3, #22
 800ef4e:	d11e      	bne.n	800ef8e <__sflush_r+0xea>
 800ef50:	602f      	str	r7, [r5, #0]
 800ef52:	2000      	movs	r0, #0
 800ef54:	e022      	b.n	800ef9c <__sflush_r+0xf8>
 800ef56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ef5a:	b21b      	sxth	r3, r3
 800ef5c:	e01b      	b.n	800ef96 <__sflush_r+0xf2>
 800ef5e:	690f      	ldr	r7, [r1, #16]
 800ef60:	2f00      	cmp	r7, #0
 800ef62:	d0f6      	beq.n	800ef52 <__sflush_r+0xae>
 800ef64:	0793      	lsls	r3, r2, #30
 800ef66:	680e      	ldr	r6, [r1, #0]
 800ef68:	bf08      	it	eq
 800ef6a:	694b      	ldreq	r3, [r1, #20]
 800ef6c:	600f      	str	r7, [r1, #0]
 800ef6e:	bf18      	it	ne
 800ef70:	2300      	movne	r3, #0
 800ef72:	eba6 0807 	sub.w	r8, r6, r7
 800ef76:	608b      	str	r3, [r1, #8]
 800ef78:	f1b8 0f00 	cmp.w	r8, #0
 800ef7c:	dde9      	ble.n	800ef52 <__sflush_r+0xae>
 800ef7e:	6a21      	ldr	r1, [r4, #32]
 800ef80:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ef82:	4643      	mov	r3, r8
 800ef84:	463a      	mov	r2, r7
 800ef86:	4628      	mov	r0, r5
 800ef88:	47b0      	blx	r6
 800ef8a:	2800      	cmp	r0, #0
 800ef8c:	dc08      	bgt.n	800efa0 <__sflush_r+0xfc>
 800ef8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ef96:	81a3      	strh	r3, [r4, #12]
 800ef98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ef9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efa0:	4407      	add	r7, r0
 800efa2:	eba8 0800 	sub.w	r8, r8, r0
 800efa6:	e7e7      	b.n	800ef78 <__sflush_r+0xd4>
 800efa8:	20400001 	.word	0x20400001

0800efac <_fflush_r>:
 800efac:	b538      	push	{r3, r4, r5, lr}
 800efae:	690b      	ldr	r3, [r1, #16]
 800efb0:	4605      	mov	r5, r0
 800efb2:	460c      	mov	r4, r1
 800efb4:	b913      	cbnz	r3, 800efbc <_fflush_r+0x10>
 800efb6:	2500      	movs	r5, #0
 800efb8:	4628      	mov	r0, r5
 800efba:	bd38      	pop	{r3, r4, r5, pc}
 800efbc:	b118      	cbz	r0, 800efc6 <_fflush_r+0x1a>
 800efbe:	6a03      	ldr	r3, [r0, #32]
 800efc0:	b90b      	cbnz	r3, 800efc6 <_fflush_r+0x1a>
 800efc2:	f000 f90d 	bl	800f1e0 <__sinit>
 800efc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d0f3      	beq.n	800efb6 <_fflush_r+0xa>
 800efce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800efd0:	07d0      	lsls	r0, r2, #31
 800efd2:	d404      	bmi.n	800efde <_fflush_r+0x32>
 800efd4:	0599      	lsls	r1, r3, #22
 800efd6:	d402      	bmi.n	800efde <_fflush_r+0x32>
 800efd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800efda:	f000 fd0b 	bl	800f9f4 <__retarget_lock_acquire_recursive>
 800efde:	4628      	mov	r0, r5
 800efe0:	4621      	mov	r1, r4
 800efe2:	f7ff ff5f 	bl	800eea4 <__sflush_r>
 800efe6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800efe8:	07da      	lsls	r2, r3, #31
 800efea:	4605      	mov	r5, r0
 800efec:	d4e4      	bmi.n	800efb8 <_fflush_r+0xc>
 800efee:	89a3      	ldrh	r3, [r4, #12]
 800eff0:	059b      	lsls	r3, r3, #22
 800eff2:	d4e1      	bmi.n	800efb8 <_fflush_r+0xc>
 800eff4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eff6:	f000 fcfe 	bl	800f9f6 <__retarget_lock_release_recursive>
 800effa:	e7dd      	b.n	800efb8 <_fflush_r+0xc>

0800effc <fflush>:
 800effc:	4601      	mov	r1, r0
 800effe:	b920      	cbnz	r0, 800f00a <fflush+0xe>
 800f000:	4a04      	ldr	r2, [pc, #16]	@ (800f014 <fflush+0x18>)
 800f002:	4905      	ldr	r1, [pc, #20]	@ (800f018 <fflush+0x1c>)
 800f004:	4805      	ldr	r0, [pc, #20]	@ (800f01c <fflush+0x20>)
 800f006:	f000 b915 	b.w	800f234 <_fwalk_sglue>
 800f00a:	4b05      	ldr	r3, [pc, #20]	@ (800f020 <fflush+0x24>)
 800f00c:	6818      	ldr	r0, [r3, #0]
 800f00e:	f7ff bfcd 	b.w	800efac <_fflush_r>
 800f012:	bf00      	nop
 800f014:	20000048 	.word	0x20000048
 800f018:	0800efad 	.word	0x0800efad
 800f01c:	200001c4 	.word	0x200001c4
 800f020:	200001c0 	.word	0x200001c0

0800f024 <std>:
 800f024:	2300      	movs	r3, #0
 800f026:	b510      	push	{r4, lr}
 800f028:	4604      	mov	r4, r0
 800f02a:	e9c0 3300 	strd	r3, r3, [r0]
 800f02e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f032:	6083      	str	r3, [r0, #8]
 800f034:	8181      	strh	r1, [r0, #12]
 800f036:	6643      	str	r3, [r0, #100]	@ 0x64
 800f038:	81c2      	strh	r2, [r0, #14]
 800f03a:	6183      	str	r3, [r0, #24]
 800f03c:	4619      	mov	r1, r3
 800f03e:	2208      	movs	r2, #8
 800f040:	305c      	adds	r0, #92	@ 0x5c
 800f042:	f000 fb73 	bl	800f72c <memset>
 800f046:	4b0d      	ldr	r3, [pc, #52]	@ (800f07c <std+0x58>)
 800f048:	6263      	str	r3, [r4, #36]	@ 0x24
 800f04a:	4b0d      	ldr	r3, [pc, #52]	@ (800f080 <std+0x5c>)
 800f04c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f04e:	4b0d      	ldr	r3, [pc, #52]	@ (800f084 <std+0x60>)
 800f050:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f052:	4b0d      	ldr	r3, [pc, #52]	@ (800f088 <std+0x64>)
 800f054:	6323      	str	r3, [r4, #48]	@ 0x30
 800f056:	4b0d      	ldr	r3, [pc, #52]	@ (800f08c <std+0x68>)
 800f058:	6224      	str	r4, [r4, #32]
 800f05a:	429c      	cmp	r4, r3
 800f05c:	d006      	beq.n	800f06c <std+0x48>
 800f05e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f062:	4294      	cmp	r4, r2
 800f064:	d002      	beq.n	800f06c <std+0x48>
 800f066:	33d0      	adds	r3, #208	@ 0xd0
 800f068:	429c      	cmp	r4, r3
 800f06a:	d105      	bne.n	800f078 <std+0x54>
 800f06c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f074:	f000 bcbc 	b.w	800f9f0 <__retarget_lock_init_recursive>
 800f078:	bd10      	pop	{r4, pc}
 800f07a:	bf00      	nop
 800f07c:	0800f3b5 	.word	0x0800f3b5
 800f080:	0800f3d7 	.word	0x0800f3d7
 800f084:	0800f40f 	.word	0x0800f40f
 800f088:	0800f433 	.word	0x0800f433
 800f08c:	20000508 	.word	0x20000508

0800f090 <stdio_exit_handler>:
 800f090:	4a02      	ldr	r2, [pc, #8]	@ (800f09c <stdio_exit_handler+0xc>)
 800f092:	4903      	ldr	r1, [pc, #12]	@ (800f0a0 <stdio_exit_handler+0x10>)
 800f094:	4803      	ldr	r0, [pc, #12]	@ (800f0a4 <stdio_exit_handler+0x14>)
 800f096:	f000 b8cd 	b.w	800f234 <_fwalk_sglue>
 800f09a:	bf00      	nop
 800f09c:	20000048 	.word	0x20000048
 800f0a0:	0800efad 	.word	0x0800efad
 800f0a4:	200001c4 	.word	0x200001c4

0800f0a8 <cleanup_stdio>:
 800f0a8:	6841      	ldr	r1, [r0, #4]
 800f0aa:	4b0c      	ldr	r3, [pc, #48]	@ (800f0dc <cleanup_stdio+0x34>)
 800f0ac:	4299      	cmp	r1, r3
 800f0ae:	b510      	push	{r4, lr}
 800f0b0:	4604      	mov	r4, r0
 800f0b2:	d001      	beq.n	800f0b8 <cleanup_stdio+0x10>
 800f0b4:	f7ff ff7a 	bl	800efac <_fflush_r>
 800f0b8:	68a1      	ldr	r1, [r4, #8]
 800f0ba:	4b09      	ldr	r3, [pc, #36]	@ (800f0e0 <cleanup_stdio+0x38>)
 800f0bc:	4299      	cmp	r1, r3
 800f0be:	d002      	beq.n	800f0c6 <cleanup_stdio+0x1e>
 800f0c0:	4620      	mov	r0, r4
 800f0c2:	f7ff ff73 	bl	800efac <_fflush_r>
 800f0c6:	68e1      	ldr	r1, [r4, #12]
 800f0c8:	4b06      	ldr	r3, [pc, #24]	@ (800f0e4 <cleanup_stdio+0x3c>)
 800f0ca:	4299      	cmp	r1, r3
 800f0cc:	d004      	beq.n	800f0d8 <cleanup_stdio+0x30>
 800f0ce:	4620      	mov	r0, r4
 800f0d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f0d4:	f7ff bf6a 	b.w	800efac <_fflush_r>
 800f0d8:	bd10      	pop	{r4, pc}
 800f0da:	bf00      	nop
 800f0dc:	20000508 	.word	0x20000508
 800f0e0:	20000570 	.word	0x20000570
 800f0e4:	200005d8 	.word	0x200005d8

0800f0e8 <global_stdio_init.part.0>:
 800f0e8:	b510      	push	{r4, lr}
 800f0ea:	4b0b      	ldr	r3, [pc, #44]	@ (800f118 <global_stdio_init.part.0+0x30>)
 800f0ec:	4c0b      	ldr	r4, [pc, #44]	@ (800f11c <global_stdio_init.part.0+0x34>)
 800f0ee:	4a0c      	ldr	r2, [pc, #48]	@ (800f120 <global_stdio_init.part.0+0x38>)
 800f0f0:	601a      	str	r2, [r3, #0]
 800f0f2:	4620      	mov	r0, r4
 800f0f4:	2200      	movs	r2, #0
 800f0f6:	2104      	movs	r1, #4
 800f0f8:	f7ff ff94 	bl	800f024 <std>
 800f0fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f100:	2201      	movs	r2, #1
 800f102:	2109      	movs	r1, #9
 800f104:	f7ff ff8e 	bl	800f024 <std>
 800f108:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f10c:	2202      	movs	r2, #2
 800f10e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f112:	2112      	movs	r1, #18
 800f114:	f7ff bf86 	b.w	800f024 <std>
 800f118:	20000640 	.word	0x20000640
 800f11c:	20000508 	.word	0x20000508
 800f120:	0800f091 	.word	0x0800f091

0800f124 <__sfp_lock_acquire>:
 800f124:	4801      	ldr	r0, [pc, #4]	@ (800f12c <__sfp_lock_acquire+0x8>)
 800f126:	f000 bc65 	b.w	800f9f4 <__retarget_lock_acquire_recursive>
 800f12a:	bf00      	nop
 800f12c:	20000648 	.word	0x20000648

0800f130 <__sfp_lock_release>:
 800f130:	4801      	ldr	r0, [pc, #4]	@ (800f138 <__sfp_lock_release+0x8>)
 800f132:	f000 bc60 	b.w	800f9f6 <__retarget_lock_release_recursive>
 800f136:	bf00      	nop
 800f138:	20000648 	.word	0x20000648

0800f13c <__sfp>:
 800f13c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f13e:	4607      	mov	r7, r0
 800f140:	f7ff fff0 	bl	800f124 <__sfp_lock_acquire>
 800f144:	4b23      	ldr	r3, [pc, #140]	@ (800f1d4 <__sfp+0x98>)
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	b90b      	cbnz	r3, 800f14e <__sfp+0x12>
 800f14a:	f7ff ffcd 	bl	800f0e8 <global_stdio_init.part.0>
 800f14e:	4e22      	ldr	r6, [pc, #136]	@ (800f1d8 <__sfp+0x9c>)
 800f150:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f154:	3b01      	subs	r3, #1
 800f156:	d50f      	bpl.n	800f178 <__sfp+0x3c>
 800f158:	6835      	ldr	r5, [r6, #0]
 800f15a:	2d00      	cmp	r5, #0
 800f15c:	d137      	bne.n	800f1ce <__sfp+0x92>
 800f15e:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 800f162:	4638      	mov	r0, r7
 800f164:	f7fe f89c 	bl	800d2a0 <_malloc_r>
 800f168:	4604      	mov	r4, r0
 800f16a:	bb28      	cbnz	r0, 800f1b8 <__sfp+0x7c>
 800f16c:	6030      	str	r0, [r6, #0]
 800f16e:	f7ff ffdf 	bl	800f130 <__sfp_lock_release>
 800f172:	230c      	movs	r3, #12
 800f174:	603b      	str	r3, [r7, #0]
 800f176:	e01b      	b.n	800f1b0 <__sfp+0x74>
 800f178:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f17c:	b9d5      	cbnz	r5, 800f1b4 <__sfp+0x78>
 800f17e:	4b17      	ldr	r3, [pc, #92]	@ (800f1dc <__sfp+0xa0>)
 800f180:	60e3      	str	r3, [r4, #12]
 800f182:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f186:	6665      	str	r5, [r4, #100]	@ 0x64
 800f188:	f000 fc32 	bl	800f9f0 <__retarget_lock_init_recursive>
 800f18c:	f7ff ffd0 	bl	800f130 <__sfp_lock_release>
 800f190:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f194:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f198:	6025      	str	r5, [r4, #0]
 800f19a:	61a5      	str	r5, [r4, #24]
 800f19c:	2208      	movs	r2, #8
 800f19e:	4629      	mov	r1, r5
 800f1a0:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 800f1a4:	f000 fac2 	bl	800f72c <memset>
 800f1a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 800f1ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	@ 0x48
 800f1b0:	4620      	mov	r0, r4
 800f1b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f1b4:	3468      	adds	r4, #104	@ 0x68
 800f1b6:	e7cd      	b.n	800f154 <__sfp+0x18>
 800f1b8:	2304      	movs	r3, #4
 800f1ba:	6005      	str	r5, [r0, #0]
 800f1bc:	6043      	str	r3, [r0, #4]
 800f1be:	300c      	adds	r0, #12
 800f1c0:	60a0      	str	r0, [r4, #8]
 800f1c2:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 800f1c6:	4629      	mov	r1, r5
 800f1c8:	f000 fab0 	bl	800f72c <memset>
 800f1cc:	6034      	str	r4, [r6, #0]
 800f1ce:	6836      	ldr	r6, [r6, #0]
 800f1d0:	e7be      	b.n	800f150 <__sfp+0x14>
 800f1d2:	bf00      	nop
 800f1d4:	20000640 	.word	0x20000640
 800f1d8:	20000048 	.word	0x20000048
 800f1dc:	ffff0001 	.word	0xffff0001

0800f1e0 <__sinit>:
 800f1e0:	b510      	push	{r4, lr}
 800f1e2:	4604      	mov	r4, r0
 800f1e4:	f7ff ff9e 	bl	800f124 <__sfp_lock_acquire>
 800f1e8:	6a23      	ldr	r3, [r4, #32]
 800f1ea:	b11b      	cbz	r3, 800f1f4 <__sinit+0x14>
 800f1ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f1f0:	f7ff bf9e 	b.w	800f130 <__sfp_lock_release>
 800f1f4:	4b04      	ldr	r3, [pc, #16]	@ (800f208 <__sinit+0x28>)
 800f1f6:	6223      	str	r3, [r4, #32]
 800f1f8:	4b04      	ldr	r3, [pc, #16]	@ (800f20c <__sinit+0x2c>)
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d1f5      	bne.n	800f1ec <__sinit+0xc>
 800f200:	f7ff ff72 	bl	800f0e8 <global_stdio_init.part.0>
 800f204:	e7f2      	b.n	800f1ec <__sinit+0xc>
 800f206:	bf00      	nop
 800f208:	0800f0a9 	.word	0x0800f0a9
 800f20c:	20000640 	.word	0x20000640

0800f210 <fiprintf>:
 800f210:	b40e      	push	{r1, r2, r3}
 800f212:	b503      	push	{r0, r1, lr}
 800f214:	4601      	mov	r1, r0
 800f216:	ab03      	add	r3, sp, #12
 800f218:	4805      	ldr	r0, [pc, #20]	@ (800f230 <fiprintf+0x20>)
 800f21a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f21e:	6800      	ldr	r0, [r0, #0]
 800f220:	9301      	str	r3, [sp, #4]
 800f222:	f002 fd15 	bl	8011c50 <_vfiprintf_r>
 800f226:	b002      	add	sp, #8
 800f228:	f85d eb04 	ldr.w	lr, [sp], #4
 800f22c:	b003      	add	sp, #12
 800f22e:	4770      	bx	lr
 800f230:	200001c0 	.word	0x200001c0

0800f234 <_fwalk_sglue>:
 800f234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f238:	4607      	mov	r7, r0
 800f23a:	4688      	mov	r8, r1
 800f23c:	4614      	mov	r4, r2
 800f23e:	2600      	movs	r6, #0
 800f240:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f244:	f1b9 0901 	subs.w	r9, r9, #1
 800f248:	d505      	bpl.n	800f256 <_fwalk_sglue+0x22>
 800f24a:	6824      	ldr	r4, [r4, #0]
 800f24c:	2c00      	cmp	r4, #0
 800f24e:	d1f7      	bne.n	800f240 <_fwalk_sglue+0xc>
 800f250:	4630      	mov	r0, r6
 800f252:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f256:	89ab      	ldrh	r3, [r5, #12]
 800f258:	2b01      	cmp	r3, #1
 800f25a:	d907      	bls.n	800f26c <_fwalk_sglue+0x38>
 800f25c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f260:	3301      	adds	r3, #1
 800f262:	d003      	beq.n	800f26c <_fwalk_sglue+0x38>
 800f264:	4629      	mov	r1, r5
 800f266:	4638      	mov	r0, r7
 800f268:	47c0      	blx	r8
 800f26a:	4306      	orrs	r6, r0
 800f26c:	3568      	adds	r5, #104	@ 0x68
 800f26e:	e7e9      	b.n	800f244 <_fwalk_sglue+0x10>

0800f270 <getchar>:
 800f270:	4b02      	ldr	r3, [pc, #8]	@ (800f27c <getchar+0xc>)
 800f272:	6818      	ldr	r0, [r3, #0]
 800f274:	6841      	ldr	r1, [r0, #4]
 800f276:	f002 be03 	b.w	8011e80 <_getc_r>
 800f27a:	bf00      	nop
 800f27c:	200001c0 	.word	0x200001c0

0800f280 <iprintf>:
 800f280:	b40f      	push	{r0, r1, r2, r3}
 800f282:	b507      	push	{r0, r1, r2, lr}
 800f284:	4906      	ldr	r1, [pc, #24]	@ (800f2a0 <iprintf+0x20>)
 800f286:	ab04      	add	r3, sp, #16
 800f288:	6808      	ldr	r0, [r1, #0]
 800f28a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f28e:	6881      	ldr	r1, [r0, #8]
 800f290:	9301      	str	r3, [sp, #4]
 800f292:	f002 fcdd 	bl	8011c50 <_vfiprintf_r>
 800f296:	b003      	add	sp, #12
 800f298:	f85d eb04 	ldr.w	lr, [sp], #4
 800f29c:	b004      	add	sp, #16
 800f29e:	4770      	bx	lr
 800f2a0:	200001c0 	.word	0x200001c0

0800f2a4 <putchar>:
 800f2a4:	4b02      	ldr	r3, [pc, #8]	@ (800f2b0 <putchar+0xc>)
 800f2a6:	4601      	mov	r1, r0
 800f2a8:	6818      	ldr	r0, [r3, #0]
 800f2aa:	6882      	ldr	r2, [r0, #8]
 800f2ac:	f002 be75 	b.w	8011f9a <_putc_r>
 800f2b0:	200001c0 	.word	0x200001c0

0800f2b4 <_puts_r>:
 800f2b4:	6a03      	ldr	r3, [r0, #32]
 800f2b6:	b570      	push	{r4, r5, r6, lr}
 800f2b8:	6884      	ldr	r4, [r0, #8]
 800f2ba:	4605      	mov	r5, r0
 800f2bc:	460e      	mov	r6, r1
 800f2be:	b90b      	cbnz	r3, 800f2c4 <_puts_r+0x10>
 800f2c0:	f7ff ff8e 	bl	800f1e0 <__sinit>
 800f2c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f2c6:	07db      	lsls	r3, r3, #31
 800f2c8:	d405      	bmi.n	800f2d6 <_puts_r+0x22>
 800f2ca:	89a3      	ldrh	r3, [r4, #12]
 800f2cc:	0598      	lsls	r0, r3, #22
 800f2ce:	d402      	bmi.n	800f2d6 <_puts_r+0x22>
 800f2d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f2d2:	f000 fb8f 	bl	800f9f4 <__retarget_lock_acquire_recursive>
 800f2d6:	89a3      	ldrh	r3, [r4, #12]
 800f2d8:	0719      	lsls	r1, r3, #28
 800f2da:	d502      	bpl.n	800f2e2 <_puts_r+0x2e>
 800f2dc:	6923      	ldr	r3, [r4, #16]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d135      	bne.n	800f34e <_puts_r+0x9a>
 800f2e2:	4621      	mov	r1, r4
 800f2e4:	4628      	mov	r0, r5
 800f2e6:	f000 f8e7 	bl	800f4b8 <__swsetup_r>
 800f2ea:	b380      	cbz	r0, 800f34e <_puts_r+0x9a>
 800f2ec:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800f2f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f2f2:	07da      	lsls	r2, r3, #31
 800f2f4:	d405      	bmi.n	800f302 <_puts_r+0x4e>
 800f2f6:	89a3      	ldrh	r3, [r4, #12]
 800f2f8:	059b      	lsls	r3, r3, #22
 800f2fa:	d402      	bmi.n	800f302 <_puts_r+0x4e>
 800f2fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f2fe:	f000 fb7a 	bl	800f9f6 <__retarget_lock_release_recursive>
 800f302:	4628      	mov	r0, r5
 800f304:	bd70      	pop	{r4, r5, r6, pc}
 800f306:	2b00      	cmp	r3, #0
 800f308:	da04      	bge.n	800f314 <_puts_r+0x60>
 800f30a:	69a2      	ldr	r2, [r4, #24]
 800f30c:	429a      	cmp	r2, r3
 800f30e:	dc17      	bgt.n	800f340 <_puts_r+0x8c>
 800f310:	290a      	cmp	r1, #10
 800f312:	d015      	beq.n	800f340 <_puts_r+0x8c>
 800f314:	6823      	ldr	r3, [r4, #0]
 800f316:	1c5a      	adds	r2, r3, #1
 800f318:	6022      	str	r2, [r4, #0]
 800f31a:	7019      	strb	r1, [r3, #0]
 800f31c:	68a3      	ldr	r3, [r4, #8]
 800f31e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f322:	3b01      	subs	r3, #1
 800f324:	60a3      	str	r3, [r4, #8]
 800f326:	2900      	cmp	r1, #0
 800f328:	d1ed      	bne.n	800f306 <_puts_r+0x52>
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	da11      	bge.n	800f352 <_puts_r+0x9e>
 800f32e:	4622      	mov	r2, r4
 800f330:	210a      	movs	r1, #10
 800f332:	4628      	mov	r0, r5
 800f334:	f000 f881 	bl	800f43a <__swbuf_r>
 800f338:	3001      	adds	r0, #1
 800f33a:	d0d7      	beq.n	800f2ec <_puts_r+0x38>
 800f33c:	250a      	movs	r5, #10
 800f33e:	e7d7      	b.n	800f2f0 <_puts_r+0x3c>
 800f340:	4622      	mov	r2, r4
 800f342:	4628      	mov	r0, r5
 800f344:	f000 f879 	bl	800f43a <__swbuf_r>
 800f348:	3001      	adds	r0, #1
 800f34a:	d1e7      	bne.n	800f31c <_puts_r+0x68>
 800f34c:	e7ce      	b.n	800f2ec <_puts_r+0x38>
 800f34e:	3e01      	subs	r6, #1
 800f350:	e7e4      	b.n	800f31c <_puts_r+0x68>
 800f352:	6823      	ldr	r3, [r4, #0]
 800f354:	1c5a      	adds	r2, r3, #1
 800f356:	6022      	str	r2, [r4, #0]
 800f358:	220a      	movs	r2, #10
 800f35a:	701a      	strb	r2, [r3, #0]
 800f35c:	e7ee      	b.n	800f33c <_puts_r+0x88>
	...

0800f360 <puts>:
 800f360:	4b02      	ldr	r3, [pc, #8]	@ (800f36c <puts+0xc>)
 800f362:	4601      	mov	r1, r0
 800f364:	6818      	ldr	r0, [r3, #0]
 800f366:	f7ff bfa5 	b.w	800f2b4 <_puts_r>
 800f36a:	bf00      	nop
 800f36c:	200001c0 	.word	0x200001c0

0800f370 <siprintf>:
 800f370:	b40e      	push	{r1, r2, r3}
 800f372:	b510      	push	{r4, lr}
 800f374:	b09d      	sub	sp, #116	@ 0x74
 800f376:	ab1f      	add	r3, sp, #124	@ 0x7c
 800f378:	9002      	str	r0, [sp, #8]
 800f37a:	9006      	str	r0, [sp, #24]
 800f37c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f380:	480a      	ldr	r0, [pc, #40]	@ (800f3ac <siprintf+0x3c>)
 800f382:	9107      	str	r1, [sp, #28]
 800f384:	9104      	str	r1, [sp, #16]
 800f386:	490a      	ldr	r1, [pc, #40]	@ (800f3b0 <siprintf+0x40>)
 800f388:	f853 2b04 	ldr.w	r2, [r3], #4
 800f38c:	9105      	str	r1, [sp, #20]
 800f38e:	2400      	movs	r4, #0
 800f390:	a902      	add	r1, sp, #8
 800f392:	6800      	ldr	r0, [r0, #0]
 800f394:	9301      	str	r3, [sp, #4]
 800f396:	941b      	str	r4, [sp, #108]	@ 0x6c
 800f398:	f002 fb34 	bl	8011a04 <_svfiprintf_r>
 800f39c:	9b02      	ldr	r3, [sp, #8]
 800f39e:	701c      	strb	r4, [r3, #0]
 800f3a0:	b01d      	add	sp, #116	@ 0x74
 800f3a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f3a6:	b003      	add	sp, #12
 800f3a8:	4770      	bx	lr
 800f3aa:	bf00      	nop
 800f3ac:	200001c0 	.word	0x200001c0
 800f3b0:	ffff0208 	.word	0xffff0208

0800f3b4 <__sread>:
 800f3b4:	b510      	push	{r4, lr}
 800f3b6:	460c      	mov	r4, r1
 800f3b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f3bc:	f000 faca 	bl	800f954 <_read_r>
 800f3c0:	2800      	cmp	r0, #0
 800f3c2:	bfab      	itete	ge
 800f3c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f3c6:	89a3      	ldrhlt	r3, [r4, #12]
 800f3c8:	181b      	addge	r3, r3, r0
 800f3ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f3ce:	bfac      	ite	ge
 800f3d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f3d2:	81a3      	strhlt	r3, [r4, #12]
 800f3d4:	bd10      	pop	{r4, pc}

0800f3d6 <__swrite>:
 800f3d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3da:	461f      	mov	r7, r3
 800f3dc:	898b      	ldrh	r3, [r1, #12]
 800f3de:	05db      	lsls	r3, r3, #23
 800f3e0:	4605      	mov	r5, r0
 800f3e2:	460c      	mov	r4, r1
 800f3e4:	4616      	mov	r6, r2
 800f3e6:	d505      	bpl.n	800f3f4 <__swrite+0x1e>
 800f3e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f3ec:	2302      	movs	r3, #2
 800f3ee:	2200      	movs	r2, #0
 800f3f0:	f000 fa9e 	bl	800f930 <_lseek_r>
 800f3f4:	89a3      	ldrh	r3, [r4, #12]
 800f3f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f3fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f3fe:	81a3      	strh	r3, [r4, #12]
 800f400:	4632      	mov	r2, r6
 800f402:	463b      	mov	r3, r7
 800f404:	4628      	mov	r0, r5
 800f406:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f40a:	f000 bab5 	b.w	800f978 <_write_r>

0800f40e <__sseek>:
 800f40e:	b510      	push	{r4, lr}
 800f410:	460c      	mov	r4, r1
 800f412:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f416:	f000 fa8b 	bl	800f930 <_lseek_r>
 800f41a:	1c43      	adds	r3, r0, #1
 800f41c:	89a3      	ldrh	r3, [r4, #12]
 800f41e:	bf15      	itete	ne
 800f420:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f422:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f426:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f42a:	81a3      	strheq	r3, [r4, #12]
 800f42c:	bf18      	it	ne
 800f42e:	81a3      	strhne	r3, [r4, #12]
 800f430:	bd10      	pop	{r4, pc}

0800f432 <__sclose>:
 800f432:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f436:	f000 ba0d 	b.w	800f854 <_close_r>

0800f43a <__swbuf_r>:
 800f43a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f43c:	460e      	mov	r6, r1
 800f43e:	4614      	mov	r4, r2
 800f440:	4605      	mov	r5, r0
 800f442:	b118      	cbz	r0, 800f44c <__swbuf_r+0x12>
 800f444:	6a03      	ldr	r3, [r0, #32]
 800f446:	b90b      	cbnz	r3, 800f44c <__swbuf_r+0x12>
 800f448:	f7ff feca 	bl	800f1e0 <__sinit>
 800f44c:	69a3      	ldr	r3, [r4, #24]
 800f44e:	60a3      	str	r3, [r4, #8]
 800f450:	89a3      	ldrh	r3, [r4, #12]
 800f452:	071a      	lsls	r2, r3, #28
 800f454:	d501      	bpl.n	800f45a <__swbuf_r+0x20>
 800f456:	6923      	ldr	r3, [r4, #16]
 800f458:	b943      	cbnz	r3, 800f46c <__swbuf_r+0x32>
 800f45a:	4621      	mov	r1, r4
 800f45c:	4628      	mov	r0, r5
 800f45e:	f000 f82b 	bl	800f4b8 <__swsetup_r>
 800f462:	b118      	cbz	r0, 800f46c <__swbuf_r+0x32>
 800f464:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800f468:	4638      	mov	r0, r7
 800f46a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f46c:	6823      	ldr	r3, [r4, #0]
 800f46e:	6922      	ldr	r2, [r4, #16]
 800f470:	1a98      	subs	r0, r3, r2
 800f472:	6963      	ldr	r3, [r4, #20]
 800f474:	b2f6      	uxtb	r6, r6
 800f476:	4283      	cmp	r3, r0
 800f478:	4637      	mov	r7, r6
 800f47a:	dc05      	bgt.n	800f488 <__swbuf_r+0x4e>
 800f47c:	4621      	mov	r1, r4
 800f47e:	4628      	mov	r0, r5
 800f480:	f7ff fd94 	bl	800efac <_fflush_r>
 800f484:	2800      	cmp	r0, #0
 800f486:	d1ed      	bne.n	800f464 <__swbuf_r+0x2a>
 800f488:	68a3      	ldr	r3, [r4, #8]
 800f48a:	3b01      	subs	r3, #1
 800f48c:	60a3      	str	r3, [r4, #8]
 800f48e:	6823      	ldr	r3, [r4, #0]
 800f490:	1c5a      	adds	r2, r3, #1
 800f492:	6022      	str	r2, [r4, #0]
 800f494:	701e      	strb	r6, [r3, #0]
 800f496:	6962      	ldr	r2, [r4, #20]
 800f498:	1c43      	adds	r3, r0, #1
 800f49a:	429a      	cmp	r2, r3
 800f49c:	d004      	beq.n	800f4a8 <__swbuf_r+0x6e>
 800f49e:	89a3      	ldrh	r3, [r4, #12]
 800f4a0:	07db      	lsls	r3, r3, #31
 800f4a2:	d5e1      	bpl.n	800f468 <__swbuf_r+0x2e>
 800f4a4:	2e0a      	cmp	r6, #10
 800f4a6:	d1df      	bne.n	800f468 <__swbuf_r+0x2e>
 800f4a8:	4621      	mov	r1, r4
 800f4aa:	4628      	mov	r0, r5
 800f4ac:	f7ff fd7e 	bl	800efac <_fflush_r>
 800f4b0:	2800      	cmp	r0, #0
 800f4b2:	d0d9      	beq.n	800f468 <__swbuf_r+0x2e>
 800f4b4:	e7d6      	b.n	800f464 <__swbuf_r+0x2a>
	...

0800f4b8 <__swsetup_r>:
 800f4b8:	b538      	push	{r3, r4, r5, lr}
 800f4ba:	4b29      	ldr	r3, [pc, #164]	@ (800f560 <__swsetup_r+0xa8>)
 800f4bc:	4605      	mov	r5, r0
 800f4be:	6818      	ldr	r0, [r3, #0]
 800f4c0:	460c      	mov	r4, r1
 800f4c2:	b118      	cbz	r0, 800f4cc <__swsetup_r+0x14>
 800f4c4:	6a03      	ldr	r3, [r0, #32]
 800f4c6:	b90b      	cbnz	r3, 800f4cc <__swsetup_r+0x14>
 800f4c8:	f7ff fe8a 	bl	800f1e0 <__sinit>
 800f4cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f4d0:	0719      	lsls	r1, r3, #28
 800f4d2:	d422      	bmi.n	800f51a <__swsetup_r+0x62>
 800f4d4:	06da      	lsls	r2, r3, #27
 800f4d6:	d407      	bmi.n	800f4e8 <__swsetup_r+0x30>
 800f4d8:	2209      	movs	r2, #9
 800f4da:	602a      	str	r2, [r5, #0]
 800f4dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f4e0:	81a3      	strh	r3, [r4, #12]
 800f4e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f4e6:	e033      	b.n	800f550 <__swsetup_r+0x98>
 800f4e8:	0758      	lsls	r0, r3, #29
 800f4ea:	d512      	bpl.n	800f512 <__swsetup_r+0x5a>
 800f4ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f4ee:	b141      	cbz	r1, 800f502 <__swsetup_r+0x4a>
 800f4f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f4f4:	4299      	cmp	r1, r3
 800f4f6:	d002      	beq.n	800f4fe <__swsetup_r+0x46>
 800f4f8:	4628      	mov	r0, r5
 800f4fa:	f001 f8fd 	bl	80106f8 <_free_r>
 800f4fe:	2300      	movs	r3, #0
 800f500:	6363      	str	r3, [r4, #52]	@ 0x34
 800f502:	89a3      	ldrh	r3, [r4, #12]
 800f504:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f508:	81a3      	strh	r3, [r4, #12]
 800f50a:	2300      	movs	r3, #0
 800f50c:	6063      	str	r3, [r4, #4]
 800f50e:	6923      	ldr	r3, [r4, #16]
 800f510:	6023      	str	r3, [r4, #0]
 800f512:	89a3      	ldrh	r3, [r4, #12]
 800f514:	f043 0308 	orr.w	r3, r3, #8
 800f518:	81a3      	strh	r3, [r4, #12]
 800f51a:	6923      	ldr	r3, [r4, #16]
 800f51c:	b94b      	cbnz	r3, 800f532 <__swsetup_r+0x7a>
 800f51e:	89a3      	ldrh	r3, [r4, #12]
 800f520:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f524:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f528:	d003      	beq.n	800f532 <__swsetup_r+0x7a>
 800f52a:	4621      	mov	r1, r4
 800f52c:	4628      	mov	r0, r5
 800f52e:	f002 fcf8 	bl	8011f22 <__smakebuf_r>
 800f532:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f536:	f013 0201 	ands.w	r2, r3, #1
 800f53a:	d00a      	beq.n	800f552 <__swsetup_r+0x9a>
 800f53c:	2200      	movs	r2, #0
 800f53e:	60a2      	str	r2, [r4, #8]
 800f540:	6962      	ldr	r2, [r4, #20]
 800f542:	4252      	negs	r2, r2
 800f544:	61a2      	str	r2, [r4, #24]
 800f546:	6922      	ldr	r2, [r4, #16]
 800f548:	b942      	cbnz	r2, 800f55c <__swsetup_r+0xa4>
 800f54a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f54e:	d1c5      	bne.n	800f4dc <__swsetup_r+0x24>
 800f550:	bd38      	pop	{r3, r4, r5, pc}
 800f552:	0799      	lsls	r1, r3, #30
 800f554:	bf58      	it	pl
 800f556:	6962      	ldrpl	r2, [r4, #20]
 800f558:	60a2      	str	r2, [r4, #8]
 800f55a:	e7f4      	b.n	800f546 <__swsetup_r+0x8e>
 800f55c:	2000      	movs	r0, #0
 800f55e:	e7f7      	b.n	800f550 <__swsetup_r+0x98>
 800f560:	200001c0 	.word	0x200001c0

0800f564 <funcloser>:
 800f564:	b570      	push	{r4, r5, r6, lr}
 800f566:	690c      	ldr	r4, [r1, #16]
 800f568:	4606      	mov	r6, r0
 800f56a:	460d      	mov	r5, r1
 800f56c:	b184      	cbz	r4, 800f590 <funcloser+0x2c>
 800f56e:	f000 fa15 	bl	800f99c <__errno>
 800f572:	2300      	movs	r3, #0
 800f574:	6003      	str	r3, [r0, #0]
 800f576:	692b      	ldr	r3, [r5, #16]
 800f578:	6828      	ldr	r0, [r5, #0]
 800f57a:	4798      	blx	r3
 800f57c:	1e04      	subs	r4, r0, #0
 800f57e:	da07      	bge.n	800f590 <funcloser+0x2c>
 800f580:	f000 fa0c 	bl	800f99c <__errno>
 800f584:	6803      	ldr	r3, [r0, #0]
 800f586:	b11b      	cbz	r3, 800f590 <funcloser+0x2c>
 800f588:	f000 fa08 	bl	800f99c <__errno>
 800f58c:	6803      	ldr	r3, [r0, #0]
 800f58e:	6033      	str	r3, [r6, #0]
 800f590:	4630      	mov	r0, r6
 800f592:	4629      	mov	r1, r5
 800f594:	f001 f8b0 	bl	80106f8 <_free_r>
 800f598:	4620      	mov	r0, r4
 800f59a:	bd70      	pop	{r4, r5, r6, pc}

0800f59c <funwriter>:
 800f59c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f59e:	460c      	mov	r4, r1
 800f5a0:	4616      	mov	r6, r2
 800f5a2:	461f      	mov	r7, r3
 800f5a4:	4605      	mov	r5, r0
 800f5a6:	f000 f9f9 	bl	800f99c <__errno>
 800f5aa:	2300      	movs	r3, #0
 800f5ac:	6003      	str	r3, [r0, #0]
 800f5ae:	463a      	mov	r2, r7
 800f5b0:	68a3      	ldr	r3, [r4, #8]
 800f5b2:	6820      	ldr	r0, [r4, #0]
 800f5b4:	4631      	mov	r1, r6
 800f5b6:	4798      	blx	r3
 800f5b8:	1e04      	subs	r4, r0, #0
 800f5ba:	da07      	bge.n	800f5cc <funwriter+0x30>
 800f5bc:	f000 f9ee 	bl	800f99c <__errno>
 800f5c0:	6803      	ldr	r3, [r0, #0]
 800f5c2:	b11b      	cbz	r3, 800f5cc <funwriter+0x30>
 800f5c4:	f000 f9ea 	bl	800f99c <__errno>
 800f5c8:	6803      	ldr	r3, [r0, #0]
 800f5ca:	602b      	str	r3, [r5, #0]
 800f5cc:	4620      	mov	r0, r4
 800f5ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f5d0 <funseeker>:
 800f5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5d2:	460c      	mov	r4, r1
 800f5d4:	4616      	mov	r6, r2
 800f5d6:	461f      	mov	r7, r3
 800f5d8:	4605      	mov	r5, r0
 800f5da:	f000 f9df 	bl	800f99c <__errno>
 800f5de:	2300      	movs	r3, #0
 800f5e0:	6003      	str	r3, [r0, #0]
 800f5e2:	463a      	mov	r2, r7
 800f5e4:	68e3      	ldr	r3, [r4, #12]
 800f5e6:	6820      	ldr	r0, [r4, #0]
 800f5e8:	4631      	mov	r1, r6
 800f5ea:	4798      	blx	r3
 800f5ec:	1e04      	subs	r4, r0, #0
 800f5ee:	da07      	bge.n	800f600 <funseeker+0x30>
 800f5f0:	f000 f9d4 	bl	800f99c <__errno>
 800f5f4:	6803      	ldr	r3, [r0, #0]
 800f5f6:	b11b      	cbz	r3, 800f600 <funseeker+0x30>
 800f5f8:	f000 f9d0 	bl	800f99c <__errno>
 800f5fc:	6803      	ldr	r3, [r0, #0]
 800f5fe:	602b      	str	r3, [r5, #0]
 800f600:	4620      	mov	r0, r4
 800f602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f604 <funreader>:
 800f604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f606:	460c      	mov	r4, r1
 800f608:	4616      	mov	r6, r2
 800f60a:	461f      	mov	r7, r3
 800f60c:	4605      	mov	r5, r0
 800f60e:	f000 f9c5 	bl	800f99c <__errno>
 800f612:	2300      	movs	r3, #0
 800f614:	6003      	str	r3, [r0, #0]
 800f616:	463a      	mov	r2, r7
 800f618:	6863      	ldr	r3, [r4, #4]
 800f61a:	6820      	ldr	r0, [r4, #0]
 800f61c:	4631      	mov	r1, r6
 800f61e:	4798      	blx	r3
 800f620:	1e04      	subs	r4, r0, #0
 800f622:	da07      	bge.n	800f634 <funreader+0x30>
 800f624:	f000 f9ba 	bl	800f99c <__errno>
 800f628:	6803      	ldr	r3, [r0, #0]
 800f62a:	b11b      	cbz	r3, 800f634 <funreader+0x30>
 800f62c:	f000 f9b6 	bl	800f99c <__errno>
 800f630:	6803      	ldr	r3, [r0, #0]
 800f632:	602b      	str	r3, [r5, #0]
 800f634:	4620      	mov	r0, r4
 800f636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f638 <_funopen_r>:
 800f638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f63c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f640:	4605      	mov	r5, r0
 800f642:	4689      	mov	r9, r1
 800f644:	461e      	mov	r6, r3
 800f646:	4617      	mov	r7, r2
 800f648:	b932      	cbnz	r2, 800f658 <_funopen_r+0x20>
 800f64a:	b92b      	cbnz	r3, 800f658 <_funopen_r+0x20>
 800f64c:	2316      	movs	r3, #22
 800f64e:	6003      	str	r3, [r0, #0]
 800f650:	2400      	movs	r4, #0
 800f652:	4620      	mov	r0, r4
 800f654:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f658:	4628      	mov	r0, r5
 800f65a:	f7ff fd6f 	bl	800f13c <__sfp>
 800f65e:	4604      	mov	r4, r0
 800f660:	2800      	cmp	r0, #0
 800f662:	d0f5      	beq.n	800f650 <_funopen_r+0x18>
 800f664:	4628      	mov	r0, r5
 800f666:	2114      	movs	r1, #20
 800f668:	f7fd fe1a 	bl	800d2a0 <_malloc_r>
 800f66c:	4605      	mov	r5, r0
 800f66e:	b940      	cbnz	r0, 800f682 <_funopen_r+0x4a>
 800f670:	f7ff fd58 	bl	800f124 <__sfp_lock_acquire>
 800f674:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f676:	81a5      	strh	r5, [r4, #12]
 800f678:	f000 f9bb 	bl	800f9f2 <__retarget_lock_close_recursive>
 800f67c:	f7ff fd58 	bl	800f130 <__sfp_lock_release>
 800f680:	e7e6      	b.n	800f650 <_funopen_r+0x18>
 800f682:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f684:	07d8      	lsls	r0, r3, #31
 800f686:	d405      	bmi.n	800f694 <_funopen_r+0x5c>
 800f688:	89a3      	ldrh	r3, [r4, #12]
 800f68a:	0599      	lsls	r1, r3, #22
 800f68c:	d402      	bmi.n	800f694 <_funopen_r+0x5c>
 800f68e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f690:	f000 f9b0 	bl	800f9f4 <__retarget_lock_acquire_recursive>
 800f694:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f698:	81e3      	strh	r3, [r4, #14]
 800f69a:	f8c5 9000 	str.w	r9, [r5]
 800f69e:	6225      	str	r5, [r4, #32]
 800f6a0:	b327      	cbz	r7, 800f6ec <_funopen_r+0xb4>
 800f6a2:	4b16      	ldr	r3, [pc, #88]	@ (800f6fc <_funopen_r+0xc4>)
 800f6a4:	606f      	str	r7, [r5, #4]
 800f6a6:	6263      	str	r3, [r4, #36]	@ 0x24
 800f6a8:	b1de      	cbz	r6, 800f6e2 <_funopen_r+0xaa>
 800f6aa:	2310      	movs	r3, #16
 800f6ac:	81a3      	strh	r3, [r4, #12]
 800f6ae:	4b14      	ldr	r3, [pc, #80]	@ (800f700 <_funopen_r+0xc8>)
 800f6b0:	60ae      	str	r6, [r5, #8]
 800f6b2:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f6b4:	4b13      	ldr	r3, [pc, #76]	@ (800f704 <_funopen_r+0xcc>)
 800f6b6:	f8c5 800c 	str.w	r8, [r5, #12]
 800f6ba:	f1b8 0f00 	cmp.w	r8, #0
 800f6be:	bf18      	it	ne
 800f6c0:	4698      	movne	r8, r3
 800f6c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f6c4:	f8c4 802c 	str.w	r8, [r4, #44]	@ 0x2c
 800f6c8:	612b      	str	r3, [r5, #16]
 800f6ca:	4b0f      	ldr	r3, [pc, #60]	@ (800f708 <_funopen_r+0xd0>)
 800f6cc:	6323      	str	r3, [r4, #48]	@ 0x30
 800f6ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f6d0:	07da      	lsls	r2, r3, #31
 800f6d2:	d4be      	bmi.n	800f652 <_funopen_r+0x1a>
 800f6d4:	89a3      	ldrh	r3, [r4, #12]
 800f6d6:	059b      	lsls	r3, r3, #22
 800f6d8:	d4bb      	bmi.n	800f652 <_funopen_r+0x1a>
 800f6da:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f6dc:	f000 f98b 	bl	800f9f6 <__retarget_lock_release_recursive>
 800f6e0:	e7b7      	b.n	800f652 <_funopen_r+0x1a>
 800f6e2:	2304      	movs	r3, #4
 800f6e4:	81a3      	strh	r3, [r4, #12]
 800f6e6:	60ae      	str	r6, [r5, #8]
 800f6e8:	62a6      	str	r6, [r4, #40]	@ 0x28
 800f6ea:	e7e3      	b.n	800f6b4 <_funopen_r+0x7c>
 800f6ec:	2308      	movs	r3, #8
 800f6ee:	81a3      	strh	r3, [r4, #12]
 800f6f0:	4b03      	ldr	r3, [pc, #12]	@ (800f700 <_funopen_r+0xc8>)
 800f6f2:	60ae      	str	r6, [r5, #8]
 800f6f4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f6f6:	606f      	str	r7, [r5, #4]
 800f6f8:	6267      	str	r7, [r4, #36]	@ 0x24
 800f6fa:	e7db      	b.n	800f6b4 <_funopen_r+0x7c>
 800f6fc:	0800f605 	.word	0x0800f605
 800f700:	0800f59d 	.word	0x0800f59d
 800f704:	0800f5d1 	.word	0x0800f5d1
 800f708:	0800f565 	.word	0x0800f565

0800f70c <funopen>:
 800f70c:	b513      	push	{r0, r1, r4, lr}
 800f70e:	9c04      	ldr	r4, [sp, #16]
 800f710:	e9cd 3400 	strd	r3, r4, [sp]
 800f714:	4613      	mov	r3, r2
 800f716:	460a      	mov	r2, r1
 800f718:	4601      	mov	r1, r0
 800f71a:	4803      	ldr	r0, [pc, #12]	@ (800f728 <funopen+0x1c>)
 800f71c:	6800      	ldr	r0, [r0, #0]
 800f71e:	f7ff ff8b 	bl	800f638 <_funopen_r>
 800f722:	b002      	add	sp, #8
 800f724:	bd10      	pop	{r4, pc}
 800f726:	bf00      	nop
 800f728:	200001c0 	.word	0x200001c0

0800f72c <memset>:
 800f72c:	4402      	add	r2, r0
 800f72e:	4603      	mov	r3, r0
 800f730:	4293      	cmp	r3, r2
 800f732:	d100      	bne.n	800f736 <memset+0xa>
 800f734:	4770      	bx	lr
 800f736:	f803 1b01 	strb.w	r1, [r3], #1
 800f73a:	e7f9      	b.n	800f730 <memset+0x4>

0800f73c <strchr>:
 800f73c:	b2c9      	uxtb	r1, r1
 800f73e:	4603      	mov	r3, r0
 800f740:	4618      	mov	r0, r3
 800f742:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f746:	b112      	cbz	r2, 800f74e <strchr+0x12>
 800f748:	428a      	cmp	r2, r1
 800f74a:	d1f9      	bne.n	800f740 <strchr+0x4>
 800f74c:	4770      	bx	lr
 800f74e:	2900      	cmp	r1, #0
 800f750:	bf18      	it	ne
 800f752:	2000      	movne	r0, #0
 800f754:	4770      	bx	lr

0800f756 <strncmp>:
 800f756:	b510      	push	{r4, lr}
 800f758:	b16a      	cbz	r2, 800f776 <strncmp+0x20>
 800f75a:	3901      	subs	r1, #1
 800f75c:	1884      	adds	r4, r0, r2
 800f75e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f762:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f766:	429a      	cmp	r2, r3
 800f768:	d103      	bne.n	800f772 <strncmp+0x1c>
 800f76a:	42a0      	cmp	r0, r4
 800f76c:	d001      	beq.n	800f772 <strncmp+0x1c>
 800f76e:	2a00      	cmp	r2, #0
 800f770:	d1f5      	bne.n	800f75e <strncmp+0x8>
 800f772:	1ad0      	subs	r0, r2, r3
 800f774:	bd10      	pop	{r4, pc}
 800f776:	4610      	mov	r0, r2
 800f778:	e7fc      	b.n	800f774 <strncmp+0x1e>

0800f77a <strnlen>:
 800f77a:	b510      	push	{r4, lr}
 800f77c:	4602      	mov	r2, r0
 800f77e:	4401      	add	r1, r0
 800f780:	428a      	cmp	r2, r1
 800f782:	4613      	mov	r3, r2
 800f784:	d003      	beq.n	800f78e <strnlen+0x14>
 800f786:	781c      	ldrb	r4, [r3, #0]
 800f788:	3201      	adds	r2, #1
 800f78a:	2c00      	cmp	r4, #0
 800f78c:	d1f8      	bne.n	800f780 <strnlen+0x6>
 800f78e:	1a18      	subs	r0, r3, r0
 800f790:	bd10      	pop	{r4, pc}
	...

0800f794 <strtok>:
 800f794:	4b16      	ldr	r3, [pc, #88]	@ (800f7f0 <strtok+0x5c>)
 800f796:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f79a:	681f      	ldr	r7, [r3, #0]
 800f79c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800f79e:	4605      	mov	r5, r0
 800f7a0:	460e      	mov	r6, r1
 800f7a2:	b9ec      	cbnz	r4, 800f7e0 <strtok+0x4c>
 800f7a4:	2050      	movs	r0, #80	@ 0x50
 800f7a6:	f7fd fd49 	bl	800d23c <malloc>
 800f7aa:	4602      	mov	r2, r0
 800f7ac:	6478      	str	r0, [r7, #68]	@ 0x44
 800f7ae:	b920      	cbnz	r0, 800f7ba <strtok+0x26>
 800f7b0:	4b10      	ldr	r3, [pc, #64]	@ (800f7f4 <strtok+0x60>)
 800f7b2:	4811      	ldr	r0, [pc, #68]	@ (800f7f8 <strtok+0x64>)
 800f7b4:	215b      	movs	r1, #91	@ 0x5b
 800f7b6:	f7fd fcbb 	bl	800d130 <__assert_func>
 800f7ba:	e9c0 4400 	strd	r4, r4, [r0]
 800f7be:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800f7c2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800f7c6:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800f7ca:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800f7ce:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800f7d2:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800f7d6:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800f7da:	6184      	str	r4, [r0, #24]
 800f7dc:	7704      	strb	r4, [r0, #28]
 800f7de:	6244      	str	r4, [r0, #36]	@ 0x24
 800f7e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f7e2:	4631      	mov	r1, r6
 800f7e4:	4628      	mov	r0, r5
 800f7e6:	2301      	movs	r3, #1
 800f7e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f7ec:	f000 b806 	b.w	800f7fc <__strtok_r>
 800f7f0:	200001c0 	.word	0x200001c0
 800f7f4:	08013bb7 	.word	0x08013bb7
 800f7f8:	08013bce 	.word	0x08013bce

0800f7fc <__strtok_r>:
 800f7fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f7fe:	4604      	mov	r4, r0
 800f800:	b908      	cbnz	r0, 800f806 <__strtok_r+0xa>
 800f802:	6814      	ldr	r4, [r2, #0]
 800f804:	b144      	cbz	r4, 800f818 <__strtok_r+0x1c>
 800f806:	4620      	mov	r0, r4
 800f808:	f814 5b01 	ldrb.w	r5, [r4], #1
 800f80c:	460f      	mov	r7, r1
 800f80e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800f812:	b91e      	cbnz	r6, 800f81c <__strtok_r+0x20>
 800f814:	b965      	cbnz	r5, 800f830 <__strtok_r+0x34>
 800f816:	6015      	str	r5, [r2, #0]
 800f818:	2000      	movs	r0, #0
 800f81a:	e005      	b.n	800f828 <__strtok_r+0x2c>
 800f81c:	42b5      	cmp	r5, r6
 800f81e:	d1f6      	bne.n	800f80e <__strtok_r+0x12>
 800f820:	2b00      	cmp	r3, #0
 800f822:	d1f0      	bne.n	800f806 <__strtok_r+0xa>
 800f824:	6014      	str	r4, [r2, #0]
 800f826:	7003      	strb	r3, [r0, #0]
 800f828:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f82a:	461c      	mov	r4, r3
 800f82c:	e00c      	b.n	800f848 <__strtok_r+0x4c>
 800f82e:	b91d      	cbnz	r5, 800f838 <__strtok_r+0x3c>
 800f830:	4627      	mov	r7, r4
 800f832:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f836:	460e      	mov	r6, r1
 800f838:	f816 5b01 	ldrb.w	r5, [r6], #1
 800f83c:	42ab      	cmp	r3, r5
 800f83e:	d1f6      	bne.n	800f82e <__strtok_r+0x32>
 800f840:	2b00      	cmp	r3, #0
 800f842:	d0f2      	beq.n	800f82a <__strtok_r+0x2e>
 800f844:	2300      	movs	r3, #0
 800f846:	703b      	strb	r3, [r7, #0]
 800f848:	6014      	str	r4, [r2, #0]
 800f84a:	e7ed      	b.n	800f828 <__strtok_r+0x2c>

0800f84c <_localeconv_r>:
 800f84c:	4800      	ldr	r0, [pc, #0]	@ (800f850 <_localeconv_r+0x4>)
 800f84e:	4770      	bx	lr
 800f850:	20000144 	.word	0x20000144

0800f854 <_close_r>:
 800f854:	b538      	push	{r3, r4, r5, lr}
 800f856:	4d06      	ldr	r5, [pc, #24]	@ (800f870 <_close_r+0x1c>)
 800f858:	2300      	movs	r3, #0
 800f85a:	4604      	mov	r4, r0
 800f85c:	4608      	mov	r0, r1
 800f85e:	602b      	str	r3, [r5, #0]
 800f860:	f7f4 fbac 	bl	8003fbc <_close>
 800f864:	1c43      	adds	r3, r0, #1
 800f866:	d102      	bne.n	800f86e <_close_r+0x1a>
 800f868:	682b      	ldr	r3, [r5, #0]
 800f86a:	b103      	cbz	r3, 800f86e <_close_r+0x1a>
 800f86c:	6023      	str	r3, [r4, #0]
 800f86e:	bd38      	pop	{r3, r4, r5, pc}
 800f870:	20000644 	.word	0x20000644

0800f874 <_reclaim_reent>:
 800f874:	4b2d      	ldr	r3, [pc, #180]	@ (800f92c <_reclaim_reent+0xb8>)
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	4283      	cmp	r3, r0
 800f87a:	b570      	push	{r4, r5, r6, lr}
 800f87c:	4604      	mov	r4, r0
 800f87e:	d053      	beq.n	800f928 <_reclaim_reent+0xb4>
 800f880:	69c3      	ldr	r3, [r0, #28]
 800f882:	b31b      	cbz	r3, 800f8cc <_reclaim_reent+0x58>
 800f884:	68db      	ldr	r3, [r3, #12]
 800f886:	b163      	cbz	r3, 800f8a2 <_reclaim_reent+0x2e>
 800f888:	2500      	movs	r5, #0
 800f88a:	69e3      	ldr	r3, [r4, #28]
 800f88c:	68db      	ldr	r3, [r3, #12]
 800f88e:	5959      	ldr	r1, [r3, r5]
 800f890:	b9b1      	cbnz	r1, 800f8c0 <_reclaim_reent+0x4c>
 800f892:	3504      	adds	r5, #4
 800f894:	2d80      	cmp	r5, #128	@ 0x80
 800f896:	d1f8      	bne.n	800f88a <_reclaim_reent+0x16>
 800f898:	69e3      	ldr	r3, [r4, #28]
 800f89a:	4620      	mov	r0, r4
 800f89c:	68d9      	ldr	r1, [r3, #12]
 800f89e:	f000 ff2b 	bl	80106f8 <_free_r>
 800f8a2:	69e3      	ldr	r3, [r4, #28]
 800f8a4:	6819      	ldr	r1, [r3, #0]
 800f8a6:	b111      	cbz	r1, 800f8ae <_reclaim_reent+0x3a>
 800f8a8:	4620      	mov	r0, r4
 800f8aa:	f000 ff25 	bl	80106f8 <_free_r>
 800f8ae:	69e3      	ldr	r3, [r4, #28]
 800f8b0:	689d      	ldr	r5, [r3, #8]
 800f8b2:	b15d      	cbz	r5, 800f8cc <_reclaim_reent+0x58>
 800f8b4:	4629      	mov	r1, r5
 800f8b6:	4620      	mov	r0, r4
 800f8b8:	682d      	ldr	r5, [r5, #0]
 800f8ba:	f000 ff1d 	bl	80106f8 <_free_r>
 800f8be:	e7f8      	b.n	800f8b2 <_reclaim_reent+0x3e>
 800f8c0:	680e      	ldr	r6, [r1, #0]
 800f8c2:	4620      	mov	r0, r4
 800f8c4:	f000 ff18 	bl	80106f8 <_free_r>
 800f8c8:	4631      	mov	r1, r6
 800f8ca:	e7e1      	b.n	800f890 <_reclaim_reent+0x1c>
 800f8cc:	6961      	ldr	r1, [r4, #20]
 800f8ce:	b111      	cbz	r1, 800f8d6 <_reclaim_reent+0x62>
 800f8d0:	4620      	mov	r0, r4
 800f8d2:	f000 ff11 	bl	80106f8 <_free_r>
 800f8d6:	69e1      	ldr	r1, [r4, #28]
 800f8d8:	b111      	cbz	r1, 800f8e0 <_reclaim_reent+0x6c>
 800f8da:	4620      	mov	r0, r4
 800f8dc:	f000 ff0c 	bl	80106f8 <_free_r>
 800f8e0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800f8e2:	b111      	cbz	r1, 800f8ea <_reclaim_reent+0x76>
 800f8e4:	4620      	mov	r0, r4
 800f8e6:	f000 ff07 	bl	80106f8 <_free_r>
 800f8ea:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f8ec:	b111      	cbz	r1, 800f8f4 <_reclaim_reent+0x80>
 800f8ee:	4620      	mov	r0, r4
 800f8f0:	f000 ff02 	bl	80106f8 <_free_r>
 800f8f4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800f8f6:	b111      	cbz	r1, 800f8fe <_reclaim_reent+0x8a>
 800f8f8:	4620      	mov	r0, r4
 800f8fa:	f000 fefd 	bl	80106f8 <_free_r>
 800f8fe:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800f900:	b111      	cbz	r1, 800f908 <_reclaim_reent+0x94>
 800f902:	4620      	mov	r0, r4
 800f904:	f000 fef8 	bl	80106f8 <_free_r>
 800f908:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800f90a:	b111      	cbz	r1, 800f912 <_reclaim_reent+0x9e>
 800f90c:	4620      	mov	r0, r4
 800f90e:	f000 fef3 	bl	80106f8 <_free_r>
 800f912:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800f914:	b111      	cbz	r1, 800f91c <_reclaim_reent+0xa8>
 800f916:	4620      	mov	r0, r4
 800f918:	f000 feee 	bl	80106f8 <_free_r>
 800f91c:	6a23      	ldr	r3, [r4, #32]
 800f91e:	b11b      	cbz	r3, 800f928 <_reclaim_reent+0xb4>
 800f920:	4620      	mov	r0, r4
 800f922:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f926:	4718      	bx	r3
 800f928:	bd70      	pop	{r4, r5, r6, pc}
 800f92a:	bf00      	nop
 800f92c:	200001c0 	.word	0x200001c0

0800f930 <_lseek_r>:
 800f930:	b538      	push	{r3, r4, r5, lr}
 800f932:	4d07      	ldr	r5, [pc, #28]	@ (800f950 <_lseek_r+0x20>)
 800f934:	4604      	mov	r4, r0
 800f936:	4608      	mov	r0, r1
 800f938:	4611      	mov	r1, r2
 800f93a:	2200      	movs	r2, #0
 800f93c:	602a      	str	r2, [r5, #0]
 800f93e:	461a      	mov	r2, r3
 800f940:	f7f4 fb82 	bl	8004048 <_lseek>
 800f944:	1c43      	adds	r3, r0, #1
 800f946:	d102      	bne.n	800f94e <_lseek_r+0x1e>
 800f948:	682b      	ldr	r3, [r5, #0]
 800f94a:	b103      	cbz	r3, 800f94e <_lseek_r+0x1e>
 800f94c:	6023      	str	r3, [r4, #0]
 800f94e:	bd38      	pop	{r3, r4, r5, pc}
 800f950:	20000644 	.word	0x20000644

0800f954 <_read_r>:
 800f954:	b538      	push	{r3, r4, r5, lr}
 800f956:	4d07      	ldr	r5, [pc, #28]	@ (800f974 <_read_r+0x20>)
 800f958:	4604      	mov	r4, r0
 800f95a:	4608      	mov	r0, r1
 800f95c:	4611      	mov	r1, r2
 800f95e:	2200      	movs	r2, #0
 800f960:	602a      	str	r2, [r5, #0]
 800f962:	461a      	mov	r2, r3
 800f964:	f7f4 fa74 	bl	8003e50 <_read>
 800f968:	1c43      	adds	r3, r0, #1
 800f96a:	d102      	bne.n	800f972 <_read_r+0x1e>
 800f96c:	682b      	ldr	r3, [r5, #0]
 800f96e:	b103      	cbz	r3, 800f972 <_read_r+0x1e>
 800f970:	6023      	str	r3, [r4, #0]
 800f972:	bd38      	pop	{r3, r4, r5, pc}
 800f974:	20000644 	.word	0x20000644

0800f978 <_write_r>:
 800f978:	b538      	push	{r3, r4, r5, lr}
 800f97a:	4d07      	ldr	r5, [pc, #28]	@ (800f998 <_write_r+0x20>)
 800f97c:	4604      	mov	r4, r0
 800f97e:	4608      	mov	r0, r1
 800f980:	4611      	mov	r1, r2
 800f982:	2200      	movs	r2, #0
 800f984:	602a      	str	r2, [r5, #0]
 800f986:	461a      	mov	r2, r3
 800f988:	f7f4 faa8 	bl	8003edc <_write>
 800f98c:	1c43      	adds	r3, r0, #1
 800f98e:	d102      	bne.n	800f996 <_write_r+0x1e>
 800f990:	682b      	ldr	r3, [r5, #0]
 800f992:	b103      	cbz	r3, 800f996 <_write_r+0x1e>
 800f994:	6023      	str	r3, [r4, #0]
 800f996:	bd38      	pop	{r3, r4, r5, pc}
 800f998:	20000644 	.word	0x20000644

0800f99c <__errno>:
 800f99c:	4b01      	ldr	r3, [pc, #4]	@ (800f9a4 <__errno+0x8>)
 800f99e:	6818      	ldr	r0, [r3, #0]
 800f9a0:	4770      	bx	lr
 800f9a2:	bf00      	nop
 800f9a4:	200001c0 	.word	0x200001c0

0800f9a8 <__libc_init_array>:
 800f9a8:	b570      	push	{r4, r5, r6, lr}
 800f9aa:	4d0d      	ldr	r5, [pc, #52]	@ (800f9e0 <__libc_init_array+0x38>)
 800f9ac:	4c0d      	ldr	r4, [pc, #52]	@ (800f9e4 <__libc_init_array+0x3c>)
 800f9ae:	1b64      	subs	r4, r4, r5
 800f9b0:	10a4      	asrs	r4, r4, #2
 800f9b2:	2600      	movs	r6, #0
 800f9b4:	42a6      	cmp	r6, r4
 800f9b6:	d109      	bne.n	800f9cc <__libc_init_array+0x24>
 800f9b8:	4d0b      	ldr	r5, [pc, #44]	@ (800f9e8 <__libc_init_array+0x40>)
 800f9ba:	4c0c      	ldr	r4, [pc, #48]	@ (800f9ec <__libc_init_array+0x44>)
 800f9bc:	f002 fc44 	bl	8012248 <_init>
 800f9c0:	1b64      	subs	r4, r4, r5
 800f9c2:	10a4      	asrs	r4, r4, #2
 800f9c4:	2600      	movs	r6, #0
 800f9c6:	42a6      	cmp	r6, r4
 800f9c8:	d105      	bne.n	800f9d6 <__libc_init_array+0x2e>
 800f9ca:	bd70      	pop	{r4, r5, r6, pc}
 800f9cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800f9d0:	4798      	blx	r3
 800f9d2:	3601      	adds	r6, #1
 800f9d4:	e7ee      	b.n	800f9b4 <__libc_init_array+0xc>
 800f9d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800f9da:	4798      	blx	r3
 800f9dc:	3601      	adds	r6, #1
 800f9de:	e7f2      	b.n	800f9c6 <__libc_init_array+0x1e>
 800f9e0:	08013fcc 	.word	0x08013fcc
 800f9e4:	08013fcc 	.word	0x08013fcc
 800f9e8:	08013fcc 	.word	0x08013fcc
 800f9ec:	08013fd4 	.word	0x08013fd4

0800f9f0 <__retarget_lock_init_recursive>:
 800f9f0:	4770      	bx	lr

0800f9f2 <__retarget_lock_close_recursive>:
 800f9f2:	4770      	bx	lr

0800f9f4 <__retarget_lock_acquire_recursive>:
 800f9f4:	4770      	bx	lr

0800f9f6 <__retarget_lock_release_recursive>:
 800f9f6:	4770      	bx	lr

0800f9f8 <memcpy>:
 800f9f8:	440a      	add	r2, r1
 800f9fa:	4291      	cmp	r1, r2
 800f9fc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800fa00:	d100      	bne.n	800fa04 <memcpy+0xc>
 800fa02:	4770      	bx	lr
 800fa04:	b510      	push	{r4, lr}
 800fa06:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fa0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fa0e:	4291      	cmp	r1, r2
 800fa10:	d1f9      	bne.n	800fa06 <memcpy+0xe>
 800fa12:	bd10      	pop	{r4, pc}
 800fa14:	0000      	movs	r0, r0
	...

0800fa18 <nan>:
 800fa18:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800fa20 <nan+0x8>
 800fa1c:	4770      	bx	lr
 800fa1e:	bf00      	nop
 800fa20:	00000000 	.word	0x00000000
 800fa24:	7ff80000 	.word	0x7ff80000

0800fa28 <nanf>:
 800fa28:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800fa30 <nanf+0x8>
 800fa2c:	4770      	bx	lr
 800fa2e:	bf00      	nop
 800fa30:	7fc00000 	.word	0x7fc00000

0800fa34 <abort>:
 800fa34:	b508      	push	{r3, lr}
 800fa36:	2006      	movs	r0, #6
 800fa38:	f002 fb3e 	bl	80120b8 <raise>
 800fa3c:	2001      	movs	r0, #1
 800fa3e:	f7f4 f9fb 	bl	8003e38 <_exit>

0800fa42 <quorem>:
 800fa42:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa46:	6903      	ldr	r3, [r0, #16]
 800fa48:	690c      	ldr	r4, [r1, #16]
 800fa4a:	42a3      	cmp	r3, r4
 800fa4c:	4607      	mov	r7, r0
 800fa4e:	db7e      	blt.n	800fb4e <quorem+0x10c>
 800fa50:	3c01      	subs	r4, #1
 800fa52:	f101 0814 	add.w	r8, r1, #20
 800fa56:	00a3      	lsls	r3, r4, #2
 800fa58:	f100 0514 	add.w	r5, r0, #20
 800fa5c:	9300      	str	r3, [sp, #0]
 800fa5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fa62:	9301      	str	r3, [sp, #4]
 800fa64:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fa68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fa6c:	3301      	adds	r3, #1
 800fa6e:	429a      	cmp	r2, r3
 800fa70:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fa74:	fbb2 f6f3 	udiv	r6, r2, r3
 800fa78:	d32e      	bcc.n	800fad8 <quorem+0x96>
 800fa7a:	f04f 0a00 	mov.w	sl, #0
 800fa7e:	46c4      	mov	ip, r8
 800fa80:	46ae      	mov	lr, r5
 800fa82:	46d3      	mov	fp, sl
 800fa84:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fa88:	b298      	uxth	r0, r3
 800fa8a:	fb06 a000 	mla	r0, r6, r0, sl
 800fa8e:	0c02      	lsrs	r2, r0, #16
 800fa90:	0c1b      	lsrs	r3, r3, #16
 800fa92:	fb06 2303 	mla	r3, r6, r3, r2
 800fa96:	f8de 2000 	ldr.w	r2, [lr]
 800fa9a:	b280      	uxth	r0, r0
 800fa9c:	b292      	uxth	r2, r2
 800fa9e:	1a12      	subs	r2, r2, r0
 800faa0:	445a      	add	r2, fp
 800faa2:	f8de 0000 	ldr.w	r0, [lr]
 800faa6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800faaa:	b29b      	uxth	r3, r3
 800faac:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800fab0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800fab4:	b292      	uxth	r2, r2
 800fab6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800faba:	45e1      	cmp	r9, ip
 800fabc:	f84e 2b04 	str.w	r2, [lr], #4
 800fac0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800fac4:	d2de      	bcs.n	800fa84 <quorem+0x42>
 800fac6:	9b00      	ldr	r3, [sp, #0]
 800fac8:	58eb      	ldr	r3, [r5, r3]
 800faca:	b92b      	cbnz	r3, 800fad8 <quorem+0x96>
 800facc:	9b01      	ldr	r3, [sp, #4]
 800face:	3b04      	subs	r3, #4
 800fad0:	429d      	cmp	r5, r3
 800fad2:	461a      	mov	r2, r3
 800fad4:	d32f      	bcc.n	800fb36 <quorem+0xf4>
 800fad6:	613c      	str	r4, [r7, #16]
 800fad8:	4638      	mov	r0, r7
 800fada:	f001 fc93 	bl	8011404 <__mcmp>
 800fade:	2800      	cmp	r0, #0
 800fae0:	db25      	blt.n	800fb2e <quorem+0xec>
 800fae2:	4629      	mov	r1, r5
 800fae4:	2000      	movs	r0, #0
 800fae6:	f858 2b04 	ldr.w	r2, [r8], #4
 800faea:	f8d1 c000 	ldr.w	ip, [r1]
 800faee:	fa1f fe82 	uxth.w	lr, r2
 800faf2:	fa1f f38c 	uxth.w	r3, ip
 800faf6:	eba3 030e 	sub.w	r3, r3, lr
 800fafa:	4403      	add	r3, r0
 800fafc:	0c12      	lsrs	r2, r2, #16
 800fafe:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800fb02:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800fb06:	b29b      	uxth	r3, r3
 800fb08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fb0c:	45c1      	cmp	r9, r8
 800fb0e:	f841 3b04 	str.w	r3, [r1], #4
 800fb12:	ea4f 4022 	mov.w	r0, r2, asr #16
 800fb16:	d2e6      	bcs.n	800fae6 <quorem+0xa4>
 800fb18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fb1c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fb20:	b922      	cbnz	r2, 800fb2c <quorem+0xea>
 800fb22:	3b04      	subs	r3, #4
 800fb24:	429d      	cmp	r5, r3
 800fb26:	461a      	mov	r2, r3
 800fb28:	d30b      	bcc.n	800fb42 <quorem+0x100>
 800fb2a:	613c      	str	r4, [r7, #16]
 800fb2c:	3601      	adds	r6, #1
 800fb2e:	4630      	mov	r0, r6
 800fb30:	b003      	add	sp, #12
 800fb32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb36:	6812      	ldr	r2, [r2, #0]
 800fb38:	3b04      	subs	r3, #4
 800fb3a:	2a00      	cmp	r2, #0
 800fb3c:	d1cb      	bne.n	800fad6 <quorem+0x94>
 800fb3e:	3c01      	subs	r4, #1
 800fb40:	e7c6      	b.n	800fad0 <quorem+0x8e>
 800fb42:	6812      	ldr	r2, [r2, #0]
 800fb44:	3b04      	subs	r3, #4
 800fb46:	2a00      	cmp	r2, #0
 800fb48:	d1ef      	bne.n	800fb2a <quorem+0xe8>
 800fb4a:	3c01      	subs	r4, #1
 800fb4c:	e7ea      	b.n	800fb24 <quorem+0xe2>
 800fb4e:	2000      	movs	r0, #0
 800fb50:	e7ee      	b.n	800fb30 <quorem+0xee>
 800fb52:	0000      	movs	r0, r0
 800fb54:	0000      	movs	r0, r0
	...

0800fb58 <_dtoa_r>:
 800fb58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb5c:	69c7      	ldr	r7, [r0, #28]
 800fb5e:	b097      	sub	sp, #92	@ 0x5c
 800fb60:	ed8d 0b04 	vstr	d0, [sp, #16]
 800fb64:	ec55 4b10 	vmov	r4, r5, d0
 800fb68:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800fb6a:	9107      	str	r1, [sp, #28]
 800fb6c:	4681      	mov	r9, r0
 800fb6e:	920c      	str	r2, [sp, #48]	@ 0x30
 800fb70:	9311      	str	r3, [sp, #68]	@ 0x44
 800fb72:	b97f      	cbnz	r7, 800fb94 <_dtoa_r+0x3c>
 800fb74:	2010      	movs	r0, #16
 800fb76:	f7fd fb61 	bl	800d23c <malloc>
 800fb7a:	4602      	mov	r2, r0
 800fb7c:	f8c9 001c 	str.w	r0, [r9, #28]
 800fb80:	b920      	cbnz	r0, 800fb8c <_dtoa_r+0x34>
 800fb82:	4ba9      	ldr	r3, [pc, #676]	@ (800fe28 <_dtoa_r+0x2d0>)
 800fb84:	21ef      	movs	r1, #239	@ 0xef
 800fb86:	48a9      	ldr	r0, [pc, #676]	@ (800fe2c <_dtoa_r+0x2d4>)
 800fb88:	f7fd fad2 	bl	800d130 <__assert_func>
 800fb8c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800fb90:	6007      	str	r7, [r0, #0]
 800fb92:	60c7      	str	r7, [r0, #12]
 800fb94:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800fb98:	6819      	ldr	r1, [r3, #0]
 800fb9a:	b159      	cbz	r1, 800fbb4 <_dtoa_r+0x5c>
 800fb9c:	685a      	ldr	r2, [r3, #4]
 800fb9e:	604a      	str	r2, [r1, #4]
 800fba0:	2301      	movs	r3, #1
 800fba2:	4093      	lsls	r3, r2
 800fba4:	608b      	str	r3, [r1, #8]
 800fba6:	4648      	mov	r0, r9
 800fba8:	f001 f9b0 	bl	8010f0c <_Bfree>
 800fbac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800fbb0:	2200      	movs	r2, #0
 800fbb2:	601a      	str	r2, [r3, #0]
 800fbb4:	1e2b      	subs	r3, r5, #0
 800fbb6:	bfb9      	ittee	lt
 800fbb8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800fbbc:	9305      	strlt	r3, [sp, #20]
 800fbbe:	2300      	movge	r3, #0
 800fbc0:	6033      	strge	r3, [r6, #0]
 800fbc2:	9f05      	ldr	r7, [sp, #20]
 800fbc4:	4b9a      	ldr	r3, [pc, #616]	@ (800fe30 <_dtoa_r+0x2d8>)
 800fbc6:	bfbc      	itt	lt
 800fbc8:	2201      	movlt	r2, #1
 800fbca:	6032      	strlt	r2, [r6, #0]
 800fbcc:	43bb      	bics	r3, r7
 800fbce:	d112      	bne.n	800fbf6 <_dtoa_r+0x9e>
 800fbd0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800fbd2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800fbd6:	6013      	str	r3, [r2, #0]
 800fbd8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fbdc:	4323      	orrs	r3, r4
 800fbde:	f000 855a 	beq.w	8010696 <_dtoa_r+0xb3e>
 800fbe2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800fbe4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800fe44 <_dtoa_r+0x2ec>
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	f000 855c 	beq.w	80106a6 <_dtoa_r+0xb4e>
 800fbee:	f10a 0303 	add.w	r3, sl, #3
 800fbf2:	f000 bd56 	b.w	80106a2 <_dtoa_r+0xb4a>
 800fbf6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800fbfa:	2200      	movs	r2, #0
 800fbfc:	ec51 0b17 	vmov	r0, r1, d7
 800fc00:	2300      	movs	r3, #0
 800fc02:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800fc06:	f7f0 ff8f 	bl	8000b28 <__aeabi_dcmpeq>
 800fc0a:	4680      	mov	r8, r0
 800fc0c:	b158      	cbz	r0, 800fc26 <_dtoa_r+0xce>
 800fc0e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800fc10:	2301      	movs	r3, #1
 800fc12:	6013      	str	r3, [r2, #0]
 800fc14:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800fc16:	b113      	cbz	r3, 800fc1e <_dtoa_r+0xc6>
 800fc18:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800fc1a:	4b86      	ldr	r3, [pc, #536]	@ (800fe34 <_dtoa_r+0x2dc>)
 800fc1c:	6013      	str	r3, [r2, #0]
 800fc1e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800fe48 <_dtoa_r+0x2f0>
 800fc22:	f000 bd40 	b.w	80106a6 <_dtoa_r+0xb4e>
 800fc26:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800fc2a:	aa14      	add	r2, sp, #80	@ 0x50
 800fc2c:	a915      	add	r1, sp, #84	@ 0x54
 800fc2e:	4648      	mov	r0, r9
 800fc30:	f001 fd08 	bl	8011644 <__d2b>
 800fc34:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800fc38:	9002      	str	r0, [sp, #8]
 800fc3a:	2e00      	cmp	r6, #0
 800fc3c:	d078      	beq.n	800fd30 <_dtoa_r+0x1d8>
 800fc3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fc40:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800fc44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fc48:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800fc4c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800fc50:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800fc54:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800fc58:	4619      	mov	r1, r3
 800fc5a:	2200      	movs	r2, #0
 800fc5c:	4b76      	ldr	r3, [pc, #472]	@ (800fe38 <_dtoa_r+0x2e0>)
 800fc5e:	f7f0 fb43 	bl	80002e8 <__aeabi_dsub>
 800fc62:	a36b      	add	r3, pc, #428	@ (adr r3, 800fe10 <_dtoa_r+0x2b8>)
 800fc64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc68:	f7f0 fcf6 	bl	8000658 <__aeabi_dmul>
 800fc6c:	a36a      	add	r3, pc, #424	@ (adr r3, 800fe18 <_dtoa_r+0x2c0>)
 800fc6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc72:	f7f0 fb3b 	bl	80002ec <__adddf3>
 800fc76:	4604      	mov	r4, r0
 800fc78:	4630      	mov	r0, r6
 800fc7a:	460d      	mov	r5, r1
 800fc7c:	f7f0 fc82 	bl	8000584 <__aeabi_i2d>
 800fc80:	a367      	add	r3, pc, #412	@ (adr r3, 800fe20 <_dtoa_r+0x2c8>)
 800fc82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc86:	f7f0 fce7 	bl	8000658 <__aeabi_dmul>
 800fc8a:	4602      	mov	r2, r0
 800fc8c:	460b      	mov	r3, r1
 800fc8e:	4620      	mov	r0, r4
 800fc90:	4629      	mov	r1, r5
 800fc92:	f7f0 fb2b 	bl	80002ec <__adddf3>
 800fc96:	4604      	mov	r4, r0
 800fc98:	460d      	mov	r5, r1
 800fc9a:	f7f0 ff8d 	bl	8000bb8 <__aeabi_d2iz>
 800fc9e:	2200      	movs	r2, #0
 800fca0:	4607      	mov	r7, r0
 800fca2:	2300      	movs	r3, #0
 800fca4:	4620      	mov	r0, r4
 800fca6:	4629      	mov	r1, r5
 800fca8:	f7f0 ff48 	bl	8000b3c <__aeabi_dcmplt>
 800fcac:	b140      	cbz	r0, 800fcc0 <_dtoa_r+0x168>
 800fcae:	4638      	mov	r0, r7
 800fcb0:	f7f0 fc68 	bl	8000584 <__aeabi_i2d>
 800fcb4:	4622      	mov	r2, r4
 800fcb6:	462b      	mov	r3, r5
 800fcb8:	f7f0 ff36 	bl	8000b28 <__aeabi_dcmpeq>
 800fcbc:	b900      	cbnz	r0, 800fcc0 <_dtoa_r+0x168>
 800fcbe:	3f01      	subs	r7, #1
 800fcc0:	2f16      	cmp	r7, #22
 800fcc2:	d852      	bhi.n	800fd6a <_dtoa_r+0x212>
 800fcc4:	4b5d      	ldr	r3, [pc, #372]	@ (800fe3c <_dtoa_r+0x2e4>)
 800fcc6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fcca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800fcd2:	f7f0 ff33 	bl	8000b3c <__aeabi_dcmplt>
 800fcd6:	2800      	cmp	r0, #0
 800fcd8:	d049      	beq.n	800fd6e <_dtoa_r+0x216>
 800fcda:	3f01      	subs	r7, #1
 800fcdc:	2300      	movs	r3, #0
 800fcde:	9310      	str	r3, [sp, #64]	@ 0x40
 800fce0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800fce2:	1b9b      	subs	r3, r3, r6
 800fce4:	1e5a      	subs	r2, r3, #1
 800fce6:	bf45      	ittet	mi
 800fce8:	f1c3 0301 	rsbmi	r3, r3, #1
 800fcec:	9300      	strmi	r3, [sp, #0]
 800fcee:	2300      	movpl	r3, #0
 800fcf0:	2300      	movmi	r3, #0
 800fcf2:	9206      	str	r2, [sp, #24]
 800fcf4:	bf54      	ite	pl
 800fcf6:	9300      	strpl	r3, [sp, #0]
 800fcf8:	9306      	strmi	r3, [sp, #24]
 800fcfa:	2f00      	cmp	r7, #0
 800fcfc:	db39      	blt.n	800fd72 <_dtoa_r+0x21a>
 800fcfe:	9b06      	ldr	r3, [sp, #24]
 800fd00:	970d      	str	r7, [sp, #52]	@ 0x34
 800fd02:	443b      	add	r3, r7
 800fd04:	9306      	str	r3, [sp, #24]
 800fd06:	2300      	movs	r3, #0
 800fd08:	9308      	str	r3, [sp, #32]
 800fd0a:	9b07      	ldr	r3, [sp, #28]
 800fd0c:	2b09      	cmp	r3, #9
 800fd0e:	d863      	bhi.n	800fdd8 <_dtoa_r+0x280>
 800fd10:	2b05      	cmp	r3, #5
 800fd12:	bfc4      	itt	gt
 800fd14:	3b04      	subgt	r3, #4
 800fd16:	9307      	strgt	r3, [sp, #28]
 800fd18:	9b07      	ldr	r3, [sp, #28]
 800fd1a:	f1a3 0302 	sub.w	r3, r3, #2
 800fd1e:	bfcc      	ite	gt
 800fd20:	2400      	movgt	r4, #0
 800fd22:	2401      	movle	r4, #1
 800fd24:	2b03      	cmp	r3, #3
 800fd26:	d863      	bhi.n	800fdf0 <_dtoa_r+0x298>
 800fd28:	e8df f003 	tbb	[pc, r3]
 800fd2c:	2b375452 	.word	0x2b375452
 800fd30:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800fd34:	441e      	add	r6, r3
 800fd36:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800fd3a:	2b20      	cmp	r3, #32
 800fd3c:	bfc1      	itttt	gt
 800fd3e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800fd42:	409f      	lslgt	r7, r3
 800fd44:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800fd48:	fa24 f303 	lsrgt.w	r3, r4, r3
 800fd4c:	bfd6      	itet	le
 800fd4e:	f1c3 0320 	rsble	r3, r3, #32
 800fd52:	ea47 0003 	orrgt.w	r0, r7, r3
 800fd56:	fa04 f003 	lslle.w	r0, r4, r3
 800fd5a:	f7f0 fc03 	bl	8000564 <__aeabi_ui2d>
 800fd5e:	2201      	movs	r2, #1
 800fd60:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800fd64:	3e01      	subs	r6, #1
 800fd66:	9212      	str	r2, [sp, #72]	@ 0x48
 800fd68:	e776      	b.n	800fc58 <_dtoa_r+0x100>
 800fd6a:	2301      	movs	r3, #1
 800fd6c:	e7b7      	b.n	800fcde <_dtoa_r+0x186>
 800fd6e:	9010      	str	r0, [sp, #64]	@ 0x40
 800fd70:	e7b6      	b.n	800fce0 <_dtoa_r+0x188>
 800fd72:	9b00      	ldr	r3, [sp, #0]
 800fd74:	1bdb      	subs	r3, r3, r7
 800fd76:	9300      	str	r3, [sp, #0]
 800fd78:	427b      	negs	r3, r7
 800fd7a:	9308      	str	r3, [sp, #32]
 800fd7c:	2300      	movs	r3, #0
 800fd7e:	930d      	str	r3, [sp, #52]	@ 0x34
 800fd80:	e7c3      	b.n	800fd0a <_dtoa_r+0x1b2>
 800fd82:	2301      	movs	r3, #1
 800fd84:	9309      	str	r3, [sp, #36]	@ 0x24
 800fd86:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fd88:	eb07 0b03 	add.w	fp, r7, r3
 800fd8c:	f10b 0301 	add.w	r3, fp, #1
 800fd90:	2b01      	cmp	r3, #1
 800fd92:	9303      	str	r3, [sp, #12]
 800fd94:	bfb8      	it	lt
 800fd96:	2301      	movlt	r3, #1
 800fd98:	e006      	b.n	800fda8 <_dtoa_r+0x250>
 800fd9a:	2301      	movs	r3, #1
 800fd9c:	9309      	str	r3, [sp, #36]	@ 0x24
 800fd9e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	dd28      	ble.n	800fdf6 <_dtoa_r+0x29e>
 800fda4:	469b      	mov	fp, r3
 800fda6:	9303      	str	r3, [sp, #12]
 800fda8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800fdac:	2100      	movs	r1, #0
 800fdae:	2204      	movs	r2, #4
 800fdb0:	f102 0514 	add.w	r5, r2, #20
 800fdb4:	429d      	cmp	r5, r3
 800fdb6:	d926      	bls.n	800fe06 <_dtoa_r+0x2ae>
 800fdb8:	6041      	str	r1, [r0, #4]
 800fdba:	4648      	mov	r0, r9
 800fdbc:	f001 f866 	bl	8010e8c <_Balloc>
 800fdc0:	4682      	mov	sl, r0
 800fdc2:	2800      	cmp	r0, #0
 800fdc4:	d142      	bne.n	800fe4c <_dtoa_r+0x2f4>
 800fdc6:	4b1e      	ldr	r3, [pc, #120]	@ (800fe40 <_dtoa_r+0x2e8>)
 800fdc8:	4602      	mov	r2, r0
 800fdca:	f240 11af 	movw	r1, #431	@ 0x1af
 800fdce:	e6da      	b.n	800fb86 <_dtoa_r+0x2e>
 800fdd0:	2300      	movs	r3, #0
 800fdd2:	e7e3      	b.n	800fd9c <_dtoa_r+0x244>
 800fdd4:	2300      	movs	r3, #0
 800fdd6:	e7d5      	b.n	800fd84 <_dtoa_r+0x22c>
 800fdd8:	2401      	movs	r4, #1
 800fdda:	2300      	movs	r3, #0
 800fddc:	9307      	str	r3, [sp, #28]
 800fdde:	9409      	str	r4, [sp, #36]	@ 0x24
 800fde0:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800fde4:	2200      	movs	r2, #0
 800fde6:	f8cd b00c 	str.w	fp, [sp, #12]
 800fdea:	2312      	movs	r3, #18
 800fdec:	920c      	str	r2, [sp, #48]	@ 0x30
 800fdee:	e7db      	b.n	800fda8 <_dtoa_r+0x250>
 800fdf0:	2301      	movs	r3, #1
 800fdf2:	9309      	str	r3, [sp, #36]	@ 0x24
 800fdf4:	e7f4      	b.n	800fde0 <_dtoa_r+0x288>
 800fdf6:	f04f 0b01 	mov.w	fp, #1
 800fdfa:	f8cd b00c 	str.w	fp, [sp, #12]
 800fdfe:	465b      	mov	r3, fp
 800fe00:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800fe04:	e7d0      	b.n	800fda8 <_dtoa_r+0x250>
 800fe06:	3101      	adds	r1, #1
 800fe08:	0052      	lsls	r2, r2, #1
 800fe0a:	e7d1      	b.n	800fdb0 <_dtoa_r+0x258>
 800fe0c:	f3af 8000 	nop.w
 800fe10:	636f4361 	.word	0x636f4361
 800fe14:	3fd287a7 	.word	0x3fd287a7
 800fe18:	8b60c8b3 	.word	0x8b60c8b3
 800fe1c:	3fc68a28 	.word	0x3fc68a28
 800fe20:	509f79fb 	.word	0x509f79fb
 800fe24:	3fd34413 	.word	0x3fd34413
 800fe28:	08013bb7 	.word	0x08013bb7
 800fe2c:	08013c3d 	.word	0x08013c3d
 800fe30:	7ff00000 	.word	0x7ff00000
 800fe34:	08013b8f 	.word	0x08013b8f
 800fe38:	3ff80000 	.word	0x3ff80000
 800fe3c:	08013df8 	.word	0x08013df8
 800fe40:	08013c95 	.word	0x08013c95
 800fe44:	08013c39 	.word	0x08013c39
 800fe48:	08013b8e 	.word	0x08013b8e
 800fe4c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800fe50:	6018      	str	r0, [r3, #0]
 800fe52:	9b03      	ldr	r3, [sp, #12]
 800fe54:	2b0e      	cmp	r3, #14
 800fe56:	f200 80a1 	bhi.w	800ff9c <_dtoa_r+0x444>
 800fe5a:	2c00      	cmp	r4, #0
 800fe5c:	f000 809e 	beq.w	800ff9c <_dtoa_r+0x444>
 800fe60:	2f00      	cmp	r7, #0
 800fe62:	dd33      	ble.n	800fecc <_dtoa_r+0x374>
 800fe64:	4b9c      	ldr	r3, [pc, #624]	@ (80100d8 <_dtoa_r+0x580>)
 800fe66:	f007 020f 	and.w	r2, r7, #15
 800fe6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fe6e:	ed93 7b00 	vldr	d7, [r3]
 800fe72:	05f8      	lsls	r0, r7, #23
 800fe74:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800fe78:	ea4f 1427 	mov.w	r4, r7, asr #4
 800fe7c:	d516      	bpl.n	800feac <_dtoa_r+0x354>
 800fe7e:	4b97      	ldr	r3, [pc, #604]	@ (80100dc <_dtoa_r+0x584>)
 800fe80:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800fe84:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fe88:	f7f0 fd10 	bl	80008ac <__aeabi_ddiv>
 800fe8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fe90:	f004 040f 	and.w	r4, r4, #15
 800fe94:	2603      	movs	r6, #3
 800fe96:	4d91      	ldr	r5, [pc, #580]	@ (80100dc <_dtoa_r+0x584>)
 800fe98:	b954      	cbnz	r4, 800feb0 <_dtoa_r+0x358>
 800fe9a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800fe9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fea2:	f7f0 fd03 	bl	80008ac <__aeabi_ddiv>
 800fea6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800feaa:	e028      	b.n	800fefe <_dtoa_r+0x3a6>
 800feac:	2602      	movs	r6, #2
 800feae:	e7f2      	b.n	800fe96 <_dtoa_r+0x33e>
 800feb0:	07e1      	lsls	r1, r4, #31
 800feb2:	d508      	bpl.n	800fec6 <_dtoa_r+0x36e>
 800feb4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800feb8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800febc:	f7f0 fbcc 	bl	8000658 <__aeabi_dmul>
 800fec0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800fec4:	3601      	adds	r6, #1
 800fec6:	1064      	asrs	r4, r4, #1
 800fec8:	3508      	adds	r5, #8
 800feca:	e7e5      	b.n	800fe98 <_dtoa_r+0x340>
 800fecc:	f000 80af 	beq.w	801002e <_dtoa_r+0x4d6>
 800fed0:	427c      	negs	r4, r7
 800fed2:	4b81      	ldr	r3, [pc, #516]	@ (80100d8 <_dtoa_r+0x580>)
 800fed4:	4d81      	ldr	r5, [pc, #516]	@ (80100dc <_dtoa_r+0x584>)
 800fed6:	f004 020f 	and.w	r2, r4, #15
 800feda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fede:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fee2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800fee6:	f7f0 fbb7 	bl	8000658 <__aeabi_dmul>
 800feea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800feee:	1124      	asrs	r4, r4, #4
 800fef0:	2300      	movs	r3, #0
 800fef2:	2602      	movs	r6, #2
 800fef4:	2c00      	cmp	r4, #0
 800fef6:	f040 808f 	bne.w	8010018 <_dtoa_r+0x4c0>
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d1d3      	bne.n	800fea6 <_dtoa_r+0x34e>
 800fefe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ff00:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	f000 8094 	beq.w	8010032 <_dtoa_r+0x4da>
 800ff0a:	4b75      	ldr	r3, [pc, #468]	@ (80100e0 <_dtoa_r+0x588>)
 800ff0c:	2200      	movs	r2, #0
 800ff0e:	4620      	mov	r0, r4
 800ff10:	4629      	mov	r1, r5
 800ff12:	f7f0 fe13 	bl	8000b3c <__aeabi_dcmplt>
 800ff16:	2800      	cmp	r0, #0
 800ff18:	f000 808b 	beq.w	8010032 <_dtoa_r+0x4da>
 800ff1c:	9b03      	ldr	r3, [sp, #12]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	f000 8087 	beq.w	8010032 <_dtoa_r+0x4da>
 800ff24:	f1bb 0f00 	cmp.w	fp, #0
 800ff28:	dd34      	ble.n	800ff94 <_dtoa_r+0x43c>
 800ff2a:	4620      	mov	r0, r4
 800ff2c:	4b6d      	ldr	r3, [pc, #436]	@ (80100e4 <_dtoa_r+0x58c>)
 800ff2e:	2200      	movs	r2, #0
 800ff30:	4629      	mov	r1, r5
 800ff32:	f7f0 fb91 	bl	8000658 <__aeabi_dmul>
 800ff36:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ff3a:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800ff3e:	3601      	adds	r6, #1
 800ff40:	465c      	mov	r4, fp
 800ff42:	4630      	mov	r0, r6
 800ff44:	f7f0 fb1e 	bl	8000584 <__aeabi_i2d>
 800ff48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ff4c:	f7f0 fb84 	bl	8000658 <__aeabi_dmul>
 800ff50:	4b65      	ldr	r3, [pc, #404]	@ (80100e8 <_dtoa_r+0x590>)
 800ff52:	2200      	movs	r2, #0
 800ff54:	f7f0 f9ca 	bl	80002ec <__adddf3>
 800ff58:	4605      	mov	r5, r0
 800ff5a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ff5e:	2c00      	cmp	r4, #0
 800ff60:	d16a      	bne.n	8010038 <_dtoa_r+0x4e0>
 800ff62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ff66:	4b61      	ldr	r3, [pc, #388]	@ (80100ec <_dtoa_r+0x594>)
 800ff68:	2200      	movs	r2, #0
 800ff6a:	f7f0 f9bd 	bl	80002e8 <__aeabi_dsub>
 800ff6e:	4602      	mov	r2, r0
 800ff70:	460b      	mov	r3, r1
 800ff72:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ff76:	462a      	mov	r2, r5
 800ff78:	4633      	mov	r3, r6
 800ff7a:	f7f0 fdfd 	bl	8000b78 <__aeabi_dcmpgt>
 800ff7e:	2800      	cmp	r0, #0
 800ff80:	f040 8298 	bne.w	80104b4 <_dtoa_r+0x95c>
 800ff84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ff88:	462a      	mov	r2, r5
 800ff8a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ff8e:	f7f0 fdd5 	bl	8000b3c <__aeabi_dcmplt>
 800ff92:	bb38      	cbnz	r0, 800ffe4 <_dtoa_r+0x48c>
 800ff94:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800ff98:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ff9c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	f2c0 8157 	blt.w	8010252 <_dtoa_r+0x6fa>
 800ffa4:	2f0e      	cmp	r7, #14
 800ffa6:	f300 8154 	bgt.w	8010252 <_dtoa_r+0x6fa>
 800ffaa:	4b4b      	ldr	r3, [pc, #300]	@ (80100d8 <_dtoa_r+0x580>)
 800ffac:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ffb0:	ed93 7b00 	vldr	d7, [r3]
 800ffb4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	ed8d 7b00 	vstr	d7, [sp]
 800ffbc:	f280 80e5 	bge.w	801018a <_dtoa_r+0x632>
 800ffc0:	9b03      	ldr	r3, [sp, #12]
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	f300 80e1 	bgt.w	801018a <_dtoa_r+0x632>
 800ffc8:	d10c      	bne.n	800ffe4 <_dtoa_r+0x48c>
 800ffca:	4b48      	ldr	r3, [pc, #288]	@ (80100ec <_dtoa_r+0x594>)
 800ffcc:	2200      	movs	r2, #0
 800ffce:	ec51 0b17 	vmov	r0, r1, d7
 800ffd2:	f7f0 fb41 	bl	8000658 <__aeabi_dmul>
 800ffd6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ffda:	f7f0 fdc3 	bl	8000b64 <__aeabi_dcmpge>
 800ffde:	2800      	cmp	r0, #0
 800ffe0:	f000 8266 	beq.w	80104b0 <_dtoa_r+0x958>
 800ffe4:	2400      	movs	r4, #0
 800ffe6:	4625      	mov	r5, r4
 800ffe8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ffea:	4656      	mov	r6, sl
 800ffec:	ea6f 0803 	mvn.w	r8, r3
 800fff0:	2700      	movs	r7, #0
 800fff2:	4621      	mov	r1, r4
 800fff4:	4648      	mov	r0, r9
 800fff6:	f000 ff89 	bl	8010f0c <_Bfree>
 800fffa:	2d00      	cmp	r5, #0
 800fffc:	f000 80bd 	beq.w	801017a <_dtoa_r+0x622>
 8010000:	b12f      	cbz	r7, 801000e <_dtoa_r+0x4b6>
 8010002:	42af      	cmp	r7, r5
 8010004:	d003      	beq.n	801000e <_dtoa_r+0x4b6>
 8010006:	4639      	mov	r1, r7
 8010008:	4648      	mov	r0, r9
 801000a:	f000 ff7f 	bl	8010f0c <_Bfree>
 801000e:	4629      	mov	r1, r5
 8010010:	4648      	mov	r0, r9
 8010012:	f000 ff7b 	bl	8010f0c <_Bfree>
 8010016:	e0b0      	b.n	801017a <_dtoa_r+0x622>
 8010018:	07e2      	lsls	r2, r4, #31
 801001a:	d505      	bpl.n	8010028 <_dtoa_r+0x4d0>
 801001c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010020:	f7f0 fb1a 	bl	8000658 <__aeabi_dmul>
 8010024:	3601      	adds	r6, #1
 8010026:	2301      	movs	r3, #1
 8010028:	1064      	asrs	r4, r4, #1
 801002a:	3508      	adds	r5, #8
 801002c:	e762      	b.n	800fef4 <_dtoa_r+0x39c>
 801002e:	2602      	movs	r6, #2
 8010030:	e765      	b.n	800fefe <_dtoa_r+0x3a6>
 8010032:	9c03      	ldr	r4, [sp, #12]
 8010034:	46b8      	mov	r8, r7
 8010036:	e784      	b.n	800ff42 <_dtoa_r+0x3ea>
 8010038:	4b27      	ldr	r3, [pc, #156]	@ (80100d8 <_dtoa_r+0x580>)
 801003a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801003c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010040:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010044:	4454      	add	r4, sl
 8010046:	2900      	cmp	r1, #0
 8010048:	d054      	beq.n	80100f4 <_dtoa_r+0x59c>
 801004a:	4929      	ldr	r1, [pc, #164]	@ (80100f0 <_dtoa_r+0x598>)
 801004c:	2000      	movs	r0, #0
 801004e:	f7f0 fc2d 	bl	80008ac <__aeabi_ddiv>
 8010052:	4633      	mov	r3, r6
 8010054:	462a      	mov	r2, r5
 8010056:	f7f0 f947 	bl	80002e8 <__aeabi_dsub>
 801005a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801005e:	4656      	mov	r6, sl
 8010060:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010064:	f7f0 fda8 	bl	8000bb8 <__aeabi_d2iz>
 8010068:	4605      	mov	r5, r0
 801006a:	f7f0 fa8b 	bl	8000584 <__aeabi_i2d>
 801006e:	4602      	mov	r2, r0
 8010070:	460b      	mov	r3, r1
 8010072:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010076:	f7f0 f937 	bl	80002e8 <__aeabi_dsub>
 801007a:	3530      	adds	r5, #48	@ 0x30
 801007c:	4602      	mov	r2, r0
 801007e:	460b      	mov	r3, r1
 8010080:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010084:	f806 5b01 	strb.w	r5, [r6], #1
 8010088:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801008c:	f7f0 fd56 	bl	8000b3c <__aeabi_dcmplt>
 8010090:	2800      	cmp	r0, #0
 8010092:	d172      	bne.n	801017a <_dtoa_r+0x622>
 8010094:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010098:	4911      	ldr	r1, [pc, #68]	@ (80100e0 <_dtoa_r+0x588>)
 801009a:	2000      	movs	r0, #0
 801009c:	f7f0 f924 	bl	80002e8 <__aeabi_dsub>
 80100a0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80100a4:	f7f0 fd4a 	bl	8000b3c <__aeabi_dcmplt>
 80100a8:	2800      	cmp	r0, #0
 80100aa:	f040 80b4 	bne.w	8010216 <_dtoa_r+0x6be>
 80100ae:	42a6      	cmp	r6, r4
 80100b0:	f43f af70 	beq.w	800ff94 <_dtoa_r+0x43c>
 80100b4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80100b8:	4b0a      	ldr	r3, [pc, #40]	@ (80100e4 <_dtoa_r+0x58c>)
 80100ba:	2200      	movs	r2, #0
 80100bc:	f7f0 facc 	bl	8000658 <__aeabi_dmul>
 80100c0:	4b08      	ldr	r3, [pc, #32]	@ (80100e4 <_dtoa_r+0x58c>)
 80100c2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80100c6:	2200      	movs	r2, #0
 80100c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80100cc:	f7f0 fac4 	bl	8000658 <__aeabi_dmul>
 80100d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80100d4:	e7c4      	b.n	8010060 <_dtoa_r+0x508>
 80100d6:	bf00      	nop
 80100d8:	08013df8 	.word	0x08013df8
 80100dc:	08013dd0 	.word	0x08013dd0
 80100e0:	3ff00000 	.word	0x3ff00000
 80100e4:	40240000 	.word	0x40240000
 80100e8:	401c0000 	.word	0x401c0000
 80100ec:	40140000 	.word	0x40140000
 80100f0:	3fe00000 	.word	0x3fe00000
 80100f4:	4631      	mov	r1, r6
 80100f6:	4628      	mov	r0, r5
 80100f8:	f7f0 faae 	bl	8000658 <__aeabi_dmul>
 80100fc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010100:	9413      	str	r4, [sp, #76]	@ 0x4c
 8010102:	4656      	mov	r6, sl
 8010104:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010108:	f7f0 fd56 	bl	8000bb8 <__aeabi_d2iz>
 801010c:	4605      	mov	r5, r0
 801010e:	f7f0 fa39 	bl	8000584 <__aeabi_i2d>
 8010112:	4602      	mov	r2, r0
 8010114:	460b      	mov	r3, r1
 8010116:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801011a:	f7f0 f8e5 	bl	80002e8 <__aeabi_dsub>
 801011e:	3530      	adds	r5, #48	@ 0x30
 8010120:	f806 5b01 	strb.w	r5, [r6], #1
 8010124:	4602      	mov	r2, r0
 8010126:	460b      	mov	r3, r1
 8010128:	42a6      	cmp	r6, r4
 801012a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801012e:	f04f 0200 	mov.w	r2, #0
 8010132:	d124      	bne.n	801017e <_dtoa_r+0x626>
 8010134:	4baf      	ldr	r3, [pc, #700]	@ (80103f4 <_dtoa_r+0x89c>)
 8010136:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801013a:	f7f0 f8d7 	bl	80002ec <__adddf3>
 801013e:	4602      	mov	r2, r0
 8010140:	460b      	mov	r3, r1
 8010142:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010146:	f7f0 fd17 	bl	8000b78 <__aeabi_dcmpgt>
 801014a:	2800      	cmp	r0, #0
 801014c:	d163      	bne.n	8010216 <_dtoa_r+0x6be>
 801014e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010152:	49a8      	ldr	r1, [pc, #672]	@ (80103f4 <_dtoa_r+0x89c>)
 8010154:	2000      	movs	r0, #0
 8010156:	f7f0 f8c7 	bl	80002e8 <__aeabi_dsub>
 801015a:	4602      	mov	r2, r0
 801015c:	460b      	mov	r3, r1
 801015e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010162:	f7f0 fceb 	bl	8000b3c <__aeabi_dcmplt>
 8010166:	2800      	cmp	r0, #0
 8010168:	f43f af14 	beq.w	800ff94 <_dtoa_r+0x43c>
 801016c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801016e:	1e73      	subs	r3, r6, #1
 8010170:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010172:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010176:	2b30      	cmp	r3, #48	@ 0x30
 8010178:	d0f8      	beq.n	801016c <_dtoa_r+0x614>
 801017a:	4647      	mov	r7, r8
 801017c:	e03b      	b.n	80101f6 <_dtoa_r+0x69e>
 801017e:	4b9e      	ldr	r3, [pc, #632]	@ (80103f8 <_dtoa_r+0x8a0>)
 8010180:	f7f0 fa6a 	bl	8000658 <__aeabi_dmul>
 8010184:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010188:	e7bc      	b.n	8010104 <_dtoa_r+0x5ac>
 801018a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801018e:	4656      	mov	r6, sl
 8010190:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010194:	4620      	mov	r0, r4
 8010196:	4629      	mov	r1, r5
 8010198:	f7f0 fb88 	bl	80008ac <__aeabi_ddiv>
 801019c:	f7f0 fd0c 	bl	8000bb8 <__aeabi_d2iz>
 80101a0:	4680      	mov	r8, r0
 80101a2:	f7f0 f9ef 	bl	8000584 <__aeabi_i2d>
 80101a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80101aa:	f7f0 fa55 	bl	8000658 <__aeabi_dmul>
 80101ae:	4602      	mov	r2, r0
 80101b0:	460b      	mov	r3, r1
 80101b2:	4620      	mov	r0, r4
 80101b4:	4629      	mov	r1, r5
 80101b6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80101ba:	f7f0 f895 	bl	80002e8 <__aeabi_dsub>
 80101be:	f806 4b01 	strb.w	r4, [r6], #1
 80101c2:	9d03      	ldr	r5, [sp, #12]
 80101c4:	eba6 040a 	sub.w	r4, r6, sl
 80101c8:	42a5      	cmp	r5, r4
 80101ca:	4602      	mov	r2, r0
 80101cc:	460b      	mov	r3, r1
 80101ce:	d133      	bne.n	8010238 <_dtoa_r+0x6e0>
 80101d0:	f7f0 f88c 	bl	80002ec <__adddf3>
 80101d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80101d8:	4604      	mov	r4, r0
 80101da:	460d      	mov	r5, r1
 80101dc:	f7f0 fccc 	bl	8000b78 <__aeabi_dcmpgt>
 80101e0:	b9c0      	cbnz	r0, 8010214 <_dtoa_r+0x6bc>
 80101e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80101e6:	4620      	mov	r0, r4
 80101e8:	4629      	mov	r1, r5
 80101ea:	f7f0 fc9d 	bl	8000b28 <__aeabi_dcmpeq>
 80101ee:	b110      	cbz	r0, 80101f6 <_dtoa_r+0x69e>
 80101f0:	f018 0f01 	tst.w	r8, #1
 80101f4:	d10e      	bne.n	8010214 <_dtoa_r+0x6bc>
 80101f6:	9902      	ldr	r1, [sp, #8]
 80101f8:	4648      	mov	r0, r9
 80101fa:	f000 fe87 	bl	8010f0c <_Bfree>
 80101fe:	2300      	movs	r3, #0
 8010200:	7033      	strb	r3, [r6, #0]
 8010202:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010204:	3701      	adds	r7, #1
 8010206:	601f      	str	r7, [r3, #0]
 8010208:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801020a:	2b00      	cmp	r3, #0
 801020c:	f000 824b 	beq.w	80106a6 <_dtoa_r+0xb4e>
 8010210:	601e      	str	r6, [r3, #0]
 8010212:	e248      	b.n	80106a6 <_dtoa_r+0xb4e>
 8010214:	46b8      	mov	r8, r7
 8010216:	4633      	mov	r3, r6
 8010218:	461e      	mov	r6, r3
 801021a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801021e:	2a39      	cmp	r2, #57	@ 0x39
 8010220:	d106      	bne.n	8010230 <_dtoa_r+0x6d8>
 8010222:	459a      	cmp	sl, r3
 8010224:	d1f8      	bne.n	8010218 <_dtoa_r+0x6c0>
 8010226:	2230      	movs	r2, #48	@ 0x30
 8010228:	f108 0801 	add.w	r8, r8, #1
 801022c:	f88a 2000 	strb.w	r2, [sl]
 8010230:	781a      	ldrb	r2, [r3, #0]
 8010232:	3201      	adds	r2, #1
 8010234:	701a      	strb	r2, [r3, #0]
 8010236:	e7a0      	b.n	801017a <_dtoa_r+0x622>
 8010238:	4b6f      	ldr	r3, [pc, #444]	@ (80103f8 <_dtoa_r+0x8a0>)
 801023a:	2200      	movs	r2, #0
 801023c:	f7f0 fa0c 	bl	8000658 <__aeabi_dmul>
 8010240:	2200      	movs	r2, #0
 8010242:	2300      	movs	r3, #0
 8010244:	4604      	mov	r4, r0
 8010246:	460d      	mov	r5, r1
 8010248:	f7f0 fc6e 	bl	8000b28 <__aeabi_dcmpeq>
 801024c:	2800      	cmp	r0, #0
 801024e:	d09f      	beq.n	8010190 <_dtoa_r+0x638>
 8010250:	e7d1      	b.n	80101f6 <_dtoa_r+0x69e>
 8010252:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010254:	2a00      	cmp	r2, #0
 8010256:	f000 80ea 	beq.w	801042e <_dtoa_r+0x8d6>
 801025a:	9a07      	ldr	r2, [sp, #28]
 801025c:	2a01      	cmp	r2, #1
 801025e:	f300 80cd 	bgt.w	80103fc <_dtoa_r+0x8a4>
 8010262:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8010264:	2a00      	cmp	r2, #0
 8010266:	f000 80c1 	beq.w	80103ec <_dtoa_r+0x894>
 801026a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801026e:	9c08      	ldr	r4, [sp, #32]
 8010270:	9e00      	ldr	r6, [sp, #0]
 8010272:	9a00      	ldr	r2, [sp, #0]
 8010274:	441a      	add	r2, r3
 8010276:	9200      	str	r2, [sp, #0]
 8010278:	9a06      	ldr	r2, [sp, #24]
 801027a:	2101      	movs	r1, #1
 801027c:	441a      	add	r2, r3
 801027e:	4648      	mov	r0, r9
 8010280:	9206      	str	r2, [sp, #24]
 8010282:	f000 ff41 	bl	8011108 <__i2b>
 8010286:	4605      	mov	r5, r0
 8010288:	b166      	cbz	r6, 80102a4 <_dtoa_r+0x74c>
 801028a:	9b06      	ldr	r3, [sp, #24]
 801028c:	2b00      	cmp	r3, #0
 801028e:	dd09      	ble.n	80102a4 <_dtoa_r+0x74c>
 8010290:	42b3      	cmp	r3, r6
 8010292:	9a00      	ldr	r2, [sp, #0]
 8010294:	bfa8      	it	ge
 8010296:	4633      	movge	r3, r6
 8010298:	1ad2      	subs	r2, r2, r3
 801029a:	9200      	str	r2, [sp, #0]
 801029c:	9a06      	ldr	r2, [sp, #24]
 801029e:	1af6      	subs	r6, r6, r3
 80102a0:	1ad3      	subs	r3, r2, r3
 80102a2:	9306      	str	r3, [sp, #24]
 80102a4:	9b08      	ldr	r3, [sp, #32]
 80102a6:	b30b      	cbz	r3, 80102ec <_dtoa_r+0x794>
 80102a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	f000 80c6 	beq.w	801043c <_dtoa_r+0x8e4>
 80102b0:	2c00      	cmp	r4, #0
 80102b2:	f000 80c0 	beq.w	8010436 <_dtoa_r+0x8de>
 80102b6:	4629      	mov	r1, r5
 80102b8:	4622      	mov	r2, r4
 80102ba:	4648      	mov	r0, r9
 80102bc:	f000 ffdc 	bl	8011278 <__pow5mult>
 80102c0:	9a02      	ldr	r2, [sp, #8]
 80102c2:	4601      	mov	r1, r0
 80102c4:	4605      	mov	r5, r0
 80102c6:	4648      	mov	r0, r9
 80102c8:	f000 ff34 	bl	8011134 <__multiply>
 80102cc:	9902      	ldr	r1, [sp, #8]
 80102ce:	4680      	mov	r8, r0
 80102d0:	4648      	mov	r0, r9
 80102d2:	f000 fe1b 	bl	8010f0c <_Bfree>
 80102d6:	9b08      	ldr	r3, [sp, #32]
 80102d8:	1b1b      	subs	r3, r3, r4
 80102da:	9308      	str	r3, [sp, #32]
 80102dc:	f000 80b1 	beq.w	8010442 <_dtoa_r+0x8ea>
 80102e0:	9a08      	ldr	r2, [sp, #32]
 80102e2:	4641      	mov	r1, r8
 80102e4:	4648      	mov	r0, r9
 80102e6:	f000 ffc7 	bl	8011278 <__pow5mult>
 80102ea:	9002      	str	r0, [sp, #8]
 80102ec:	2101      	movs	r1, #1
 80102ee:	4648      	mov	r0, r9
 80102f0:	f000 ff0a 	bl	8011108 <__i2b>
 80102f4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80102f6:	4604      	mov	r4, r0
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	f000 81d8 	beq.w	80106ae <_dtoa_r+0xb56>
 80102fe:	461a      	mov	r2, r3
 8010300:	4601      	mov	r1, r0
 8010302:	4648      	mov	r0, r9
 8010304:	f000 ffb8 	bl	8011278 <__pow5mult>
 8010308:	9b07      	ldr	r3, [sp, #28]
 801030a:	2b01      	cmp	r3, #1
 801030c:	4604      	mov	r4, r0
 801030e:	f300 809f 	bgt.w	8010450 <_dtoa_r+0x8f8>
 8010312:	9b04      	ldr	r3, [sp, #16]
 8010314:	2b00      	cmp	r3, #0
 8010316:	f040 8097 	bne.w	8010448 <_dtoa_r+0x8f0>
 801031a:	9b05      	ldr	r3, [sp, #20]
 801031c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010320:	2b00      	cmp	r3, #0
 8010322:	f040 8093 	bne.w	801044c <_dtoa_r+0x8f4>
 8010326:	9b05      	ldr	r3, [sp, #20]
 8010328:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801032c:	0d1b      	lsrs	r3, r3, #20
 801032e:	051b      	lsls	r3, r3, #20
 8010330:	b133      	cbz	r3, 8010340 <_dtoa_r+0x7e8>
 8010332:	9b00      	ldr	r3, [sp, #0]
 8010334:	3301      	adds	r3, #1
 8010336:	9300      	str	r3, [sp, #0]
 8010338:	9b06      	ldr	r3, [sp, #24]
 801033a:	3301      	adds	r3, #1
 801033c:	9306      	str	r3, [sp, #24]
 801033e:	2301      	movs	r3, #1
 8010340:	9308      	str	r3, [sp, #32]
 8010342:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010344:	2b00      	cmp	r3, #0
 8010346:	f000 81b8 	beq.w	80106ba <_dtoa_r+0xb62>
 801034a:	6923      	ldr	r3, [r4, #16]
 801034c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010350:	6918      	ldr	r0, [r3, #16]
 8010352:	f000 fe8d 	bl	8011070 <__hi0bits>
 8010356:	f1c0 0020 	rsb	r0, r0, #32
 801035a:	9b06      	ldr	r3, [sp, #24]
 801035c:	4418      	add	r0, r3
 801035e:	f010 001f 	ands.w	r0, r0, #31
 8010362:	f000 8082 	beq.w	801046a <_dtoa_r+0x912>
 8010366:	f1c0 0320 	rsb	r3, r0, #32
 801036a:	2b04      	cmp	r3, #4
 801036c:	dd73      	ble.n	8010456 <_dtoa_r+0x8fe>
 801036e:	9b00      	ldr	r3, [sp, #0]
 8010370:	f1c0 001c 	rsb	r0, r0, #28
 8010374:	4403      	add	r3, r0
 8010376:	9300      	str	r3, [sp, #0]
 8010378:	9b06      	ldr	r3, [sp, #24]
 801037a:	4403      	add	r3, r0
 801037c:	4406      	add	r6, r0
 801037e:	9306      	str	r3, [sp, #24]
 8010380:	9b00      	ldr	r3, [sp, #0]
 8010382:	2b00      	cmp	r3, #0
 8010384:	dd05      	ble.n	8010392 <_dtoa_r+0x83a>
 8010386:	9902      	ldr	r1, [sp, #8]
 8010388:	461a      	mov	r2, r3
 801038a:	4648      	mov	r0, r9
 801038c:	f000 ffce 	bl	801132c <__lshift>
 8010390:	9002      	str	r0, [sp, #8]
 8010392:	9b06      	ldr	r3, [sp, #24]
 8010394:	2b00      	cmp	r3, #0
 8010396:	dd05      	ble.n	80103a4 <_dtoa_r+0x84c>
 8010398:	4621      	mov	r1, r4
 801039a:	461a      	mov	r2, r3
 801039c:	4648      	mov	r0, r9
 801039e:	f000 ffc5 	bl	801132c <__lshift>
 80103a2:	4604      	mov	r4, r0
 80103a4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d061      	beq.n	801046e <_dtoa_r+0x916>
 80103aa:	9802      	ldr	r0, [sp, #8]
 80103ac:	4621      	mov	r1, r4
 80103ae:	f001 f829 	bl	8011404 <__mcmp>
 80103b2:	2800      	cmp	r0, #0
 80103b4:	da5b      	bge.n	801046e <_dtoa_r+0x916>
 80103b6:	2300      	movs	r3, #0
 80103b8:	9902      	ldr	r1, [sp, #8]
 80103ba:	220a      	movs	r2, #10
 80103bc:	4648      	mov	r0, r9
 80103be:	f000 fdc7 	bl	8010f50 <__multadd>
 80103c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80103c4:	9002      	str	r0, [sp, #8]
 80103c6:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	f000 8177 	beq.w	80106be <_dtoa_r+0xb66>
 80103d0:	4629      	mov	r1, r5
 80103d2:	2300      	movs	r3, #0
 80103d4:	220a      	movs	r2, #10
 80103d6:	4648      	mov	r0, r9
 80103d8:	f000 fdba 	bl	8010f50 <__multadd>
 80103dc:	f1bb 0f00 	cmp.w	fp, #0
 80103e0:	4605      	mov	r5, r0
 80103e2:	dc6f      	bgt.n	80104c4 <_dtoa_r+0x96c>
 80103e4:	9b07      	ldr	r3, [sp, #28]
 80103e6:	2b02      	cmp	r3, #2
 80103e8:	dc49      	bgt.n	801047e <_dtoa_r+0x926>
 80103ea:	e06b      	b.n	80104c4 <_dtoa_r+0x96c>
 80103ec:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80103ee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80103f2:	e73c      	b.n	801026e <_dtoa_r+0x716>
 80103f4:	3fe00000 	.word	0x3fe00000
 80103f8:	40240000 	.word	0x40240000
 80103fc:	9b03      	ldr	r3, [sp, #12]
 80103fe:	1e5c      	subs	r4, r3, #1
 8010400:	9b08      	ldr	r3, [sp, #32]
 8010402:	42a3      	cmp	r3, r4
 8010404:	db09      	blt.n	801041a <_dtoa_r+0x8c2>
 8010406:	1b1c      	subs	r4, r3, r4
 8010408:	9b03      	ldr	r3, [sp, #12]
 801040a:	2b00      	cmp	r3, #0
 801040c:	f6bf af30 	bge.w	8010270 <_dtoa_r+0x718>
 8010410:	9b00      	ldr	r3, [sp, #0]
 8010412:	9a03      	ldr	r2, [sp, #12]
 8010414:	1a9e      	subs	r6, r3, r2
 8010416:	2300      	movs	r3, #0
 8010418:	e72b      	b.n	8010272 <_dtoa_r+0x71a>
 801041a:	9b08      	ldr	r3, [sp, #32]
 801041c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801041e:	9408      	str	r4, [sp, #32]
 8010420:	1ae3      	subs	r3, r4, r3
 8010422:	441a      	add	r2, r3
 8010424:	9e00      	ldr	r6, [sp, #0]
 8010426:	9b03      	ldr	r3, [sp, #12]
 8010428:	920d      	str	r2, [sp, #52]	@ 0x34
 801042a:	2400      	movs	r4, #0
 801042c:	e721      	b.n	8010272 <_dtoa_r+0x71a>
 801042e:	9c08      	ldr	r4, [sp, #32]
 8010430:	9e00      	ldr	r6, [sp, #0]
 8010432:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8010434:	e728      	b.n	8010288 <_dtoa_r+0x730>
 8010436:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801043a:	e751      	b.n	80102e0 <_dtoa_r+0x788>
 801043c:	9a08      	ldr	r2, [sp, #32]
 801043e:	9902      	ldr	r1, [sp, #8]
 8010440:	e750      	b.n	80102e4 <_dtoa_r+0x78c>
 8010442:	f8cd 8008 	str.w	r8, [sp, #8]
 8010446:	e751      	b.n	80102ec <_dtoa_r+0x794>
 8010448:	2300      	movs	r3, #0
 801044a:	e779      	b.n	8010340 <_dtoa_r+0x7e8>
 801044c:	9b04      	ldr	r3, [sp, #16]
 801044e:	e777      	b.n	8010340 <_dtoa_r+0x7e8>
 8010450:	2300      	movs	r3, #0
 8010452:	9308      	str	r3, [sp, #32]
 8010454:	e779      	b.n	801034a <_dtoa_r+0x7f2>
 8010456:	d093      	beq.n	8010380 <_dtoa_r+0x828>
 8010458:	9a00      	ldr	r2, [sp, #0]
 801045a:	331c      	adds	r3, #28
 801045c:	441a      	add	r2, r3
 801045e:	9200      	str	r2, [sp, #0]
 8010460:	9a06      	ldr	r2, [sp, #24]
 8010462:	441a      	add	r2, r3
 8010464:	441e      	add	r6, r3
 8010466:	9206      	str	r2, [sp, #24]
 8010468:	e78a      	b.n	8010380 <_dtoa_r+0x828>
 801046a:	4603      	mov	r3, r0
 801046c:	e7f4      	b.n	8010458 <_dtoa_r+0x900>
 801046e:	9b03      	ldr	r3, [sp, #12]
 8010470:	2b00      	cmp	r3, #0
 8010472:	46b8      	mov	r8, r7
 8010474:	dc20      	bgt.n	80104b8 <_dtoa_r+0x960>
 8010476:	469b      	mov	fp, r3
 8010478:	9b07      	ldr	r3, [sp, #28]
 801047a:	2b02      	cmp	r3, #2
 801047c:	dd1e      	ble.n	80104bc <_dtoa_r+0x964>
 801047e:	f1bb 0f00 	cmp.w	fp, #0
 8010482:	f47f adb1 	bne.w	800ffe8 <_dtoa_r+0x490>
 8010486:	4621      	mov	r1, r4
 8010488:	465b      	mov	r3, fp
 801048a:	2205      	movs	r2, #5
 801048c:	4648      	mov	r0, r9
 801048e:	f000 fd5f 	bl	8010f50 <__multadd>
 8010492:	4601      	mov	r1, r0
 8010494:	4604      	mov	r4, r0
 8010496:	9802      	ldr	r0, [sp, #8]
 8010498:	f000 ffb4 	bl	8011404 <__mcmp>
 801049c:	2800      	cmp	r0, #0
 801049e:	f77f ada3 	ble.w	800ffe8 <_dtoa_r+0x490>
 80104a2:	4656      	mov	r6, sl
 80104a4:	2331      	movs	r3, #49	@ 0x31
 80104a6:	f806 3b01 	strb.w	r3, [r6], #1
 80104aa:	f108 0801 	add.w	r8, r8, #1
 80104ae:	e59f      	b.n	800fff0 <_dtoa_r+0x498>
 80104b0:	9c03      	ldr	r4, [sp, #12]
 80104b2:	46b8      	mov	r8, r7
 80104b4:	4625      	mov	r5, r4
 80104b6:	e7f4      	b.n	80104a2 <_dtoa_r+0x94a>
 80104b8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80104bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80104be:	2b00      	cmp	r3, #0
 80104c0:	f000 8101 	beq.w	80106c6 <_dtoa_r+0xb6e>
 80104c4:	2e00      	cmp	r6, #0
 80104c6:	dd05      	ble.n	80104d4 <_dtoa_r+0x97c>
 80104c8:	4629      	mov	r1, r5
 80104ca:	4632      	mov	r2, r6
 80104cc:	4648      	mov	r0, r9
 80104ce:	f000 ff2d 	bl	801132c <__lshift>
 80104d2:	4605      	mov	r5, r0
 80104d4:	9b08      	ldr	r3, [sp, #32]
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d05c      	beq.n	8010594 <_dtoa_r+0xa3c>
 80104da:	6869      	ldr	r1, [r5, #4]
 80104dc:	4648      	mov	r0, r9
 80104de:	f000 fcd5 	bl	8010e8c <_Balloc>
 80104e2:	4606      	mov	r6, r0
 80104e4:	b928      	cbnz	r0, 80104f2 <_dtoa_r+0x99a>
 80104e6:	4b82      	ldr	r3, [pc, #520]	@ (80106f0 <_dtoa_r+0xb98>)
 80104e8:	4602      	mov	r2, r0
 80104ea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80104ee:	f7ff bb4a 	b.w	800fb86 <_dtoa_r+0x2e>
 80104f2:	692a      	ldr	r2, [r5, #16]
 80104f4:	3202      	adds	r2, #2
 80104f6:	0092      	lsls	r2, r2, #2
 80104f8:	f105 010c 	add.w	r1, r5, #12
 80104fc:	300c      	adds	r0, #12
 80104fe:	f7ff fa7b 	bl	800f9f8 <memcpy>
 8010502:	2201      	movs	r2, #1
 8010504:	4631      	mov	r1, r6
 8010506:	4648      	mov	r0, r9
 8010508:	f000 ff10 	bl	801132c <__lshift>
 801050c:	f10a 0301 	add.w	r3, sl, #1
 8010510:	9300      	str	r3, [sp, #0]
 8010512:	eb0a 030b 	add.w	r3, sl, fp
 8010516:	9308      	str	r3, [sp, #32]
 8010518:	9b04      	ldr	r3, [sp, #16]
 801051a:	f003 0301 	and.w	r3, r3, #1
 801051e:	462f      	mov	r7, r5
 8010520:	9306      	str	r3, [sp, #24]
 8010522:	4605      	mov	r5, r0
 8010524:	9b00      	ldr	r3, [sp, #0]
 8010526:	9802      	ldr	r0, [sp, #8]
 8010528:	4621      	mov	r1, r4
 801052a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 801052e:	f7ff fa88 	bl	800fa42 <quorem>
 8010532:	4603      	mov	r3, r0
 8010534:	3330      	adds	r3, #48	@ 0x30
 8010536:	9003      	str	r0, [sp, #12]
 8010538:	4639      	mov	r1, r7
 801053a:	9802      	ldr	r0, [sp, #8]
 801053c:	9309      	str	r3, [sp, #36]	@ 0x24
 801053e:	f000 ff61 	bl	8011404 <__mcmp>
 8010542:	462a      	mov	r2, r5
 8010544:	9004      	str	r0, [sp, #16]
 8010546:	4621      	mov	r1, r4
 8010548:	4648      	mov	r0, r9
 801054a:	f000 ff77 	bl	801143c <__mdiff>
 801054e:	68c2      	ldr	r2, [r0, #12]
 8010550:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010552:	4606      	mov	r6, r0
 8010554:	bb02      	cbnz	r2, 8010598 <_dtoa_r+0xa40>
 8010556:	4601      	mov	r1, r0
 8010558:	9802      	ldr	r0, [sp, #8]
 801055a:	f000 ff53 	bl	8011404 <__mcmp>
 801055e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010560:	4602      	mov	r2, r0
 8010562:	4631      	mov	r1, r6
 8010564:	4648      	mov	r0, r9
 8010566:	920c      	str	r2, [sp, #48]	@ 0x30
 8010568:	9309      	str	r3, [sp, #36]	@ 0x24
 801056a:	f000 fccf 	bl	8010f0c <_Bfree>
 801056e:	9b07      	ldr	r3, [sp, #28]
 8010570:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8010572:	9e00      	ldr	r6, [sp, #0]
 8010574:	ea42 0103 	orr.w	r1, r2, r3
 8010578:	9b06      	ldr	r3, [sp, #24]
 801057a:	4319      	orrs	r1, r3
 801057c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801057e:	d10d      	bne.n	801059c <_dtoa_r+0xa44>
 8010580:	2b39      	cmp	r3, #57	@ 0x39
 8010582:	d027      	beq.n	80105d4 <_dtoa_r+0xa7c>
 8010584:	9a04      	ldr	r2, [sp, #16]
 8010586:	2a00      	cmp	r2, #0
 8010588:	dd01      	ble.n	801058e <_dtoa_r+0xa36>
 801058a:	9b03      	ldr	r3, [sp, #12]
 801058c:	3331      	adds	r3, #49	@ 0x31
 801058e:	f88b 3000 	strb.w	r3, [fp]
 8010592:	e52e      	b.n	800fff2 <_dtoa_r+0x49a>
 8010594:	4628      	mov	r0, r5
 8010596:	e7b9      	b.n	801050c <_dtoa_r+0x9b4>
 8010598:	2201      	movs	r2, #1
 801059a:	e7e2      	b.n	8010562 <_dtoa_r+0xa0a>
 801059c:	9904      	ldr	r1, [sp, #16]
 801059e:	2900      	cmp	r1, #0
 80105a0:	db04      	blt.n	80105ac <_dtoa_r+0xa54>
 80105a2:	9807      	ldr	r0, [sp, #28]
 80105a4:	4301      	orrs	r1, r0
 80105a6:	9806      	ldr	r0, [sp, #24]
 80105a8:	4301      	orrs	r1, r0
 80105aa:	d120      	bne.n	80105ee <_dtoa_r+0xa96>
 80105ac:	2a00      	cmp	r2, #0
 80105ae:	ddee      	ble.n	801058e <_dtoa_r+0xa36>
 80105b0:	9902      	ldr	r1, [sp, #8]
 80105b2:	9300      	str	r3, [sp, #0]
 80105b4:	2201      	movs	r2, #1
 80105b6:	4648      	mov	r0, r9
 80105b8:	f000 feb8 	bl	801132c <__lshift>
 80105bc:	4621      	mov	r1, r4
 80105be:	9002      	str	r0, [sp, #8]
 80105c0:	f000 ff20 	bl	8011404 <__mcmp>
 80105c4:	2800      	cmp	r0, #0
 80105c6:	9b00      	ldr	r3, [sp, #0]
 80105c8:	dc02      	bgt.n	80105d0 <_dtoa_r+0xa78>
 80105ca:	d1e0      	bne.n	801058e <_dtoa_r+0xa36>
 80105cc:	07da      	lsls	r2, r3, #31
 80105ce:	d5de      	bpl.n	801058e <_dtoa_r+0xa36>
 80105d0:	2b39      	cmp	r3, #57	@ 0x39
 80105d2:	d1da      	bne.n	801058a <_dtoa_r+0xa32>
 80105d4:	2339      	movs	r3, #57	@ 0x39
 80105d6:	f88b 3000 	strb.w	r3, [fp]
 80105da:	4633      	mov	r3, r6
 80105dc:	461e      	mov	r6, r3
 80105de:	3b01      	subs	r3, #1
 80105e0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80105e4:	2a39      	cmp	r2, #57	@ 0x39
 80105e6:	d04e      	beq.n	8010686 <_dtoa_r+0xb2e>
 80105e8:	3201      	adds	r2, #1
 80105ea:	701a      	strb	r2, [r3, #0]
 80105ec:	e501      	b.n	800fff2 <_dtoa_r+0x49a>
 80105ee:	2a00      	cmp	r2, #0
 80105f0:	dd03      	ble.n	80105fa <_dtoa_r+0xaa2>
 80105f2:	2b39      	cmp	r3, #57	@ 0x39
 80105f4:	d0ee      	beq.n	80105d4 <_dtoa_r+0xa7c>
 80105f6:	3301      	adds	r3, #1
 80105f8:	e7c9      	b.n	801058e <_dtoa_r+0xa36>
 80105fa:	9a00      	ldr	r2, [sp, #0]
 80105fc:	9908      	ldr	r1, [sp, #32]
 80105fe:	f802 3c01 	strb.w	r3, [r2, #-1]
 8010602:	428a      	cmp	r2, r1
 8010604:	d028      	beq.n	8010658 <_dtoa_r+0xb00>
 8010606:	9902      	ldr	r1, [sp, #8]
 8010608:	2300      	movs	r3, #0
 801060a:	220a      	movs	r2, #10
 801060c:	4648      	mov	r0, r9
 801060e:	f000 fc9f 	bl	8010f50 <__multadd>
 8010612:	42af      	cmp	r7, r5
 8010614:	9002      	str	r0, [sp, #8]
 8010616:	f04f 0300 	mov.w	r3, #0
 801061a:	f04f 020a 	mov.w	r2, #10
 801061e:	4639      	mov	r1, r7
 8010620:	4648      	mov	r0, r9
 8010622:	d107      	bne.n	8010634 <_dtoa_r+0xadc>
 8010624:	f000 fc94 	bl	8010f50 <__multadd>
 8010628:	4607      	mov	r7, r0
 801062a:	4605      	mov	r5, r0
 801062c:	9b00      	ldr	r3, [sp, #0]
 801062e:	3301      	adds	r3, #1
 8010630:	9300      	str	r3, [sp, #0]
 8010632:	e777      	b.n	8010524 <_dtoa_r+0x9cc>
 8010634:	f000 fc8c 	bl	8010f50 <__multadd>
 8010638:	4629      	mov	r1, r5
 801063a:	4607      	mov	r7, r0
 801063c:	2300      	movs	r3, #0
 801063e:	220a      	movs	r2, #10
 8010640:	4648      	mov	r0, r9
 8010642:	f000 fc85 	bl	8010f50 <__multadd>
 8010646:	4605      	mov	r5, r0
 8010648:	e7f0      	b.n	801062c <_dtoa_r+0xad4>
 801064a:	f1bb 0f00 	cmp.w	fp, #0
 801064e:	bfcc      	ite	gt
 8010650:	465e      	movgt	r6, fp
 8010652:	2601      	movle	r6, #1
 8010654:	4456      	add	r6, sl
 8010656:	2700      	movs	r7, #0
 8010658:	9902      	ldr	r1, [sp, #8]
 801065a:	9300      	str	r3, [sp, #0]
 801065c:	2201      	movs	r2, #1
 801065e:	4648      	mov	r0, r9
 8010660:	f000 fe64 	bl	801132c <__lshift>
 8010664:	4621      	mov	r1, r4
 8010666:	9002      	str	r0, [sp, #8]
 8010668:	f000 fecc 	bl	8011404 <__mcmp>
 801066c:	2800      	cmp	r0, #0
 801066e:	dcb4      	bgt.n	80105da <_dtoa_r+0xa82>
 8010670:	d102      	bne.n	8010678 <_dtoa_r+0xb20>
 8010672:	9b00      	ldr	r3, [sp, #0]
 8010674:	07db      	lsls	r3, r3, #31
 8010676:	d4b0      	bmi.n	80105da <_dtoa_r+0xa82>
 8010678:	4633      	mov	r3, r6
 801067a:	461e      	mov	r6, r3
 801067c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010680:	2a30      	cmp	r2, #48	@ 0x30
 8010682:	d0fa      	beq.n	801067a <_dtoa_r+0xb22>
 8010684:	e4b5      	b.n	800fff2 <_dtoa_r+0x49a>
 8010686:	459a      	cmp	sl, r3
 8010688:	d1a8      	bne.n	80105dc <_dtoa_r+0xa84>
 801068a:	2331      	movs	r3, #49	@ 0x31
 801068c:	f108 0801 	add.w	r8, r8, #1
 8010690:	f88a 3000 	strb.w	r3, [sl]
 8010694:	e4ad      	b.n	800fff2 <_dtoa_r+0x49a>
 8010696:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010698:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80106f4 <_dtoa_r+0xb9c>
 801069c:	b11b      	cbz	r3, 80106a6 <_dtoa_r+0xb4e>
 801069e:	f10a 0308 	add.w	r3, sl, #8
 80106a2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80106a4:	6013      	str	r3, [r2, #0]
 80106a6:	4650      	mov	r0, sl
 80106a8:	b017      	add	sp, #92	@ 0x5c
 80106aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106ae:	9b07      	ldr	r3, [sp, #28]
 80106b0:	2b01      	cmp	r3, #1
 80106b2:	f77f ae2e 	ble.w	8010312 <_dtoa_r+0x7ba>
 80106b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80106b8:	9308      	str	r3, [sp, #32]
 80106ba:	2001      	movs	r0, #1
 80106bc:	e64d      	b.n	801035a <_dtoa_r+0x802>
 80106be:	f1bb 0f00 	cmp.w	fp, #0
 80106c2:	f77f aed9 	ble.w	8010478 <_dtoa_r+0x920>
 80106c6:	4656      	mov	r6, sl
 80106c8:	9802      	ldr	r0, [sp, #8]
 80106ca:	4621      	mov	r1, r4
 80106cc:	f7ff f9b9 	bl	800fa42 <quorem>
 80106d0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80106d4:	f806 3b01 	strb.w	r3, [r6], #1
 80106d8:	eba6 020a 	sub.w	r2, r6, sl
 80106dc:	4593      	cmp	fp, r2
 80106de:	ddb4      	ble.n	801064a <_dtoa_r+0xaf2>
 80106e0:	9902      	ldr	r1, [sp, #8]
 80106e2:	2300      	movs	r3, #0
 80106e4:	220a      	movs	r2, #10
 80106e6:	4648      	mov	r0, r9
 80106e8:	f000 fc32 	bl	8010f50 <__multadd>
 80106ec:	9002      	str	r0, [sp, #8]
 80106ee:	e7eb      	b.n	80106c8 <_dtoa_r+0xb70>
 80106f0:	08013c95 	.word	0x08013c95
 80106f4:	08013c30 	.word	0x08013c30

080106f8 <_free_r>:
 80106f8:	b538      	push	{r3, r4, r5, lr}
 80106fa:	4605      	mov	r5, r0
 80106fc:	2900      	cmp	r1, #0
 80106fe:	d041      	beq.n	8010784 <_free_r+0x8c>
 8010700:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010704:	1f0c      	subs	r4, r1, #4
 8010706:	2b00      	cmp	r3, #0
 8010708:	bfb8      	it	lt
 801070a:	18e4      	addlt	r4, r4, r3
 801070c:	f7f3 fd2e 	bl	800416c <__malloc_lock>
 8010710:	4a1d      	ldr	r2, [pc, #116]	@ (8010788 <_free_r+0x90>)
 8010712:	6813      	ldr	r3, [r2, #0]
 8010714:	b933      	cbnz	r3, 8010724 <_free_r+0x2c>
 8010716:	6063      	str	r3, [r4, #4]
 8010718:	6014      	str	r4, [r2, #0]
 801071a:	4628      	mov	r0, r5
 801071c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010720:	f7f3 bd5e 	b.w	80041e0 <__malloc_unlock>
 8010724:	42a3      	cmp	r3, r4
 8010726:	d908      	bls.n	801073a <_free_r+0x42>
 8010728:	6820      	ldr	r0, [r4, #0]
 801072a:	1821      	adds	r1, r4, r0
 801072c:	428b      	cmp	r3, r1
 801072e:	bf01      	itttt	eq
 8010730:	6819      	ldreq	r1, [r3, #0]
 8010732:	685b      	ldreq	r3, [r3, #4]
 8010734:	1809      	addeq	r1, r1, r0
 8010736:	6021      	streq	r1, [r4, #0]
 8010738:	e7ed      	b.n	8010716 <_free_r+0x1e>
 801073a:	461a      	mov	r2, r3
 801073c:	685b      	ldr	r3, [r3, #4]
 801073e:	b10b      	cbz	r3, 8010744 <_free_r+0x4c>
 8010740:	42a3      	cmp	r3, r4
 8010742:	d9fa      	bls.n	801073a <_free_r+0x42>
 8010744:	6811      	ldr	r1, [r2, #0]
 8010746:	1850      	adds	r0, r2, r1
 8010748:	42a0      	cmp	r0, r4
 801074a:	d10b      	bne.n	8010764 <_free_r+0x6c>
 801074c:	6820      	ldr	r0, [r4, #0]
 801074e:	4401      	add	r1, r0
 8010750:	1850      	adds	r0, r2, r1
 8010752:	4283      	cmp	r3, r0
 8010754:	6011      	str	r1, [r2, #0]
 8010756:	d1e0      	bne.n	801071a <_free_r+0x22>
 8010758:	6818      	ldr	r0, [r3, #0]
 801075a:	685b      	ldr	r3, [r3, #4]
 801075c:	6053      	str	r3, [r2, #4]
 801075e:	4408      	add	r0, r1
 8010760:	6010      	str	r0, [r2, #0]
 8010762:	e7da      	b.n	801071a <_free_r+0x22>
 8010764:	d902      	bls.n	801076c <_free_r+0x74>
 8010766:	230c      	movs	r3, #12
 8010768:	602b      	str	r3, [r5, #0]
 801076a:	e7d6      	b.n	801071a <_free_r+0x22>
 801076c:	6820      	ldr	r0, [r4, #0]
 801076e:	1821      	adds	r1, r4, r0
 8010770:	428b      	cmp	r3, r1
 8010772:	bf04      	itt	eq
 8010774:	6819      	ldreq	r1, [r3, #0]
 8010776:	685b      	ldreq	r3, [r3, #4]
 8010778:	6063      	str	r3, [r4, #4]
 801077a:	bf04      	itt	eq
 801077c:	1809      	addeq	r1, r1, r0
 801077e:	6021      	streq	r1, [r4, #0]
 8010780:	6054      	str	r4, [r2, #4]
 8010782:	e7ca      	b.n	801071a <_free_r+0x22>
 8010784:	bd38      	pop	{r3, r4, r5, pc}
 8010786:	bf00      	nop
 8010788:	20000500 	.word	0x20000500

0801078c <rshift>:
 801078c:	6903      	ldr	r3, [r0, #16]
 801078e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010792:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010796:	ea4f 1261 	mov.w	r2, r1, asr #5
 801079a:	f100 0414 	add.w	r4, r0, #20
 801079e:	dd45      	ble.n	801082c <rshift+0xa0>
 80107a0:	f011 011f 	ands.w	r1, r1, #31
 80107a4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80107a8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80107ac:	d10c      	bne.n	80107c8 <rshift+0x3c>
 80107ae:	f100 0710 	add.w	r7, r0, #16
 80107b2:	4629      	mov	r1, r5
 80107b4:	42b1      	cmp	r1, r6
 80107b6:	d334      	bcc.n	8010822 <rshift+0x96>
 80107b8:	1a9b      	subs	r3, r3, r2
 80107ba:	009b      	lsls	r3, r3, #2
 80107bc:	1eea      	subs	r2, r5, #3
 80107be:	4296      	cmp	r6, r2
 80107c0:	bf38      	it	cc
 80107c2:	2300      	movcc	r3, #0
 80107c4:	4423      	add	r3, r4
 80107c6:	e015      	b.n	80107f4 <rshift+0x68>
 80107c8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80107cc:	f1c1 0820 	rsb	r8, r1, #32
 80107d0:	40cf      	lsrs	r7, r1
 80107d2:	f105 0e04 	add.w	lr, r5, #4
 80107d6:	46a1      	mov	r9, r4
 80107d8:	4576      	cmp	r6, lr
 80107da:	46f4      	mov	ip, lr
 80107dc:	d815      	bhi.n	801080a <rshift+0x7e>
 80107de:	1a9a      	subs	r2, r3, r2
 80107e0:	0092      	lsls	r2, r2, #2
 80107e2:	3a04      	subs	r2, #4
 80107e4:	3501      	adds	r5, #1
 80107e6:	42ae      	cmp	r6, r5
 80107e8:	bf38      	it	cc
 80107ea:	2200      	movcc	r2, #0
 80107ec:	18a3      	adds	r3, r4, r2
 80107ee:	50a7      	str	r7, [r4, r2]
 80107f0:	b107      	cbz	r7, 80107f4 <rshift+0x68>
 80107f2:	3304      	adds	r3, #4
 80107f4:	1b1a      	subs	r2, r3, r4
 80107f6:	42a3      	cmp	r3, r4
 80107f8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80107fc:	bf08      	it	eq
 80107fe:	2300      	moveq	r3, #0
 8010800:	6102      	str	r2, [r0, #16]
 8010802:	bf08      	it	eq
 8010804:	6143      	streq	r3, [r0, #20]
 8010806:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801080a:	f8dc c000 	ldr.w	ip, [ip]
 801080e:	fa0c fc08 	lsl.w	ip, ip, r8
 8010812:	ea4c 0707 	orr.w	r7, ip, r7
 8010816:	f849 7b04 	str.w	r7, [r9], #4
 801081a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801081e:	40cf      	lsrs	r7, r1
 8010820:	e7da      	b.n	80107d8 <rshift+0x4c>
 8010822:	f851 cb04 	ldr.w	ip, [r1], #4
 8010826:	f847 cf04 	str.w	ip, [r7, #4]!
 801082a:	e7c3      	b.n	80107b4 <rshift+0x28>
 801082c:	4623      	mov	r3, r4
 801082e:	e7e1      	b.n	80107f4 <rshift+0x68>

08010830 <__hexdig_fun>:
 8010830:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8010834:	2b09      	cmp	r3, #9
 8010836:	d802      	bhi.n	801083e <__hexdig_fun+0xe>
 8010838:	3820      	subs	r0, #32
 801083a:	b2c0      	uxtb	r0, r0
 801083c:	4770      	bx	lr
 801083e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8010842:	2b05      	cmp	r3, #5
 8010844:	d801      	bhi.n	801084a <__hexdig_fun+0x1a>
 8010846:	3847      	subs	r0, #71	@ 0x47
 8010848:	e7f7      	b.n	801083a <__hexdig_fun+0xa>
 801084a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801084e:	2b05      	cmp	r3, #5
 8010850:	d801      	bhi.n	8010856 <__hexdig_fun+0x26>
 8010852:	3827      	subs	r0, #39	@ 0x27
 8010854:	e7f1      	b.n	801083a <__hexdig_fun+0xa>
 8010856:	2000      	movs	r0, #0
 8010858:	4770      	bx	lr
	...

0801085c <__gethex>:
 801085c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010860:	b085      	sub	sp, #20
 8010862:	468a      	mov	sl, r1
 8010864:	9302      	str	r3, [sp, #8]
 8010866:	680b      	ldr	r3, [r1, #0]
 8010868:	9001      	str	r0, [sp, #4]
 801086a:	4690      	mov	r8, r2
 801086c:	1c9c      	adds	r4, r3, #2
 801086e:	46a1      	mov	r9, r4
 8010870:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010874:	2830      	cmp	r0, #48	@ 0x30
 8010876:	d0fa      	beq.n	801086e <__gethex+0x12>
 8010878:	eba9 0303 	sub.w	r3, r9, r3
 801087c:	f1a3 0b02 	sub.w	fp, r3, #2
 8010880:	f7ff ffd6 	bl	8010830 <__hexdig_fun>
 8010884:	4605      	mov	r5, r0
 8010886:	2800      	cmp	r0, #0
 8010888:	d168      	bne.n	801095c <__gethex+0x100>
 801088a:	49a0      	ldr	r1, [pc, #640]	@ (8010b0c <__gethex+0x2b0>)
 801088c:	2201      	movs	r2, #1
 801088e:	4648      	mov	r0, r9
 8010890:	f7fe ff61 	bl	800f756 <strncmp>
 8010894:	4607      	mov	r7, r0
 8010896:	2800      	cmp	r0, #0
 8010898:	d167      	bne.n	801096a <__gethex+0x10e>
 801089a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801089e:	4626      	mov	r6, r4
 80108a0:	f7ff ffc6 	bl	8010830 <__hexdig_fun>
 80108a4:	2800      	cmp	r0, #0
 80108a6:	d062      	beq.n	801096e <__gethex+0x112>
 80108a8:	4623      	mov	r3, r4
 80108aa:	7818      	ldrb	r0, [r3, #0]
 80108ac:	2830      	cmp	r0, #48	@ 0x30
 80108ae:	4699      	mov	r9, r3
 80108b0:	f103 0301 	add.w	r3, r3, #1
 80108b4:	d0f9      	beq.n	80108aa <__gethex+0x4e>
 80108b6:	f7ff ffbb 	bl	8010830 <__hexdig_fun>
 80108ba:	fab0 f580 	clz	r5, r0
 80108be:	096d      	lsrs	r5, r5, #5
 80108c0:	f04f 0b01 	mov.w	fp, #1
 80108c4:	464a      	mov	r2, r9
 80108c6:	4616      	mov	r6, r2
 80108c8:	3201      	adds	r2, #1
 80108ca:	7830      	ldrb	r0, [r6, #0]
 80108cc:	f7ff ffb0 	bl	8010830 <__hexdig_fun>
 80108d0:	2800      	cmp	r0, #0
 80108d2:	d1f8      	bne.n	80108c6 <__gethex+0x6a>
 80108d4:	498d      	ldr	r1, [pc, #564]	@ (8010b0c <__gethex+0x2b0>)
 80108d6:	2201      	movs	r2, #1
 80108d8:	4630      	mov	r0, r6
 80108da:	f7fe ff3c 	bl	800f756 <strncmp>
 80108de:	2800      	cmp	r0, #0
 80108e0:	d13f      	bne.n	8010962 <__gethex+0x106>
 80108e2:	b944      	cbnz	r4, 80108f6 <__gethex+0x9a>
 80108e4:	1c74      	adds	r4, r6, #1
 80108e6:	4622      	mov	r2, r4
 80108e8:	4616      	mov	r6, r2
 80108ea:	3201      	adds	r2, #1
 80108ec:	7830      	ldrb	r0, [r6, #0]
 80108ee:	f7ff ff9f 	bl	8010830 <__hexdig_fun>
 80108f2:	2800      	cmp	r0, #0
 80108f4:	d1f8      	bne.n	80108e8 <__gethex+0x8c>
 80108f6:	1ba4      	subs	r4, r4, r6
 80108f8:	00a7      	lsls	r7, r4, #2
 80108fa:	7833      	ldrb	r3, [r6, #0]
 80108fc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8010900:	2b50      	cmp	r3, #80	@ 0x50
 8010902:	d13e      	bne.n	8010982 <__gethex+0x126>
 8010904:	7873      	ldrb	r3, [r6, #1]
 8010906:	2b2b      	cmp	r3, #43	@ 0x2b
 8010908:	d033      	beq.n	8010972 <__gethex+0x116>
 801090a:	2b2d      	cmp	r3, #45	@ 0x2d
 801090c:	d034      	beq.n	8010978 <__gethex+0x11c>
 801090e:	1c71      	adds	r1, r6, #1
 8010910:	2400      	movs	r4, #0
 8010912:	7808      	ldrb	r0, [r1, #0]
 8010914:	f7ff ff8c 	bl	8010830 <__hexdig_fun>
 8010918:	1e43      	subs	r3, r0, #1
 801091a:	b2db      	uxtb	r3, r3
 801091c:	2b18      	cmp	r3, #24
 801091e:	d830      	bhi.n	8010982 <__gethex+0x126>
 8010920:	f1a0 0210 	sub.w	r2, r0, #16
 8010924:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010928:	f7ff ff82 	bl	8010830 <__hexdig_fun>
 801092c:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8010930:	fa5f fc8c 	uxtb.w	ip, ip
 8010934:	f1bc 0f18 	cmp.w	ip, #24
 8010938:	f04f 030a 	mov.w	r3, #10
 801093c:	d91e      	bls.n	801097c <__gethex+0x120>
 801093e:	b104      	cbz	r4, 8010942 <__gethex+0xe6>
 8010940:	4252      	negs	r2, r2
 8010942:	4417      	add	r7, r2
 8010944:	f8ca 1000 	str.w	r1, [sl]
 8010948:	b1ed      	cbz	r5, 8010986 <__gethex+0x12a>
 801094a:	f1bb 0f00 	cmp.w	fp, #0
 801094e:	bf0c      	ite	eq
 8010950:	2506      	moveq	r5, #6
 8010952:	2500      	movne	r5, #0
 8010954:	4628      	mov	r0, r5
 8010956:	b005      	add	sp, #20
 8010958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801095c:	2500      	movs	r5, #0
 801095e:	462c      	mov	r4, r5
 8010960:	e7b0      	b.n	80108c4 <__gethex+0x68>
 8010962:	2c00      	cmp	r4, #0
 8010964:	d1c7      	bne.n	80108f6 <__gethex+0x9a>
 8010966:	4627      	mov	r7, r4
 8010968:	e7c7      	b.n	80108fa <__gethex+0x9e>
 801096a:	464e      	mov	r6, r9
 801096c:	462f      	mov	r7, r5
 801096e:	2501      	movs	r5, #1
 8010970:	e7c3      	b.n	80108fa <__gethex+0x9e>
 8010972:	2400      	movs	r4, #0
 8010974:	1cb1      	adds	r1, r6, #2
 8010976:	e7cc      	b.n	8010912 <__gethex+0xb6>
 8010978:	2401      	movs	r4, #1
 801097a:	e7fb      	b.n	8010974 <__gethex+0x118>
 801097c:	fb03 0002 	mla	r0, r3, r2, r0
 8010980:	e7ce      	b.n	8010920 <__gethex+0xc4>
 8010982:	4631      	mov	r1, r6
 8010984:	e7de      	b.n	8010944 <__gethex+0xe8>
 8010986:	eba6 0309 	sub.w	r3, r6, r9
 801098a:	3b01      	subs	r3, #1
 801098c:	4629      	mov	r1, r5
 801098e:	2b07      	cmp	r3, #7
 8010990:	dc0a      	bgt.n	80109a8 <__gethex+0x14c>
 8010992:	9801      	ldr	r0, [sp, #4]
 8010994:	f000 fa7a 	bl	8010e8c <_Balloc>
 8010998:	4604      	mov	r4, r0
 801099a:	b940      	cbnz	r0, 80109ae <__gethex+0x152>
 801099c:	4b5c      	ldr	r3, [pc, #368]	@ (8010b10 <__gethex+0x2b4>)
 801099e:	4602      	mov	r2, r0
 80109a0:	21e4      	movs	r1, #228	@ 0xe4
 80109a2:	485c      	ldr	r0, [pc, #368]	@ (8010b14 <__gethex+0x2b8>)
 80109a4:	f7fc fbc4 	bl	800d130 <__assert_func>
 80109a8:	3101      	adds	r1, #1
 80109aa:	105b      	asrs	r3, r3, #1
 80109ac:	e7ef      	b.n	801098e <__gethex+0x132>
 80109ae:	f100 0a14 	add.w	sl, r0, #20
 80109b2:	2300      	movs	r3, #0
 80109b4:	4655      	mov	r5, sl
 80109b6:	469b      	mov	fp, r3
 80109b8:	45b1      	cmp	r9, r6
 80109ba:	d337      	bcc.n	8010a2c <__gethex+0x1d0>
 80109bc:	f845 bb04 	str.w	fp, [r5], #4
 80109c0:	eba5 050a 	sub.w	r5, r5, sl
 80109c4:	10ad      	asrs	r5, r5, #2
 80109c6:	6125      	str	r5, [r4, #16]
 80109c8:	4658      	mov	r0, fp
 80109ca:	f000 fb51 	bl	8011070 <__hi0bits>
 80109ce:	016d      	lsls	r5, r5, #5
 80109d0:	f8d8 6000 	ldr.w	r6, [r8]
 80109d4:	1a2d      	subs	r5, r5, r0
 80109d6:	42b5      	cmp	r5, r6
 80109d8:	dd54      	ble.n	8010a84 <__gethex+0x228>
 80109da:	1bad      	subs	r5, r5, r6
 80109dc:	4629      	mov	r1, r5
 80109de:	4620      	mov	r0, r4
 80109e0:	f000 fedd 	bl	801179e <__any_on>
 80109e4:	4681      	mov	r9, r0
 80109e6:	b178      	cbz	r0, 8010a08 <__gethex+0x1ac>
 80109e8:	1e6b      	subs	r3, r5, #1
 80109ea:	1159      	asrs	r1, r3, #5
 80109ec:	f003 021f 	and.w	r2, r3, #31
 80109f0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80109f4:	f04f 0901 	mov.w	r9, #1
 80109f8:	fa09 f202 	lsl.w	r2, r9, r2
 80109fc:	420a      	tst	r2, r1
 80109fe:	d003      	beq.n	8010a08 <__gethex+0x1ac>
 8010a00:	454b      	cmp	r3, r9
 8010a02:	dc36      	bgt.n	8010a72 <__gethex+0x216>
 8010a04:	f04f 0902 	mov.w	r9, #2
 8010a08:	4629      	mov	r1, r5
 8010a0a:	4620      	mov	r0, r4
 8010a0c:	f7ff febe 	bl	801078c <rshift>
 8010a10:	442f      	add	r7, r5
 8010a12:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010a16:	42bb      	cmp	r3, r7
 8010a18:	da42      	bge.n	8010aa0 <__gethex+0x244>
 8010a1a:	9801      	ldr	r0, [sp, #4]
 8010a1c:	4621      	mov	r1, r4
 8010a1e:	f000 fa75 	bl	8010f0c <_Bfree>
 8010a22:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010a24:	2300      	movs	r3, #0
 8010a26:	6013      	str	r3, [r2, #0]
 8010a28:	25a3      	movs	r5, #163	@ 0xa3
 8010a2a:	e793      	b.n	8010954 <__gethex+0xf8>
 8010a2c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8010a30:	2a2e      	cmp	r2, #46	@ 0x2e
 8010a32:	d012      	beq.n	8010a5a <__gethex+0x1fe>
 8010a34:	2b20      	cmp	r3, #32
 8010a36:	d104      	bne.n	8010a42 <__gethex+0x1e6>
 8010a38:	f845 bb04 	str.w	fp, [r5], #4
 8010a3c:	f04f 0b00 	mov.w	fp, #0
 8010a40:	465b      	mov	r3, fp
 8010a42:	7830      	ldrb	r0, [r6, #0]
 8010a44:	9303      	str	r3, [sp, #12]
 8010a46:	f7ff fef3 	bl	8010830 <__hexdig_fun>
 8010a4a:	9b03      	ldr	r3, [sp, #12]
 8010a4c:	f000 000f 	and.w	r0, r0, #15
 8010a50:	4098      	lsls	r0, r3
 8010a52:	ea4b 0b00 	orr.w	fp, fp, r0
 8010a56:	3304      	adds	r3, #4
 8010a58:	e7ae      	b.n	80109b8 <__gethex+0x15c>
 8010a5a:	45b1      	cmp	r9, r6
 8010a5c:	d8ea      	bhi.n	8010a34 <__gethex+0x1d8>
 8010a5e:	492b      	ldr	r1, [pc, #172]	@ (8010b0c <__gethex+0x2b0>)
 8010a60:	9303      	str	r3, [sp, #12]
 8010a62:	2201      	movs	r2, #1
 8010a64:	4630      	mov	r0, r6
 8010a66:	f7fe fe76 	bl	800f756 <strncmp>
 8010a6a:	9b03      	ldr	r3, [sp, #12]
 8010a6c:	2800      	cmp	r0, #0
 8010a6e:	d1e1      	bne.n	8010a34 <__gethex+0x1d8>
 8010a70:	e7a2      	b.n	80109b8 <__gethex+0x15c>
 8010a72:	1ea9      	subs	r1, r5, #2
 8010a74:	4620      	mov	r0, r4
 8010a76:	f000 fe92 	bl	801179e <__any_on>
 8010a7a:	2800      	cmp	r0, #0
 8010a7c:	d0c2      	beq.n	8010a04 <__gethex+0x1a8>
 8010a7e:	f04f 0903 	mov.w	r9, #3
 8010a82:	e7c1      	b.n	8010a08 <__gethex+0x1ac>
 8010a84:	da09      	bge.n	8010a9a <__gethex+0x23e>
 8010a86:	1b75      	subs	r5, r6, r5
 8010a88:	4621      	mov	r1, r4
 8010a8a:	9801      	ldr	r0, [sp, #4]
 8010a8c:	462a      	mov	r2, r5
 8010a8e:	f000 fc4d 	bl	801132c <__lshift>
 8010a92:	1b7f      	subs	r7, r7, r5
 8010a94:	4604      	mov	r4, r0
 8010a96:	f100 0a14 	add.w	sl, r0, #20
 8010a9a:	f04f 0900 	mov.w	r9, #0
 8010a9e:	e7b8      	b.n	8010a12 <__gethex+0x1b6>
 8010aa0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010aa4:	42bd      	cmp	r5, r7
 8010aa6:	dd6f      	ble.n	8010b88 <__gethex+0x32c>
 8010aa8:	1bed      	subs	r5, r5, r7
 8010aaa:	42ae      	cmp	r6, r5
 8010aac:	dc34      	bgt.n	8010b18 <__gethex+0x2bc>
 8010aae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010ab2:	2b02      	cmp	r3, #2
 8010ab4:	d022      	beq.n	8010afc <__gethex+0x2a0>
 8010ab6:	2b03      	cmp	r3, #3
 8010ab8:	d024      	beq.n	8010b04 <__gethex+0x2a8>
 8010aba:	2b01      	cmp	r3, #1
 8010abc:	d115      	bne.n	8010aea <__gethex+0x28e>
 8010abe:	42ae      	cmp	r6, r5
 8010ac0:	d113      	bne.n	8010aea <__gethex+0x28e>
 8010ac2:	2e01      	cmp	r6, #1
 8010ac4:	d10b      	bne.n	8010ade <__gethex+0x282>
 8010ac6:	9a02      	ldr	r2, [sp, #8]
 8010ac8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010acc:	6013      	str	r3, [r2, #0]
 8010ace:	2301      	movs	r3, #1
 8010ad0:	6123      	str	r3, [r4, #16]
 8010ad2:	f8ca 3000 	str.w	r3, [sl]
 8010ad6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010ad8:	2562      	movs	r5, #98	@ 0x62
 8010ada:	601c      	str	r4, [r3, #0]
 8010adc:	e73a      	b.n	8010954 <__gethex+0xf8>
 8010ade:	1e71      	subs	r1, r6, #1
 8010ae0:	4620      	mov	r0, r4
 8010ae2:	f000 fe5c 	bl	801179e <__any_on>
 8010ae6:	2800      	cmp	r0, #0
 8010ae8:	d1ed      	bne.n	8010ac6 <__gethex+0x26a>
 8010aea:	9801      	ldr	r0, [sp, #4]
 8010aec:	4621      	mov	r1, r4
 8010aee:	f000 fa0d 	bl	8010f0c <_Bfree>
 8010af2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010af4:	2300      	movs	r3, #0
 8010af6:	6013      	str	r3, [r2, #0]
 8010af8:	2550      	movs	r5, #80	@ 0x50
 8010afa:	e72b      	b.n	8010954 <__gethex+0xf8>
 8010afc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d1f3      	bne.n	8010aea <__gethex+0x28e>
 8010b02:	e7e0      	b.n	8010ac6 <__gethex+0x26a>
 8010b04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d1dd      	bne.n	8010ac6 <__gethex+0x26a>
 8010b0a:	e7ee      	b.n	8010aea <__gethex+0x28e>
 8010b0c:	08013b7c 	.word	0x08013b7c
 8010b10:	08013c95 	.word	0x08013c95
 8010b14:	08013ca6 	.word	0x08013ca6
 8010b18:	1e6f      	subs	r7, r5, #1
 8010b1a:	f1b9 0f00 	cmp.w	r9, #0
 8010b1e:	d130      	bne.n	8010b82 <__gethex+0x326>
 8010b20:	b127      	cbz	r7, 8010b2c <__gethex+0x2d0>
 8010b22:	4639      	mov	r1, r7
 8010b24:	4620      	mov	r0, r4
 8010b26:	f000 fe3a 	bl	801179e <__any_on>
 8010b2a:	4681      	mov	r9, r0
 8010b2c:	117a      	asrs	r2, r7, #5
 8010b2e:	2301      	movs	r3, #1
 8010b30:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8010b34:	f007 071f 	and.w	r7, r7, #31
 8010b38:	40bb      	lsls	r3, r7
 8010b3a:	4213      	tst	r3, r2
 8010b3c:	4629      	mov	r1, r5
 8010b3e:	4620      	mov	r0, r4
 8010b40:	bf18      	it	ne
 8010b42:	f049 0902 	orrne.w	r9, r9, #2
 8010b46:	f7ff fe21 	bl	801078c <rshift>
 8010b4a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8010b4e:	1b76      	subs	r6, r6, r5
 8010b50:	2502      	movs	r5, #2
 8010b52:	f1b9 0f00 	cmp.w	r9, #0
 8010b56:	d047      	beq.n	8010be8 <__gethex+0x38c>
 8010b58:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010b5c:	2b02      	cmp	r3, #2
 8010b5e:	d015      	beq.n	8010b8c <__gethex+0x330>
 8010b60:	2b03      	cmp	r3, #3
 8010b62:	d017      	beq.n	8010b94 <__gethex+0x338>
 8010b64:	2b01      	cmp	r3, #1
 8010b66:	d109      	bne.n	8010b7c <__gethex+0x320>
 8010b68:	f019 0f02 	tst.w	r9, #2
 8010b6c:	d006      	beq.n	8010b7c <__gethex+0x320>
 8010b6e:	f8da 3000 	ldr.w	r3, [sl]
 8010b72:	ea49 0903 	orr.w	r9, r9, r3
 8010b76:	f019 0f01 	tst.w	r9, #1
 8010b7a:	d10e      	bne.n	8010b9a <__gethex+0x33e>
 8010b7c:	f045 0510 	orr.w	r5, r5, #16
 8010b80:	e032      	b.n	8010be8 <__gethex+0x38c>
 8010b82:	f04f 0901 	mov.w	r9, #1
 8010b86:	e7d1      	b.n	8010b2c <__gethex+0x2d0>
 8010b88:	2501      	movs	r5, #1
 8010b8a:	e7e2      	b.n	8010b52 <__gethex+0x2f6>
 8010b8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010b8e:	f1c3 0301 	rsb	r3, r3, #1
 8010b92:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010b94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d0f0      	beq.n	8010b7c <__gethex+0x320>
 8010b9a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010b9e:	f104 0314 	add.w	r3, r4, #20
 8010ba2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010ba6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010baa:	f04f 0c00 	mov.w	ip, #0
 8010bae:	4618      	mov	r0, r3
 8010bb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8010bb4:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8010bb8:	d01b      	beq.n	8010bf2 <__gethex+0x396>
 8010bba:	3201      	adds	r2, #1
 8010bbc:	6002      	str	r2, [r0, #0]
 8010bbe:	2d02      	cmp	r5, #2
 8010bc0:	f104 0314 	add.w	r3, r4, #20
 8010bc4:	d13c      	bne.n	8010c40 <__gethex+0x3e4>
 8010bc6:	f8d8 2000 	ldr.w	r2, [r8]
 8010bca:	3a01      	subs	r2, #1
 8010bcc:	42b2      	cmp	r2, r6
 8010bce:	d109      	bne.n	8010be4 <__gethex+0x388>
 8010bd0:	1171      	asrs	r1, r6, #5
 8010bd2:	2201      	movs	r2, #1
 8010bd4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010bd8:	f006 061f 	and.w	r6, r6, #31
 8010bdc:	fa02 f606 	lsl.w	r6, r2, r6
 8010be0:	421e      	tst	r6, r3
 8010be2:	d13a      	bne.n	8010c5a <__gethex+0x3fe>
 8010be4:	f045 0520 	orr.w	r5, r5, #32
 8010be8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010bea:	601c      	str	r4, [r3, #0]
 8010bec:	9b02      	ldr	r3, [sp, #8]
 8010bee:	601f      	str	r7, [r3, #0]
 8010bf0:	e6b0      	b.n	8010954 <__gethex+0xf8>
 8010bf2:	4299      	cmp	r1, r3
 8010bf4:	f843 cc04 	str.w	ip, [r3, #-4]
 8010bf8:	d8d9      	bhi.n	8010bae <__gethex+0x352>
 8010bfa:	68a3      	ldr	r3, [r4, #8]
 8010bfc:	459b      	cmp	fp, r3
 8010bfe:	db17      	blt.n	8010c30 <__gethex+0x3d4>
 8010c00:	6861      	ldr	r1, [r4, #4]
 8010c02:	9801      	ldr	r0, [sp, #4]
 8010c04:	3101      	adds	r1, #1
 8010c06:	f000 f941 	bl	8010e8c <_Balloc>
 8010c0a:	4681      	mov	r9, r0
 8010c0c:	b918      	cbnz	r0, 8010c16 <__gethex+0x3ba>
 8010c0e:	4b1a      	ldr	r3, [pc, #104]	@ (8010c78 <__gethex+0x41c>)
 8010c10:	4602      	mov	r2, r0
 8010c12:	2184      	movs	r1, #132	@ 0x84
 8010c14:	e6c5      	b.n	80109a2 <__gethex+0x146>
 8010c16:	6922      	ldr	r2, [r4, #16]
 8010c18:	3202      	adds	r2, #2
 8010c1a:	f104 010c 	add.w	r1, r4, #12
 8010c1e:	0092      	lsls	r2, r2, #2
 8010c20:	300c      	adds	r0, #12
 8010c22:	f7fe fee9 	bl	800f9f8 <memcpy>
 8010c26:	4621      	mov	r1, r4
 8010c28:	9801      	ldr	r0, [sp, #4]
 8010c2a:	f000 f96f 	bl	8010f0c <_Bfree>
 8010c2e:	464c      	mov	r4, r9
 8010c30:	6923      	ldr	r3, [r4, #16]
 8010c32:	1c5a      	adds	r2, r3, #1
 8010c34:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010c38:	6122      	str	r2, [r4, #16]
 8010c3a:	2201      	movs	r2, #1
 8010c3c:	615a      	str	r2, [r3, #20]
 8010c3e:	e7be      	b.n	8010bbe <__gethex+0x362>
 8010c40:	6922      	ldr	r2, [r4, #16]
 8010c42:	455a      	cmp	r2, fp
 8010c44:	dd0b      	ble.n	8010c5e <__gethex+0x402>
 8010c46:	2101      	movs	r1, #1
 8010c48:	4620      	mov	r0, r4
 8010c4a:	f7ff fd9f 	bl	801078c <rshift>
 8010c4e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010c52:	3701      	adds	r7, #1
 8010c54:	42bb      	cmp	r3, r7
 8010c56:	f6ff aee0 	blt.w	8010a1a <__gethex+0x1be>
 8010c5a:	2501      	movs	r5, #1
 8010c5c:	e7c2      	b.n	8010be4 <__gethex+0x388>
 8010c5e:	f016 061f 	ands.w	r6, r6, #31
 8010c62:	d0fa      	beq.n	8010c5a <__gethex+0x3fe>
 8010c64:	4453      	add	r3, sl
 8010c66:	f1c6 0620 	rsb	r6, r6, #32
 8010c6a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010c6e:	f000 f9ff 	bl	8011070 <__hi0bits>
 8010c72:	42b0      	cmp	r0, r6
 8010c74:	dbe7      	blt.n	8010c46 <__gethex+0x3ea>
 8010c76:	e7f0      	b.n	8010c5a <__gethex+0x3fe>
 8010c78:	08013c95 	.word	0x08013c95

08010c7c <L_shift>:
 8010c7c:	f1c2 0208 	rsb	r2, r2, #8
 8010c80:	0092      	lsls	r2, r2, #2
 8010c82:	b570      	push	{r4, r5, r6, lr}
 8010c84:	f1c2 0620 	rsb	r6, r2, #32
 8010c88:	6843      	ldr	r3, [r0, #4]
 8010c8a:	6804      	ldr	r4, [r0, #0]
 8010c8c:	fa03 f506 	lsl.w	r5, r3, r6
 8010c90:	432c      	orrs	r4, r5
 8010c92:	40d3      	lsrs	r3, r2
 8010c94:	6004      	str	r4, [r0, #0]
 8010c96:	f840 3f04 	str.w	r3, [r0, #4]!
 8010c9a:	4288      	cmp	r0, r1
 8010c9c:	d3f4      	bcc.n	8010c88 <L_shift+0xc>
 8010c9e:	bd70      	pop	{r4, r5, r6, pc}

08010ca0 <__match>:
 8010ca0:	b530      	push	{r4, r5, lr}
 8010ca2:	6803      	ldr	r3, [r0, #0]
 8010ca4:	3301      	adds	r3, #1
 8010ca6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010caa:	b914      	cbnz	r4, 8010cb2 <__match+0x12>
 8010cac:	6003      	str	r3, [r0, #0]
 8010cae:	2001      	movs	r0, #1
 8010cb0:	bd30      	pop	{r4, r5, pc}
 8010cb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010cb6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8010cba:	2d19      	cmp	r5, #25
 8010cbc:	bf98      	it	ls
 8010cbe:	3220      	addls	r2, #32
 8010cc0:	42a2      	cmp	r2, r4
 8010cc2:	d0f0      	beq.n	8010ca6 <__match+0x6>
 8010cc4:	2000      	movs	r0, #0
 8010cc6:	e7f3      	b.n	8010cb0 <__match+0x10>

08010cc8 <__hexnan>:
 8010cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ccc:	680b      	ldr	r3, [r1, #0]
 8010cce:	6801      	ldr	r1, [r0, #0]
 8010cd0:	115e      	asrs	r6, r3, #5
 8010cd2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010cd6:	f013 031f 	ands.w	r3, r3, #31
 8010cda:	b087      	sub	sp, #28
 8010cdc:	bf18      	it	ne
 8010cde:	3604      	addne	r6, #4
 8010ce0:	2500      	movs	r5, #0
 8010ce2:	1f37      	subs	r7, r6, #4
 8010ce4:	4682      	mov	sl, r0
 8010ce6:	4690      	mov	r8, r2
 8010ce8:	9301      	str	r3, [sp, #4]
 8010cea:	f846 5c04 	str.w	r5, [r6, #-4]
 8010cee:	46b9      	mov	r9, r7
 8010cf0:	463c      	mov	r4, r7
 8010cf2:	9502      	str	r5, [sp, #8]
 8010cf4:	46ab      	mov	fp, r5
 8010cf6:	784a      	ldrb	r2, [r1, #1]
 8010cf8:	1c4b      	adds	r3, r1, #1
 8010cfa:	9303      	str	r3, [sp, #12]
 8010cfc:	b342      	cbz	r2, 8010d50 <__hexnan+0x88>
 8010cfe:	4610      	mov	r0, r2
 8010d00:	9105      	str	r1, [sp, #20]
 8010d02:	9204      	str	r2, [sp, #16]
 8010d04:	f7ff fd94 	bl	8010830 <__hexdig_fun>
 8010d08:	2800      	cmp	r0, #0
 8010d0a:	d151      	bne.n	8010db0 <__hexnan+0xe8>
 8010d0c:	9a04      	ldr	r2, [sp, #16]
 8010d0e:	9905      	ldr	r1, [sp, #20]
 8010d10:	2a20      	cmp	r2, #32
 8010d12:	d818      	bhi.n	8010d46 <__hexnan+0x7e>
 8010d14:	9b02      	ldr	r3, [sp, #8]
 8010d16:	459b      	cmp	fp, r3
 8010d18:	dd13      	ble.n	8010d42 <__hexnan+0x7a>
 8010d1a:	454c      	cmp	r4, r9
 8010d1c:	d206      	bcs.n	8010d2c <__hexnan+0x64>
 8010d1e:	2d07      	cmp	r5, #7
 8010d20:	dc04      	bgt.n	8010d2c <__hexnan+0x64>
 8010d22:	462a      	mov	r2, r5
 8010d24:	4649      	mov	r1, r9
 8010d26:	4620      	mov	r0, r4
 8010d28:	f7ff ffa8 	bl	8010c7c <L_shift>
 8010d2c:	4544      	cmp	r4, r8
 8010d2e:	d952      	bls.n	8010dd6 <__hexnan+0x10e>
 8010d30:	2300      	movs	r3, #0
 8010d32:	f1a4 0904 	sub.w	r9, r4, #4
 8010d36:	f844 3c04 	str.w	r3, [r4, #-4]
 8010d3a:	f8cd b008 	str.w	fp, [sp, #8]
 8010d3e:	464c      	mov	r4, r9
 8010d40:	461d      	mov	r5, r3
 8010d42:	9903      	ldr	r1, [sp, #12]
 8010d44:	e7d7      	b.n	8010cf6 <__hexnan+0x2e>
 8010d46:	2a29      	cmp	r2, #41	@ 0x29
 8010d48:	d157      	bne.n	8010dfa <__hexnan+0x132>
 8010d4a:	3102      	adds	r1, #2
 8010d4c:	f8ca 1000 	str.w	r1, [sl]
 8010d50:	f1bb 0f00 	cmp.w	fp, #0
 8010d54:	d051      	beq.n	8010dfa <__hexnan+0x132>
 8010d56:	454c      	cmp	r4, r9
 8010d58:	d206      	bcs.n	8010d68 <__hexnan+0xa0>
 8010d5a:	2d07      	cmp	r5, #7
 8010d5c:	dc04      	bgt.n	8010d68 <__hexnan+0xa0>
 8010d5e:	462a      	mov	r2, r5
 8010d60:	4649      	mov	r1, r9
 8010d62:	4620      	mov	r0, r4
 8010d64:	f7ff ff8a 	bl	8010c7c <L_shift>
 8010d68:	4544      	cmp	r4, r8
 8010d6a:	d936      	bls.n	8010dda <__hexnan+0x112>
 8010d6c:	f1a8 0204 	sub.w	r2, r8, #4
 8010d70:	4623      	mov	r3, r4
 8010d72:	f853 1b04 	ldr.w	r1, [r3], #4
 8010d76:	f842 1f04 	str.w	r1, [r2, #4]!
 8010d7a:	429f      	cmp	r7, r3
 8010d7c:	d2f9      	bcs.n	8010d72 <__hexnan+0xaa>
 8010d7e:	1b3b      	subs	r3, r7, r4
 8010d80:	f023 0303 	bic.w	r3, r3, #3
 8010d84:	3304      	adds	r3, #4
 8010d86:	3401      	adds	r4, #1
 8010d88:	3e03      	subs	r6, #3
 8010d8a:	42b4      	cmp	r4, r6
 8010d8c:	bf88      	it	hi
 8010d8e:	2304      	movhi	r3, #4
 8010d90:	4443      	add	r3, r8
 8010d92:	2200      	movs	r2, #0
 8010d94:	f843 2b04 	str.w	r2, [r3], #4
 8010d98:	429f      	cmp	r7, r3
 8010d9a:	d2fb      	bcs.n	8010d94 <__hexnan+0xcc>
 8010d9c:	683b      	ldr	r3, [r7, #0]
 8010d9e:	b91b      	cbnz	r3, 8010da8 <__hexnan+0xe0>
 8010da0:	4547      	cmp	r7, r8
 8010da2:	d128      	bne.n	8010df6 <__hexnan+0x12e>
 8010da4:	2301      	movs	r3, #1
 8010da6:	603b      	str	r3, [r7, #0]
 8010da8:	2005      	movs	r0, #5
 8010daa:	b007      	add	sp, #28
 8010dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010db0:	3501      	adds	r5, #1
 8010db2:	2d08      	cmp	r5, #8
 8010db4:	f10b 0b01 	add.w	fp, fp, #1
 8010db8:	dd06      	ble.n	8010dc8 <__hexnan+0x100>
 8010dba:	4544      	cmp	r4, r8
 8010dbc:	d9c1      	bls.n	8010d42 <__hexnan+0x7a>
 8010dbe:	2300      	movs	r3, #0
 8010dc0:	f844 3c04 	str.w	r3, [r4, #-4]
 8010dc4:	2501      	movs	r5, #1
 8010dc6:	3c04      	subs	r4, #4
 8010dc8:	6822      	ldr	r2, [r4, #0]
 8010dca:	f000 000f 	and.w	r0, r0, #15
 8010dce:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010dd2:	6020      	str	r0, [r4, #0]
 8010dd4:	e7b5      	b.n	8010d42 <__hexnan+0x7a>
 8010dd6:	2508      	movs	r5, #8
 8010dd8:	e7b3      	b.n	8010d42 <__hexnan+0x7a>
 8010dda:	9b01      	ldr	r3, [sp, #4]
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d0dd      	beq.n	8010d9c <__hexnan+0xd4>
 8010de0:	f1c3 0320 	rsb	r3, r3, #32
 8010de4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010de8:	40da      	lsrs	r2, r3
 8010dea:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010dee:	4013      	ands	r3, r2
 8010df0:	f846 3c04 	str.w	r3, [r6, #-4]
 8010df4:	e7d2      	b.n	8010d9c <__hexnan+0xd4>
 8010df6:	3f04      	subs	r7, #4
 8010df8:	e7d0      	b.n	8010d9c <__hexnan+0xd4>
 8010dfa:	2004      	movs	r0, #4
 8010dfc:	e7d5      	b.n	8010daa <__hexnan+0xe2>
	...

08010e00 <_mallinfo_r>:
 8010e00:	b570      	push	{r4, r5, r6, lr}
 8010e02:	4c16      	ldr	r4, [pc, #88]	@ (8010e5c <_mallinfo_r+0x5c>)
 8010e04:	4605      	mov	r5, r0
 8010e06:	4608      	mov	r0, r1
 8010e08:	460e      	mov	r6, r1
 8010e0a:	f7f3 f9af 	bl	800416c <__malloc_lock>
 8010e0e:	6823      	ldr	r3, [r4, #0]
 8010e10:	b14b      	cbz	r3, 8010e26 <_mallinfo_r+0x26>
 8010e12:	2100      	movs	r1, #0
 8010e14:	4630      	mov	r0, r6
 8010e16:	f7f3 f925 	bl	8004064 <_sbrk_r>
 8010e1a:	1c42      	adds	r2, r0, #1
 8010e1c:	bf18      	it	ne
 8010e1e:	6822      	ldrne	r2, [r4, #0]
 8010e20:	4603      	mov	r3, r0
 8010e22:	bf18      	it	ne
 8010e24:	1a83      	subne	r3, r0, r2
 8010e26:	4a0e      	ldr	r2, [pc, #56]	@ (8010e60 <_mallinfo_r+0x60>)
 8010e28:	6811      	ldr	r1, [r2, #0]
 8010e2a:	2200      	movs	r2, #0
 8010e2c:	b991      	cbnz	r1, 8010e54 <_mallinfo_r+0x54>
 8010e2e:	4c0d      	ldr	r4, [pc, #52]	@ (8010e64 <_mallinfo_r+0x64>)
 8010e30:	4630      	mov	r0, r6
 8010e32:	6023      	str	r3, [r4, #0]
 8010e34:	1a9b      	subs	r3, r3, r2
 8010e36:	6222      	str	r2, [r4, #32]
 8010e38:	61e3      	str	r3, [r4, #28]
 8010e3a:	f7f3 f9d1 	bl	80041e0 <__malloc_unlock>
 8010e3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010e40:	462e      	mov	r6, r5
 8010e42:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8010e44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010e46:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8010e48:	e894 0003 	ldmia.w	r4, {r0, r1}
 8010e4c:	e886 0003 	stmia.w	r6, {r0, r1}
 8010e50:	4628      	mov	r0, r5
 8010e52:	bd70      	pop	{r4, r5, r6, pc}
 8010e54:	6808      	ldr	r0, [r1, #0]
 8010e56:	6849      	ldr	r1, [r1, #4]
 8010e58:	4402      	add	r2, r0
 8010e5a:	e7e7      	b.n	8010e2c <_mallinfo_r+0x2c>
 8010e5c:	200004fc 	.word	0x200004fc
 8010e60:	20000500 	.word	0x20000500
 8010e64:	2000064c 	.word	0x2000064c

08010e68 <__ascii_mbtowc>:
 8010e68:	b082      	sub	sp, #8
 8010e6a:	b901      	cbnz	r1, 8010e6e <__ascii_mbtowc+0x6>
 8010e6c:	a901      	add	r1, sp, #4
 8010e6e:	b142      	cbz	r2, 8010e82 <__ascii_mbtowc+0x1a>
 8010e70:	b14b      	cbz	r3, 8010e86 <__ascii_mbtowc+0x1e>
 8010e72:	7813      	ldrb	r3, [r2, #0]
 8010e74:	600b      	str	r3, [r1, #0]
 8010e76:	7812      	ldrb	r2, [r2, #0]
 8010e78:	1e10      	subs	r0, r2, #0
 8010e7a:	bf18      	it	ne
 8010e7c:	2001      	movne	r0, #1
 8010e7e:	b002      	add	sp, #8
 8010e80:	4770      	bx	lr
 8010e82:	4610      	mov	r0, r2
 8010e84:	e7fb      	b.n	8010e7e <__ascii_mbtowc+0x16>
 8010e86:	f06f 0001 	mvn.w	r0, #1
 8010e8a:	e7f8      	b.n	8010e7e <__ascii_mbtowc+0x16>

08010e8c <_Balloc>:
 8010e8c:	b570      	push	{r4, r5, r6, lr}
 8010e8e:	69c6      	ldr	r6, [r0, #28]
 8010e90:	4604      	mov	r4, r0
 8010e92:	460d      	mov	r5, r1
 8010e94:	b976      	cbnz	r6, 8010eb4 <_Balloc+0x28>
 8010e96:	2010      	movs	r0, #16
 8010e98:	f7fc f9d0 	bl	800d23c <malloc>
 8010e9c:	4602      	mov	r2, r0
 8010e9e:	61e0      	str	r0, [r4, #28]
 8010ea0:	b920      	cbnz	r0, 8010eac <_Balloc+0x20>
 8010ea2:	4b18      	ldr	r3, [pc, #96]	@ (8010f04 <_Balloc+0x78>)
 8010ea4:	4818      	ldr	r0, [pc, #96]	@ (8010f08 <_Balloc+0x7c>)
 8010ea6:	216b      	movs	r1, #107	@ 0x6b
 8010ea8:	f7fc f942 	bl	800d130 <__assert_func>
 8010eac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010eb0:	6006      	str	r6, [r0, #0]
 8010eb2:	60c6      	str	r6, [r0, #12]
 8010eb4:	69e6      	ldr	r6, [r4, #28]
 8010eb6:	68f3      	ldr	r3, [r6, #12]
 8010eb8:	b183      	cbz	r3, 8010edc <_Balloc+0x50>
 8010eba:	69e3      	ldr	r3, [r4, #28]
 8010ebc:	68db      	ldr	r3, [r3, #12]
 8010ebe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010ec2:	b9b8      	cbnz	r0, 8010ef4 <_Balloc+0x68>
 8010ec4:	2101      	movs	r1, #1
 8010ec6:	fa01 f605 	lsl.w	r6, r1, r5
 8010eca:	1d72      	adds	r2, r6, #5
 8010ecc:	0092      	lsls	r2, r2, #2
 8010ece:	4620      	mov	r0, r4
 8010ed0:	f7fc f958 	bl	800d184 <_calloc_r>
 8010ed4:	b160      	cbz	r0, 8010ef0 <_Balloc+0x64>
 8010ed6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010eda:	e00e      	b.n	8010efa <_Balloc+0x6e>
 8010edc:	2221      	movs	r2, #33	@ 0x21
 8010ede:	2104      	movs	r1, #4
 8010ee0:	4620      	mov	r0, r4
 8010ee2:	f7fc f94f 	bl	800d184 <_calloc_r>
 8010ee6:	69e3      	ldr	r3, [r4, #28]
 8010ee8:	60f0      	str	r0, [r6, #12]
 8010eea:	68db      	ldr	r3, [r3, #12]
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d1e4      	bne.n	8010eba <_Balloc+0x2e>
 8010ef0:	2000      	movs	r0, #0
 8010ef2:	bd70      	pop	{r4, r5, r6, pc}
 8010ef4:	6802      	ldr	r2, [r0, #0]
 8010ef6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010efa:	2300      	movs	r3, #0
 8010efc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010f00:	e7f7      	b.n	8010ef2 <_Balloc+0x66>
 8010f02:	bf00      	nop
 8010f04:	08013bb7 	.word	0x08013bb7
 8010f08:	08013d06 	.word	0x08013d06

08010f0c <_Bfree>:
 8010f0c:	b570      	push	{r4, r5, r6, lr}
 8010f0e:	69c6      	ldr	r6, [r0, #28]
 8010f10:	4605      	mov	r5, r0
 8010f12:	460c      	mov	r4, r1
 8010f14:	b976      	cbnz	r6, 8010f34 <_Bfree+0x28>
 8010f16:	2010      	movs	r0, #16
 8010f18:	f7fc f990 	bl	800d23c <malloc>
 8010f1c:	4602      	mov	r2, r0
 8010f1e:	61e8      	str	r0, [r5, #28]
 8010f20:	b920      	cbnz	r0, 8010f2c <_Bfree+0x20>
 8010f22:	4b09      	ldr	r3, [pc, #36]	@ (8010f48 <_Bfree+0x3c>)
 8010f24:	4809      	ldr	r0, [pc, #36]	@ (8010f4c <_Bfree+0x40>)
 8010f26:	218f      	movs	r1, #143	@ 0x8f
 8010f28:	f7fc f902 	bl	800d130 <__assert_func>
 8010f2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010f30:	6006      	str	r6, [r0, #0]
 8010f32:	60c6      	str	r6, [r0, #12]
 8010f34:	b13c      	cbz	r4, 8010f46 <_Bfree+0x3a>
 8010f36:	69eb      	ldr	r3, [r5, #28]
 8010f38:	6862      	ldr	r2, [r4, #4]
 8010f3a:	68db      	ldr	r3, [r3, #12]
 8010f3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010f40:	6021      	str	r1, [r4, #0]
 8010f42:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010f46:	bd70      	pop	{r4, r5, r6, pc}
 8010f48:	08013bb7 	.word	0x08013bb7
 8010f4c:	08013d06 	.word	0x08013d06

08010f50 <__multadd>:
 8010f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f54:	690d      	ldr	r5, [r1, #16]
 8010f56:	4607      	mov	r7, r0
 8010f58:	460c      	mov	r4, r1
 8010f5a:	461e      	mov	r6, r3
 8010f5c:	f101 0c14 	add.w	ip, r1, #20
 8010f60:	2000      	movs	r0, #0
 8010f62:	f8dc 3000 	ldr.w	r3, [ip]
 8010f66:	b299      	uxth	r1, r3
 8010f68:	fb02 6101 	mla	r1, r2, r1, r6
 8010f6c:	0c1e      	lsrs	r6, r3, #16
 8010f6e:	0c0b      	lsrs	r3, r1, #16
 8010f70:	fb02 3306 	mla	r3, r2, r6, r3
 8010f74:	b289      	uxth	r1, r1
 8010f76:	3001      	adds	r0, #1
 8010f78:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010f7c:	4285      	cmp	r5, r0
 8010f7e:	f84c 1b04 	str.w	r1, [ip], #4
 8010f82:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010f86:	dcec      	bgt.n	8010f62 <__multadd+0x12>
 8010f88:	b30e      	cbz	r6, 8010fce <__multadd+0x7e>
 8010f8a:	68a3      	ldr	r3, [r4, #8]
 8010f8c:	42ab      	cmp	r3, r5
 8010f8e:	dc19      	bgt.n	8010fc4 <__multadd+0x74>
 8010f90:	6861      	ldr	r1, [r4, #4]
 8010f92:	4638      	mov	r0, r7
 8010f94:	3101      	adds	r1, #1
 8010f96:	f7ff ff79 	bl	8010e8c <_Balloc>
 8010f9a:	4680      	mov	r8, r0
 8010f9c:	b928      	cbnz	r0, 8010faa <__multadd+0x5a>
 8010f9e:	4602      	mov	r2, r0
 8010fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8010fd4 <__multadd+0x84>)
 8010fa2:	480d      	ldr	r0, [pc, #52]	@ (8010fd8 <__multadd+0x88>)
 8010fa4:	21ba      	movs	r1, #186	@ 0xba
 8010fa6:	f7fc f8c3 	bl	800d130 <__assert_func>
 8010faa:	6922      	ldr	r2, [r4, #16]
 8010fac:	3202      	adds	r2, #2
 8010fae:	f104 010c 	add.w	r1, r4, #12
 8010fb2:	0092      	lsls	r2, r2, #2
 8010fb4:	300c      	adds	r0, #12
 8010fb6:	f7fe fd1f 	bl	800f9f8 <memcpy>
 8010fba:	4621      	mov	r1, r4
 8010fbc:	4638      	mov	r0, r7
 8010fbe:	f7ff ffa5 	bl	8010f0c <_Bfree>
 8010fc2:	4644      	mov	r4, r8
 8010fc4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010fc8:	3501      	adds	r5, #1
 8010fca:	615e      	str	r6, [r3, #20]
 8010fcc:	6125      	str	r5, [r4, #16]
 8010fce:	4620      	mov	r0, r4
 8010fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010fd4:	08013c95 	.word	0x08013c95
 8010fd8:	08013d06 	.word	0x08013d06

08010fdc <__s2b>:
 8010fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010fe0:	460c      	mov	r4, r1
 8010fe2:	4615      	mov	r5, r2
 8010fe4:	461f      	mov	r7, r3
 8010fe6:	2209      	movs	r2, #9
 8010fe8:	3308      	adds	r3, #8
 8010fea:	4606      	mov	r6, r0
 8010fec:	fb93 f3f2 	sdiv	r3, r3, r2
 8010ff0:	2100      	movs	r1, #0
 8010ff2:	2201      	movs	r2, #1
 8010ff4:	429a      	cmp	r2, r3
 8010ff6:	db09      	blt.n	801100c <__s2b+0x30>
 8010ff8:	4630      	mov	r0, r6
 8010ffa:	f7ff ff47 	bl	8010e8c <_Balloc>
 8010ffe:	b940      	cbnz	r0, 8011012 <__s2b+0x36>
 8011000:	4602      	mov	r2, r0
 8011002:	4b19      	ldr	r3, [pc, #100]	@ (8011068 <__s2b+0x8c>)
 8011004:	4819      	ldr	r0, [pc, #100]	@ (801106c <__s2b+0x90>)
 8011006:	21d3      	movs	r1, #211	@ 0xd3
 8011008:	f7fc f892 	bl	800d130 <__assert_func>
 801100c:	0052      	lsls	r2, r2, #1
 801100e:	3101      	adds	r1, #1
 8011010:	e7f0      	b.n	8010ff4 <__s2b+0x18>
 8011012:	9b08      	ldr	r3, [sp, #32]
 8011014:	6143      	str	r3, [r0, #20]
 8011016:	2d09      	cmp	r5, #9
 8011018:	f04f 0301 	mov.w	r3, #1
 801101c:	6103      	str	r3, [r0, #16]
 801101e:	dd16      	ble.n	801104e <__s2b+0x72>
 8011020:	f104 0909 	add.w	r9, r4, #9
 8011024:	46c8      	mov	r8, r9
 8011026:	442c      	add	r4, r5
 8011028:	f818 3b01 	ldrb.w	r3, [r8], #1
 801102c:	4601      	mov	r1, r0
 801102e:	3b30      	subs	r3, #48	@ 0x30
 8011030:	220a      	movs	r2, #10
 8011032:	4630      	mov	r0, r6
 8011034:	f7ff ff8c 	bl	8010f50 <__multadd>
 8011038:	45a0      	cmp	r8, r4
 801103a:	d1f5      	bne.n	8011028 <__s2b+0x4c>
 801103c:	f1a5 0408 	sub.w	r4, r5, #8
 8011040:	444c      	add	r4, r9
 8011042:	1b2d      	subs	r5, r5, r4
 8011044:	1963      	adds	r3, r4, r5
 8011046:	42bb      	cmp	r3, r7
 8011048:	db04      	blt.n	8011054 <__s2b+0x78>
 801104a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801104e:	340a      	adds	r4, #10
 8011050:	2509      	movs	r5, #9
 8011052:	e7f6      	b.n	8011042 <__s2b+0x66>
 8011054:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011058:	4601      	mov	r1, r0
 801105a:	3b30      	subs	r3, #48	@ 0x30
 801105c:	220a      	movs	r2, #10
 801105e:	4630      	mov	r0, r6
 8011060:	f7ff ff76 	bl	8010f50 <__multadd>
 8011064:	e7ee      	b.n	8011044 <__s2b+0x68>
 8011066:	bf00      	nop
 8011068:	08013c95 	.word	0x08013c95
 801106c:	08013d06 	.word	0x08013d06

08011070 <__hi0bits>:
 8011070:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011074:	4603      	mov	r3, r0
 8011076:	bf36      	itet	cc
 8011078:	0403      	lslcc	r3, r0, #16
 801107a:	2000      	movcs	r0, #0
 801107c:	2010      	movcc	r0, #16
 801107e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011082:	bf3c      	itt	cc
 8011084:	021b      	lslcc	r3, r3, #8
 8011086:	3008      	addcc	r0, #8
 8011088:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801108c:	bf3c      	itt	cc
 801108e:	011b      	lslcc	r3, r3, #4
 8011090:	3004      	addcc	r0, #4
 8011092:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011096:	bf3c      	itt	cc
 8011098:	009b      	lslcc	r3, r3, #2
 801109a:	3002      	addcc	r0, #2
 801109c:	2b00      	cmp	r3, #0
 801109e:	db05      	blt.n	80110ac <__hi0bits+0x3c>
 80110a0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80110a4:	f100 0001 	add.w	r0, r0, #1
 80110a8:	bf08      	it	eq
 80110aa:	2020      	moveq	r0, #32
 80110ac:	4770      	bx	lr

080110ae <__lo0bits>:
 80110ae:	6803      	ldr	r3, [r0, #0]
 80110b0:	4602      	mov	r2, r0
 80110b2:	f013 0007 	ands.w	r0, r3, #7
 80110b6:	d00b      	beq.n	80110d0 <__lo0bits+0x22>
 80110b8:	07d9      	lsls	r1, r3, #31
 80110ba:	d421      	bmi.n	8011100 <__lo0bits+0x52>
 80110bc:	0798      	lsls	r0, r3, #30
 80110be:	bf49      	itett	mi
 80110c0:	085b      	lsrmi	r3, r3, #1
 80110c2:	089b      	lsrpl	r3, r3, #2
 80110c4:	2001      	movmi	r0, #1
 80110c6:	6013      	strmi	r3, [r2, #0]
 80110c8:	bf5c      	itt	pl
 80110ca:	6013      	strpl	r3, [r2, #0]
 80110cc:	2002      	movpl	r0, #2
 80110ce:	4770      	bx	lr
 80110d0:	b299      	uxth	r1, r3
 80110d2:	b909      	cbnz	r1, 80110d8 <__lo0bits+0x2a>
 80110d4:	0c1b      	lsrs	r3, r3, #16
 80110d6:	2010      	movs	r0, #16
 80110d8:	b2d9      	uxtb	r1, r3
 80110da:	b909      	cbnz	r1, 80110e0 <__lo0bits+0x32>
 80110dc:	3008      	adds	r0, #8
 80110de:	0a1b      	lsrs	r3, r3, #8
 80110e0:	0719      	lsls	r1, r3, #28
 80110e2:	bf04      	itt	eq
 80110e4:	091b      	lsreq	r3, r3, #4
 80110e6:	3004      	addeq	r0, #4
 80110e8:	0799      	lsls	r1, r3, #30
 80110ea:	bf04      	itt	eq
 80110ec:	089b      	lsreq	r3, r3, #2
 80110ee:	3002      	addeq	r0, #2
 80110f0:	07d9      	lsls	r1, r3, #31
 80110f2:	d403      	bmi.n	80110fc <__lo0bits+0x4e>
 80110f4:	085b      	lsrs	r3, r3, #1
 80110f6:	f100 0001 	add.w	r0, r0, #1
 80110fa:	d003      	beq.n	8011104 <__lo0bits+0x56>
 80110fc:	6013      	str	r3, [r2, #0]
 80110fe:	4770      	bx	lr
 8011100:	2000      	movs	r0, #0
 8011102:	4770      	bx	lr
 8011104:	2020      	movs	r0, #32
 8011106:	4770      	bx	lr

08011108 <__i2b>:
 8011108:	b510      	push	{r4, lr}
 801110a:	460c      	mov	r4, r1
 801110c:	2101      	movs	r1, #1
 801110e:	f7ff febd 	bl	8010e8c <_Balloc>
 8011112:	4602      	mov	r2, r0
 8011114:	b928      	cbnz	r0, 8011122 <__i2b+0x1a>
 8011116:	4b05      	ldr	r3, [pc, #20]	@ (801112c <__i2b+0x24>)
 8011118:	4805      	ldr	r0, [pc, #20]	@ (8011130 <__i2b+0x28>)
 801111a:	f240 1145 	movw	r1, #325	@ 0x145
 801111e:	f7fc f807 	bl	800d130 <__assert_func>
 8011122:	2301      	movs	r3, #1
 8011124:	6144      	str	r4, [r0, #20]
 8011126:	6103      	str	r3, [r0, #16]
 8011128:	bd10      	pop	{r4, pc}
 801112a:	bf00      	nop
 801112c:	08013c95 	.word	0x08013c95
 8011130:	08013d06 	.word	0x08013d06

08011134 <__multiply>:
 8011134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011138:	4617      	mov	r7, r2
 801113a:	690a      	ldr	r2, [r1, #16]
 801113c:	693b      	ldr	r3, [r7, #16]
 801113e:	429a      	cmp	r2, r3
 8011140:	bfa8      	it	ge
 8011142:	463b      	movge	r3, r7
 8011144:	4689      	mov	r9, r1
 8011146:	bfa4      	itt	ge
 8011148:	460f      	movge	r7, r1
 801114a:	4699      	movge	r9, r3
 801114c:	693d      	ldr	r5, [r7, #16]
 801114e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011152:	68bb      	ldr	r3, [r7, #8]
 8011154:	6879      	ldr	r1, [r7, #4]
 8011156:	eb05 060a 	add.w	r6, r5, sl
 801115a:	42b3      	cmp	r3, r6
 801115c:	b085      	sub	sp, #20
 801115e:	bfb8      	it	lt
 8011160:	3101      	addlt	r1, #1
 8011162:	f7ff fe93 	bl	8010e8c <_Balloc>
 8011166:	b930      	cbnz	r0, 8011176 <__multiply+0x42>
 8011168:	4602      	mov	r2, r0
 801116a:	4b41      	ldr	r3, [pc, #260]	@ (8011270 <__multiply+0x13c>)
 801116c:	4841      	ldr	r0, [pc, #260]	@ (8011274 <__multiply+0x140>)
 801116e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011172:	f7fb ffdd 	bl	800d130 <__assert_func>
 8011176:	f100 0414 	add.w	r4, r0, #20
 801117a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801117e:	4623      	mov	r3, r4
 8011180:	2200      	movs	r2, #0
 8011182:	4573      	cmp	r3, lr
 8011184:	d320      	bcc.n	80111c8 <__multiply+0x94>
 8011186:	f107 0814 	add.w	r8, r7, #20
 801118a:	f109 0114 	add.w	r1, r9, #20
 801118e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8011192:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8011196:	9302      	str	r3, [sp, #8]
 8011198:	1beb      	subs	r3, r5, r7
 801119a:	3b15      	subs	r3, #21
 801119c:	f023 0303 	bic.w	r3, r3, #3
 80111a0:	3304      	adds	r3, #4
 80111a2:	3715      	adds	r7, #21
 80111a4:	42bd      	cmp	r5, r7
 80111a6:	bf38      	it	cc
 80111a8:	2304      	movcc	r3, #4
 80111aa:	9301      	str	r3, [sp, #4]
 80111ac:	9b02      	ldr	r3, [sp, #8]
 80111ae:	9103      	str	r1, [sp, #12]
 80111b0:	428b      	cmp	r3, r1
 80111b2:	d80c      	bhi.n	80111ce <__multiply+0x9a>
 80111b4:	2e00      	cmp	r6, #0
 80111b6:	dd03      	ble.n	80111c0 <__multiply+0x8c>
 80111b8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d055      	beq.n	801126c <__multiply+0x138>
 80111c0:	6106      	str	r6, [r0, #16]
 80111c2:	b005      	add	sp, #20
 80111c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111c8:	f843 2b04 	str.w	r2, [r3], #4
 80111cc:	e7d9      	b.n	8011182 <__multiply+0x4e>
 80111ce:	f8b1 a000 	ldrh.w	sl, [r1]
 80111d2:	f1ba 0f00 	cmp.w	sl, #0
 80111d6:	d01f      	beq.n	8011218 <__multiply+0xe4>
 80111d8:	46c4      	mov	ip, r8
 80111da:	46a1      	mov	r9, r4
 80111dc:	2700      	movs	r7, #0
 80111de:	f85c 2b04 	ldr.w	r2, [ip], #4
 80111e2:	f8d9 3000 	ldr.w	r3, [r9]
 80111e6:	fa1f fb82 	uxth.w	fp, r2
 80111ea:	b29b      	uxth	r3, r3
 80111ec:	fb0a 330b 	mla	r3, sl, fp, r3
 80111f0:	443b      	add	r3, r7
 80111f2:	f8d9 7000 	ldr.w	r7, [r9]
 80111f6:	0c12      	lsrs	r2, r2, #16
 80111f8:	0c3f      	lsrs	r7, r7, #16
 80111fa:	fb0a 7202 	mla	r2, sl, r2, r7
 80111fe:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8011202:	b29b      	uxth	r3, r3
 8011204:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011208:	4565      	cmp	r5, ip
 801120a:	f849 3b04 	str.w	r3, [r9], #4
 801120e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8011212:	d8e4      	bhi.n	80111de <__multiply+0xaa>
 8011214:	9b01      	ldr	r3, [sp, #4]
 8011216:	50e7      	str	r7, [r4, r3]
 8011218:	9b03      	ldr	r3, [sp, #12]
 801121a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801121e:	3104      	adds	r1, #4
 8011220:	f1b9 0f00 	cmp.w	r9, #0
 8011224:	d020      	beq.n	8011268 <__multiply+0x134>
 8011226:	6823      	ldr	r3, [r4, #0]
 8011228:	4647      	mov	r7, r8
 801122a:	46a4      	mov	ip, r4
 801122c:	f04f 0a00 	mov.w	sl, #0
 8011230:	f8b7 b000 	ldrh.w	fp, [r7]
 8011234:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8011238:	fb09 220b 	mla	r2, r9, fp, r2
 801123c:	4452      	add	r2, sl
 801123e:	b29b      	uxth	r3, r3
 8011240:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011244:	f84c 3b04 	str.w	r3, [ip], #4
 8011248:	f857 3b04 	ldr.w	r3, [r7], #4
 801124c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011250:	f8bc 3000 	ldrh.w	r3, [ip]
 8011254:	fb09 330a 	mla	r3, r9, sl, r3
 8011258:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 801125c:	42bd      	cmp	r5, r7
 801125e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011262:	d8e5      	bhi.n	8011230 <__multiply+0xfc>
 8011264:	9a01      	ldr	r2, [sp, #4]
 8011266:	50a3      	str	r3, [r4, r2]
 8011268:	3404      	adds	r4, #4
 801126a:	e79f      	b.n	80111ac <__multiply+0x78>
 801126c:	3e01      	subs	r6, #1
 801126e:	e7a1      	b.n	80111b4 <__multiply+0x80>
 8011270:	08013c95 	.word	0x08013c95
 8011274:	08013d06 	.word	0x08013d06

08011278 <__pow5mult>:
 8011278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801127c:	4615      	mov	r5, r2
 801127e:	f012 0203 	ands.w	r2, r2, #3
 8011282:	4607      	mov	r7, r0
 8011284:	460e      	mov	r6, r1
 8011286:	d007      	beq.n	8011298 <__pow5mult+0x20>
 8011288:	4c25      	ldr	r4, [pc, #148]	@ (8011320 <__pow5mult+0xa8>)
 801128a:	3a01      	subs	r2, #1
 801128c:	2300      	movs	r3, #0
 801128e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011292:	f7ff fe5d 	bl	8010f50 <__multadd>
 8011296:	4606      	mov	r6, r0
 8011298:	10ad      	asrs	r5, r5, #2
 801129a:	d03d      	beq.n	8011318 <__pow5mult+0xa0>
 801129c:	69fc      	ldr	r4, [r7, #28]
 801129e:	b97c      	cbnz	r4, 80112c0 <__pow5mult+0x48>
 80112a0:	2010      	movs	r0, #16
 80112a2:	f7fb ffcb 	bl	800d23c <malloc>
 80112a6:	4602      	mov	r2, r0
 80112a8:	61f8      	str	r0, [r7, #28]
 80112aa:	b928      	cbnz	r0, 80112b8 <__pow5mult+0x40>
 80112ac:	4b1d      	ldr	r3, [pc, #116]	@ (8011324 <__pow5mult+0xac>)
 80112ae:	481e      	ldr	r0, [pc, #120]	@ (8011328 <__pow5mult+0xb0>)
 80112b0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80112b4:	f7fb ff3c 	bl	800d130 <__assert_func>
 80112b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80112bc:	6004      	str	r4, [r0, #0]
 80112be:	60c4      	str	r4, [r0, #12]
 80112c0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80112c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80112c8:	b94c      	cbnz	r4, 80112de <__pow5mult+0x66>
 80112ca:	f240 2171 	movw	r1, #625	@ 0x271
 80112ce:	4638      	mov	r0, r7
 80112d0:	f7ff ff1a 	bl	8011108 <__i2b>
 80112d4:	2300      	movs	r3, #0
 80112d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80112da:	4604      	mov	r4, r0
 80112dc:	6003      	str	r3, [r0, #0]
 80112de:	f04f 0900 	mov.w	r9, #0
 80112e2:	07eb      	lsls	r3, r5, #31
 80112e4:	d50a      	bpl.n	80112fc <__pow5mult+0x84>
 80112e6:	4631      	mov	r1, r6
 80112e8:	4622      	mov	r2, r4
 80112ea:	4638      	mov	r0, r7
 80112ec:	f7ff ff22 	bl	8011134 <__multiply>
 80112f0:	4631      	mov	r1, r6
 80112f2:	4680      	mov	r8, r0
 80112f4:	4638      	mov	r0, r7
 80112f6:	f7ff fe09 	bl	8010f0c <_Bfree>
 80112fa:	4646      	mov	r6, r8
 80112fc:	106d      	asrs	r5, r5, #1
 80112fe:	d00b      	beq.n	8011318 <__pow5mult+0xa0>
 8011300:	6820      	ldr	r0, [r4, #0]
 8011302:	b938      	cbnz	r0, 8011314 <__pow5mult+0x9c>
 8011304:	4622      	mov	r2, r4
 8011306:	4621      	mov	r1, r4
 8011308:	4638      	mov	r0, r7
 801130a:	f7ff ff13 	bl	8011134 <__multiply>
 801130e:	6020      	str	r0, [r4, #0]
 8011310:	f8c0 9000 	str.w	r9, [r0]
 8011314:	4604      	mov	r4, r0
 8011316:	e7e4      	b.n	80112e2 <__pow5mult+0x6a>
 8011318:	4630      	mov	r0, r6
 801131a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801131e:	bf00      	nop
 8011320:	08013dc0 	.word	0x08013dc0
 8011324:	08013bb7 	.word	0x08013bb7
 8011328:	08013d06 	.word	0x08013d06

0801132c <__lshift>:
 801132c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011330:	460c      	mov	r4, r1
 8011332:	6849      	ldr	r1, [r1, #4]
 8011334:	6923      	ldr	r3, [r4, #16]
 8011336:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801133a:	68a3      	ldr	r3, [r4, #8]
 801133c:	4607      	mov	r7, r0
 801133e:	4691      	mov	r9, r2
 8011340:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011344:	f108 0601 	add.w	r6, r8, #1
 8011348:	42b3      	cmp	r3, r6
 801134a:	db0b      	blt.n	8011364 <__lshift+0x38>
 801134c:	4638      	mov	r0, r7
 801134e:	f7ff fd9d 	bl	8010e8c <_Balloc>
 8011352:	4605      	mov	r5, r0
 8011354:	b948      	cbnz	r0, 801136a <__lshift+0x3e>
 8011356:	4602      	mov	r2, r0
 8011358:	4b28      	ldr	r3, [pc, #160]	@ (80113fc <__lshift+0xd0>)
 801135a:	4829      	ldr	r0, [pc, #164]	@ (8011400 <__lshift+0xd4>)
 801135c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011360:	f7fb fee6 	bl	800d130 <__assert_func>
 8011364:	3101      	adds	r1, #1
 8011366:	005b      	lsls	r3, r3, #1
 8011368:	e7ee      	b.n	8011348 <__lshift+0x1c>
 801136a:	2300      	movs	r3, #0
 801136c:	f100 0114 	add.w	r1, r0, #20
 8011370:	f100 0210 	add.w	r2, r0, #16
 8011374:	4618      	mov	r0, r3
 8011376:	4553      	cmp	r3, sl
 8011378:	db33      	blt.n	80113e2 <__lshift+0xb6>
 801137a:	6920      	ldr	r0, [r4, #16]
 801137c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011380:	f104 0314 	add.w	r3, r4, #20
 8011384:	f019 091f 	ands.w	r9, r9, #31
 8011388:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801138c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011390:	d02b      	beq.n	80113ea <__lshift+0xbe>
 8011392:	f1c9 0e20 	rsb	lr, r9, #32
 8011396:	468a      	mov	sl, r1
 8011398:	2200      	movs	r2, #0
 801139a:	6818      	ldr	r0, [r3, #0]
 801139c:	fa00 f009 	lsl.w	r0, r0, r9
 80113a0:	4310      	orrs	r0, r2
 80113a2:	f84a 0b04 	str.w	r0, [sl], #4
 80113a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80113aa:	459c      	cmp	ip, r3
 80113ac:	fa22 f20e 	lsr.w	r2, r2, lr
 80113b0:	d8f3      	bhi.n	801139a <__lshift+0x6e>
 80113b2:	ebac 0304 	sub.w	r3, ip, r4
 80113b6:	3b15      	subs	r3, #21
 80113b8:	f023 0303 	bic.w	r3, r3, #3
 80113bc:	3304      	adds	r3, #4
 80113be:	f104 0015 	add.w	r0, r4, #21
 80113c2:	4560      	cmp	r0, ip
 80113c4:	bf88      	it	hi
 80113c6:	2304      	movhi	r3, #4
 80113c8:	50ca      	str	r2, [r1, r3]
 80113ca:	b10a      	cbz	r2, 80113d0 <__lshift+0xa4>
 80113cc:	f108 0602 	add.w	r6, r8, #2
 80113d0:	3e01      	subs	r6, #1
 80113d2:	4638      	mov	r0, r7
 80113d4:	612e      	str	r6, [r5, #16]
 80113d6:	4621      	mov	r1, r4
 80113d8:	f7ff fd98 	bl	8010f0c <_Bfree>
 80113dc:	4628      	mov	r0, r5
 80113de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80113e2:	f842 0f04 	str.w	r0, [r2, #4]!
 80113e6:	3301      	adds	r3, #1
 80113e8:	e7c5      	b.n	8011376 <__lshift+0x4a>
 80113ea:	3904      	subs	r1, #4
 80113ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80113f0:	f841 2f04 	str.w	r2, [r1, #4]!
 80113f4:	459c      	cmp	ip, r3
 80113f6:	d8f9      	bhi.n	80113ec <__lshift+0xc0>
 80113f8:	e7ea      	b.n	80113d0 <__lshift+0xa4>
 80113fa:	bf00      	nop
 80113fc:	08013c95 	.word	0x08013c95
 8011400:	08013d06 	.word	0x08013d06

08011404 <__mcmp>:
 8011404:	690a      	ldr	r2, [r1, #16]
 8011406:	4603      	mov	r3, r0
 8011408:	6900      	ldr	r0, [r0, #16]
 801140a:	1a80      	subs	r0, r0, r2
 801140c:	b530      	push	{r4, r5, lr}
 801140e:	d10e      	bne.n	801142e <__mcmp+0x2a>
 8011410:	3314      	adds	r3, #20
 8011412:	3114      	adds	r1, #20
 8011414:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011418:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801141c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011420:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011424:	4295      	cmp	r5, r2
 8011426:	d003      	beq.n	8011430 <__mcmp+0x2c>
 8011428:	d205      	bcs.n	8011436 <__mcmp+0x32>
 801142a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801142e:	bd30      	pop	{r4, r5, pc}
 8011430:	42a3      	cmp	r3, r4
 8011432:	d3f3      	bcc.n	801141c <__mcmp+0x18>
 8011434:	e7fb      	b.n	801142e <__mcmp+0x2a>
 8011436:	2001      	movs	r0, #1
 8011438:	e7f9      	b.n	801142e <__mcmp+0x2a>
	...

0801143c <__mdiff>:
 801143c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011440:	4689      	mov	r9, r1
 8011442:	4606      	mov	r6, r0
 8011444:	4611      	mov	r1, r2
 8011446:	4648      	mov	r0, r9
 8011448:	4614      	mov	r4, r2
 801144a:	f7ff ffdb 	bl	8011404 <__mcmp>
 801144e:	1e05      	subs	r5, r0, #0
 8011450:	d112      	bne.n	8011478 <__mdiff+0x3c>
 8011452:	4629      	mov	r1, r5
 8011454:	4630      	mov	r0, r6
 8011456:	f7ff fd19 	bl	8010e8c <_Balloc>
 801145a:	4602      	mov	r2, r0
 801145c:	b928      	cbnz	r0, 801146a <__mdiff+0x2e>
 801145e:	4b3f      	ldr	r3, [pc, #252]	@ (801155c <__mdiff+0x120>)
 8011460:	f240 2137 	movw	r1, #567	@ 0x237
 8011464:	483e      	ldr	r0, [pc, #248]	@ (8011560 <__mdiff+0x124>)
 8011466:	f7fb fe63 	bl	800d130 <__assert_func>
 801146a:	2301      	movs	r3, #1
 801146c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011470:	4610      	mov	r0, r2
 8011472:	b003      	add	sp, #12
 8011474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011478:	bfbc      	itt	lt
 801147a:	464b      	movlt	r3, r9
 801147c:	46a1      	movlt	r9, r4
 801147e:	4630      	mov	r0, r6
 8011480:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011484:	bfba      	itte	lt
 8011486:	461c      	movlt	r4, r3
 8011488:	2501      	movlt	r5, #1
 801148a:	2500      	movge	r5, #0
 801148c:	f7ff fcfe 	bl	8010e8c <_Balloc>
 8011490:	4602      	mov	r2, r0
 8011492:	b918      	cbnz	r0, 801149c <__mdiff+0x60>
 8011494:	4b31      	ldr	r3, [pc, #196]	@ (801155c <__mdiff+0x120>)
 8011496:	f240 2145 	movw	r1, #581	@ 0x245
 801149a:	e7e3      	b.n	8011464 <__mdiff+0x28>
 801149c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80114a0:	6926      	ldr	r6, [r4, #16]
 80114a2:	60c5      	str	r5, [r0, #12]
 80114a4:	f109 0310 	add.w	r3, r9, #16
 80114a8:	f109 0514 	add.w	r5, r9, #20
 80114ac:	f104 0e14 	add.w	lr, r4, #20
 80114b0:	f100 0b14 	add.w	fp, r0, #20
 80114b4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80114b8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80114bc:	9301      	str	r3, [sp, #4]
 80114be:	46d9      	mov	r9, fp
 80114c0:	f04f 0c00 	mov.w	ip, #0
 80114c4:	9b01      	ldr	r3, [sp, #4]
 80114c6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80114ca:	f853 af04 	ldr.w	sl, [r3, #4]!
 80114ce:	9301      	str	r3, [sp, #4]
 80114d0:	fa1f f38a 	uxth.w	r3, sl
 80114d4:	4619      	mov	r1, r3
 80114d6:	b283      	uxth	r3, r0
 80114d8:	1acb      	subs	r3, r1, r3
 80114da:	0c00      	lsrs	r0, r0, #16
 80114dc:	4463      	add	r3, ip
 80114de:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80114e2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80114e6:	b29b      	uxth	r3, r3
 80114e8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80114ec:	4576      	cmp	r6, lr
 80114ee:	f849 3b04 	str.w	r3, [r9], #4
 80114f2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80114f6:	d8e5      	bhi.n	80114c4 <__mdiff+0x88>
 80114f8:	1b33      	subs	r3, r6, r4
 80114fa:	3b15      	subs	r3, #21
 80114fc:	f023 0303 	bic.w	r3, r3, #3
 8011500:	3415      	adds	r4, #21
 8011502:	3304      	adds	r3, #4
 8011504:	42a6      	cmp	r6, r4
 8011506:	bf38      	it	cc
 8011508:	2304      	movcc	r3, #4
 801150a:	441d      	add	r5, r3
 801150c:	445b      	add	r3, fp
 801150e:	461e      	mov	r6, r3
 8011510:	462c      	mov	r4, r5
 8011512:	4544      	cmp	r4, r8
 8011514:	d30e      	bcc.n	8011534 <__mdiff+0xf8>
 8011516:	f108 0103 	add.w	r1, r8, #3
 801151a:	1b49      	subs	r1, r1, r5
 801151c:	f021 0103 	bic.w	r1, r1, #3
 8011520:	3d03      	subs	r5, #3
 8011522:	45a8      	cmp	r8, r5
 8011524:	bf38      	it	cc
 8011526:	2100      	movcc	r1, #0
 8011528:	440b      	add	r3, r1
 801152a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801152e:	b191      	cbz	r1, 8011556 <__mdiff+0x11a>
 8011530:	6117      	str	r7, [r2, #16]
 8011532:	e79d      	b.n	8011470 <__mdiff+0x34>
 8011534:	f854 1b04 	ldr.w	r1, [r4], #4
 8011538:	46e6      	mov	lr, ip
 801153a:	0c08      	lsrs	r0, r1, #16
 801153c:	fa1c fc81 	uxtah	ip, ip, r1
 8011540:	4471      	add	r1, lr
 8011542:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011546:	b289      	uxth	r1, r1
 8011548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801154c:	f846 1b04 	str.w	r1, [r6], #4
 8011550:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011554:	e7dd      	b.n	8011512 <__mdiff+0xd6>
 8011556:	3f01      	subs	r7, #1
 8011558:	e7e7      	b.n	801152a <__mdiff+0xee>
 801155a:	bf00      	nop
 801155c:	08013c95 	.word	0x08013c95
 8011560:	08013d06 	.word	0x08013d06

08011564 <__ulp>:
 8011564:	b082      	sub	sp, #8
 8011566:	ed8d 0b00 	vstr	d0, [sp]
 801156a:	9a01      	ldr	r2, [sp, #4]
 801156c:	4b0f      	ldr	r3, [pc, #60]	@ (80115ac <__ulp+0x48>)
 801156e:	4013      	ands	r3, r2
 8011570:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8011574:	2b00      	cmp	r3, #0
 8011576:	dc08      	bgt.n	801158a <__ulp+0x26>
 8011578:	425b      	negs	r3, r3
 801157a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801157e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011582:	da04      	bge.n	801158e <__ulp+0x2a>
 8011584:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8011588:	4113      	asrs	r3, r2
 801158a:	2200      	movs	r2, #0
 801158c:	e008      	b.n	80115a0 <__ulp+0x3c>
 801158e:	f1a2 0314 	sub.w	r3, r2, #20
 8011592:	2b1e      	cmp	r3, #30
 8011594:	bfda      	itte	le
 8011596:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801159a:	40da      	lsrle	r2, r3
 801159c:	2201      	movgt	r2, #1
 801159e:	2300      	movs	r3, #0
 80115a0:	4619      	mov	r1, r3
 80115a2:	4610      	mov	r0, r2
 80115a4:	ec41 0b10 	vmov	d0, r0, r1
 80115a8:	b002      	add	sp, #8
 80115aa:	4770      	bx	lr
 80115ac:	7ff00000 	.word	0x7ff00000

080115b0 <__b2d>:
 80115b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115b4:	6906      	ldr	r6, [r0, #16]
 80115b6:	f100 0814 	add.w	r8, r0, #20
 80115ba:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80115be:	1f37      	subs	r7, r6, #4
 80115c0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80115c4:	4610      	mov	r0, r2
 80115c6:	f7ff fd53 	bl	8011070 <__hi0bits>
 80115ca:	f1c0 0320 	rsb	r3, r0, #32
 80115ce:	280a      	cmp	r0, #10
 80115d0:	600b      	str	r3, [r1, #0]
 80115d2:	491b      	ldr	r1, [pc, #108]	@ (8011640 <__b2d+0x90>)
 80115d4:	dc15      	bgt.n	8011602 <__b2d+0x52>
 80115d6:	f1c0 0c0b 	rsb	ip, r0, #11
 80115da:	fa22 f30c 	lsr.w	r3, r2, ip
 80115de:	45b8      	cmp	r8, r7
 80115e0:	ea43 0501 	orr.w	r5, r3, r1
 80115e4:	bf34      	ite	cc
 80115e6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80115ea:	2300      	movcs	r3, #0
 80115ec:	3015      	adds	r0, #21
 80115ee:	fa02 f000 	lsl.w	r0, r2, r0
 80115f2:	fa23 f30c 	lsr.w	r3, r3, ip
 80115f6:	4303      	orrs	r3, r0
 80115f8:	461c      	mov	r4, r3
 80115fa:	ec45 4b10 	vmov	d0, r4, r5
 80115fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011602:	45b8      	cmp	r8, r7
 8011604:	bf3a      	itte	cc
 8011606:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801160a:	f1a6 0708 	subcc.w	r7, r6, #8
 801160e:	2300      	movcs	r3, #0
 8011610:	380b      	subs	r0, #11
 8011612:	d012      	beq.n	801163a <__b2d+0x8a>
 8011614:	f1c0 0120 	rsb	r1, r0, #32
 8011618:	fa23 f401 	lsr.w	r4, r3, r1
 801161c:	4082      	lsls	r2, r0
 801161e:	4322      	orrs	r2, r4
 8011620:	4547      	cmp	r7, r8
 8011622:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8011626:	bf8c      	ite	hi
 8011628:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801162c:	2200      	movls	r2, #0
 801162e:	4083      	lsls	r3, r0
 8011630:	40ca      	lsrs	r2, r1
 8011632:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8011636:	4313      	orrs	r3, r2
 8011638:	e7de      	b.n	80115f8 <__b2d+0x48>
 801163a:	ea42 0501 	orr.w	r5, r2, r1
 801163e:	e7db      	b.n	80115f8 <__b2d+0x48>
 8011640:	3ff00000 	.word	0x3ff00000

08011644 <__d2b>:
 8011644:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011648:	460f      	mov	r7, r1
 801164a:	2101      	movs	r1, #1
 801164c:	ec59 8b10 	vmov	r8, r9, d0
 8011650:	4616      	mov	r6, r2
 8011652:	f7ff fc1b 	bl	8010e8c <_Balloc>
 8011656:	4604      	mov	r4, r0
 8011658:	b930      	cbnz	r0, 8011668 <__d2b+0x24>
 801165a:	4602      	mov	r2, r0
 801165c:	4b23      	ldr	r3, [pc, #140]	@ (80116ec <__d2b+0xa8>)
 801165e:	4824      	ldr	r0, [pc, #144]	@ (80116f0 <__d2b+0xac>)
 8011660:	f240 310f 	movw	r1, #783	@ 0x30f
 8011664:	f7fb fd64 	bl	800d130 <__assert_func>
 8011668:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801166c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011670:	b10d      	cbz	r5, 8011676 <__d2b+0x32>
 8011672:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011676:	9301      	str	r3, [sp, #4]
 8011678:	f1b8 0300 	subs.w	r3, r8, #0
 801167c:	d023      	beq.n	80116c6 <__d2b+0x82>
 801167e:	4668      	mov	r0, sp
 8011680:	9300      	str	r3, [sp, #0]
 8011682:	f7ff fd14 	bl	80110ae <__lo0bits>
 8011686:	e9dd 1200 	ldrd	r1, r2, [sp]
 801168a:	b1d0      	cbz	r0, 80116c2 <__d2b+0x7e>
 801168c:	f1c0 0320 	rsb	r3, r0, #32
 8011690:	fa02 f303 	lsl.w	r3, r2, r3
 8011694:	430b      	orrs	r3, r1
 8011696:	40c2      	lsrs	r2, r0
 8011698:	6163      	str	r3, [r4, #20]
 801169a:	9201      	str	r2, [sp, #4]
 801169c:	9b01      	ldr	r3, [sp, #4]
 801169e:	61a3      	str	r3, [r4, #24]
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	bf0c      	ite	eq
 80116a4:	2201      	moveq	r2, #1
 80116a6:	2202      	movne	r2, #2
 80116a8:	6122      	str	r2, [r4, #16]
 80116aa:	b1a5      	cbz	r5, 80116d6 <__d2b+0x92>
 80116ac:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80116b0:	4405      	add	r5, r0
 80116b2:	603d      	str	r5, [r7, #0]
 80116b4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80116b8:	6030      	str	r0, [r6, #0]
 80116ba:	4620      	mov	r0, r4
 80116bc:	b003      	add	sp, #12
 80116be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80116c2:	6161      	str	r1, [r4, #20]
 80116c4:	e7ea      	b.n	801169c <__d2b+0x58>
 80116c6:	a801      	add	r0, sp, #4
 80116c8:	f7ff fcf1 	bl	80110ae <__lo0bits>
 80116cc:	9b01      	ldr	r3, [sp, #4]
 80116ce:	6163      	str	r3, [r4, #20]
 80116d0:	3020      	adds	r0, #32
 80116d2:	2201      	movs	r2, #1
 80116d4:	e7e8      	b.n	80116a8 <__d2b+0x64>
 80116d6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80116da:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80116de:	6038      	str	r0, [r7, #0]
 80116e0:	6918      	ldr	r0, [r3, #16]
 80116e2:	f7ff fcc5 	bl	8011070 <__hi0bits>
 80116e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80116ea:	e7e5      	b.n	80116b8 <__d2b+0x74>
 80116ec:	08013c95 	.word	0x08013c95
 80116f0:	08013d06 	.word	0x08013d06

080116f4 <__ratio>:
 80116f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116f8:	b085      	sub	sp, #20
 80116fa:	e9cd 1000 	strd	r1, r0, [sp]
 80116fe:	a902      	add	r1, sp, #8
 8011700:	f7ff ff56 	bl	80115b0 <__b2d>
 8011704:	9800      	ldr	r0, [sp, #0]
 8011706:	a903      	add	r1, sp, #12
 8011708:	ec55 4b10 	vmov	r4, r5, d0
 801170c:	f7ff ff50 	bl	80115b0 <__b2d>
 8011710:	9b01      	ldr	r3, [sp, #4]
 8011712:	6919      	ldr	r1, [r3, #16]
 8011714:	9b00      	ldr	r3, [sp, #0]
 8011716:	691b      	ldr	r3, [r3, #16]
 8011718:	1ac9      	subs	r1, r1, r3
 801171a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801171e:	1a9b      	subs	r3, r3, r2
 8011720:	ec5b ab10 	vmov	sl, fp, d0
 8011724:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8011728:	2b00      	cmp	r3, #0
 801172a:	bfce      	itee	gt
 801172c:	462a      	movgt	r2, r5
 801172e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011732:	465a      	movle	r2, fp
 8011734:	462f      	mov	r7, r5
 8011736:	46d9      	mov	r9, fp
 8011738:	bfcc      	ite	gt
 801173a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801173e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8011742:	464b      	mov	r3, r9
 8011744:	4652      	mov	r2, sl
 8011746:	4620      	mov	r0, r4
 8011748:	4639      	mov	r1, r7
 801174a:	f7ef f8af 	bl	80008ac <__aeabi_ddiv>
 801174e:	ec41 0b10 	vmov	d0, r0, r1
 8011752:	b005      	add	sp, #20
 8011754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011758 <__copybits>:
 8011758:	3901      	subs	r1, #1
 801175a:	b570      	push	{r4, r5, r6, lr}
 801175c:	1149      	asrs	r1, r1, #5
 801175e:	6914      	ldr	r4, [r2, #16]
 8011760:	3101      	adds	r1, #1
 8011762:	f102 0314 	add.w	r3, r2, #20
 8011766:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801176a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801176e:	1f05      	subs	r5, r0, #4
 8011770:	42a3      	cmp	r3, r4
 8011772:	d30c      	bcc.n	801178e <__copybits+0x36>
 8011774:	1aa3      	subs	r3, r4, r2
 8011776:	3b11      	subs	r3, #17
 8011778:	f023 0303 	bic.w	r3, r3, #3
 801177c:	3211      	adds	r2, #17
 801177e:	42a2      	cmp	r2, r4
 8011780:	bf88      	it	hi
 8011782:	2300      	movhi	r3, #0
 8011784:	4418      	add	r0, r3
 8011786:	2300      	movs	r3, #0
 8011788:	4288      	cmp	r0, r1
 801178a:	d305      	bcc.n	8011798 <__copybits+0x40>
 801178c:	bd70      	pop	{r4, r5, r6, pc}
 801178e:	f853 6b04 	ldr.w	r6, [r3], #4
 8011792:	f845 6f04 	str.w	r6, [r5, #4]!
 8011796:	e7eb      	b.n	8011770 <__copybits+0x18>
 8011798:	f840 3b04 	str.w	r3, [r0], #4
 801179c:	e7f4      	b.n	8011788 <__copybits+0x30>

0801179e <__any_on>:
 801179e:	f100 0214 	add.w	r2, r0, #20
 80117a2:	6900      	ldr	r0, [r0, #16]
 80117a4:	114b      	asrs	r3, r1, #5
 80117a6:	4298      	cmp	r0, r3
 80117a8:	b510      	push	{r4, lr}
 80117aa:	db11      	blt.n	80117d0 <__any_on+0x32>
 80117ac:	dd0a      	ble.n	80117c4 <__any_on+0x26>
 80117ae:	f011 011f 	ands.w	r1, r1, #31
 80117b2:	d007      	beq.n	80117c4 <__any_on+0x26>
 80117b4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80117b8:	fa24 f001 	lsr.w	r0, r4, r1
 80117bc:	fa00 f101 	lsl.w	r1, r0, r1
 80117c0:	428c      	cmp	r4, r1
 80117c2:	d10b      	bne.n	80117dc <__any_on+0x3e>
 80117c4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80117c8:	4293      	cmp	r3, r2
 80117ca:	d803      	bhi.n	80117d4 <__any_on+0x36>
 80117cc:	2000      	movs	r0, #0
 80117ce:	bd10      	pop	{r4, pc}
 80117d0:	4603      	mov	r3, r0
 80117d2:	e7f7      	b.n	80117c4 <__any_on+0x26>
 80117d4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80117d8:	2900      	cmp	r1, #0
 80117da:	d0f5      	beq.n	80117c8 <__any_on+0x2a>
 80117dc:	2001      	movs	r0, #1
 80117de:	e7f6      	b.n	80117ce <__any_on+0x30>

080117e0 <_realloc_r>:
 80117e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117e4:	4607      	mov	r7, r0
 80117e6:	4614      	mov	r4, r2
 80117e8:	460d      	mov	r5, r1
 80117ea:	b921      	cbnz	r1, 80117f6 <_realloc_r+0x16>
 80117ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80117f0:	4611      	mov	r1, r2
 80117f2:	f7fb bd55 	b.w	800d2a0 <_malloc_r>
 80117f6:	b92a      	cbnz	r2, 8011804 <_realloc_r+0x24>
 80117f8:	f7fe ff7e 	bl	80106f8 <_free_r>
 80117fc:	4625      	mov	r5, r4
 80117fe:	4628      	mov	r0, r5
 8011800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011804:	f000 fc96 	bl	8012134 <_malloc_usable_size_r>
 8011808:	4284      	cmp	r4, r0
 801180a:	4606      	mov	r6, r0
 801180c:	d802      	bhi.n	8011814 <_realloc_r+0x34>
 801180e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011812:	d8f4      	bhi.n	80117fe <_realloc_r+0x1e>
 8011814:	4621      	mov	r1, r4
 8011816:	4638      	mov	r0, r7
 8011818:	f7fb fd42 	bl	800d2a0 <_malloc_r>
 801181c:	4680      	mov	r8, r0
 801181e:	b908      	cbnz	r0, 8011824 <_realloc_r+0x44>
 8011820:	4645      	mov	r5, r8
 8011822:	e7ec      	b.n	80117fe <_realloc_r+0x1e>
 8011824:	42b4      	cmp	r4, r6
 8011826:	4622      	mov	r2, r4
 8011828:	4629      	mov	r1, r5
 801182a:	bf28      	it	cs
 801182c:	4632      	movcs	r2, r6
 801182e:	f7fe f8e3 	bl	800f9f8 <memcpy>
 8011832:	4629      	mov	r1, r5
 8011834:	4638      	mov	r0, r7
 8011836:	f7fe ff5f 	bl	80106f8 <_free_r>
 801183a:	e7f1      	b.n	8011820 <_realloc_r+0x40>

0801183c <_strtol_l.isra.0>:
 801183c:	2b24      	cmp	r3, #36	@ 0x24
 801183e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011842:	4686      	mov	lr, r0
 8011844:	4690      	mov	r8, r2
 8011846:	d801      	bhi.n	801184c <_strtol_l.isra.0+0x10>
 8011848:	2b01      	cmp	r3, #1
 801184a:	d106      	bne.n	801185a <_strtol_l.isra.0+0x1e>
 801184c:	f7fe f8a6 	bl	800f99c <__errno>
 8011850:	2316      	movs	r3, #22
 8011852:	6003      	str	r3, [r0, #0]
 8011854:	2000      	movs	r0, #0
 8011856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801185a:	4834      	ldr	r0, [pc, #208]	@ (801192c <_strtol_l.isra.0+0xf0>)
 801185c:	460d      	mov	r5, r1
 801185e:	462a      	mov	r2, r5
 8011860:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011864:	5d06      	ldrb	r6, [r0, r4]
 8011866:	f016 0608 	ands.w	r6, r6, #8
 801186a:	d1f8      	bne.n	801185e <_strtol_l.isra.0+0x22>
 801186c:	2c2d      	cmp	r4, #45	@ 0x2d
 801186e:	d110      	bne.n	8011892 <_strtol_l.isra.0+0x56>
 8011870:	782c      	ldrb	r4, [r5, #0]
 8011872:	2601      	movs	r6, #1
 8011874:	1c95      	adds	r5, r2, #2
 8011876:	f033 0210 	bics.w	r2, r3, #16
 801187a:	d115      	bne.n	80118a8 <_strtol_l.isra.0+0x6c>
 801187c:	2c30      	cmp	r4, #48	@ 0x30
 801187e:	d10d      	bne.n	801189c <_strtol_l.isra.0+0x60>
 8011880:	782a      	ldrb	r2, [r5, #0]
 8011882:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8011886:	2a58      	cmp	r2, #88	@ 0x58
 8011888:	d108      	bne.n	801189c <_strtol_l.isra.0+0x60>
 801188a:	786c      	ldrb	r4, [r5, #1]
 801188c:	3502      	adds	r5, #2
 801188e:	2310      	movs	r3, #16
 8011890:	e00a      	b.n	80118a8 <_strtol_l.isra.0+0x6c>
 8011892:	2c2b      	cmp	r4, #43	@ 0x2b
 8011894:	bf04      	itt	eq
 8011896:	782c      	ldrbeq	r4, [r5, #0]
 8011898:	1c95      	addeq	r5, r2, #2
 801189a:	e7ec      	b.n	8011876 <_strtol_l.isra.0+0x3a>
 801189c:	2b00      	cmp	r3, #0
 801189e:	d1f6      	bne.n	801188e <_strtol_l.isra.0+0x52>
 80118a0:	2c30      	cmp	r4, #48	@ 0x30
 80118a2:	bf14      	ite	ne
 80118a4:	230a      	movne	r3, #10
 80118a6:	2308      	moveq	r3, #8
 80118a8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80118ac:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80118b0:	2200      	movs	r2, #0
 80118b2:	fbbc f9f3 	udiv	r9, ip, r3
 80118b6:	4610      	mov	r0, r2
 80118b8:	fb03 ca19 	mls	sl, r3, r9, ip
 80118bc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80118c0:	2f09      	cmp	r7, #9
 80118c2:	d80f      	bhi.n	80118e4 <_strtol_l.isra.0+0xa8>
 80118c4:	463c      	mov	r4, r7
 80118c6:	42a3      	cmp	r3, r4
 80118c8:	dd1b      	ble.n	8011902 <_strtol_l.isra.0+0xc6>
 80118ca:	1c57      	adds	r7, r2, #1
 80118cc:	d007      	beq.n	80118de <_strtol_l.isra.0+0xa2>
 80118ce:	4581      	cmp	r9, r0
 80118d0:	d314      	bcc.n	80118fc <_strtol_l.isra.0+0xc0>
 80118d2:	d101      	bne.n	80118d8 <_strtol_l.isra.0+0x9c>
 80118d4:	45a2      	cmp	sl, r4
 80118d6:	db11      	blt.n	80118fc <_strtol_l.isra.0+0xc0>
 80118d8:	fb00 4003 	mla	r0, r0, r3, r4
 80118dc:	2201      	movs	r2, #1
 80118de:	f815 4b01 	ldrb.w	r4, [r5], #1
 80118e2:	e7eb      	b.n	80118bc <_strtol_l.isra.0+0x80>
 80118e4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80118e8:	2f19      	cmp	r7, #25
 80118ea:	d801      	bhi.n	80118f0 <_strtol_l.isra.0+0xb4>
 80118ec:	3c37      	subs	r4, #55	@ 0x37
 80118ee:	e7ea      	b.n	80118c6 <_strtol_l.isra.0+0x8a>
 80118f0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80118f4:	2f19      	cmp	r7, #25
 80118f6:	d804      	bhi.n	8011902 <_strtol_l.isra.0+0xc6>
 80118f8:	3c57      	subs	r4, #87	@ 0x57
 80118fa:	e7e4      	b.n	80118c6 <_strtol_l.isra.0+0x8a>
 80118fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011900:	e7ed      	b.n	80118de <_strtol_l.isra.0+0xa2>
 8011902:	1c53      	adds	r3, r2, #1
 8011904:	d108      	bne.n	8011918 <_strtol_l.isra.0+0xdc>
 8011906:	2322      	movs	r3, #34	@ 0x22
 8011908:	f8ce 3000 	str.w	r3, [lr]
 801190c:	4660      	mov	r0, ip
 801190e:	f1b8 0f00 	cmp.w	r8, #0
 8011912:	d0a0      	beq.n	8011856 <_strtol_l.isra.0+0x1a>
 8011914:	1e69      	subs	r1, r5, #1
 8011916:	e006      	b.n	8011926 <_strtol_l.isra.0+0xea>
 8011918:	b106      	cbz	r6, 801191c <_strtol_l.isra.0+0xe0>
 801191a:	4240      	negs	r0, r0
 801191c:	f1b8 0f00 	cmp.w	r8, #0
 8011920:	d099      	beq.n	8011856 <_strtol_l.isra.0+0x1a>
 8011922:	2a00      	cmp	r2, #0
 8011924:	d1f6      	bne.n	8011914 <_strtol_l.isra.0+0xd8>
 8011926:	f8c8 1000 	str.w	r1, [r8]
 801192a:	e794      	b.n	8011856 <_strtol_l.isra.0+0x1a>
 801192c:	08013ec1 	.word	0x08013ec1

08011930 <_strtol_r>:
 8011930:	f7ff bf84 	b.w	801183c <_strtol_l.isra.0>

08011934 <__ascii_wctomb>:
 8011934:	4603      	mov	r3, r0
 8011936:	4608      	mov	r0, r1
 8011938:	b141      	cbz	r1, 801194c <__ascii_wctomb+0x18>
 801193a:	2aff      	cmp	r2, #255	@ 0xff
 801193c:	d904      	bls.n	8011948 <__ascii_wctomb+0x14>
 801193e:	228a      	movs	r2, #138	@ 0x8a
 8011940:	601a      	str	r2, [r3, #0]
 8011942:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011946:	4770      	bx	lr
 8011948:	700a      	strb	r2, [r1, #0]
 801194a:	2001      	movs	r0, #1
 801194c:	4770      	bx	lr

0801194e <__ssputs_r>:
 801194e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011952:	688e      	ldr	r6, [r1, #8]
 8011954:	461f      	mov	r7, r3
 8011956:	42be      	cmp	r6, r7
 8011958:	680b      	ldr	r3, [r1, #0]
 801195a:	4682      	mov	sl, r0
 801195c:	460c      	mov	r4, r1
 801195e:	4690      	mov	r8, r2
 8011960:	d82d      	bhi.n	80119be <__ssputs_r+0x70>
 8011962:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011966:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801196a:	d026      	beq.n	80119ba <__ssputs_r+0x6c>
 801196c:	6965      	ldr	r5, [r4, #20]
 801196e:	6909      	ldr	r1, [r1, #16]
 8011970:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011974:	eba3 0901 	sub.w	r9, r3, r1
 8011978:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801197c:	1c7b      	adds	r3, r7, #1
 801197e:	444b      	add	r3, r9
 8011980:	106d      	asrs	r5, r5, #1
 8011982:	429d      	cmp	r5, r3
 8011984:	bf38      	it	cc
 8011986:	461d      	movcc	r5, r3
 8011988:	0553      	lsls	r3, r2, #21
 801198a:	d527      	bpl.n	80119dc <__ssputs_r+0x8e>
 801198c:	4629      	mov	r1, r5
 801198e:	f7fb fc87 	bl	800d2a0 <_malloc_r>
 8011992:	4606      	mov	r6, r0
 8011994:	b360      	cbz	r0, 80119f0 <__ssputs_r+0xa2>
 8011996:	6921      	ldr	r1, [r4, #16]
 8011998:	464a      	mov	r2, r9
 801199a:	f7fe f82d 	bl	800f9f8 <memcpy>
 801199e:	89a3      	ldrh	r3, [r4, #12]
 80119a0:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80119a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80119a8:	81a3      	strh	r3, [r4, #12]
 80119aa:	6126      	str	r6, [r4, #16]
 80119ac:	6165      	str	r5, [r4, #20]
 80119ae:	444e      	add	r6, r9
 80119b0:	eba5 0509 	sub.w	r5, r5, r9
 80119b4:	6026      	str	r6, [r4, #0]
 80119b6:	60a5      	str	r5, [r4, #8]
 80119b8:	463e      	mov	r6, r7
 80119ba:	42be      	cmp	r6, r7
 80119bc:	d900      	bls.n	80119c0 <__ssputs_r+0x72>
 80119be:	463e      	mov	r6, r7
 80119c0:	6820      	ldr	r0, [r4, #0]
 80119c2:	4632      	mov	r2, r6
 80119c4:	4641      	mov	r1, r8
 80119c6:	f000 fb34 	bl	8012032 <memmove>
 80119ca:	68a3      	ldr	r3, [r4, #8]
 80119cc:	1b9b      	subs	r3, r3, r6
 80119ce:	60a3      	str	r3, [r4, #8]
 80119d0:	6823      	ldr	r3, [r4, #0]
 80119d2:	4433      	add	r3, r6
 80119d4:	6023      	str	r3, [r4, #0]
 80119d6:	2000      	movs	r0, #0
 80119d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119dc:	462a      	mov	r2, r5
 80119de:	f7ff feff 	bl	80117e0 <_realloc_r>
 80119e2:	4606      	mov	r6, r0
 80119e4:	2800      	cmp	r0, #0
 80119e6:	d1e0      	bne.n	80119aa <__ssputs_r+0x5c>
 80119e8:	6921      	ldr	r1, [r4, #16]
 80119ea:	4650      	mov	r0, sl
 80119ec:	f7fe fe84 	bl	80106f8 <_free_r>
 80119f0:	230c      	movs	r3, #12
 80119f2:	f8ca 3000 	str.w	r3, [sl]
 80119f6:	89a3      	ldrh	r3, [r4, #12]
 80119f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80119fc:	81a3      	strh	r3, [r4, #12]
 80119fe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011a02:	e7e9      	b.n	80119d8 <__ssputs_r+0x8a>

08011a04 <_svfiprintf_r>:
 8011a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a08:	4698      	mov	r8, r3
 8011a0a:	898b      	ldrh	r3, [r1, #12]
 8011a0c:	061b      	lsls	r3, r3, #24
 8011a0e:	b09d      	sub	sp, #116	@ 0x74
 8011a10:	4607      	mov	r7, r0
 8011a12:	460d      	mov	r5, r1
 8011a14:	4614      	mov	r4, r2
 8011a16:	d510      	bpl.n	8011a3a <_svfiprintf_r+0x36>
 8011a18:	690b      	ldr	r3, [r1, #16]
 8011a1a:	b973      	cbnz	r3, 8011a3a <_svfiprintf_r+0x36>
 8011a1c:	2140      	movs	r1, #64	@ 0x40
 8011a1e:	f7fb fc3f 	bl	800d2a0 <_malloc_r>
 8011a22:	6028      	str	r0, [r5, #0]
 8011a24:	6128      	str	r0, [r5, #16]
 8011a26:	b930      	cbnz	r0, 8011a36 <_svfiprintf_r+0x32>
 8011a28:	230c      	movs	r3, #12
 8011a2a:	603b      	str	r3, [r7, #0]
 8011a2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011a30:	b01d      	add	sp, #116	@ 0x74
 8011a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a36:	2340      	movs	r3, #64	@ 0x40
 8011a38:	616b      	str	r3, [r5, #20]
 8011a3a:	2300      	movs	r3, #0
 8011a3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8011a3e:	2320      	movs	r3, #32
 8011a40:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011a44:	f8cd 800c 	str.w	r8, [sp, #12]
 8011a48:	2330      	movs	r3, #48	@ 0x30
 8011a4a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011be8 <_svfiprintf_r+0x1e4>
 8011a4e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011a52:	f04f 0901 	mov.w	r9, #1
 8011a56:	4623      	mov	r3, r4
 8011a58:	469a      	mov	sl, r3
 8011a5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011a5e:	b10a      	cbz	r2, 8011a64 <_svfiprintf_r+0x60>
 8011a60:	2a25      	cmp	r2, #37	@ 0x25
 8011a62:	d1f9      	bne.n	8011a58 <_svfiprintf_r+0x54>
 8011a64:	ebba 0b04 	subs.w	fp, sl, r4
 8011a68:	d00b      	beq.n	8011a82 <_svfiprintf_r+0x7e>
 8011a6a:	465b      	mov	r3, fp
 8011a6c:	4622      	mov	r2, r4
 8011a6e:	4629      	mov	r1, r5
 8011a70:	4638      	mov	r0, r7
 8011a72:	f7ff ff6c 	bl	801194e <__ssputs_r>
 8011a76:	3001      	adds	r0, #1
 8011a78:	f000 80a7 	beq.w	8011bca <_svfiprintf_r+0x1c6>
 8011a7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011a7e:	445a      	add	r2, fp
 8011a80:	9209      	str	r2, [sp, #36]	@ 0x24
 8011a82:	f89a 3000 	ldrb.w	r3, [sl]
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	f000 809f 	beq.w	8011bca <_svfiprintf_r+0x1c6>
 8011a8c:	2300      	movs	r3, #0
 8011a8e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011a92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011a96:	f10a 0a01 	add.w	sl, sl, #1
 8011a9a:	9304      	str	r3, [sp, #16]
 8011a9c:	9307      	str	r3, [sp, #28]
 8011a9e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011aa2:	931a      	str	r3, [sp, #104]	@ 0x68
 8011aa4:	4654      	mov	r4, sl
 8011aa6:	2205      	movs	r2, #5
 8011aa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011aac:	484e      	ldr	r0, [pc, #312]	@ (8011be8 <_svfiprintf_r+0x1e4>)
 8011aae:	f7ee fbbf 	bl	8000230 <memchr>
 8011ab2:	9a04      	ldr	r2, [sp, #16]
 8011ab4:	b9d8      	cbnz	r0, 8011aee <_svfiprintf_r+0xea>
 8011ab6:	06d0      	lsls	r0, r2, #27
 8011ab8:	bf44      	itt	mi
 8011aba:	2320      	movmi	r3, #32
 8011abc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011ac0:	0711      	lsls	r1, r2, #28
 8011ac2:	bf44      	itt	mi
 8011ac4:	232b      	movmi	r3, #43	@ 0x2b
 8011ac6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011aca:	f89a 3000 	ldrb.w	r3, [sl]
 8011ace:	2b2a      	cmp	r3, #42	@ 0x2a
 8011ad0:	d015      	beq.n	8011afe <_svfiprintf_r+0xfa>
 8011ad2:	9a07      	ldr	r2, [sp, #28]
 8011ad4:	4654      	mov	r4, sl
 8011ad6:	2000      	movs	r0, #0
 8011ad8:	f04f 0c0a 	mov.w	ip, #10
 8011adc:	4621      	mov	r1, r4
 8011ade:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011ae2:	3b30      	subs	r3, #48	@ 0x30
 8011ae4:	2b09      	cmp	r3, #9
 8011ae6:	d94b      	bls.n	8011b80 <_svfiprintf_r+0x17c>
 8011ae8:	b1b0      	cbz	r0, 8011b18 <_svfiprintf_r+0x114>
 8011aea:	9207      	str	r2, [sp, #28]
 8011aec:	e014      	b.n	8011b18 <_svfiprintf_r+0x114>
 8011aee:	eba0 0308 	sub.w	r3, r0, r8
 8011af2:	fa09 f303 	lsl.w	r3, r9, r3
 8011af6:	4313      	orrs	r3, r2
 8011af8:	9304      	str	r3, [sp, #16]
 8011afa:	46a2      	mov	sl, r4
 8011afc:	e7d2      	b.n	8011aa4 <_svfiprintf_r+0xa0>
 8011afe:	9b03      	ldr	r3, [sp, #12]
 8011b00:	1d19      	adds	r1, r3, #4
 8011b02:	681b      	ldr	r3, [r3, #0]
 8011b04:	9103      	str	r1, [sp, #12]
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	bfbb      	ittet	lt
 8011b0a:	425b      	neglt	r3, r3
 8011b0c:	f042 0202 	orrlt.w	r2, r2, #2
 8011b10:	9307      	strge	r3, [sp, #28]
 8011b12:	9307      	strlt	r3, [sp, #28]
 8011b14:	bfb8      	it	lt
 8011b16:	9204      	strlt	r2, [sp, #16]
 8011b18:	7823      	ldrb	r3, [r4, #0]
 8011b1a:	2b2e      	cmp	r3, #46	@ 0x2e
 8011b1c:	d10a      	bne.n	8011b34 <_svfiprintf_r+0x130>
 8011b1e:	7863      	ldrb	r3, [r4, #1]
 8011b20:	2b2a      	cmp	r3, #42	@ 0x2a
 8011b22:	d132      	bne.n	8011b8a <_svfiprintf_r+0x186>
 8011b24:	9b03      	ldr	r3, [sp, #12]
 8011b26:	1d1a      	adds	r2, r3, #4
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	9203      	str	r2, [sp, #12]
 8011b2c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011b30:	3402      	adds	r4, #2
 8011b32:	9305      	str	r3, [sp, #20]
 8011b34:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011bf8 <_svfiprintf_r+0x1f4>
 8011b38:	7821      	ldrb	r1, [r4, #0]
 8011b3a:	2203      	movs	r2, #3
 8011b3c:	4650      	mov	r0, sl
 8011b3e:	f7ee fb77 	bl	8000230 <memchr>
 8011b42:	b138      	cbz	r0, 8011b54 <_svfiprintf_r+0x150>
 8011b44:	9b04      	ldr	r3, [sp, #16]
 8011b46:	eba0 000a 	sub.w	r0, r0, sl
 8011b4a:	2240      	movs	r2, #64	@ 0x40
 8011b4c:	4082      	lsls	r2, r0
 8011b4e:	4313      	orrs	r3, r2
 8011b50:	3401      	adds	r4, #1
 8011b52:	9304      	str	r3, [sp, #16]
 8011b54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b58:	4824      	ldr	r0, [pc, #144]	@ (8011bec <_svfiprintf_r+0x1e8>)
 8011b5a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011b5e:	2206      	movs	r2, #6
 8011b60:	f7ee fb66 	bl	8000230 <memchr>
 8011b64:	2800      	cmp	r0, #0
 8011b66:	d036      	beq.n	8011bd6 <_svfiprintf_r+0x1d2>
 8011b68:	4b21      	ldr	r3, [pc, #132]	@ (8011bf0 <_svfiprintf_r+0x1ec>)
 8011b6a:	bb1b      	cbnz	r3, 8011bb4 <_svfiprintf_r+0x1b0>
 8011b6c:	9b03      	ldr	r3, [sp, #12]
 8011b6e:	3307      	adds	r3, #7
 8011b70:	f023 0307 	bic.w	r3, r3, #7
 8011b74:	3308      	adds	r3, #8
 8011b76:	9303      	str	r3, [sp, #12]
 8011b78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011b7a:	4433      	add	r3, r6
 8011b7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8011b7e:	e76a      	b.n	8011a56 <_svfiprintf_r+0x52>
 8011b80:	fb0c 3202 	mla	r2, ip, r2, r3
 8011b84:	460c      	mov	r4, r1
 8011b86:	2001      	movs	r0, #1
 8011b88:	e7a8      	b.n	8011adc <_svfiprintf_r+0xd8>
 8011b8a:	2300      	movs	r3, #0
 8011b8c:	3401      	adds	r4, #1
 8011b8e:	9305      	str	r3, [sp, #20]
 8011b90:	4619      	mov	r1, r3
 8011b92:	f04f 0c0a 	mov.w	ip, #10
 8011b96:	4620      	mov	r0, r4
 8011b98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011b9c:	3a30      	subs	r2, #48	@ 0x30
 8011b9e:	2a09      	cmp	r2, #9
 8011ba0:	d903      	bls.n	8011baa <_svfiprintf_r+0x1a6>
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d0c6      	beq.n	8011b34 <_svfiprintf_r+0x130>
 8011ba6:	9105      	str	r1, [sp, #20]
 8011ba8:	e7c4      	b.n	8011b34 <_svfiprintf_r+0x130>
 8011baa:	fb0c 2101 	mla	r1, ip, r1, r2
 8011bae:	4604      	mov	r4, r0
 8011bb0:	2301      	movs	r3, #1
 8011bb2:	e7f0      	b.n	8011b96 <_svfiprintf_r+0x192>
 8011bb4:	ab03      	add	r3, sp, #12
 8011bb6:	9300      	str	r3, [sp, #0]
 8011bb8:	462a      	mov	r2, r5
 8011bba:	4b0e      	ldr	r3, [pc, #56]	@ (8011bf4 <_svfiprintf_r+0x1f0>)
 8011bbc:	a904      	add	r1, sp, #16
 8011bbe:	4638      	mov	r0, r7
 8011bc0:	f7fc fb4e 	bl	800e260 <_printf_float>
 8011bc4:	1c42      	adds	r2, r0, #1
 8011bc6:	4606      	mov	r6, r0
 8011bc8:	d1d6      	bne.n	8011b78 <_svfiprintf_r+0x174>
 8011bca:	89ab      	ldrh	r3, [r5, #12]
 8011bcc:	065b      	lsls	r3, r3, #25
 8011bce:	f53f af2d 	bmi.w	8011a2c <_svfiprintf_r+0x28>
 8011bd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011bd4:	e72c      	b.n	8011a30 <_svfiprintf_r+0x2c>
 8011bd6:	ab03      	add	r3, sp, #12
 8011bd8:	9300      	str	r3, [sp, #0]
 8011bda:	462a      	mov	r2, r5
 8011bdc:	4b05      	ldr	r3, [pc, #20]	@ (8011bf4 <_svfiprintf_r+0x1f0>)
 8011bde:	a904      	add	r1, sp, #16
 8011be0:	4638      	mov	r0, r7
 8011be2:	f7fc fdd5 	bl	800e790 <_printf_i>
 8011be6:	e7ed      	b.n	8011bc4 <_svfiprintf_r+0x1c0>
 8011be8:	08013d5f 	.word	0x08013d5f
 8011bec:	08013d69 	.word	0x08013d69
 8011bf0:	0800e261 	.word	0x0800e261
 8011bf4:	0801194f 	.word	0x0801194f
 8011bf8:	08013d65 	.word	0x08013d65

08011bfc <__sfputc_r>:
 8011bfc:	6893      	ldr	r3, [r2, #8]
 8011bfe:	3b01      	subs	r3, #1
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	b410      	push	{r4}
 8011c04:	6093      	str	r3, [r2, #8]
 8011c06:	da08      	bge.n	8011c1a <__sfputc_r+0x1e>
 8011c08:	6994      	ldr	r4, [r2, #24]
 8011c0a:	42a3      	cmp	r3, r4
 8011c0c:	db01      	blt.n	8011c12 <__sfputc_r+0x16>
 8011c0e:	290a      	cmp	r1, #10
 8011c10:	d103      	bne.n	8011c1a <__sfputc_r+0x1e>
 8011c12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011c16:	f7fd bc10 	b.w	800f43a <__swbuf_r>
 8011c1a:	6813      	ldr	r3, [r2, #0]
 8011c1c:	1c58      	adds	r0, r3, #1
 8011c1e:	6010      	str	r0, [r2, #0]
 8011c20:	7019      	strb	r1, [r3, #0]
 8011c22:	4608      	mov	r0, r1
 8011c24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011c28:	4770      	bx	lr

08011c2a <__sfputs_r>:
 8011c2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c2c:	4606      	mov	r6, r0
 8011c2e:	460f      	mov	r7, r1
 8011c30:	4614      	mov	r4, r2
 8011c32:	18d5      	adds	r5, r2, r3
 8011c34:	42ac      	cmp	r4, r5
 8011c36:	d101      	bne.n	8011c3c <__sfputs_r+0x12>
 8011c38:	2000      	movs	r0, #0
 8011c3a:	e007      	b.n	8011c4c <__sfputs_r+0x22>
 8011c3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c40:	463a      	mov	r2, r7
 8011c42:	4630      	mov	r0, r6
 8011c44:	f7ff ffda 	bl	8011bfc <__sfputc_r>
 8011c48:	1c43      	adds	r3, r0, #1
 8011c4a:	d1f3      	bne.n	8011c34 <__sfputs_r+0xa>
 8011c4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011c50 <_vfiprintf_r>:
 8011c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c54:	460d      	mov	r5, r1
 8011c56:	b09d      	sub	sp, #116	@ 0x74
 8011c58:	4614      	mov	r4, r2
 8011c5a:	4698      	mov	r8, r3
 8011c5c:	4606      	mov	r6, r0
 8011c5e:	b118      	cbz	r0, 8011c68 <_vfiprintf_r+0x18>
 8011c60:	6a03      	ldr	r3, [r0, #32]
 8011c62:	b90b      	cbnz	r3, 8011c68 <_vfiprintf_r+0x18>
 8011c64:	f7fd fabc 	bl	800f1e0 <__sinit>
 8011c68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011c6a:	07d9      	lsls	r1, r3, #31
 8011c6c:	d405      	bmi.n	8011c7a <_vfiprintf_r+0x2a>
 8011c6e:	89ab      	ldrh	r3, [r5, #12]
 8011c70:	059a      	lsls	r2, r3, #22
 8011c72:	d402      	bmi.n	8011c7a <_vfiprintf_r+0x2a>
 8011c74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011c76:	f7fd febd 	bl	800f9f4 <__retarget_lock_acquire_recursive>
 8011c7a:	89ab      	ldrh	r3, [r5, #12]
 8011c7c:	071b      	lsls	r3, r3, #28
 8011c7e:	d501      	bpl.n	8011c84 <_vfiprintf_r+0x34>
 8011c80:	692b      	ldr	r3, [r5, #16]
 8011c82:	b99b      	cbnz	r3, 8011cac <_vfiprintf_r+0x5c>
 8011c84:	4629      	mov	r1, r5
 8011c86:	4630      	mov	r0, r6
 8011c88:	f7fd fc16 	bl	800f4b8 <__swsetup_r>
 8011c8c:	b170      	cbz	r0, 8011cac <_vfiprintf_r+0x5c>
 8011c8e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011c90:	07dc      	lsls	r4, r3, #31
 8011c92:	d504      	bpl.n	8011c9e <_vfiprintf_r+0x4e>
 8011c94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011c98:	b01d      	add	sp, #116	@ 0x74
 8011c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c9e:	89ab      	ldrh	r3, [r5, #12]
 8011ca0:	0598      	lsls	r0, r3, #22
 8011ca2:	d4f7      	bmi.n	8011c94 <_vfiprintf_r+0x44>
 8011ca4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011ca6:	f7fd fea6 	bl	800f9f6 <__retarget_lock_release_recursive>
 8011caa:	e7f3      	b.n	8011c94 <_vfiprintf_r+0x44>
 8011cac:	2300      	movs	r3, #0
 8011cae:	9309      	str	r3, [sp, #36]	@ 0x24
 8011cb0:	2320      	movs	r3, #32
 8011cb2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011cb6:	f8cd 800c 	str.w	r8, [sp, #12]
 8011cba:	2330      	movs	r3, #48	@ 0x30
 8011cbc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011e6c <_vfiprintf_r+0x21c>
 8011cc0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011cc4:	f04f 0901 	mov.w	r9, #1
 8011cc8:	4623      	mov	r3, r4
 8011cca:	469a      	mov	sl, r3
 8011ccc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011cd0:	b10a      	cbz	r2, 8011cd6 <_vfiprintf_r+0x86>
 8011cd2:	2a25      	cmp	r2, #37	@ 0x25
 8011cd4:	d1f9      	bne.n	8011cca <_vfiprintf_r+0x7a>
 8011cd6:	ebba 0b04 	subs.w	fp, sl, r4
 8011cda:	d00b      	beq.n	8011cf4 <_vfiprintf_r+0xa4>
 8011cdc:	465b      	mov	r3, fp
 8011cde:	4622      	mov	r2, r4
 8011ce0:	4629      	mov	r1, r5
 8011ce2:	4630      	mov	r0, r6
 8011ce4:	f7ff ffa1 	bl	8011c2a <__sfputs_r>
 8011ce8:	3001      	adds	r0, #1
 8011cea:	f000 80a7 	beq.w	8011e3c <_vfiprintf_r+0x1ec>
 8011cee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011cf0:	445a      	add	r2, fp
 8011cf2:	9209      	str	r2, [sp, #36]	@ 0x24
 8011cf4:	f89a 3000 	ldrb.w	r3, [sl]
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	f000 809f 	beq.w	8011e3c <_vfiprintf_r+0x1ec>
 8011cfe:	2300      	movs	r3, #0
 8011d00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011d04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011d08:	f10a 0a01 	add.w	sl, sl, #1
 8011d0c:	9304      	str	r3, [sp, #16]
 8011d0e:	9307      	str	r3, [sp, #28]
 8011d10:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011d14:	931a      	str	r3, [sp, #104]	@ 0x68
 8011d16:	4654      	mov	r4, sl
 8011d18:	2205      	movs	r2, #5
 8011d1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d1e:	4853      	ldr	r0, [pc, #332]	@ (8011e6c <_vfiprintf_r+0x21c>)
 8011d20:	f7ee fa86 	bl	8000230 <memchr>
 8011d24:	9a04      	ldr	r2, [sp, #16]
 8011d26:	b9d8      	cbnz	r0, 8011d60 <_vfiprintf_r+0x110>
 8011d28:	06d1      	lsls	r1, r2, #27
 8011d2a:	bf44      	itt	mi
 8011d2c:	2320      	movmi	r3, #32
 8011d2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011d32:	0713      	lsls	r3, r2, #28
 8011d34:	bf44      	itt	mi
 8011d36:	232b      	movmi	r3, #43	@ 0x2b
 8011d38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011d3c:	f89a 3000 	ldrb.w	r3, [sl]
 8011d40:	2b2a      	cmp	r3, #42	@ 0x2a
 8011d42:	d015      	beq.n	8011d70 <_vfiprintf_r+0x120>
 8011d44:	9a07      	ldr	r2, [sp, #28]
 8011d46:	4654      	mov	r4, sl
 8011d48:	2000      	movs	r0, #0
 8011d4a:	f04f 0c0a 	mov.w	ip, #10
 8011d4e:	4621      	mov	r1, r4
 8011d50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011d54:	3b30      	subs	r3, #48	@ 0x30
 8011d56:	2b09      	cmp	r3, #9
 8011d58:	d94b      	bls.n	8011df2 <_vfiprintf_r+0x1a2>
 8011d5a:	b1b0      	cbz	r0, 8011d8a <_vfiprintf_r+0x13a>
 8011d5c:	9207      	str	r2, [sp, #28]
 8011d5e:	e014      	b.n	8011d8a <_vfiprintf_r+0x13a>
 8011d60:	eba0 0308 	sub.w	r3, r0, r8
 8011d64:	fa09 f303 	lsl.w	r3, r9, r3
 8011d68:	4313      	orrs	r3, r2
 8011d6a:	9304      	str	r3, [sp, #16]
 8011d6c:	46a2      	mov	sl, r4
 8011d6e:	e7d2      	b.n	8011d16 <_vfiprintf_r+0xc6>
 8011d70:	9b03      	ldr	r3, [sp, #12]
 8011d72:	1d19      	adds	r1, r3, #4
 8011d74:	681b      	ldr	r3, [r3, #0]
 8011d76:	9103      	str	r1, [sp, #12]
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	bfbb      	ittet	lt
 8011d7c:	425b      	neglt	r3, r3
 8011d7e:	f042 0202 	orrlt.w	r2, r2, #2
 8011d82:	9307      	strge	r3, [sp, #28]
 8011d84:	9307      	strlt	r3, [sp, #28]
 8011d86:	bfb8      	it	lt
 8011d88:	9204      	strlt	r2, [sp, #16]
 8011d8a:	7823      	ldrb	r3, [r4, #0]
 8011d8c:	2b2e      	cmp	r3, #46	@ 0x2e
 8011d8e:	d10a      	bne.n	8011da6 <_vfiprintf_r+0x156>
 8011d90:	7863      	ldrb	r3, [r4, #1]
 8011d92:	2b2a      	cmp	r3, #42	@ 0x2a
 8011d94:	d132      	bne.n	8011dfc <_vfiprintf_r+0x1ac>
 8011d96:	9b03      	ldr	r3, [sp, #12]
 8011d98:	1d1a      	adds	r2, r3, #4
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	9203      	str	r2, [sp, #12]
 8011d9e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011da2:	3402      	adds	r4, #2
 8011da4:	9305      	str	r3, [sp, #20]
 8011da6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011e7c <_vfiprintf_r+0x22c>
 8011daa:	7821      	ldrb	r1, [r4, #0]
 8011dac:	2203      	movs	r2, #3
 8011dae:	4650      	mov	r0, sl
 8011db0:	f7ee fa3e 	bl	8000230 <memchr>
 8011db4:	b138      	cbz	r0, 8011dc6 <_vfiprintf_r+0x176>
 8011db6:	9b04      	ldr	r3, [sp, #16]
 8011db8:	eba0 000a 	sub.w	r0, r0, sl
 8011dbc:	2240      	movs	r2, #64	@ 0x40
 8011dbe:	4082      	lsls	r2, r0
 8011dc0:	4313      	orrs	r3, r2
 8011dc2:	3401      	adds	r4, #1
 8011dc4:	9304      	str	r3, [sp, #16]
 8011dc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011dca:	4829      	ldr	r0, [pc, #164]	@ (8011e70 <_vfiprintf_r+0x220>)
 8011dcc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011dd0:	2206      	movs	r2, #6
 8011dd2:	f7ee fa2d 	bl	8000230 <memchr>
 8011dd6:	2800      	cmp	r0, #0
 8011dd8:	d03f      	beq.n	8011e5a <_vfiprintf_r+0x20a>
 8011dda:	4b26      	ldr	r3, [pc, #152]	@ (8011e74 <_vfiprintf_r+0x224>)
 8011ddc:	bb1b      	cbnz	r3, 8011e26 <_vfiprintf_r+0x1d6>
 8011dde:	9b03      	ldr	r3, [sp, #12]
 8011de0:	3307      	adds	r3, #7
 8011de2:	f023 0307 	bic.w	r3, r3, #7
 8011de6:	3308      	adds	r3, #8
 8011de8:	9303      	str	r3, [sp, #12]
 8011dea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011dec:	443b      	add	r3, r7
 8011dee:	9309      	str	r3, [sp, #36]	@ 0x24
 8011df0:	e76a      	b.n	8011cc8 <_vfiprintf_r+0x78>
 8011df2:	fb0c 3202 	mla	r2, ip, r2, r3
 8011df6:	460c      	mov	r4, r1
 8011df8:	2001      	movs	r0, #1
 8011dfa:	e7a8      	b.n	8011d4e <_vfiprintf_r+0xfe>
 8011dfc:	2300      	movs	r3, #0
 8011dfe:	3401      	adds	r4, #1
 8011e00:	9305      	str	r3, [sp, #20]
 8011e02:	4619      	mov	r1, r3
 8011e04:	f04f 0c0a 	mov.w	ip, #10
 8011e08:	4620      	mov	r0, r4
 8011e0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011e0e:	3a30      	subs	r2, #48	@ 0x30
 8011e10:	2a09      	cmp	r2, #9
 8011e12:	d903      	bls.n	8011e1c <_vfiprintf_r+0x1cc>
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d0c6      	beq.n	8011da6 <_vfiprintf_r+0x156>
 8011e18:	9105      	str	r1, [sp, #20]
 8011e1a:	e7c4      	b.n	8011da6 <_vfiprintf_r+0x156>
 8011e1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8011e20:	4604      	mov	r4, r0
 8011e22:	2301      	movs	r3, #1
 8011e24:	e7f0      	b.n	8011e08 <_vfiprintf_r+0x1b8>
 8011e26:	ab03      	add	r3, sp, #12
 8011e28:	9300      	str	r3, [sp, #0]
 8011e2a:	462a      	mov	r2, r5
 8011e2c:	4b12      	ldr	r3, [pc, #72]	@ (8011e78 <_vfiprintf_r+0x228>)
 8011e2e:	a904      	add	r1, sp, #16
 8011e30:	4630      	mov	r0, r6
 8011e32:	f7fc fa15 	bl	800e260 <_printf_float>
 8011e36:	4607      	mov	r7, r0
 8011e38:	1c78      	adds	r0, r7, #1
 8011e3a:	d1d6      	bne.n	8011dea <_vfiprintf_r+0x19a>
 8011e3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011e3e:	07d9      	lsls	r1, r3, #31
 8011e40:	d405      	bmi.n	8011e4e <_vfiprintf_r+0x1fe>
 8011e42:	89ab      	ldrh	r3, [r5, #12]
 8011e44:	059a      	lsls	r2, r3, #22
 8011e46:	d402      	bmi.n	8011e4e <_vfiprintf_r+0x1fe>
 8011e48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011e4a:	f7fd fdd4 	bl	800f9f6 <__retarget_lock_release_recursive>
 8011e4e:	89ab      	ldrh	r3, [r5, #12]
 8011e50:	065b      	lsls	r3, r3, #25
 8011e52:	f53f af1f 	bmi.w	8011c94 <_vfiprintf_r+0x44>
 8011e56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011e58:	e71e      	b.n	8011c98 <_vfiprintf_r+0x48>
 8011e5a:	ab03      	add	r3, sp, #12
 8011e5c:	9300      	str	r3, [sp, #0]
 8011e5e:	462a      	mov	r2, r5
 8011e60:	4b05      	ldr	r3, [pc, #20]	@ (8011e78 <_vfiprintf_r+0x228>)
 8011e62:	a904      	add	r1, sp, #16
 8011e64:	4630      	mov	r0, r6
 8011e66:	f7fc fc93 	bl	800e790 <_printf_i>
 8011e6a:	e7e4      	b.n	8011e36 <_vfiprintf_r+0x1e6>
 8011e6c:	08013d5f 	.word	0x08013d5f
 8011e70:	08013d69 	.word	0x08013d69
 8011e74:	0800e261 	.word	0x0800e261
 8011e78:	08011c2b 	.word	0x08011c2b
 8011e7c:	08013d65 	.word	0x08013d65

08011e80 <_getc_r>:
 8011e80:	b538      	push	{r3, r4, r5, lr}
 8011e82:	460c      	mov	r4, r1
 8011e84:	4605      	mov	r5, r0
 8011e86:	b118      	cbz	r0, 8011e90 <_getc_r+0x10>
 8011e88:	6a03      	ldr	r3, [r0, #32]
 8011e8a:	b90b      	cbnz	r3, 8011e90 <_getc_r+0x10>
 8011e8c:	f7fd f9a8 	bl	800f1e0 <__sinit>
 8011e90:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011e92:	07d8      	lsls	r0, r3, #31
 8011e94:	d405      	bmi.n	8011ea2 <_getc_r+0x22>
 8011e96:	89a3      	ldrh	r3, [r4, #12]
 8011e98:	0599      	lsls	r1, r3, #22
 8011e9a:	d402      	bmi.n	8011ea2 <_getc_r+0x22>
 8011e9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011e9e:	f7fd fda9 	bl	800f9f4 <__retarget_lock_acquire_recursive>
 8011ea2:	6863      	ldr	r3, [r4, #4]
 8011ea4:	3b01      	subs	r3, #1
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	6063      	str	r3, [r4, #4]
 8011eaa:	da0f      	bge.n	8011ecc <_getc_r+0x4c>
 8011eac:	4628      	mov	r0, r5
 8011eae:	4621      	mov	r1, r4
 8011eb0:	f000 f8a7 	bl	8012002 <__srget_r>
 8011eb4:	4605      	mov	r5, r0
 8011eb6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011eb8:	07da      	lsls	r2, r3, #31
 8011eba:	d405      	bmi.n	8011ec8 <_getc_r+0x48>
 8011ebc:	89a3      	ldrh	r3, [r4, #12]
 8011ebe:	059b      	lsls	r3, r3, #22
 8011ec0:	d402      	bmi.n	8011ec8 <_getc_r+0x48>
 8011ec2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011ec4:	f7fd fd97 	bl	800f9f6 <__retarget_lock_release_recursive>
 8011ec8:	4628      	mov	r0, r5
 8011eca:	bd38      	pop	{r3, r4, r5, pc}
 8011ecc:	6823      	ldr	r3, [r4, #0]
 8011ece:	1c5a      	adds	r2, r3, #1
 8011ed0:	6022      	str	r2, [r4, #0]
 8011ed2:	781d      	ldrb	r5, [r3, #0]
 8011ed4:	e7ef      	b.n	8011eb6 <_getc_r+0x36>

08011ed6 <__swhatbuf_r>:
 8011ed6:	b570      	push	{r4, r5, r6, lr}
 8011ed8:	460c      	mov	r4, r1
 8011eda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ede:	2900      	cmp	r1, #0
 8011ee0:	b096      	sub	sp, #88	@ 0x58
 8011ee2:	4615      	mov	r5, r2
 8011ee4:	461e      	mov	r6, r3
 8011ee6:	da0d      	bge.n	8011f04 <__swhatbuf_r+0x2e>
 8011ee8:	89a3      	ldrh	r3, [r4, #12]
 8011eea:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011eee:	f04f 0100 	mov.w	r1, #0
 8011ef2:	bf14      	ite	ne
 8011ef4:	2340      	movne	r3, #64	@ 0x40
 8011ef6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011efa:	2000      	movs	r0, #0
 8011efc:	6031      	str	r1, [r6, #0]
 8011efe:	602b      	str	r3, [r5, #0]
 8011f00:	b016      	add	sp, #88	@ 0x58
 8011f02:	bd70      	pop	{r4, r5, r6, pc}
 8011f04:	466a      	mov	r2, sp
 8011f06:	f000 f8df 	bl	80120c8 <_fstat_r>
 8011f0a:	2800      	cmp	r0, #0
 8011f0c:	dbec      	blt.n	8011ee8 <__swhatbuf_r+0x12>
 8011f0e:	9901      	ldr	r1, [sp, #4]
 8011f10:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011f14:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011f18:	4259      	negs	r1, r3
 8011f1a:	4159      	adcs	r1, r3
 8011f1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011f20:	e7eb      	b.n	8011efa <__swhatbuf_r+0x24>

08011f22 <__smakebuf_r>:
 8011f22:	898b      	ldrh	r3, [r1, #12]
 8011f24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011f26:	079d      	lsls	r5, r3, #30
 8011f28:	4606      	mov	r6, r0
 8011f2a:	460c      	mov	r4, r1
 8011f2c:	d507      	bpl.n	8011f3e <__smakebuf_r+0x1c>
 8011f2e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011f32:	6023      	str	r3, [r4, #0]
 8011f34:	6123      	str	r3, [r4, #16]
 8011f36:	2301      	movs	r3, #1
 8011f38:	6163      	str	r3, [r4, #20]
 8011f3a:	b003      	add	sp, #12
 8011f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011f3e:	ab01      	add	r3, sp, #4
 8011f40:	466a      	mov	r2, sp
 8011f42:	f7ff ffc8 	bl	8011ed6 <__swhatbuf_r>
 8011f46:	9f00      	ldr	r7, [sp, #0]
 8011f48:	4605      	mov	r5, r0
 8011f4a:	4639      	mov	r1, r7
 8011f4c:	4630      	mov	r0, r6
 8011f4e:	f7fb f9a7 	bl	800d2a0 <_malloc_r>
 8011f52:	b948      	cbnz	r0, 8011f68 <__smakebuf_r+0x46>
 8011f54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f58:	059a      	lsls	r2, r3, #22
 8011f5a:	d4ee      	bmi.n	8011f3a <__smakebuf_r+0x18>
 8011f5c:	f023 0303 	bic.w	r3, r3, #3
 8011f60:	f043 0302 	orr.w	r3, r3, #2
 8011f64:	81a3      	strh	r3, [r4, #12]
 8011f66:	e7e2      	b.n	8011f2e <__smakebuf_r+0xc>
 8011f68:	89a3      	ldrh	r3, [r4, #12]
 8011f6a:	6020      	str	r0, [r4, #0]
 8011f6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011f70:	81a3      	strh	r3, [r4, #12]
 8011f72:	9b01      	ldr	r3, [sp, #4]
 8011f74:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011f78:	b15b      	cbz	r3, 8011f92 <__smakebuf_r+0x70>
 8011f7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011f7e:	4630      	mov	r0, r6
 8011f80:	f000 f8b4 	bl	80120ec <_isatty_r>
 8011f84:	b128      	cbz	r0, 8011f92 <__smakebuf_r+0x70>
 8011f86:	89a3      	ldrh	r3, [r4, #12]
 8011f88:	f023 0303 	bic.w	r3, r3, #3
 8011f8c:	f043 0301 	orr.w	r3, r3, #1
 8011f90:	81a3      	strh	r3, [r4, #12]
 8011f92:	89a3      	ldrh	r3, [r4, #12]
 8011f94:	431d      	orrs	r5, r3
 8011f96:	81a5      	strh	r5, [r4, #12]
 8011f98:	e7cf      	b.n	8011f3a <__smakebuf_r+0x18>

08011f9a <_putc_r>:
 8011f9a:	b570      	push	{r4, r5, r6, lr}
 8011f9c:	460d      	mov	r5, r1
 8011f9e:	4614      	mov	r4, r2
 8011fa0:	4606      	mov	r6, r0
 8011fa2:	b118      	cbz	r0, 8011fac <_putc_r+0x12>
 8011fa4:	6a03      	ldr	r3, [r0, #32]
 8011fa6:	b90b      	cbnz	r3, 8011fac <_putc_r+0x12>
 8011fa8:	f7fd f91a 	bl	800f1e0 <__sinit>
 8011fac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011fae:	07d8      	lsls	r0, r3, #31
 8011fb0:	d405      	bmi.n	8011fbe <_putc_r+0x24>
 8011fb2:	89a3      	ldrh	r3, [r4, #12]
 8011fb4:	0599      	lsls	r1, r3, #22
 8011fb6:	d402      	bmi.n	8011fbe <_putc_r+0x24>
 8011fb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011fba:	f7fd fd1b 	bl	800f9f4 <__retarget_lock_acquire_recursive>
 8011fbe:	68a3      	ldr	r3, [r4, #8]
 8011fc0:	3b01      	subs	r3, #1
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	60a3      	str	r3, [r4, #8]
 8011fc6:	da05      	bge.n	8011fd4 <_putc_r+0x3a>
 8011fc8:	69a2      	ldr	r2, [r4, #24]
 8011fca:	4293      	cmp	r3, r2
 8011fcc:	db12      	blt.n	8011ff4 <_putc_r+0x5a>
 8011fce:	b2eb      	uxtb	r3, r5
 8011fd0:	2b0a      	cmp	r3, #10
 8011fd2:	d00f      	beq.n	8011ff4 <_putc_r+0x5a>
 8011fd4:	6823      	ldr	r3, [r4, #0]
 8011fd6:	1c5a      	adds	r2, r3, #1
 8011fd8:	6022      	str	r2, [r4, #0]
 8011fda:	701d      	strb	r5, [r3, #0]
 8011fdc:	b2ed      	uxtb	r5, r5
 8011fde:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011fe0:	07da      	lsls	r2, r3, #31
 8011fe2:	d405      	bmi.n	8011ff0 <_putc_r+0x56>
 8011fe4:	89a3      	ldrh	r3, [r4, #12]
 8011fe6:	059b      	lsls	r3, r3, #22
 8011fe8:	d402      	bmi.n	8011ff0 <_putc_r+0x56>
 8011fea:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011fec:	f7fd fd03 	bl	800f9f6 <__retarget_lock_release_recursive>
 8011ff0:	4628      	mov	r0, r5
 8011ff2:	bd70      	pop	{r4, r5, r6, pc}
 8011ff4:	4629      	mov	r1, r5
 8011ff6:	4622      	mov	r2, r4
 8011ff8:	4630      	mov	r0, r6
 8011ffa:	f7fd fa1e 	bl	800f43a <__swbuf_r>
 8011ffe:	4605      	mov	r5, r0
 8012000:	e7ed      	b.n	8011fde <_putc_r+0x44>

08012002 <__srget_r>:
 8012002:	b538      	push	{r3, r4, r5, lr}
 8012004:	460c      	mov	r4, r1
 8012006:	4605      	mov	r5, r0
 8012008:	b118      	cbz	r0, 8012012 <__srget_r+0x10>
 801200a:	6a03      	ldr	r3, [r0, #32]
 801200c:	b90b      	cbnz	r3, 8012012 <__srget_r+0x10>
 801200e:	f7fd f8e7 	bl	800f1e0 <__sinit>
 8012012:	4621      	mov	r1, r4
 8012014:	4628      	mov	r0, r5
 8012016:	f000 f8a3 	bl	8012160 <__srefill_r>
 801201a:	b938      	cbnz	r0, 801202c <__srget_r+0x2a>
 801201c:	6863      	ldr	r3, [r4, #4]
 801201e:	3b01      	subs	r3, #1
 8012020:	6063      	str	r3, [r4, #4]
 8012022:	6823      	ldr	r3, [r4, #0]
 8012024:	1c5a      	adds	r2, r3, #1
 8012026:	6022      	str	r2, [r4, #0]
 8012028:	7818      	ldrb	r0, [r3, #0]
 801202a:	bd38      	pop	{r3, r4, r5, pc}
 801202c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012030:	e7fb      	b.n	801202a <__srget_r+0x28>

08012032 <memmove>:
 8012032:	4288      	cmp	r0, r1
 8012034:	b510      	push	{r4, lr}
 8012036:	eb01 0402 	add.w	r4, r1, r2
 801203a:	d902      	bls.n	8012042 <memmove+0x10>
 801203c:	4284      	cmp	r4, r0
 801203e:	4623      	mov	r3, r4
 8012040:	d807      	bhi.n	8012052 <memmove+0x20>
 8012042:	1e43      	subs	r3, r0, #1
 8012044:	42a1      	cmp	r1, r4
 8012046:	d008      	beq.n	801205a <memmove+0x28>
 8012048:	f811 2b01 	ldrb.w	r2, [r1], #1
 801204c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012050:	e7f8      	b.n	8012044 <memmove+0x12>
 8012052:	4402      	add	r2, r0
 8012054:	4601      	mov	r1, r0
 8012056:	428a      	cmp	r2, r1
 8012058:	d100      	bne.n	801205c <memmove+0x2a>
 801205a:	bd10      	pop	{r4, pc}
 801205c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012060:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012064:	e7f7      	b.n	8012056 <memmove+0x24>

08012066 <_raise_r>:
 8012066:	291f      	cmp	r1, #31
 8012068:	b538      	push	{r3, r4, r5, lr}
 801206a:	4605      	mov	r5, r0
 801206c:	460c      	mov	r4, r1
 801206e:	d904      	bls.n	801207a <_raise_r+0x14>
 8012070:	2316      	movs	r3, #22
 8012072:	6003      	str	r3, [r0, #0]
 8012074:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012078:	bd38      	pop	{r3, r4, r5, pc}
 801207a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801207c:	b112      	cbz	r2, 8012084 <_raise_r+0x1e>
 801207e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012082:	b94b      	cbnz	r3, 8012098 <_raise_r+0x32>
 8012084:	4628      	mov	r0, r5
 8012086:	f000 f853 	bl	8012130 <_getpid_r>
 801208a:	4622      	mov	r2, r4
 801208c:	4601      	mov	r1, r0
 801208e:	4628      	mov	r0, r5
 8012090:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012094:	f000 b83a 	b.w	801210c <_kill_r>
 8012098:	2b01      	cmp	r3, #1
 801209a:	d00a      	beq.n	80120b2 <_raise_r+0x4c>
 801209c:	1c59      	adds	r1, r3, #1
 801209e:	d103      	bne.n	80120a8 <_raise_r+0x42>
 80120a0:	2316      	movs	r3, #22
 80120a2:	6003      	str	r3, [r0, #0]
 80120a4:	2001      	movs	r0, #1
 80120a6:	e7e7      	b.n	8012078 <_raise_r+0x12>
 80120a8:	2100      	movs	r1, #0
 80120aa:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80120ae:	4620      	mov	r0, r4
 80120b0:	4798      	blx	r3
 80120b2:	2000      	movs	r0, #0
 80120b4:	e7e0      	b.n	8012078 <_raise_r+0x12>
	...

080120b8 <raise>:
 80120b8:	4b02      	ldr	r3, [pc, #8]	@ (80120c4 <raise+0xc>)
 80120ba:	4601      	mov	r1, r0
 80120bc:	6818      	ldr	r0, [r3, #0]
 80120be:	f7ff bfd2 	b.w	8012066 <_raise_r>
 80120c2:	bf00      	nop
 80120c4:	200001c0 	.word	0x200001c0

080120c8 <_fstat_r>:
 80120c8:	b538      	push	{r3, r4, r5, lr}
 80120ca:	4d07      	ldr	r5, [pc, #28]	@ (80120e8 <_fstat_r+0x20>)
 80120cc:	2300      	movs	r3, #0
 80120ce:	4604      	mov	r4, r0
 80120d0:	4608      	mov	r0, r1
 80120d2:	4611      	mov	r1, r2
 80120d4:	602b      	str	r3, [r5, #0]
 80120d6:	f7f1 ff7d 	bl	8003fd4 <_fstat>
 80120da:	1c43      	adds	r3, r0, #1
 80120dc:	d102      	bne.n	80120e4 <_fstat_r+0x1c>
 80120de:	682b      	ldr	r3, [r5, #0]
 80120e0:	b103      	cbz	r3, 80120e4 <_fstat_r+0x1c>
 80120e2:	6023      	str	r3, [r4, #0]
 80120e4:	bd38      	pop	{r3, r4, r5, pc}
 80120e6:	bf00      	nop
 80120e8:	20000644 	.word	0x20000644

080120ec <_isatty_r>:
 80120ec:	b538      	push	{r3, r4, r5, lr}
 80120ee:	4d06      	ldr	r5, [pc, #24]	@ (8012108 <_isatty_r+0x1c>)
 80120f0:	2300      	movs	r3, #0
 80120f2:	4604      	mov	r4, r0
 80120f4:	4608      	mov	r0, r1
 80120f6:	602b      	str	r3, [r5, #0]
 80120f8:	f7f1 ff93 	bl	8004022 <_isatty>
 80120fc:	1c43      	adds	r3, r0, #1
 80120fe:	d102      	bne.n	8012106 <_isatty_r+0x1a>
 8012100:	682b      	ldr	r3, [r5, #0]
 8012102:	b103      	cbz	r3, 8012106 <_isatty_r+0x1a>
 8012104:	6023      	str	r3, [r4, #0]
 8012106:	bd38      	pop	{r3, r4, r5, pc}
 8012108:	20000644 	.word	0x20000644

0801210c <_kill_r>:
 801210c:	b538      	push	{r3, r4, r5, lr}
 801210e:	4d07      	ldr	r5, [pc, #28]	@ (801212c <_kill_r+0x20>)
 8012110:	2300      	movs	r3, #0
 8012112:	4604      	mov	r4, r0
 8012114:	4608      	mov	r0, r1
 8012116:	4611      	mov	r1, r2
 8012118:	602b      	str	r3, [r5, #0]
 801211a:	f7f1 fe73 	bl	8003e04 <_kill>
 801211e:	1c43      	adds	r3, r0, #1
 8012120:	d102      	bne.n	8012128 <_kill_r+0x1c>
 8012122:	682b      	ldr	r3, [r5, #0]
 8012124:	b103      	cbz	r3, 8012128 <_kill_r+0x1c>
 8012126:	6023      	str	r3, [r4, #0]
 8012128:	bd38      	pop	{r3, r4, r5, pc}
 801212a:	bf00      	nop
 801212c:	20000644 	.word	0x20000644

08012130 <_getpid_r>:
 8012130:	f7f1 be60 	b.w	8003df4 <_getpid>

08012134 <_malloc_usable_size_r>:
 8012134:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012138:	1f18      	subs	r0, r3, #4
 801213a:	2b00      	cmp	r3, #0
 801213c:	bfbc      	itt	lt
 801213e:	580b      	ldrlt	r3, [r1, r0]
 8012140:	18c0      	addlt	r0, r0, r3
 8012142:	4770      	bx	lr

08012144 <lflush>:
 8012144:	898b      	ldrh	r3, [r1, #12]
 8012146:	f003 0309 	and.w	r3, r3, #9
 801214a:	2b09      	cmp	r3, #9
 801214c:	d103      	bne.n	8012156 <lflush+0x12>
 801214e:	4b03      	ldr	r3, [pc, #12]	@ (801215c <lflush+0x18>)
 8012150:	6818      	ldr	r0, [r3, #0]
 8012152:	f7fc bf2b 	b.w	800efac <_fflush_r>
 8012156:	2000      	movs	r0, #0
 8012158:	4770      	bx	lr
 801215a:	bf00      	nop
 801215c:	200001c0 	.word	0x200001c0

08012160 <__srefill_r>:
 8012160:	b570      	push	{r4, r5, r6, lr}
 8012162:	460c      	mov	r4, r1
 8012164:	4605      	mov	r5, r0
 8012166:	b118      	cbz	r0, 8012170 <__srefill_r+0x10>
 8012168:	6a03      	ldr	r3, [r0, #32]
 801216a:	b90b      	cbnz	r3, 8012170 <__srefill_r+0x10>
 801216c:	f7fd f838 	bl	800f1e0 <__sinit>
 8012170:	2300      	movs	r3, #0
 8012172:	6063      	str	r3, [r4, #4]
 8012174:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012178:	069e      	lsls	r6, r3, #26
 801217a:	d408      	bmi.n	801218e <__srefill_r+0x2e>
 801217c:	0758      	lsls	r0, r3, #29
 801217e:	d445      	bmi.n	801220c <__srefill_r+0xac>
 8012180:	06d9      	lsls	r1, r3, #27
 8012182:	d407      	bmi.n	8012194 <__srefill_r+0x34>
 8012184:	2209      	movs	r2, #9
 8012186:	602a      	str	r2, [r5, #0]
 8012188:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801218c:	81a3      	strh	r3, [r4, #12]
 801218e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012192:	bd70      	pop	{r4, r5, r6, pc}
 8012194:	071a      	lsls	r2, r3, #28
 8012196:	d50b      	bpl.n	80121b0 <__srefill_r+0x50>
 8012198:	4621      	mov	r1, r4
 801219a:	4628      	mov	r0, r5
 801219c:	f7fc ff06 	bl	800efac <_fflush_r>
 80121a0:	2800      	cmp	r0, #0
 80121a2:	d1f4      	bne.n	801218e <__srefill_r+0x2e>
 80121a4:	89a3      	ldrh	r3, [r4, #12]
 80121a6:	60a0      	str	r0, [r4, #8]
 80121a8:	f023 0308 	bic.w	r3, r3, #8
 80121ac:	81a3      	strh	r3, [r4, #12]
 80121ae:	61a0      	str	r0, [r4, #24]
 80121b0:	89a3      	ldrh	r3, [r4, #12]
 80121b2:	f043 0304 	orr.w	r3, r3, #4
 80121b6:	81a3      	strh	r3, [r4, #12]
 80121b8:	6923      	ldr	r3, [r4, #16]
 80121ba:	b91b      	cbnz	r3, 80121c4 <__srefill_r+0x64>
 80121bc:	4621      	mov	r1, r4
 80121be:	4628      	mov	r0, r5
 80121c0:	f7ff feaf 	bl	8011f22 <__smakebuf_r>
 80121c4:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 80121c8:	07b3      	lsls	r3, r6, #30
 80121ca:	d00f      	beq.n	80121ec <__srefill_r+0x8c>
 80121cc:	2301      	movs	r3, #1
 80121ce:	4a1b      	ldr	r2, [pc, #108]	@ (801223c <__srefill_r+0xdc>)
 80121d0:	491b      	ldr	r1, [pc, #108]	@ (8012240 <__srefill_r+0xe0>)
 80121d2:	481c      	ldr	r0, [pc, #112]	@ (8012244 <__srefill_r+0xe4>)
 80121d4:	81a3      	strh	r3, [r4, #12]
 80121d6:	f7fd f82d 	bl	800f234 <_fwalk_sglue>
 80121da:	81a6      	strh	r6, [r4, #12]
 80121dc:	f006 0609 	and.w	r6, r6, #9
 80121e0:	2e09      	cmp	r6, #9
 80121e2:	d103      	bne.n	80121ec <__srefill_r+0x8c>
 80121e4:	4621      	mov	r1, r4
 80121e6:	4628      	mov	r0, r5
 80121e8:	f7fc fe5c 	bl	800eea4 <__sflush_r>
 80121ec:	6922      	ldr	r2, [r4, #16]
 80121ee:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 80121f0:	6963      	ldr	r3, [r4, #20]
 80121f2:	6a21      	ldr	r1, [r4, #32]
 80121f4:	6022      	str	r2, [r4, #0]
 80121f6:	4628      	mov	r0, r5
 80121f8:	47b0      	blx	r6
 80121fa:	2800      	cmp	r0, #0
 80121fc:	6060      	str	r0, [r4, #4]
 80121fe:	dc17      	bgt.n	8012230 <__srefill_r+0xd0>
 8012200:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012204:	d116      	bne.n	8012234 <__srefill_r+0xd4>
 8012206:	f043 0320 	orr.w	r3, r3, #32
 801220a:	e7bf      	b.n	801218c <__srefill_r+0x2c>
 801220c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801220e:	2900      	cmp	r1, #0
 8012210:	d0d2      	beq.n	80121b8 <__srefill_r+0x58>
 8012212:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012216:	4299      	cmp	r1, r3
 8012218:	d002      	beq.n	8012220 <__srefill_r+0xc0>
 801221a:	4628      	mov	r0, r5
 801221c:	f7fe fa6c 	bl	80106f8 <_free_r>
 8012220:	2300      	movs	r3, #0
 8012222:	6363      	str	r3, [r4, #52]	@ 0x34
 8012224:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012226:	6063      	str	r3, [r4, #4]
 8012228:	2b00      	cmp	r3, #0
 801222a:	d0c5      	beq.n	80121b8 <__srefill_r+0x58>
 801222c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801222e:	6023      	str	r3, [r4, #0]
 8012230:	2000      	movs	r0, #0
 8012232:	e7ae      	b.n	8012192 <__srefill_r+0x32>
 8012234:	2200      	movs	r2, #0
 8012236:	6062      	str	r2, [r4, #4]
 8012238:	e7a6      	b.n	8012188 <__srefill_r+0x28>
 801223a:	bf00      	nop
 801223c:	20000048 	.word	0x20000048
 8012240:	08012145 	.word	0x08012145
 8012244:	200001c4 	.word	0x200001c4

08012248 <_init>:
 8012248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801224a:	bf00      	nop
 801224c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801224e:	bc08      	pop	{r3}
 8012250:	469e      	mov	lr, r3
 8012252:	4770      	bx	lr

08012254 <_fini>:
 8012254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012256:	bf00      	nop
 8012258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801225a:	bc08      	pop	{r3}
 801225c:	469e      	mov	lr, r3
 801225e:	4770      	bx	lr
